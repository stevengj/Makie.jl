~~~
<div id="453b63a4-0e61-4952-8eed-cf432a488195" data-jscall-id="subsession-application-dom">
  <div>
    <div>
      <script src="data:application/javascript;base64,// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var Hc = "157", zx = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
}, Vx = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
}, kd = 0, rl = 1, Hd = 2, kx = 3, Hx = 0, cd = 1, Gd = 2, pn = 3, Bn = 0, Ft = 1, gn = 2, Gx = 2, Dn = 0, Wi = 1, al = 2, ol = 3, cl = 4, Wd = 5, Bi = 100, Xd = 101, qd = 102, ll = 103, hl = 104, Yd = 200, Zd = 201, Jd = 202, $d = 203, ld = 204, hd = 205, Kd = 206, Qd = 207, jd = 208, ef = 209, tf = 210, nf = 0, sf = 1, rf = 2, uo = 3, af = 4, of = 5, cf = 6, lf = 7, xa = 0, hf = 1, uf = 2, Nn = 0, df = 1, ff = 2, pf = 3, mf = 4, gf = 5, Gc = 300, zn = 301, ci = 302, Ir = 303, Ur = 304, Vs = 306, Dr = 1e3, It = 1001, Nr = 1002, pt = 1003, fo = 1004, Wx = 1004, Lr = 1005, Xx = 1005, mt = 1006, ud = 1007, qx = 1007, li = 1008, Yx = 1008, On = 1009, _f = 1010, xf = 1011, Wc = 1012, dd = 1013, Ln = 1014, xn = 1015, Ts = 1016, fd = 1017, pd = 1018, ii = 1020, vf = 1021, Wt = 1023, yf = 1024, Mf = 1025, si = 1026, Yi = 1027, Sf = 1028, md = 1029, bf = 1030, gd = 1031, _d = 1033, wa = 33776, Aa = 33777, Ra = 33778, Ca = 33779, ul = 35840, dl = 35841, fl = 35842, pl = 35843, Ef = 36196, ml = 37492, gl = 37496, _l = 37808, xl = 37809, vl = 37810, yl = 37811, Ml = 37812, Sl = 37813, bl = 37814, El = 37815, Tl = 37816, wl = 37817, Al = 37818, Rl = 37819, Cl = 37820, Pl = 37821, Pa = 36492, Ll = 36494, Il = 36495, Tf = 36283, Ul = 36284, Dl = 36285, Nl = 36286, wf = 2200, Af = 2201, Rf = 2202, Or = 2300, Fr = 2301, La = 2302, zi = 2400, Vi = 2401, Br = 2402, Xc = 2500, xd = 2501, Zx = 0, Jx = 1, $x = 2, vd = 3e3, ri = 3001, Cf = 3200, Pf = 3201, mi = 0, Lf = 1, Xt = "", vt = "srgb", Mn = "srgb-linear", qc = "display-p3", va = "display-p3-linear", zr = "linear", nt = "srgb", Vr = "rec709", kr = "p3", Kx = 0, Ia = 7680, Qx = 7681, jx = 7682, ev = 7683, tv = 34055, nv = 34056, iv = 5386, sv = 512, rv = 513, av = 514, ov = 515, cv = 516, lv = 517, hv = 518, If = 519, Uf = 512, Df = 513, Nf = 514, Of = 515, Ff = 516, Bf = 517, zf = 518, Vf = 519, Hr = 35044, uv = 35048, dv = 35040, fv = 35045, pv = 35049, mv = 35041, gv = 35046, _v = 35050, xv = 35042, vv = "100", Ol = "300 es", po = 1035, vn = 2e3, Gr = 2001, sn = class {
    addEventListener(e, t) {
        this._listeners === void 0 && (this._listeners = {});
        let n = this._listeners;
        n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
    }
    hasEventListener(e, t) {
        if (this._listeners === void 0) return !1;
        let n = this._listeners;
        return n[e] !== void 0 && n[e].indexOf(t) !== -1;
    }
    removeEventListener(e, t) {
        if (this._listeners === void 0) return;
        let i = this._listeners[e];
        if (i !== void 0) {
            let r = i.indexOf(t);
            r !== -1 && i.splice(r, 1);
        }
    }
    dispatchEvent(e) {
        if (this._listeners === void 0) return;
        let n = this._listeners[e.type];
        if (n !== void 0) {
            e.target = this;
            let i = n.slice(0);
            for(let r = 0, a = i.length; r < a; r++)i[r].call(this, e);
            e.target = null;
        }
    }
}, Et = [
    "00",
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "0a",
    "0b",
    "0c",
    "0d",
    "0e",
    "0f",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "1a",
    "1b",
    "1c",
    "1d",
    "1e",
    "1f",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "2a",
    "2b",
    "2c",
    "2d",
    "2e",
    "2f",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "3a",
    "3b",
    "3c",
    "3d",
    "3e",
    "3f",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "4a",
    "4b",
    "4c",
    "4d",
    "4e",
    "4f",
    "50",
    "51",
    "52",
    "53",
    "54",
    "55",
    "56",
    "57",
    "58",
    "59",
    "5a",
    "5b",
    "5c",
    "5d",
    "5e",
    "5f",
    "60",
    "61",
    "62",
    "63",
    "64",
    "65",
    "66",
    "67",
    "68",
    "69",
    "6a",
    "6b",
    "6c",
    "6d",
    "6e",
    "6f",
    "70",
    "71",
    "72",
    "73",
    "74",
    "75",
    "76",
    "77",
    "78",
    "79",
    "7a",
    "7b",
    "7c",
    "7d",
    "7e",
    "7f",
    "80",
    "81",
    "82",
    "83",
    "84",
    "85",
    "86",
    "87",
    "88",
    "89",
    "8a",
    "8b",
    "8c",
    "8d",
    "8e",
    "8f",
    "90",
    "91",
    "92",
    "93",
    "94",
    "95",
    "96",
    "97",
    "98",
    "99",
    "9a",
    "9b",
    "9c",
    "9d",
    "9e",
    "9f",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "a8",
    "a9",
    "aa",
    "ab",
    "ac",
    "ad",
    "ae",
    "af",
    "b0",
    "b1",
    "b2",
    "b3",
    "b4",
    "b5",
    "b6",
    "b7",
    "b8",
    "b9",
    "ba",
    "bb",
    "bc",
    "bd",
    "be",
    "bf",
    "c0",
    "c1",
    "c2",
    "c3",
    "c4",
    "c5",
    "c6",
    "c7",
    "c8",
    "c9",
    "ca",
    "cb",
    "cc",
    "cd",
    "ce",
    "cf",
    "d0",
    "d1",
    "d2",
    "d3",
    "d4",
    "d5",
    "d6",
    "d7",
    "d8",
    "d9",
    "da",
    "db",
    "dc",
    "dd",
    "de",
    "df",
    "e0",
    "e1",
    "e2",
    "e3",
    "e4",
    "e5",
    "e6",
    "e7",
    "e8",
    "e9",
    "ea",
    "eb",
    "ec",
    "ed",
    "ee",
    "ef",
    "f0",
    "f1",
    "f2",
    "f3",
    "f4",
    "f5",
    "f6",
    "f7",
    "f8",
    "f9",
    "fa",
    "fb",
    "fc",
    "fd",
    "fe",
    "ff"
], Fl = 1234567, ai = Math.PI / 180, Zi = 180 / Math.PI;
function kt() {
    let s1 = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
    return (Et[s1 & 255] + Et[s1 >> 8 & 255] + Et[s1 >> 16 & 255] + Et[s1 >> 24 & 255] + "-" + Et[e & 255] + Et[e >> 8 & 255] + "-" + Et[e >> 16 & 15 | 64] + Et[e >> 24 & 255] + "-" + Et[t & 63 | 128] + Et[t >> 8 & 255] + "-" + Et[t >> 16 & 255] + Et[t >> 24 & 255] + Et[n & 255] + Et[n >> 8 & 255] + Et[n >> 16 & 255] + Et[n >> 24 & 255]).toLowerCase();
}
function ct(s1, e, t) {
    return Math.max(e, Math.min(t, s1));
}
function Yc(s1, e) {
    return (s1 % e + e) % e;
}
function kf(s1, e, t, n, i) {
    return n + (s1 - e) * (i - n) / (t - e);
}
function Hf(s1, e, t) {
    return s1 !== e ? (t - s1) / (e - s1) : 0;
}
function ys(s1, e, t) {
    return (1 - t) * s1 + t * e;
}
function Gf(s1, e, t, n) {
    return ys(s1, e, 1 - Math.exp(-t * n));
}
function Wf(s1, e = 1) {
    return e - Math.abs(Yc(s1, e * 2) - e);
}
function Xf(s1, e, t) {
    return s1 <= e ? 0 : s1 >= t ? 1 : (s1 = (s1 - e) / (t - e), s1 * s1 * (3 - 2 * s1));
}
function qf(s1, e, t) {
    return s1 <= e ? 0 : s1 >= t ? 1 : (s1 = (s1 - e) / (t - e), s1 * s1 * s1 * (s1 * (s1 * 6 - 15) + 10));
}
function Yf(s1, e) {
    return s1 + Math.floor(Math.random() * (e - s1 + 1));
}
function Zf(s1, e) {
    return s1 + Math.random() * (e - s1);
}
function Jf(s1) {
    return s1 * (.5 - Math.random());
}
function $f(s1) {
    s1 !== void 0 && (Fl = s1);
    let e = Fl += 1831565813;
    return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function Kf(s1) {
    return s1 * ai;
}
function Qf(s1) {
    return s1 * Zi;
}
function mo(s1) {
    return (s1 & s1 - 1) === 0 && s1 !== 0;
}
function yd(s1) {
    return Math.pow(2, Math.ceil(Math.log(s1) / Math.LN2));
}
function Wr(s1) {
    return Math.pow(2, Math.floor(Math.log(s1) / Math.LN2));
}
function jf(s1, e, t, n, i) {
    let r = Math.cos, a = Math.sin, o = r(t / 2), c = a(t / 2), l = r((e + n) / 2), h = a((e + n) / 2), u = r((e - n) / 2), d = a((e - n) / 2), f = r((n - e) / 2), m = a((n - e) / 2);
    switch(i){
        case "XYX":
            s1.set(o * h, c * u, c * d, o * l);
            break;
        case "YZY":
            s1.set(c * d, o * h, c * u, o * l);
            break;
        case "ZXZ":
            s1.set(c * u, c * d, o * h, o * l);
            break;
        case "XZX":
            s1.set(o * h, c * m, c * f, o * l);
            break;
        case "YXY":
            s1.set(c * f, o * h, c * m, o * l);
            break;
        case "ZYZ":
            s1.set(c * m, c * f, o * h, o * l);
            break;
        default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
    }
}
function Ot(s1, e) {
    switch(e.constructor){
        case Float32Array:
            return s1;
        case Uint32Array:
            return s1 / 4294967295;
        case Uint16Array:
            return s1 / 65535;
        case Uint8Array:
            return s1 / 255;
        case Int32Array:
            return Math.max(s1 / 2147483647, -1);
        case Int16Array:
            return Math.max(s1 / 32767, -1);
        case Int8Array:
            return Math.max(s1 / 127, -1);
        default:
            throw new Error("Invalid component type.");
    }
}
function Be(s1, e) {
    switch(e.constructor){
        case Float32Array:
            return s1;
        case Uint32Array:
            return Math.round(s1 * 4294967295);
        case Uint16Array:
            return Math.round(s1 * 65535);
        case Uint8Array:
            return Math.round(s1 * 255);
        case Int32Array:
            return Math.round(s1 * 2147483647);
        case Int16Array:
            return Math.round(s1 * 32767);
        case Int8Array:
            return Math.round(s1 * 127);
        default:
            throw new Error("Invalid component type.");
    }
}
var yv = {
    DEG2RAD: ai,
    RAD2DEG: Zi,
    generateUUID: kt,
    clamp: ct,
    euclideanModulo: Yc,
    mapLinear: kf,
    inverseLerp: Hf,
    lerp: ys,
    damp: Gf,
    pingpong: Wf,
    smoothstep: Xf,
    smootherstep: qf,
    randInt: Yf,
    randFloat: Zf,
    randFloatSpread: Jf,
    seededRandom: $f,
    degToRad: Kf,
    radToDeg: Qf,
    isPowerOfTwo: mo,
    ceilPowerOfTwo: yd,
    floorPowerOfTwo: Wr,
    setQuaternionFromProperEuler: jf,
    normalize: Be,
    denormalize: Ot
}, Z = class s1 {
    constructor(e = 0, t = 0){
        s1.prototype.isVector2 = !0, this.x = e, this.y = t;
    }
    get width() {
        return this.x;
    }
    set width(e) {
        this.x = e;
    }
    get height() {
        return this.y;
    }
    set height(e) {
        this.y = e;
    }
    set(e, t) {
        return this.x = e, this.y = t, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this;
    }
    add(e) {
        return this.x += e.x, this.y += e.y, this;
    }
    addScalar(e) {
        return this.x += e, this.y += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this;
    }
    sub(e) {
        return this.x -= e.x, this.y -= e.y, this;
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this;
    }
    divide(e) {
        return this.x /= e.x, this.y /= e.y, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    applyMatrix3(e) {
        let t = this.x, n = this.y, i = e.elements;
        return this.x = i[0] * t + i[3] * n + i[6], this.y = i[1] * t + i[4] * n + i[7], this;
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
    }
    roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y;
    }
    cross(e) {
        return this.x * e.y - this.y * e.x;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    angle() {
        return Math.atan2(-this.y, -this.x) + Math.PI;
    }
    angleTo(e) {
        let t = Math.sqrt(this.lengthSq() * e.lengthSq());
        if (t === 0) return Math.PI / 2;
        let n = this.dot(e) / t;
        return Math.acos(ct(n, -1, 1));
    }
    distanceTo(e) {
        return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
        let t = this.x - e.x, n = this.y - e.y;
        return t * t + n * n;
    }
    manhattanDistanceTo(e) {
        return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e;
    }
    fromBufferAttribute(e, t) {
        return this.x = e.getX(t), this.y = e.getY(t), this;
    }
    rotateAround(e, t) {
        let n = Math.cos(t), i = Math.sin(t), r = this.x - e.x, a = this.y - e.y;
        return this.x = r * n - a * i + e.x, this.y = r * i + a * n + e.y, this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y;
    }
}, He = class s1 {
    constructor(e, t, n, i, r, a, o, c, l){
        s1.prototype.isMatrix3 = !0, this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ], e !== void 0 && this.set(e, t, n, i, r, a, o, c, l);
    }
    set(e, t, n, i, r, a, o, c, l) {
        let h = this.elements;
        return h[0] = e, h[1] = i, h[2] = o, h[3] = t, h[4] = r, h[5] = c, h[6] = n, h[7] = a, h[8] = l, this;
    }
    identity() {
        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
    }
    copy(e) {
        let t = this.elements, n = e.elements;
        return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
    }
    extractBasis(e, t, n) {
        return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
    }
    setFromMatrix4(e) {
        let t = e.elements;
        return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this;
    }
    multiply(e) {
        return this.multiplyMatrices(this, e);
    }
    premultiply(e) {
        return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
        let n = e.elements, i = t.elements, r = this.elements, a = n[0], o = n[3], c = n[6], l = n[1], h = n[4], u = n[7], d = n[2], f = n[5], m = n[8], _ = i[0], g = i[3], p = i[6], v = i[1], x = i[4], y = i[7], b = i[2], w = i[5], R = i[8];
        return r[0] = a * _ + o * v + c * b, r[3] = a * g + o * x + c * w, r[6] = a * p + o * y + c * R, r[1] = l * _ + h * v + u * b, r[4] = l * g + h * x + u * w, r[7] = l * p + h * y + u * R, r[2] = d * _ + f * v + m * b, r[5] = d * g + f * x + m * w, r[8] = d * p + f * y + m * R, this;
    }
    multiplyScalar(e) {
        let t = this.elements;
        return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
    }
    determinant() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8];
        return t * a * h - t * o * l - n * r * h + n * o * c + i * r * l - i * a * c;
    }
    invert() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], u = h * a - o * l, d = o * c - h * r, f = l * r - a * c, m = t * u + n * d + i * f;
        if (m === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        let _ = 1 / m;
        return e[0] = u * _, e[1] = (i * l - h * n) * _, e[2] = (o * n - i * a) * _, e[3] = d * _, e[4] = (h * t - i * c) * _, e[5] = (i * r - o * t) * _, e[6] = f * _, e[7] = (n * c - l * t) * _, e[8] = (a * t - n * r) * _, this;
    }
    transpose() {
        let e, t = this.elements;
        return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
    }
    getNormalMatrix(e) {
        return this.setFromMatrix4(e).invert().transpose();
    }
    transposeIntoArray(e) {
        let t = this.elements;
        return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
    }
    setUvTransform(e, t, n, i, r, a, o) {
        let c = Math.cos(r), l = Math.sin(r);
        return this.set(n * c, n * l, -n * (c * a + l * o) + a + e, -i * l, i * c, -i * (-l * a + c * o) + o + t, 0, 0, 1), this;
    }
    scale(e, t) {
        return this.premultiply(Ua.makeScale(e, t)), this;
    }
    rotate(e) {
        return this.premultiply(Ua.makeRotation(-e)), this;
    }
    translate(e, t) {
        return this.premultiply(Ua.makeTranslation(e, t)), this;
    }
    makeTranslation(e, t) {
        return e.isVector2 ? this.set(1, 0, e.x, 0, 1, e.y, 0, 0, 1) : this.set(1, 0, e, 0, 1, t, 0, 0, 1), this;
    }
    makeRotation(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, -n, 0, n, t, 0, 0, 0, 1), this;
    }
    makeScale(e, t) {
        return this.set(e, 0, 0, 0, t, 0, 0, 0, 1), this;
    }
    equals(e) {
        let t = this.elements, n = e.elements;
        for(let i = 0; i < 9; i++)if (t[i] !== n[i]) return !1;
        return !0;
    }
    fromArray(e, t = 0) {
        for(let n = 0; n < 9; n++)this.elements[n] = e[n + t];
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.elements;
        return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
    }
    clone() {
        return new this.constructor().fromArray(this.elements);
    }
}, Ua = new He;
function Md(s1) {
    for(let e = s1.length - 1; e >= 0; --e)if (s1[e] >= 65535) return !0;
    return !1;
}
var ep = {
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array
};
function ki(s1, e) {
    return new ep[s1](e);
}
function ws(s1) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", s1);
}
function tp() {
    let s1 = ws("canvas");
    return s1.style.display = "block", s1;
}
var Bl = {};
function Ms(s1) {
    s1 in Bl || (Bl[s1] = !0, console.warn(s1));
}
var zl = new He().set(.8224621, .177538, 0, .0331941, .9668058, 0, .0170827, .0723974, .9105199), Vl = new He().set(1.2249401, -.2249404, 0, -.0420569, 1.0420571, 0, -.0196376, -.0786361, 1.0982735), Gs = {
    [Mn]: {
        transfer: zr,
        primaries: Vr,
        toReference: (s1)=>s1,
        fromReference: (s1)=>s1
    },
    [vt]: {
        transfer: nt,
        primaries: Vr,
        toReference: (s1)=>s1.convertSRGBToLinear(),
        fromReference: (s1)=>s1.convertLinearToSRGB()
    },
    [va]: {
        transfer: zr,
        primaries: kr,
        toReference: (s1)=>s1.applyMatrix3(Vl),
        fromReference: (s1)=>s1.applyMatrix3(zl)
    },
    [qc]: {
        transfer: nt,
        primaries: kr,
        toReference: (s1)=>s1.convertSRGBToLinear().applyMatrix3(Vl),
        fromReference: (s1)=>s1.applyMatrix3(zl).convertLinearToSRGB()
    }
}, np = new Set([
    Mn,
    va
]), Qe = {
    enabled: !0,
    _workingColorSpace: Mn,
    get legacyMode () {
        return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled;
    },
    set legacyMode (s){
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !s;
    },
    get workingColorSpace () {
        return this._workingColorSpace;
    },
    set workingColorSpace (s){
        if (!np.has(s)) throw new Error(`Unsupported working color space, "${s}".`);
        this._workingColorSpace = s;
    },
    convert: function(s1, e, t) {
        if (this.enabled === !1 || e === t || !e || !t) return s1;
        let n = Gs[e].toReference, i = Gs[t].fromReference;
        return i(n(s1));
    },
    fromWorkingColorSpace: function(s1, e) {
        return this.convert(s1, this._workingColorSpace, e);
    },
    toWorkingColorSpace: function(s1, e) {
        return this.convert(s1, e, this._workingColorSpace);
    },
    getPrimaries: function(s1) {
        return Gs[s1].primaries;
    },
    getTransfer: function(s1) {
        return s1 === Xt ? zr : Gs[s1].transfer;
    }
};
function Xi(s1) {
    return s1 < .04045 ? s1 * .0773993808 : Math.pow(s1 * .9478672986 + .0521327014, 2.4);
}
function Da(s1) {
    return s1 < .0031308 ? s1 * 12.92 : 1.055 * Math.pow(s1, .41666) - .055;
}
var gi, Xr = class {
    static getDataURL(e) {
        if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u") return e.src;
        let t;
        if (e instanceof HTMLCanvasElement) t = e;
        else {
            gi === void 0 && (gi = ws("canvas")), gi.width = e.width, gi.height = e.height;
            let n = gi.getContext("2d");
            e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = gi;
        }
        return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", .6)) : t.toDataURL("image/png");
    }
    static sRGBToLinear(e) {
        if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
            let t = ws("canvas");
            t.width = e.width, t.height = e.height;
            let n = t.getContext("2d");
            n.drawImage(e, 0, 0, e.width, e.height);
            let i = n.getImageData(0, 0, e.width, e.height), r = i.data;
            for(let a = 0; a < r.length; a++)r[a] = Xi(r[a] / 255) * 255;
            return n.putImageData(i, 0, 0), t;
        } else if (e.data) {
            let t = e.data.slice(0);
            for(let n = 0; n < t.length; n++)t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor(Xi(t[n] / 255) * 255) : t[n] = Xi(t[n]);
            return {
                data: t,
                width: e.width,
                height: e.height
            };
        } else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
    }
}, ip = 0, In = class {
    constructor(e = null){
        this.isSource = !0, Object.defineProperty(this, "id", {
            value: ip++
        }), this.uuid = kt(), this.data = e, this.version = 0;
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        if (!t && e.images[this.uuid] !== void 0) return e.images[this.uuid];
        let n = {
            uuid: this.uuid,
            url: ""
        }, i = this.data;
        if (i !== null) {
            let r;
            if (Array.isArray(i)) {
                r = [];
                for(let a = 0, o = i.length; a < o; a++)i[a].isDataTexture ? r.push(Na(i[a].image)) : r.push(Na(i[a]));
            } else r = Na(i);
            n.url = r;
        }
        return t || (e.images[this.uuid] = n), n;
    }
};
function Na(s1) {
    return typeof HTMLImageElement < "u" && s1 instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && s1 instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && s1 instanceof ImageBitmap ? Xr.getDataURL(s1) : s1.data ? {
        data: Array.from(s1.data),
        width: s1.width,
        height: s1.height,
        type: s1.data.constructor.name
    } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
var sp = 0, St = class s1 extends sn {
    constructor(e = s1.DEFAULT_IMAGE, t = s1.DEFAULT_MAPPING, n = It, i = It, r = mt, a = li, o = Wt, c = On, l = s1.DEFAULT_ANISOTROPY, h = Xt){
        super(), this.isTexture = !0, Object.defineProperty(this, "id", {
            value: sp++
        }), this.uuid = kt(), this.name = "", this.source = new In(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = i, this.magFilter = r, this.minFilter = a, this.anisotropy = l, this.format = o, this.internalFormat = null, this.type = c, this.offset = new Z(0, 0), this.repeat = new Z(1, 1), this.center = new Z(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new He, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, typeof h == "string" ? this.colorSpace = h : (Ms("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = h === ri ? vt : Xt), this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1;
    }
    get image() {
        return this.source.data;
    }
    set image(e = null) {
        this.source.data = e;
    }
    updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        if (!t && e.textures[this.uuid] !== void 0) return e.textures[this.uuid];
        let n = {
            metadata: {
                version: 4.6,
                type: "Texture",
                generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(e).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [
                this.repeat.x,
                this.repeat.y
            ],
            offset: [
                this.offset.x,
                this.offset.y
            ],
            center: [
                this.center.x,
                this.center.y
            ],
            rotation: this.rotation,
            wrap: [
                this.wrapS,
                this.wrapT
            ],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
        };
        return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    transformUv(e) {
        if (this.mapping !== Gc) return e;
        if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1) switch(this.wrapS){
            case Dr:
                e.x = e.x - Math.floor(e.x);
                break;
            case It:
                e.x = e.x < 0 ? 0 : 1;
                break;
            case Nr:
                Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
                break;
        }
        if (e.y < 0 || e.y > 1) switch(this.wrapT){
            case Dr:
                e.y = e.y - Math.floor(e.y);
                break;
            case It:
                e.y = e.y < 0 ? 0 : 1;
                break;
            case Nr:
                Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
                break;
        }
        return this.flipY && (e.y = 1 - e.y), e;
    }
    set needsUpdate(e) {
        e === !0 && (this.version++, this.source.needsUpdate = !0);
    }
    get encoding() {
        return Ms("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace === vt ? ri : vd;
    }
    set encoding(e) {
        Ms("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = e === ri ? vt : Xt;
    }
};
St.DEFAULT_IMAGE = null;
St.DEFAULT_MAPPING = Gc;
St.DEFAULT_ANISOTROPY = 1;
var je = class s1 {
    constructor(e = 0, t = 0, n = 0, i = 1){
        s1.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = i;
    }
    get width() {
        return this.z;
    }
    set width(e) {
        this.z = e;
    }
    get height() {
        return this.w;
    }
    set height(e) {
        this.w = e;
    }
    set(e, t, n, i) {
        return this.x = e, this.y = t, this.z = n, this.w = i, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this.z = e, this.w = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setZ(e) {
        return this.z = e, this;
    }
    setW(e) {
        return this.w = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            case 2:
                this.z = t;
                break;
            case 3:
                this.w = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
    }
    add(e) {
        return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
    }
    addScalar(e) {
        return this.x += e, this.y += e, this.z += e, this.w += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
    }
    sub(e) {
        return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
    }
    applyMatrix4(e) {
        let t = this.x, n = this.y, i = this.z, r = this.w, a = e.elements;
        return this.x = a[0] * t + a[4] * n + a[8] * i + a[12] * r, this.y = a[1] * t + a[5] * n + a[9] * i + a[13] * r, this.z = a[2] * t + a[6] * n + a[10] * i + a[14] * r, this.w = a[3] * t + a[7] * n + a[11] * i + a[15] * r, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    setAxisAngleFromQuaternion(e) {
        this.w = 2 * Math.acos(e.w);
        let t = Math.sqrt(1 - e.w * e.w);
        return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
    }
    setAxisAngleFromRotationMatrix(e) {
        let t, n, i, r, c = e.elements, l = c[0], h = c[4], u = c[8], d = c[1], f = c[5], m = c[9], _ = c[2], g = c[6], p = c[10];
        if (Math.abs(h - d) < .01 && Math.abs(u - _) < .01 && Math.abs(m - g) < .01) {
            if (Math.abs(h + d) < .1 && Math.abs(u + _) < .1 && Math.abs(m + g) < .1 && Math.abs(l + f + p - 3) < .1) return this.set(1, 0, 0, 0), this;
            t = Math.PI;
            let x = (l + 1) / 2, y = (f + 1) / 2, b = (p + 1) / 2, w = (h + d) / 4, R = (u + _) / 4, I = (m + g) / 4;
            return x > y && x > b ? x < .01 ? (n = 0, i = .707106781, r = .707106781) : (n = Math.sqrt(x), i = w / n, r = R / n) : y > b ? y < .01 ? (n = .707106781, i = 0, r = .707106781) : (i = Math.sqrt(y), n = w / i, r = I / i) : b < .01 ? (n = .707106781, i = .707106781, r = 0) : (r = Math.sqrt(b), n = R / r, i = I / r), this.set(n, i, r, t), this;
        }
        let v = Math.sqrt((g - m) * (g - m) + (u - _) * (u - _) + (d - h) * (d - h));
        return Math.abs(v) < .001 && (v = 1), this.x = (g - m) / v, this.y = (u - _) / v, this.z = (d - h) / v, this.w = Math.acos((l + f + p - 1) / 2), this;
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
    }
    roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
    }
    fromBufferAttribute(e, t) {
        return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y, yield this.z, yield this.w;
    }
}, go = class extends sn {
    constructor(e = 1, t = 1, n = {}){
        super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new je(0, 0, e, t), this.scissorTest = !1, this.viewport = new je(0, 0, e, t);
        let i = {
            width: e,
            height: t,
            depth: 1
        };
        n.encoding !== void 0 && (Ms("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."), n.colorSpace = n.encoding === ri ? vt : Xt), n = Object.assign({
            generateMipmaps: !1,
            internalFormat: null,
            minFilter: mt,
            depthBuffer: !0,
            stencilBuffer: !1,
            depthTexture: null,
            samples: 0
        }, n), this.texture = new St(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = n.generateMipmaps, this.texture.internalFormat = n.internalFormat, this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.depthTexture = n.depthTexture, this.samples = n.samples;
    }
    setSize(e, t, n = 1) {
        (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.isRenderTargetTexture = !0;
        let t = Object.assign({}, e.texture.image);
        return this.texture.source = new In(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}, qt = class extends go {
    constructor(e = 1, t = 1, n = {}){
        super(e, t, n), this.isWebGLRenderTarget = !0;
    }
}, As = class extends St {
    constructor(e = null, t = 1, n = 1, i = 1){
        super(null), this.isDataArrayTexture = !0, this.image = {
            data: e,
            width: t,
            height: n,
            depth: i
        }, this.magFilter = pt, this.minFilter = pt, this.wrapR = It, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
}, kl = class extends qt {
    constructor(e = 1, t = 1, n = 1){
        super(e, t), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new As(null, e, t, n), this.texture.isRenderTargetTexture = !0;
    }
}, qr = class extends St {
    constructor(e = null, t = 1, n = 1, i = 1){
        super(null), this.isData3DTexture = !0, this.image = {
            data: e,
            width: t,
            height: n,
            depth: i
        }, this.magFilter = pt, this.minFilter = pt, this.wrapR = It, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
}, Hl = class extends qt {
    constructor(e = 1, t = 1, n = 1){
        super(e, t), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new qr(null, e, t, n), this.texture.isRenderTargetTexture = !0;
    }
}, Gl = class extends qt {
    constructor(e = 1, t = 1, n = 1, i = {}){
        super(e, t, i), this.isWebGLMultipleRenderTargets = !0;
        let r = this.texture;
        this.texture = [];
        for(let a = 0; a < n; a++)this.texture[a] = r.clone(), this.texture[a].isRenderTargetTexture = !0;
    }
    setSize(e, t, n = 1) {
        if (this.width !== e || this.height !== t || this.depth !== n) {
            this.width = e, this.height = t, this.depth = n;
            for(let i = 0, r = this.texture.length; i < r; i++)this.texture[i].image.width = e, this.texture[i].image.height = t, this.texture[i].image.depth = n;
            this.dispose();
        }
        this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
    }
    copy(e) {
        this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.texture.length = 0;
        for(let t = 0, n = e.texture.length; t < n; t++)this.texture[t] = e.texture[t].clone(), this.texture[t].isRenderTargetTexture = !0;
        return this;
    }
}, Ut = class {
    constructor(e = 0, t = 0, n = 0, i = 1){
        this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = i;
    }
    static slerpFlat(e, t, n, i, r, a, o) {
        let c = n[i + 0], l = n[i + 1], h = n[i + 2], u = n[i + 3], d = r[a + 0], f = r[a + 1], m = r[a + 2], _ = r[a + 3];
        if (o === 0) {
            e[t + 0] = c, e[t + 1] = l, e[t + 2] = h, e[t + 3] = u;
            return;
        }
        if (o === 1) {
            e[t + 0] = d, e[t + 1] = f, e[t + 2] = m, e[t + 3] = _;
            return;
        }
        if (u !== _ || c !== d || l !== f || h !== m) {
            let g = 1 - o, p = c * d + l * f + h * m + u * _, v = p >= 0 ? 1 : -1, x = 1 - p * p;
            if (x > Number.EPSILON) {
                let b = Math.sqrt(x), w = Math.atan2(b, p * v);
                g = Math.sin(g * w) / b, o = Math.sin(o * w) / b;
            }
            let y = o * v;
            if (c = c * g + d * y, l = l * g + f * y, h = h * g + m * y, u = u * g + _ * y, g === 1 - o) {
                let b = 1 / Math.sqrt(c * c + l * l + h * h + u * u);
                c *= b, l *= b, h *= b, u *= b;
            }
        }
        e[t] = c, e[t + 1] = l, e[t + 2] = h, e[t + 3] = u;
    }
    static multiplyQuaternionsFlat(e, t, n, i, r, a) {
        let o = n[i], c = n[i + 1], l = n[i + 2], h = n[i + 3], u = r[a], d = r[a + 1], f = r[a + 2], m = r[a + 3];
        return e[t] = o * m + h * u + c * f - l * d, e[t + 1] = c * m + h * d + l * u - o * f, e[t + 2] = l * m + h * f + o * d - c * u, e[t + 3] = h * m - o * u - c * d - l * f, e;
    }
    get x() {
        return this._x;
    }
    set x(e) {
        this._x = e, this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(e) {
        this._y = e, this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(e) {
        this._z = e, this._onChangeCallback();
    }
    get w() {
        return this._w;
    }
    set w(e) {
        this._w = e, this._onChangeCallback();
    }
    set(e, t, n, i) {
        return this._x = e, this._y = t, this._z = n, this._w = i, this._onChangeCallback(), this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(e) {
        return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
    }
    setFromEuler(e, t) {
        let n = e._x, i = e._y, r = e._z, a = e._order, o = Math.cos, c = Math.sin, l = o(n / 2), h = o(i / 2), u = o(r / 2), d = c(n / 2), f = c(i / 2), m = c(r / 2);
        switch(a){
            case "XYZ":
                this._x = d * h * u + l * f * m, this._y = l * f * u - d * h * m, this._z = l * h * m + d * f * u, this._w = l * h * u - d * f * m;
                break;
            case "YXZ":
                this._x = d * h * u + l * f * m, this._y = l * f * u - d * h * m, this._z = l * h * m - d * f * u, this._w = l * h * u + d * f * m;
                break;
            case "ZXY":
                this._x = d * h * u - l * f * m, this._y = l * f * u + d * h * m, this._z = l * h * m + d * f * u, this._w = l * h * u - d * f * m;
                break;
            case "ZYX":
                this._x = d * h * u - l * f * m, this._y = l * f * u + d * h * m, this._z = l * h * m - d * f * u, this._w = l * h * u + d * f * m;
                break;
            case "YZX":
                this._x = d * h * u + l * f * m, this._y = l * f * u + d * h * m, this._z = l * h * m - d * f * u, this._w = l * h * u - d * f * m;
                break;
            case "XZY":
                this._x = d * h * u - l * f * m, this._y = l * f * u - d * h * m, this._z = l * h * m + d * f * u, this._w = l * h * u + d * f * m;
                break;
            default:
                console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + a);
        }
        return t !== !1 && this._onChangeCallback(), this;
    }
    setFromAxisAngle(e, t) {
        let n = t / 2, i = Math.sin(n);
        return this._x = e.x * i, this._y = e.y * i, this._z = e.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e) {
        let t = e.elements, n = t[0], i = t[4], r = t[8], a = t[1], o = t[5], c = t[9], l = t[2], h = t[6], u = t[10], d = n + o + u;
        if (d > 0) {
            let f = .5 / Math.sqrt(d + 1);
            this._w = .25 / f, this._x = (h - c) * f, this._y = (r - l) * f, this._z = (a - i) * f;
        } else if (n > o && n > u) {
            let f = 2 * Math.sqrt(1 + n - o - u);
            this._w = (h - c) / f, this._x = .25 * f, this._y = (i + a) / f, this._z = (r + l) / f;
        } else if (o > u) {
            let f = 2 * Math.sqrt(1 + o - n - u);
            this._w = (r - l) / f, this._x = (i + a) / f, this._y = .25 * f, this._z = (c + h) / f;
        } else {
            let f = 2 * Math.sqrt(1 + u - n - o);
            this._w = (a - i) / f, this._x = (r + l) / f, this._y = (c + h) / f, this._z = .25 * f;
        }
        return this._onChangeCallback(), this;
    }
    setFromUnitVectors(e, t) {
        let n = e.dot(t) + 1;
        return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
    }
    angleTo(e) {
        return 2 * Math.acos(Math.abs(ct(this.dot(e), -1, 1)));
    }
    rotateTowards(e, t) {
        let n = this.angleTo(e);
        if (n === 0) return this;
        let i = Math.min(1, t / n);
        return this.slerp(e, i), this;
    }
    identity() {
        return this.set(0, 0, 0, 1);
    }
    invert() {
        return this.conjugate();
    }
    conjugate() {
        return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
    }
    dot(e) {
        return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
    }
    lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
        let e = this.length();
        return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
    }
    multiply(e) {
        return this.multiplyQuaternions(this, e);
    }
    premultiply(e) {
        return this.multiplyQuaternions(e, this);
    }
    multiplyQuaternions(e, t) {
        let n = e._x, i = e._y, r = e._z, a = e._w, o = t._x, c = t._y, l = t._z, h = t._w;
        return this._x = n * h + a * o + i * l - r * c, this._y = i * h + a * c + r * o - n * l, this._z = r * h + a * l + n * c - i * o, this._w = a * h - n * o - i * c - r * l, this._onChangeCallback(), this;
    }
    slerp(e, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(e);
        let n = this._x, i = this._y, r = this._z, a = this._w, o = a * e._w + n * e._x + i * e._y + r * e._z;
        if (o < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, o = -o) : this.copy(e), o >= 1) return this._w = a, this._x = n, this._y = i, this._z = r, this;
        let c = 1 - o * o;
        if (c <= Number.EPSILON) {
            let f = 1 - t;
            return this._w = f * a + t * this._w, this._x = f * n + t * this._x, this._y = f * i + t * this._y, this._z = f * r + t * this._z, this.normalize(), this._onChangeCallback(), this;
        }
        let l = Math.sqrt(c), h = Math.atan2(l, o), u = Math.sin((1 - t) * h) / l, d = Math.sin(t * h) / l;
        return this._w = a * u + this._w * d, this._x = n * u + this._x * d, this._y = i * u + this._y * d, this._z = r * u + this._z * d, this._onChangeCallback(), this;
    }
    slerpQuaternions(e, t, n) {
        return this.copy(e).slerp(t, n);
    }
    random() {
        let e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), i = 2 * Math.PI * Math.random(), r = 2 * Math.PI * Math.random();
        return this.set(t * Math.cos(i), n * Math.sin(r), n * Math.cos(r), t * Math.sin(i));
    }
    equals(e) {
        return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
    }
    fromArray(e, t = 0) {
        return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
    }
    fromBufferAttribute(e, t) {
        return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this;
    }
    toJSON() {
        return this.toArray();
    }
    _onChange(e) {
        return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x, yield this._y, yield this._z, yield this._w;
    }
}, A = class s1 {
    constructor(e = 0, t = 0, n = 0){
        s1.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
    }
    set(e, t, n) {
        return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this.z = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setZ(e) {
        return this.z = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            case 2:
                this.z = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this.z = e.z, this;
    }
    add(e) {
        return this.x += e.x, this.y += e.y, this.z += e.z, this;
    }
    addScalar(e) {
        return this.x += e, this.y += e, this.z += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
    }
    sub(e) {
        return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this.z -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this.z *= e, this;
    }
    multiplyVectors(e, t) {
        return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
    }
    applyEuler(e) {
        return this.applyQuaternion(Wl.setFromEuler(e));
    }
    applyAxisAngle(e, t) {
        return this.applyQuaternion(Wl.setFromAxisAngle(e, t));
    }
    applyMatrix3(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements;
        return this.x = r[0] * t + r[3] * n + r[6] * i, this.y = r[1] * t + r[4] * n + r[7] * i, this.z = r[2] * t + r[5] * n + r[8] * i, this;
    }
    applyNormalMatrix(e) {
        return this.applyMatrix3(e).normalize();
    }
    applyMatrix4(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements, a = 1 / (r[3] * t + r[7] * n + r[11] * i + r[15]);
        return this.x = (r[0] * t + r[4] * n + r[8] * i + r[12]) * a, this.y = (r[1] * t + r[5] * n + r[9] * i + r[13]) * a, this.z = (r[2] * t + r[6] * n + r[10] * i + r[14]) * a, this;
    }
    applyQuaternion(e) {
        let t = this.x, n = this.y, i = this.z, r = e.x, a = e.y, o = e.z, c = e.w, l = c * t + a * i - o * n, h = c * n + o * t - r * i, u = c * i + r * n - a * t, d = -r * t - a * n - o * i;
        return this.x = l * c + d * -r + h * -o - u * -a, this.y = h * c + d * -a + u * -r - l * -o, this.z = u * c + d * -o + l * -a - h * -r, this;
    }
    project(e) {
        return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
    }
    unproject(e) {
        return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
    }
    transformDirection(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements;
        return this.x = r[0] * t + r[4] * n + r[8] * i, this.y = r[1] * t + r[5] * n + r[9] * i, this.z = r[2] * t + r[6] * n + r[10] * i, this.normalize();
    }
    divide(e) {
        return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
    }
    roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y + this.z * e.z;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
    }
    cross(e) {
        return this.crossVectors(this, e);
    }
    crossVectors(e, t) {
        let n = e.x, i = e.y, r = e.z, a = t.x, o = t.y, c = t.z;
        return this.x = i * c - r * o, this.y = r * a - n * c, this.z = n * o - i * a, this;
    }
    projectOnVector(e) {
        let t = e.lengthSq();
        if (t === 0) return this.set(0, 0, 0);
        let n = e.dot(this) / t;
        return this.copy(e).multiplyScalar(n);
    }
    projectOnPlane(e) {
        return Oa.copy(this).projectOnVector(e), this.sub(Oa);
    }
    reflect(e) {
        return this.sub(Oa.copy(e).multiplyScalar(2 * this.dot(e)));
    }
    angleTo(e) {
        let t = Math.sqrt(this.lengthSq() * e.lengthSq());
        if (t === 0) return Math.PI / 2;
        let n = this.dot(e) / t;
        return Math.acos(ct(n, -1, 1));
    }
    distanceTo(e) {
        return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
        let t = this.x - e.x, n = this.y - e.y, i = this.z - e.z;
        return t * t + n * n + i * i;
    }
    manhattanDistanceTo(e) {
        return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
    }
    setFromSpherical(e) {
        return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
    }
    setFromSphericalCoords(e, t, n) {
        let i = Math.sin(t) * e;
        return this.x = i * Math.sin(n), this.y = Math.cos(t) * e, this.z = i * Math.cos(n), this;
    }
    setFromCylindrical(e) {
        return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
    }
    setFromCylindricalCoords(e, t, n) {
        return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
    }
    setFromMatrixPosition(e) {
        let t = e.elements;
        return this.x = t[12], this.y = t[13], this.z = t[14], this;
    }
    setFromMatrixScale(e) {
        let t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), i = this.setFromMatrixColumn(e, 2).length();
        return this.x = t, this.y = n, this.z = i, this;
    }
    setFromMatrixColumn(e, t) {
        return this.fromArray(e.elements, t * 4);
    }
    setFromMatrix3Column(e, t) {
        return this.fromArray(e.elements, t * 3);
    }
    setFromEuler(e) {
        return this.x = e._x, this.y = e._y, this.z = e._z, this;
    }
    setFromColor(e) {
        return this.x = e.r, this.y = e.g, this.z = e.b, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y && e.z === this.z;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
    }
    fromBufferAttribute(e, t) {
        return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
    }
    randomDirection() {
        let e = (Math.random() - .5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
        return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y, yield this.z;
    }
}, Oa = new A, Wl = new Ut, Qt = class {
    constructor(e = new A(1 / 0, 1 / 0, 1 / 0), t = new A(-1 / 0, -1 / 0, -1 / 0)){
        this.isBox3 = !0, this.min = e, this.max = t;
    }
    set(e, t) {
        return this.min.copy(e), this.max.copy(t), this;
    }
    setFromArray(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t += 3)this.expandByPoint(cn.fromArray(e, t));
        return this;
    }
    setFromBufferAttribute(e) {
        this.makeEmpty();
        for(let t = 0, n = e.count; t < n; t++)this.expandByPoint(cn.fromBufferAttribute(e, t));
        return this;
    }
    setFromPoints(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]);
        return this;
    }
    setFromCenterAndSize(e, t) {
        let n = cn.copy(t).multiplyScalar(.5);
        return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
    }
    setFromObject(e, t = !1) {
        return this.makeEmpty(), this.expandByObject(e, t);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.min.copy(e.min), this.max.copy(e.max), this;
    }
    makeEmpty() {
        return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
    }
    isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(e) {
        return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5);
    }
    getSize(e) {
        return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
    }
    expandByPoint(e) {
        return this.min.min(e), this.max.max(e), this;
    }
    expandByVector(e) {
        return this.min.sub(e), this.max.add(e), this;
    }
    expandByScalar(e) {
        return this.min.addScalar(-e), this.max.addScalar(e), this;
    }
    expandByObject(e, t = !1) {
        if (e.updateWorldMatrix(!1, !1), e.boundingBox !== void 0) e.boundingBox === null && e.computeBoundingBox(), _i.copy(e.boundingBox), _i.applyMatrix4(e.matrixWorld), this.union(_i);
        else {
            let i = e.geometry;
            if (i !== void 0) if (t && i.attributes !== void 0 && i.attributes.position !== void 0) {
                let r = i.attributes.position;
                for(let a = 0, o = r.count; a < o; a++)cn.fromBufferAttribute(r, a).applyMatrix4(e.matrixWorld), this.expandByPoint(cn);
            } else i.boundingBox === null && i.computeBoundingBox(), _i.copy(i.boundingBox), _i.applyMatrix4(e.matrixWorld), this.union(_i);
        }
        let n = e.children;
        for(let i = 0, r = n.length; i < r; i++)this.expandByObject(n[i], t);
        return this;
    }
    containsPoint(e) {
        return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
    }
    containsBox(e) {
        return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
    }
    getParameter(e, t) {
        return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(e) {
        return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
    }
    intersectsSphere(e) {
        return this.clampPoint(e.center, cn), cn.distanceToSquared(e.center) <= e.radius * e.radius;
    }
    intersectsPlane(e) {
        let t, n;
        return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
    }
    intersectsTriangle(e) {
        if (this.isEmpty()) return !1;
        this.getCenter(cs), Ws.subVectors(this.max, cs), xi.subVectors(e.a, cs), vi.subVectors(e.b, cs), yi.subVectors(e.c, cs), Tn.subVectors(vi, xi), wn.subVectors(yi, vi), Wn.subVectors(xi, yi);
        let t = [
            0,
            -Tn.z,
            Tn.y,
            0,
            -wn.z,
            wn.y,
            0,
            -Wn.z,
            Wn.y,
            Tn.z,
            0,
            -Tn.x,
            wn.z,
            0,
            -wn.x,
            Wn.z,
            0,
            -Wn.x,
            -Tn.y,
            Tn.x,
            0,
            -wn.y,
            wn.x,
            0,
            -Wn.y,
            Wn.x,
            0
        ];
        return !Fa(t, xi, vi, yi, Ws) || (t = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ], !Fa(t, xi, vi, yi, Ws)) ? !1 : (Xs.crossVectors(Tn, wn), t = [
            Xs.x,
            Xs.y,
            Xs.z
        ], Fa(t, xi, vi, yi, Ws));
    }
    clampPoint(e, t) {
        return t.copy(e).clamp(this.min, this.max);
    }
    distanceToPoint(e) {
        return this.clampPoint(e, cn).distanceTo(e);
    }
    getBoundingSphere(e) {
        return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(cn).length() * .5), e;
    }
    intersect(e) {
        return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
    }
    union(e) {
        return this.min.min(e.min), this.max.max(e.max), this;
    }
    applyMatrix4(e) {
        return this.isEmpty() ? this : (on[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), on[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), on[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), on[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), on[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), on[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), on[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), on[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(on), this);
    }
    translate(e) {
        return this.min.add(e), this.max.add(e), this;
    }
    equals(e) {
        return e.min.equals(this.min) && e.max.equals(this.max);
    }
}, on = [
    new A,
    new A,
    new A,
    new A,
    new A,
    new A,
    new A,
    new A
], cn = new A, _i = new Qt, xi = new A, vi = new A, yi = new A, Tn = new A, wn = new A, Wn = new A, cs = new A, Ws = new A, Xs = new A, Xn = new A;
function Fa(s1, e, t, n, i) {
    for(let r = 0, a = s1.length - 3; r <= a; r += 3){
        Xn.fromArray(s1, r);
        let o = i.x * Math.abs(Xn.x) + i.y * Math.abs(Xn.y) + i.z * Math.abs(Xn.z), c = e.dot(Xn), l = t.dot(Xn), h = n.dot(Xn);
        if (Math.max(-Math.max(c, l, h), Math.min(c, l, h)) > o) return !1;
    }
    return !0;
}
var rp = new Qt, ls = new A, Ba = new A, Yt = class {
    constructor(e = new A, t = -1){
        this.center = e, this.radius = t;
    }
    set(e, t) {
        return this.center.copy(e), this.radius = t, this;
    }
    setFromPoints(e, t) {
        let n = this.center;
        t !== void 0 ? n.copy(t) : rp.setFromPoints(e).getCenter(n);
        let i = 0;
        for(let r = 0, a = e.length; r < a; r++)i = Math.max(i, n.distanceToSquared(e[r]));
        return this.radius = Math.sqrt(i), this;
    }
    copy(e) {
        return this.center.copy(e.center), this.radius = e.radius, this;
    }
    isEmpty() {
        return this.radius < 0;
    }
    makeEmpty() {
        return this.center.set(0, 0, 0), this.radius = -1, this;
    }
    containsPoint(e) {
        return e.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(e) {
        return e.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(e) {
        let t = this.radius + e.radius;
        return e.center.distanceToSquared(this.center) <= t * t;
    }
    intersectsBox(e) {
        return e.intersectsSphere(this);
    }
    intersectsPlane(e) {
        return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(e, t) {
        let n = this.center.distanceToSquared(e);
        return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
    }
    getBoundingBox(e) {
        return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
    }
    applyMatrix4(e) {
        return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
    }
    translate(e) {
        return this.center.add(e), this;
    }
    expandByPoint(e) {
        if (this.isEmpty()) return this.center.copy(e), this.radius = 0, this;
        ls.subVectors(e, this.center);
        let t = ls.lengthSq();
        if (t > this.radius * this.radius) {
            let n = Math.sqrt(t), i = (n - this.radius) * .5;
            this.center.addScaledVector(ls, i / n), this.radius += i;
        }
        return this;
    }
    union(e) {
        return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (Ba.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(ls.copy(e.center).add(Ba)), this.expandByPoint(ls.copy(e.center).sub(Ba))), this);
    }
    equals(e) {
        return e.center.equals(this.center) && e.radius === this.radius;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, ln = new A, za = new A, qs = new A, An = new A, Va = new A, Ys = new A, ka = new A, hi = class {
    constructor(e = new A, t = new A(0, 0, -1)){
        this.origin = e, this.direction = t;
    }
    set(e, t) {
        return this.origin.copy(e), this.direction.copy(t), this;
    }
    copy(e) {
        return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
    }
    at(e, t) {
        return t.copy(this.origin).addScaledVector(this.direction, e);
    }
    lookAt(e) {
        return this.direction.copy(e).sub(this.origin).normalize(), this;
    }
    recast(e) {
        return this.origin.copy(this.at(e, ln)), this;
    }
    closestPointToPoint(e, t) {
        t.subVectors(e, this.origin);
        let n = t.dot(this.direction);
        return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
    }
    distanceToPoint(e) {
        return Math.sqrt(this.distanceSqToPoint(e));
    }
    distanceSqToPoint(e) {
        let t = ln.subVectors(e, this.origin).dot(this.direction);
        return t < 0 ? this.origin.distanceToSquared(e) : (ln.copy(this.origin).addScaledVector(this.direction, t), ln.distanceToSquared(e));
    }
    distanceSqToSegment(e, t, n, i) {
        za.copy(e).add(t).multiplyScalar(.5), qs.copy(t).sub(e).normalize(), An.copy(this.origin).sub(za);
        let r = e.distanceTo(t) * .5, a = -this.direction.dot(qs), o = An.dot(this.direction), c = -An.dot(qs), l = An.lengthSq(), h = Math.abs(1 - a * a), u, d, f, m;
        if (h > 0) if (u = a * c - o, d = a * o - c, m = r * h, u >= 0) if (d >= -m) if (d <= m) {
            let _ = 1 / h;
            u *= _, d *= _, f = u * (u + a * d + 2 * o) + d * (a * u + d + 2 * c) + l;
        } else d = r, u = Math.max(0, -(a * d + o)), f = -u * u + d * (d + 2 * c) + l;
        else d = -r, u = Math.max(0, -(a * d + o)), f = -u * u + d * (d + 2 * c) + l;
        else d <= -m ? (u = Math.max(0, -(-a * r + o)), d = u > 0 ? -r : Math.min(Math.max(-r, -c), r), f = -u * u + d * (d + 2 * c) + l) : d <= m ? (u = 0, d = Math.min(Math.max(-r, -c), r), f = d * (d + 2 * c) + l) : (u = Math.max(0, -(a * r + o)), d = u > 0 ? r : Math.min(Math.max(-r, -c), r), f = -u * u + d * (d + 2 * c) + l);
        else d = a > 0 ? -r : r, u = Math.max(0, -(a * d + o)), f = -u * u + d * (d + 2 * c) + l;
        return n && n.copy(this.origin).addScaledVector(this.direction, u), i && i.copy(za).addScaledVector(qs, d), f;
    }
    intersectSphere(e, t) {
        ln.subVectors(e.center, this.origin);
        let n = ln.dot(this.direction), i = ln.dot(ln) - n * n, r = e.radius * e.radius;
        if (i > r) return null;
        let a = Math.sqrt(r - i), o = n - a, c = n + a;
        return c < 0 ? null : o < 0 ? this.at(c, t) : this.at(o, t);
    }
    intersectsSphere(e) {
        return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
    }
    distanceToPlane(e) {
        let t = e.normal.dot(this.direction);
        if (t === 0) return e.distanceToPoint(this.origin) === 0 ? 0 : null;
        let n = -(this.origin.dot(e.normal) + e.constant) / t;
        return n >= 0 ? n : null;
    }
    intersectPlane(e, t) {
        let n = this.distanceToPlane(e);
        return n === null ? null : this.at(n, t);
    }
    intersectsPlane(e) {
        let t = e.distanceToPoint(this.origin);
        return t === 0 || e.normal.dot(this.direction) * t < 0;
    }
    intersectBox(e, t) {
        let n, i, r, a, o, c, l = 1 / this.direction.x, h = 1 / this.direction.y, u = 1 / this.direction.z, d = this.origin;
        return l >= 0 ? (n = (e.min.x - d.x) * l, i = (e.max.x - d.x) * l) : (n = (e.max.x - d.x) * l, i = (e.min.x - d.x) * l), h >= 0 ? (r = (e.min.y - d.y) * h, a = (e.max.y - d.y) * h) : (r = (e.max.y - d.y) * h, a = (e.min.y - d.y) * h), n > a || r > i || ((r > n || isNaN(n)) && (n = r), (a < i || isNaN(i)) && (i = a), u >= 0 ? (o = (e.min.z - d.z) * u, c = (e.max.z - d.z) * u) : (o = (e.max.z - d.z) * u, c = (e.min.z - d.z) * u), n > c || o > i) || ((o > n || n !== n) && (n = o), (c < i || i !== i) && (i = c), i < 0) ? null : this.at(n >= 0 ? n : i, t);
    }
    intersectsBox(e) {
        return this.intersectBox(e, ln) !== null;
    }
    intersectTriangle(e, t, n, i, r) {
        Va.subVectors(t, e), Ys.subVectors(n, e), ka.crossVectors(Va, Ys);
        let a = this.direction.dot(ka), o;
        if (a > 0) {
            if (i) return null;
            o = 1;
        } else if (a < 0) o = -1, a = -a;
        else return null;
        An.subVectors(this.origin, e);
        let c = o * this.direction.dot(Ys.crossVectors(An, Ys));
        if (c < 0) return null;
        let l = o * this.direction.dot(Va.cross(An));
        if (l < 0 || c + l > a) return null;
        let h = -o * An.dot(ka);
        return h < 0 ? null : this.at(h / a, r);
    }
    applyMatrix4(e) {
        return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
    }
    equals(e) {
        return e.origin.equals(this.origin) && e.direction.equals(this.direction);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, ze = class s1 {
    constructor(e, t, n, i, r, a, o, c, l, h, u, d, f, m, _, g){
        s1.prototype.isMatrix4 = !0, this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ], e !== void 0 && this.set(e, t, n, i, r, a, o, c, l, h, u, d, f, m, _, g);
    }
    set(e, t, n, i, r, a, o, c, l, h, u, d, f, m, _, g) {
        let p = this.elements;
        return p[0] = e, p[4] = t, p[8] = n, p[12] = i, p[1] = r, p[5] = a, p[9] = o, p[13] = c, p[2] = l, p[6] = h, p[10] = u, p[14] = d, p[3] = f, p[7] = m, p[11] = _, p[15] = g, this;
    }
    identity() {
        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    clone() {
        return new s1().fromArray(this.elements);
    }
    copy(e) {
        let t = this.elements, n = e.elements;
        return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
    }
    copyPosition(e) {
        let t = this.elements, n = e.elements;
        return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
    }
    setFromMatrix3(e) {
        let t = e.elements;
        return this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1), this;
    }
    extractBasis(e, t, n) {
        return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
    }
    makeBasis(e, t, n) {
        return this.set(e.x, t.x, n.x, 0, e.y, t.y, n.y, 0, e.z, t.z, n.z, 0, 0, 0, 0, 1), this;
    }
    extractRotation(e) {
        let t = this.elements, n = e.elements, i = 1 / Mi.setFromMatrixColumn(e, 0).length(), r = 1 / Mi.setFromMatrixColumn(e, 1).length(), a = 1 / Mi.setFromMatrixColumn(e, 2).length();
        return t[0] = n[0] * i, t[1] = n[1] * i, t[2] = n[2] * i, t[3] = 0, t[4] = n[4] * r, t[5] = n[5] * r, t[6] = n[6] * r, t[7] = 0, t[8] = n[8] * a, t[9] = n[9] * a, t[10] = n[10] * a, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromEuler(e) {
        let t = this.elements, n = e.x, i = e.y, r = e.z, a = Math.cos(n), o = Math.sin(n), c = Math.cos(i), l = Math.sin(i), h = Math.cos(r), u = Math.sin(r);
        if (e.order === "XYZ") {
            let d = a * h, f = a * u, m = o * h, _ = o * u;
            t[0] = c * h, t[4] = -c * u, t[8] = l, t[1] = f + m * l, t[5] = d - _ * l, t[9] = -o * c, t[2] = _ - d * l, t[6] = m + f * l, t[10] = a * c;
        } else if (e.order === "YXZ") {
            let d = c * h, f = c * u, m = l * h, _ = l * u;
            t[0] = d + _ * o, t[4] = m * o - f, t[8] = a * l, t[1] = a * u, t[5] = a * h, t[9] = -o, t[2] = f * o - m, t[6] = _ + d * o, t[10] = a * c;
        } else if (e.order === "ZXY") {
            let d = c * h, f = c * u, m = l * h, _ = l * u;
            t[0] = d - _ * o, t[4] = -a * u, t[8] = m + f * o, t[1] = f + m * o, t[5] = a * h, t[9] = _ - d * o, t[2] = -a * l, t[6] = o, t[10] = a * c;
        } else if (e.order === "ZYX") {
            let d = a * h, f = a * u, m = o * h, _ = o * u;
            t[0] = c * h, t[4] = m * l - f, t[8] = d * l + _, t[1] = c * u, t[5] = _ * l + d, t[9] = f * l - m, t[2] = -l, t[6] = o * c, t[10] = a * c;
        } else if (e.order === "YZX") {
            let d = a * c, f = a * l, m = o * c, _ = o * l;
            t[0] = c * h, t[4] = _ - d * u, t[8] = m * u + f, t[1] = u, t[5] = a * h, t[9] = -o * h, t[2] = -l * h, t[6] = f * u + m, t[10] = d - _ * u;
        } else if (e.order === "XZY") {
            let d = a * c, f = a * l, m = o * c, _ = o * l;
            t[0] = c * h, t[4] = -u, t[8] = l * h, t[1] = d * u + _, t[5] = a * h, t[9] = f * u - m, t[2] = m * u - f, t[6] = o * h, t[10] = _ * u + d;
        }
        return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromQuaternion(e) {
        return this.compose(ap, e, op);
    }
    lookAt(e, t, n) {
        let i = this.elements;
        return zt.subVectors(e, t), zt.lengthSq() === 0 && (zt.z = 1), zt.normalize(), Rn.crossVectors(n, zt), Rn.lengthSq() === 0 && (Math.abs(n.z) === 1 ? zt.x += 1e-4 : zt.z += 1e-4, zt.normalize(), Rn.crossVectors(n, zt)), Rn.normalize(), Zs.crossVectors(zt, Rn), i[0] = Rn.x, i[4] = Zs.x, i[8] = zt.x, i[1] = Rn.y, i[5] = Zs.y, i[9] = zt.y, i[2] = Rn.z, i[6] = Zs.z, i[10] = zt.z, this;
    }
    multiply(e) {
        return this.multiplyMatrices(this, e);
    }
    premultiply(e) {
        return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
        let n = e.elements, i = t.elements, r = this.elements, a = n[0], o = n[4], c = n[8], l = n[12], h = n[1], u = n[5], d = n[9], f = n[13], m = n[2], _ = n[6], g = n[10], p = n[14], v = n[3], x = n[7], y = n[11], b = n[15], w = i[0], R = i[4], I = i[8], M = i[12], T = i[1], O = i[5], Y = i[9], $ = i[13], U = i[2], z = i[6], q = i[10], H = i[14], ne = i[3], W = i[7], K = i[11], D = i[15];
        return r[0] = a * w + o * T + c * U + l * ne, r[4] = a * R + o * O + c * z + l * W, r[8] = a * I + o * Y + c * q + l * K, r[12] = a * M + o * $ + c * H + l * D, r[1] = h * w + u * T + d * U + f * ne, r[5] = h * R + u * O + d * z + f * W, r[9] = h * I + u * Y + d * q + f * K, r[13] = h * M + u * $ + d * H + f * D, r[2] = m * w + _ * T + g * U + p * ne, r[6] = m * R + _ * O + g * z + p * W, r[10] = m * I + _ * Y + g * q + p * K, r[14] = m * M + _ * $ + g * H + p * D, r[3] = v * w + x * T + y * U + b * ne, r[7] = v * R + x * O + y * z + b * W, r[11] = v * I + x * Y + y * q + b * K, r[15] = v * M + x * $ + y * H + b * D, this;
    }
    multiplyScalar(e) {
        let t = this.elements;
        return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
    }
    determinant() {
        let e = this.elements, t = e[0], n = e[4], i = e[8], r = e[12], a = e[1], o = e[5], c = e[9], l = e[13], h = e[2], u = e[6], d = e[10], f = e[14], m = e[3], _ = e[7], g = e[11], p = e[15];
        return m * (+r * c * u - i * l * u - r * o * d + n * l * d + i * o * f - n * c * f) + _ * (+t * c * f - t * l * d + r * a * d - i * a * f + i * l * h - r * c * h) + g * (+t * l * u - t * o * f - r * a * u + n * a * f + r * o * h - n * l * h) + p * (-i * o * h - t * c * u + t * o * d + i * a * u - n * a * d + n * c * h);
    }
    transpose() {
        let e = this.elements, t;
        return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
    }
    setPosition(e, t, n) {
        let i = this.elements;
        return e.isVector3 ? (i[12] = e.x, i[13] = e.y, i[14] = e.z) : (i[12] = e, i[13] = t, i[14] = n), this;
    }
    invert() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], u = e[9], d = e[10], f = e[11], m = e[12], _ = e[13], g = e[14], p = e[15], v = u * g * l - _ * d * l + _ * c * f - o * g * f - u * c * p + o * d * p, x = m * d * l - h * g * l - m * c * f + a * g * f + h * c * p - a * d * p, y = h * _ * l - m * u * l + m * o * f - a * _ * f - h * o * p + a * u * p, b = m * u * c - h * _ * c - m * o * d + a * _ * d + h * o * g - a * u * g, w = t * v + n * x + i * y + r * b;
        if (w === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        let R = 1 / w;
        return e[0] = v * R, e[1] = (_ * d * r - u * g * r - _ * i * f + n * g * f + u * i * p - n * d * p) * R, e[2] = (o * g * r - _ * c * r + _ * i * l - n * g * l - o * i * p + n * c * p) * R, e[3] = (u * c * r - o * d * r - u * i * l + n * d * l + o * i * f - n * c * f) * R, e[4] = x * R, e[5] = (h * g * r - m * d * r + m * i * f - t * g * f - h * i * p + t * d * p) * R, e[6] = (m * c * r - a * g * r - m * i * l + t * g * l + a * i * p - t * c * p) * R, e[7] = (a * d * r - h * c * r + h * i * l - t * d * l - a * i * f + t * c * f) * R, e[8] = y * R, e[9] = (m * u * r - h * _ * r - m * n * f + t * _ * f + h * n * p - t * u * p) * R, e[10] = (a * _ * r - m * o * r + m * n * l - t * _ * l - a * n * p + t * o * p) * R, e[11] = (h * o * r - a * u * r - h * n * l + t * u * l + a * n * f - t * o * f) * R, e[12] = b * R, e[13] = (h * _ * i - m * u * i + m * n * d - t * _ * d - h * n * g + t * u * g) * R, e[14] = (m * o * i - a * _ * i - m * n * c + t * _ * c + a * n * g - t * o * g) * R, e[15] = (a * u * i - h * o * i + h * n * c - t * u * c - a * n * d + t * o * d) * R, this;
    }
    scale(e) {
        let t = this.elements, n = e.x, i = e.y, r = e.z;
        return t[0] *= n, t[4] *= i, t[8] *= r, t[1] *= n, t[5] *= i, t[9] *= r, t[2] *= n, t[6] *= i, t[10] *= r, t[3] *= n, t[7] *= i, t[11] *= r, this;
    }
    getMaxScaleOnAxis() {
        let e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
        return Math.sqrt(Math.max(t, n, i));
    }
    makeTranslation(e, t, n) {
        return e.isVector3 ? this.set(1, 0, 0, e.x, 0, 1, 0, e.y, 0, 0, 1, e.z, 0, 0, 0, 1) : this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, n, 0, 0, 0, 1), this;
    }
    makeRotationX(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(1, 0, 0, 0, 0, t, -n, 0, 0, n, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationY(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, 0, n, 0, 0, 1, 0, 0, -n, 0, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationZ(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, -n, 0, 0, n, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    makeRotationAxis(e, t) {
        let n = Math.cos(t), i = Math.sin(t), r = 1 - n, a = e.x, o = e.y, c = e.z, l = r * a, h = r * o;
        return this.set(l * a + n, l * o - i * c, l * c + i * o, 0, l * o + i * c, h * o + n, h * c - i * a, 0, l * c - i * o, h * c + i * a, r * c * c + n, 0, 0, 0, 0, 1), this;
    }
    makeScale(e, t, n) {
        return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
    }
    makeShear(e, t, n, i, r, a) {
        return this.set(1, n, r, 0, e, 1, a, 0, t, i, 1, 0, 0, 0, 0, 1), this;
    }
    compose(e, t, n) {
        let i = this.elements, r = t._x, a = t._y, o = t._z, c = t._w, l = r + r, h = a + a, u = o + o, d = r * l, f = r * h, m = r * u, _ = a * h, g = a * u, p = o * u, v = c * l, x = c * h, y = c * u, b = n.x, w = n.y, R = n.z;
        return i[0] = (1 - (_ + p)) * b, i[1] = (f + y) * b, i[2] = (m - x) * b, i[3] = 0, i[4] = (f - y) * w, i[5] = (1 - (d + p)) * w, i[6] = (g + v) * w, i[7] = 0, i[8] = (m + x) * R, i[9] = (g - v) * R, i[10] = (1 - (d + _)) * R, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1, this;
    }
    decompose(e, t, n) {
        let i = this.elements, r = Mi.set(i[0], i[1], i[2]).length(), a = Mi.set(i[4], i[5], i[6]).length(), o = Mi.set(i[8], i[9], i[10]).length();
        this.determinant() < 0 && (r = -r), e.x = i[12], e.y = i[13], e.z = i[14], $t.copy(this);
        let l = 1 / r, h = 1 / a, u = 1 / o;
        return $t.elements[0] *= l, $t.elements[1] *= l, $t.elements[2] *= l, $t.elements[4] *= h, $t.elements[5] *= h, $t.elements[6] *= h, $t.elements[8] *= u, $t.elements[9] *= u, $t.elements[10] *= u, t.setFromRotationMatrix($t), n.x = r, n.y = a, n.z = o, this;
    }
    makePerspective(e, t, n, i, r, a, o = vn) {
        let c = this.elements, l = 2 * r / (t - e), h = 2 * r / (n - i), u = (t + e) / (t - e), d = (n + i) / (n - i), f, m;
        if (o === vn) f = -(a + r) / (a - r), m = -2 * a * r / (a - r);
        else if (o === Gr) f = -a / (a - r), m = -a * r / (a - r);
        else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + o);
        return c[0] = l, c[4] = 0, c[8] = u, c[12] = 0, c[1] = 0, c[5] = h, c[9] = d, c[13] = 0, c[2] = 0, c[6] = 0, c[10] = f, c[14] = m, c[3] = 0, c[7] = 0, c[11] = -1, c[15] = 0, this;
    }
    makeOrthographic(e, t, n, i, r, a, o = vn) {
        let c = this.elements, l = 1 / (t - e), h = 1 / (n - i), u = 1 / (a - r), d = (t + e) * l, f = (n + i) * h, m, _;
        if (o === vn) m = (a + r) * u, _ = -2 * u;
        else if (o === Gr) m = r * u, _ = -1 * u;
        else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + o);
        return c[0] = 2 * l, c[4] = 0, c[8] = 0, c[12] = -d, c[1] = 0, c[5] = 2 * h, c[9] = 0, c[13] = -f, c[2] = 0, c[6] = 0, c[10] = _, c[14] = -m, c[3] = 0, c[7] = 0, c[11] = 0, c[15] = 1, this;
    }
    equals(e) {
        let t = this.elements, n = e.elements;
        for(let i = 0; i < 16; i++)if (t[i] !== n[i]) return !1;
        return !0;
    }
    fromArray(e, t = 0) {
        for(let n = 0; n < 16; n++)this.elements[n] = e[n + t];
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.elements;
        return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
    }
}, Mi = new A, $t = new ze, ap = new A(0, 0, 0), op = new A(1, 1, 1), Rn = new A, Zs = new A, zt = new A, Xl = new ze, ql = new Ut, Yr = class s1 {
    constructor(e = 0, t = 0, n = 0, i = s1.DEFAULT_ORDER){
        this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = i;
    }
    get x() {
        return this._x;
    }
    set x(e) {
        this._x = e, this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(e) {
        this._y = e, this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(e) {
        this._z = e, this._onChangeCallback();
    }
    get order() {
        return this._order;
    }
    set order(e) {
        this._order = e, this._onChangeCallback();
    }
    set(e, t, n, i = this._order) {
        return this._x = e, this._y = t, this._z = n, this._order = i, this._onChangeCallback(), this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(e) {
        return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e, t = this._order, n = !0) {
        let i = e.elements, r = i[0], a = i[4], o = i[8], c = i[1], l = i[5], h = i[9], u = i[2], d = i[6], f = i[10];
        switch(t){
            case "XYZ":
                this._y = Math.asin(ct(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(-h, f), this._z = Math.atan2(-a, r)) : (this._x = Math.atan2(d, l), this._z = 0);
                break;
            case "YXZ":
                this._x = Math.asin(-ct(h, -1, 1)), Math.abs(h) < .9999999 ? (this._y = Math.atan2(o, f), this._z = Math.atan2(c, l)) : (this._y = Math.atan2(-u, r), this._z = 0);
                break;
            case "ZXY":
                this._x = Math.asin(ct(d, -1, 1)), Math.abs(d) < .9999999 ? (this._y = Math.atan2(-u, f), this._z = Math.atan2(-a, l)) : (this._y = 0, this._z = Math.atan2(c, r));
                break;
            case "ZYX":
                this._y = Math.asin(-ct(u, -1, 1)), Math.abs(u) < .9999999 ? (this._x = Math.atan2(d, f), this._z = Math.atan2(c, r)) : (this._x = 0, this._z = Math.atan2(-a, l));
                break;
            case "YZX":
                this._z = Math.asin(ct(c, -1, 1)), Math.abs(c) < .9999999 ? (this._x = Math.atan2(-h, l), this._y = Math.atan2(-u, r)) : (this._x = 0, this._y = Math.atan2(o, f));
                break;
            case "XZY":
                this._z = Math.asin(-ct(a, -1, 1)), Math.abs(a) < .9999999 ? (this._x = Math.atan2(d, l), this._y = Math.atan2(o, r)) : (this._x = Math.atan2(-h, f), this._y = 0);
                break;
            default:
                console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
        }
        return this._order = t, n === !0 && this._onChangeCallback(), this;
    }
    setFromQuaternion(e, t, n) {
        return Xl.makeRotationFromQuaternion(e), this.setFromRotationMatrix(Xl, t, n);
    }
    setFromVector3(e, t = this._order) {
        return this.set(e.x, e.y, e.z, t);
    }
    reorder(e) {
        return ql.setFromEuler(this), this.setFromQuaternion(ql, e);
    }
    equals(e) {
        return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
    }
    fromArray(e) {
        return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
    }
    _onChange(e) {
        return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x, yield this._y, yield this._z, yield this._order;
    }
};
Yr.DEFAULT_ORDER = "XYZ";
var Rs = class {
    constructor(){
        this.mask = 1;
    }
    set(e) {
        this.mask = (1 << e | 0) >>> 0;
    }
    enable(e) {
        this.mask |= 1 << e | 0;
    }
    enableAll() {
        this.mask = -1;
    }
    toggle(e) {
        this.mask ^= 1 << e | 0;
    }
    disable(e) {
        this.mask &= ~(1 << e | 0);
    }
    disableAll() {
        this.mask = 0;
    }
    test(e) {
        return (this.mask & e.mask) !== 0;
    }
    isEnabled(e) {
        return (this.mask & (1 << e | 0)) !== 0;
    }
}, cp = 0, Yl = new A, Si = new Ut, hn = new ze, Js = new A, hs = new A, lp = new A, hp = new Ut, Zl = new A(1, 0, 0), Jl = new A(0, 1, 0), $l = new A(0, 0, 1), up = {
    type: "added"
}, dp = {
    type: "removed"
}, Je = class s1 extends sn {
    constructor(){
        super(), this.isObject3D = !0, Object.defineProperty(this, "id", {
            value: cp++
        }), this.uuid = kt(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = s1.DEFAULT_UP.clone();
        let e = new A, t = new Yr, n = new Ut, i = new A(1, 1, 1);
        function r() {
            n.setFromEuler(t, !1);
        }
        function a() {
            t.setFromQuaternion(n, void 0, !1);
        }
        t._onChange(r), n._onChange(a), Object.defineProperties(this, {
            position: {
                configurable: !0,
                enumerable: !0,
                value: e
            },
            rotation: {
                configurable: !0,
                enumerable: !0,
                value: t
            },
            quaternion: {
                configurable: !0,
                enumerable: !0,
                value: n
            },
            scale: {
                configurable: !0,
                enumerable: !0,
                value: i
            },
            modelViewMatrix: {
                value: new ze
            },
            normalMatrix: {
                value: new He
            }
        }), this.matrix = new ze, this.matrixWorld = new ze, this.matrixAutoUpdate = s1.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.matrixWorldAutoUpdate = s1.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.layers = new Rs, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
    }
    onBeforeRender() {}
    onAfterRender() {}
    applyMatrix4(e) {
        this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(e) {
        return this.quaternion.premultiply(e), this;
    }
    setRotationFromAxisAngle(e, t) {
        this.quaternion.setFromAxisAngle(e, t);
    }
    setRotationFromEuler(e) {
        this.quaternion.setFromEuler(e, !0);
    }
    setRotationFromMatrix(e) {
        this.quaternion.setFromRotationMatrix(e);
    }
    setRotationFromQuaternion(e) {
        this.quaternion.copy(e);
    }
    rotateOnAxis(e, t) {
        return Si.setFromAxisAngle(e, t), this.quaternion.multiply(Si), this;
    }
    rotateOnWorldAxis(e, t) {
        return Si.setFromAxisAngle(e, t), this.quaternion.premultiply(Si), this;
    }
    rotateX(e) {
        return this.rotateOnAxis(Zl, e);
    }
    rotateY(e) {
        return this.rotateOnAxis(Jl, e);
    }
    rotateZ(e) {
        return this.rotateOnAxis($l, e);
    }
    translateOnAxis(e, t) {
        return Yl.copy(e).applyQuaternion(this.quaternion), this.position.add(Yl.multiplyScalar(t)), this;
    }
    translateX(e) {
        return this.translateOnAxis(Zl, e);
    }
    translateY(e) {
        return this.translateOnAxis(Jl, e);
    }
    translateZ(e) {
        return this.translateOnAxis($l, e);
    }
    localToWorld(e) {
        return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(e) {
        return this.updateWorldMatrix(!0, !1), e.applyMatrix4(hn.copy(this.matrixWorld).invert());
    }
    lookAt(e, t, n) {
        e.isVector3 ? Js.copy(e) : Js.set(e, t, n);
        let i = this.parent;
        this.updateWorldMatrix(!0, !1), hs.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? hn.lookAt(hs, Js, this.up) : hn.lookAt(Js, hs, this.up), this.quaternion.setFromRotationMatrix(hn), i && (hn.extractRotation(i.matrixWorld), Si.setFromRotationMatrix(hn), this.quaternion.premultiply(Si.invert()));
    }
    add(e) {
        if (arguments.length > 1) {
            for(let t = 0; t < arguments.length; t++)this.add(arguments[t]);
            return this;
        }
        return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(up)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
    }
    remove(e) {
        if (arguments.length > 1) {
            for(let n = 0; n < arguments.length; n++)this.remove(arguments[n]);
            return this;
        }
        let t = this.children.indexOf(e);
        return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(dp)), this;
    }
    removeFromParent() {
        let e = this.parent;
        return e !== null && e.remove(this), this;
    }
    clear() {
        return this.remove(...this.children);
    }
    attach(e) {
        return this.updateWorldMatrix(!0, !1), hn.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), hn.multiply(e.parent.matrixWorld)), e.applyMatrix4(hn), this.add(e), e.updateWorldMatrix(!1, !0), this;
    }
    getObjectById(e) {
        return this.getObjectByProperty("id", e);
    }
    getObjectByName(e) {
        return this.getObjectByProperty("name", e);
    }
    getObjectByProperty(e, t) {
        if (this[e] === t) return this;
        for(let n = 0, i = this.children.length; n < i; n++){
            let a = this.children[n].getObjectByProperty(e, t);
            if (a !== void 0) return a;
        }
    }
    getObjectsByProperty(e, t) {
        let n = [];
        this[e] === t && n.push(this);
        for(let i = 0, r = this.children.length; i < r; i++){
            let a = this.children[i].getObjectsByProperty(e, t);
            a.length > 0 && (n = n.concat(a));
        }
        return n;
    }
    getWorldPosition(e) {
        return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(e) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(hs, e, lp), e;
    }
    getWorldScale(e) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(hs, hp, e), e;
    }
    getWorldDirection(e) {
        this.updateWorldMatrix(!0, !1);
        let t = this.matrixWorld.elements;
        return e.set(t[8], t[9], t[10]).normalize();
    }
    raycast() {}
    traverse(e) {
        e(this);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++)t[n].traverse(e);
    }
    traverseVisible(e) {
        if (this.visible === !1) return;
        e(this);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++)t[n].traverseVisible(e);
    }
    traverseAncestors(e) {
        let t = this.parent;
        t !== null && (e(t), t.traverseAncestors(e));
    }
    updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
    }
    updateMatrixWorld(e) {
        this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++){
            let r = t[n];
            (r.matrixWorldAutoUpdate === !0 || e === !0) && r.updateMatrixWorld(e);
        }
    }
    updateWorldMatrix(e, t) {
        let n = this.parent;
        if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
            let i = this.children;
            for(let r = 0, a = i.length; r < a; r++){
                let o = i[r];
                o.matrixWorldAutoUpdate === !0 && o.updateWorldMatrix(!1, !0);
            }
        }
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string", n = {};
        t && (e = {
            geometries: {},
            materials: {},
            textures: {},
            images: {},
            shapes: {},
            skeletons: {},
            animations: {},
            nodes: {}
        }, n.metadata = {
            version: 4.6,
            type: "Object",
            generator: "Object3D.toJSON"
        });
        let i = {};
        i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === !0 && (i.castShadow = !0), this.receiveShadow === !0 && (i.receiveShadow = !0), this.visible === !1 && (i.visible = !1), this.frustumCulled === !1 && (i.frustumCulled = !1), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), i.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON()));
        function r(o, c) {
            return o[c.uuid] === void 0 && (o[c.uuid] = c.toJSON(e)), c.uuid;
        }
        if (this.isScene) this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (i.environment = this.environment.toJSON(e).uuid);
        else if (this.isMesh || this.isLine || this.isPoints) {
            i.geometry = r(e.geometries, this.geometry);
            let o = this.geometry.parameters;
            if (o !== void 0 && o.shapes !== void 0) {
                let c = o.shapes;
                if (Array.isArray(c)) for(let l = 0, h = c.length; l < h; l++){
                    let u = c[l];
                    r(e.shapes, u);
                }
                else r(e.shapes, c);
            }
        }
        if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (r(e.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) {
            let o = [];
            for(let c = 0, l = this.material.length; c < l; c++)o.push(r(e.materials, this.material[c]));
            i.material = o;
        } else i.material = r(e.materials, this.material);
        if (this.children.length > 0) {
            i.children = [];
            for(let o = 0; o < this.children.length; o++)i.children.push(this.children[o].toJSON(e).object);
        }
        if (this.animations.length > 0) {
            i.animations = [];
            for(let o = 0; o < this.animations.length; o++){
                let c = this.animations[o];
                i.animations.push(r(e.animations, c));
            }
        }
        if (t) {
            let o = a(e.geometries), c = a(e.materials), l = a(e.textures), h = a(e.images), u = a(e.shapes), d = a(e.skeletons), f = a(e.animations), m = a(e.nodes);
            o.length > 0 && (n.geometries = o), c.length > 0 && (n.materials = c), l.length > 0 && (n.textures = l), h.length > 0 && (n.images = h), u.length > 0 && (n.shapes = u), d.length > 0 && (n.skeletons = d), f.length > 0 && (n.animations = f), m.length > 0 && (n.nodes = m);
        }
        return n.object = i, n;
        function a(o) {
            let c = [];
            for(let l in o){
                let h = o[l];
                delete h.metadata, c.push(h);
            }
            return c;
        }
    }
    clone(e) {
        return new this.constructor().copy(this, e);
    }
    copy(e, t = !0) {
        if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0) for(let n = 0; n < e.children.length; n++){
            let i = e.children[n];
            this.add(i.clone());
        }
        return this;
    }
};
Je.DEFAULT_UP = new A(0, 1, 0);
Je.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Je.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
var Kt = new A, un = new A, Ha = new A, dn = new A, bi = new A, Ei = new A, Kl = new A, Ga = new A, Wa = new A, Xa = new A, $s = !1, Un = class s1 {
    constructor(e = new A, t = new A, n = new A){
        this.a = e, this.b = t, this.c = n;
    }
    static getNormal(e, t, n, i) {
        i.subVectors(n, t), Kt.subVectors(e, t), i.cross(Kt);
        let r = i.lengthSq();
        return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0);
    }
    static getBarycoord(e, t, n, i, r) {
        Kt.subVectors(i, t), un.subVectors(n, t), Ha.subVectors(e, t);
        let a = Kt.dot(Kt), o = Kt.dot(un), c = Kt.dot(Ha), l = un.dot(un), h = un.dot(Ha), u = a * l - o * o;
        if (u === 0) return r.set(-2, -1, -1);
        let d = 1 / u, f = (l * c - o * h) * d, m = (a * h - o * c) * d;
        return r.set(1 - f - m, m, f);
    }
    static containsPoint(e, t, n, i) {
        return this.getBarycoord(e, t, n, i, dn), dn.x >= 0 && dn.y >= 0 && dn.x + dn.y <= 1;
    }
    static getUV(e, t, n, i, r, a, o, c) {
        return $s === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), $s = !0), this.getInterpolation(e, t, n, i, r, a, o, c);
    }
    static getInterpolation(e, t, n, i, r, a, o, c) {
        return this.getBarycoord(e, t, n, i, dn), c.setScalar(0), c.addScaledVector(r, dn.x), c.addScaledVector(a, dn.y), c.addScaledVector(o, dn.z), c;
    }
    static isFrontFacing(e, t, n, i) {
        return Kt.subVectors(n, t), un.subVectors(e, t), Kt.cross(un).dot(i) < 0;
    }
    set(e, t, n) {
        return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
    }
    setFromPointsAndIndices(e, t, n, i) {
        return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
    }
    setFromAttributeAndIndices(e, t, n, i) {
        return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, i), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
    }
    getArea() {
        return Kt.subVectors(this.c, this.b), un.subVectors(this.a, this.b), Kt.cross(un).length() * .5;
    }
    getMidpoint(e) {
        return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(e) {
        return s1.getNormal(this.a, this.b, this.c, e);
    }
    getPlane(e) {
        return e.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(e, t) {
        return s1.getBarycoord(e, this.a, this.b, this.c, t);
    }
    getUV(e, t, n, i, r) {
        return $s === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), $s = !0), s1.getInterpolation(e, this.a, this.b, this.c, t, n, i, r);
    }
    getInterpolation(e, t, n, i, r) {
        return s1.getInterpolation(e, this.a, this.b, this.c, t, n, i, r);
    }
    containsPoint(e) {
        return s1.containsPoint(e, this.a, this.b, this.c);
    }
    isFrontFacing(e) {
        return s1.isFrontFacing(this.a, this.b, this.c, e);
    }
    intersectsBox(e) {
        return e.intersectsTriangle(this);
    }
    closestPointToPoint(e, t) {
        let n = this.a, i = this.b, r = this.c, a, o;
        bi.subVectors(i, n), Ei.subVectors(r, n), Ga.subVectors(e, n);
        let c = bi.dot(Ga), l = Ei.dot(Ga);
        if (c <= 0 && l <= 0) return t.copy(n);
        Wa.subVectors(e, i);
        let h = bi.dot(Wa), u = Ei.dot(Wa);
        if (h >= 0 && u <= h) return t.copy(i);
        let d = c * u - h * l;
        if (d <= 0 && c >= 0 && h <= 0) return a = c / (c - h), t.copy(n).addScaledVector(bi, a);
        Xa.subVectors(e, r);
        let f = bi.dot(Xa), m = Ei.dot(Xa);
        if (m >= 0 && f <= m) return t.copy(r);
        let _ = f * l - c * m;
        if (_ <= 0 && l >= 0 && m <= 0) return o = l / (l - m), t.copy(n).addScaledVector(Ei, o);
        let g = h * m - f * u;
        if (g <= 0 && u - h >= 0 && f - m >= 0) return Kl.subVectors(r, i), o = (u - h) / (u - h + (f - m)), t.copy(i).addScaledVector(Kl, o);
        let p = 1 / (g + _ + d);
        return a = _ * p, o = d * p, t.copy(n).addScaledVector(bi, a).addScaledVector(Ei, o);
    }
    equals(e) {
        return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
    }
}, fp = 0, bt = class extends sn {
    constructor(){
        super(), this.isMaterial = !0, Object.defineProperty(this, "id", {
            value: fp++
        }), this.uuid = kt(), this.name = "", this.type = "Material", this.blending = Wi, this.side = Bn, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = ld, this.blendDst = hd, this.blendEquation = Bi, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = uo, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = If, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Ia, this.stencilZFail = Ia, this.stencilZPass = Ia, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
    }
    get alphaTest() {
        return this._alphaTest;
    }
    set alphaTest(e) {
        this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
    }
    onBuild() {}
    onBeforeRender() {}
    onBeforeCompile() {}
    customProgramCacheKey() {
        return this.onBeforeCompile.toString();
    }
    setValues(e) {
        if (e !== void 0) for(let t in e){
            let n = e[t];
            if (n === void 0) {
                console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
                continue;
            }
            let i = this[t];
            if (i === void 0) {
                console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
                continue;
            }
            i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[t] = n;
        }
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        t && (e = {
            textures: {},
            images: {}
        });
        let n = {
            metadata: {
                version: 4.6,
                type: "Material",
                generator: "Material.toJSON"
            }
        };
        n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== Wi && (n.blending = this.blending), this.side !== Bn && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
        function i(r) {
            let a = [];
            for(let o in r){
                let c = r[o];
                delete c.metadata, a.push(c);
            }
            return a;
        }
        if (t) {
            let r = i(e.textures), a = i(e.images);
            r.length > 0 && (n.textures = r), a.length > 0 && (n.images = a);
        }
        return n;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
        let t = e.clippingPlanes, n = null;
        if (t !== null) {
            let i = t.length;
            n = new Array(i);
            for(let r = 0; r !== i; ++r)n[r] = t[r].clone();
        }
        return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
}, Sd = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
}, Cn = {
    h: 0,
    s: 0,
    l: 0
}, Ks = {
    h: 0,
    s: 0,
    l: 0
};
function qa(s1, e, t) {
    return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? s1 + (e - s1) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? s1 + (e - s1) * 6 * (2 / 3 - t) : s1;
}
var pe = class {
    constructor(e, t, n){
        return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, n);
    }
    set(e, t, n) {
        if (t === void 0 && n === void 0) {
            let i = e;
            i && i.isColor ? this.copy(i) : typeof i == "number" ? this.setHex(i) : typeof i == "string" && this.setStyle(i);
        } else this.setRGB(e, t, n);
        return this;
    }
    setScalar(e) {
        return this.r = e, this.g = e, this.b = e, this;
    }
    setHex(e, t = vt) {
        return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Qe.toWorkingColorSpace(this, t), this;
    }
    setRGB(e, t, n, i = Qe.workingColorSpace) {
        return this.r = e, this.g = t, this.b = n, Qe.toWorkingColorSpace(this, i), this;
    }
    setHSL(e, t, n, i = Qe.workingColorSpace) {
        if (e = Yc(e, 1), t = ct(t, 0, 1), n = ct(n, 0, 1), t === 0) this.r = this.g = this.b = n;
        else {
            let r = n <= .5 ? n * (1 + t) : n + t - n * t, a = 2 * n - r;
            this.r = qa(a, r, e + 1 / 3), this.g = qa(a, r, e), this.b = qa(a, r, e - 1 / 3);
        }
        return Qe.toWorkingColorSpace(this, i), this;
    }
    setStyle(e, t = vt) {
        function n(r) {
            r !== void 0 && parseFloat(r) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
        }
        let i;
        if (i = /^(\w+)\(([^\)]*)\)/.exec(e)) {
            let r, a = i[1], o = i[2];
            switch(a){
                case "rgb":
                case "rgba":
                    if (r = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return n(r[4]), this.setRGB(Math.min(255, parseInt(r[1], 10)) / 255, Math.min(255, parseInt(r[2], 10)) / 255, Math.min(255, parseInt(r[3], 10)) / 255, t);
                    if (r = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return n(r[4]), this.setRGB(Math.min(100, parseInt(r[1], 10)) / 100, Math.min(100, parseInt(r[2], 10)) / 100, Math.min(100, parseInt(r[3], 10)) / 100, t);
                    break;
                case "hsl":
                case "hsla":
                    if (r = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return n(r[4]), this.setHSL(parseFloat(r[1]) / 360, parseFloat(r[2]) / 100, parseFloat(r[3]) / 100, t);
                    break;
                default:
                    console.warn("THREE.Color: Unknown color model " + e);
            }
        } else if (i = /^\#([A-Fa-f\d]+)$/.exec(e)) {
            let r = i[1], a = r.length;
            if (a === 3) return this.setRGB(parseInt(r.charAt(0), 16) / 15, parseInt(r.charAt(1), 16) / 15, parseInt(r.charAt(2), 16) / 15, t);
            if (a === 6) return this.setHex(parseInt(r, 16), t);
            console.warn("THREE.Color: Invalid hex color " + e);
        } else if (e && e.length > 0) return this.setColorName(e, t);
        return this;
    }
    setColorName(e, t = vt) {
        let n = Sd[e.toLowerCase()];
        return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
    }
    clone() {
        return new this.constructor(this.r, this.g, this.b);
    }
    copy(e) {
        return this.r = e.r, this.g = e.g, this.b = e.b, this;
    }
    copySRGBToLinear(e) {
        return this.r = Xi(e.r), this.g = Xi(e.g), this.b = Xi(e.b), this;
    }
    copyLinearToSRGB(e) {
        return this.r = Da(e.r), this.g = Da(e.g), this.b = Da(e.b), this;
    }
    convertSRGBToLinear() {
        return this.copySRGBToLinear(this), this;
    }
    convertLinearToSRGB() {
        return this.copyLinearToSRGB(this), this;
    }
    getHex(e = vt) {
        return Qe.fromWorkingColorSpace(Tt.copy(this), e), Math.round(ct(Tt.r * 255, 0, 255)) * 65536 + Math.round(ct(Tt.g * 255, 0, 255)) * 256 + Math.round(ct(Tt.b * 255, 0, 255));
    }
    getHexString(e = vt) {
        return ("000000" + this.getHex(e).toString(16)).slice(-6);
    }
    getHSL(e, t = Qe.workingColorSpace) {
        Qe.fromWorkingColorSpace(Tt.copy(this), t);
        let n = Tt.r, i = Tt.g, r = Tt.b, a = Math.max(n, i, r), o = Math.min(n, i, r), c, l, h = (o + a) / 2;
        if (o === a) c = 0, l = 0;
        else {
            let u = a - o;
            switch(l = h <= .5 ? u / (a + o) : u / (2 - a - o), a){
                case n:
                    c = (i - r) / u + (i < r ? 6 : 0);
                    break;
                case i:
                    c = (r - n) / u + 2;
                    break;
                case r:
                    c = (n - i) / u + 4;
                    break;
            }
            c /= 6;
        }
        return e.h = c, e.s = l, e.l = h, e;
    }
    getRGB(e, t = Qe.workingColorSpace) {
        return Qe.fromWorkingColorSpace(Tt.copy(this), t), e.r = Tt.r, e.g = Tt.g, e.b = Tt.b, e;
    }
    getStyle(e = vt) {
        Qe.fromWorkingColorSpace(Tt.copy(this), e);
        let t = Tt.r, n = Tt.g, i = Tt.b;
        return e !== vt ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
    }
    offsetHSL(e, t, n) {
        return this.getHSL(Cn), this.setHSL(Cn.h + e, Cn.s + t, Cn.l + n);
    }
    add(e) {
        return this.r += e.r, this.g += e.g, this.b += e.b, this;
    }
    addColors(e, t) {
        return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
    }
    addScalar(e) {
        return this.r += e, this.g += e, this.b += e, this;
    }
    sub(e) {
        return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
    }
    multiply(e) {
        return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
    }
    multiplyScalar(e) {
        return this.r *= e, this.g *= e, this.b *= e, this;
    }
    lerp(e, t) {
        return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
    }
    lerpColors(e, t, n) {
        return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
    }
    lerpHSL(e, t) {
        this.getHSL(Cn), e.getHSL(Ks);
        let n = ys(Cn.h, Ks.h, t), i = ys(Cn.s, Ks.s, t), r = ys(Cn.l, Ks.l, t);
        return this.setHSL(n, i, r), this;
    }
    setFromVector3(e) {
        return this.r = e.x, this.g = e.y, this.b = e.z, this;
    }
    applyMatrix3(e) {
        let t = this.r, n = this.g, i = this.b, r = e.elements;
        return this.r = r[0] * t + r[3] * n + r[6] * i, this.g = r[1] * t + r[4] * n + r[7] * i, this.b = r[2] * t + r[5] * n + r[8] * i, this;
    }
    equals(e) {
        return e.r === this.r && e.g === this.g && e.b === this.b;
    }
    fromArray(e, t = 0) {
        return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
    }
    fromBufferAttribute(e, t) {
        return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
    }
    toJSON() {
        return this.getHex();
    }
    *[Symbol.iterator]() {
        yield this.r, yield this.g, yield this.b;
    }
}, Tt = new pe;
pe.NAMES = Sd;
var Sn = class extends bt {
    constructor(e){
        super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new pe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = xa, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
    }
}, _n = pp();
function pp() {
    let s1 = new ArrayBuffer(4), e = new Float32Array(s1), t = new Uint32Array(s1), n = new Uint32Array(512), i = new Uint32Array(512);
    for(let c = 0; c < 256; ++c){
        let l = c - 127;
        l < -27 ? (n[c] = 0, n[c | 256] = 32768, i[c] = 24, i[c | 256] = 24) : l < -14 ? (n[c] = 1024 >> -l - 14, n[c | 256] = 1024 >> -l - 14 | 32768, i[c] = -l - 1, i[c | 256] = -l - 1) : l <= 15 ? (n[c] = l + 15 << 10, n[c | 256] = l + 15 << 10 | 32768, i[c] = 13, i[c | 256] = 13) : l < 128 ? (n[c] = 31744, n[c | 256] = 64512, i[c] = 24, i[c | 256] = 24) : (n[c] = 31744, n[c | 256] = 64512, i[c] = 13, i[c | 256] = 13);
    }
    let r = new Uint32Array(2048), a = new Uint32Array(64), o = new Uint32Array(64);
    for(let c = 1; c < 1024; ++c){
        let l = c << 13, h = 0;
        for(; !(l & 8388608);)l <<= 1, h -= 8388608;
        l &= -8388609, h += 947912704, r[c] = l | h;
    }
    for(let c = 1024; c < 2048; ++c)r[c] = 939524096 + (c - 1024 << 13);
    for(let c = 1; c < 31; ++c)a[c] = c << 23;
    a[31] = 1199570944, a[32] = 2147483648;
    for(let c = 33; c < 63; ++c)a[c] = 2147483648 + (c - 32 << 23);
    a[63] = 3347054592;
    for(let c = 1; c < 64; ++c)c !== 32 && (o[c] = 1024);
    return {
        floatView: e,
        uint32View: t,
        baseTable: n,
        shiftTable: i,
        mantissaTable: r,
        exponentTable: a,
        offsetTable: o
    };
}
function Nt(s1) {
    Math.abs(s1) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), s1 = ct(s1, -65504, 65504), _n.floatView[0] = s1;
    let e = _n.uint32View[0], t = e >> 23 & 511;
    return _n.baseTable[t] + ((e & 8388607) >> _n.shiftTable[t]);
}
function xs(s1) {
    let e = s1 >> 10;
    return _n.uint32View[0] = _n.mantissaTable[_n.offsetTable[e] + (s1 & 1023)] + _n.exponentTable[e], _n.floatView[0];
}
var Mv = {
    toHalfFloat: Nt,
    fromHalfFloat: xs
}, ft = new A, Qs = new Z, et = class {
    constructor(e, t, n = !1){
        if (Array.isArray(e)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = Hr, this.updateRange = {
            offset: 0,
            count: -1
        }, this.gpuType = xn, this.version = 0;
    }
    onUploadCallback() {}
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    copy(e) {
        return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
    }
    copyAt(e, t, n) {
        e *= this.itemSize, n *= t.itemSize;
        for(let i = 0, r = this.itemSize; i < r; i++)this.array[e + i] = t.array[n + i];
        return this;
    }
    copyArray(e) {
        return this.array.set(e), this;
    }
    applyMatrix3(e) {
        if (this.itemSize === 2) for(let t = 0, n = this.count; t < n; t++)Qs.fromBufferAttribute(this, t), Qs.applyMatrix3(e), this.setXY(t, Qs.x, Qs.y);
        else if (this.itemSize === 3) for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.applyMatrix3(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    applyMatrix4(e) {
        for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.applyMatrix4(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    applyNormalMatrix(e) {
        for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.applyNormalMatrix(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    transformDirection(e) {
        for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.transformDirection(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    set(e, t = 0) {
        return this.array.set(e, t), this;
    }
    getComponent(e, t) {
        let n = this.array[e * this.itemSize + t];
        return this.normalized && (n = Ot(n, this.array)), n;
    }
    setComponent(e, t, n) {
        return this.normalized && (n = Be(n, this.array)), this.array[e * this.itemSize + t] = n, this;
    }
    getX(e) {
        let t = this.array[e * this.itemSize];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setX(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize] = t, this;
    }
    getY(e) {
        let t = this.array[e * this.itemSize + 1];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setY(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
    }
    getZ(e) {
        let t = this.array[e * this.itemSize + 2];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setZ(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
    }
    getW(e) {
        let t = this.array[e * this.itemSize + 3];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setW(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
    }
    setXY(e, t, n) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
    }
    setXYZ(e, t, n, i) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this;
    }
    setXYZW(e, t, n, i, r) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array), r = Be(r, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this.array[e + 3] = r, this;
    }
    onUpload(e) {
        return this.onUploadCallback = e, this;
    }
    clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
        let e = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized
        };
        return this.name !== "" && (e.name = this.name), this.usage !== Hr && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e;
    }
}, Ql = class extends et {
    constructor(e, t, n){
        super(new Int8Array(e), t, n);
    }
}, jl = class extends et {
    constructor(e, t, n){
        super(new Uint8Array(e), t, n);
    }
}, eh = class extends et {
    constructor(e, t, n){
        super(new Uint8ClampedArray(e), t, n);
    }
}, th = class extends et {
    constructor(e, t, n){
        super(new Int16Array(e), t, n);
    }
}, Zr = class extends et {
    constructor(e, t, n){
        super(new Uint16Array(e), t, n);
    }
}, nh = class extends et {
    constructor(e, t, n){
        super(new Int32Array(e), t, n);
    }
}, Jr = class extends et {
    constructor(e, t, n){
        super(new Uint32Array(e), t, n);
    }
}, ih = class extends et {
    constructor(e, t, n){
        super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
    }
    getX(e) {
        let t = xs(this.array[e * this.itemSize]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setX(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize] = Nt(t), this;
    }
    getY(e) {
        let t = xs(this.array[e * this.itemSize + 1]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setY(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 1] = Nt(t), this;
    }
    getZ(e) {
        let t = xs(this.array[e * this.itemSize + 2]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setZ(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 2] = Nt(t), this;
    }
    getW(e) {
        let t = xs(this.array[e * this.itemSize + 3]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setW(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 3] = Nt(t), this;
    }
    setXY(e, t, n) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array)), this.array[e + 0] = Nt(t), this.array[e + 1] = Nt(n), this;
    }
    setXYZ(e, t, n, i) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array)), this.array[e + 0] = Nt(t), this.array[e + 1] = Nt(n), this.array[e + 2] = Nt(i), this;
    }
    setXYZW(e, t, n, i, r) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array), r = Be(r, this.array)), this.array[e + 0] = Nt(t), this.array[e + 1] = Nt(n), this.array[e + 2] = Nt(i), this.array[e + 3] = Nt(r), this;
    }
}, ve = class extends et {
    constructor(e, t, n){
        super(new Float32Array(e), t, n);
    }
}, sh = class extends et {
    constructor(e, t, n){
        super(new Float64Array(e), t, n);
    }
}, mp = 0, Gt = new ze, Ya = new Je, Ti = new A, Vt = new Qt, us = new Qt, xt = new A, Ge = class s1 extends sn {
    constructor(){
        super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", {
            value: mp++
        }), this.uuid = kt(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
            start: 0,
            count: 1 / 0
        }, this.userData = {};
    }
    getIndex() {
        return this.index;
    }
    setIndex(e) {
        return Array.isArray(e) ? this.index = new (Md(e) ? Jr : Zr)(e, 1) : this.index = e, this;
    }
    getAttribute(e) {
        return this.attributes[e];
    }
    setAttribute(e, t) {
        return this.attributes[e] = t, this;
    }
    deleteAttribute(e) {
        return delete this.attributes[e], this;
    }
    hasAttribute(e) {
        return this.attributes[e] !== void 0;
    }
    addGroup(e, t, n = 0) {
        this.groups.push({
            start: e,
            count: t,
            materialIndex: n
        });
    }
    clearGroups() {
        this.groups = [];
    }
    setDrawRange(e, t) {
        this.drawRange.start = e, this.drawRange.count = t;
    }
    applyMatrix4(e) {
        let t = this.attributes.position;
        t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
        let n = this.attributes.normal;
        if (n !== void 0) {
            let r = new He().getNormalMatrix(e);
            n.applyNormalMatrix(r), n.needsUpdate = !0;
        }
        let i = this.attributes.tangent;
        return i !== void 0 && (i.transformDirection(e), i.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
    }
    applyQuaternion(e) {
        return Gt.makeRotationFromQuaternion(e), this.applyMatrix4(Gt), this;
    }
    rotateX(e) {
        return Gt.makeRotationX(e), this.applyMatrix4(Gt), this;
    }
    rotateY(e) {
        return Gt.makeRotationY(e), this.applyMatrix4(Gt), this;
    }
    rotateZ(e) {
        return Gt.makeRotationZ(e), this.applyMatrix4(Gt), this;
    }
    translate(e, t, n) {
        return Gt.makeTranslation(e, t, n), this.applyMatrix4(Gt), this;
    }
    scale(e, t, n) {
        return Gt.makeScale(e, t, n), this.applyMatrix4(Gt), this;
    }
    lookAt(e) {
        return Ya.lookAt(e), Ya.updateMatrix(), this.applyMatrix4(Ya.matrix), this;
    }
    center() {
        return this.computeBoundingBox(), this.boundingBox.getCenter(Ti).negate(), this.translate(Ti.x, Ti.y, Ti.z), this;
    }
    setFromPoints(e) {
        let t = [];
        for(let n = 0, i = e.length; n < i; n++){
            let r = e[n];
            t.push(r.x, r.y, r.z || 0);
        }
        return this.setAttribute("position", new ve(t, 3)), this;
    }
    computeBoundingBox() {
        this.boundingBox === null && (this.boundingBox = new Qt);
        let e = this.attributes.position, t = this.morphAttributes.position;
        if (e && e.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(new A(-1 / 0, -1 / 0, -1 / 0), new A(1 / 0, 1 / 0, 1 / 0));
            return;
        }
        if (e !== void 0) {
            if (this.boundingBox.setFromBufferAttribute(e), t) for(let n = 0, i = t.length; n < i; n++){
                let r = t[n];
                Vt.setFromBufferAttribute(r), this.morphTargetsRelative ? (xt.addVectors(this.boundingBox.min, Vt.min), this.boundingBox.expandByPoint(xt), xt.addVectors(this.boundingBox.max, Vt.max), this.boundingBox.expandByPoint(xt)) : (this.boundingBox.expandByPoint(Vt.min), this.boundingBox.expandByPoint(Vt.max));
            }
        } else this.boundingBox.makeEmpty();
        (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
        this.boundingSphere === null && (this.boundingSphere = new Yt);
        let e = this.attributes.position, t = this.morphAttributes.position;
        if (e && e.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new A, 1 / 0);
            return;
        }
        if (e) {
            let n = this.boundingSphere.center;
            if (Vt.setFromBufferAttribute(e), t) for(let r = 0, a = t.length; r < a; r++){
                let o = t[r];
                us.setFromBufferAttribute(o), this.morphTargetsRelative ? (xt.addVectors(Vt.min, us.min), Vt.expandByPoint(xt), xt.addVectors(Vt.max, us.max), Vt.expandByPoint(xt)) : (Vt.expandByPoint(us.min), Vt.expandByPoint(us.max));
            }
            Vt.getCenter(n);
            let i = 0;
            for(let r = 0, a = e.count; r < a; r++)xt.fromBufferAttribute(e, r), i = Math.max(i, n.distanceToSquared(xt));
            if (t) for(let r = 0, a = t.length; r < a; r++){
                let o = t[r], c = this.morphTargetsRelative;
                for(let l = 0, h = o.count; l < h; l++)xt.fromBufferAttribute(o, l), c && (Ti.fromBufferAttribute(e, l), xt.add(Ti)), i = Math.max(i, n.distanceToSquared(xt));
            }
            this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
    }
    computeTangents() {
        let e = this.index, t = this.attributes;
        if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
            console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
            return;
        }
        let n = e.array, i = t.position.array, r = t.normal.array, a = t.uv.array, o = i.length / 3;
        this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new et(new Float32Array(4 * o), 4));
        let c = this.getAttribute("tangent").array, l = [], h = [];
        for(let T = 0; T < o; T++)l[T] = new A, h[T] = new A;
        let u = new A, d = new A, f = new A, m = new Z, _ = new Z, g = new Z, p = new A, v = new A;
        function x(T, O, Y) {
            u.fromArray(i, T * 3), d.fromArray(i, O * 3), f.fromArray(i, Y * 3), m.fromArray(a, T * 2), _.fromArray(a, O * 2), g.fromArray(a, Y * 2), d.sub(u), f.sub(u), _.sub(m), g.sub(m);
            let $ = 1 / (_.x * g.y - g.x * _.y);
            isFinite($) && (p.copy(d).multiplyScalar(g.y).addScaledVector(f, -_.y).multiplyScalar($), v.copy(f).multiplyScalar(_.x).addScaledVector(d, -g.x).multiplyScalar($), l[T].add(p), l[O].add(p), l[Y].add(p), h[T].add(v), h[O].add(v), h[Y].add(v));
        }
        let y = this.groups;
        y.length === 0 && (y = [
            {
                start: 0,
                count: n.length
            }
        ]);
        for(let T = 0, O = y.length; T < O; ++T){
            let Y = y[T], $ = Y.start, U = Y.count;
            for(let z = $, q = $ + U; z < q; z += 3)x(n[z + 0], n[z + 1], n[z + 2]);
        }
        let b = new A, w = new A, R = new A, I = new A;
        function M(T) {
            R.fromArray(r, T * 3), I.copy(R);
            let O = l[T];
            b.copy(O), b.sub(R.multiplyScalar(R.dot(O))).normalize(), w.crossVectors(I, O);
            let $ = w.dot(h[T]) < 0 ? -1 : 1;
            c[T * 4] = b.x, c[T * 4 + 1] = b.y, c[T * 4 + 2] = b.z, c[T * 4 + 3] = $;
        }
        for(let T = 0, O = y.length; T < O; ++T){
            let Y = y[T], $ = Y.start, U = Y.count;
            for(let z = $, q = $ + U; z < q; z += 3)M(n[z + 0]), M(n[z + 1]), M(n[z + 2]);
        }
    }
    computeVertexNormals() {
        let e = this.index, t = this.getAttribute("position");
        if (t !== void 0) {
            let n = this.getAttribute("normal");
            if (n === void 0) n = new et(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
            else for(let d = 0, f = n.count; d < f; d++)n.setXYZ(d, 0, 0, 0);
            let i = new A, r = new A, a = new A, o = new A, c = new A, l = new A, h = new A, u = new A;
            if (e) for(let d = 0, f = e.count; d < f; d += 3){
                let m = e.getX(d + 0), _ = e.getX(d + 1), g = e.getX(d + 2);
                i.fromBufferAttribute(t, m), r.fromBufferAttribute(t, _), a.fromBufferAttribute(t, g), h.subVectors(a, r), u.subVectors(i, r), h.cross(u), o.fromBufferAttribute(n, m), c.fromBufferAttribute(n, _), l.fromBufferAttribute(n, g), o.add(h), c.add(h), l.add(h), n.setXYZ(m, o.x, o.y, o.z), n.setXYZ(_, c.x, c.y, c.z), n.setXYZ(g, l.x, l.y, l.z);
            }
            else for(let d = 0, f = t.count; d < f; d += 3)i.fromBufferAttribute(t, d + 0), r.fromBufferAttribute(t, d + 1), a.fromBufferAttribute(t, d + 2), h.subVectors(a, r), u.subVectors(i, r), h.cross(u), n.setXYZ(d + 0, h.x, h.y, h.z), n.setXYZ(d + 1, h.x, h.y, h.z), n.setXYZ(d + 2, h.x, h.y, h.z);
            this.normalizeNormals(), n.needsUpdate = !0;
        }
    }
    normalizeNormals() {
        let e = this.attributes.normal;
        for(let t = 0, n = e.count; t < n; t++)xt.fromBufferAttribute(e, t), xt.normalize(), e.setXYZ(t, xt.x, xt.y, xt.z);
    }
    toNonIndexed() {
        function e(o, c) {
            let l = o.array, h = o.itemSize, u = o.normalized, d = new l.constructor(c.length * h), f = 0, m = 0;
            for(let _ = 0, g = c.length; _ < g; _++){
                o.isInterleavedBufferAttribute ? f = c[_] * o.data.stride + o.offset : f = c[_] * h;
                for(let p = 0; p < h; p++)d[m++] = l[f++];
            }
            return new et(d, h, u);
        }
        if (this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
        let t = new s1, n = this.index.array, i = this.attributes;
        for(let o in i){
            let c = i[o], l = e(c, n);
            t.setAttribute(o, l);
        }
        let r = this.morphAttributes;
        for(let o in r){
            let c = [], l = r[o];
            for(let h = 0, u = l.length; h < u; h++){
                let d = l[h], f = e(d, n);
                c.push(f);
            }
            t.morphAttributes[o] = c;
        }
        t.morphTargetsRelative = this.morphTargetsRelative;
        let a = this.groups;
        for(let o = 0, c = a.length; o < c; o++){
            let l = a[o];
            t.addGroup(l.start, l.count, l.materialIndex);
        }
        return t;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.6,
                type: "BufferGeometry",
                generator: "BufferGeometry.toJSON"
            }
        };
        if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
            let c = this.parameters;
            for(let l in c)c[l] !== void 0 && (e[l] = c[l]);
            return e;
        }
        e.data = {
            attributes: {}
        };
        let t = this.index;
        t !== null && (e.data.index = {
            type: t.array.constructor.name,
            array: Array.prototype.slice.call(t.array)
        });
        let n = this.attributes;
        for(let c in n){
            let l = n[c];
            e.data.attributes[c] = l.toJSON(e.data);
        }
        let i = {}, r = !1;
        for(let c in this.morphAttributes){
            let l = this.morphAttributes[c], h = [];
            for(let u = 0, d = l.length; u < d; u++){
                let f = l[u];
                h.push(f.toJSON(e.data));
            }
            h.length > 0 && (i[c] = h, r = !0);
        }
        r && (e.data.morphAttributes = i, e.data.morphTargetsRelative = this.morphTargetsRelative);
        let a = this.groups;
        a.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(a)));
        let o = this.boundingSphere;
        return o !== null && (e.data.boundingSphere = {
            center: o.center.toArray(),
            radius: o.radius
        }), e;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
        let t = {};
        this.name = e.name;
        let n = e.index;
        n !== null && this.setIndex(n.clone(t));
        let i = e.attributes;
        for(let l in i){
            let h = i[l];
            this.setAttribute(l, h.clone(t));
        }
        let r = e.morphAttributes;
        for(let l in r){
            let h = [], u = r[l];
            for(let d = 0, f = u.length; d < f; d++)h.push(u[d].clone(t));
            this.morphAttributes[l] = h;
        }
        this.morphTargetsRelative = e.morphTargetsRelative;
        let a = e.groups;
        for(let l = 0, h = a.length; l < h; l++){
            let u = a[l];
            this.addGroup(u.start, u.count, u.materialIndex);
        }
        let o = e.boundingBox;
        o !== null && (this.boundingBox = o.clone());
        let c = e.boundingSphere;
        return c !== null && (this.boundingSphere = c.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}, rh = new ze, qn = new hi, js = new Yt, ah = new A, wi = new A, Ai = new A, Ri = new A, Za = new A, er = new A, tr = new Z, nr = new Z, ir = new Z, oh = new A, ch = new A, lh = new A, sr = new A, rr = new A, Mt = class extends Je {
    constructor(e = new Ge, t = new Sn){
        super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e, t) {
        return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    updateMorphTargets() {
        let t = this.geometry.morphAttributes, n = Object.keys(t);
        if (n.length > 0) {
            let i = t[n[0]];
            if (i !== void 0) {
                this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                for(let r = 0, a = i.length; r < a; r++){
                    let o = i[r].name || String(r);
                    this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
                }
            }
        }
    }
    getVertexPosition(e, t) {
        let n = this.geometry, i = n.attributes.position, r = n.morphAttributes.position, a = n.morphTargetsRelative;
        t.fromBufferAttribute(i, e);
        let o = this.morphTargetInfluences;
        if (r && o) {
            er.set(0, 0, 0);
            for(let c = 0, l = r.length; c < l; c++){
                let h = o[c], u = r[c];
                h !== 0 && (Za.fromBufferAttribute(u, e), a ? er.addScaledVector(Za, h) : er.addScaledVector(Za.sub(t), h));
            }
            t.add(er);
        }
        return t;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.material, r = this.matrixWorld;
        i !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), js.copy(n.boundingSphere), js.applyMatrix4(r), qn.copy(e.ray).recast(e.near), !(js.containsPoint(qn.origin) === !1 && (qn.intersectSphere(js, ah) === null || qn.origin.distanceToSquared(ah) > (e.far - e.near) ** 2)) && (rh.copy(r).invert(), qn.copy(e.ray).applyMatrix4(rh), !(n.boundingBox !== null && qn.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, qn)));
    }
    _computeIntersections(e, t, n) {
        let i, r = this.geometry, a = this.material, o = r.index, c = r.attributes.position, l = r.attributes.uv, h = r.attributes.uv1, u = r.attributes.normal, d = r.groups, f = r.drawRange;
        if (o !== null) if (Array.isArray(a)) for(let m = 0, _ = d.length; m < _; m++){
            let g = d[m], p = a[g.materialIndex], v = Math.max(g.start, f.start), x = Math.min(o.count, Math.min(g.start + g.count, f.start + f.count));
            for(let y = v, b = x; y < b; y += 3){
                let w = o.getX(y), R = o.getX(y + 1), I = o.getX(y + 2);
                i = ar(this, p, e, n, l, h, u, w, R, I), i && (i.faceIndex = Math.floor(y / 3), i.face.materialIndex = g.materialIndex, t.push(i));
            }
        }
        else {
            let m = Math.max(0, f.start), _ = Math.min(o.count, f.start + f.count);
            for(let g = m, p = _; g < p; g += 3){
                let v = o.getX(g), x = o.getX(g + 1), y = o.getX(g + 2);
                i = ar(this, a, e, n, l, h, u, v, x, y), i && (i.faceIndex = Math.floor(g / 3), t.push(i));
            }
        }
        else if (c !== void 0) if (Array.isArray(a)) for(let m = 0, _ = d.length; m < _; m++){
            let g = d[m], p = a[g.materialIndex], v = Math.max(g.start, f.start), x = Math.min(c.count, Math.min(g.start + g.count, f.start + f.count));
            for(let y = v, b = x; y < b; y += 3){
                let w = y, R = y + 1, I = y + 2;
                i = ar(this, p, e, n, l, h, u, w, R, I), i && (i.faceIndex = Math.floor(y / 3), i.face.materialIndex = g.materialIndex, t.push(i));
            }
        }
        else {
            let m = Math.max(0, f.start), _ = Math.min(c.count, f.start + f.count);
            for(let g = m, p = _; g < p; g += 3){
                let v = g, x = g + 1, y = g + 2;
                i = ar(this, a, e, n, l, h, u, v, x, y), i && (i.faceIndex = Math.floor(g / 3), t.push(i));
            }
        }
    }
};
function gp(s1, e, t, n, i, r, a, o) {
    let c;
    if (e.side === Ft ? c = n.intersectTriangle(a, r, i, !0, o) : c = n.intersectTriangle(i, r, a, e.side === Bn, o), c === null) return null;
    rr.copy(o), rr.applyMatrix4(s1.matrixWorld);
    let l = t.ray.origin.distanceTo(rr);
    return l < t.near || l > t.far ? null : {
        distance: l,
        point: rr.clone(),
        object: s1
    };
}
function ar(s1, e, t, n, i, r, a, o, c, l) {
    s1.getVertexPosition(o, wi), s1.getVertexPosition(c, Ai), s1.getVertexPosition(l, Ri);
    let h = gp(s1, e, t, n, wi, Ai, Ri, sr);
    if (h) {
        i && (tr.fromBufferAttribute(i, o), nr.fromBufferAttribute(i, c), ir.fromBufferAttribute(i, l), h.uv = Un.getInterpolation(sr, wi, Ai, Ri, tr, nr, ir, new Z)), r && (tr.fromBufferAttribute(r, o), nr.fromBufferAttribute(r, c), ir.fromBufferAttribute(r, l), h.uv1 = Un.getInterpolation(sr, wi, Ai, Ri, tr, nr, ir, new Z), h.uv2 = h.uv1), a && (oh.fromBufferAttribute(a, o), ch.fromBufferAttribute(a, c), lh.fromBufferAttribute(a, l), h.normal = Un.getInterpolation(sr, wi, Ai, Ri, oh, ch, lh, new A), h.normal.dot(n.direction) > 0 && h.normal.multiplyScalar(-1));
        let u = {
            a: o,
            b: c,
            c: l,
            normal: new A,
            materialIndex: 0
        };
        Un.getNormal(wi, Ai, Ri, u.normal), h.face = u;
    }
    return h;
}
var Ji = class s1 extends Ge {
    constructor(e = 1, t = 1, n = 1, i = 1, r = 1, a = 1){
        super(), this.type = "BoxGeometry", this.parameters = {
            width: e,
            height: t,
            depth: n,
            widthSegments: i,
            heightSegments: r,
            depthSegments: a
        };
        let o = this;
        i = Math.floor(i), r = Math.floor(r), a = Math.floor(a);
        let c = [], l = [], h = [], u = [], d = 0, f = 0;
        m("z", "y", "x", -1, -1, n, t, e, a, r, 0), m("z", "y", "x", 1, -1, n, t, -e, a, r, 1), m("x", "z", "y", 1, 1, e, n, t, i, a, 2), m("x", "z", "y", 1, -1, e, n, -t, i, a, 3), m("x", "y", "z", 1, -1, e, t, n, i, r, 4), m("x", "y", "z", -1, -1, e, t, -n, i, r, 5), this.setIndex(c), this.setAttribute("position", new ve(l, 3)), this.setAttribute("normal", new ve(h, 3)), this.setAttribute("uv", new ve(u, 2));
        function m(_, g, p, v, x, y, b, w, R, I, M) {
            let T = y / R, O = b / I, Y = y / 2, $ = b / 2, U = w / 2, z = R + 1, q = I + 1, H = 0, ne = 0, W = new A;
            for(let K = 0; K < q; K++){
                let D = K * O - $;
                for(let G = 0; G < z; G++){
                    let he = G * T - Y;
                    W[_] = he * v, W[g] = D * x, W[p] = U, l.push(W.x, W.y, W.z), W[_] = 0, W[g] = 0, W[p] = w > 0 ? 1 : -1, h.push(W.x, W.y, W.z), u.push(G / R), u.push(1 - K / I), H += 1;
                }
            }
            for(let K = 0; K < I; K++)for(let D = 0; D < R; D++){
                let G = d + D + z * K, he = d + D + z * (K + 1), fe = d + (D + 1) + z * (K + 1), _e = d + (D + 1) + z * K;
                c.push(G, he, _e), c.push(he, fe, _e), ne += 6;
            }
            o.addGroup(f, ne, M), f += ne, d += H;
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
    }
};
function $i(s1) {
    let e = {};
    for(let t in s1){
        e[t] = {};
        for(let n in s1[t]){
            let i = s1[t][n];
            i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? i.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = i.clone() : Array.isArray(i) ? e[t][n] = i.slice() : e[t][n] = i;
        }
    }
    return e;
}
function Lt(s1) {
    let e = {};
    for(let t = 0; t < s1.length; t++){
        let n = $i(s1[t]);
        for(let i in n)e[i] = n[i];
    }
    return e;
}
function _p(s1) {
    let e = [];
    for(let t = 0; t < s1.length; t++)e.push(s1[t].clone());
    return e;
}
function bd(s1) {
    return s1.getRenderTarget() === null ? s1.outputColorSpace : Qe.workingColorSpace;
}
var xp = {
    clone: $i,
    merge: Lt
}, vp = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, yp = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`, jt = class extends bt {
    constructor(e){
        super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = vp, this.fragmentShader = yp, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
            derivatives: !1,
            fragDepth: !1,
            drawBuffers: !1,
            shaderTextureLOD: !1
        }, this.defaultAttributeValues = {
            color: [
                1,
                1,
                1
            ],
            uv: [
                0,
                0
            ],
            uv1: [
                0,
                0
            ]
        }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = $i(e.uniforms), this.uniformsGroups = _p(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        t.glslVersion = this.glslVersion, t.uniforms = {};
        for(let i in this.uniforms){
            let a = this.uniforms[i].value;
            a && a.isTexture ? t.uniforms[i] = {
                type: "t",
                value: a.toJSON(e).uuid
            } : a && a.isColor ? t.uniforms[i] = {
                type: "c",
                value: a.getHex()
            } : a && a.isVector2 ? t.uniforms[i] = {
                type: "v2",
                value: a.toArray()
            } : a && a.isVector3 ? t.uniforms[i] = {
                type: "v3",
                value: a.toArray()
            } : a && a.isVector4 ? t.uniforms[i] = {
                type: "v4",
                value: a.toArray()
            } : a && a.isMatrix3 ? t.uniforms[i] = {
                type: "m3",
                value: a.toArray()
            } : a && a.isMatrix4 ? t.uniforms[i] = {
                type: "m4",
                value: a.toArray()
            } : t.uniforms[i] = {
                value: a
            };
        }
        Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
        let n = {};
        for(let i in this.extensions)this.extensions[i] === !0 && (n[i] = !0);
        return Object.keys(n).length > 0 && (t.extensions = n), t;
    }
}, Cs = class extends Je {
    constructor(){
        super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new ze, this.projectionMatrix = new ze, this.projectionMatrixInverse = new ze, this.coordinateSystem = vn;
    }
    copy(e, t) {
        return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
    }
    getWorldDirection(e) {
        return super.getWorldDirection(e).negate();
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(e, t) {
        super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, yt = class extends Cs {
    constructor(e = 50, t = 1, n = .1, i = 2e3){
        super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
    }
    copy(e, t) {
        return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
    }
    setFocalLength(e) {
        let t = .5 * this.getFilmHeight() / e;
        this.fov = Zi * 2 * Math.atan(t), this.updateProjectionMatrix();
    }
    getFocalLength() {
        let e = Math.tan(ai * .5 * this.fov);
        return .5 * this.getFilmHeight() / e;
    }
    getEffectiveFOV() {
        return Zi * 2 * Math.atan(Math.tan(ai * .5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    setViewOffset(e, t, n, i, r, a) {
        this.aspect = e / t, this.view === null && (this.view = {
            enabled: !0,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix();
    }
    clearViewOffset() {
        this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        let e = this.near, t = e * Math.tan(ai * .5 * this.fov) / this.zoom, n = 2 * t, i = this.aspect * n, r = -.5 * i, a = this.view;
        if (this.view !== null && this.view.enabled) {
            let c = a.fullWidth, l = a.fullHeight;
            r += a.offsetX * i / c, t -= a.offsetY * n / l, i *= a.width / c, n *= a.height / l;
        }
        let o = this.filmOffset;
        o !== 0 && (r += e * o / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, t, t - n, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
    }
}, Ci = -90, Pi = 1, _o = class extends Je {
    constructor(e, t, n){
        super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
        let i = new yt(Ci, Pi, e, t);
        i.layers = this.layers, this.add(i);
        let r = new yt(Ci, Pi, e, t);
        r.layers = this.layers, this.add(r);
        let a = new yt(Ci, Pi, e, t);
        a.layers = this.layers, this.add(a);
        let o = new yt(Ci, Pi, e, t);
        o.layers = this.layers, this.add(o);
        let c = new yt(Ci, Pi, e, t);
        c.layers = this.layers, this.add(c);
        let l = new yt(Ci, Pi, e, t);
        l.layers = this.layers, this.add(l);
    }
    updateCoordinateSystem() {
        let e = this.coordinateSystem, t = this.children.concat(), [n, i, r, a, o, c] = t;
        for (let l of t)this.remove(l);
        if (e === vn) n.up.set(0, 1, 0), n.lookAt(1, 0, 0), i.up.set(0, 1, 0), i.lookAt(-1, 0, 0), r.up.set(0, 0, -1), r.lookAt(0, 1, 0), a.up.set(0, 0, 1), a.lookAt(0, -1, 0), o.up.set(0, 1, 0), o.lookAt(0, 0, 1), c.up.set(0, 1, 0), c.lookAt(0, 0, -1);
        else if (e === Gr) n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), i.up.set(0, -1, 0), i.lookAt(1, 0, 0), r.up.set(0, 0, 1), r.lookAt(0, 1, 0), a.up.set(0, 0, -1), a.lookAt(0, -1, 0), o.up.set(0, -1, 0), o.lookAt(0, 0, 1), c.up.set(0, -1, 0), c.lookAt(0, 0, -1);
        else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
        for (let l of t)this.add(l), l.updateMatrixWorld();
    }
    update(e, t) {
        this.parent === null && this.updateMatrixWorld();
        let { renderTarget: n , activeMipmapLevel: i  } = this;
        this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
        let [r, a, o, c, l, h] = this.children, u = e.getRenderTarget(), d = e.getActiveCubeFace(), f = e.getActiveMipmapLevel(), m = e.xr.enabled;
        e.xr.enabled = !1;
        let _ = n.texture.generateMipmaps;
        n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0, i), e.render(t, r), e.setRenderTarget(n, 1, i), e.render(t, a), e.setRenderTarget(n, 2, i), e.render(t, o), e.setRenderTarget(n, 3, i), e.render(t, c), e.setRenderTarget(n, 4, i), e.render(t, l), n.texture.generateMipmaps = _, e.setRenderTarget(n, 5, i), e.render(t, h), e.setRenderTarget(u, d, f), e.xr.enabled = m, n.texture.needsPMREMUpdate = !0;
    }
}, Ki = class extends St {
    constructor(e, t, n, i, r, a, o, c, l, h){
        e = e !== void 0 ? e : [], t = t !== void 0 ? t : zn, super(e, t, n, i, r, a, o, c, l, h), this.isCubeTexture = !0, this.flipY = !1;
    }
    get images() {
        return this.image;
    }
    set images(e) {
        this.image = e;
    }
}, xo = class extends qt {
    constructor(e = 1, t = {}){
        super(e, e, t), this.isWebGLCubeRenderTarget = !0;
        let n = {
            width: e,
            height: e,
            depth: 1
        }, i = [
            n,
            n,
            n,
            n,
            n,
            n
        ];
        t.encoding !== void 0 && (Ms("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."), t.colorSpace = t.encoding === ri ? vt : Xt), this.texture = new Ki(i, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : mt;
    }
    fromEquirectangularTexture(e, t) {
        this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
        let n = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        }, i = new Ji(5, 5, 5), r = new jt({
            name: "CubemapFromEquirect",
            uniforms: $i(n.uniforms),
            vertexShader: n.vertexShader,
            fragmentShader: n.fragmentShader,
            side: Ft,
            blending: Dn
        });
        r.uniforms.tEquirect.value = t;
        let a = new Mt(i, r), o = t.minFilter;
        return t.minFilter === li && (t.minFilter = mt), new _o(1, 10, this).update(e, a), t.minFilter = o, a.geometry.dispose(), a.material.dispose(), this;
    }
    clear(e, t, n, i) {
        let r = e.getRenderTarget();
        for(let a = 0; a < 6; a++)e.setRenderTarget(this, a), e.clear(t, n, i);
        e.setRenderTarget(r);
    }
}, Ja = new A, Mp = new A, Sp = new He, mn = class {
    constructor(e = new A(1, 0, 0), t = 0){
        this.isPlane = !0, this.normal = e, this.constant = t;
    }
    set(e, t) {
        return this.normal.copy(e), this.constant = t, this;
    }
    setComponents(e, t, n, i) {
        return this.normal.set(e, t, n), this.constant = i, this;
    }
    setFromNormalAndCoplanarPoint(e, t) {
        return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
    }
    setFromCoplanarPoints(e, t, n) {
        let i = Ja.subVectors(n, t).cross(Mp.subVectors(e, t)).normalize();
        return this.setFromNormalAndCoplanarPoint(i, e), this;
    }
    copy(e) {
        return this.normal.copy(e.normal), this.constant = e.constant, this;
    }
    normalize() {
        let e = 1 / this.normal.length();
        return this.normal.multiplyScalar(e), this.constant *= e, this;
    }
    negate() {
        return this.constant *= -1, this.normal.negate(), this;
    }
    distanceToPoint(e) {
        return this.normal.dot(e) + this.constant;
    }
    distanceToSphere(e) {
        return this.distanceToPoint(e.center) - e.radius;
    }
    projectPoint(e, t) {
        return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
    }
    intersectLine(e, t) {
        let n = e.delta(Ja), i = this.normal.dot(n);
        if (i === 0) return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
        let r = -(e.start.dot(this.normal) + this.constant) / i;
        return r < 0 || r > 1 ? null : t.copy(e.start).addScaledVector(n, r);
    }
    intersectsLine(e) {
        let t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
        return t < 0 && n > 0 || n < 0 && t > 0;
    }
    intersectsBox(e) {
        return e.intersectsPlane(this);
    }
    intersectsSphere(e) {
        return e.intersectsPlane(this);
    }
    coplanarPoint(e) {
        return e.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(e, t) {
        let n = t || Sp.getNormalMatrix(e), i = this.coplanarPoint(Ja).applyMatrix4(e), r = this.normal.applyMatrix3(n).normalize();
        return this.constant = -i.dot(r), this;
    }
    translate(e) {
        return this.constant -= e.dot(this.normal), this;
    }
    equals(e) {
        return e.normal.equals(this.normal) && e.constant === this.constant;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Yn = new Yt, or = new A, Ps = class {
    constructor(e = new mn, t = new mn, n = new mn, i = new mn, r = new mn, a = new mn){
        this.planes = [
            e,
            t,
            n,
            i,
            r,
            a
        ];
    }
    set(e, t, n, i, r, a) {
        let o = this.planes;
        return o[0].copy(e), o[1].copy(t), o[2].copy(n), o[3].copy(i), o[4].copy(r), o[5].copy(a), this;
    }
    copy(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++)t[n].copy(e.planes[n]);
        return this;
    }
    setFromProjectionMatrix(e, t = vn) {
        let n = this.planes, i = e.elements, r = i[0], a = i[1], o = i[2], c = i[3], l = i[4], h = i[5], u = i[6], d = i[7], f = i[8], m = i[9], _ = i[10], g = i[11], p = i[12], v = i[13], x = i[14], y = i[15];
        if (n[0].setComponents(c - r, d - l, g - f, y - p).normalize(), n[1].setComponents(c + r, d + l, g + f, y + p).normalize(), n[2].setComponents(c + a, d + h, g + m, y + v).normalize(), n[3].setComponents(c - a, d - h, g - m, y - v).normalize(), n[4].setComponents(c - o, d - u, g - _, y - x).normalize(), t === vn) n[5].setComponents(c + o, d + u, g + _, y + x).normalize();
        else if (t === Gr) n[5].setComponents(o, u, _, x).normalize();
        else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
        return this;
    }
    intersectsObject(e) {
        if (e.boundingSphere !== void 0) e.boundingSphere === null && e.computeBoundingSphere(), Yn.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
        else {
            let t = e.geometry;
            t.boundingSphere === null && t.computeBoundingSphere(), Yn.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
        }
        return this.intersectsSphere(Yn);
    }
    intersectsSprite(e) {
        return Yn.center.set(0, 0, 0), Yn.radius = .7071067811865476, Yn.applyMatrix4(e.matrixWorld), this.intersectsSphere(Yn);
    }
    intersectsSphere(e) {
        let t = this.planes, n = e.center, i = -e.radius;
        for(let r = 0; r < 6; r++)if (t[r].distanceToPoint(n) < i) return !1;
        return !0;
    }
    intersectsBox(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++){
            let i = t[n];
            if (or.x = i.normal.x > 0 ? e.max.x : e.min.x, or.y = i.normal.y > 0 ? e.max.y : e.min.y, or.z = i.normal.z > 0 ? e.max.z : e.min.z, i.distanceToPoint(or) < 0) return !1;
        }
        return !0;
    }
    containsPoint(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++)if (t[n].distanceToPoint(e) < 0) return !1;
        return !0;
    }
    clone() {
        return new this.constructor().copy(this);
    }
};
function Ed() {
    let s1 = null, e = !1, t = null, n = null;
    function i(r, a) {
        t(r, a), n = s1.requestAnimationFrame(i);
    }
    return {
        start: function() {
            e !== !0 && t !== null && (n = s1.requestAnimationFrame(i), e = !0);
        },
        stop: function() {
            s1.cancelAnimationFrame(n), e = !1;
        },
        setAnimationLoop: function(r) {
            t = r;
        },
        setContext: function(r) {
            s1 = r;
        }
    };
}
function bp(s1, e) {
    let t = e.isWebGL2, n = new WeakMap;
    function i(l, h) {
        let u = l.array, d = l.usage, f = s1.createBuffer();
        s1.bindBuffer(h, f), s1.bufferData(h, u, d), l.onUploadCallback();
        let m;
        if (u instanceof Float32Array) m = s1.FLOAT;
        else if (u instanceof Uint16Array) if (l.isFloat16BufferAttribute) if (t) m = s1.HALF_FLOAT;
        else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
        else m = s1.UNSIGNED_SHORT;
        else if (u instanceof Int16Array) m = s1.SHORT;
        else if (u instanceof Uint32Array) m = s1.UNSIGNED_INT;
        else if (u instanceof Int32Array) m = s1.INT;
        else if (u instanceof Int8Array) m = s1.BYTE;
        else if (u instanceof Uint8Array) m = s1.UNSIGNED_BYTE;
        else if (u instanceof Uint8ClampedArray) m = s1.UNSIGNED_BYTE;
        else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + u);
        return {
            buffer: f,
            type: m,
            bytesPerElement: u.BYTES_PER_ELEMENT,
            version: l.version
        };
    }
    function r(l, h, u) {
        let d = h.array, f = h.updateRange;
        s1.bindBuffer(u, l), f.count === -1 ? s1.bufferSubData(u, 0, d) : (t ? s1.bufferSubData(u, f.offset * d.BYTES_PER_ELEMENT, d, f.offset, f.count) : s1.bufferSubData(u, f.offset * d.BYTES_PER_ELEMENT, d.subarray(f.offset, f.offset + f.count)), f.count = -1), h.onUploadCallback();
    }
    function a(l) {
        return l.isInterleavedBufferAttribute && (l = l.data), n.get(l);
    }
    function o(l) {
        l.isInterleavedBufferAttribute && (l = l.data);
        let h = n.get(l);
        h && (s1.deleteBuffer(h.buffer), n.delete(l));
    }
    function c(l, h) {
        if (l.isGLBufferAttribute) {
            let d = n.get(l);
            (!d || d.version < l.version) && n.set(l, {
                buffer: l.buffer,
                type: l.type,
                bytesPerElement: l.elementSize,
                version: l.version
            });
            return;
        }
        l.isInterleavedBufferAttribute && (l = l.data);
        let u = n.get(l);
        u === void 0 ? n.set(l, i(l, h)) : u.version < l.version && (r(u.buffer, l, h), u.version = l.version);
    }
    return {
        get: a,
        remove: o,
        update: c
    };
}
var $r = class s1 extends Ge {
    constructor(e = 1, t = 1, n = 1, i = 1){
        super(), this.type = "PlaneGeometry", this.parameters = {
            width: e,
            height: t,
            widthSegments: n,
            heightSegments: i
        };
        let r = e / 2, a = t / 2, o = Math.floor(n), c = Math.floor(i), l = o + 1, h = c + 1, u = e / o, d = t / c, f = [], m = [], _ = [], g = [];
        for(let p = 0; p < h; p++){
            let v = p * d - a;
            for(let x = 0; x < l; x++){
                let y = x * u - r;
                m.push(y, -v, 0), _.push(0, 0, 1), g.push(x / o), g.push(1 - p / c);
            }
        }
        for(let p = 0; p < c; p++)for(let v = 0; v < o; v++){
            let x = v + l * p, y = v + l * (p + 1), b = v + 1 + l * (p + 1), w = v + 1 + l * p;
            f.push(x, y, w), f.push(y, b, w);
        }
        this.setIndex(f), this.setAttribute("position", new ve(m, 3)), this.setAttribute("normal", new ve(_, 3)), this.setAttribute("uv", new ve(g, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.width, e.height, e.widthSegments, e.heightSegments);
    }
}, Ep = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, Tp = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, wp = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, Ap = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, Rp = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, Cp = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, Pp = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, Lp = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, Ip = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, Up = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, Dp = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, Np = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, Op = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, Fp = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, Bp = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, zp = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, Vp = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, kp = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, Hp = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, Gp = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, Wp = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, Xp = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, qp = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, Yp = `vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, Zp = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, Jp = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, $p = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, Kp = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, Qp = "gl_FragColor = linearToOutputTexel( gl_FragColor );", jp = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`, em = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, tm = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, nm = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, im = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, sm = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, rm = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, am = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, om = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, cm = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, lm = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, hm = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, um = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, dm = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, fm = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, pm = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, mm = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, gm = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, _m = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, xm = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, vm = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, ym = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	anisotropyV /= material.anisotropy;
	material.anisotropy = saturate( material.anisotropy );
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;
#endif`, Mm = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, Sm = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal;
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, bm = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, Em = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, Tm = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, wm = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, Am = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, Rm = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, Cm = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, Pm = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, Lm = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, Im = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, Um = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, Dm = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, Nm = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, Om = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, Fm = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, Bm = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, zm = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, Vm = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, km = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, Hm = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, Gm = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, Wm = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, Xm = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, qm = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, Ym = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, Zm = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, Jm = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, $m = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, Km = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, Qm = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, jm = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, eg = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, tg = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, ng = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, ig = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, sg = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, rg = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, ag = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, og = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, cg = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`, lg = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, hg = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, ug = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, dg = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, fg = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, pg = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, mg = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, gg = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, _g = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, xg = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, vg = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, yg = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`, Mg = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, Sg = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, bg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, Eg = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, Tg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, wg = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, Ag = `#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, Rg = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, Cg = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, Pg = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, Lg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, Ig = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, Ug = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, Dg = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Ng = `#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, Og = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Fg = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Bg = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, zg = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, Vg = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, kg = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, Hg = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, Gg = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Wg = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Xg = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, qg = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Yg = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Zg = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Jg = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, $g = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Kg = `#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Qg = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, jg = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, e_ = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, ke = {
    alphahash_fragment: Ep,
    alphahash_pars_fragment: Tp,
    alphamap_fragment: wp,
    alphamap_pars_fragment: Ap,
    alphatest_fragment: Rp,
    alphatest_pars_fragment: Cp,
    aomap_fragment: Pp,
    aomap_pars_fragment: Lp,
    begin_vertex: Ip,
    beginnormal_vertex: Up,
    bsdfs: Dp,
    iridescence_fragment: Np,
    bumpmap_pars_fragment: Op,
    clipping_planes_fragment: Fp,
    clipping_planes_pars_fragment: Bp,
    clipping_planes_pars_vertex: zp,
    clipping_planes_vertex: Vp,
    color_fragment: kp,
    color_pars_fragment: Hp,
    color_pars_vertex: Gp,
    color_vertex: Wp,
    common: Xp,
    cube_uv_reflection_fragment: qp,
    defaultnormal_vertex: Yp,
    displacementmap_pars_vertex: Zp,
    displacementmap_vertex: Jp,
    emissivemap_fragment: $p,
    emissivemap_pars_fragment: Kp,
    colorspace_fragment: Qp,
    colorspace_pars_fragment: jp,
    envmap_fragment: em,
    envmap_common_pars_fragment: tm,
    envmap_pars_fragment: nm,
    envmap_pars_vertex: im,
    envmap_physical_pars_fragment: mm,
    envmap_vertex: sm,
    fog_vertex: rm,
    fog_pars_vertex: am,
    fog_fragment: om,
    fog_pars_fragment: cm,
    gradientmap_pars_fragment: lm,
    lightmap_fragment: hm,
    lightmap_pars_fragment: um,
    lights_lambert_fragment: dm,
    lights_lambert_pars_fragment: fm,
    lights_pars_begin: pm,
    lights_toon_fragment: gm,
    lights_toon_pars_fragment: _m,
    lights_phong_fragment: xm,
    lights_phong_pars_fragment: vm,
    lights_physical_fragment: ym,
    lights_physical_pars_fragment: Mm,
    lights_fragment_begin: Sm,
    lights_fragment_maps: bm,
    lights_fragment_end: Em,
    logdepthbuf_fragment: Tm,
    logdepthbuf_pars_fragment: wm,
    logdepthbuf_pars_vertex: Am,
    logdepthbuf_vertex: Rm,
    map_fragment: Cm,
    map_pars_fragment: Pm,
    map_particle_fragment: Lm,
    map_particle_pars_fragment: Im,
    metalnessmap_fragment: Um,
    metalnessmap_pars_fragment: Dm,
    morphcolor_vertex: Nm,
    morphnormal_vertex: Om,
    morphtarget_pars_vertex: Fm,
    morphtarget_vertex: Bm,
    normal_fragment_begin: zm,
    normal_fragment_maps: Vm,
    normal_pars_fragment: km,
    normal_pars_vertex: Hm,
    normal_vertex: Gm,
    normalmap_pars_fragment: Wm,
    clearcoat_normal_fragment_begin: Xm,
    clearcoat_normal_fragment_maps: qm,
    clearcoat_pars_fragment: Ym,
    iridescence_pars_fragment: Zm,
    opaque_fragment: Jm,
    packing: $m,
    premultiplied_alpha_fragment: Km,
    project_vertex: Qm,
    dithering_fragment: jm,
    dithering_pars_fragment: eg,
    roughnessmap_fragment: tg,
    roughnessmap_pars_fragment: ng,
    shadowmap_pars_fragment: ig,
    shadowmap_pars_vertex: sg,
    shadowmap_vertex: rg,
    shadowmask_pars_fragment: ag,
    skinbase_vertex: og,
    skinning_pars_vertex: cg,
    skinning_vertex: lg,
    skinnormal_vertex: hg,
    specularmap_fragment: ug,
    specularmap_pars_fragment: dg,
    tonemapping_fragment: fg,
    tonemapping_pars_fragment: pg,
    transmission_fragment: mg,
    transmission_pars_fragment: gg,
    uv_pars_fragment: _g,
    uv_pars_vertex: xg,
    uv_vertex: vg,
    worldpos_vertex: yg,
    background_vert: Mg,
    background_frag: Sg,
    backgroundCube_vert: bg,
    backgroundCube_frag: Eg,
    cube_vert: Tg,
    cube_frag: wg,
    depth_vert: Ag,
    depth_frag: Rg,
    distanceRGBA_vert: Cg,
    distanceRGBA_frag: Pg,
    equirect_vert: Lg,
    equirect_frag: Ig,
    linedashed_vert: Ug,
    linedashed_frag: Dg,
    meshbasic_vert: Ng,
    meshbasic_frag: Og,
    meshlambert_vert: Fg,
    meshlambert_frag: Bg,
    meshmatcap_vert: zg,
    meshmatcap_frag: Vg,
    meshnormal_vert: kg,
    meshnormal_frag: Hg,
    meshphong_vert: Gg,
    meshphong_frag: Wg,
    meshphysical_vert: Xg,
    meshphysical_frag: qg,
    meshtoon_vert: Yg,
    meshtoon_frag: Zg,
    points_vert: Jg,
    points_frag: $g,
    shadow_vert: Kg,
    shadow_frag: Qg,
    sprite_vert: jg,
    sprite_frag: e_
}, le = {
    common: {
        diffuse: {
            value: new pe(16777215)
        },
        opacity: {
            value: 1
        },
        map: {
            value: null
        },
        mapTransform: {
            value: new He
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: new He
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        },
        specularMapTransform: {
            value: new He
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: .98
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        },
        aoMapTransform: {
            value: new He
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        },
        lightMapTransform: {
            value: new He
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpMapTransform: {
            value: new He
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalMapTransform: {
            value: new He
        },
        normalScale: {
            value: new Z(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementMapTransform: {
            value: new He
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        },
        emissiveMapTransform: {
            value: new He
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        },
        metalnessMapTransform: {
            value: new He
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        },
        roughnessMapTransform: {
            value: new He
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 25e-5
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2e3
        },
        fogColor: {
            value: new pe(16777215)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {},
                color: {}
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {}
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        spotLightMap: {
            value: []
        },
        spotShadowMap: {
            value: []
        },
        spotLightMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                decay: {},
                distance: {}
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {}
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {},
                skyColor: {},
                groundColor: {}
            }
        },
        rectAreaLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                width: {},
                height: {}
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: new pe(16777215)
        },
        opacity: {
            value: 1
        },
        size: {
            value: 1
        },
        scale: {
            value: 1
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: new He
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new He
        }
    },
    sprite: {
        diffuse: {
            value: new pe(16777215)
        },
        opacity: {
            value: 1
        },
        center: {
            value: new Z(.5, .5)
        },
        rotation: {
            value: 0
        },
        map: {
            value: null
        },
        mapTransform: {
            value: new He
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: new He
        },
        alphaTest: {
            value: 0
        }
    }
}, nn = {
    basic: {
        uniforms: Lt([
            le.common,
            le.specularmap,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.fog
        ]),
        vertexShader: ke.meshbasic_vert,
        fragmentShader: ke.meshbasic_frag
    },
    lambert: {
        uniforms: Lt([
            le.common,
            le.specularmap,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                }
            }
        ]),
        vertexShader: ke.meshlambert_vert,
        fragmentShader: ke.meshlambert_frag
    },
    phong: {
        uniforms: Lt([
            le.common,
            le.specularmap,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                },
                specular: {
                    value: new pe(1118481)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: ke.meshphong_vert,
        fragmentShader: ke.meshphong_frag
    },
    standard: {
        uniforms: Lt([
            le.common,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.roughnessmap,
            le.metalnessmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                },
                roughness: {
                    value: 1
                },
                metalness: {
                    value: 0
                },
                envMapIntensity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ke.meshphysical_vert,
        fragmentShader: ke.meshphysical_frag
    },
    toon: {
        uniforms: Lt([
            le.common,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.gradientmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                }
            }
        ]),
        vertexShader: ke.meshtoon_vert,
        fragmentShader: ke.meshtoon_frag
    },
    matcap: {
        uniforms: Lt([
            le.common,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: ke.meshmatcap_vert,
        fragmentShader: ke.meshmatcap_frag
    },
    points: {
        uniforms: Lt([
            le.points,
            le.fog
        ]),
        vertexShader: ke.points_vert,
        fragmentShader: ke.points_frag
    },
    dashed: {
        uniforms: Lt([
            le.common,
            le.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: ke.linedashed_vert,
        fragmentShader: ke.linedashed_frag
    },
    depth: {
        uniforms: Lt([
            le.common,
            le.displacementmap
        ]),
        vertexShader: ke.depth_vert,
        fragmentShader: ke.depth_frag
    },
    normal: {
        uniforms: Lt([
            le.common,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ke.meshnormal_vert,
        fragmentShader: ke.meshnormal_frag
    },
    sprite: {
        uniforms: Lt([
            le.sprite,
            le.fog
        ]),
        vertexShader: ke.sprite_vert,
        fragmentShader: ke.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: new He
            },
            t2D: {
                value: null
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: ke.background_vert,
        fragmentShader: ke.background_frag
    },
    backgroundCube: {
        uniforms: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            backgroundBlurriness: {
                value: 0
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: ke.backgroundCube_vert,
        fragmentShader: ke.backgroundCube_frag
    },
    cube: {
        uniforms: {
            tCube: {
                value: null
            },
            tFlip: {
                value: -1
            },
            opacity: {
                value: 1
            }
        },
        vertexShader: ke.cube_vert,
        fragmentShader: ke.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: ke.equirect_vert,
        fragmentShader: ke.equirect_frag
    },
    distanceRGBA: {
        uniforms: Lt([
            le.common,
            le.displacementmap,
            {
                referencePosition: {
                    value: new A
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1e3
                }
            }
        ]),
        vertexShader: ke.distanceRGBA_vert,
        fragmentShader: ke.distanceRGBA_frag
    },
    shadow: {
        uniforms: Lt([
            le.lights,
            le.fog,
            {
                color: {
                    value: new pe(0)
                },
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ke.shadow_vert,
        fragmentShader: ke.shadow_frag
    }
};
nn.physical = {
    uniforms: Lt([
        nn.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatMapTransform: {
                value: new He
            },
            clearcoatNormalMap: {
                value: null
            },
            clearcoatNormalMapTransform: {
                value: new He
            },
            clearcoatNormalScale: {
                value: new Z(1, 1)
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatRoughnessMapTransform: {
                value: new He
            },
            iridescence: {
                value: 0
            },
            iridescenceMap: {
                value: null
            },
            iridescenceMapTransform: {
                value: new He
            },
            iridescenceIOR: {
                value: 1.3
            },
            iridescenceThicknessMinimum: {
                value: 100
            },
            iridescenceThicknessMaximum: {
                value: 400
            },
            iridescenceThicknessMap: {
                value: null
            },
            iridescenceThicknessMapTransform: {
                value: new He
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: new pe(0)
            },
            sheenColorMap: {
                value: null
            },
            sheenColorMapTransform: {
                value: new He
            },
            sheenRoughness: {
                value: 1
            },
            sheenRoughnessMap: {
                value: null
            },
            sheenRoughnessMapTransform: {
                value: new He
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionMapTransform: {
                value: new He
            },
            transmissionSamplerSize: {
                value: new Z
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            thicknessMapTransform: {
                value: new He
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: new pe(0)
            },
            specularColor: {
                value: new pe(1, 1, 1)
            },
            specularColorMap: {
                value: null
            },
            specularColorMapTransform: {
                value: new He
            },
            specularIntensity: {
                value: 1
            },
            specularIntensityMap: {
                value: null
            },
            specularIntensityMapTransform: {
                value: new He
            },
            anisotropyVector: {
                value: new Z
            },
            anisotropyMap: {
                value: null
            },
            anisotropyMapTransform: {
                value: new He
            }
        }
    ]),
    vertexShader: ke.meshphysical_vert,
    fragmentShader: ke.meshphysical_frag
};
var cr = {
    r: 0,
    b: 0,
    g: 0
};
function t_(s1, e, t, n, i, r, a) {
    let o = new pe(0), c = r === !0 ? 0 : 1, l, h, u = null, d = 0, f = null;
    function m(g, p) {
        let v = !1, x = p.isScene === !0 ? p.background : null;
        x && x.isTexture && (x = (p.backgroundBlurriness > 0 ? t : e).get(x)), x === null ? _(o, c) : x && x.isColor && (_(x, 1), v = !0);
        let y = s1.xr.getEnvironmentBlendMode();
        y === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, a) : y === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, a), (s1.autoClear || v) && s1.clear(s1.autoClearColor, s1.autoClearDepth, s1.autoClearStencil), x && (x.isCubeTexture || x.mapping === Vs) ? (h === void 0 && (h = new Mt(new Ji(1, 1, 1), new jt({
            name: "BackgroundCubeMaterial",
            uniforms: $i(nn.backgroundCube.uniforms),
            vertexShader: nn.backgroundCube.vertexShader,
            fragmentShader: nn.backgroundCube.fragmentShader,
            side: Ft,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
        })), h.geometry.deleteAttribute("normal"), h.geometry.deleteAttribute("uv"), h.onBeforeRender = function(b, w, R) {
            this.matrixWorld.copyPosition(R.matrixWorld);
        }, Object.defineProperty(h.material, "envMap", {
            get: function() {
                return this.uniforms.envMap.value;
            }
        }), i.update(h)), h.material.uniforms.envMap.value = x, h.material.uniforms.flipEnvMap.value = x.isCubeTexture && x.isRenderTargetTexture === !1 ? -1 : 1, h.material.uniforms.backgroundBlurriness.value = p.backgroundBlurriness, h.material.uniforms.backgroundIntensity.value = p.backgroundIntensity, h.material.toneMapped = Qe.getTransfer(x.colorSpace) !== nt, (u !== x || d !== x.version || f !== s1.toneMapping) && (h.material.needsUpdate = !0, u = x, d = x.version, f = s1.toneMapping), h.layers.enableAll(), g.unshift(h, h.geometry, h.material, 0, 0, null)) : x && x.isTexture && (l === void 0 && (l = new Mt(new $r(2, 2), new jt({
            name: "BackgroundMaterial",
            uniforms: $i(nn.background.uniforms),
            vertexShader: nn.background.vertexShader,
            fragmentShader: nn.background.fragmentShader,
            side: Bn,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
        })), l.geometry.deleteAttribute("normal"), Object.defineProperty(l.material, "map", {
            get: function() {
                return this.uniforms.t2D.value;
            }
        }), i.update(l)), l.material.uniforms.t2D.value = x, l.material.uniforms.backgroundIntensity.value = p.backgroundIntensity, l.material.toneMapped = Qe.getTransfer(x.colorSpace) !== nt, x.matrixAutoUpdate === !0 && x.updateMatrix(), l.material.uniforms.uvTransform.value.copy(x.matrix), (u !== x || d !== x.version || f !== s1.toneMapping) && (l.material.needsUpdate = !0, u = x, d = x.version, f = s1.toneMapping), l.layers.enableAll(), g.unshift(l, l.geometry, l.material, 0, 0, null));
    }
    function _(g, p) {
        g.getRGB(cr, bd(s1)), n.buffers.color.setClear(cr.r, cr.g, cr.b, p, a);
    }
    return {
        getClearColor: function() {
            return o;
        },
        setClearColor: function(g, p = 1) {
            o.set(g), c = p, _(o, c);
        },
        getClearAlpha: function() {
            return c;
        },
        setClearAlpha: function(g) {
            c = g, _(o, c);
        },
        render: m
    };
}
function n_(s1, e, t, n) {
    let i = s1.getParameter(s1.MAX_VERTEX_ATTRIBS), r = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), a = n.isWebGL2 || r !== null, o = {}, c = g(null), l = c, h = !1;
    function u(U, z, q, H, ne) {
        let W = !1;
        if (a) {
            let K = _(H, q, z);
            l !== K && (l = K, f(l.object)), W = p(U, H, q, ne), W && v(U, H, q, ne);
        } else {
            let K = z.wireframe === !0;
            (l.geometry !== H.id || l.program !== q.id || l.wireframe !== K) && (l.geometry = H.id, l.program = q.id, l.wireframe = K, W = !0);
        }
        ne !== null && t.update(ne, s1.ELEMENT_ARRAY_BUFFER), (W || h) && (h = !1, I(U, z, q, H), ne !== null && s1.bindBuffer(s1.ELEMENT_ARRAY_BUFFER, t.get(ne).buffer));
    }
    function d() {
        return n.isWebGL2 ? s1.createVertexArray() : r.createVertexArrayOES();
    }
    function f(U) {
        return n.isWebGL2 ? s1.bindVertexArray(U) : r.bindVertexArrayOES(U);
    }
    function m(U) {
        return n.isWebGL2 ? s1.deleteVertexArray(U) : r.deleteVertexArrayOES(U);
    }
    function _(U, z, q) {
        let H = q.wireframe === !0, ne = o[U.id];
        ne === void 0 && (ne = {}, o[U.id] = ne);
        let W = ne[z.id];
        W === void 0 && (W = {}, ne[z.id] = W);
        let K = W[H];
        return K === void 0 && (K = g(d()), W[H] = K), K;
    }
    function g(U) {
        let z = [], q = [], H = [];
        for(let ne = 0; ne < i; ne++)z[ne] = 0, q[ne] = 0, H[ne] = 0;
        return {
            geometry: null,
            program: null,
            wireframe: !1,
            newAttributes: z,
            enabledAttributes: q,
            attributeDivisors: H,
            object: U,
            attributes: {},
            index: null
        };
    }
    function p(U, z, q, H) {
        let ne = l.attributes, W = z.attributes, K = 0, D = q.getAttributes();
        for(let G in D)if (D[G].location >= 0) {
            let fe = ne[G], _e = W[G];
            if (_e === void 0 && (G === "instanceMatrix" && U.instanceMatrix && (_e = U.instanceMatrix), G === "instanceColor" && U.instanceColor && (_e = U.instanceColor)), fe === void 0 || fe.attribute !== _e || _e && fe.data !== _e.data) return !0;
            K++;
        }
        return l.attributesNum !== K || l.index !== H;
    }
    function v(U, z, q, H) {
        let ne = {}, W = z.attributes, K = 0, D = q.getAttributes();
        for(let G in D)if (D[G].location >= 0) {
            let fe = W[G];
            fe === void 0 && (G === "instanceMatrix" && U.instanceMatrix && (fe = U.instanceMatrix), G === "instanceColor" && U.instanceColor && (fe = U.instanceColor));
            let _e = {};
            _e.attribute = fe, fe && fe.data && (_e.data = fe.data), ne[G] = _e, K++;
        }
        l.attributes = ne, l.attributesNum = K, l.index = H;
    }
    function x() {
        let U = l.newAttributes;
        for(let z = 0, q = U.length; z < q; z++)U[z] = 0;
    }
    function y(U) {
        b(U, 0);
    }
    function b(U, z) {
        let q = l.newAttributes, H = l.enabledAttributes, ne = l.attributeDivisors;
        q[U] = 1, H[U] === 0 && (s1.enableVertexAttribArray(U), H[U] = 1), ne[U] !== z && ((n.isWebGL2 ? s1 : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](U, z), ne[U] = z);
    }
    function w() {
        let U = l.newAttributes, z = l.enabledAttributes;
        for(let q = 0, H = z.length; q < H; q++)z[q] !== U[q] && (s1.disableVertexAttribArray(q), z[q] = 0);
    }
    function R(U, z, q, H, ne, W, K) {
        K === !0 ? s1.vertexAttribIPointer(U, z, q, ne, W) : s1.vertexAttribPointer(U, z, q, H, ne, W);
    }
    function I(U, z, q, H) {
        if (n.isWebGL2 === !1 && (U.isInstancedMesh || H.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null) return;
        x();
        let ne = H.attributes, W = q.getAttributes(), K = z.defaultAttributeValues;
        for(let D in W){
            let G = W[D];
            if (G.location >= 0) {
                let he = ne[D];
                if (he === void 0 && (D === "instanceMatrix" && U.instanceMatrix && (he = U.instanceMatrix), D === "instanceColor" && U.instanceColor && (he = U.instanceColor)), he !== void 0) {
                    let fe = he.normalized, _e = he.itemSize, we = t.get(he);
                    if (we === void 0) continue;
                    let Ee = we.buffer, Te = we.type, Ye = we.bytesPerElement, it = n.isWebGL2 === !0 && (Te === s1.INT || Te === s1.UNSIGNED_INT || he.gpuType === dd);
                    if (he.isInterleavedBufferAttribute) {
                        let Ce = he.data, L = Ce.stride, oe = he.offset;
                        if (Ce.isInstancedInterleavedBuffer) {
                            for(let X = 0; X < G.locationSize; X++)b(G.location + X, Ce.meshPerAttribute);
                            U.isInstancedMesh !== !0 && H._maxInstanceCount === void 0 && (H._maxInstanceCount = Ce.meshPerAttribute * Ce.count);
                        } else for(let X = 0; X < G.locationSize; X++)y(G.location + X);
                        s1.bindBuffer(s1.ARRAY_BUFFER, Ee);
                        for(let X = 0; X < G.locationSize; X++)R(G.location + X, _e / G.locationSize, Te, fe, L * Ye, (oe + _e / G.locationSize * X) * Ye, it);
                    } else {
                        if (he.isInstancedBufferAttribute) {
                            for(let Ce = 0; Ce < G.locationSize; Ce++)b(G.location + Ce, he.meshPerAttribute);
                            U.isInstancedMesh !== !0 && H._maxInstanceCount === void 0 && (H._maxInstanceCount = he.meshPerAttribute * he.count);
                        } else for(let Ce = 0; Ce < G.locationSize; Ce++)y(G.location + Ce);
                        s1.bindBuffer(s1.ARRAY_BUFFER, Ee);
                        for(let Ce = 0; Ce < G.locationSize; Ce++)R(G.location + Ce, _e / G.locationSize, Te, fe, _e * Ye, _e / G.locationSize * Ce * Ye, it);
                    }
                } else if (K !== void 0) {
                    let fe = K[D];
                    if (fe !== void 0) switch(fe.length){
                        case 2:
                            s1.vertexAttrib2fv(G.location, fe);
                            break;
                        case 3:
                            s1.vertexAttrib3fv(G.location, fe);
                            break;
                        case 4:
                            s1.vertexAttrib4fv(G.location, fe);
                            break;
                        default:
                            s1.vertexAttrib1fv(G.location, fe);
                    }
                }
            }
        }
        w();
    }
    function M() {
        Y();
        for(let U in o){
            let z = o[U];
            for(let q in z){
                let H = z[q];
                for(let ne in H)m(H[ne].object), delete H[ne];
                delete z[q];
            }
            delete o[U];
        }
    }
    function T(U) {
        if (o[U.id] === void 0) return;
        let z = o[U.id];
        for(let q in z){
            let H = z[q];
            for(let ne in H)m(H[ne].object), delete H[ne];
            delete z[q];
        }
        delete o[U.id];
    }
    function O(U) {
        for(let z in o){
            let q = o[z];
            if (q[U.id] === void 0) continue;
            let H = q[U.id];
            for(let ne in H)m(H[ne].object), delete H[ne];
            delete q[U.id];
        }
    }
    function Y() {
        $(), h = !0, l !== c && (l = c, f(l.object));
    }
    function $() {
        c.geometry = null, c.program = null, c.wireframe = !1;
    }
    return {
        setup: u,
        reset: Y,
        resetDefaultState: $,
        dispose: M,
        releaseStatesOfGeometry: T,
        releaseStatesOfProgram: O,
        initAttributes: x,
        enableAttribute: y,
        disableUnusedAttributes: w
    };
}
function i_(s1, e, t, n) {
    let i = n.isWebGL2, r;
    function a(l) {
        r = l;
    }
    function o(l, h) {
        s1.drawArrays(r, l, h), t.update(h, r, 1);
    }
    function c(l, h, u) {
        if (u === 0) return;
        let d, f;
        if (i) d = s1, f = "drawArraysInstanced";
        else if (d = e.get("ANGLE_instanced_arrays"), f = "drawArraysInstancedANGLE", d === null) {
            console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
        }
        d[f](r, l, h, u), t.update(h, r, u);
    }
    this.setMode = a, this.render = o, this.renderInstances = c;
}
function s_(s1, e, t) {
    let n;
    function i() {
        if (n !== void 0) return n;
        if (e.has("EXT_texture_filter_anisotropic") === !0) {
            let R = e.get("EXT_texture_filter_anisotropic");
            n = s1.getParameter(R.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else n = 0;
        return n;
    }
    function r(R) {
        if (R === "highp") {
            if (s1.getShaderPrecisionFormat(s1.VERTEX_SHADER, s1.HIGH_FLOAT).precision > 0 && s1.getShaderPrecisionFormat(s1.FRAGMENT_SHADER, s1.HIGH_FLOAT).precision > 0) return "highp";
            R = "mediump";
        }
        return R === "mediump" && s1.getShaderPrecisionFormat(s1.VERTEX_SHADER, s1.MEDIUM_FLOAT).precision > 0 && s1.getShaderPrecisionFormat(s1.FRAGMENT_SHADER, s1.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
    }
    let a = typeof WebGL2RenderingContext < "u" && s1.constructor.name === "WebGL2RenderingContext", o = t.precision !== void 0 ? t.precision : "highp", c = r(o);
    c !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", c, "instead."), o = c);
    let l = a || e.has("WEBGL_draw_buffers"), h = t.logarithmicDepthBuffer === !0, u = s1.getParameter(s1.MAX_TEXTURE_IMAGE_UNITS), d = s1.getParameter(s1.MAX_VERTEX_TEXTURE_IMAGE_UNITS), f = s1.getParameter(s1.MAX_TEXTURE_SIZE), m = s1.getParameter(s1.MAX_CUBE_MAP_TEXTURE_SIZE), _ = s1.getParameter(s1.MAX_VERTEX_ATTRIBS), g = s1.getParameter(s1.MAX_VERTEX_UNIFORM_VECTORS), p = s1.getParameter(s1.MAX_VARYING_VECTORS), v = s1.getParameter(s1.MAX_FRAGMENT_UNIFORM_VECTORS), x = d > 0, y = a || e.has("OES_texture_float"), b = x && y, w = a ? s1.getParameter(s1.MAX_SAMPLES) : 0;
    return {
        isWebGL2: a,
        drawBuffers: l,
        getMaxAnisotropy: i,
        getMaxPrecision: r,
        precision: o,
        logarithmicDepthBuffer: h,
        maxTextures: u,
        maxVertexTextures: d,
        maxTextureSize: f,
        maxCubemapSize: m,
        maxAttributes: _,
        maxVertexUniforms: g,
        maxVaryings: p,
        maxFragmentUniforms: v,
        vertexTextures: x,
        floatFragmentTextures: y,
        floatVertexTextures: b,
        maxSamples: w
    };
}
function r_(s1) {
    let e = this, t = null, n = 0, i = !1, r = !1, a = new mn, o = new He, c = {
        value: null,
        needsUpdate: !1
    };
    this.uniform = c, this.numPlanes = 0, this.numIntersection = 0, this.init = function(u, d) {
        let f = u.length !== 0 || d || n !== 0 || i;
        return i = d, n = u.length, f;
    }, this.beginShadows = function() {
        r = !0, h(null);
    }, this.endShadows = function() {
        r = !1;
    }, this.setGlobalState = function(u, d) {
        t = h(u, d, 0);
    }, this.setState = function(u, d, f) {
        let m = u.clippingPlanes, _ = u.clipIntersection, g = u.clipShadows, p = s1.get(u);
        if (!i || m === null || m.length === 0 || r && !g) r ? h(null) : l();
        else {
            let v = r ? 0 : n, x = v * 4, y = p.clippingState || null;
            c.value = y, y = h(m, d, x, f);
            for(let b = 0; b !== x; ++b)y[b] = t[b];
            p.clippingState = y, this.numIntersection = _ ? this.numPlanes : 0, this.numPlanes += v;
        }
    };
    function l() {
        c.value !== t && (c.value = t, c.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
    }
    function h(u, d, f, m) {
        let _ = u !== null ? u.length : 0, g = null;
        if (_ !== 0) {
            if (g = c.value, m !== !0 || g === null) {
                let p = f + _ * 4, v = d.matrixWorldInverse;
                o.getNormalMatrix(v), (g === null || g.length < p) && (g = new Float32Array(p));
                for(let x = 0, y = f; x !== _; ++x, y += 4)a.copy(u[x]).applyMatrix4(v, o), a.normal.toArray(g, y), g[y + 3] = a.constant;
            }
            c.value = g, c.needsUpdate = !0;
        }
        return e.numPlanes = _, e.numIntersection = 0, g;
    }
}
function a_(s1) {
    let e = new WeakMap;
    function t(a, o) {
        return o === Ir ? a.mapping = zn : o === Ur && (a.mapping = ci), a;
    }
    function n(a) {
        if (a && a.isTexture && a.isRenderTargetTexture === !1) {
            let o = a.mapping;
            if (o === Ir || o === Ur) if (e.has(a)) {
                let c = e.get(a).texture;
                return t(c, a.mapping);
            } else {
                let c = a.image;
                if (c && c.height > 0) {
                    let l = new xo(c.height / 2);
                    return l.fromEquirectangularTexture(s1, a), e.set(a, l), a.addEventListener("dispose", i), t(l.texture, a.mapping);
                } else return null;
            }
        }
        return a;
    }
    function i(a) {
        let o = a.target;
        o.removeEventListener("dispose", i);
        let c = e.get(o);
        c !== void 0 && (e.delete(o), c.dispose());
    }
    function r() {
        e = new WeakMap;
    }
    return {
        get: n,
        dispose: r
    };
}
var Ls = class extends Cs {
    constructor(e = -1, t = 1, n = 1, i = -1, r = .1, a = 2e3){
        super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = i, this.near = r, this.far = a, this.updateProjectionMatrix();
    }
    copy(e, t) {
        return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
    }
    setViewOffset(e, t, n, i, r, a) {
        this.view === null && (this.view = {
            enabled: !0,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix();
    }
    clearViewOffset() {
        this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        let e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2, r = n - e, a = n + e, o = i + t, c = i - t;
        if (this.view !== null && this.view.enabled) {
            let l = (this.right - this.left) / this.view.fullWidth / this.zoom, h = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            r += l * this.view.offsetX, a = r + l * this.view.width, o -= h * this.view.offsetY, c = o - h * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(r, a, o, c, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
    }
}, Hi = 4, hh = [
    .125,
    .215,
    .35,
    .446,
    .526,
    .582
], ei = 20, $a = new Ls, uh = new pe, Ka = null, jn = (1 + Math.sqrt(5)) / 2, Li = 1 / jn, dh = [
    new A(1, 1, 1),
    new A(-1, 1, 1),
    new A(1, 1, -1),
    new A(-1, 1, -1),
    new A(0, jn, Li),
    new A(0, jn, -Li),
    new A(Li, 0, jn),
    new A(-Li, 0, jn),
    new A(jn, Li, 0),
    new A(-jn, Li, 0)
], Kr = class {
    constructor(e){
        this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
    }
    fromScene(e, t = 0, n = .1, i = 100) {
        Ka = this._renderer.getRenderTarget(), this._setSize(256);
        let r = this._allocateTargets();
        return r.depthBuffer = !0, this._sceneToCubeUV(e, n, i, r), t > 0 && this._blur(r, 0, 0, t), this._applyPMREM(r), this._cleanup(r), r;
    }
    fromEquirectangular(e, t = null) {
        return this._fromTexture(e, t);
    }
    fromCubemap(e, t = null) {
        return this._fromTexture(e, t);
    }
    compileCubemapShader() {
        this._cubemapMaterial === null && (this._cubemapMaterial = mh(), this._compileMaterial(this._cubemapMaterial));
    }
    compileEquirectangularShader() {
        this._equirectMaterial === null && (this._equirectMaterial = ph(), this._compileMaterial(this._equirectMaterial));
    }
    dispose() {
        this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
    }
    _setSize(e) {
        this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
        this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
        for(let e = 0; e < this._lodPlanes.length; e++)this._lodPlanes[e].dispose();
    }
    _cleanup(e) {
        this._renderer.setRenderTarget(Ka), e.scissorTest = !1, lr(e, 0, 0, e.width, e.height);
    }
    _fromTexture(e, t) {
        e.mapping === zn || e.mapping === ci ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), Ka = this._renderer.getRenderTarget();
        let n = t || this._allocateTargets();
        return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
    }
    _allocateTargets() {
        let e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
            magFilter: mt,
            minFilter: mt,
            generateMipmaps: !1,
            type: Ts,
            format: Wt,
            colorSpace: Mn,
            depthBuffer: !1
        }, i = fh(e, t, n);
        if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
            this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = fh(e, t, n);
            let { _lodMax: r  } = this;
            ({ sizeLods: this._sizeLods , lodPlanes: this._lodPlanes , sigmas: this._sigmas  } = o_(r)), this._blurMaterial = c_(r, e, t);
        }
        return i;
    }
    _compileMaterial(e) {
        let t = new Mt(this._lodPlanes[0], e);
        this._renderer.compile(t, $a);
    }
    _sceneToCubeUV(e, t, n, i) {
        let o = new yt(90, 1, t, n), c = [
            1,
            -1,
            1,
            1,
            1,
            1
        ], l = [
            1,
            1,
            1,
            -1,
            -1,
            -1
        ], h = this._renderer, u = h.autoClear, d = h.toneMapping;
        h.getClearColor(uh), h.toneMapping = Nn, h.autoClear = !1;
        let f = new Sn({
            name: "PMREM.Background",
            side: Ft,
            depthWrite: !1,
            depthTest: !1
        }), m = new Mt(new Ji, f), _ = !1, g = e.background;
        g ? g.isColor && (f.color.copy(g), e.background = null, _ = !0) : (f.color.copy(uh), _ = !0);
        for(let p = 0; p < 6; p++){
            let v = p % 3;
            v === 0 ? (o.up.set(0, c[p], 0), o.lookAt(l[p], 0, 0)) : v === 1 ? (o.up.set(0, 0, c[p]), o.lookAt(0, l[p], 0)) : (o.up.set(0, c[p], 0), o.lookAt(0, 0, l[p]));
            let x = this._cubeSize;
            lr(i, v * x, p > 2 ? x : 0, x, x), h.setRenderTarget(i), _ && h.render(m, o), h.render(e, o);
        }
        m.geometry.dispose(), m.material.dispose(), h.toneMapping = d, h.autoClear = u, e.background = g;
    }
    _textureToCubeUV(e, t) {
        let n = this._renderer, i = e.mapping === zn || e.mapping === ci;
        i ? (this._cubemapMaterial === null && (this._cubemapMaterial = mh()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = ph());
        let r = i ? this._cubemapMaterial : this._equirectMaterial, a = new Mt(this._lodPlanes[0], r), o = r.uniforms;
        o.envMap.value = e;
        let c = this._cubeSize;
        lr(t, 0, 0, 3 * c, 2 * c), n.setRenderTarget(t), n.render(a, $a);
    }
    _applyPMREM(e) {
        let t = this._renderer, n = t.autoClear;
        t.autoClear = !1;
        for(let i = 1; i < this._lodPlanes.length; i++){
            let r = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]), a = dh[(i - 1) % dh.length];
            this._blur(e, i - 1, i, r, a);
        }
        t.autoClear = n;
    }
    _blur(e, t, n, i, r) {
        let a = this._pingPongRenderTarget;
        this._halfBlur(e, a, t, n, i, "latitudinal", r), this._halfBlur(a, e, n, n, i, "longitudinal", r);
    }
    _halfBlur(e, t, n, i, r, a, o) {
        let c = this._renderer, l = this._blurMaterial;
        a !== "latitudinal" && a !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!");
        let h = 3, u = new Mt(this._lodPlanes[i], l), d = l.uniforms, f = this._sizeLods[n] - 1, m = isFinite(r) ? Math.PI / (2 * f) : 2 * Math.PI / (2 * ei - 1), _ = r / m, g = isFinite(r) ? 1 + Math.floor(h * _) : ei;
        g > ei && console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${ei}`);
        let p = [], v = 0;
        for(let R = 0; R < ei; ++R){
            let I = R / _, M = Math.exp(-I * I / 2);
            p.push(M), R === 0 ? v += M : R < g && (v += 2 * M);
        }
        for(let R = 0; R < p.length; R++)p[R] = p[R] / v;
        d.envMap.value = e.texture, d.samples.value = g, d.weights.value = p, d.latitudinal.value = a === "latitudinal", o && (d.poleAxis.value = o);
        let { _lodMax: x  } = this;
        d.dTheta.value = m, d.mipInt.value = x - n;
        let y = this._sizeLods[i], b = 3 * y * (i > x - Hi ? i - x + Hi : 0), w = 4 * (this._cubeSize - y);
        lr(t, b, w, 3 * y, 2 * y), c.setRenderTarget(t), c.render(u, $a);
    }
};
function o_(s1) {
    let e = [], t = [], n = [], i = s1, r = s1 - Hi + 1 + hh.length;
    for(let a = 0; a < r; a++){
        let o = Math.pow(2, i);
        t.push(o);
        let c = 1 / o;
        a > s1 - Hi ? c = hh[a - s1 + Hi - 1] : a === 0 && (c = 0), n.push(c);
        let l = 1 / (o - 2), h = -l, u = 1 + l, d = [
            h,
            h,
            u,
            h,
            u,
            u,
            h,
            h,
            u,
            u,
            h,
            u
        ], f = 6, m = 6, _ = 3, g = 2, p = 1, v = new Float32Array(_ * m * f), x = new Float32Array(g * m * f), y = new Float32Array(p * m * f);
        for(let w = 0; w < f; w++){
            let R = w % 3 * 2 / 3 - 1, I = w > 2 ? 0 : -1, M = [
                R,
                I,
                0,
                R + 2 / 3,
                I,
                0,
                R + 2 / 3,
                I + 1,
                0,
                R,
                I,
                0,
                R + 2 / 3,
                I + 1,
                0,
                R,
                I + 1,
                0
            ];
            v.set(M, _ * m * w), x.set(d, g * m * w);
            let T = [
                w,
                w,
                w,
                w,
                w,
                w
            ];
            y.set(T, p * m * w);
        }
        let b = new Ge;
        b.setAttribute("position", new et(v, _)), b.setAttribute("uv", new et(x, g)), b.setAttribute("faceIndex", new et(y, p)), e.push(b), i > Hi && i--;
    }
    return {
        lodPlanes: e,
        sizeLods: t,
        sigmas: n
    };
}
function fh(s1, e, t) {
    let n = new qt(s1, e, t);
    return n.texture.mapping = Vs, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function lr(s1, e, t, n, i) {
    s1.viewport.set(e, t, n, i), s1.scissor.set(e, t, n, i);
}
function c_(s1, e, t) {
    let n = new Float32Array(ei), i = new A(0, 1, 0);
    return new jt({
        name: "SphericalGaussianBlur",
        defines: {
            n: ei,
            CUBEUV_TEXEL_WIDTH: 1 / e,
            CUBEUV_TEXEL_HEIGHT: 1 / t,
            CUBEUV_MAX_MIP: `${s1}.0`
        },
        uniforms: {
            envMap: {
                value: null
            },
            samples: {
                value: 1
            },
            weights: {
                value: n
            },
            latitudinal: {
                value: !1
            },
            dTheta: {
                value: 0
            },
            mipInt: {
                value: 0
            },
            poleAxis: {
                value: i
            }
        },
        vertexShader: Zc(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
        blending: Dn,
        depthTest: !1,
        depthWrite: !1
    });
}
function ph() {
    return new jt({
        name: "EquirectangularToCubeUV",
        uniforms: {
            envMap: {
                value: null
            }
        },
        vertexShader: Zc(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
        blending: Dn,
        depthTest: !1,
        depthWrite: !1
    });
}
function mh() {
    return new jt({
        name: "CubemapToCubeUV",
        uniforms: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            }
        },
        vertexShader: Zc(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
        blending: Dn,
        depthTest: !1,
        depthWrite: !1
    });
}
function Zc() {
    return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function l_(s1) {
    let e = new WeakMap, t = null;
    function n(o) {
        if (o && o.isTexture) {
            let c = o.mapping, l = c === Ir || c === Ur, h = c === zn || c === ci;
            if (l || h) if (o.isRenderTargetTexture && o.needsPMREMUpdate === !0) {
                o.needsPMREMUpdate = !1;
                let u = e.get(o);
                return t === null && (t = new Kr(s1)), u = l ? t.fromEquirectangular(o, u) : t.fromCubemap(o, u), e.set(o, u), u.texture;
            } else {
                if (e.has(o)) return e.get(o).texture;
                {
                    let u = o.image;
                    if (l && u && u.height > 0 || h && u && i(u)) {
                        t === null && (t = new Kr(s1));
                        let d = l ? t.fromEquirectangular(o) : t.fromCubemap(o);
                        return e.set(o, d), o.addEventListener("dispose", r), d.texture;
                    } else return null;
                }
            }
        }
        return o;
    }
    function i(o) {
        let c = 0, l = 6;
        for(let h = 0; h < l; h++)o[h] !== void 0 && c++;
        return c === l;
    }
    function r(o) {
        let c = o.target;
        c.removeEventListener("dispose", r);
        let l = e.get(c);
        l !== void 0 && (e.delete(c), l.dispose());
    }
    function a() {
        e = new WeakMap, t !== null && (t.dispose(), t = null);
    }
    return {
        get: n,
        dispose: a
    };
}
function h_(s1) {
    let e = {};
    function t(n) {
        if (e[n] !== void 0) return e[n];
        let i;
        switch(n){
            case "WEBGL_depth_texture":
                i = s1.getExtension("WEBGL_depth_texture") || s1.getExtension("MOZ_WEBGL_depth_texture") || s1.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
            case "EXT_texture_filter_anisotropic":
                i = s1.getExtension("EXT_texture_filter_anisotropic") || s1.getExtension("MOZ_EXT_texture_filter_anisotropic") || s1.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
            case "WEBGL_compressed_texture_s3tc":
                i = s1.getExtension("WEBGL_compressed_texture_s3tc") || s1.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s1.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
            case "WEBGL_compressed_texture_pvrtc":
                i = s1.getExtension("WEBGL_compressed_texture_pvrtc") || s1.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
            default:
                i = s1.getExtension(n);
        }
        return e[n] = i, i;
    }
    return {
        has: function(n) {
            return t(n) !== null;
        },
        init: function(n) {
            n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
        },
        get: function(n) {
            let i = t(n);
            return i === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), i;
        }
    };
}
function u_(s1, e, t, n) {
    let i = {}, r = new WeakMap;
    function a(u) {
        let d = u.target;
        d.index !== null && e.remove(d.index);
        for(let m in d.attributes)e.remove(d.attributes[m]);
        for(let m in d.morphAttributes){
            let _ = d.morphAttributes[m];
            for(let g = 0, p = _.length; g < p; g++)e.remove(_[g]);
        }
        d.removeEventListener("dispose", a), delete i[d.id];
        let f = r.get(d);
        f && (e.remove(f), r.delete(d)), n.releaseStatesOfGeometry(d), d.isInstancedBufferGeometry === !0 && delete d._maxInstanceCount, t.memory.geometries--;
    }
    function o(u, d) {
        return i[d.id] === !0 || (d.addEventListener("dispose", a), i[d.id] = !0, t.memory.geometries++), d;
    }
    function c(u) {
        let d = u.attributes;
        for(let m in d)e.update(d[m], s1.ARRAY_BUFFER);
        let f = u.morphAttributes;
        for(let m in f){
            let _ = f[m];
            for(let g = 0, p = _.length; g < p; g++)e.update(_[g], s1.ARRAY_BUFFER);
        }
    }
    function l(u) {
        let d = [], f = u.index, m = u.attributes.position, _ = 0;
        if (f !== null) {
            let v = f.array;
            _ = f.version;
            for(let x = 0, y = v.length; x < y; x += 3){
                let b = v[x + 0], w = v[x + 1], R = v[x + 2];
                d.push(b, w, w, R, R, b);
            }
        } else if (m !== void 0) {
            let v = m.array;
            _ = m.version;
            for(let x = 0, y = v.length / 3 - 1; x < y; x += 3){
                let b = x + 0, w = x + 1, R = x + 2;
                d.push(b, w, w, R, R, b);
            }
        } else return;
        let g = new (Md(d) ? Jr : Zr)(d, 1);
        g.version = _;
        let p = r.get(u);
        p && e.remove(p), r.set(u, g);
    }
    function h(u) {
        let d = r.get(u);
        if (d) {
            let f = u.index;
            f !== null && d.version < f.version && l(u);
        } else l(u);
        return r.get(u);
    }
    return {
        get: o,
        update: c,
        getWireframeAttribute: h
    };
}
function d_(s1, e, t, n) {
    let i = n.isWebGL2, r;
    function a(d) {
        r = d;
    }
    let o, c;
    function l(d) {
        o = d.type, c = d.bytesPerElement;
    }
    function h(d, f) {
        s1.drawElements(r, f, o, d * c), t.update(f, r, 1);
    }
    function u(d, f, m) {
        if (m === 0) return;
        let _, g;
        if (i) _ = s1, g = "drawElementsInstanced";
        else if (_ = e.get("ANGLE_instanced_arrays"), g = "drawElementsInstancedANGLE", _ === null) {
            console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
        }
        _[g](r, f, o, d * c, m), t.update(f, r, m);
    }
    this.setMode = a, this.setIndex = l, this.render = h, this.renderInstances = u;
}
function f_(s1) {
    let e = {
        geometries: 0,
        textures: 0
    }, t = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    function n(r, a, o) {
        switch(t.calls++, a){
            case s1.TRIANGLES:
                t.triangles += o * (r / 3);
                break;
            case s1.LINES:
                t.lines += o * (r / 2);
                break;
            case s1.LINE_STRIP:
                t.lines += o * (r - 1);
                break;
            case s1.LINE_LOOP:
                t.lines += o * r;
                break;
            case s1.POINTS:
                t.points += o * r;
                break;
            default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", a);
                break;
        }
    }
    function i() {
        t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
    }
    return {
        memory: e,
        render: t,
        programs: null,
        autoReset: !0,
        reset: i,
        update: n
    };
}
function p_(s1, e) {
    return s1[0] - e[0];
}
function m_(s1, e) {
    return Math.abs(e[1]) - Math.abs(s1[1]);
}
function g_(s1, e, t) {
    let n = {}, i = new Float32Array(8), r = new WeakMap, a = new je, o = [];
    for(let l = 0; l < 8; l++)o[l] = [
        l,
        0
    ];
    function c(l, h, u) {
        let d = l.morphTargetInfluences;
        if (e.isWebGL2 === !0) {
            let f = h.morphAttributes.position || h.morphAttributes.normal || h.morphAttributes.color, m = f !== void 0 ? f.length : 0, _ = r.get(h);
            if (_ === void 0 || _.count !== m) {
                let U = function() {
                    Y.dispose(), r.delete(h), h.removeEventListener("dispose", U);
                };
                _ !== void 0 && _.texture.dispose();
                let v = h.morphAttributes.position !== void 0, x = h.morphAttributes.normal !== void 0, y = h.morphAttributes.color !== void 0, b = h.morphAttributes.position || [], w = h.morphAttributes.normal || [], R = h.morphAttributes.color || [], I = 0;
                v === !0 && (I = 1), x === !0 && (I = 2), y === !0 && (I = 3);
                let M = h.attributes.position.count * I, T = 1;
                M > e.maxTextureSize && (T = Math.ceil(M / e.maxTextureSize), M = e.maxTextureSize);
                let O = new Float32Array(M * T * 4 * m), Y = new As(O, M, T, m);
                Y.type = xn, Y.needsUpdate = !0;
                let $ = I * 4;
                for(let z = 0; z < m; z++){
                    let q = b[z], H = w[z], ne = R[z], W = M * T * 4 * z;
                    for(let K = 0; K < q.count; K++){
                        let D = K * $;
                        v === !0 && (a.fromBufferAttribute(q, K), O[W + D + 0] = a.x, O[W + D + 1] = a.y, O[W + D + 2] = a.z, O[W + D + 3] = 0), x === !0 && (a.fromBufferAttribute(H, K), O[W + D + 4] = a.x, O[W + D + 5] = a.y, O[W + D + 6] = a.z, O[W + D + 7] = 0), y === !0 && (a.fromBufferAttribute(ne, K), O[W + D + 8] = a.x, O[W + D + 9] = a.y, O[W + D + 10] = a.z, O[W + D + 11] = ne.itemSize === 4 ? a.w : 1);
                    }
                }
                _ = {
                    count: m,
                    texture: Y,
                    size: new Z(M, T)
                }, r.set(h, _), h.addEventListener("dispose", U);
            }
            let g = 0;
            for(let v = 0; v < d.length; v++)g += d[v];
            let p = h.morphTargetsRelative ? 1 : 1 - g;
            u.getUniforms().setValue(s1, "morphTargetBaseInfluence", p), u.getUniforms().setValue(s1, "morphTargetInfluences", d), u.getUniforms().setValue(s1, "morphTargetsTexture", _.texture, t), u.getUniforms().setValue(s1, "morphTargetsTextureSize", _.size);
        } else {
            let f = d === void 0 ? 0 : d.length, m = n[h.id];
            if (m === void 0 || m.length !== f) {
                m = [];
                for(let x = 0; x < f; x++)m[x] = [
                    x,
                    0
                ];
                n[h.id] = m;
            }
            for(let x = 0; x < f; x++){
                let y = m[x];
                y[0] = x, y[1] = d[x];
            }
            m.sort(m_);
            for(let x = 0; x < 8; x++)x < f && m[x][1] ? (o[x][0] = m[x][0], o[x][1] = m[x][1]) : (o[x][0] = Number.MAX_SAFE_INTEGER, o[x][1] = 0);
            o.sort(p_);
            let _ = h.morphAttributes.position, g = h.morphAttributes.normal, p = 0;
            for(let x = 0; x < 8; x++){
                let y = o[x], b = y[0], w = y[1];
                b !== Number.MAX_SAFE_INTEGER && w ? (_ && h.getAttribute("morphTarget" + x) !== _[b] && h.setAttribute("morphTarget" + x, _[b]), g && h.getAttribute("morphNormal" + x) !== g[b] && h.setAttribute("morphNormal" + x, g[b]), i[x] = w, p += w) : (_ && h.hasAttribute("morphTarget" + x) === !0 && h.deleteAttribute("morphTarget" + x), g && h.hasAttribute("morphNormal" + x) === !0 && h.deleteAttribute("morphNormal" + x), i[x] = 0);
            }
            let v = h.morphTargetsRelative ? 1 : 1 - p;
            u.getUniforms().setValue(s1, "morphTargetBaseInfluence", v), u.getUniforms().setValue(s1, "morphTargetInfluences", i);
        }
    }
    return {
        update: c
    };
}
function __(s1, e, t, n) {
    let i = new WeakMap;
    function r(c) {
        let l = n.render.frame, h = c.geometry, u = e.get(c, h);
        if (i.get(u) !== l && (e.update(u), i.set(u, l)), c.isInstancedMesh && (c.hasEventListener("dispose", o) === !1 && c.addEventListener("dispose", o), i.get(c) !== l && (t.update(c.instanceMatrix, s1.ARRAY_BUFFER), c.instanceColor !== null && t.update(c.instanceColor, s1.ARRAY_BUFFER), i.set(c, l))), c.isSkinnedMesh) {
            let d = c.skeleton;
            i.get(d) !== l && (d.update(), i.set(d, l));
        }
        return u;
    }
    function a() {
        i = new WeakMap;
    }
    function o(c) {
        let l = c.target;
        l.removeEventListener("dispose", o), t.remove(l.instanceMatrix), l.instanceColor !== null && t.remove(l.instanceColor);
    }
    return {
        update: r,
        dispose: a
    };
}
var Td = new St, wd = new As, Ad = new qr, Rd = new Ki, gh = [], _h = [], xh = new Float32Array(16), vh = new Float32Array(9), yh = new Float32Array(4);
function as(s1, e, t) {
    let n = s1[0];
    if (n <= 0 || n > 0) return s1;
    let i = e * t, r = gh[i];
    if (r === void 0 && (r = new Float32Array(i), gh[i] = r), e !== 0) {
        n.toArray(r, 0);
        for(let a = 1, o = 0; a !== e; ++a)o += t, s1[a].toArray(r, o);
    }
    return r;
}
function gt(s1, e) {
    if (s1.length !== e.length) return !1;
    for(let t = 0, n = s1.length; t < n; t++)if (s1[t] !== e[t]) return !1;
    return !0;
}
function _t(s1, e) {
    for(let t = 0, n = e.length; t < n; t++)s1[t] = e[t];
}
function ya(s1, e) {
    let t = _h[e];
    t === void 0 && (t = new Int32Array(e), _h[e] = t);
    for(let n = 0; n !== e; ++n)t[n] = s1.allocateTextureUnit();
    return t;
}
function x_(s1, e) {
    let t = this.cache;
    t[0] !== e && (s1.uniform1f(this.addr, e), t[0] = e);
}
function v_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s1.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
        if (gt(t, e)) return;
        s1.uniform2fv(this.addr, e), _t(t, e);
    }
}
function y_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s1.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else if (e.r !== void 0) (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (s1.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
    else {
        if (gt(t, e)) return;
        s1.uniform3fv(this.addr, e), _t(t, e);
    }
}
function M_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s1.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
        if (gt(t, e)) return;
        s1.uniform4fv(this.addr, e), _t(t, e);
    }
}
function S_(s1, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (gt(t, e)) return;
        s1.uniformMatrix2fv(this.addr, !1, e), _t(t, e);
    } else {
        if (gt(t, n)) return;
        yh.set(n), s1.uniformMatrix2fv(this.addr, !1, yh), _t(t, n);
    }
}
function b_(s1, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (gt(t, e)) return;
        s1.uniformMatrix3fv(this.addr, !1, e), _t(t, e);
    } else {
        if (gt(t, n)) return;
        vh.set(n), s1.uniformMatrix3fv(this.addr, !1, vh), _t(t, n);
    }
}
function E_(s1, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (gt(t, e)) return;
        s1.uniformMatrix4fv(this.addr, !1, e), _t(t, e);
    } else {
        if (gt(t, n)) return;
        xh.set(n), s1.uniformMatrix4fv(this.addr, !1, xh), _t(t, n);
    }
}
function T_(s1, e) {
    let t = this.cache;
    t[0] !== e && (s1.uniform1i(this.addr, e), t[0] = e);
}
function w_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s1.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
        if (gt(t, e)) return;
        s1.uniform2iv(this.addr, e), _t(t, e);
    }
}
function A_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s1.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else {
        if (gt(t, e)) return;
        s1.uniform3iv(this.addr, e), _t(t, e);
    }
}
function R_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s1.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
        if (gt(t, e)) return;
        s1.uniform4iv(this.addr, e), _t(t, e);
    }
}
function C_(s1, e) {
    let t = this.cache;
    t[0] !== e && (s1.uniform1ui(this.addr, e), t[0] = e);
}
function P_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s1.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
        if (gt(t, e)) return;
        s1.uniform2uiv(this.addr, e), _t(t, e);
    }
}
function L_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s1.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else {
        if (gt(t, e)) return;
        s1.uniform3uiv(this.addr, e), _t(t, e);
    }
}
function I_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s1.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
        if (gt(t, e)) return;
        s1.uniform4uiv(this.addr, e), _t(t, e);
    }
}
function U_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTexture2D(e || Td, i);
}
function D_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTexture3D(e || Ad, i);
}
function N_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTextureCube(e || Rd, i);
}
function O_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTexture2DArray(e || wd, i);
}
function F_(s1) {
    switch(s1){
        case 5126:
            return x_;
        case 35664:
            return v_;
        case 35665:
            return y_;
        case 35666:
            return M_;
        case 35674:
            return S_;
        case 35675:
            return b_;
        case 35676:
            return E_;
        case 5124:
        case 35670:
            return T_;
        case 35667:
        case 35671:
            return w_;
        case 35668:
        case 35672:
            return A_;
        case 35669:
        case 35673:
            return R_;
        case 5125:
            return C_;
        case 36294:
            return P_;
        case 36295:
            return L_;
        case 36296:
            return I_;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return U_;
        case 35679:
        case 36299:
        case 36307:
            return D_;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return N_;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return O_;
    }
}
function B_(s1, e) {
    s1.uniform1fv(this.addr, e);
}
function z_(s1, e) {
    let t = as(e, this.size, 2);
    s1.uniform2fv(this.addr, t);
}
function V_(s1, e) {
    let t = as(e, this.size, 3);
    s1.uniform3fv(this.addr, t);
}
function k_(s1, e) {
    let t = as(e, this.size, 4);
    s1.uniform4fv(this.addr, t);
}
function H_(s1, e) {
    let t = as(e, this.size, 4);
    s1.uniformMatrix2fv(this.addr, !1, t);
}
function G_(s1, e) {
    let t = as(e, this.size, 9);
    s1.uniformMatrix3fv(this.addr, !1, t);
}
function W_(s1, e) {
    let t = as(e, this.size, 16);
    s1.uniformMatrix4fv(this.addr, !1, t);
}
function X_(s1, e) {
    s1.uniform1iv(this.addr, e);
}
function q_(s1, e) {
    s1.uniform2iv(this.addr, e);
}
function Y_(s1, e) {
    s1.uniform3iv(this.addr, e);
}
function Z_(s1, e) {
    s1.uniform4iv(this.addr, e);
}
function J_(s1, e) {
    s1.uniform1uiv(this.addr, e);
}
function $_(s1, e) {
    s1.uniform2uiv(this.addr, e);
}
function K_(s1, e) {
    s1.uniform3uiv(this.addr, e);
}
function Q_(s1, e) {
    s1.uniform4uiv(this.addr, e);
}
function j_(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTexture2D(e[a] || Td, r[a]);
}
function e0(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTexture3D(e[a] || Ad, r[a]);
}
function t0(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTextureCube(e[a] || Rd, r[a]);
}
function n0(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTexture2DArray(e[a] || wd, r[a]);
}
function i0(s1) {
    switch(s1){
        case 5126:
            return B_;
        case 35664:
            return z_;
        case 35665:
            return V_;
        case 35666:
            return k_;
        case 35674:
            return H_;
        case 35675:
            return G_;
        case 35676:
            return W_;
        case 5124:
        case 35670:
            return X_;
        case 35667:
        case 35671:
            return q_;
        case 35668:
        case 35672:
            return Y_;
        case 35669:
        case 35673:
            return Z_;
        case 5125:
            return J_;
        case 36294:
            return $_;
        case 36295:
            return K_;
        case 36296:
            return Q_;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return j_;
        case 35679:
        case 36299:
        case 36307:
            return e0;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return t0;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return n0;
    }
}
var vo = class {
    constructor(e, t, n){
        this.id = e, this.addr = n, this.cache = [], this.setValue = F_(t.type);
    }
}, yo = class {
    constructor(e, t, n){
        this.id = e, this.addr = n, this.cache = [], this.size = t.size, this.setValue = i0(t.type);
    }
}, Mo = class {
    constructor(e){
        this.id = e, this.seq = [], this.map = {};
    }
    setValue(e, t, n) {
        let i = this.seq;
        for(let r = 0, a = i.length; r !== a; ++r){
            let o = i[r];
            o.setValue(e, t[o.id], n);
        }
    }
}, Qa = /(\w+)(\])?(\[|\.)?/g;
function Mh(s1, e) {
    s1.seq.push(e), s1.map[e.id] = e;
}
function s0(s1, e, t) {
    let n = s1.name, i = n.length;
    for(Qa.lastIndex = 0;;){
        let r = Qa.exec(n), a = Qa.lastIndex, o = r[1], c = r[2] === "]", l = r[3];
        if (c && (o = o | 0), l === void 0 || l === "[" && a + 2 === i) {
            Mh(t, l === void 0 ? new vo(o, s1, e) : new yo(o, s1, e));
            break;
        } else {
            let u = t.map[o];
            u === void 0 && (u = new Mo(o), Mh(t, u)), t = u;
        }
    }
}
var qi = class {
    constructor(e, t){
        this.seq = [], this.map = {};
        let n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
        for(let i = 0; i < n; ++i){
            let r = e.getActiveUniform(t, i), a = e.getUniformLocation(t, r.name);
            s0(r, a, this);
        }
    }
    setValue(e, t, n, i) {
        let r = this.map[t];
        r !== void 0 && r.setValue(e, n, i);
    }
    setOptional(e, t, n) {
        let i = t[n];
        i !== void 0 && this.setValue(e, n, i);
    }
    static upload(e, t, n, i) {
        for(let r = 0, a = t.length; r !== a; ++r){
            let o = t[r], c = n[o.id];
            c.needsUpdate !== !1 && o.setValue(e, c.value, i);
        }
    }
    static seqWithValue(e, t) {
        let n = [];
        for(let i = 0, r = e.length; i !== r; ++i){
            let a = e[i];
            a.id in t && n.push(a);
        }
        return n;
    }
};
function Sh(s1, e, t) {
    let n = s1.createShader(e);
    return s1.shaderSource(n, t), s1.compileShader(n), n;
}
var r0 = 0;
function a0(s1, e) {
    let t = s1.split(`
`), n = [], i = Math.max(e - 6, 0), r = Math.min(e + 6, t.length);
    for(let a = i; a < r; a++){
        let o = a + 1;
        n.push(`${o === e ? ">" : " "} ${o}: ${t[a]}`);
    }
    return n.join(`
`);
}
function o0(s1) {
    let e = Qe.getPrimaries(Qe.workingColorSpace), t = Qe.getPrimaries(s1), n;
    switch(e === t ? n = "" : e === kr && t === Vr ? n = "LinearDisplayP3ToLinearSRGB" : e === Vr && t === kr && (n = "LinearSRGBToLinearDisplayP3"), s1){
        case Mn:
        case va:
            return [
                n,
                "LinearTransferOETF"
            ];
        case vt:
        case qc:
            return [
                n,
                "sRGBTransferOETF"
            ];
        default:
            return console.warn("THREE.WebGLProgram: Unsupported color space:", s1), [
                n,
                "LinearTransferOETF"
            ];
    }
}
function bh(s1, e, t) {
    let n = s1.getShaderParameter(e, s1.COMPILE_STATUS), i = s1.getShaderInfoLog(e).trim();
    if (n && i === "") return "";
    let r = /ERROR: 0:(\d+)/.exec(i);
    if (r) {
        let a = parseInt(r[1]);
        return t.toUpperCase() + `

` + i + `

` + a0(s1.getShaderSource(e), a);
    } else return i;
}
function c0(s1, e) {
    let t = o0(e);
    return `vec4 ${s1}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function l0(s1, e) {
    let t;
    switch(e){
        case df:
            t = "Linear";
            break;
        case ff:
            t = "Reinhard";
            break;
        case pf:
            t = "OptimizedCineon";
            break;
        case mf:
            t = "ACESFilmic";
            break;
        case gf:
            t = "Custom";
            break;
        default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
    }
    return "vec3 " + s1 + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function h0(s1) {
    return [
        s1.extensionDerivatives || s1.envMapCubeUVHeight || s1.bumpMap || s1.normalMapTangentSpace || s1.clearcoatNormalMap || s1.flatShading || s1.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
        (s1.extensionFragDepth || s1.logarithmicDepthBuffer) && s1.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
        s1.extensionDrawBuffers && s1.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
        (s1.extensionShaderTextureLOD || s1.envMap || s1.transmission) && s1.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ].filter(vs).join(`
`);
}
function u0(s1) {
    let e = [];
    for(let t in s1){
        let n = s1[t];
        n !== !1 && e.push("#define " + t + " " + n);
    }
    return e.join(`
`);
}
function d0(s1, e) {
    let t = {}, n = s1.getProgramParameter(e, s1.ACTIVE_ATTRIBUTES);
    for(let i = 0; i < n; i++){
        let r = s1.getActiveAttrib(e, i), a = r.name, o = 1;
        r.type === s1.FLOAT_MAT2 && (o = 2), r.type === s1.FLOAT_MAT3 && (o = 3), r.type === s1.FLOAT_MAT4 && (o = 4), t[a] = {
            type: r.type,
            location: s1.getAttribLocation(e, a),
            locationSize: o
        };
    }
    return t;
}
function vs(s1) {
    return s1 !== "";
}
function Eh(s1, e) {
    let t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
    return s1.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function Th(s1, e) {
    return s1.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
var f0 = /^[ \t]*#include +<([\w\d./]+)>/gm;
function So(s1) {
    return s1.replace(f0, m0);
}
var p0 = new Map([
    [
        "encodings_fragment",
        "colorspace_fragment"
    ],
    [
        "encodings_pars_fragment",
        "colorspace_pars_fragment"
    ],
    [
        "output_fragment",
        "opaque_fragment"
    ]
]);
function m0(s1, e) {
    let t = ke[e];
    if (t === void 0) {
        let n = p0.get(e);
        if (n !== void 0) t = ke[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
        else throw new Error("Can not resolve #include <" + e + ">");
    }
    return So(t);
}
var g0 = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function wh(s1) {
    return s1.replace(g0, _0);
}
function _0(s1, e, t, n) {
    let i = "";
    for(let r = parseInt(e); r < parseInt(t); r++)i += n.replace(/\[\s*i\s*\]/g, "[ " + r + " ]").replace(/UNROLLED_LOOP_INDEX/g, r);
    return i;
}
function Ah(s1) {
    let e = "precision " + s1.precision + ` float;
precision ` + s1.precision + " int;";
    return s1.precision === "highp" ? e += `
#define HIGH_PRECISION` : s1.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : s1.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function x0(s1) {
    let e = "SHADOWMAP_TYPE_BASIC";
    return s1.shadowMapType === cd ? e = "SHADOWMAP_TYPE_PCF" : s1.shadowMapType === Gd ? e = "SHADOWMAP_TYPE_PCF_SOFT" : s1.shadowMapType === pn && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function v0(s1) {
    let e = "ENVMAP_TYPE_CUBE";
    if (s1.envMap) switch(s1.envMapMode){
        case zn:
        case ci:
            e = "ENVMAP_TYPE_CUBE";
            break;
        case Vs:
            e = "ENVMAP_TYPE_CUBE_UV";
            break;
    }
    return e;
}
function y0(s1) {
    let e = "ENVMAP_MODE_REFLECTION";
    if (s1.envMap) switch(s1.envMapMode){
        case ci:
            e = "ENVMAP_MODE_REFRACTION";
            break;
    }
    return e;
}
function M0(s1) {
    let e = "ENVMAP_BLENDING_NONE";
    if (s1.envMap) switch(s1.combine){
        case xa:
            e = "ENVMAP_BLENDING_MULTIPLY";
            break;
        case hf:
            e = "ENVMAP_BLENDING_MIX";
            break;
        case uf:
            e = "ENVMAP_BLENDING_ADD";
            break;
    }
    return e;
}
function S0(s1) {
    let e = s1.envMapCubeUVHeight;
    if (e === null) return null;
    let t = Math.log2(e) - 2, n = 1 / e;
    return {
        texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)),
        texelHeight: n,
        maxMip: t
    };
}
function b0(s1, e, t, n) {
    let i = s1.getContext(), r = t.defines, a = t.vertexShader, o = t.fragmentShader, c = x0(t), l = v0(t), h = y0(t), u = M0(t), d = S0(t), f = t.isWebGL2 ? "" : h0(t), m = u0(r), _ = i.createProgram(), g, p, v = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
    t.isRawShaderMaterial ? (g = [
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m
    ].filter(vs).join(`
`), g.length > 0 && (g += `
`), p = [
        f,
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m
    ].filter(vs).join(`
`), p.length > 0 && (p += `
`)) : (g = [
        Ah(t),
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m,
        t.instancing ? "#define USE_INSTANCING" : "",
        t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.map ? "#define USE_MAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + h : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.anisotropy ? "#define USE_ANISOTROPY" : "",
        t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.alphaHash ? "#define USE_ALPHAHASH" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        t.mapUv ? "#define MAP_UV " + t.mapUv : "",
        t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
        t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
        t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
        t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
        t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
        t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
        t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
        t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
        t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
        t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
        t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
        t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
        t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
        t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
        t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
        t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
        t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
        t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
        t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
        t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
        t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
        t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
        t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
        t.vertexColors ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUv1s ? "#define USE_UV1" : "",
        t.vertexUv2s ? "#define USE_UV2" : "",
        t.vertexUv3s ? "#define USE_UV3" : "",
        t.pointsUvs ? "#define USE_POINTS_UV" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.skinning ? "#define USE_SKINNING" : "",
        t.morphTargets ? "#define USE_MORPHTARGETS" : "",
        t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
        t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
        t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
        t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
        t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + c : "",
        t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_UV1",
        "	attribute vec2 uv1;",
        "#endif",
        "#ifdef USE_UV2",
        "	attribute vec2 uv2;",
        "#endif",
        "#ifdef USE_UV3",
        "	attribute vec2 uv3;",
        "#endif",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        `
`
    ].filter(vs).join(`
`), p = [
        f,
        Ah(t),
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m,
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.map ? "#define USE_MAP" : "",
        t.matcap ? "#define USE_MATCAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + l : "",
        t.envMap ? "#define " + h : "",
        t.envMap ? "#define " + u : "",
        d ? "#define CUBEUV_TEXEL_WIDTH " + d.texelWidth : "",
        d ? "#define CUBEUV_TEXEL_HEIGHT " + d.texelHeight : "",
        d ? "#define CUBEUV_MAX_MIP " + d.maxMip + ".0" : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.anisotropy ? "#define USE_ANISOTROPY" : "",
        t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        t.clearcoat ? "#define USE_CLEARCOAT" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.iridescence ? "#define USE_IRIDESCENCE" : "",
        t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.alphaTest ? "#define USE_ALPHATEST" : "",
        t.alphaHash ? "#define USE_ALPHAHASH" : "",
        t.sheen ? "#define USE_SHEEN" : "",
        t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
        t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUv1s ? "#define USE_UV1" : "",
        t.vertexUv2s ? "#define USE_UV2" : "",
        t.vertexUv3s ? "#define USE_UV3" : "",
        t.pointsUvs ? "#define USE_POINTS_UV" : "",
        t.gradientMap ? "#define USE_GRADIENTMAP" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + c : "",
        t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        t.toneMapping !== Nn ? "#define TONE_MAPPING" : "",
        t.toneMapping !== Nn ? ke.tonemapping_pars_fragment : "",
        t.toneMapping !== Nn ? l0("toneMapping", t.toneMapping) : "",
        t.dithering ? "#define DITHERING" : "",
        t.opaque ? "#define OPAQUE" : "",
        ke.colorspace_pars_fragment,
        c0("linearToOutputTexel", t.outputColorSpace),
        t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
        `
`
    ].filter(vs).join(`
`)), a = So(a), a = Eh(a, t), a = Th(a, t), o = So(o), o = Eh(o, t), o = Th(o, t), a = wh(a), o = wh(o), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (v = `#version 300 es
`, g = [
        "precision mediump sampler2DArray;",
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
    ].join(`
`) + `
` + g, p = [
        "#define varying in",
        t.glslVersion === Ol ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        t.glslVersion === Ol ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
    ].join(`
`) + `
` + p);
    let x = v + g + a, y = v + p + o, b = Sh(i, i.VERTEX_SHADER, x), w = Sh(i, i.FRAGMENT_SHADER, y);
    if (i.attachShader(_, b), i.attachShader(_, w), t.index0AttributeName !== void 0 ? i.bindAttribLocation(_, 0, t.index0AttributeName) : t.morphTargets === !0 && i.bindAttribLocation(_, 0, "position"), i.linkProgram(_), s1.debug.checkShaderErrors) {
        let M = i.getProgramInfoLog(_).trim(), T = i.getShaderInfoLog(b).trim(), O = i.getShaderInfoLog(w).trim(), Y = !0, $ = !0;
        if (i.getProgramParameter(_, i.LINK_STATUS) === !1) if (Y = !1, typeof s1.debug.onShaderError == "function") s1.debug.onShaderError(i, _, b, w);
        else {
            let U = bh(i, b, "vertex"), z = bh(i, w, "fragment");
            console.error("THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(_, i.VALIDATE_STATUS) + `

Program Info Log: ` + M + `
` + U + `
` + z);
        }
        else M !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", M) : (T === "" || O === "") && ($ = !1);
        $ && (this.diagnostics = {
            runnable: Y,
            programLog: M,
            vertexShader: {
                log: T,
                prefix: g
            },
            fragmentShader: {
                log: O,
                prefix: p
            }
        });
    }
    i.deleteShader(b), i.deleteShader(w);
    let R;
    this.getUniforms = function() {
        return R === void 0 && (R = new qi(i, _)), R;
    };
    let I;
    return this.getAttributes = function() {
        return I === void 0 && (I = d0(i, _)), I;
    }, this.destroy = function() {
        n.releaseStatesOfProgram(this), i.deleteProgram(_), this.program = void 0;
    }, this.type = t.shaderType, this.name = t.shaderName, this.id = r0++, this.cacheKey = e, this.usedTimes = 1, this.program = _, this.vertexShader = b, this.fragmentShader = w, this;
}
var E0 = 0, bo = class {
    constructor(){
        this.shaderCache = new Map, this.materialCache = new Map;
    }
    update(e) {
        let t = e.vertexShader, n = e.fragmentShader, i = this._getShaderStage(t), r = this._getShaderStage(n), a = this._getShaderCacheForMaterial(e);
        return a.has(i) === !1 && (a.add(i), i.usedTimes++), a.has(r) === !1 && (a.add(r), r.usedTimes++), this;
    }
    remove(e) {
        let t = this.materialCache.get(e);
        for (let n of t)n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
        return this.materialCache.delete(e), this;
    }
    getVertexShaderID(e) {
        return this._getShaderStage(e.vertexShader).id;
    }
    getFragmentShaderID(e) {
        return this._getShaderStage(e.fragmentShader).id;
    }
    dispose() {
        this.shaderCache.clear(), this.materialCache.clear();
    }
    _getShaderCacheForMaterial(e) {
        let t = this.materialCache, n = t.get(e);
        return n === void 0 && (n = new Set, t.set(e, n)), n;
    }
    _getShaderStage(e) {
        let t = this.shaderCache, n = t.get(e);
        return n === void 0 && (n = new Eo(e), t.set(e, n)), n;
    }
}, Eo = class {
    constructor(e){
        this.id = E0++, this.code = e, this.usedTimes = 0;
    }
};
function T0(s1, e, t, n, i, r, a) {
    let o = new Rs, c = new bo, l = [], h = i.isWebGL2, u = i.logarithmicDepthBuffer, d = i.vertexTextures, f = i.precision, m = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
    };
    function _(M) {
        return M === 0 ? "uv" : `uv${M}`;
    }
    function g(M, T, O, Y, $) {
        let U = Y.fog, z = $.geometry, q = M.isMeshStandardMaterial ? Y.environment : null, H = (M.isMeshStandardMaterial ? t : e).get(M.envMap || q), ne = H && H.mapping === Vs ? H.image.height : null, W = m[M.type];
        M.precision !== null && (f = i.getMaxPrecision(M.precision), f !== M.precision && console.warn("THREE.WebGLProgram.getParameters:", M.precision, "not supported, using", f, "instead."));
        let K = z.morphAttributes.position || z.morphAttributes.normal || z.morphAttributes.color, D = K !== void 0 ? K.length : 0, G = 0;
        z.morphAttributes.position !== void 0 && (G = 1), z.morphAttributes.normal !== void 0 && (G = 2), z.morphAttributes.color !== void 0 && (G = 3);
        let he, fe, _e, we;
        if (W) {
            let tt = nn[W];
            he = tt.vertexShader, fe = tt.fragmentShader;
        } else he = M.vertexShader, fe = M.fragmentShader, c.update(M), _e = c.getVertexShaderID(M), we = c.getFragmentShaderID(M);
        let Ee = s1.getRenderTarget(), Te = $.isInstancedMesh === !0, Ye = !!M.map, it = !!M.matcap, Ce = !!H, L = !!M.aoMap, oe = !!M.lightMap, X = !!M.bumpMap, ie = !!M.normalMap, J = !!M.displacementMap, Se = !!M.emissiveMap, me = !!M.metalnessMap, ye = !!M.roughnessMap, Ne = M.anisotropy > 0, qe = M.clearcoat > 0, rt = M.iridescence > 0, C = M.sheen > 0, S = M.transmission > 0, B = Ne && !!M.anisotropyMap, ee = qe && !!M.clearcoatMap, j = qe && !!M.clearcoatNormalMap, te = qe && !!M.clearcoatRoughnessMap, Me = rt && !!M.iridescenceMap, re = rt && !!M.iridescenceThicknessMap, de = C && !!M.sheenColorMap, Le = C && !!M.sheenRoughnessMap, Ze = !!M.specularMap, se = !!M.specularColorMap, $e = !!M.specularIntensityMap, Oe = S && !!M.transmissionMap, Ie = S && !!M.thicknessMap, Re = !!M.gradientMap, P = !!M.alphaMap, ce = M.alphaTest > 0, ae = !!M.alphaHash, ge = !!M.extensions, ue = !!z.attributes.uv1, Q = !!z.attributes.uv2, be = !!z.attributes.uv3, Fe = Nn;
        return M.toneMapped && (Ee === null || Ee.isXRRenderTarget === !0) && (Fe = s1.toneMapping), {
            isWebGL2: h,
            shaderID: W,
            shaderType: M.type,
            shaderName: M.name,
            vertexShader: he,
            fragmentShader: fe,
            defines: M.defines,
            customVertexShaderID: _e,
            customFragmentShaderID: we,
            isRawShaderMaterial: M.isRawShaderMaterial === !0,
            glslVersion: M.glslVersion,
            precision: f,
            instancing: Te,
            instancingColor: Te && $.instanceColor !== null,
            supportsVertexTextures: d,
            outputColorSpace: Ee === null ? s1.outputColorSpace : Ee.isXRRenderTarget === !0 ? Ee.texture.colorSpace : Mn,
            map: Ye,
            matcap: it,
            envMap: Ce,
            envMapMode: Ce && H.mapping,
            envMapCubeUVHeight: ne,
            aoMap: L,
            lightMap: oe,
            bumpMap: X,
            normalMap: ie,
            displacementMap: d && J,
            emissiveMap: Se,
            normalMapObjectSpace: ie && M.normalMapType === Lf,
            normalMapTangentSpace: ie && M.normalMapType === mi,
            metalnessMap: me,
            roughnessMap: ye,
            anisotropy: Ne,
            anisotropyMap: B,
            clearcoat: qe,
            clearcoatMap: ee,
            clearcoatNormalMap: j,
            clearcoatRoughnessMap: te,
            iridescence: rt,
            iridescenceMap: Me,
            iridescenceThicknessMap: re,
            sheen: C,
            sheenColorMap: de,
            sheenRoughnessMap: Le,
            specularMap: Ze,
            specularColorMap: se,
            specularIntensityMap: $e,
            transmission: S,
            transmissionMap: Oe,
            thicknessMap: Ie,
            gradientMap: Re,
            opaque: M.transparent === !1 && M.blending === Wi,
            alphaMap: P,
            alphaTest: ce,
            alphaHash: ae,
            combine: M.combine,
            mapUv: Ye && _(M.map.channel),
            aoMapUv: L && _(M.aoMap.channel),
            lightMapUv: oe && _(M.lightMap.channel),
            bumpMapUv: X && _(M.bumpMap.channel),
            normalMapUv: ie && _(M.normalMap.channel),
            displacementMapUv: J && _(M.displacementMap.channel),
            emissiveMapUv: Se && _(M.emissiveMap.channel),
            metalnessMapUv: me && _(M.metalnessMap.channel),
            roughnessMapUv: ye && _(M.roughnessMap.channel),
            anisotropyMapUv: B && _(M.anisotropyMap.channel),
            clearcoatMapUv: ee && _(M.clearcoatMap.channel),
            clearcoatNormalMapUv: j && _(M.clearcoatNormalMap.channel),
            clearcoatRoughnessMapUv: te && _(M.clearcoatRoughnessMap.channel),
            iridescenceMapUv: Me && _(M.iridescenceMap.channel),
            iridescenceThicknessMapUv: re && _(M.iridescenceThicknessMap.channel),
            sheenColorMapUv: de && _(M.sheenColorMap.channel),
            sheenRoughnessMapUv: Le && _(M.sheenRoughnessMap.channel),
            specularMapUv: Ze && _(M.specularMap.channel),
            specularColorMapUv: se && _(M.specularColorMap.channel),
            specularIntensityMapUv: $e && _(M.specularIntensityMap.channel),
            transmissionMapUv: Oe && _(M.transmissionMap.channel),
            thicknessMapUv: Ie && _(M.thicknessMap.channel),
            alphaMapUv: P && _(M.alphaMap.channel),
            vertexTangents: !!z.attributes.tangent && (ie || Ne),
            vertexColors: M.vertexColors,
            vertexAlphas: M.vertexColors === !0 && !!z.attributes.color && z.attributes.color.itemSize === 4,
            vertexUv1s: ue,
            vertexUv2s: Q,
            vertexUv3s: be,
            pointsUvs: $.isPoints === !0 && !!z.attributes.uv && (Ye || P),
            fog: !!U,
            useFog: M.fog === !0,
            fogExp2: U && U.isFogExp2,
            flatShading: M.flatShading === !0,
            sizeAttenuation: M.sizeAttenuation === !0,
            logarithmicDepthBuffer: u,
            skinning: $.isSkinnedMesh === !0,
            morphTargets: z.morphAttributes.position !== void 0,
            morphNormals: z.morphAttributes.normal !== void 0,
            morphColors: z.morphAttributes.color !== void 0,
            morphTargetsCount: D,
            morphTextureStride: G,
            numDirLights: T.directional.length,
            numPointLights: T.point.length,
            numSpotLights: T.spot.length,
            numSpotLightMaps: T.spotLightMap.length,
            numRectAreaLights: T.rectArea.length,
            numHemiLights: T.hemi.length,
            numDirLightShadows: T.directionalShadowMap.length,
            numPointLightShadows: T.pointShadowMap.length,
            numSpotLightShadows: T.spotShadowMap.length,
            numSpotLightShadowsWithMaps: T.numSpotLightShadowsWithMaps,
            numLightProbes: T.numLightProbes,
            numClippingPlanes: a.numPlanes,
            numClipIntersection: a.numIntersection,
            dithering: M.dithering,
            shadowMapEnabled: s1.shadowMap.enabled && O.length > 0,
            shadowMapType: s1.shadowMap.type,
            toneMapping: Fe,
            useLegacyLights: s1._useLegacyLights,
            decodeVideoTexture: Ye && M.map.isVideoTexture === !0 && Qe.getTransfer(M.map.colorSpace) === nt,
            premultipliedAlpha: M.premultipliedAlpha,
            doubleSided: M.side === gn,
            flipSided: M.side === Ft,
            useDepthPacking: M.depthPacking >= 0,
            depthPacking: M.depthPacking || 0,
            index0AttributeName: M.index0AttributeName,
            extensionDerivatives: ge && M.extensions.derivatives === !0,
            extensionFragDepth: ge && M.extensions.fragDepth === !0,
            extensionDrawBuffers: ge && M.extensions.drawBuffers === !0,
            extensionShaderTextureLOD: ge && M.extensions.shaderTextureLOD === !0,
            rendererExtensionFragDepth: h || n.has("EXT_frag_depth"),
            rendererExtensionDrawBuffers: h || n.has("WEBGL_draw_buffers"),
            rendererExtensionShaderTextureLod: h || n.has("EXT_shader_texture_lod"),
            customProgramCacheKey: M.customProgramCacheKey()
        };
    }
    function p(M) {
        let T = [];
        if (M.shaderID ? T.push(M.shaderID) : (T.push(M.customVertexShaderID), T.push(M.customFragmentShaderID)), M.defines !== void 0) for(let O in M.defines)T.push(O), T.push(M.defines[O]);
        return M.isRawShaderMaterial === !1 && (v(T, M), x(T, M), T.push(s1.outputColorSpace)), T.push(M.customProgramCacheKey), T.join();
    }
    function v(M, T) {
        M.push(T.precision), M.push(T.outputColorSpace), M.push(T.envMapMode), M.push(T.envMapCubeUVHeight), M.push(T.mapUv), M.push(T.alphaMapUv), M.push(T.lightMapUv), M.push(T.aoMapUv), M.push(T.bumpMapUv), M.push(T.normalMapUv), M.push(T.displacementMapUv), M.push(T.emissiveMapUv), M.push(T.metalnessMapUv), M.push(T.roughnessMapUv), M.push(T.anisotropyMapUv), M.push(T.clearcoatMapUv), M.push(T.clearcoatNormalMapUv), M.push(T.clearcoatRoughnessMapUv), M.push(T.iridescenceMapUv), M.push(T.iridescenceThicknessMapUv), M.push(T.sheenColorMapUv), M.push(T.sheenRoughnessMapUv), M.push(T.specularMapUv), M.push(T.specularColorMapUv), M.push(T.specularIntensityMapUv), M.push(T.transmissionMapUv), M.push(T.thicknessMapUv), M.push(T.combine), M.push(T.fogExp2), M.push(T.sizeAttenuation), M.push(T.morphTargetsCount), M.push(T.morphAttributeCount), M.push(T.numDirLights), M.push(T.numPointLights), M.push(T.numSpotLights), M.push(T.numSpotLightMaps), M.push(T.numHemiLights), M.push(T.numRectAreaLights), M.push(T.numDirLightShadows), M.push(T.numPointLightShadows), M.push(T.numSpotLightShadows), M.push(T.numSpotLightShadowsWithMaps), M.push(T.numLightProbes), M.push(T.shadowMapType), M.push(T.toneMapping), M.push(T.numClippingPlanes), M.push(T.numClipIntersection), M.push(T.depthPacking);
    }
    function x(M, T) {
        o.disableAll(), T.isWebGL2 && o.enable(0), T.supportsVertexTextures && o.enable(1), T.instancing && o.enable(2), T.instancingColor && o.enable(3), T.matcap && o.enable(4), T.envMap && o.enable(5), T.normalMapObjectSpace && o.enable(6), T.normalMapTangentSpace && o.enable(7), T.clearcoat && o.enable(8), T.iridescence && o.enable(9), T.alphaTest && o.enable(10), T.vertexColors && o.enable(11), T.vertexAlphas && o.enable(12), T.vertexUv1s && o.enable(13), T.vertexUv2s && o.enable(14), T.vertexUv3s && o.enable(15), T.vertexTangents && o.enable(16), T.anisotropy && o.enable(17), M.push(o.mask), o.disableAll(), T.fog && o.enable(0), T.useFog && o.enable(1), T.flatShading && o.enable(2), T.logarithmicDepthBuffer && o.enable(3), T.skinning && o.enable(4), T.morphTargets && o.enable(5), T.morphNormals && o.enable(6), T.morphColors && o.enable(7), T.premultipliedAlpha && o.enable(8), T.shadowMapEnabled && o.enable(9), T.useLegacyLights && o.enable(10), T.doubleSided && o.enable(11), T.flipSided && o.enable(12), T.useDepthPacking && o.enable(13), T.dithering && o.enable(14), T.transmission && o.enable(15), T.sheen && o.enable(16), T.opaque && o.enable(17), T.pointsUvs && o.enable(18), T.decodeVideoTexture && o.enable(19), M.push(o.mask);
    }
    function y(M) {
        let T = m[M.type], O;
        if (T) {
            let Y = nn[T];
            O = xp.clone(Y.uniforms);
        } else O = M.uniforms;
        return O;
    }
    function b(M, T) {
        let O;
        for(let Y = 0, $ = l.length; Y < $; Y++){
            let U = l[Y];
            if (U.cacheKey === T) {
                O = U, ++O.usedTimes;
                break;
            }
        }
        return O === void 0 && (O = new b0(s1, T, M, r), l.push(O)), O;
    }
    function w(M) {
        if (--M.usedTimes === 0) {
            let T = l.indexOf(M);
            l[T] = l[l.length - 1], l.pop(), M.destroy();
        }
    }
    function R(M) {
        c.remove(M);
    }
    function I() {
        c.dispose();
    }
    return {
        getParameters: g,
        getProgramCacheKey: p,
        getUniforms: y,
        acquireProgram: b,
        releaseProgram: w,
        releaseShaderCache: R,
        programs: l,
        dispose: I
    };
}
function w0() {
    let s1 = new WeakMap;
    function e(r) {
        let a = s1.get(r);
        return a === void 0 && (a = {}, s1.set(r, a)), a;
    }
    function t(r) {
        s1.delete(r);
    }
    function n(r, a, o) {
        s1.get(r)[a] = o;
    }
    function i() {
        s1 = new WeakMap;
    }
    return {
        get: e,
        remove: t,
        update: n,
        dispose: i
    };
}
function A0(s1, e) {
    return s1.groupOrder !== e.groupOrder ? s1.groupOrder - e.groupOrder : s1.renderOrder !== e.renderOrder ? s1.renderOrder - e.renderOrder : s1.material.id !== e.material.id ? s1.material.id - e.material.id : s1.z !== e.z ? s1.z - e.z : s1.id - e.id;
}
function Rh(s1, e) {
    return s1.groupOrder !== e.groupOrder ? s1.groupOrder - e.groupOrder : s1.renderOrder !== e.renderOrder ? s1.renderOrder - e.renderOrder : s1.z !== e.z ? e.z - s1.z : s1.id - e.id;
}
function Ch() {
    let s1 = [], e = 0, t = [], n = [], i = [];
    function r() {
        e = 0, t.length = 0, n.length = 0, i.length = 0;
    }
    function a(u, d, f, m, _, g) {
        let p = s1[e];
        return p === void 0 ? (p = {
            id: u.id,
            object: u,
            geometry: d,
            material: f,
            groupOrder: m,
            renderOrder: u.renderOrder,
            z: _,
            group: g
        }, s1[e] = p) : (p.id = u.id, p.object = u, p.geometry = d, p.material = f, p.groupOrder = m, p.renderOrder = u.renderOrder, p.z = _, p.group = g), e++, p;
    }
    function o(u, d, f, m, _, g) {
        let p = a(u, d, f, m, _, g);
        f.transmission > 0 ? n.push(p) : f.transparent === !0 ? i.push(p) : t.push(p);
    }
    function c(u, d, f, m, _, g) {
        let p = a(u, d, f, m, _, g);
        f.transmission > 0 ? n.unshift(p) : f.transparent === !0 ? i.unshift(p) : t.unshift(p);
    }
    function l(u, d) {
        t.length > 1 && t.sort(u || A0), n.length > 1 && n.sort(d || Rh), i.length > 1 && i.sort(d || Rh);
    }
    function h() {
        for(let u = e, d = s1.length; u < d; u++){
            let f = s1[u];
            if (f.id === null) break;
            f.id = null, f.object = null, f.geometry = null, f.material = null, f.group = null;
        }
    }
    return {
        opaque: t,
        transmissive: n,
        transparent: i,
        init: r,
        push: o,
        unshift: c,
        finish: h,
        sort: l
    };
}
function R0() {
    let s1 = new WeakMap;
    function e(n, i) {
        let r = s1.get(n), a;
        return r === void 0 ? (a = new Ch, s1.set(n, [
            a
        ])) : i >= r.length ? (a = new Ch, r.push(a)) : a = r[i], a;
    }
    function t() {
        s1 = new WeakMap;
    }
    return {
        get: e,
        dispose: t
    };
}
function C0() {
    let s1 = {};
    return {
        get: function(e) {
            if (s1[e.id] !== void 0) return s1[e.id];
            let t;
            switch(e.type){
                case "DirectionalLight":
                    t = {
                        direction: new A,
                        color: new pe
                    };
                    break;
                case "SpotLight":
                    t = {
                        position: new A,
                        direction: new A,
                        color: new pe,
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case "PointLight":
                    t = {
                        position: new A,
                        color: new pe,
                        distance: 0,
                        decay: 0
                    };
                    break;
                case "HemisphereLight":
                    t = {
                        direction: new A,
                        skyColor: new pe,
                        groundColor: new pe
                    };
                    break;
                case "RectAreaLight":
                    t = {
                        color: new pe,
                        position: new A,
                        halfWidth: new A,
                        halfHeight: new A
                    };
                    break;
            }
            return s1[e.id] = t, t;
        }
    };
}
function P0() {
    let s1 = {};
    return {
        get: function(e) {
            if (s1[e.id] !== void 0) return s1[e.id];
            let t;
            switch(e.type){
                case "DirectionalLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Z
                    };
                    break;
                case "SpotLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Z
                    };
                    break;
                case "PointLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Z,
                        shadowCameraNear: 1,
                        shadowCameraFar: 1e3
                    };
                    break;
            }
            return s1[e.id] = t, t;
        }
    };
}
var L0 = 0;
function I0(s1, e) {
    return (e.castShadow ? 2 : 0) - (s1.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (s1.map ? 1 : 0);
}
function U0(s1, e) {
    let t = new C0, n = P0(), i = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1,
            numSpotMaps: -1,
            numLightProbes: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotLightMap: [],
        spotShadow: [],
        spotShadowMap: [],
        spotLightMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
        numSpotLightShadowsWithMaps: 0,
        numLightProbes: 0
    };
    for(let h = 0; h < 9; h++)i.probe.push(new A);
    let r = new A, a = new ze, o = new ze;
    function c(h, u) {
        let d = 0, f = 0, m = 0;
        for(let Y = 0; Y < 9; Y++)i.probe[Y].set(0, 0, 0);
        let _ = 0, g = 0, p = 0, v = 0, x = 0, y = 0, b = 0, w = 0, R = 0, I = 0, M = 0;
        h.sort(I0);
        let T = u === !0 ? Math.PI : 1;
        for(let Y = 0, $ = h.length; Y < $; Y++){
            let U = h[Y], z = U.color, q = U.intensity, H = U.distance, ne = U.shadow && U.shadow.map ? U.shadow.map.texture : null;
            if (U.isAmbientLight) d += z.r * q * T, f += z.g * q * T, m += z.b * q * T;
            else if (U.isLightProbe) {
                for(let W = 0; W < 9; W++)i.probe[W].addScaledVector(U.sh.coefficients[W], q);
                M++;
            } else if (U.isDirectionalLight) {
                let W = t.get(U);
                if (W.color.copy(U.color).multiplyScalar(U.intensity * T), U.castShadow) {
                    let K = U.shadow, D = n.get(U);
                    D.shadowBias = K.bias, D.shadowNormalBias = K.normalBias, D.shadowRadius = K.radius, D.shadowMapSize = K.mapSize, i.directionalShadow[_] = D, i.directionalShadowMap[_] = ne, i.directionalShadowMatrix[_] = U.shadow.matrix, y++;
                }
                i.directional[_] = W, _++;
            } else if (U.isSpotLight) {
                let W = t.get(U);
                W.position.setFromMatrixPosition(U.matrixWorld), W.color.copy(z).multiplyScalar(q * T), W.distance = H, W.coneCos = Math.cos(U.angle), W.penumbraCos = Math.cos(U.angle * (1 - U.penumbra)), W.decay = U.decay, i.spot[p] = W;
                let K = U.shadow;
                if (U.map && (i.spotLightMap[R] = U.map, R++, K.updateMatrices(U), U.castShadow && I++), i.spotLightMatrix[p] = K.matrix, U.castShadow) {
                    let D = n.get(U);
                    D.shadowBias = K.bias, D.shadowNormalBias = K.normalBias, D.shadowRadius = K.radius, D.shadowMapSize = K.mapSize, i.spotShadow[p] = D, i.spotShadowMap[p] = ne, w++;
                }
                p++;
            } else if (U.isRectAreaLight) {
                let W = t.get(U);
                W.color.copy(z).multiplyScalar(q), W.halfWidth.set(U.width * .5, 0, 0), W.halfHeight.set(0, U.height * .5, 0), i.rectArea[v] = W, v++;
            } else if (U.isPointLight) {
                let W = t.get(U);
                if (W.color.copy(U.color).multiplyScalar(U.intensity * T), W.distance = U.distance, W.decay = U.decay, U.castShadow) {
                    let K = U.shadow, D = n.get(U);
                    D.shadowBias = K.bias, D.shadowNormalBias = K.normalBias, D.shadowRadius = K.radius, D.shadowMapSize = K.mapSize, D.shadowCameraNear = K.camera.near, D.shadowCameraFar = K.camera.far, i.pointShadow[g] = D, i.pointShadowMap[g] = ne, i.pointShadowMatrix[g] = U.shadow.matrix, b++;
                }
                i.point[g] = W, g++;
            } else if (U.isHemisphereLight) {
                let W = t.get(U);
                W.skyColor.copy(U.color).multiplyScalar(q * T), W.groundColor.copy(U.groundColor).multiplyScalar(q * T), i.hemi[x] = W, x++;
            }
        }
        v > 0 && (e.isWebGL2 || s1.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = le.LTC_FLOAT_1, i.rectAreaLTC2 = le.LTC_FLOAT_2) : s1.has("OES_texture_half_float_linear") === !0 ? (i.rectAreaLTC1 = le.LTC_HALF_1, i.rectAreaLTC2 = le.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = d, i.ambient[1] = f, i.ambient[2] = m;
        let O = i.hash;
        (O.directionalLength !== _ || O.pointLength !== g || O.spotLength !== p || O.rectAreaLength !== v || O.hemiLength !== x || O.numDirectionalShadows !== y || O.numPointShadows !== b || O.numSpotShadows !== w || O.numSpotMaps !== R || O.numLightProbes !== M) && (i.directional.length = _, i.spot.length = p, i.rectArea.length = v, i.point.length = g, i.hemi.length = x, i.directionalShadow.length = y, i.directionalShadowMap.length = y, i.pointShadow.length = b, i.pointShadowMap.length = b, i.spotShadow.length = w, i.spotShadowMap.length = w, i.directionalShadowMatrix.length = y, i.pointShadowMatrix.length = b, i.spotLightMatrix.length = w + R - I, i.spotLightMap.length = R, i.numSpotLightShadowsWithMaps = I, i.numLightProbes = M, O.directionalLength = _, O.pointLength = g, O.spotLength = p, O.rectAreaLength = v, O.hemiLength = x, O.numDirectionalShadows = y, O.numPointShadows = b, O.numSpotShadows = w, O.numSpotMaps = R, O.numLightProbes = M, i.version = L0++);
    }
    function l(h, u) {
        let d = 0, f = 0, m = 0, _ = 0, g = 0, p = u.matrixWorldInverse;
        for(let v = 0, x = h.length; v < x; v++){
            let y = h[v];
            if (y.isDirectionalLight) {
                let b = i.directional[d];
                b.direction.setFromMatrixPosition(y.matrixWorld), r.setFromMatrixPosition(y.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(p), d++;
            } else if (y.isSpotLight) {
                let b = i.spot[m];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(p), b.direction.setFromMatrixPosition(y.matrixWorld), r.setFromMatrixPosition(y.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(p), m++;
            } else if (y.isRectAreaLight) {
                let b = i.rectArea[_];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(p), o.identity(), a.copy(y.matrixWorld), a.premultiply(p), o.extractRotation(a), b.halfWidth.set(y.width * .5, 0, 0), b.halfHeight.set(0, y.height * .5, 0), b.halfWidth.applyMatrix4(o), b.halfHeight.applyMatrix4(o), _++;
            } else if (y.isPointLight) {
                let b = i.point[f];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(p), f++;
            } else if (y.isHemisphereLight) {
                let b = i.hemi[g];
                b.direction.setFromMatrixPosition(y.matrixWorld), b.direction.transformDirection(p), g++;
            }
        }
    }
    return {
        setup: c,
        setupView: l,
        state: i
    };
}
function Ph(s1, e) {
    let t = new U0(s1, e), n = [], i = [];
    function r() {
        n.length = 0, i.length = 0;
    }
    function a(u) {
        n.push(u);
    }
    function o(u) {
        i.push(u);
    }
    function c(u) {
        t.setup(n, u);
    }
    function l(u) {
        t.setupView(n, u);
    }
    return {
        init: r,
        state: {
            lightsArray: n,
            shadowsArray: i,
            lights: t
        },
        setupLights: c,
        setupLightsView: l,
        pushLight: a,
        pushShadow: o
    };
}
function D0(s1, e) {
    let t = new WeakMap;
    function n(r, a = 0) {
        let o = t.get(r), c;
        return o === void 0 ? (c = new Ph(s1, e), t.set(r, [
            c
        ])) : a >= o.length ? (c = new Ph(s1, e), o.push(c)) : c = o[a], c;
    }
    function i() {
        t = new WeakMap;
    }
    return {
        get: n,
        dispose: i
    };
}
var Qr = class extends bt {
    constructor(e){
        super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = Cf, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
    }
}, jr = class extends bt {
    constructor(e){
        super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
    }
}, N0 = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, O0 = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function F0(s1, e, t) {
    let n = new Ps, i = new Z, r = new Z, a = new je, o = new Qr({
        depthPacking: Pf
    }), c = new jr, l = {}, h = t.maxTextureSize, u = {
        [Bn]: Ft,
        [Ft]: Bn,
        [gn]: gn
    }, d = new jt({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new Z
            },
            radius: {
                value: 4
            }
        },
        vertexShader: N0,
        fragmentShader: O0
    }), f = d.clone();
    f.defines.HORIZONTAL_PASS = 1;
    let m = new Ge;
    m.setAttribute("position", new et(new Float32Array([
        -1,
        -1,
        .5,
        3,
        -1,
        .5,
        -1,
        3,
        .5
    ]), 3));
    let _ = new Mt(m, d), g = this;
    this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = cd;
    let p = this.type;
    this.render = function(b, w, R) {
        if (g.enabled === !1 || g.autoUpdate === !1 && g.needsUpdate === !1 || b.length === 0) return;
        let I = s1.getRenderTarget(), M = s1.getActiveCubeFace(), T = s1.getActiveMipmapLevel(), O = s1.state;
        O.setBlending(Dn), O.buffers.color.setClear(1, 1, 1, 1), O.buffers.depth.setTest(!0), O.setScissorTest(!1);
        let Y = p !== pn && this.type === pn, $ = p === pn && this.type !== pn;
        for(let U = 0, z = b.length; U < z; U++){
            let q = b[U], H = q.shadow;
            if (H === void 0) {
                console.warn("THREE.WebGLShadowMap:", q, "has no shadow.");
                continue;
            }
            if (H.autoUpdate === !1 && H.needsUpdate === !1) continue;
            i.copy(H.mapSize);
            let ne = H.getFrameExtents();
            if (i.multiply(ne), r.copy(H.mapSize), (i.x > h || i.y > h) && (i.x > h && (r.x = Math.floor(h / ne.x), i.x = r.x * ne.x, H.mapSize.x = r.x), i.y > h && (r.y = Math.floor(h / ne.y), i.y = r.y * ne.y, H.mapSize.y = r.y)), H.map === null || Y === !0 || $ === !0) {
                let K = this.type !== pn ? {
                    minFilter: pt,
                    magFilter: pt
                } : {};
                H.map !== null && H.map.dispose(), H.map = new qt(i.x, i.y, K), H.map.texture.name = q.name + ".shadowMap", H.camera.updateProjectionMatrix();
            }
            s1.setRenderTarget(H.map), s1.clear();
            let W = H.getViewportCount();
            for(let K = 0; K < W; K++){
                let D = H.getViewport(K);
                a.set(r.x * D.x, r.y * D.y, r.x * D.z, r.y * D.w), O.viewport(a), H.updateMatrices(q, K), n = H.getFrustum(), y(w, R, H.camera, q, this.type);
            }
            H.isPointLightShadow !== !0 && this.type === pn && v(H, R), H.needsUpdate = !1;
        }
        p = this.type, g.needsUpdate = !1, s1.setRenderTarget(I, M, T);
    };
    function v(b, w) {
        let R = e.update(_);
        d.defines.VSM_SAMPLES !== b.blurSamples && (d.defines.VSM_SAMPLES = b.blurSamples, f.defines.VSM_SAMPLES = b.blurSamples, d.needsUpdate = !0, f.needsUpdate = !0), b.mapPass === null && (b.mapPass = new qt(i.x, i.y)), d.uniforms.shadow_pass.value = b.map.texture, d.uniforms.resolution.value = b.mapSize, d.uniforms.radius.value = b.radius, s1.setRenderTarget(b.mapPass), s1.clear(), s1.renderBufferDirect(w, null, R, d, _, null), f.uniforms.shadow_pass.value = b.mapPass.texture, f.uniforms.resolution.value = b.mapSize, f.uniforms.radius.value = b.radius, s1.setRenderTarget(b.map), s1.clear(), s1.renderBufferDirect(w, null, R, f, _, null);
    }
    function x(b, w, R, I) {
        let M = null, T = R.isPointLight === !0 ? b.customDistanceMaterial : b.customDepthMaterial;
        if (T !== void 0) M = T;
        else if (M = R.isPointLight === !0 ? c : o, s1.localClippingEnabled && w.clipShadows === !0 && Array.isArray(w.clippingPlanes) && w.clippingPlanes.length !== 0 || w.displacementMap && w.displacementScale !== 0 || w.alphaMap && w.alphaTest > 0 || w.map && w.alphaTest > 0) {
            let O = M.uuid, Y = w.uuid, $ = l[O];
            $ === void 0 && ($ = {}, l[O] = $);
            let U = $[Y];
            U === void 0 && (U = M.clone(), $[Y] = U), M = U;
        }
        if (M.visible = w.visible, M.wireframe = w.wireframe, I === pn ? M.side = w.shadowSide !== null ? w.shadowSide : w.side : M.side = w.shadowSide !== null ? w.shadowSide : u[w.side], M.alphaMap = w.alphaMap, M.alphaTest = w.alphaTest, M.map = w.map, M.clipShadows = w.clipShadows, M.clippingPlanes = w.clippingPlanes, M.clipIntersection = w.clipIntersection, M.displacementMap = w.displacementMap, M.displacementScale = w.displacementScale, M.displacementBias = w.displacementBias, M.wireframeLinewidth = w.wireframeLinewidth, M.linewidth = w.linewidth, R.isPointLight === !0 && M.isMeshDistanceMaterial === !0) {
            let O = s1.properties.get(M);
            O.light = R;
        }
        return M;
    }
    function y(b, w, R, I, M) {
        if (b.visible === !1) return;
        if (b.layers.test(w.layers) && (b.isMesh || b.isLine || b.isPoints) && (b.castShadow || b.receiveShadow && M === pn) && (!b.frustumCulled || n.intersectsObject(b))) {
            b.modelViewMatrix.multiplyMatrices(R.matrixWorldInverse, b.matrixWorld);
            let Y = e.update(b), $ = b.material;
            if (Array.isArray($)) {
                let U = Y.groups;
                for(let z = 0, q = U.length; z < q; z++){
                    let H = U[z], ne = $[H.materialIndex];
                    if (ne && ne.visible) {
                        let W = x(b, ne, I, M);
                        s1.renderBufferDirect(R, null, Y, W, b, H);
                    }
                }
            } else if ($.visible) {
                let U = x(b, $, I, M);
                s1.renderBufferDirect(R, null, Y, U, b, null);
            }
        }
        let O = b.children;
        for(let Y = 0, $ = O.length; Y < $; Y++)y(O[Y], w, R, I, M);
    }
}
function B0(s1, e, t) {
    let n = t.isWebGL2;
    function i() {
        let P = !1, ce = new je, ae = null, ge = new je(0, 0, 0, 0);
        return {
            setMask: function(ue) {
                ae !== ue && !P && (s1.colorMask(ue, ue, ue, ue), ae = ue);
            },
            setLocked: function(ue) {
                P = ue;
            },
            setClear: function(ue, Q, be, Fe, At) {
                At === !0 && (ue *= Fe, Q *= Fe, be *= Fe), ce.set(ue, Q, be, Fe), ge.equals(ce) === !1 && (s1.clearColor(ue, Q, be, Fe), ge.copy(ce));
            },
            reset: function() {
                P = !1, ae = null, ge.set(-1, 0, 0, 0);
            }
        };
    }
    function r() {
        let P = !1, ce = null, ae = null, ge = null;
        return {
            setTest: function(ue) {
                ue ? Ee(s1.DEPTH_TEST) : Te(s1.DEPTH_TEST);
            },
            setMask: function(ue) {
                ce !== ue && !P && (s1.depthMask(ue), ce = ue);
            },
            setFunc: function(ue) {
                if (ae !== ue) {
                    switch(ue){
                        case nf:
                            s1.depthFunc(s1.NEVER);
                            break;
                        case sf:
                            s1.depthFunc(s1.ALWAYS);
                            break;
                        case rf:
                            s1.depthFunc(s1.LESS);
                            break;
                        case uo:
                            s1.depthFunc(s1.LEQUAL);
                            break;
                        case af:
                            s1.depthFunc(s1.EQUAL);
                            break;
                        case of:
                            s1.depthFunc(s1.GEQUAL);
                            break;
                        case cf:
                            s1.depthFunc(s1.GREATER);
                            break;
                        case lf:
                            s1.depthFunc(s1.NOTEQUAL);
                            break;
                        default:
                            s1.depthFunc(s1.LEQUAL);
                    }
                    ae = ue;
                }
            },
            setLocked: function(ue) {
                P = ue;
            },
            setClear: function(ue) {
                ge !== ue && (s1.clearDepth(ue), ge = ue);
            },
            reset: function() {
                P = !1, ce = null, ae = null, ge = null;
            }
        };
    }
    function a() {
        let P = !1, ce = null, ae = null, ge = null, ue = null, Q = null, be = null, Fe = null, At = null;
        return {
            setTest: function(tt) {
                P || (tt ? Ee(s1.STENCIL_TEST) : Te(s1.STENCIL_TEST));
            },
            setMask: function(tt) {
                ce !== tt && !P && (s1.stencilMask(tt), ce = tt);
            },
            setFunc: function(tt, tn, Rt) {
                (ae !== tt || ge !== tn || ue !== Rt) && (s1.stencilFunc(tt, tn, Rt), ae = tt, ge = tn, ue = Rt);
            },
            setOp: function(tt, tn, Rt) {
                (Q !== tt || be !== tn || Fe !== Rt) && (s1.stencilOp(tt, tn, Rt), Q = tt, be = tn, Fe = Rt);
            },
            setLocked: function(tt) {
                P = tt;
            },
            setClear: function(tt) {
                At !== tt && (s1.clearStencil(tt), At = tt);
            },
            reset: function() {
                P = !1, ce = null, ae = null, ge = null, ue = null, Q = null, be = null, Fe = null, At = null;
            }
        };
    }
    let o = new i, c = new r, l = new a, h = new WeakMap, u = new WeakMap, d = {}, f = {}, m = new WeakMap, _ = [], g = null, p = !1, v = null, x = null, y = null, b = null, w = null, R = null, I = null, M = !1, T = null, O = null, Y = null, $ = null, U = null, z = s1.getParameter(s1.MAX_COMBINED_TEXTURE_IMAGE_UNITS), q = !1, H = 0, ne = s1.getParameter(s1.VERSION);
    ne.indexOf("WebGL") !== -1 ? (H = parseFloat(/^WebGL (\d)/.exec(ne)[1]), q = H >= 1) : ne.indexOf("OpenGL ES") !== -1 && (H = parseFloat(/^OpenGL ES (\d)/.exec(ne)[1]), q = H >= 2);
    let W = null, K = {}, D = s1.getParameter(s1.SCISSOR_BOX), G = s1.getParameter(s1.VIEWPORT), he = new je().fromArray(D), fe = new je().fromArray(G);
    function _e(P, ce, ae, ge) {
        let ue = new Uint8Array(4), Q = s1.createTexture();
        s1.bindTexture(P, Q), s1.texParameteri(P, s1.TEXTURE_MIN_FILTER, s1.NEAREST), s1.texParameteri(P, s1.TEXTURE_MAG_FILTER, s1.NEAREST);
        for(let be = 0; be < ae; be++)n && (P === s1.TEXTURE_3D || P === s1.TEXTURE_2D_ARRAY) ? s1.texImage3D(ce, 0, s1.RGBA, 1, 1, ge, 0, s1.RGBA, s1.UNSIGNED_BYTE, ue) : s1.texImage2D(ce + be, 0, s1.RGBA, 1, 1, 0, s1.RGBA, s1.UNSIGNED_BYTE, ue);
        return Q;
    }
    let we = {};
    we[s1.TEXTURE_2D] = _e(s1.TEXTURE_2D, s1.TEXTURE_2D, 1), we[s1.TEXTURE_CUBE_MAP] = _e(s1.TEXTURE_CUBE_MAP, s1.TEXTURE_CUBE_MAP_POSITIVE_X, 6), n && (we[s1.TEXTURE_2D_ARRAY] = _e(s1.TEXTURE_2D_ARRAY, s1.TEXTURE_2D_ARRAY, 1, 1), we[s1.TEXTURE_3D] = _e(s1.TEXTURE_3D, s1.TEXTURE_3D, 1, 1)), o.setClear(0, 0, 0, 1), c.setClear(1), l.setClear(0), Ee(s1.DEPTH_TEST), c.setFunc(uo), J(!1), Se(rl), Ee(s1.CULL_FACE), X(Dn);
    function Ee(P) {
        d[P] !== !0 && (s1.enable(P), d[P] = !0);
    }
    function Te(P) {
        d[P] !== !1 && (s1.disable(P), d[P] = !1);
    }
    function Ye(P, ce) {
        return f[P] !== ce ? (s1.bindFramebuffer(P, ce), f[P] = ce, n && (P === s1.DRAW_FRAMEBUFFER && (f[s1.FRAMEBUFFER] = ce), P === s1.FRAMEBUFFER && (f[s1.DRAW_FRAMEBUFFER] = ce)), !0) : !1;
    }
    function it(P, ce) {
        let ae = _, ge = !1;
        if (P) if (ae = m.get(ce), ae === void 0 && (ae = [], m.set(ce, ae)), P.isWebGLMultipleRenderTargets) {
            let ue = P.texture;
            if (ae.length !== ue.length || ae[0] !== s1.COLOR_ATTACHMENT0) {
                for(let Q = 0, be = ue.length; Q < be; Q++)ae[Q] = s1.COLOR_ATTACHMENT0 + Q;
                ae.length = ue.length, ge = !0;
            }
        } else ae[0] !== s1.COLOR_ATTACHMENT0 && (ae[0] = s1.COLOR_ATTACHMENT0, ge = !0);
        else ae[0] !== s1.BACK && (ae[0] = s1.BACK, ge = !0);
        ge && (t.isWebGL2 ? s1.drawBuffers(ae) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(ae));
    }
    function Ce(P) {
        return g !== P ? (s1.useProgram(P), g = P, !0) : !1;
    }
    let L = {
        [Bi]: s1.FUNC_ADD,
        [Xd]: s1.FUNC_SUBTRACT,
        [qd]: s1.FUNC_REVERSE_SUBTRACT
    };
    if (n) L[ll] = s1.MIN, L[hl] = s1.MAX;
    else {
        let P = e.get("EXT_blend_minmax");
        P !== null && (L[ll] = P.MIN_EXT, L[hl] = P.MAX_EXT);
    }
    let oe = {
        [Yd]: s1.ZERO,
        [Zd]: s1.ONE,
        [Jd]: s1.SRC_COLOR,
        [ld]: s1.SRC_ALPHA,
        [tf]: s1.SRC_ALPHA_SATURATE,
        [jd]: s1.DST_COLOR,
        [Kd]: s1.DST_ALPHA,
        [$d]: s1.ONE_MINUS_SRC_COLOR,
        [hd]: s1.ONE_MINUS_SRC_ALPHA,
        [ef]: s1.ONE_MINUS_DST_COLOR,
        [Qd]: s1.ONE_MINUS_DST_ALPHA
    };
    function X(P, ce, ae, ge, ue, Q, be, Fe) {
        if (P === Dn) {
            p === !0 && (Te(s1.BLEND), p = !1);
            return;
        }
        if (p === !1 && (Ee(s1.BLEND), p = !0), P !== Wd) {
            if (P !== v || Fe !== M) {
                if ((x !== Bi || w !== Bi) && (s1.blendEquation(s1.FUNC_ADD), x = Bi, w = Bi), Fe) switch(P){
                    case Wi:
                        s1.blendFuncSeparate(s1.ONE, s1.ONE_MINUS_SRC_ALPHA, s1.ONE, s1.ONE_MINUS_SRC_ALPHA);
                        break;
                    case al:
                        s1.blendFunc(s1.ONE, s1.ONE);
                        break;
                    case ol:
                        s1.blendFuncSeparate(s1.ZERO, s1.ONE_MINUS_SRC_COLOR, s1.ZERO, s1.ONE);
                        break;
                    case cl:
                        s1.blendFuncSeparate(s1.ZERO, s1.SRC_COLOR, s1.ZERO, s1.SRC_ALPHA);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", P);
                        break;
                }
                else switch(P){
                    case Wi:
                        s1.blendFuncSeparate(s1.SRC_ALPHA, s1.ONE_MINUS_SRC_ALPHA, s1.ONE, s1.ONE_MINUS_SRC_ALPHA);
                        break;
                    case al:
                        s1.blendFunc(s1.SRC_ALPHA, s1.ONE);
                        break;
                    case ol:
                        s1.blendFuncSeparate(s1.ZERO, s1.ONE_MINUS_SRC_COLOR, s1.ZERO, s1.ONE);
                        break;
                    case cl:
                        s1.blendFunc(s1.ZERO, s1.SRC_COLOR);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", P);
                        break;
                }
                y = null, b = null, R = null, I = null, v = P, M = Fe;
            }
            return;
        }
        ue = ue || ce, Q = Q || ae, be = be || ge, (ce !== x || ue !== w) && (s1.blendEquationSeparate(L[ce], L[ue]), x = ce, w = ue), (ae !== y || ge !== b || Q !== R || be !== I) && (s1.blendFuncSeparate(oe[ae], oe[ge], oe[Q], oe[be]), y = ae, b = ge, R = Q, I = be), v = P, M = !1;
    }
    function ie(P, ce) {
        P.side === gn ? Te(s1.CULL_FACE) : Ee(s1.CULL_FACE);
        let ae = P.side === Ft;
        ce && (ae = !ae), J(ae), P.blending === Wi && P.transparent === !1 ? X(Dn) : X(P.blending, P.blendEquation, P.blendSrc, P.blendDst, P.blendEquationAlpha, P.blendSrcAlpha, P.blendDstAlpha, P.premultipliedAlpha), c.setFunc(P.depthFunc), c.setTest(P.depthTest), c.setMask(P.depthWrite), o.setMask(P.colorWrite);
        let ge = P.stencilWrite;
        l.setTest(ge), ge && (l.setMask(P.stencilWriteMask), l.setFunc(P.stencilFunc, P.stencilRef, P.stencilFuncMask), l.setOp(P.stencilFail, P.stencilZFail, P.stencilZPass)), ye(P.polygonOffset, P.polygonOffsetFactor, P.polygonOffsetUnits), P.alphaToCoverage === !0 ? Ee(s1.SAMPLE_ALPHA_TO_COVERAGE) : Te(s1.SAMPLE_ALPHA_TO_COVERAGE);
    }
    function J(P) {
        T !== P && (P ? s1.frontFace(s1.CW) : s1.frontFace(s1.CCW), T = P);
    }
    function Se(P) {
        P !== kd ? (Ee(s1.CULL_FACE), P !== O && (P === rl ? s1.cullFace(s1.BACK) : P === Hd ? s1.cullFace(s1.FRONT) : s1.cullFace(s1.FRONT_AND_BACK))) : Te(s1.CULL_FACE), O = P;
    }
    function me(P) {
        P !== Y && (q && s1.lineWidth(P), Y = P);
    }
    function ye(P, ce, ae) {
        P ? (Ee(s1.POLYGON_OFFSET_FILL), ($ !== ce || U !== ae) && (s1.polygonOffset(ce, ae), $ = ce, U = ae)) : Te(s1.POLYGON_OFFSET_FILL);
    }
    function Ne(P) {
        P ? Ee(s1.SCISSOR_TEST) : Te(s1.SCISSOR_TEST);
    }
    function qe(P) {
        P === void 0 && (P = s1.TEXTURE0 + z - 1), W !== P && (s1.activeTexture(P), W = P);
    }
    function rt(P, ce, ae) {
        ae === void 0 && (W === null ? ae = s1.TEXTURE0 + z - 1 : ae = W);
        let ge = K[ae];
        ge === void 0 && (ge = {
            type: void 0,
            texture: void 0
        }, K[ae] = ge), (ge.type !== P || ge.texture !== ce) && (W !== ae && (s1.activeTexture(ae), W = ae), s1.bindTexture(P, ce || we[P]), ge.type = P, ge.texture = ce);
    }
    function C() {
        let P = K[W];
        P !== void 0 && P.type !== void 0 && (s1.bindTexture(P.type, null), P.type = void 0, P.texture = void 0);
    }
    function S() {
        try {
            s1.compressedTexImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function B() {
        try {
            s1.compressedTexImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function ee() {
        try {
            s1.texSubImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function j() {
        try {
            s1.texSubImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function te() {
        try {
            s1.compressedTexSubImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function Me() {
        try {
            s1.compressedTexSubImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function re() {
        try {
            s1.texStorage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function de() {
        try {
            s1.texStorage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function Le() {
        try {
            s1.texImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function Ze() {
        try {
            s1.texImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function se(P) {
        he.equals(P) === !1 && (s1.scissor(P.x, P.y, P.z, P.w), he.copy(P));
    }
    function $e(P) {
        fe.equals(P) === !1 && (s1.viewport(P.x, P.y, P.z, P.w), fe.copy(P));
    }
    function Oe(P, ce) {
        let ae = u.get(ce);
        ae === void 0 && (ae = new WeakMap, u.set(ce, ae));
        let ge = ae.get(P);
        ge === void 0 && (ge = s1.getUniformBlockIndex(ce, P.name), ae.set(P, ge));
    }
    function Ie(P, ce) {
        let ge = u.get(ce).get(P);
        h.get(ce) !== ge && (s1.uniformBlockBinding(ce, ge, P.__bindingPointIndex), h.set(ce, ge));
    }
    function Re() {
        s1.disable(s1.BLEND), s1.disable(s1.CULL_FACE), s1.disable(s1.DEPTH_TEST), s1.disable(s1.POLYGON_OFFSET_FILL), s1.disable(s1.SCISSOR_TEST), s1.disable(s1.STENCIL_TEST), s1.disable(s1.SAMPLE_ALPHA_TO_COVERAGE), s1.blendEquation(s1.FUNC_ADD), s1.blendFunc(s1.ONE, s1.ZERO), s1.blendFuncSeparate(s1.ONE, s1.ZERO, s1.ONE, s1.ZERO), s1.colorMask(!0, !0, !0, !0), s1.clearColor(0, 0, 0, 0), s1.depthMask(!0), s1.depthFunc(s1.LESS), s1.clearDepth(1), s1.stencilMask(4294967295), s1.stencilFunc(s1.ALWAYS, 0, 4294967295), s1.stencilOp(s1.KEEP, s1.KEEP, s1.KEEP), s1.clearStencil(0), s1.cullFace(s1.BACK), s1.frontFace(s1.CCW), s1.polygonOffset(0, 0), s1.activeTexture(s1.TEXTURE0), s1.bindFramebuffer(s1.FRAMEBUFFER, null), n === !0 && (s1.bindFramebuffer(s1.DRAW_FRAMEBUFFER, null), s1.bindFramebuffer(s1.READ_FRAMEBUFFER, null)), s1.useProgram(null), s1.lineWidth(1), s1.scissor(0, 0, s1.canvas.width, s1.canvas.height), s1.viewport(0, 0, s1.canvas.width, s1.canvas.height), d = {}, W = null, K = {}, f = {}, m = new WeakMap, _ = [], g = null, p = !1, v = null, x = null, y = null, b = null, w = null, R = null, I = null, M = !1, T = null, O = null, Y = null, $ = null, U = null, he.set(0, 0, s1.canvas.width, s1.canvas.height), fe.set(0, 0, s1.canvas.width, s1.canvas.height), o.reset(), c.reset(), l.reset();
    }
    return {
        buffers: {
            color: o,
            depth: c,
            stencil: l
        },
        enable: Ee,
        disable: Te,
        bindFramebuffer: Ye,
        drawBuffers: it,
        useProgram: Ce,
        setBlending: X,
        setMaterial: ie,
        setFlipSided: J,
        setCullFace: Se,
        setLineWidth: me,
        setPolygonOffset: ye,
        setScissorTest: Ne,
        activeTexture: qe,
        bindTexture: rt,
        unbindTexture: C,
        compressedTexImage2D: S,
        compressedTexImage3D: B,
        texImage2D: Le,
        texImage3D: Ze,
        updateUBOMapping: Oe,
        uniformBlockBinding: Ie,
        texStorage2D: re,
        texStorage3D: de,
        texSubImage2D: ee,
        texSubImage3D: j,
        compressedTexSubImage2D: te,
        compressedTexSubImage3D: Me,
        scissor: se,
        viewport: $e,
        reset: Re
    };
}
function z0(s1, e, t, n, i, r, a) {
    let o = i.isWebGL2, c = i.maxTextures, l = i.maxCubemapSize, h = i.maxTextureSize, u = i.maxSamples, d = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, f = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), m = new WeakMap, _, g = new WeakMap, p = !1;
    try {
        p = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch  {}
    function v(C, S) {
        return p ? new OffscreenCanvas(C, S) : ws("canvas");
    }
    function x(C, S, B, ee) {
        let j = 1;
        if ((C.width > ee || C.height > ee) && (j = ee / Math.max(C.width, C.height)), j < 1 || S === !0) if (typeof HTMLImageElement < "u" && C instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && C instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && C instanceof ImageBitmap) {
            let te = S ? Wr : Math.floor, Me = te(j * C.width), re = te(j * C.height);
            _ === void 0 && (_ = v(Me, re));
            let de = B ? v(Me, re) : _;
            return de.width = Me, de.height = re, de.getContext("2d").drawImage(C, 0, 0, Me, re), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + C.width + "x" + C.height + ") to (" + Me + "x" + re + ")."), de;
        } else return "data" in C && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + C.width + "x" + C.height + ")."), C;
        return C;
    }
    function y(C) {
        return mo(C.width) && mo(C.height);
    }
    function b(C) {
        return o ? !1 : C.wrapS !== It || C.wrapT !== It || C.minFilter !== pt && C.minFilter !== mt;
    }
    function w(C, S) {
        return C.generateMipmaps && S && C.minFilter !== pt && C.minFilter !== mt;
    }
    function R(C) {
        s1.generateMipmap(C);
    }
    function I(C, S, B, ee, j = !1) {
        if (o === !1) return S;
        if (C !== null) {
            if (s1[C] !== void 0) return s1[C];
            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + C + "'");
        }
        let te = S;
        if (S === s1.RED && (B === s1.FLOAT && (te = s1.R32F), B === s1.HALF_FLOAT && (te = s1.R16F), B === s1.UNSIGNED_BYTE && (te = s1.R8)), S === s1.RED_INTEGER && (B === s1.UNSIGNED_BYTE && (te = s1.R8UI), B === s1.UNSIGNED_SHORT && (te = s1.R16UI), B === s1.UNSIGNED_INT && (te = s1.R32UI), B === s1.BYTE && (te = s1.R8I), B === s1.SHORT && (te = s1.R16I), B === s1.INT && (te = s1.R32I)), S === s1.RG && (B === s1.FLOAT && (te = s1.RG32F), B === s1.HALF_FLOAT && (te = s1.RG16F), B === s1.UNSIGNED_BYTE && (te = s1.RG8)), S === s1.RGBA) {
            let Me = j ? zr : Qe.getTransfer(ee);
            B === s1.FLOAT && (te = s1.RGBA32F), B === s1.HALF_FLOAT && (te = s1.RGBA16F), B === s1.UNSIGNED_BYTE && (te = Me === nt ? s1.SRGB8_ALPHA8 : s1.RGBA8), B === s1.UNSIGNED_SHORT_4_4_4_4 && (te = s1.RGBA4), B === s1.UNSIGNED_SHORT_5_5_5_1 && (te = s1.RGB5_A1);
        }
        return (te === s1.R16F || te === s1.R32F || te === s1.RG16F || te === s1.RG32F || te === s1.RGBA16F || te === s1.RGBA32F) && e.get("EXT_color_buffer_float"), te;
    }
    function M(C, S, B) {
        return w(C, B) === !0 || C.isFramebufferTexture && C.minFilter !== pt && C.minFilter !== mt ? Math.log2(Math.max(S.width, S.height)) + 1 : C.mipmaps !== void 0 && C.mipmaps.length > 0 ? C.mipmaps.length : C.isCompressedTexture && Array.isArray(C.image) ? S.mipmaps.length : 1;
    }
    function T(C) {
        return C === pt || C === fo || C === Lr ? s1.NEAREST : s1.LINEAR;
    }
    function O(C) {
        let S = C.target;
        S.removeEventListener("dispose", O), $(S), S.isVideoTexture && m.delete(S);
    }
    function Y(C) {
        let S = C.target;
        S.removeEventListener("dispose", Y), z(S);
    }
    function $(C) {
        let S = n.get(C);
        if (S.__webglInit === void 0) return;
        let B = C.source, ee = g.get(B);
        if (ee) {
            let j = ee[S.__cacheKey];
            j.usedTimes--, j.usedTimes === 0 && U(C), Object.keys(ee).length === 0 && g.delete(B);
        }
        n.remove(C);
    }
    function U(C) {
        let S = n.get(C);
        s1.deleteTexture(S.__webglTexture);
        let B = C.source, ee = g.get(B);
        delete ee[S.__cacheKey], a.memory.textures--;
    }
    function z(C) {
        let S = C.texture, B = n.get(C), ee = n.get(S);
        if (ee.__webglTexture !== void 0 && (s1.deleteTexture(ee.__webglTexture), a.memory.textures--), C.depthTexture && C.depthTexture.dispose(), C.isWebGLCubeRenderTarget) for(let j = 0; j < 6; j++){
            if (Array.isArray(B.__webglFramebuffer[j])) for(let te = 0; te < B.__webglFramebuffer[j].length; te++)s1.deleteFramebuffer(B.__webglFramebuffer[j][te]);
            else s1.deleteFramebuffer(B.__webglFramebuffer[j]);
            B.__webglDepthbuffer && s1.deleteRenderbuffer(B.__webglDepthbuffer[j]);
        }
        else {
            if (Array.isArray(B.__webglFramebuffer)) for(let j = 0; j < B.__webglFramebuffer.length; j++)s1.deleteFramebuffer(B.__webglFramebuffer[j]);
            else s1.deleteFramebuffer(B.__webglFramebuffer);
            if (B.__webglDepthbuffer && s1.deleteRenderbuffer(B.__webglDepthbuffer), B.__webglMultisampledFramebuffer && s1.deleteFramebuffer(B.__webglMultisampledFramebuffer), B.__webglColorRenderbuffer) for(let j = 0; j < B.__webglColorRenderbuffer.length; j++)B.__webglColorRenderbuffer[j] && s1.deleteRenderbuffer(B.__webglColorRenderbuffer[j]);
            B.__webglDepthRenderbuffer && s1.deleteRenderbuffer(B.__webglDepthRenderbuffer);
        }
        if (C.isWebGLMultipleRenderTargets) for(let j = 0, te = S.length; j < te; j++){
            let Me = n.get(S[j]);
            Me.__webglTexture && (s1.deleteTexture(Me.__webglTexture), a.memory.textures--), n.remove(S[j]);
        }
        n.remove(S), n.remove(C);
    }
    let q = 0;
    function H() {
        q = 0;
    }
    function ne() {
        let C = q;
        return C >= c && console.warn("THREE.WebGLTextures: Trying to use " + C + " texture units while this GPU supports only " + c), q += 1, C;
    }
    function W(C) {
        let S = [];
        return S.push(C.wrapS), S.push(C.wrapT), S.push(C.wrapR || 0), S.push(C.magFilter), S.push(C.minFilter), S.push(C.anisotropy), S.push(C.internalFormat), S.push(C.format), S.push(C.type), S.push(C.generateMipmaps), S.push(C.premultiplyAlpha), S.push(C.flipY), S.push(C.unpackAlignment), S.push(C.colorSpace), S.join();
    }
    function K(C, S) {
        let B = n.get(C);
        if (C.isVideoTexture && qe(C), C.isRenderTargetTexture === !1 && C.version > 0 && B.__version !== C.version) {
            let ee = C.image;
            if (ee === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
            else if (ee.complete === !1) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
                Ye(B, C, S);
                return;
            }
        }
        t.bindTexture(s1.TEXTURE_2D, B.__webglTexture, s1.TEXTURE0 + S);
    }
    function D(C, S) {
        let B = n.get(C);
        if (C.version > 0 && B.__version !== C.version) {
            Ye(B, C, S);
            return;
        }
        t.bindTexture(s1.TEXTURE_2D_ARRAY, B.__webglTexture, s1.TEXTURE0 + S);
    }
    function G(C, S) {
        let B = n.get(C);
        if (C.version > 0 && B.__version !== C.version) {
            Ye(B, C, S);
            return;
        }
        t.bindTexture(s1.TEXTURE_3D, B.__webglTexture, s1.TEXTURE0 + S);
    }
    function he(C, S) {
        let B = n.get(C);
        if (C.version > 0 && B.__version !== C.version) {
            it(B, C, S);
            return;
        }
        t.bindTexture(s1.TEXTURE_CUBE_MAP, B.__webglTexture, s1.TEXTURE0 + S);
    }
    let fe = {
        [Dr]: s1.REPEAT,
        [It]: s1.CLAMP_TO_EDGE,
        [Nr]: s1.MIRRORED_REPEAT
    }, _e = {
        [pt]: s1.NEAREST,
        [fo]: s1.NEAREST_MIPMAP_NEAREST,
        [Lr]: s1.NEAREST_MIPMAP_LINEAR,
        [mt]: s1.LINEAR,
        [ud]: s1.LINEAR_MIPMAP_NEAREST,
        [li]: s1.LINEAR_MIPMAP_LINEAR
    }, we = {
        [Uf]: s1.NEVER,
        [Vf]: s1.ALWAYS,
        [Df]: s1.LESS,
        [Of]: s1.LEQUAL,
        [Nf]: s1.EQUAL,
        [zf]: s1.GEQUAL,
        [Ff]: s1.GREATER,
        [Bf]: s1.NOTEQUAL
    };
    function Ee(C, S, B) {
        if (B ? (s1.texParameteri(C, s1.TEXTURE_WRAP_S, fe[S.wrapS]), s1.texParameteri(C, s1.TEXTURE_WRAP_T, fe[S.wrapT]), (C === s1.TEXTURE_3D || C === s1.TEXTURE_2D_ARRAY) && s1.texParameteri(C, s1.TEXTURE_WRAP_R, fe[S.wrapR]), s1.texParameteri(C, s1.TEXTURE_MAG_FILTER, _e[S.magFilter]), s1.texParameteri(C, s1.TEXTURE_MIN_FILTER, _e[S.minFilter])) : (s1.texParameteri(C, s1.TEXTURE_WRAP_S, s1.CLAMP_TO_EDGE), s1.texParameteri(C, s1.TEXTURE_WRAP_T, s1.CLAMP_TO_EDGE), (C === s1.TEXTURE_3D || C === s1.TEXTURE_2D_ARRAY) && s1.texParameteri(C, s1.TEXTURE_WRAP_R, s1.CLAMP_TO_EDGE), (S.wrapS !== It || S.wrapT !== It) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), s1.texParameteri(C, s1.TEXTURE_MAG_FILTER, T(S.magFilter)), s1.texParameteri(C, s1.TEXTURE_MIN_FILTER, T(S.minFilter)), S.minFilter !== pt && S.minFilter !== mt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), S.compareFunction && (s1.texParameteri(C, s1.TEXTURE_COMPARE_MODE, s1.COMPARE_REF_TO_TEXTURE), s1.texParameteri(C, s1.TEXTURE_COMPARE_FUNC, we[S.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
            let ee = e.get("EXT_texture_filter_anisotropic");
            if (S.magFilter === pt || S.minFilter !== Lr && S.minFilter !== li || S.type === xn && e.has("OES_texture_float_linear") === !1 || o === !1 && S.type === Ts && e.has("OES_texture_half_float_linear") === !1) return;
            (S.anisotropy > 1 || n.get(S).__currentAnisotropy) && (s1.texParameterf(C, ee.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(S.anisotropy, i.getMaxAnisotropy())), n.get(S).__currentAnisotropy = S.anisotropy);
        }
    }
    function Te(C, S) {
        let B = !1;
        C.__webglInit === void 0 && (C.__webglInit = !0, S.addEventListener("dispose", O));
        let ee = S.source, j = g.get(ee);
        j === void 0 && (j = {}, g.set(ee, j));
        let te = W(S);
        if (te !== C.__cacheKey) {
            j[te] === void 0 && (j[te] = {
                texture: s1.createTexture(),
                usedTimes: 0
            }, a.memory.textures++, B = !0), j[te].usedTimes++;
            let Me = j[C.__cacheKey];
            Me !== void 0 && (j[C.__cacheKey].usedTimes--, Me.usedTimes === 0 && U(S)), C.__cacheKey = te, C.__webglTexture = j[te].texture;
        }
        return B;
    }
    function Ye(C, S, B) {
        let ee = s1.TEXTURE_2D;
        (S.isDataArrayTexture || S.isCompressedArrayTexture) && (ee = s1.TEXTURE_2D_ARRAY), S.isData3DTexture && (ee = s1.TEXTURE_3D);
        let j = Te(C, S), te = S.source;
        t.bindTexture(ee, C.__webglTexture, s1.TEXTURE0 + B);
        let Me = n.get(te);
        if (te.version !== Me.__version || j === !0) {
            t.activeTexture(s1.TEXTURE0 + B);
            let re = Qe.getPrimaries(Qe.workingColorSpace), de = S.colorSpace === Xt ? null : Qe.getPrimaries(S.colorSpace), Le = S.colorSpace === Xt || re === de ? s1.NONE : s1.BROWSER_DEFAULT_WEBGL;
            s1.pixelStorei(s1.UNPACK_FLIP_Y_WEBGL, S.flipY), s1.pixelStorei(s1.UNPACK_PREMULTIPLY_ALPHA_WEBGL, S.premultiplyAlpha), s1.pixelStorei(s1.UNPACK_ALIGNMENT, S.unpackAlignment), s1.pixelStorei(s1.UNPACK_COLORSPACE_CONVERSION_WEBGL, Le);
            let Ze = b(S) && y(S.image) === !1, se = x(S.image, Ze, !1, h);
            se = rt(S, se);
            let $e = y(se) || o, Oe = r.convert(S.format, S.colorSpace), Ie = r.convert(S.type), Re = I(S.internalFormat, Oe, Ie, S.colorSpace, S.isVideoTexture);
            Ee(ee, S, $e);
            let P, ce = S.mipmaps, ae = o && S.isVideoTexture !== !0, ge = Me.__version === void 0 || j === !0, ue = M(S, se, $e);
            if (S.isDepthTexture) Re = s1.DEPTH_COMPONENT, o ? S.type === xn ? Re = s1.DEPTH_COMPONENT32F : S.type === Ln ? Re = s1.DEPTH_COMPONENT24 : S.type === ii ? Re = s1.DEPTH24_STENCIL8 : Re = s1.DEPTH_COMPONENT16 : S.type === xn && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), S.format === si && Re === s1.DEPTH_COMPONENT && S.type !== Wc && S.type !== Ln && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), S.type = Ln, Ie = r.convert(S.type)), S.format === Yi && Re === s1.DEPTH_COMPONENT && (Re = s1.DEPTH_STENCIL, S.type !== ii && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), S.type = ii, Ie = r.convert(S.type))), ge && (ae ? t.texStorage2D(s1.TEXTURE_2D, 1, Re, se.width, se.height) : t.texImage2D(s1.TEXTURE_2D, 0, Re, se.width, se.height, 0, Oe, Ie, null));
            else if (S.isDataTexture) if (ce.length > 0 && $e) {
                ae && ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, ce[0].width, ce[0].height);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], ae ? t.texSubImage2D(s1.TEXTURE_2D, Q, 0, 0, P.width, P.height, Oe, Ie, P.data) : t.texImage2D(s1.TEXTURE_2D, Q, Re, P.width, P.height, 0, Oe, Ie, P.data);
                S.generateMipmaps = !1;
            } else ae ? (ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, se.width, se.height), t.texSubImage2D(s1.TEXTURE_2D, 0, 0, 0, se.width, se.height, Oe, Ie, se.data)) : t.texImage2D(s1.TEXTURE_2D, 0, Re, se.width, se.height, 0, Oe, Ie, se.data);
            else if (S.isCompressedTexture) if (S.isCompressedArrayTexture) {
                ae && ge && t.texStorage3D(s1.TEXTURE_2D_ARRAY, ue, Re, ce[0].width, ce[0].height, se.depth);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], S.format !== Wt ? Oe !== null ? ae ? t.compressedTexSubImage3D(s1.TEXTURE_2D_ARRAY, Q, 0, 0, 0, P.width, P.height, se.depth, Oe, P.data, 0, 0) : t.compressedTexImage3D(s1.TEXTURE_2D_ARRAY, Q, Re, P.width, P.height, se.depth, 0, P.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ae ? t.texSubImage3D(s1.TEXTURE_2D_ARRAY, Q, 0, 0, 0, P.width, P.height, se.depth, Oe, Ie, P.data) : t.texImage3D(s1.TEXTURE_2D_ARRAY, Q, Re, P.width, P.height, se.depth, 0, Oe, Ie, P.data);
            } else {
                ae && ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, ce[0].width, ce[0].height);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], S.format !== Wt ? Oe !== null ? ae ? t.compressedTexSubImage2D(s1.TEXTURE_2D, Q, 0, 0, P.width, P.height, Oe, P.data) : t.compressedTexImage2D(s1.TEXTURE_2D, Q, Re, P.width, P.height, 0, P.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ae ? t.texSubImage2D(s1.TEXTURE_2D, Q, 0, 0, P.width, P.height, Oe, Ie, P.data) : t.texImage2D(s1.TEXTURE_2D, Q, Re, P.width, P.height, 0, Oe, Ie, P.data);
            }
            else if (S.isDataArrayTexture) ae ? (ge && t.texStorage3D(s1.TEXTURE_2D_ARRAY, ue, Re, se.width, se.height, se.depth), t.texSubImage3D(s1.TEXTURE_2D_ARRAY, 0, 0, 0, 0, se.width, se.height, se.depth, Oe, Ie, se.data)) : t.texImage3D(s1.TEXTURE_2D_ARRAY, 0, Re, se.width, se.height, se.depth, 0, Oe, Ie, se.data);
            else if (S.isData3DTexture) ae ? (ge && t.texStorage3D(s1.TEXTURE_3D, ue, Re, se.width, se.height, se.depth), t.texSubImage3D(s1.TEXTURE_3D, 0, 0, 0, 0, se.width, se.height, se.depth, Oe, Ie, se.data)) : t.texImage3D(s1.TEXTURE_3D, 0, Re, se.width, se.height, se.depth, 0, Oe, Ie, se.data);
            else if (S.isFramebufferTexture) {
                if (ge) if (ae) t.texStorage2D(s1.TEXTURE_2D, ue, Re, se.width, se.height);
                else {
                    let Q = se.width, be = se.height;
                    for(let Fe = 0; Fe < ue; Fe++)t.texImage2D(s1.TEXTURE_2D, Fe, Re, Q, be, 0, Oe, Ie, null), Q >>= 1, be >>= 1;
                }
            } else if (ce.length > 0 && $e) {
                ae && ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, ce[0].width, ce[0].height);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], ae ? t.texSubImage2D(s1.TEXTURE_2D, Q, 0, 0, Oe, Ie, P) : t.texImage2D(s1.TEXTURE_2D, Q, Re, Oe, Ie, P);
                S.generateMipmaps = !1;
            } else ae ? (ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, se.width, se.height), t.texSubImage2D(s1.TEXTURE_2D, 0, 0, 0, Oe, Ie, se)) : t.texImage2D(s1.TEXTURE_2D, 0, Re, Oe, Ie, se);
            w(S, $e) && R(ee), Me.__version = te.version, S.onUpdate && S.onUpdate(S);
        }
        C.__version = S.version;
    }
    function it(C, S, B) {
        if (S.image.length !== 6) return;
        let ee = Te(C, S), j = S.source;
        t.bindTexture(s1.TEXTURE_CUBE_MAP, C.__webglTexture, s1.TEXTURE0 + B);
        let te = n.get(j);
        if (j.version !== te.__version || ee === !0) {
            t.activeTexture(s1.TEXTURE0 + B);
            let Me = Qe.getPrimaries(Qe.workingColorSpace), re = S.colorSpace === Xt ? null : Qe.getPrimaries(S.colorSpace), de = S.colorSpace === Xt || Me === re ? s1.NONE : s1.BROWSER_DEFAULT_WEBGL;
            s1.pixelStorei(s1.UNPACK_FLIP_Y_WEBGL, S.flipY), s1.pixelStorei(s1.UNPACK_PREMULTIPLY_ALPHA_WEBGL, S.premultiplyAlpha), s1.pixelStorei(s1.UNPACK_ALIGNMENT, S.unpackAlignment), s1.pixelStorei(s1.UNPACK_COLORSPACE_CONVERSION_WEBGL, de);
            let Le = S.isCompressedTexture || S.image[0].isCompressedTexture, Ze = S.image[0] && S.image[0].isDataTexture, se = [];
            for(let Q = 0; Q < 6; Q++)!Le && !Ze ? se[Q] = x(S.image[Q], !1, !0, l) : se[Q] = Ze ? S.image[Q].image : S.image[Q], se[Q] = rt(S, se[Q]);
            let $e = se[0], Oe = y($e) || o, Ie = r.convert(S.format, S.colorSpace), Re = r.convert(S.type), P = I(S.internalFormat, Ie, Re, S.colorSpace), ce = o && S.isVideoTexture !== !0, ae = te.__version === void 0 || ee === !0, ge = M(S, $e, Oe);
            Ee(s1.TEXTURE_CUBE_MAP, S, Oe);
            let ue;
            if (Le) {
                ce && ae && t.texStorage2D(s1.TEXTURE_CUBE_MAP, ge, P, $e.width, $e.height);
                for(let Q = 0; Q < 6; Q++){
                    ue = se[Q].mipmaps;
                    for(let be = 0; be < ue.length; be++){
                        let Fe = ue[be];
                        S.format !== Wt ? Ie !== null ? ce ? t.compressedTexSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, 0, 0, Fe.width, Fe.height, Ie, Fe.data) : t.compressedTexImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, P, Fe.width, Fe.height, 0, Fe.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, 0, 0, Fe.width, Fe.height, Ie, Re, Fe.data) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, P, Fe.width, Fe.height, 0, Ie, Re, Fe.data);
                    }
                }
            } else {
                ue = S.mipmaps, ce && ae && (ue.length > 0 && ge++, t.texStorage2D(s1.TEXTURE_CUBE_MAP, ge, P, se[0].width, se[0].height));
                for(let Q = 0; Q < 6; Q++)if (Ze) {
                    ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, 0, 0, se[Q].width, se[Q].height, Ie, Re, se[Q].data) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, P, se[Q].width, se[Q].height, 0, Ie, Re, se[Q].data);
                    for(let be = 0; be < ue.length; be++){
                        let At = ue[be].image[Q].image;
                        ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, 0, 0, At.width, At.height, Ie, Re, At.data) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, P, At.width, At.height, 0, Ie, Re, At.data);
                    }
                } else {
                    ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, 0, 0, Ie, Re, se[Q]) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, P, Ie, Re, se[Q]);
                    for(let be = 0; be < ue.length; be++){
                        let Fe = ue[be];
                        ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, 0, 0, Ie, Re, Fe.image[Q]) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, P, Ie, Re, Fe.image[Q]);
                    }
                }
            }
            w(S, Oe) && R(s1.TEXTURE_CUBE_MAP), te.__version = j.version, S.onUpdate && S.onUpdate(S);
        }
        C.__version = S.version;
    }
    function Ce(C, S, B, ee, j, te) {
        let Me = r.convert(B.format, B.colorSpace), re = r.convert(B.type), de = I(B.internalFormat, Me, re, B.colorSpace);
        if (!n.get(S).__hasExternalTextures) {
            let Ze = Math.max(1, S.width >> te), se = Math.max(1, S.height >> te);
            j === s1.TEXTURE_3D || j === s1.TEXTURE_2D_ARRAY ? t.texImage3D(j, te, de, Ze, se, S.depth, 0, Me, re, null) : t.texImage2D(j, te, de, Ze, se, 0, Me, re, null);
        }
        t.bindFramebuffer(s1.FRAMEBUFFER, C), Ne(S) ? d.framebufferTexture2DMultisampleEXT(s1.FRAMEBUFFER, ee, j, n.get(B).__webglTexture, 0, ye(S)) : (j === s1.TEXTURE_2D || j >= s1.TEXTURE_CUBE_MAP_POSITIVE_X && j <= s1.TEXTURE_CUBE_MAP_NEGATIVE_Z) && s1.framebufferTexture2D(s1.FRAMEBUFFER, ee, j, n.get(B).__webglTexture, te), t.bindFramebuffer(s1.FRAMEBUFFER, null);
    }
    function L(C, S, B) {
        if (s1.bindRenderbuffer(s1.RENDERBUFFER, C), S.depthBuffer && !S.stencilBuffer) {
            let ee = o === !0 ? s1.DEPTH_COMPONENT24 : s1.DEPTH_COMPONENT16;
            if (B || Ne(S)) {
                let j = S.depthTexture;
                j && j.isDepthTexture && (j.type === xn ? ee = s1.DEPTH_COMPONENT32F : j.type === Ln && (ee = s1.DEPTH_COMPONENT24));
                let te = ye(S);
                Ne(S) ? d.renderbufferStorageMultisampleEXT(s1.RENDERBUFFER, te, ee, S.width, S.height) : s1.renderbufferStorageMultisample(s1.RENDERBUFFER, te, ee, S.width, S.height);
            } else s1.renderbufferStorage(s1.RENDERBUFFER, ee, S.width, S.height);
            s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.DEPTH_ATTACHMENT, s1.RENDERBUFFER, C);
        } else if (S.depthBuffer && S.stencilBuffer) {
            let ee = ye(S);
            B && Ne(S) === !1 ? s1.renderbufferStorageMultisample(s1.RENDERBUFFER, ee, s1.DEPTH24_STENCIL8, S.width, S.height) : Ne(S) ? d.renderbufferStorageMultisampleEXT(s1.RENDERBUFFER, ee, s1.DEPTH24_STENCIL8, S.width, S.height) : s1.renderbufferStorage(s1.RENDERBUFFER, s1.DEPTH_STENCIL, S.width, S.height), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.DEPTH_STENCIL_ATTACHMENT, s1.RENDERBUFFER, C);
        } else {
            let ee = S.isWebGLMultipleRenderTargets === !0 ? S.texture : [
                S.texture
            ];
            for(let j = 0; j < ee.length; j++){
                let te = ee[j], Me = r.convert(te.format, te.colorSpace), re = r.convert(te.type), de = I(te.internalFormat, Me, re, te.colorSpace), Le = ye(S);
                B && Ne(S) === !1 ? s1.renderbufferStorageMultisample(s1.RENDERBUFFER, Le, de, S.width, S.height) : Ne(S) ? d.renderbufferStorageMultisampleEXT(s1.RENDERBUFFER, Le, de, S.width, S.height) : s1.renderbufferStorage(s1.RENDERBUFFER, de, S.width, S.height);
            }
        }
        s1.bindRenderbuffer(s1.RENDERBUFFER, null);
    }
    function oe(C, S) {
        if (S && S.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
        if (t.bindFramebuffer(s1.FRAMEBUFFER, C), !(S.depthTexture && S.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
        (!n.get(S.depthTexture).__webglTexture || S.depthTexture.image.width !== S.width || S.depthTexture.image.height !== S.height) && (S.depthTexture.image.width = S.width, S.depthTexture.image.height = S.height, S.depthTexture.needsUpdate = !0), K(S.depthTexture, 0);
        let ee = n.get(S.depthTexture).__webglTexture, j = ye(S);
        if (S.depthTexture.format === si) Ne(S) ? d.framebufferTexture2DMultisampleEXT(s1.FRAMEBUFFER, s1.DEPTH_ATTACHMENT, s1.TEXTURE_2D, ee, 0, j) : s1.framebufferTexture2D(s1.FRAMEBUFFER, s1.DEPTH_ATTACHMENT, s1.TEXTURE_2D, ee, 0);
        else if (S.depthTexture.format === Yi) Ne(S) ? d.framebufferTexture2DMultisampleEXT(s1.FRAMEBUFFER, s1.DEPTH_STENCIL_ATTACHMENT, s1.TEXTURE_2D, ee, 0, j) : s1.framebufferTexture2D(s1.FRAMEBUFFER, s1.DEPTH_STENCIL_ATTACHMENT, s1.TEXTURE_2D, ee, 0);
        else throw new Error("Unknown depthTexture format");
    }
    function X(C) {
        let S = n.get(C), B = C.isWebGLCubeRenderTarget === !0;
        if (C.depthTexture && !S.__autoAllocateDepthBuffer) {
            if (B) throw new Error("target.depthTexture not supported in Cube render targets");
            oe(S.__webglFramebuffer, C);
        } else if (B) {
            S.__webglDepthbuffer = [];
            for(let ee = 0; ee < 6; ee++)t.bindFramebuffer(s1.FRAMEBUFFER, S.__webglFramebuffer[ee]), S.__webglDepthbuffer[ee] = s1.createRenderbuffer(), L(S.__webglDepthbuffer[ee], C, !1);
        } else t.bindFramebuffer(s1.FRAMEBUFFER, S.__webglFramebuffer), S.__webglDepthbuffer = s1.createRenderbuffer(), L(S.__webglDepthbuffer, C, !1);
        t.bindFramebuffer(s1.FRAMEBUFFER, null);
    }
    function ie(C, S, B) {
        let ee = n.get(C);
        S !== void 0 && Ce(ee.__webglFramebuffer, C, C.texture, s1.COLOR_ATTACHMENT0, s1.TEXTURE_2D, 0), B !== void 0 && X(C);
    }
    function J(C) {
        let S = C.texture, B = n.get(C), ee = n.get(S);
        C.addEventListener("dispose", Y), C.isWebGLMultipleRenderTargets !== !0 && (ee.__webglTexture === void 0 && (ee.__webglTexture = s1.createTexture()), ee.__version = S.version, a.memory.textures++);
        let j = C.isWebGLCubeRenderTarget === !0, te = C.isWebGLMultipleRenderTargets === !0, Me = y(C) || o;
        if (j) {
            B.__webglFramebuffer = [];
            for(let re = 0; re < 6; re++)if (o && S.mipmaps && S.mipmaps.length > 0) {
                B.__webglFramebuffer[re] = [];
                for(let de = 0; de < S.mipmaps.length; de++)B.__webglFramebuffer[re][de] = s1.createFramebuffer();
            } else B.__webglFramebuffer[re] = s1.createFramebuffer();
        } else {
            if (o && S.mipmaps && S.mipmaps.length > 0) {
                B.__webglFramebuffer = [];
                for(let re = 0; re < S.mipmaps.length; re++)B.__webglFramebuffer[re] = s1.createFramebuffer();
            } else B.__webglFramebuffer = s1.createFramebuffer();
            if (te) if (i.drawBuffers) {
                let re = C.texture;
                for(let de = 0, Le = re.length; de < Le; de++){
                    let Ze = n.get(re[de]);
                    Ze.__webglTexture === void 0 && (Ze.__webglTexture = s1.createTexture(), a.memory.textures++);
                }
            } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
            if (o && C.samples > 0 && Ne(C) === !1) {
                let re = te ? S : [
                    S
                ];
                B.__webglMultisampledFramebuffer = s1.createFramebuffer(), B.__webglColorRenderbuffer = [], t.bindFramebuffer(s1.FRAMEBUFFER, B.__webglMultisampledFramebuffer);
                for(let de = 0; de < re.length; de++){
                    let Le = re[de];
                    B.__webglColorRenderbuffer[de] = s1.createRenderbuffer(), s1.bindRenderbuffer(s1.RENDERBUFFER, B.__webglColorRenderbuffer[de]);
                    let Ze = r.convert(Le.format, Le.colorSpace), se = r.convert(Le.type), $e = I(Le.internalFormat, Ze, se, Le.colorSpace, C.isXRRenderTarget === !0), Oe = ye(C);
                    s1.renderbufferStorageMultisample(s1.RENDERBUFFER, Oe, $e, C.width, C.height), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + de, s1.RENDERBUFFER, B.__webglColorRenderbuffer[de]);
                }
                s1.bindRenderbuffer(s1.RENDERBUFFER, null), C.depthBuffer && (B.__webglDepthRenderbuffer = s1.createRenderbuffer(), L(B.__webglDepthRenderbuffer, C, !0)), t.bindFramebuffer(s1.FRAMEBUFFER, null);
            }
        }
        if (j) {
            t.bindTexture(s1.TEXTURE_CUBE_MAP, ee.__webglTexture), Ee(s1.TEXTURE_CUBE_MAP, S, Me);
            for(let re = 0; re < 6; re++)if (o && S.mipmaps && S.mipmaps.length > 0) for(let de = 0; de < S.mipmaps.length; de++)Ce(B.__webglFramebuffer[re][de], C, S, s1.COLOR_ATTACHMENT0, s1.TEXTURE_CUBE_MAP_POSITIVE_X + re, de);
            else Ce(B.__webglFramebuffer[re], C, S, s1.COLOR_ATTACHMENT0, s1.TEXTURE_CUBE_MAP_POSITIVE_X + re, 0);
            w(S, Me) && R(s1.TEXTURE_CUBE_MAP), t.unbindTexture();
        } else if (te) {
            let re = C.texture;
            for(let de = 0, Le = re.length; de < Le; de++){
                let Ze = re[de], se = n.get(Ze);
                t.bindTexture(s1.TEXTURE_2D, se.__webglTexture), Ee(s1.TEXTURE_2D, Ze, Me), Ce(B.__webglFramebuffer, C, Ze, s1.COLOR_ATTACHMENT0 + de, s1.TEXTURE_2D, 0), w(Ze, Me) && R(s1.TEXTURE_2D);
            }
            t.unbindTexture();
        } else {
            let re = s1.TEXTURE_2D;
            if ((C.isWebGL3DRenderTarget || C.isWebGLArrayRenderTarget) && (o ? re = C.isWebGL3DRenderTarget ? s1.TEXTURE_3D : s1.TEXTURE_2D_ARRAY : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), t.bindTexture(re, ee.__webglTexture), Ee(re, S, Me), o && S.mipmaps && S.mipmaps.length > 0) for(let de = 0; de < S.mipmaps.length; de++)Ce(B.__webglFramebuffer[de], C, S, s1.COLOR_ATTACHMENT0, re, de);
            else Ce(B.__webglFramebuffer, C, S, s1.COLOR_ATTACHMENT0, re, 0);
            w(S, Me) && R(re), t.unbindTexture();
        }
        C.depthBuffer && X(C);
    }
    function Se(C) {
        let S = y(C) || o, B = C.isWebGLMultipleRenderTargets === !0 ? C.texture : [
            C.texture
        ];
        for(let ee = 0, j = B.length; ee < j; ee++){
            let te = B[ee];
            if (w(te, S)) {
                let Me = C.isWebGLCubeRenderTarget ? s1.TEXTURE_CUBE_MAP : s1.TEXTURE_2D, re = n.get(te).__webglTexture;
                t.bindTexture(Me, re), R(Me), t.unbindTexture();
            }
        }
    }
    function me(C) {
        if (o && C.samples > 0 && Ne(C) === !1) {
            let S = C.isWebGLMultipleRenderTargets ? C.texture : [
                C.texture
            ], B = C.width, ee = C.height, j = s1.COLOR_BUFFER_BIT, te = [], Me = C.stencilBuffer ? s1.DEPTH_STENCIL_ATTACHMENT : s1.DEPTH_ATTACHMENT, re = n.get(C), de = C.isWebGLMultipleRenderTargets === !0;
            if (de) for(let Le = 0; Le < S.length; Le++)t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglMultisampledFramebuffer), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.RENDERBUFFER, null), t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglFramebuffer), s1.framebufferTexture2D(s1.DRAW_FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.TEXTURE_2D, null, 0);
            t.bindFramebuffer(s1.READ_FRAMEBUFFER, re.__webglMultisampledFramebuffer), t.bindFramebuffer(s1.DRAW_FRAMEBUFFER, re.__webglFramebuffer);
            for(let Le = 0; Le < S.length; Le++){
                te.push(s1.COLOR_ATTACHMENT0 + Le), C.depthBuffer && te.push(Me);
                let Ze = re.__ignoreDepthValues !== void 0 ? re.__ignoreDepthValues : !1;
                if (Ze === !1 && (C.depthBuffer && (j |= s1.DEPTH_BUFFER_BIT), C.stencilBuffer && (j |= s1.STENCIL_BUFFER_BIT)), de && s1.framebufferRenderbuffer(s1.READ_FRAMEBUFFER, s1.COLOR_ATTACHMENT0, s1.RENDERBUFFER, re.__webglColorRenderbuffer[Le]), Ze === !0 && (s1.invalidateFramebuffer(s1.READ_FRAMEBUFFER, [
                    Me
                ]), s1.invalidateFramebuffer(s1.DRAW_FRAMEBUFFER, [
                    Me
                ])), de) {
                    let se = n.get(S[Le]).__webglTexture;
                    s1.framebufferTexture2D(s1.DRAW_FRAMEBUFFER, s1.COLOR_ATTACHMENT0, s1.TEXTURE_2D, se, 0);
                }
                s1.blitFramebuffer(0, 0, B, ee, 0, 0, B, ee, j, s1.NEAREST), f && s1.invalidateFramebuffer(s1.READ_FRAMEBUFFER, te);
            }
            if (t.bindFramebuffer(s1.READ_FRAMEBUFFER, null), t.bindFramebuffer(s1.DRAW_FRAMEBUFFER, null), de) for(let Le = 0; Le < S.length; Le++){
                t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglMultisampledFramebuffer), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.RENDERBUFFER, re.__webglColorRenderbuffer[Le]);
                let Ze = n.get(S[Le]).__webglTexture;
                t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglFramebuffer), s1.framebufferTexture2D(s1.DRAW_FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.TEXTURE_2D, Ze, 0);
            }
            t.bindFramebuffer(s1.DRAW_FRAMEBUFFER, re.__webglMultisampledFramebuffer);
        }
    }
    function ye(C) {
        return Math.min(u, C.samples);
    }
    function Ne(C) {
        let S = n.get(C);
        return o && C.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && S.__useRenderToTexture !== !1;
    }
    function qe(C) {
        let S = a.render.frame;
        m.get(C) !== S && (m.set(C, S), C.update());
    }
    function rt(C, S) {
        let B = C.colorSpace, ee = C.format, j = C.type;
        return C.isCompressedTexture === !0 || C.isVideoTexture === !0 || C.format === po || B !== Mn && B !== Xt && (Qe.getTransfer(B) === nt ? o === !1 ? e.has("EXT_sRGB") === !0 && ee === Wt ? (C.format = po, C.minFilter = mt, C.generateMipmaps = !1) : S = Xr.sRGBToLinear(S) : (ee !== Wt || j !== On) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", B)), S;
    }
    this.allocateTextureUnit = ne, this.resetTextureUnits = H, this.setTexture2D = K, this.setTexture2DArray = D, this.setTexture3D = G, this.setTextureCube = he, this.rebindTextures = ie, this.setupRenderTarget = J, this.updateRenderTargetMipmap = Se, this.updateMultisampleRenderTarget = me, this.setupDepthRenderbuffer = X, this.setupFrameBufferTexture = Ce, this.useMultisampledRTT = Ne;
}
function V0(s1, e, t) {
    let n = t.isWebGL2;
    function i(r, a = Xt) {
        let o, c = Qe.getTransfer(a);
        if (r === On) return s1.UNSIGNED_BYTE;
        if (r === fd) return s1.UNSIGNED_SHORT_4_4_4_4;
        if (r === pd) return s1.UNSIGNED_SHORT_5_5_5_1;
        if (r === _f) return s1.BYTE;
        if (r === xf) return s1.SHORT;
        if (r === Wc) return s1.UNSIGNED_SHORT;
        if (r === dd) return s1.INT;
        if (r === Ln) return s1.UNSIGNED_INT;
        if (r === xn) return s1.FLOAT;
        if (r === Ts) return n ? s1.HALF_FLOAT : (o = e.get("OES_texture_half_float"), o !== null ? o.HALF_FLOAT_OES : null);
        if (r === vf) return s1.ALPHA;
        if (r === Wt) return s1.RGBA;
        if (r === yf) return s1.LUMINANCE;
        if (r === Mf) return s1.LUMINANCE_ALPHA;
        if (r === si) return s1.DEPTH_COMPONENT;
        if (r === Yi) return s1.DEPTH_STENCIL;
        if (r === po) return o = e.get("EXT_sRGB"), o !== null ? o.SRGB_ALPHA_EXT : null;
        if (r === Sf) return s1.RED;
        if (r === md) return s1.RED_INTEGER;
        if (r === bf) return s1.RG;
        if (r === gd) return s1.RG_INTEGER;
        if (r === _d) return s1.RGBA_INTEGER;
        if (r === wa || r === Aa || r === Ra || r === Ca) if (c === nt) if (o = e.get("WEBGL_compressed_texture_s3tc_srgb"), o !== null) {
            if (r === wa) return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (r === Aa) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (r === Ra) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (r === Ca) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else return null;
        else if (o = e.get("WEBGL_compressed_texture_s3tc"), o !== null) {
            if (r === wa) return o.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (r === Aa) return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (r === Ra) return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (r === Ca) return o.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else return null;
        if (r === ul || r === dl || r === fl || r === pl) if (o = e.get("WEBGL_compressed_texture_pvrtc"), o !== null) {
            if (r === ul) return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (r === dl) return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (r === fl) return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (r === pl) return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else return null;
        if (r === Ef) return o = e.get("WEBGL_compressed_texture_etc1"), o !== null ? o.COMPRESSED_RGB_ETC1_WEBGL : null;
        if (r === ml || r === gl) if (o = e.get("WEBGL_compressed_texture_etc"), o !== null) {
            if (r === ml) return c === nt ? o.COMPRESSED_SRGB8_ETC2 : o.COMPRESSED_RGB8_ETC2;
            if (r === gl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : o.COMPRESSED_RGBA8_ETC2_EAC;
        } else return null;
        if (r === _l || r === xl || r === vl || r === yl || r === Ml || r === Sl || r === bl || r === El || r === Tl || r === wl || r === Al || r === Rl || r === Cl || r === Pl) if (o = e.get("WEBGL_compressed_texture_astc"), o !== null) {
            if (r === _l) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : o.COMPRESSED_RGBA_ASTC_4x4_KHR;
            if (r === xl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : o.COMPRESSED_RGBA_ASTC_5x4_KHR;
            if (r === vl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : o.COMPRESSED_RGBA_ASTC_5x5_KHR;
            if (r === yl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : o.COMPRESSED_RGBA_ASTC_6x5_KHR;
            if (r === Ml) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : o.COMPRESSED_RGBA_ASTC_6x6_KHR;
            if (r === Sl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : o.COMPRESSED_RGBA_ASTC_8x5_KHR;
            if (r === bl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : o.COMPRESSED_RGBA_ASTC_8x6_KHR;
            if (r === El) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : o.COMPRESSED_RGBA_ASTC_8x8_KHR;
            if (r === Tl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : o.COMPRESSED_RGBA_ASTC_10x5_KHR;
            if (r === wl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : o.COMPRESSED_RGBA_ASTC_10x6_KHR;
            if (r === Al) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : o.COMPRESSED_RGBA_ASTC_10x8_KHR;
            if (r === Rl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : o.COMPRESSED_RGBA_ASTC_10x10_KHR;
            if (r === Cl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : o.COMPRESSED_RGBA_ASTC_12x10_KHR;
            if (r === Pl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : o.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else return null;
        if (r === Pa || r === Ll || r === Il) if (o = e.get("EXT_texture_compression_bptc"), o !== null) {
            if (r === Pa) return c === nt ? o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : o.COMPRESSED_RGBA_BPTC_UNORM_EXT;
            if (r === Ll) return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
            if (r === Il) return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
        } else return null;
        if (r === Tf || r === Ul || r === Dl || r === Nl) if (o = e.get("EXT_texture_compression_rgtc"), o !== null) {
            if (r === Pa) return o.COMPRESSED_RED_RGTC1_EXT;
            if (r === Ul) return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;
            if (r === Dl) return o.COMPRESSED_RED_GREEN_RGTC2_EXT;
            if (r === Nl) return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        } else return null;
        return r === ii ? n ? s1.UNSIGNED_INT_24_8 : (o = e.get("WEBGL_depth_texture"), o !== null ? o.UNSIGNED_INT_24_8_WEBGL : null) : s1[r] !== void 0 ? s1[r] : null;
    }
    return {
        convert: i
    };
}
var To = class extends yt {
    constructor(e = []){
        super(), this.isArrayCamera = !0, this.cameras = e;
    }
}, ti = class extends Je {
    constructor(){
        super(), this.isGroup = !0, this.type = "Group";
    }
}, k0 = {
    type: "move"
}, Ss = class {
    constructor(){
        this._targetRay = null, this._grip = null, this._hand = null;
    }
    getHandSpace() {
        return this._hand === null && (this._hand = new ti, this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = {
            pinching: !1
        }), this._hand;
    }
    getTargetRaySpace() {
        return this._targetRay === null && (this._targetRay = new ti, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new A, this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new A), this._targetRay;
    }
    getGripSpace() {
        return this._grip === null && (this._grip = new ti, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new A, this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new A), this._grip;
    }
    dispatchEvent(e) {
        return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
    }
    connect(e) {
        if (e && e.hand) {
            let t = this._hand;
            if (t) for (let n of e.hand.values())this._getHandJoint(t, n);
        }
        return this.dispatchEvent({
            type: "connected",
            data: e
        }), this;
    }
    disconnect(e) {
        return this.dispatchEvent({
            type: "disconnected",
            data: e
        }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
    }
    update(e, t, n) {
        let i = null, r = null, a = null, o = this._targetRay, c = this._grip, l = this._hand;
        if (e && t.session.visibilityState !== "visible-blurred") {
            if (l && e.hand) {
                a = !0;
                for (let _ of e.hand.values()){
                    let g = t.getJointPose(_, n), p = this._getHandJoint(l, _);
                    g !== null && (p.matrix.fromArray(g.transform.matrix), p.matrix.decompose(p.position, p.rotation, p.scale), p.matrixWorldNeedsUpdate = !0, p.jointRadius = g.radius), p.visible = g !== null;
                }
                let h = l.joints["index-finger-tip"], u = l.joints["thumb-tip"], d = h.position.distanceTo(u.position), f = .02, m = .005;
                l.inputState.pinching && d > f + m ? (l.inputState.pinching = !1, this.dispatchEvent({
                    type: "pinchend",
                    handedness: e.handedness,
                    target: this
                })) : !l.inputState.pinching && d <= f - m && (l.inputState.pinching = !0, this.dispatchEvent({
                    type: "pinchstart",
                    handedness: e.handedness,
                    target: this
                }));
            } else c !== null && e.gripSpace && (r = t.getPose(e.gripSpace, n), r !== null && (c.matrix.fromArray(r.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), c.matrixWorldNeedsUpdate = !0, r.linearVelocity ? (c.hasLinearVelocity = !0, c.linearVelocity.copy(r.linearVelocity)) : c.hasLinearVelocity = !1, r.angularVelocity ? (c.hasAngularVelocity = !0, c.angularVelocity.copy(r.angularVelocity)) : c.hasAngularVelocity = !1));
            o !== null && (i = t.getPose(e.targetRaySpace, n), i === null && r !== null && (i = r), i !== null && (o.matrix.fromArray(i.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale), o.matrixWorldNeedsUpdate = !0, i.linearVelocity ? (o.hasLinearVelocity = !0, o.linearVelocity.copy(i.linearVelocity)) : o.hasLinearVelocity = !1, i.angularVelocity ? (o.hasAngularVelocity = !0, o.angularVelocity.copy(i.angularVelocity)) : o.hasAngularVelocity = !1, this.dispatchEvent(k0)));
        }
        return o !== null && (o.visible = i !== null), c !== null && (c.visible = r !== null), l !== null && (l.visible = a !== null), this;
    }
    _getHandJoint(e, t) {
        if (e.joints[t.jointName] === void 0) {
            let n = new ti;
            n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
        }
        return e.joints[t.jointName];
    }
}, wo = class extends St {
    constructor(e, t, n, i, r, a, o, c, l, h){
        if (h = h !== void 0 ? h : si, h !== si && h !== Yi) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        n === void 0 && h === si && (n = Ln), n === void 0 && h === Yi && (n = ii), super(null, i, r, a, o, c, h, n, l), this.isDepthTexture = !0, this.image = {
            width: e,
            height: t
        }, this.magFilter = o !== void 0 ? o : pt, this.minFilter = c !== void 0 ? c : pt, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
    }
    copy(e) {
        return super.copy(e), this.compareFunction = e.compareFunction, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
    }
}, Ao = class extends sn {
    constructor(e, t){
        super();
        let n = this, i = null, r = 1, a = null, o = "local-floor", c = 1, l = null, h = null, u = null, d = null, f = null, m = null, _ = t.getContextAttributes(), g = null, p = null, v = [], x = [], y = new yt;
        y.layers.enable(1), y.viewport = new je;
        let b = new yt;
        b.layers.enable(2), b.viewport = new je;
        let w = [
            y,
            b
        ], R = new To;
        R.layers.enable(1), R.layers.enable(2);
        let I = null, M = null;
        this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(D) {
            let G = v[D];
            return G === void 0 && (G = new Ss, v[D] = G), G.getTargetRaySpace();
        }, this.getControllerGrip = function(D) {
            let G = v[D];
            return G === void 0 && (G = new Ss, v[D] = G), G.getGripSpace();
        }, this.getHand = function(D) {
            let G = v[D];
            return G === void 0 && (G = new Ss, v[D] = G), G.getHandSpace();
        };
        function T(D) {
            let G = x.indexOf(D.inputSource);
            if (G === -1) return;
            let he = v[G];
            he !== void 0 && (he.update(D.inputSource, D.frame, l || a), he.dispatchEvent({
                type: D.type,
                data: D.inputSource
            }));
        }
        function O() {
            i.removeEventListener("select", T), i.removeEventListener("selectstart", T), i.removeEventListener("selectend", T), i.removeEventListener("squeeze", T), i.removeEventListener("squeezestart", T), i.removeEventListener("squeezeend", T), i.removeEventListener("end", O), i.removeEventListener("inputsourceschange", Y);
            for(let D = 0; D < v.length; D++){
                let G = x[D];
                G !== null && (x[D] = null, v[D].disconnect(G));
            }
            I = null, M = null, e.setRenderTarget(g), f = null, d = null, u = null, i = null, p = null, K.stop(), n.isPresenting = !1, n.dispatchEvent({
                type: "sessionend"
            });
        }
        this.setFramebufferScaleFactor = function(D) {
            r = D, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        }, this.setReferenceSpaceType = function(D) {
            o = D, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        }, this.getReferenceSpace = function() {
            return l || a;
        }, this.setReferenceSpace = function(D) {
            l = D;
        }, this.getBaseLayer = function() {
            return d !== null ? d : f;
        }, this.getBinding = function() {
            return u;
        }, this.getFrame = function() {
            return m;
        }, this.getSession = function() {
            return i;
        }, this.setSession = async function(D) {
            if (i = D, i !== null) {
                if (g = e.getRenderTarget(), i.addEventListener("select", T), i.addEventListener("selectstart", T), i.addEventListener("selectend", T), i.addEventListener("squeeze", T), i.addEventListener("squeezestart", T), i.addEventListener("squeezeend", T), i.addEventListener("end", O), i.addEventListener("inputsourceschange", Y), _.xrCompatible !== !0 && await t.makeXRCompatible(), i.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
                    let G = {
                        antialias: i.renderState.layers === void 0 ? _.antialias : !0,
                        alpha: !0,
                        depth: _.depth,
                        stencil: _.stencil,
                        framebufferScaleFactor: r
                    };
                    f = new XRWebGLLayer(i, t, G), i.updateRenderState({
                        baseLayer: f
                    }), p = new qt(f.framebufferWidth, f.framebufferHeight, {
                        format: Wt,
                        type: On,
                        colorSpace: e.outputColorSpace,
                        stencilBuffer: _.stencil
                    });
                } else {
                    let G = null, he = null, fe = null;
                    _.depth && (fe = _.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, G = _.stencil ? Yi : si, he = _.stencil ? ii : Ln);
                    let _e = {
                        colorFormat: t.RGBA8,
                        depthFormat: fe,
                        scaleFactor: r
                    };
                    u = new XRWebGLBinding(i, t), d = u.createProjectionLayer(_e), i.updateRenderState({
                        layers: [
                            d
                        ]
                    }), p = new qt(d.textureWidth, d.textureHeight, {
                        format: Wt,
                        type: On,
                        depthTexture: new wo(d.textureWidth, d.textureHeight, he, void 0, void 0, void 0, void 0, void 0, void 0, G),
                        stencilBuffer: _.stencil,
                        colorSpace: e.outputColorSpace,
                        samples: _.antialias ? 4 : 0
                    });
                    let we = e.properties.get(p);
                    we.__ignoreDepthValues = d.ignoreDepthValues;
                }
                p.isXRRenderTarget = !0, this.setFoveation(c), l = null, a = await i.requestReferenceSpace(o), K.setContext(i), K.start(), n.isPresenting = !0, n.dispatchEvent({
                    type: "sessionstart"
                });
            }
        }, this.getEnvironmentBlendMode = function() {
            if (i !== null) return i.environmentBlendMode;
        };
        function Y(D) {
            for(let G = 0; G < D.removed.length; G++){
                let he = D.removed[G], fe = x.indexOf(he);
                fe >= 0 && (x[fe] = null, v[fe].disconnect(he));
            }
            for(let G = 0; G < D.added.length; G++){
                let he = D.added[G], fe = x.indexOf(he);
                if (fe === -1) {
                    for(let we = 0; we < v.length; we++)if (we >= x.length) {
                        x.push(he), fe = we;
                        break;
                    } else if (x[we] === null) {
                        x[we] = he, fe = we;
                        break;
                    }
                    if (fe === -1) break;
                }
                let _e = v[fe];
                _e && _e.connect(he);
            }
        }
        let $ = new A, U = new A;
        function z(D, G, he) {
            $.setFromMatrixPosition(G.matrixWorld), U.setFromMatrixPosition(he.matrixWorld);
            let fe = $.distanceTo(U), _e = G.projectionMatrix.elements, we = he.projectionMatrix.elements, Ee = _e[14] / (_e[10] - 1), Te = _e[14] / (_e[10] + 1), Ye = (_e[9] + 1) / _e[5], it = (_e[9] - 1) / _e[5], Ce = (_e[8] - 1) / _e[0], L = (we[8] + 1) / we[0], oe = Ee * Ce, X = Ee * L, ie = fe / (-Ce + L), J = ie * -Ce;
            G.matrixWorld.decompose(D.position, D.quaternion, D.scale), D.translateX(J), D.translateZ(ie), D.matrixWorld.compose(D.position, D.quaternion, D.scale), D.matrixWorldInverse.copy(D.matrixWorld).invert();
            let Se = Ee + ie, me = Te + ie, ye = oe - J, Ne = X + (fe - J), qe = Ye * Te / me * Se, rt = it * Te / me * Se;
            D.projectionMatrix.makePerspective(ye, Ne, qe, rt, Se, me), D.projectionMatrixInverse.copy(D.projectionMatrix).invert();
        }
        function q(D, G) {
            G === null ? D.matrixWorld.copy(D.matrix) : D.matrixWorld.multiplyMatrices(G.matrixWorld, D.matrix), D.matrixWorldInverse.copy(D.matrixWorld).invert();
        }
        this.updateCamera = function(D) {
            if (i === null) return;
            R.near = b.near = y.near = D.near, R.far = b.far = y.far = D.far, (I !== R.near || M !== R.far) && (i.updateRenderState({
                depthNear: R.near,
                depthFar: R.far
            }), I = R.near, M = R.far);
            let G = D.parent, he = R.cameras;
            q(R, G);
            for(let fe = 0; fe < he.length; fe++)q(he[fe], G);
            he.length === 2 ? z(R, y, b) : R.projectionMatrix.copy(y.projectionMatrix), H(D, R, G);
        };
        function H(D, G, he) {
            he === null ? D.matrix.copy(G.matrixWorld) : (D.matrix.copy(he.matrixWorld), D.matrix.invert(), D.matrix.multiply(G.matrixWorld)), D.matrix.decompose(D.position, D.quaternion, D.scale), D.updateMatrixWorld(!0), D.projectionMatrix.copy(G.projectionMatrix), D.projectionMatrixInverse.copy(G.projectionMatrixInverse), D.isPerspectiveCamera && (D.fov = Zi * 2 * Math.atan(1 / D.projectionMatrix.elements[5]), D.zoom = 1);
        }
        this.getCamera = function() {
            return R;
        }, this.getFoveation = function() {
            if (!(d === null && f === null)) return c;
        }, this.setFoveation = function(D) {
            c = D, d !== null && (d.fixedFoveation = D), f !== null && f.fixedFoveation !== void 0 && (f.fixedFoveation = D);
        };
        let ne = null;
        function W(D, G) {
            if (h = G.getViewerPose(l || a), m = G, h !== null) {
                let he = h.views;
                f !== null && (e.setRenderTargetFramebuffer(p, f.framebuffer), e.setRenderTarget(p));
                let fe = !1;
                he.length !== R.cameras.length && (R.cameras.length = 0, fe = !0);
                for(let _e = 0; _e < he.length; _e++){
                    let we = he[_e], Ee = null;
                    if (f !== null) Ee = f.getViewport(we);
                    else {
                        let Ye = u.getViewSubImage(d, we);
                        Ee = Ye.viewport, _e === 0 && (e.setRenderTargetTextures(p, Ye.colorTexture, d.ignoreDepthValues ? void 0 : Ye.depthStencilTexture), e.setRenderTarget(p));
                    }
                    let Te = w[_e];
                    Te === void 0 && (Te = new yt, Te.layers.enable(_e), Te.viewport = new je, w[_e] = Te), Te.matrix.fromArray(we.transform.matrix), Te.matrix.decompose(Te.position, Te.quaternion, Te.scale), Te.projectionMatrix.fromArray(we.projectionMatrix), Te.projectionMatrixInverse.copy(Te.projectionMatrix).invert(), Te.viewport.set(Ee.x, Ee.y, Ee.width, Ee.height), _e === 0 && (R.matrix.copy(Te.matrix), R.matrix.decompose(R.position, R.quaternion, R.scale)), fe === !0 && R.cameras.push(Te);
                }
            }
            for(let he = 0; he < v.length; he++){
                let fe = x[he], _e = v[he];
                fe !== null && _e !== void 0 && _e.update(fe, G, l || a);
            }
            ne && ne(D, G), G.detectedPlanes && n.dispatchEvent({
                type: "planesdetected",
                data: G
            }), m = null;
        }
        let K = new Ed;
        K.setAnimationLoop(W), this.setAnimationLoop = function(D) {
            ne = D;
        }, this.dispose = function() {};
    }
};
function H0(s1, e) {
    function t(g, p) {
        g.matrixAutoUpdate === !0 && g.updateMatrix(), p.value.copy(g.matrix);
    }
    function n(g, p) {
        p.color.getRGB(g.fogColor.value, bd(s1)), p.isFog ? (g.fogNear.value = p.near, g.fogFar.value = p.far) : p.isFogExp2 && (g.fogDensity.value = p.density);
    }
    function i(g, p, v, x, y) {
        p.isMeshBasicMaterial || p.isMeshLambertMaterial ? r(g, p) : p.isMeshToonMaterial ? (r(g, p), u(g, p)) : p.isMeshPhongMaterial ? (r(g, p), h(g, p)) : p.isMeshStandardMaterial ? (r(g, p), d(g, p), p.isMeshPhysicalMaterial && f(g, p, y)) : p.isMeshMatcapMaterial ? (r(g, p), m(g, p)) : p.isMeshDepthMaterial ? r(g, p) : p.isMeshDistanceMaterial ? (r(g, p), _(g, p)) : p.isMeshNormalMaterial ? r(g, p) : p.isLineBasicMaterial ? (a(g, p), p.isLineDashedMaterial && o(g, p)) : p.isPointsMaterial ? c(g, p, v, x) : p.isSpriteMaterial ? l(g, p) : p.isShadowMaterial ? (g.color.value.copy(p.color), g.opacity.value = p.opacity) : p.isShaderMaterial && (p.uniformsNeedUpdate = !1);
    }
    function r(g, p) {
        g.opacity.value = p.opacity, p.color && g.diffuse.value.copy(p.color), p.emissive && g.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity), p.map && (g.map.value = p.map, t(p.map, g.mapTransform)), p.alphaMap && (g.alphaMap.value = p.alphaMap, t(p.alphaMap, g.alphaMapTransform)), p.bumpMap && (g.bumpMap.value = p.bumpMap, t(p.bumpMap, g.bumpMapTransform), g.bumpScale.value = p.bumpScale, p.side === Ft && (g.bumpScale.value *= -1)), p.normalMap && (g.normalMap.value = p.normalMap, t(p.normalMap, g.normalMapTransform), g.normalScale.value.copy(p.normalScale), p.side === Ft && g.normalScale.value.negate()), p.displacementMap && (g.displacementMap.value = p.displacementMap, t(p.displacementMap, g.displacementMapTransform), g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias), p.emissiveMap && (g.emissiveMap.value = p.emissiveMap, t(p.emissiveMap, g.emissiveMapTransform)), p.specularMap && (g.specularMap.value = p.specularMap, t(p.specularMap, g.specularMapTransform)), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
        let v = e.get(p).envMap;
        if (v && (g.envMap.value = v, g.flipEnvMap.value = v.isCubeTexture && v.isRenderTargetTexture === !1 ? -1 : 1, g.reflectivity.value = p.reflectivity, g.ior.value = p.ior, g.refractionRatio.value = p.refractionRatio), p.lightMap) {
            g.lightMap.value = p.lightMap;
            let x = s1._useLegacyLights === !0 ? Math.PI : 1;
            g.lightMapIntensity.value = p.lightMapIntensity * x, t(p.lightMap, g.lightMapTransform);
        }
        p.aoMap && (g.aoMap.value = p.aoMap, g.aoMapIntensity.value = p.aoMapIntensity, t(p.aoMap, g.aoMapTransform));
    }
    function a(g, p) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, p.map && (g.map.value = p.map, t(p.map, g.mapTransform));
    }
    function o(g, p) {
        g.dashSize.value = p.dashSize, g.totalSize.value = p.dashSize + p.gapSize, g.scale.value = p.scale;
    }
    function c(g, p, v, x) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, g.size.value = p.size * v, g.scale.value = x * .5, p.map && (g.map.value = p.map, t(p.map, g.uvTransform)), p.alphaMap && (g.alphaMap.value = p.alphaMap, t(p.alphaMap, g.alphaMapTransform)), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
    }
    function l(g, p) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, g.rotation.value = p.rotation, p.map && (g.map.value = p.map, t(p.map, g.mapTransform)), p.alphaMap && (g.alphaMap.value = p.alphaMap, t(p.alphaMap, g.alphaMapTransform)), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
    }
    function h(g, p) {
        g.specular.value.copy(p.specular), g.shininess.value = Math.max(p.shininess, 1e-4);
    }
    function u(g, p) {
        p.gradientMap && (g.gradientMap.value = p.gradientMap);
    }
    function d(g, p) {
        g.metalness.value = p.metalness, p.metalnessMap && (g.metalnessMap.value = p.metalnessMap, t(p.metalnessMap, g.metalnessMapTransform)), g.roughness.value = p.roughness, p.roughnessMap && (g.roughnessMap.value = p.roughnessMap, t(p.roughnessMap, g.roughnessMapTransform)), e.get(p).envMap && (g.envMapIntensity.value = p.envMapIntensity);
    }
    function f(g, p, v) {
        g.ior.value = p.ior, p.sheen > 0 && (g.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen), g.sheenRoughness.value = p.sheenRoughness, p.sheenColorMap && (g.sheenColorMap.value = p.sheenColorMap, t(p.sheenColorMap, g.sheenColorMapTransform)), p.sheenRoughnessMap && (g.sheenRoughnessMap.value = p.sheenRoughnessMap, t(p.sheenRoughnessMap, g.sheenRoughnessMapTransform))), p.clearcoat > 0 && (g.clearcoat.value = p.clearcoat, g.clearcoatRoughness.value = p.clearcoatRoughness, p.clearcoatMap && (g.clearcoatMap.value = p.clearcoatMap, t(p.clearcoatMap, g.clearcoatMapTransform)), p.clearcoatRoughnessMap && (g.clearcoatRoughnessMap.value = p.clearcoatRoughnessMap, t(p.clearcoatRoughnessMap, g.clearcoatRoughnessMapTransform)), p.clearcoatNormalMap && (g.clearcoatNormalMap.value = p.clearcoatNormalMap, t(p.clearcoatNormalMap, g.clearcoatNormalMapTransform), g.clearcoatNormalScale.value.copy(p.clearcoatNormalScale), p.side === Ft && g.clearcoatNormalScale.value.negate())), p.iridescence > 0 && (g.iridescence.value = p.iridescence, g.iridescenceIOR.value = p.iridescenceIOR, g.iridescenceThicknessMinimum.value = p.iridescenceThicknessRange[0], g.iridescenceThicknessMaximum.value = p.iridescenceThicknessRange[1], p.iridescenceMap && (g.iridescenceMap.value = p.iridescenceMap, t(p.iridescenceMap, g.iridescenceMapTransform)), p.iridescenceThicknessMap && (g.iridescenceThicknessMap.value = p.iridescenceThicknessMap, t(p.iridescenceThicknessMap, g.iridescenceThicknessMapTransform))), p.transmission > 0 && (g.transmission.value = p.transmission, g.transmissionSamplerMap.value = v.texture, g.transmissionSamplerSize.value.set(v.width, v.height), p.transmissionMap && (g.transmissionMap.value = p.transmissionMap, t(p.transmissionMap, g.transmissionMapTransform)), g.thickness.value = p.thickness, p.thicknessMap && (g.thicknessMap.value = p.thicknessMap, t(p.thicknessMap, g.thicknessMapTransform)), g.attenuationDistance.value = p.attenuationDistance, g.attenuationColor.value.copy(p.attenuationColor)), p.anisotropy > 0 && (g.anisotropyVector.value.set(p.anisotropy * Math.cos(p.anisotropyRotation), p.anisotropy * Math.sin(p.anisotropyRotation)), p.anisotropyMap && (g.anisotropyMap.value = p.anisotropyMap, t(p.anisotropyMap, g.anisotropyMapTransform))), g.specularIntensity.value = p.specularIntensity, g.specularColor.value.copy(p.specularColor), p.specularColorMap && (g.specularColorMap.value = p.specularColorMap, t(p.specularColorMap, g.specularColorMapTransform)), p.specularIntensityMap && (g.specularIntensityMap.value = p.specularIntensityMap, t(p.specularIntensityMap, g.specularIntensityMapTransform));
    }
    function m(g, p) {
        p.matcap && (g.matcap.value = p.matcap);
    }
    function _(g, p) {
        let v = e.get(p).light;
        g.referencePosition.value.setFromMatrixPosition(v.matrixWorld), g.nearDistance.value = v.shadow.camera.near, g.farDistance.value = v.shadow.camera.far;
    }
    return {
        refreshFogUniforms: n,
        refreshMaterialUniforms: i
    };
}
function G0(s1, e, t, n) {
    let i = {}, r = {}, a = [], o = t.isWebGL2 ? s1.getParameter(s1.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
    function c(v, x) {
        let y = x.program;
        n.uniformBlockBinding(v, y);
    }
    function l(v, x) {
        let y = i[v.id];
        y === void 0 && (m(v), y = h(v), i[v.id] = y, v.addEventListener("dispose", g));
        let b = x.program;
        n.updateUBOMapping(v, b);
        let w = e.render.frame;
        r[v.id] !== w && (d(v), r[v.id] = w);
    }
    function h(v) {
        let x = u();
        v.__bindingPointIndex = x;
        let y = s1.createBuffer(), b = v.__size, w = v.usage;
        return s1.bindBuffer(s1.UNIFORM_BUFFER, y), s1.bufferData(s1.UNIFORM_BUFFER, b, w), s1.bindBuffer(s1.UNIFORM_BUFFER, null), s1.bindBufferBase(s1.UNIFORM_BUFFER, x, y), y;
    }
    function u() {
        for(let v = 0; v < o; v++)if (a.indexOf(v) === -1) return a.push(v), v;
        return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
    }
    function d(v) {
        let x = i[v.id], y = v.uniforms, b = v.__cache;
        s1.bindBuffer(s1.UNIFORM_BUFFER, x);
        for(let w = 0, R = y.length; w < R; w++){
            let I = y[w];
            if (f(I, w, b) === !0) {
                let M = I.__offset, T = Array.isArray(I.value) ? I.value : [
                    I.value
                ], O = 0;
                for(let Y = 0; Y < T.length; Y++){
                    let $ = T[Y], U = _($);
                    typeof $ == "number" ? (I.__data[0] = $, s1.bufferSubData(s1.UNIFORM_BUFFER, M + O, I.__data)) : $.isMatrix3 ? (I.__data[0] = $.elements[0], I.__data[1] = $.elements[1], I.__data[2] = $.elements[2], I.__data[3] = $.elements[0], I.__data[4] = $.elements[3], I.__data[5] = $.elements[4], I.__data[6] = $.elements[5], I.__data[7] = $.elements[0], I.__data[8] = $.elements[6], I.__data[9] = $.elements[7], I.__data[10] = $.elements[8], I.__data[11] = $.elements[0]) : ($.toArray(I.__data, O), O += U.storage / Float32Array.BYTES_PER_ELEMENT);
                }
                s1.bufferSubData(s1.UNIFORM_BUFFER, M, I.__data);
            }
        }
        s1.bindBuffer(s1.UNIFORM_BUFFER, null);
    }
    function f(v, x, y) {
        let b = v.value;
        if (y[x] === void 0) {
            if (typeof b == "number") y[x] = b;
            else {
                let w = Array.isArray(b) ? b : [
                    b
                ], R = [];
                for(let I = 0; I < w.length; I++)R.push(w[I].clone());
                y[x] = R;
            }
            return !0;
        } else if (typeof b == "number") {
            if (y[x] !== b) return y[x] = b, !0;
        } else {
            let w = Array.isArray(y[x]) ? y[x] : [
                y[x]
            ], R = Array.isArray(b) ? b : [
                b
            ];
            for(let I = 0; I < w.length; I++){
                let M = w[I];
                if (M.equals(R[I]) === !1) return M.copy(R[I]), !0;
            }
        }
        return !1;
    }
    function m(v) {
        let x = v.uniforms, y = 0, b = 16, w = 0;
        for(let R = 0, I = x.length; R < I; R++){
            let M = x[R], T = {
                boundary: 0,
                storage: 0
            }, O = Array.isArray(M.value) ? M.value : [
                M.value
            ];
            for(let Y = 0, $ = O.length; Y < $; Y++){
                let U = O[Y], z = _(U);
                T.boundary += z.boundary, T.storage += z.storage;
            }
            if (M.__data = new Float32Array(T.storage / Float32Array.BYTES_PER_ELEMENT), M.__offset = y, R > 0) {
                w = y % b;
                let Y = b - w;
                w !== 0 && Y - T.boundary < 0 && (y += b - w, M.__offset = y);
            }
            y += T.storage;
        }
        return w = y % b, w > 0 && (y += b - w), v.__size = y, v.__cache = {}, this;
    }
    function _(v) {
        let x = {
            boundary: 0,
            storage: 0
        };
        return typeof v == "number" ? (x.boundary = 4, x.storage = 4) : v.isVector2 ? (x.boundary = 8, x.storage = 8) : v.isVector3 || v.isColor ? (x.boundary = 16, x.storage = 12) : v.isVector4 ? (x.boundary = 16, x.storage = 16) : v.isMatrix3 ? (x.boundary = 48, x.storage = 48) : v.isMatrix4 ? (x.boundary = 64, x.storage = 64) : v.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", v), x;
    }
    function g(v) {
        let x = v.target;
        x.removeEventListener("dispose", g);
        let y = a.indexOf(x.__bindingPointIndex);
        a.splice(y, 1), s1.deleteBuffer(i[x.id]), delete i[x.id], delete r[x.id];
    }
    function p() {
        for(let v in i)s1.deleteBuffer(i[v]);
        a = [], i = {}, r = {};
    }
    return {
        bind: c,
        update: l,
        dispose: p
    };
}
var Ro = class {
    constructor(e = {}){
        let { canvas: t = tp() , context: n = null , depth: i = !0 , stencil: r = !0 , alpha: a = !1 , antialias: o = !1 , premultipliedAlpha: c = !0 , preserveDrawingBuffer: l = !1 , powerPreference: h = "default" , failIfMajorPerformanceCaveat: u = !1  } = e;
        this.isWebGLRenderer = !0;
        let d;
        n !== null ? d = n.getContextAttributes().alpha : d = a;
        let f = new Uint32Array(4), m = new Int32Array(4), _ = null, g = null, p = [], v = [];
        this.domElement = t, this.debug = {
            checkShaderErrors: !0,
            onShaderError: null
        }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = vt, this._useLegacyLights = !1, this.toneMapping = Nn, this.toneMappingExposure = 1;
        let x = this, y = !1, b = 0, w = 0, R = null, I = -1, M = null, T = new je, O = new je, Y = null, $ = new pe(0), U = 0, z = t.width, q = t.height, H = 1, ne = null, W = null, K = new je(0, 0, z, q), D = new je(0, 0, z, q), G = !1, he = new Ps, fe = !1, _e = !1, we = null, Ee = new ze, Te = new Z, Ye = new A, it = {
            background: null,
            fog: null,
            environment: null,
            overrideMaterial: null,
            isScene: !0
        };
        function Ce() {
            return R === null ? H : 1;
        }
        let L = n;
        function oe(E, N) {
            for(let V = 0; V < E.length; V++){
                let F = E[V], k = t.getContext(F, N);
                if (k !== null) return k;
            }
            return null;
        }
        try {
            let E = {
                alpha: !0,
                depth: i,
                stencil: r,
                antialias: o,
                premultipliedAlpha: c,
                preserveDrawingBuffer: l,
                powerPreference: h,
                failIfMajorPerformanceCaveat: u
            };
            if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Hc}`), t.addEventListener("webglcontextlost", ce, !1), t.addEventListener("webglcontextrestored", ae, !1), t.addEventListener("webglcontextcreationerror", ge, !1), L === null) {
                let N = [
                    "webgl2",
                    "webgl",
                    "experimental-webgl"
                ];
                if (x.isWebGL1Renderer === !0 && N.shift(), L = oe(N, E), L === null) throw oe(N) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            }
            typeof WebGLRenderingContext < "u" && L instanceof WebGLRenderingContext && console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."), L.getShaderPrecisionFormat === void 0 && (L.getShaderPrecisionFormat = function() {
                return {
                    rangeMin: 1,
                    rangeMax: 1,
                    precision: 1
                };
            });
        } catch (E) {
            throw console.error("THREE.WebGLRenderer: " + E.message), E;
        }
        let X, ie, J, Se, me, ye, Ne, qe, rt, C, S, B, ee, j, te, Me, re, de, Le, Ze, se, $e, Oe, Ie;
        function Re() {
            X = new h_(L), ie = new s_(L, X, e), X.init(ie), $e = new V0(L, X, ie), J = new B0(L, X, ie), Se = new f_(L), me = new w0, ye = new z0(L, X, J, me, ie, $e, Se), Ne = new a_(x), qe = new l_(x), rt = new bp(L, ie), Oe = new n_(L, X, rt, ie), C = new u_(L, rt, Se, Oe), S = new __(L, C, rt, Se), Le = new g_(L, ie, ye), Me = new r_(me), B = new T0(x, Ne, qe, X, ie, Oe, Me), ee = new H0(x, me), j = new R0, te = new D0(X, ie), de = new t_(x, Ne, qe, J, S, d, c), re = new F0(x, S, ie), Ie = new G0(L, Se, ie, J), Ze = new i_(L, X, Se, ie), se = new d_(L, X, Se, ie), Se.programs = B.programs, x.capabilities = ie, x.extensions = X, x.properties = me, x.renderLists = j, x.shadowMap = re, x.state = J, x.info = Se;
        }
        Re();
        let P = new Ao(x, L);
        this.xr = P, this.getContext = function() {
            return L;
        }, this.getContextAttributes = function() {
            return L.getContextAttributes();
        }, this.forceContextLoss = function() {
            let E = X.get("WEBGL_lose_context");
            E && E.loseContext();
        }, this.forceContextRestore = function() {
            let E = X.get("WEBGL_lose_context");
            E && E.restoreContext();
        }, this.getPixelRatio = function() {
            return H;
        }, this.setPixelRatio = function(E) {
            E !== void 0 && (H = E, this.setSize(z, q, !1));
        }, this.getSize = function(E) {
            return E.set(z, q);
        }, this.setSize = function(E, N, V = !0) {
            if (P.isPresenting) {
                console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
                return;
            }
            z = E, q = N, t.width = Math.floor(E * H), t.height = Math.floor(N * H), V === !0 && (t.style.width = E + "px", t.style.height = N + "px"), this.setViewport(0, 0, E, N);
        }, this.getDrawingBufferSize = function(E) {
            return E.set(z * H, q * H).floor();
        }, this.setDrawingBufferSize = function(E, N, V) {
            z = E, q = N, H = V, t.width = Math.floor(E * V), t.height = Math.floor(N * V), this.setViewport(0, 0, E, N);
        }, this.getCurrentViewport = function(E) {
            return E.copy(T);
        }, this.getViewport = function(E) {
            return E.copy(K);
        }, this.setViewport = function(E, N, V, F) {
            E.isVector4 ? K.set(E.x, E.y, E.z, E.w) : K.set(E, N, V, F), J.viewport(T.copy(K).multiplyScalar(H).floor());
        }, this.getScissor = function(E) {
            return E.copy(D);
        }, this.setScissor = function(E, N, V, F) {
            E.isVector4 ? D.set(E.x, E.y, E.z, E.w) : D.set(E, N, V, F), J.scissor(O.copy(D).multiplyScalar(H).floor());
        }, this.getScissorTest = function() {
            return G;
        }, this.setScissorTest = function(E) {
            J.setScissorTest(G = E);
        }, this.setOpaqueSort = function(E) {
            ne = E;
        }, this.setTransparentSort = function(E) {
            W = E;
        }, this.getClearColor = function(E) {
            return E.copy(de.getClearColor());
        }, this.setClearColor = function() {
            de.setClearColor.apply(de, arguments);
        }, this.getClearAlpha = function() {
            return de.getClearAlpha();
        }, this.setClearAlpha = function() {
            de.setClearAlpha.apply(de, arguments);
        }, this.clear = function(E = !0, N = !0, V = !0) {
            let F = 0;
            if (E) {
                let k = !1;
                if (R !== null) {
                    let xe = R.texture.format;
                    k = xe === _d || xe === gd || xe === md;
                }
                if (k) {
                    let xe = R.texture.type, Ae = xe === On || xe === Ln || xe === Wc || xe === ii || xe === fd || xe === pd, Ue = de.getClearColor(), De = de.getClearAlpha(), We = Ue.r, Pe = Ue.g, Ve = Ue.b;
                    Ae ? (f[0] = We, f[1] = Pe, f[2] = Ve, f[3] = De, L.clearBufferuiv(L.COLOR, 0, f)) : (m[0] = We, m[1] = Pe, m[2] = Ve, m[3] = De, L.clearBufferiv(L.COLOR, 0, m));
                } else F |= L.COLOR_BUFFER_BIT;
            }
            N && (F |= L.DEPTH_BUFFER_BIT), V && (F |= L.STENCIL_BUFFER_BIT), L.clear(F);
        }, this.clearColor = function() {
            this.clear(!0, !1, !1);
        }, this.clearDepth = function() {
            this.clear(!1, !0, !1);
        }, this.clearStencil = function() {
            this.clear(!1, !1, !0);
        }, this.dispose = function() {
            t.removeEventListener("webglcontextlost", ce, !1), t.removeEventListener("webglcontextrestored", ae, !1), t.removeEventListener("webglcontextcreationerror", ge, !1), j.dispose(), te.dispose(), me.dispose(), Ne.dispose(), qe.dispose(), S.dispose(), Oe.dispose(), Ie.dispose(), B.dispose(), P.dispose(), P.removeEventListener("sessionstart", tt), P.removeEventListener("sessionend", tn), we && (we.dispose(), we = null), Rt.stop();
        };
        function ce(E) {
            E.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), y = !0;
        }
        function ae() {
            console.log("THREE.WebGLRenderer: Context Restored."), y = !1;
            let E = Se.autoReset, N = re.enabled, V = re.autoUpdate, F = re.needsUpdate, k = re.type;
            Re(), Se.autoReset = E, re.enabled = N, re.autoUpdate = V, re.needsUpdate = F, re.type = k;
        }
        function ge(E) {
            console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", E.statusMessage);
        }
        function ue(E) {
            let N = E.target;
            N.removeEventListener("dispose", ue), Q(N);
        }
        function Q(E) {
            be(E), me.remove(E);
        }
        function be(E) {
            let N = me.get(E).programs;
            N !== void 0 && (N.forEach(function(V) {
                B.releaseProgram(V);
            }), E.isShaderMaterial && B.releaseShaderCache(E));
        }
        this.renderBufferDirect = function(E, N, V, F, k, xe) {
            N === null && (N = it);
            let Ae = k.isMesh && k.matrixWorld.determinant() < 0, Ue = Fd(E, N, V, F, k);
            J.setMaterial(F, Ae);
            let De = V.index, We = 1;
            if (F.wireframe === !0) {
                if (De = C.getWireframeAttribute(V), De === void 0) return;
                We = 2;
            }
            let Pe = V.drawRange, Ve = V.attributes.position, at = Pe.start * We, lt = (Pe.start + Pe.count) * We;
            xe !== null && (at = Math.max(at, xe.start * We), lt = Math.min(lt, (xe.start + xe.count) * We)), De !== null ? (at = Math.max(at, 0), lt = Math.min(lt, De.count)) : Ve != null && (at = Math.max(at, 0), lt = Math.min(lt, Ve.count));
            let Ht = lt - at;
            if (Ht < 0 || Ht === 1 / 0) return;
            Oe.setup(k, F, Ue, V, De);
            let an, ut = Ze;
            if (De !== null && (an = rt.get(De), ut = se, ut.setIndex(an)), k.isMesh) F.wireframe === !0 ? (J.setLineWidth(F.wireframeLinewidth * Ce()), ut.setMode(L.LINES)) : ut.setMode(L.TRIANGLES);
            else if (k.isLine) {
                let Xe = F.linewidth;
                Xe === void 0 && (Xe = 1), J.setLineWidth(Xe * Ce()), k.isLineSegments ? ut.setMode(L.LINES) : k.isLineLoop ? ut.setMode(L.LINE_LOOP) : ut.setMode(L.LINE_STRIP);
            } else k.isPoints ? ut.setMode(L.POINTS) : k.isSprite && ut.setMode(L.TRIANGLES);
            if (k.isInstancedMesh) ut.renderInstances(at, Ht, k.count);
            else if (V.isInstancedBufferGeometry) {
                let Xe = V._maxInstanceCount !== void 0 ? V._maxInstanceCount : 1 / 0, Sa = Math.min(V.instanceCount, Xe);
                ut.renderInstances(at, Ht, Sa);
            } else ut.render(at, Ht);
        }, this.compile = function(E, N) {
            function V(F, k, xe) {
                F.transparent === !0 && F.side === gn && F.forceSinglePass === !1 ? (F.side = Ft, F.needsUpdate = !0, Hs(F, k, xe), F.side = Bn, F.needsUpdate = !0, Hs(F, k, xe), F.side = gn) : Hs(F, k, xe);
            }
            g = te.get(E), g.init(), v.push(g), E.traverseVisible(function(F) {
                F.isLight && F.layers.test(N.layers) && (g.pushLight(F), F.castShadow && g.pushShadow(F));
            }), g.setupLights(x._useLegacyLights), E.traverse(function(F) {
                let k = F.material;
                if (k) if (Array.isArray(k)) for(let xe = 0; xe < k.length; xe++){
                    let Ae = k[xe];
                    V(Ae, E, F);
                }
                else V(k, E, F);
            }), v.pop(), g = null;
        };
        let Fe = null;
        function At(E) {
            Fe && Fe(E);
        }
        function tt() {
            Rt.stop();
        }
        function tn() {
            Rt.start();
        }
        let Rt = new Ed;
        Rt.setAnimationLoop(At), typeof self < "u" && Rt.setContext(self), this.setAnimationLoop = function(E) {
            Fe = E, P.setAnimationLoop(E), E === null ? Rt.stop() : Rt.start();
        }, P.addEventListener("sessionstart", tt), P.addEventListener("sessionend", tn), this.render = function(E, N) {
            if (N !== void 0 && N.isCamera !== !0) {
                console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                return;
            }
            if (y === !0) return;
            E.matrixWorldAutoUpdate === !0 && E.updateMatrixWorld(), N.parent === null && N.matrixWorldAutoUpdate === !0 && N.updateMatrixWorld(), P.enabled === !0 && P.isPresenting === !0 && (P.cameraAutoUpdate === !0 && P.updateCamera(N), N = P.getCamera()), E.isScene === !0 && E.onBeforeRender(x, E, N, R), g = te.get(E, v.length), g.init(), v.push(g), Ee.multiplyMatrices(N.projectionMatrix, N.matrixWorldInverse), he.setFromProjectionMatrix(Ee), _e = this.localClippingEnabled, fe = Me.init(this.clippingPlanes, _e), _ = j.get(E, p.length), _.init(), p.push(_), jc(E, N, 0, x.sortObjects), _.finish(), x.sortObjects === !0 && _.sort(ne, W), this.info.render.frame++, fe === !0 && Me.beginShadows();
            let V = g.state.shadowsArray;
            if (re.render(V, E, N), fe === !0 && Me.endShadows(), this.info.autoReset === !0 && this.info.reset(), de.render(_, E), g.setupLights(x._useLegacyLights), N.isArrayCamera) {
                let F = N.cameras;
                for(let k = 0, xe = F.length; k < xe; k++){
                    let Ae = F[k];
                    el(_, E, Ae, Ae.viewport);
                }
            } else el(_, E, N);
            R !== null && (ye.updateMultisampleRenderTarget(R), ye.updateRenderTargetMipmap(R)), E.isScene === !0 && E.onAfterRender(x, E, N), Oe.resetDefaultState(), I = -1, M = null, v.pop(), v.length > 0 ? g = v[v.length - 1] : g = null, p.pop(), p.length > 0 ? _ = p[p.length - 1] : _ = null;
        };
        function jc(E, N, V, F) {
            if (E.visible === !1) return;
            if (E.layers.test(N.layers)) {
                if (E.isGroup) V = E.renderOrder;
                else if (E.isLOD) E.autoUpdate === !0 && E.update(N);
                else if (E.isLight) g.pushLight(E), E.castShadow && g.pushShadow(E);
                else if (E.isSprite) {
                    if (!E.frustumCulled || he.intersectsSprite(E)) {
                        F && Ye.setFromMatrixPosition(E.matrixWorld).applyMatrix4(Ee);
                        let Ae = S.update(E), Ue = E.material;
                        Ue.visible && _.push(E, Ae, Ue, V, Ye.z, null);
                    }
                } else if ((E.isMesh || E.isLine || E.isPoints) && (!E.frustumCulled || he.intersectsObject(E))) {
                    let Ae = S.update(E), Ue = E.material;
                    if (F && (E.boundingSphere !== void 0 ? (E.boundingSphere === null && E.computeBoundingSphere(), Ye.copy(E.boundingSphere.center)) : (Ae.boundingSphere === null && Ae.computeBoundingSphere(), Ye.copy(Ae.boundingSphere.center)), Ye.applyMatrix4(E.matrixWorld).applyMatrix4(Ee)), Array.isArray(Ue)) {
                        let De = Ae.groups;
                        for(let We = 0, Pe = De.length; We < Pe; We++){
                            let Ve = De[We], at = Ue[Ve.materialIndex];
                            at && at.visible && _.push(E, Ae, at, V, Ye.z, Ve);
                        }
                    } else Ue.visible && _.push(E, Ae, Ue, V, Ye.z, null);
                }
            }
            let xe = E.children;
            for(let Ae = 0, Ue = xe.length; Ae < Ue; Ae++)jc(xe[Ae], N, V, F);
        }
        function el(E, N, V, F) {
            let k = E.opaque, xe = E.transmissive, Ae = E.transparent;
            g.setupLightsView(V), fe === !0 && Me.setGlobalState(x.clippingPlanes, V), xe.length > 0 && Od(k, xe, N, V), F && J.viewport(T.copy(F)), k.length > 0 && ks(k, N, V), xe.length > 0 && ks(xe, N, V), Ae.length > 0 && ks(Ae, N, V), J.buffers.depth.setTest(!0), J.buffers.depth.setMask(!0), J.buffers.color.setMask(!0), J.setPolygonOffset(!1);
        }
        function Od(E, N, V, F) {
            let k = ie.isWebGL2;
            we === null && (we = new qt(1, 1, {
                generateMipmaps: !0,
                type: X.has("EXT_color_buffer_half_float") ? Ts : On,
                minFilter: li,
                samples: k ? 4 : 0
            })), x.getDrawingBufferSize(Te), k ? we.setSize(Te.x, Te.y) : we.setSize(Wr(Te.x), Wr(Te.y));
            let xe = x.getRenderTarget();
            x.setRenderTarget(we), x.getClearColor($), U = x.getClearAlpha(), U < 1 && x.setClearColor(16777215, .5), x.clear();
            let Ae = x.toneMapping;
            x.toneMapping = Nn, ks(E, V, F), ye.updateMultisampleRenderTarget(we), ye.updateRenderTargetMipmap(we);
            let Ue = !1;
            for(let De = 0, We = N.length; De < We; De++){
                let Pe = N[De], Ve = Pe.object, at = Pe.geometry, lt = Pe.material, Ht = Pe.group;
                if (lt.side === gn && Ve.layers.test(F.layers)) {
                    let an = lt.side;
                    lt.side = Ft, lt.needsUpdate = !0, tl(Ve, V, F, at, lt, Ht), lt.side = an, lt.needsUpdate = !0, Ue = !0;
                }
            }
            Ue === !0 && (ye.updateMultisampleRenderTarget(we), ye.updateRenderTargetMipmap(we)), x.setRenderTarget(xe), x.setClearColor($, U), x.toneMapping = Ae;
        }
        function ks(E, N, V) {
            let F = N.isScene === !0 ? N.overrideMaterial : null;
            for(let k = 0, xe = E.length; k < xe; k++){
                let Ae = E[k], Ue = Ae.object, De = Ae.geometry, We = F === null ? Ae.material : F, Pe = Ae.group;
                Ue.layers.test(V.layers) && tl(Ue, N, V, De, We, Pe);
            }
        }
        function tl(E, N, V, F, k, xe) {
            E.onBeforeRender(x, N, V, F, k, xe), E.modelViewMatrix.multiplyMatrices(V.matrixWorldInverse, E.matrixWorld), E.normalMatrix.getNormalMatrix(E.modelViewMatrix), k.onBeforeRender(x, N, V, F, E, xe), k.transparent === !0 && k.side === gn && k.forceSinglePass === !1 ? (k.side = Ft, k.needsUpdate = !0, x.renderBufferDirect(V, N, F, k, E, xe), k.side = Bn, k.needsUpdate = !0, x.renderBufferDirect(V, N, F, k, E, xe), k.side = gn) : x.renderBufferDirect(V, N, F, k, E, xe), E.onAfterRender(x, N, V, F, k, xe);
        }
        function Hs(E, N, V) {
            N.isScene !== !0 && (N = it);
            let F = me.get(E), k = g.state.lights, xe = g.state.shadowsArray, Ae = k.state.version, Ue = B.getParameters(E, k.state, xe, N, V), De = B.getProgramCacheKey(Ue), We = F.programs;
            F.environment = E.isMeshStandardMaterial ? N.environment : null, F.fog = N.fog, F.envMap = (E.isMeshStandardMaterial ? qe : Ne).get(E.envMap || F.environment), We === void 0 && (E.addEventListener("dispose", ue), We = new Map, F.programs = We);
            let Pe = We.get(De);
            if (Pe !== void 0) {
                if (F.currentProgram === Pe && F.lightsStateVersion === Ae) return nl(E, Ue), Pe;
            } else Ue.uniforms = B.getUniforms(E), E.onBuild(V, Ue, x), E.onBeforeCompile(Ue, x), Pe = B.acquireProgram(Ue, De), We.set(De, Pe), F.uniforms = Ue.uniforms;
            let Ve = F.uniforms;
            (!E.isShaderMaterial && !E.isRawShaderMaterial || E.clipping === !0) && (Ve.clippingPlanes = Me.uniform), nl(E, Ue), F.needsLights = zd(E), F.lightsStateVersion = Ae, F.needsLights && (Ve.ambientLightColor.value = k.state.ambient, Ve.lightProbe.value = k.state.probe, Ve.directionalLights.value = k.state.directional, Ve.directionalLightShadows.value = k.state.directionalShadow, Ve.spotLights.value = k.state.spot, Ve.spotLightShadows.value = k.state.spotShadow, Ve.rectAreaLights.value = k.state.rectArea, Ve.ltc_1.value = k.state.rectAreaLTC1, Ve.ltc_2.value = k.state.rectAreaLTC2, Ve.pointLights.value = k.state.point, Ve.pointLightShadows.value = k.state.pointShadow, Ve.hemisphereLights.value = k.state.hemi, Ve.directionalShadowMap.value = k.state.directionalShadowMap, Ve.directionalShadowMatrix.value = k.state.directionalShadowMatrix, Ve.spotShadowMap.value = k.state.spotShadowMap, Ve.spotLightMatrix.value = k.state.spotLightMatrix, Ve.spotLightMap.value = k.state.spotLightMap, Ve.pointShadowMap.value = k.state.pointShadowMap, Ve.pointShadowMatrix.value = k.state.pointShadowMatrix);
            let at = Pe.getUniforms(), lt = qi.seqWithValue(at.seq, Ve);
            return F.currentProgram = Pe, F.uniformsList = lt, Pe;
        }
        function nl(E, N) {
            let V = me.get(E);
            V.outputColorSpace = N.outputColorSpace, V.instancing = N.instancing, V.instancingColor = N.instancingColor, V.skinning = N.skinning, V.morphTargets = N.morphTargets, V.morphNormals = N.morphNormals, V.morphColors = N.morphColors, V.morphTargetsCount = N.morphTargetsCount, V.numClippingPlanes = N.numClippingPlanes, V.numIntersection = N.numClipIntersection, V.vertexAlphas = N.vertexAlphas, V.vertexTangents = N.vertexTangents, V.toneMapping = N.toneMapping;
        }
        function Fd(E, N, V, F, k) {
            N.isScene !== !0 && (N = it), ye.resetTextureUnits();
            let xe = N.fog, Ae = F.isMeshStandardMaterial ? N.environment : null, Ue = R === null ? x.outputColorSpace : R.isXRRenderTarget === !0 ? R.texture.colorSpace : Mn, De = (F.isMeshStandardMaterial ? qe : Ne).get(F.envMap || Ae), We = F.vertexColors === !0 && !!V.attributes.color && V.attributes.color.itemSize === 4, Pe = !!V.attributes.tangent && (!!F.normalMap || F.anisotropy > 0), Ve = !!V.morphAttributes.position, at = !!V.morphAttributes.normal, lt = !!V.morphAttributes.color, Ht = Nn;
            F.toneMapped && (R === null || R.isXRRenderTarget === !0) && (Ht = x.toneMapping);
            let an = V.morphAttributes.position || V.morphAttributes.normal || V.morphAttributes.color, ut = an !== void 0 ? an.length : 0, Xe = me.get(F), Sa = g.state.lights;
            if (fe === !0 && (_e === !0 || E !== M)) {
                let Bt = E === M && F.id === I;
                Me.setState(F, E, Bt);
            }
            let dt = !1;
            F.version === Xe.__version ? (Xe.needsLights && Xe.lightsStateVersion !== Sa.state.version || Xe.outputColorSpace !== Ue || k.isInstancedMesh && Xe.instancing === !1 || !k.isInstancedMesh && Xe.instancing === !0 || k.isSkinnedMesh && Xe.skinning === !1 || !k.isSkinnedMesh && Xe.skinning === !0 || k.isInstancedMesh && Xe.instancingColor === !0 && k.instanceColor === null || k.isInstancedMesh && Xe.instancingColor === !1 && k.instanceColor !== null || Xe.envMap !== De || F.fog === !0 && Xe.fog !== xe || Xe.numClippingPlanes !== void 0 && (Xe.numClippingPlanes !== Me.numPlanes || Xe.numIntersection !== Me.numIntersection) || Xe.vertexAlphas !== We || Xe.vertexTangents !== Pe || Xe.morphTargets !== Ve || Xe.morphNormals !== at || Xe.morphColors !== lt || Xe.toneMapping !== Ht || ie.isWebGL2 === !0 && Xe.morphTargetsCount !== ut) && (dt = !0) : (dt = !0, Xe.__version = F.version);
            let Hn = Xe.currentProgram;
            dt === !0 && (Hn = Hs(F, N, k));
            let il = !1, os = !1, ba = !1, Ct = Hn.getUniforms(), Gn = Xe.uniforms;
            if (J.useProgram(Hn.program) && (il = !0, os = !0, ba = !0), F.id !== I && (I = F.id, os = !0), il || M !== E) {
                Ct.setValue(L, "projectionMatrix", E.projectionMatrix), Ct.setValue(L, "viewMatrix", E.matrixWorldInverse);
                let Bt = Ct.map.cameraPosition;
                Bt !== void 0 && Bt.setValue(L, Ye.setFromMatrixPosition(E.matrixWorld)), ie.logarithmicDepthBuffer && Ct.setValue(L, "logDepthBufFC", 2 / (Math.log(E.far + 1) / Math.LN2)), (F.isMeshPhongMaterial || F.isMeshToonMaterial || F.isMeshLambertMaterial || F.isMeshBasicMaterial || F.isMeshStandardMaterial || F.isShaderMaterial) && Ct.setValue(L, "isOrthographic", E.isOrthographicCamera === !0), M !== E && (M = E, os = !0, ba = !0);
            }
            if (k.isSkinnedMesh) {
                Ct.setOptional(L, k, "bindMatrix"), Ct.setOptional(L, k, "bindMatrixInverse");
                let Bt = k.skeleton;
                Bt && (ie.floatVertexTextures ? (Bt.boneTexture === null && Bt.computeBoneTexture(), Ct.setValue(L, "boneTexture", Bt.boneTexture, ye), Ct.setValue(L, "boneTextureSize", Bt.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
            }
            let Ea = V.morphAttributes;
            if ((Ea.position !== void 0 || Ea.normal !== void 0 || Ea.color !== void 0 && ie.isWebGL2 === !0) && Le.update(k, V, Hn), (os || Xe.receiveShadow !== k.receiveShadow) && (Xe.receiveShadow = k.receiveShadow, Ct.setValue(L, "receiveShadow", k.receiveShadow)), F.isMeshGouraudMaterial && F.envMap !== null && (Gn.envMap.value = De, Gn.flipEnvMap.value = De.isCubeTexture && De.isRenderTargetTexture === !1 ? -1 : 1), os && (Ct.setValue(L, "toneMappingExposure", x.toneMappingExposure), Xe.needsLights && Bd(Gn, ba), xe && F.fog === !0 && ee.refreshFogUniforms(Gn, xe), ee.refreshMaterialUniforms(Gn, F, H, q, we), qi.upload(L, Xe.uniformsList, Gn, ye)), F.isShaderMaterial && F.uniformsNeedUpdate === !0 && (qi.upload(L, Xe.uniformsList, Gn, ye), F.uniformsNeedUpdate = !1), F.isSpriteMaterial && Ct.setValue(L, "center", k.center), Ct.setValue(L, "modelViewMatrix", k.modelViewMatrix), Ct.setValue(L, "normalMatrix", k.normalMatrix), Ct.setValue(L, "modelMatrix", k.matrixWorld), F.isShaderMaterial || F.isRawShaderMaterial) {
                let Bt = F.uniformsGroups;
                for(let Ta = 0, Vd = Bt.length; Ta < Vd; Ta++)if (ie.isWebGL2) {
                    let sl = Bt[Ta];
                    Ie.update(sl, Hn), Ie.bind(sl, Hn);
                } else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
            }
            return Hn;
        }
        function Bd(E, N) {
            E.ambientLightColor.needsUpdate = N, E.lightProbe.needsUpdate = N, E.directionalLights.needsUpdate = N, E.directionalLightShadows.needsUpdate = N, E.pointLights.needsUpdate = N, E.pointLightShadows.needsUpdate = N, E.spotLights.needsUpdate = N, E.spotLightShadows.needsUpdate = N, E.rectAreaLights.needsUpdate = N, E.hemisphereLights.needsUpdate = N;
        }
        function zd(E) {
            return E.isMeshLambertMaterial || E.isMeshToonMaterial || E.isMeshPhongMaterial || E.isMeshStandardMaterial || E.isShadowMaterial || E.isShaderMaterial && E.lights === !0;
        }
        this.getActiveCubeFace = function() {
            return b;
        }, this.getActiveMipmapLevel = function() {
            return w;
        }, this.getRenderTarget = function() {
            return R;
        }, this.setRenderTargetTextures = function(E, N, V) {
            me.get(E.texture).__webglTexture = N, me.get(E.depthTexture).__webglTexture = V;
            let F = me.get(E);
            F.__hasExternalTextures = !0, F.__hasExternalTextures && (F.__autoAllocateDepthBuffer = V === void 0, F.__autoAllocateDepthBuffer || X.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), F.__useRenderToTexture = !1));
        }, this.setRenderTargetFramebuffer = function(E, N) {
            let V = me.get(E);
            V.__webglFramebuffer = N, V.__useDefaultFramebuffer = N === void 0;
        }, this.setRenderTarget = function(E, N = 0, V = 0) {
            R = E, b = N, w = V;
            let F = !0, k = null, xe = !1, Ae = !1;
            if (E) {
                let De = me.get(E);
                De.__useDefaultFramebuffer !== void 0 ? (J.bindFramebuffer(L.FRAMEBUFFER, null), F = !1) : De.__webglFramebuffer === void 0 ? ye.setupRenderTarget(E) : De.__hasExternalTextures && ye.rebindTextures(E, me.get(E.texture).__webglTexture, me.get(E.depthTexture).__webglTexture);
                let We = E.texture;
                (We.isData3DTexture || We.isDataArrayTexture || We.isCompressedArrayTexture) && (Ae = !0);
                let Pe = me.get(E).__webglFramebuffer;
                E.isWebGLCubeRenderTarget ? (Array.isArray(Pe[N]) ? k = Pe[N][V] : k = Pe[N], xe = !0) : ie.isWebGL2 && E.samples > 0 && ye.useMultisampledRTT(E) === !1 ? k = me.get(E).__webglMultisampledFramebuffer : Array.isArray(Pe) ? k = Pe[V] : k = Pe, T.copy(E.viewport), O.copy(E.scissor), Y = E.scissorTest;
            } else T.copy(K).multiplyScalar(H).floor(), O.copy(D).multiplyScalar(H).floor(), Y = G;
            if (J.bindFramebuffer(L.FRAMEBUFFER, k) && ie.drawBuffers && F && J.drawBuffers(E, k), J.viewport(T), J.scissor(O), J.setScissorTest(Y), xe) {
                let De = me.get(E.texture);
                L.framebufferTexture2D(L.FRAMEBUFFER, L.COLOR_ATTACHMENT0, L.TEXTURE_CUBE_MAP_POSITIVE_X + N, De.__webglTexture, V);
            } else if (Ae) {
                let De = me.get(E.texture), We = N || 0;
                L.framebufferTextureLayer(L.FRAMEBUFFER, L.COLOR_ATTACHMENT0, De.__webglTexture, V || 0, We);
            }
            I = -1;
        }, this.readRenderTargetPixels = function(E, N, V, F, k, xe, Ae) {
            if (!(E && E.isWebGLRenderTarget)) {
                console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                return;
            }
            let Ue = me.get(E).__webglFramebuffer;
            if (E.isWebGLCubeRenderTarget && Ae !== void 0 && (Ue = Ue[Ae]), Ue) {
                J.bindFramebuffer(L.FRAMEBUFFER, Ue);
                try {
                    let De = E.texture, We = De.format, Pe = De.type;
                    if (We !== Wt && $e.convert(We) !== L.getParameter(L.IMPLEMENTATION_COLOR_READ_FORMAT)) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        return;
                    }
                    let Ve = Pe === Ts && (X.has("EXT_color_buffer_half_float") || ie.isWebGL2 && X.has("EXT_color_buffer_float"));
                    if (Pe !== On && $e.convert(Pe) !== L.getParameter(L.IMPLEMENTATION_COLOR_READ_TYPE) && !(Pe === xn && (ie.isWebGL2 || X.has("OES_texture_float") || X.has("WEBGL_color_buffer_float"))) && !Ve) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        return;
                    }
                    N >= 0 && N <= E.width - F && V >= 0 && V <= E.height - k && L.readPixels(N, V, F, k, $e.convert(We), $e.convert(Pe), xe);
                } finally{
                    let De = R !== null ? me.get(R).__webglFramebuffer : null;
                    J.bindFramebuffer(L.FRAMEBUFFER, De);
                }
            }
        }, this.copyFramebufferToTexture = function(E, N, V = 0) {
            let F = Math.pow(2, -V), k = Math.floor(N.image.width * F), xe = Math.floor(N.image.height * F);
            ye.setTexture2D(N, 0), L.copyTexSubImage2D(L.TEXTURE_2D, V, 0, 0, E.x, E.y, k, xe), J.unbindTexture();
        }, this.copyTextureToTexture = function(E, N, V, F = 0) {
            let k = N.image.width, xe = N.image.height, Ae = $e.convert(V.format), Ue = $e.convert(V.type);
            ye.setTexture2D(V, 0), L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL, V.flipY), L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL, V.premultiplyAlpha), L.pixelStorei(L.UNPACK_ALIGNMENT, V.unpackAlignment), N.isDataTexture ? L.texSubImage2D(L.TEXTURE_2D, F, E.x, E.y, k, xe, Ae, Ue, N.image.data) : N.isCompressedTexture ? L.compressedTexSubImage2D(L.TEXTURE_2D, F, E.x, E.y, N.mipmaps[0].width, N.mipmaps[0].height, Ae, N.mipmaps[0].data) : L.texSubImage2D(L.TEXTURE_2D, F, E.x, E.y, Ae, Ue, N.image), F === 0 && V.generateMipmaps && L.generateMipmap(L.TEXTURE_2D), J.unbindTexture();
        }, this.copyTextureToTexture3D = function(E, N, V, F, k = 0) {
            if (x.isWebGL1Renderer) {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                return;
            }
            let xe = E.max.x - E.min.x + 1, Ae = E.max.y - E.min.y + 1, Ue = E.max.z - E.min.z + 1, De = $e.convert(F.format), We = $e.convert(F.type), Pe;
            if (F.isData3DTexture) ye.setTexture3D(F, 0), Pe = L.TEXTURE_3D;
            else if (F.isDataArrayTexture) ye.setTexture2DArray(F, 0), Pe = L.TEXTURE_2D_ARRAY;
            else {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                return;
            }
            L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL, F.flipY), L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL, F.premultiplyAlpha), L.pixelStorei(L.UNPACK_ALIGNMENT, F.unpackAlignment);
            let Ve = L.getParameter(L.UNPACK_ROW_LENGTH), at = L.getParameter(L.UNPACK_IMAGE_HEIGHT), lt = L.getParameter(L.UNPACK_SKIP_PIXELS), Ht = L.getParameter(L.UNPACK_SKIP_ROWS), an = L.getParameter(L.UNPACK_SKIP_IMAGES), ut = V.isCompressedTexture ? V.mipmaps[0] : V.image;
            L.pixelStorei(L.UNPACK_ROW_LENGTH, ut.width), L.pixelStorei(L.UNPACK_IMAGE_HEIGHT, ut.height), L.pixelStorei(L.UNPACK_SKIP_PIXELS, E.min.x), L.pixelStorei(L.UNPACK_SKIP_ROWS, E.min.y), L.pixelStorei(L.UNPACK_SKIP_IMAGES, E.min.z), V.isDataTexture || V.isData3DTexture ? L.texSubImage3D(Pe, k, N.x, N.y, N.z, xe, Ae, Ue, De, We, ut.data) : V.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), L.compressedTexSubImage3D(Pe, k, N.x, N.y, N.z, xe, Ae, Ue, De, ut.data)) : L.texSubImage3D(Pe, k, N.x, N.y, N.z, xe, Ae, Ue, De, We, ut), L.pixelStorei(L.UNPACK_ROW_LENGTH, Ve), L.pixelStorei(L.UNPACK_IMAGE_HEIGHT, at), L.pixelStorei(L.UNPACK_SKIP_PIXELS, lt), L.pixelStorei(L.UNPACK_SKIP_ROWS, Ht), L.pixelStorei(L.UNPACK_SKIP_IMAGES, an), k === 0 && F.generateMipmaps && L.generateMipmap(Pe), J.unbindTexture();
        }, this.initTexture = function(E) {
            E.isCubeTexture ? ye.setTextureCube(E, 0) : E.isData3DTexture ? ye.setTexture3D(E, 0) : E.isDataArrayTexture || E.isCompressedArrayTexture ? ye.setTexture2DArray(E, 0) : ye.setTexture2D(E, 0), J.unbindTexture();
        }, this.resetState = function() {
            b = 0, w = 0, R = null, J.reset(), Oe.reset();
        }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    get coordinateSystem() {
        return vn;
    }
    get outputColorSpace() {
        return this._outputColorSpace;
    }
    set outputColorSpace(e) {
        this._outputColorSpace = e;
        let t = this.getContext();
        t.drawingBufferColorSpace = e === qc ? "display-p3" : "srgb", t.unpackColorSpace = Qe.workingColorSpace === va ? "display-p3" : "srgb";
    }
    get physicallyCorrectLights() {
        return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights;
    }
    set physicallyCorrectLights(e) {
        console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !e;
    }
    get outputEncoding() {
        return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace === vt ? ri : vd;
    }
    set outputEncoding(e) {
        console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace = e === ri ? vt : Mn;
    }
    get useLegacyLights() {
        return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
    }
    set useLegacyLights(e) {
        console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = e;
    }
}, Co = class extends Ro {
};
Co.prototype.isWebGL1Renderer = !0;
var Po = class s1 {
    constructor(e, t = 25e-5){
        this.isFogExp2 = !0, this.name = "", this.color = new pe(e), this.density = t;
    }
    clone() {
        return new s1(this.color, this.density);
    }
    toJSON() {
        return {
            type: "FogExp2",
            name: this.name,
            color: this.color.getHex(),
            density: this.density
        };
    }
}, Lo = class s1 {
    constructor(e, t = 1, n = 1e3){
        this.isFog = !0, this.name = "", this.color = new pe(e), this.near = t, this.far = n;
    }
    clone() {
        return new s1(this.color, this.near, this.far);
    }
    toJSON() {
        return {
            type: "Fog",
            name: this.name,
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        };
    }
}, Io = class extends Je {
    constructor(){
        super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    copy(e, t) {
        return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t;
    }
}, Is = class {
    constructor(e, t){
        this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Hr, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0, this.uuid = kt();
    }
    onUploadCallback() {}
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    copy(e) {
        return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
    }
    copyAt(e, t, n) {
        e *= this.stride, n *= t.stride;
        for(let i = 0, r = this.stride; i < r; i++)this.array[e + i] = t.array[n + i];
        return this;
    }
    set(e, t = 0) {
        return this.array.set(e, t), this;
    }
    clone(e) {
        e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = kt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
        let t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
        return n.setUsage(this.usage), n;
    }
    onUpload(e) {
        return this.onUploadCallback = e, this;
    }
    toJSON(e) {
        return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = kt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
        };
    }
}, Pt = new A, Qi = class s1 {
    constructor(e, t, n, i = !1){
        this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = i;
    }
    get count() {
        return this.data.count;
    }
    get array() {
        return this.data.array;
    }
    set needsUpdate(e) {
        this.data.needsUpdate = e;
    }
    applyMatrix4(e) {
        for(let t = 0, n = this.data.count; t < n; t++)Pt.fromBufferAttribute(this, t), Pt.applyMatrix4(e), this.setXYZ(t, Pt.x, Pt.y, Pt.z);
        return this;
    }
    applyNormalMatrix(e) {
        for(let t = 0, n = this.count; t < n; t++)Pt.fromBufferAttribute(this, t), Pt.applyNormalMatrix(e), this.setXYZ(t, Pt.x, Pt.y, Pt.z);
        return this;
    }
    transformDirection(e) {
        for(let t = 0, n = this.count; t < n; t++)Pt.fromBufferAttribute(this, t), Pt.transformDirection(e), this.setXYZ(t, Pt.x, Pt.y, Pt.z);
        return this;
    }
    setX(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
    }
    setY(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
    }
    setZ(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
    }
    setW(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
    }
    getX(e) {
        let t = this.data.array[e * this.data.stride + this.offset];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    getY(e) {
        let t = this.data.array[e * this.data.stride + this.offset + 1];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    getZ(e) {
        let t = this.data.array[e * this.data.stride + this.offset + 2];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    getW(e) {
        let t = this.data.array[e * this.data.stride + this.offset + 3];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setXY(e, t, n) {
        return e = e * this.data.stride + this.offset, this.normalized && (t = Be(t, this.array), n = Be(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
    }
    setXYZ(e, t, n, i) {
        return e = e * this.data.stride + this.offset, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this;
    }
    setXYZW(e, t, n, i, r) {
        return e = e * this.data.stride + this.offset, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array), r = Be(r, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this.data.array[e + 3] = r, this;
    }
    clone(e) {
        if (e === void 0) {
            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
            let t = [];
            for(let n = 0; n < this.count; n++){
                let i = n * this.data.stride + this.offset;
                for(let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]);
            }
            return new et(new this.array.constructor(t), this.itemSize, this.normalized);
        } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new s1(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
    toJSON(e) {
        if (e === void 0) {
            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
            let t = [];
            for(let n = 0; n < this.count; n++){
                let i = n * this.data.stride + this.offset;
                for(let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]);
            }
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: t,
                normalized: this.normalized
            };
        } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
            isInterleavedBufferAttribute: !0,
            itemSize: this.itemSize,
            data: this.data.uuid,
            offset: this.offset,
            normalized: this.normalized
        };
    }
}, ea = class extends bt {
    constructor(e){
        super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new pe(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
    }
}, Ii, ds = new A, Ui = new A, Di = new A, Ni = new Z, fs = new Z, Cd = new ze, hr = new A, ps = new A, ur = new A, Lh = new Z, ja = new Z, Ih = new Z, Uo = class extends Je {
    constructor(e = new ea){
        if (super(), this.isSprite = !0, this.type = "Sprite", Ii === void 0) {
            Ii = new Ge;
            let t = new Float32Array([
                -.5,
                -.5,
                0,
                0,
                0,
                .5,
                -.5,
                0,
                1,
                0,
                .5,
                .5,
                0,
                1,
                1,
                -.5,
                .5,
                0,
                0,
                1
            ]), n = new Is(t, 5);
            Ii.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]), Ii.setAttribute("position", new Qi(n, 3, 0, !1)), Ii.setAttribute("uv", new Qi(n, 2, 3, !1));
        }
        this.geometry = Ii, this.material = e, this.center = new Z(.5, .5);
    }
    raycast(e, t) {
        e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Ui.setFromMatrixScale(this.matrixWorld), Cd.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), Di.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && Ui.multiplyScalar(-Di.z);
        let n = this.material.rotation, i, r;
        n !== 0 && (r = Math.cos(n), i = Math.sin(n));
        let a = this.center;
        dr(hr.set(-.5, -.5, 0), Di, a, Ui, i, r), dr(ps.set(.5, -.5, 0), Di, a, Ui, i, r), dr(ur.set(.5, .5, 0), Di, a, Ui, i, r), Lh.set(0, 0), ja.set(1, 0), Ih.set(1, 1);
        let o = e.ray.intersectTriangle(hr, ps, ur, !1, ds);
        if (o === null && (dr(ps.set(-.5, .5, 0), Di, a, Ui, i, r), ja.set(0, 1), o = e.ray.intersectTriangle(hr, ur, ps, !1, ds), o === null)) return;
        let c = e.ray.origin.distanceTo(ds);
        c < e.near || c > e.far || t.push({
            distance: c,
            point: ds.clone(),
            uv: Un.getInterpolation(ds, hr, ps, ur, Lh, ja, Ih, new Z),
            face: null,
            object: this
        });
    }
    copy(e, t) {
        return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
    }
};
function dr(s1, e, t, n, i, r) {
    Ni.subVectors(s1, t).addScalar(.5).multiply(n), i !== void 0 ? (fs.x = r * Ni.x - i * Ni.y, fs.y = i * Ni.x + r * Ni.y) : fs.copy(Ni), s1.copy(e), s1.x += fs.x, s1.y += fs.y, s1.applyMatrix4(Cd);
}
var fr = new A, Uh = new A, Do = class extends Je {
    constructor(){
        super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
            levels: {
                enumerable: !0,
                value: []
            },
            isLOD: {
                value: !0
            }
        }), this.autoUpdate = !0;
    }
    copy(e) {
        super.copy(e, !1);
        let t = e.levels;
        for(let n = 0, i = t.length; n < i; n++){
            let r = t[n];
            this.addLevel(r.object.clone(), r.distance, r.hysteresis);
        }
        return this.autoUpdate = e.autoUpdate, this;
    }
    addLevel(e, t = 0, n = 0) {
        t = Math.abs(t);
        let i = this.levels, r;
        for(r = 0; r < i.length && !(t < i[r].distance); r++);
        return i.splice(r, 0, {
            distance: t,
            hysteresis: n,
            object: e
        }), this.add(e), this;
    }
    getCurrentLevel() {
        return this._currentLevel;
    }
    getObjectForDistance(e) {
        let t = this.levels;
        if (t.length > 0) {
            let n, i;
            for(n = 1, i = t.length; n < i; n++){
                let r = t[n].distance;
                if (t[n].object.visible && (r -= r * t[n].hysteresis), e < r) break;
            }
            return t[n - 1].object;
        }
        return null;
    }
    raycast(e, t) {
        if (this.levels.length > 0) {
            fr.setFromMatrixPosition(this.matrixWorld);
            let i = e.ray.origin.distanceTo(fr);
            this.getObjectForDistance(i).raycast(e, t);
        }
    }
    update(e) {
        let t = this.levels;
        if (t.length > 1) {
            fr.setFromMatrixPosition(e.matrixWorld), Uh.setFromMatrixPosition(this.matrixWorld);
            let n = fr.distanceTo(Uh) / e.zoom;
            t[0].object.visible = !0;
            let i, r;
            for(i = 1, r = t.length; i < r; i++){
                let a = t[i].distance;
                if (t[i].object.visible && (a -= a * t[i].hysteresis), n >= a) t[i - 1].object.visible = !1, t[i].object.visible = !0;
                else break;
            }
            for(this._currentLevel = i - 1; i < r; i++)t[i].object.visible = !1;
        }
    }
    toJSON(e) {
        let t = super.toJSON(e);
        this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
        let n = this.levels;
        for(let i = 0, r = n.length; i < r; i++){
            let a = n[i];
            t.object.levels.push({
                object: a.object.uuid,
                distance: a.distance,
                hysteresis: a.hysteresis
            });
        }
        return t;
    }
}, Dh = new A, Nh = new je, Oh = new je, W0 = new A, Fh = new ze, Oi = new A, eo = new Yt, Bh = new ze, to = new hi, No = class extends Mt {
    constructor(e, t){
        super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new ze, this.bindMatrixInverse = new ze, this.boundingBox = null, this.boundingSphere = null;
    }
    computeBoundingBox() {
        let e = this.geometry;
        this.boundingBox === null && (this.boundingBox = new Qt), this.boundingBox.makeEmpty();
        let t = e.getAttribute("position");
        for(let n = 0; n < t.count; n++)Oi.fromBufferAttribute(t, n), this.applyBoneTransform(n, Oi), this.boundingBox.expandByPoint(Oi);
    }
    computeBoundingSphere() {
        let e = this.geometry;
        this.boundingSphere === null && (this.boundingSphere = new Yt), this.boundingSphere.makeEmpty();
        let t = e.getAttribute("position");
        for(let n = 0; n < t.count; n++)Oi.fromBufferAttribute(t, n), this.applyBoneTransform(n, Oi), this.boundingSphere.expandByPoint(Oi);
    }
    copy(e, t) {
        return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
    }
    raycast(e, t) {
        let n = this.material, i = this.matrixWorld;
        n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), eo.copy(this.boundingSphere), eo.applyMatrix4(i), e.ray.intersectsSphere(eo) !== !1 && (Bh.copy(i).invert(), to.copy(e.ray).applyMatrix4(Bh), !(this.boundingBox !== null && to.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, to)));
    }
    getVertexPosition(e, t) {
        return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
    }
    bind(e, t) {
        this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
    }
    pose() {
        this.skeleton.pose();
    }
    normalizeSkinWeights() {
        let e = new je, t = this.geometry.attributes.skinWeight;
        for(let n = 0, i = t.count; n < i; n++){
            e.fromBufferAttribute(t, n);
            let r = 1 / e.manhattanLength();
            r !== 1 / 0 ? e.multiplyScalar(r) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
        }
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
    applyBoneTransform(e, t) {
        let n = this.skeleton, i = this.geometry;
        Nh.fromBufferAttribute(i.attributes.skinIndex, e), Oh.fromBufferAttribute(i.attributes.skinWeight, e), Dh.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
        for(let r = 0; r < 4; r++){
            let a = Oh.getComponent(r);
            if (a !== 0) {
                let o = Nh.getComponent(r);
                Fh.multiplyMatrices(n.bones[o].matrixWorld, n.boneInverses[o]), t.addScaledVector(W0.copy(Dh).applyMatrix4(Fh), a);
            }
        }
        return t.applyMatrix4(this.bindMatrixInverse);
    }
    boneTransform(e, t) {
        return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(e, t);
    }
}, ta = class extends Je {
    constructor(){
        super(), this.isBone = !0, this.type = "Bone";
    }
}, oi = class extends St {
    constructor(e = null, t = 1, n = 1, i, r, a, o, c, l = pt, h = pt, u, d){
        super(null, a, o, c, l, h, i, r, u, d), this.isDataTexture = !0, this.image = {
            data: e,
            width: t,
            height: n
        }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
}, zh = new ze, X0 = new ze, Oo = class s1 {
    constructor(e = [], t = []){
        this.uuid = kt(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.init();
    }
    init() {
        let e = this.bones, t = this.boneInverses;
        if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0) this.calculateInverses();
        else if (e.length !== t.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
            for(let n = 0, i = this.bones.length; n < i; n++)this.boneInverses.push(new ze);
        }
    }
    calculateInverses() {
        this.boneInverses.length = 0;
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = new ze;
            this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
        }
    }
    pose() {
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = this.bones[e];
            n && n.matrixWorld.copy(this.boneInverses[e]).invert();
        }
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = this.bones[e];
            n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
        }
    }
    update() {
        let e = this.bones, t = this.boneInverses, n = this.boneMatrices, i = this.boneTexture;
        for(let r = 0, a = e.length; r < a; r++){
            let o = e[r] ? e[r].matrixWorld : X0;
            zh.multiplyMatrices(o, t[r]), zh.toArray(n, r * 16);
        }
        i !== null && (i.needsUpdate = !0);
    }
    clone() {
        return new s1(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
        let e = Math.sqrt(this.bones.length * 4);
        e = yd(e), e = Math.max(e, 4);
        let t = new Float32Array(e * e * 4);
        t.set(this.boneMatrices);
        let n = new oi(t, e, e, Wt, xn);
        return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this.boneTextureSize = e, this;
    }
    getBoneByName(e) {
        for(let t = 0, n = this.bones.length; t < n; t++){
            let i = this.bones[t];
            if (i.name === e) return i;
        }
    }
    dispose() {
        this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
    }
    fromJSON(e, t) {
        this.uuid = e.uuid;
        for(let n = 0, i = e.bones.length; n < i; n++){
            let r = e.bones[n], a = t[r];
            a === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", r), a = new ta), this.bones.push(a), this.boneInverses.push(new ze().fromArray(e.boneInverses[n]));
        }
        return this.init(), this;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.6,
                type: "Skeleton",
                generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
        };
        e.uuid = this.uuid;
        let t = this.bones, n = this.boneInverses;
        for(let i = 0, r = t.length; i < r; i++){
            let a = t[i];
            e.bones.push(a.uuid);
            let o = n[i];
            e.boneInverses.push(o.toArray());
        }
        return e;
    }
}, ui = class extends et {
    constructor(e, t, n, i = 1){
        super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = i;
    }
    copy(e) {
        return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
    }
}, Fi = new ze, Vh = new ze, pr = [], kh = new Qt, q0 = new ze, ms = new Mt, gs = new Yt, Fo = class extends Mt {
    constructor(e, t, n){
        super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new ui(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
        for(let i = 0; i < n; i++)this.setMatrixAt(i, q0);
    }
    computeBoundingBox() {
        let e = this.geometry, t = this.count;
        this.boundingBox === null && (this.boundingBox = new Qt), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
        for(let n = 0; n < t; n++)this.getMatrixAt(n, Fi), kh.copy(e.boundingBox).applyMatrix4(Fi), this.boundingBox.union(kh);
    }
    computeBoundingSphere() {
        let e = this.geometry, t = this.count;
        this.boundingSphere === null && (this.boundingSphere = new Yt), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
        for(let n = 0; n < t; n++)this.getMatrixAt(n, Fi), gs.copy(e.boundingSphere).applyMatrix4(Fi), this.boundingSphere.union(gs);
    }
    copy(e, t) {
        return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
    }
    getColorAt(e, t) {
        t.fromArray(this.instanceColor.array, e * 3);
    }
    getMatrixAt(e, t) {
        t.fromArray(this.instanceMatrix.array, e * 16);
    }
    raycast(e, t) {
        let n = this.matrixWorld, i = this.count;
        if (ms.geometry = this.geometry, ms.material = this.material, ms.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), gs.copy(this.boundingSphere), gs.applyMatrix4(n), e.ray.intersectsSphere(gs) !== !1)) for(let r = 0; r < i; r++){
            this.getMatrixAt(r, Fi), Vh.multiplyMatrices(n, Fi), ms.matrixWorld = Vh, ms.raycast(e, pr);
            for(let a = 0, o = pr.length; a < o; a++){
                let c = pr[a];
                c.instanceId = r, c.object = this, t.push(c);
            }
            pr.length = 0;
        }
    }
    setColorAt(e, t) {
        this.instanceColor === null && (this.instanceColor = new ui(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
    }
    setMatrixAt(e, t) {
        t.toArray(this.instanceMatrix.array, e * 16);
    }
    updateMorphTargets() {}
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}, wt = class extends bt {
    constructor(e){
        super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new pe(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
    }
}, Hh = new A, Gh = new A, Wh = new ze, no = new hi, mr = new Yt, bn = class extends Je {
    constructor(e = new Ge, t = new wt){
        super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e, t) {
        return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    computeLineDistances() {
        let e = this.geometry;
        if (e.index === null) {
            let t = e.attributes.position, n = [
                0
            ];
            for(let i = 1, r = t.count; i < r; i++)Hh.fromBufferAttribute(t, i - 1), Gh.fromBufferAttribute(t, i), n[i] = n[i - 1], n[i] += Hh.distanceTo(Gh);
            e.setAttribute("lineDistance", new ve(n, 1));
        } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.matrixWorld, r = e.params.Line.threshold, a = n.drawRange;
        if (n.boundingSphere === null && n.computeBoundingSphere(), mr.copy(n.boundingSphere), mr.applyMatrix4(i), mr.radius += r, e.ray.intersectsSphere(mr) === !1) return;
        Wh.copy(i).invert(), no.copy(e.ray).applyMatrix4(Wh);
        let o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = o * o, l = new A, h = new A, u = new A, d = new A, f = this.isLineSegments ? 2 : 1, m = n.index, g = n.attributes.position;
        if (m !== null) {
            let p = Math.max(0, a.start), v = Math.min(m.count, a.start + a.count);
            for(let x = p, y = v - 1; x < y; x += f){
                let b = m.getX(x), w = m.getX(x + 1);
                if (l.fromBufferAttribute(g, b), h.fromBufferAttribute(g, w), no.distanceSqToSegment(l, h, d, u) > c) continue;
                d.applyMatrix4(this.matrixWorld);
                let I = e.ray.origin.distanceTo(d);
                I < e.near || I > e.far || t.push({
                    distance: I,
                    point: u.clone().applyMatrix4(this.matrixWorld),
                    index: x,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        } else {
            let p = Math.max(0, a.start), v = Math.min(g.count, a.start + a.count);
            for(let x = p, y = v - 1; x < y; x += f){
                if (l.fromBufferAttribute(g, x), h.fromBufferAttribute(g, x + 1), no.distanceSqToSegment(l, h, d, u) > c) continue;
                d.applyMatrix4(this.matrixWorld);
                let w = e.ray.origin.distanceTo(d);
                w < e.near || w > e.far || t.push({
                    distance: w,
                    point: u.clone().applyMatrix4(this.matrixWorld),
                    index: x,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        }
    }
    updateMorphTargets() {
        let t = this.geometry.morphAttributes, n = Object.keys(t);
        if (n.length > 0) {
            let i = t[n[0]];
            if (i !== void 0) {
                this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                for(let r = 0, a = i.length; r < a; r++){
                    let o = i[r].name || String(r);
                    this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
                }
            }
        }
    }
}, Xh = new A, qh = new A, en = class extends bn {
    constructor(e, t){
        super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
    }
    computeLineDistances() {
        let e = this.geometry;
        if (e.index === null) {
            let t = e.attributes.position, n = [];
            for(let i = 0, r = t.count; i < r; i += 2)Xh.fromBufferAttribute(t, i), qh.fromBufferAttribute(t, i + 1), n[i] = i === 0 ? 0 : n[i - 1], n[i + 1] = n[i] + Xh.distanceTo(qh);
            e.setAttribute("lineDistance", new ve(n, 1));
        } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
}, Bo = class extends bn {
    constructor(e, t){
        super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
    }
}, na = class extends bt {
    constructor(e){
        super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new pe(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
    }
}, Yh = new ze, zo = new hi, gr = new Yt, _r = new A, Vo = class extends Je {
    constructor(e = new Ge, t = new na){
        super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e, t) {
        return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.matrixWorld, r = e.params.Points.threshold, a = n.drawRange;
        if (n.boundingSphere === null && n.computeBoundingSphere(), gr.copy(n.boundingSphere), gr.applyMatrix4(i), gr.radius += r, e.ray.intersectsSphere(gr) === !1) return;
        Yh.copy(i).invert(), zo.copy(e.ray).applyMatrix4(Yh);
        let o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = o * o, l = n.index, u = n.attributes.position;
        if (l !== null) {
            let d = Math.max(0, a.start), f = Math.min(l.count, a.start + a.count);
            for(let m = d, _ = f; m < _; m++){
                let g = l.getX(m);
                _r.fromBufferAttribute(u, g), Zh(_r, g, c, i, e, t, this);
            }
        } else {
            let d = Math.max(0, a.start), f = Math.min(u.count, a.start + a.count);
            for(let m = d, _ = f; m < _; m++)_r.fromBufferAttribute(u, m), Zh(_r, m, c, i, e, t, this);
        }
    }
    updateMorphTargets() {
        let t = this.geometry.morphAttributes, n = Object.keys(t);
        if (n.length > 0) {
            let i = t[n[0]];
            if (i !== void 0) {
                this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                for(let r = 0, a = i.length; r < a; r++){
                    let o = i[r].name || String(r);
                    this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
                }
            }
        }
    }
};
function Zh(s1, e, t, n, i, r, a) {
    let o = zo.distanceSqToPoint(s1);
    if (o < t) {
        let c = new A;
        zo.closestPointToPoint(s1, c), c.applyMatrix4(n);
        let l = i.ray.origin.distanceTo(c);
        if (l < i.near || l > i.far) return;
        r.push({
            distance: l,
            distanceToRay: Math.sqrt(o),
            point: c,
            index: e,
            face: null,
            object: a
        });
    }
}
var Jh = class extends St {
    constructor(e, t, n, i, r, a, o, c, l){
        super(e, t, n, i, r, a, o, c, l), this.isVideoTexture = !0, this.minFilter = a !== void 0 ? a : mt, this.magFilter = r !== void 0 ? r : mt, this.generateMipmaps = !1;
        let h = this;
        function u() {
            h.needsUpdate = !0, e.requestVideoFrameCallback(u);
        }
        "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(u);
    }
    clone() {
        return new this.constructor(this.image).copy(this);
    }
    update() {
        let e = this.image;
        "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
    }
}, $h = class extends St {
    constructor(e, t){
        super({
            width: e,
            height: t
        }), this.isFramebufferTexture = !0, this.magFilter = pt, this.minFilter = pt, this.generateMipmaps = !1, this.needsUpdate = !0;
    }
}, Us = class extends St {
    constructor(e, t, n, i, r, a, o, c, l, h, u, d){
        super(null, a, o, c, l, h, i, r, u, d), this.isCompressedTexture = !0, this.image = {
            width: t,
            height: n
        }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
    }
}, Kh = class extends Us {
    constructor(e, t, n, i, r, a){
        super(e, t, n, r, a), this.isCompressedArrayTexture = !0, this.image.depth = i, this.wrapR = It;
    }
}, Qh = class extends Us {
    constructor(e, t, n){
        super(void 0, e[0].width, e[0].height, t, n, zn), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
    }
}, jh = class extends St {
    constructor(e, t, n, i, r, a, o, c, l){
        super(e, t, n, i, r, a, o, c, l), this.isCanvasTexture = !0, this.needsUpdate = !0;
    }
}, Zt = class {
    constructor(){
        this.type = "Curve", this.arcLengthDivisions = 200;
    }
    getPoint() {
        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
    }
    getPointAt(e, t) {
        let n = this.getUtoTmapping(e);
        return this.getPoint(n, t);
    }
    getPoints(e = 5) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPoint(n / e));
        return t;
    }
    getSpacedPoints(e = 5) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPointAt(n / e));
        return t;
    }
    getLength() {
        let e = this.getLengths();
        return e[e.length - 1];
    }
    getLengths(e = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = !1;
        let t = [], n, i = this.getPoint(0), r = 0;
        t.push(0);
        for(let a = 1; a <= e; a++)n = this.getPoint(a / e), r += n.distanceTo(i), t.push(r), i = n;
        return this.cacheArcLengths = t, t;
    }
    updateArcLengths() {
        this.needsUpdate = !0, this.getLengths();
    }
    getUtoTmapping(e, t) {
        let n = this.getLengths(), i = 0, r = n.length, a;
        t ? a = t : a = e * n[r - 1];
        let o = 0, c = r - 1, l;
        for(; o <= c;)if (i = Math.floor(o + (c - o) / 2), l = n[i] - a, l < 0) o = i + 1;
        else if (l > 0) c = i - 1;
        else {
            c = i;
            break;
        }
        if (i = c, n[i] === a) return i / (r - 1);
        let h = n[i], d = n[i + 1] - h, f = (a - h) / d;
        return (i + f) / (r - 1);
    }
    getTangent(e, t) {
        let i = e - 1e-4, r = e + 1e-4;
        i < 0 && (i = 0), r > 1 && (r = 1);
        let a = this.getPoint(i), o = this.getPoint(r), c = t || (a.isVector2 ? new Z : new A);
        return c.copy(o).sub(a).normalize(), c;
    }
    getTangentAt(e, t) {
        let n = this.getUtoTmapping(e);
        return this.getTangent(n, t);
    }
    computeFrenetFrames(e, t) {
        let n = new A, i = [], r = [], a = [], o = new A, c = new ze;
        for(let f = 0; f <= e; f++){
            let m = f / e;
            i[f] = this.getTangentAt(m, new A);
        }
        r[0] = new A, a[0] = new A;
        let l = Number.MAX_VALUE, h = Math.abs(i[0].x), u = Math.abs(i[0].y), d = Math.abs(i[0].z);
        h <= l && (l = h, n.set(1, 0, 0)), u <= l && (l = u, n.set(0, 1, 0)), d <= l && n.set(0, 0, 1), o.crossVectors(i[0], n).normalize(), r[0].crossVectors(i[0], o), a[0].crossVectors(i[0], r[0]);
        for(let f = 1; f <= e; f++){
            if (r[f] = r[f - 1].clone(), a[f] = a[f - 1].clone(), o.crossVectors(i[f - 1], i[f]), o.length() > Number.EPSILON) {
                o.normalize();
                let m = Math.acos(ct(i[f - 1].dot(i[f]), -1, 1));
                r[f].applyMatrix4(c.makeRotationAxis(o, m));
            }
            a[f].crossVectors(i[f], r[f]);
        }
        if (t === !0) {
            let f = Math.acos(ct(r[0].dot(r[e]), -1, 1));
            f /= e, i[0].dot(o.crossVectors(r[0], r[e])) > 0 && (f = -f);
            for(let m = 1; m <= e; m++)r[m].applyMatrix4(c.makeRotationAxis(i[m], f * m)), a[m].crossVectors(i[m], r[m]);
        }
        return {
            tangents: i,
            normals: r,
            binormals: a
        };
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.arcLengthDivisions = e.arcLengthDivisions, this;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.6,
                type: "Curve",
                generator: "Curve.toJSON"
            }
        };
        return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
    }
    fromJSON(e) {
        return this.arcLengthDivisions = e.arcLengthDivisions, this;
    }
}, Ds = class extends Zt {
    constructor(e = 0, t = 0, n = 1, i = 1, r = 0, a = Math.PI * 2, o = !1, c = 0){
        super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = i, this.aStartAngle = r, this.aEndAngle = a, this.aClockwise = o, this.aRotation = c;
    }
    getPoint(e, t) {
        let n = t || new Z, i = Math.PI * 2, r = this.aEndAngle - this.aStartAngle, a = Math.abs(r) < Number.EPSILON;
        for(; r < 0;)r += i;
        for(; r > i;)r -= i;
        r < Number.EPSILON && (a ? r = 0 : r = i), this.aClockwise === !0 && !a && (r === i ? r = -i : r = r - i);
        let o = this.aStartAngle + e * r, c = this.aX + this.xRadius * Math.cos(o), l = this.aY + this.yRadius * Math.sin(o);
        if (this.aRotation !== 0) {
            let h = Math.cos(this.aRotation), u = Math.sin(this.aRotation), d = c - this.aX, f = l - this.aY;
            c = d * h - f * u + this.aX, l = d * u + f * h + this.aY;
        }
        return n.set(c, l);
    }
    copy(e) {
        return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
    }
}, ko = class extends Ds {
    constructor(e, t, n, i, r, a){
        super(e, t, n, n, i, r, a), this.isArcCurve = !0, this.type = "ArcCurve";
    }
};
function Jc() {
    let s1 = 0, e = 0, t = 0, n = 0;
    function i(r, a, o, c) {
        s1 = r, e = o, t = -3 * r + 3 * a - 2 * o - c, n = 2 * r - 2 * a + o + c;
    }
    return {
        initCatmullRom: function(r, a, o, c, l) {
            i(a, o, l * (o - r), l * (c - a));
        },
        initNonuniformCatmullRom: function(r, a, o, c, l, h, u) {
            let d = (a - r) / l - (o - r) / (l + h) + (o - a) / h, f = (o - a) / h - (c - a) / (h + u) + (c - o) / u;
            d *= h, f *= h, i(a, o, d, f);
        },
        calc: function(r) {
            let a = r * r, o = a * r;
            return s1 + e * r + t * a + n * o;
        }
    };
}
var xr = new A, io = new Jc, so = new Jc, ro = new Jc, Ho = class extends Zt {
    constructor(e = [], t = !1, n = "centripetal", i = .5){
        super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = i;
    }
    getPoint(e, t = new A) {
        let n = t, i = this.points, r = i.length, a = (r - (this.closed ? 0 : 1)) * e, o = Math.floor(a), c = a - o;
        this.closed ? o += o > 0 ? 0 : (Math.floor(Math.abs(o) / r) + 1) * r : c === 0 && o === r - 1 && (o = r - 2, c = 1);
        let l, h;
        this.closed || o > 0 ? l = i[(o - 1) % r] : (xr.subVectors(i[0], i[1]).add(i[0]), l = xr);
        let u = i[o % r], d = i[(o + 1) % r];
        if (this.closed || o + 2 < r ? h = i[(o + 2) % r] : (xr.subVectors(i[r - 1], i[r - 2]).add(i[r - 1]), h = xr), this.curveType === "centripetal" || this.curveType === "chordal") {
            let f = this.curveType === "chordal" ? .5 : .25, m = Math.pow(l.distanceToSquared(u), f), _ = Math.pow(u.distanceToSquared(d), f), g = Math.pow(d.distanceToSquared(h), f);
            _ < 1e-4 && (_ = 1), m < 1e-4 && (m = _), g < 1e-4 && (g = _), io.initNonuniformCatmullRom(l.x, u.x, d.x, h.x, m, _, g), so.initNonuniformCatmullRom(l.y, u.y, d.y, h.y, m, _, g), ro.initNonuniformCatmullRom(l.z, u.z, d.z, h.z, m, _, g);
        } else this.curveType === "catmullrom" && (io.initCatmullRom(l.x, u.x, d.x, h.x, this.tension), so.initCatmullRom(l.y, u.y, d.y, h.y, this.tension), ro.initCatmullRom(l.z, u.z, d.z, h.z, this.tension));
        return n.set(io.calc(c), so.calc(c), ro.calc(c)), n;
    }
    copy(e) {
        super.copy(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(i.clone());
        }
        return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
    }
    toJSON() {
        let e = super.toJSON();
        e.points = [];
        for(let t = 0, n = this.points.length; t < n; t++){
            let i = this.points[t];
            e.points.push(i.toArray());
        }
        return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(new A().fromArray(i));
        }
        return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
    }
};
function eu(s1, e, t, n, i) {
    let r = (n - e) * .5, a = (i - t) * .5, o = s1 * s1, c = s1 * o;
    return (2 * t - 2 * n + r + a) * c + (-3 * t + 3 * n - 2 * r - a) * o + r * s1 + t;
}
function Y0(s1, e) {
    let t = 1 - s1;
    return t * t * e;
}
function Z0(s1, e) {
    return 2 * (1 - s1) * s1 * e;
}
function J0(s1, e) {
    return s1 * s1 * e;
}
function bs(s1, e, t, n) {
    return Y0(s1, e) + Z0(s1, t) + J0(s1, n);
}
function $0(s1, e) {
    let t = 1 - s1;
    return t * t * t * e;
}
function K0(s1, e) {
    let t = 1 - s1;
    return 3 * t * t * s1 * e;
}
function Q0(s1, e) {
    return 3 * (1 - s1) * s1 * s1 * e;
}
function j0(s1, e) {
    return s1 * s1 * s1 * e;
}
function Es(s1, e, t, n, i) {
    return $0(s1, e) + K0(s1, t) + Q0(s1, n) + j0(s1, i);
}
var ia = class extends Zt {
    constructor(e = new Z, t = new Z, n = new Z, i = new Z){
        super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
    }
    getPoint(e, t = new Z) {
        let n = t, i = this.v0, r = this.v1, a = this.v2, o = this.v3;
        return n.set(Es(e, i.x, r.x, a.x, o.x), Es(e, i.y, r.y, a.y, o.y)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
    }
}, Go = class extends Zt {
    constructor(e = new A, t = new A, n = new A, i = new A){
        super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
    }
    getPoint(e, t = new A) {
        let n = t, i = this.v0, r = this.v1, a = this.v2, o = this.v3;
        return n.set(Es(e, i.x, r.x, a.x, o.x), Es(e, i.y, r.y, a.y, o.y), Es(e, i.z, r.z, a.z, o.z)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
    }
}, sa = class extends Zt {
    constructor(e = new Z, t = new Z){
        super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
    }
    getPoint(e, t = new Z) {
        let n = t;
        return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
    }
    getPointAt(e, t) {
        return this.getPoint(e, t);
    }
    getTangent(e, t = new Z) {
        return t.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(e, t) {
        return this.getTangent(e, t);
    }
    copy(e) {
        return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, Wo = class extends Zt {
    constructor(e = new A, t = new A){
        super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
    }
    getPoint(e, t = new A) {
        let n = t;
        return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
    }
    getPointAt(e, t) {
        return this.getPoint(e, t);
    }
    getTangent(e, t = new A) {
        return t.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(e, t) {
        return this.getTangent(e, t);
    }
    copy(e) {
        return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, ra = class extends Zt {
    constructor(e = new Z, t = new Z, n = new Z){
        super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
    }
    getPoint(e, t = new Z) {
        let n = t, i = this.v0, r = this.v1, a = this.v2;
        return n.set(bs(e, i.x, r.x, a.x), bs(e, i.y, r.y, a.y)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, aa = class extends Zt {
    constructor(e = new A, t = new A, n = new A){
        super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
    }
    getPoint(e, t = new A) {
        let n = t, i = this.v0, r = this.v1, a = this.v2;
        return n.set(bs(e, i.x, r.x, a.x), bs(e, i.y, r.y, a.y), bs(e, i.z, r.z, a.z)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, oa = class extends Zt {
    constructor(e = []){
        super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
    }
    getPoint(e, t = new Z) {
        let n = t, i = this.points, r = (i.length - 1) * e, a = Math.floor(r), o = r - a, c = i[a === 0 ? a : a - 1], l = i[a], h = i[a > i.length - 2 ? i.length - 1 : a + 1], u = i[a > i.length - 3 ? i.length - 1 : a + 2];
        return n.set(eu(o, c.x, l.x, h.x, u.x), eu(o, c.y, l.y, h.y, u.y)), n;
    }
    copy(e) {
        super.copy(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(i.clone());
        }
        return this;
    }
    toJSON() {
        let e = super.toJSON();
        e.points = [];
        for(let t = 0, n = this.points.length; t < n; t++){
            let i = this.points[t];
            e.points.push(i.toArray());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(new Z().fromArray(i));
        }
        return this;
    }
}, ca = Object.freeze({
    __proto__: null,
    ArcCurve: ko,
    CatmullRomCurve3: Ho,
    CubicBezierCurve: ia,
    CubicBezierCurve3: Go,
    EllipseCurve: Ds,
    LineCurve: sa,
    LineCurve3: Wo,
    QuadraticBezierCurve: ra,
    QuadraticBezierCurve3: aa,
    SplineCurve: oa
}), Xo = class extends Zt {
    constructor(){
        super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
    }
    add(e) {
        this.curves.push(e);
    }
    closePath() {
        let e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
        if (!e.equals(t)) {
            let n = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
            this.curves.push(new ca[n](t, e));
        }
        return this;
    }
    getPoint(e, t) {
        let n = e * this.getLength(), i = this.getCurveLengths(), r = 0;
        for(; r < i.length;){
            if (i[r] >= n) {
                let a = i[r] - n, o = this.curves[r], c = o.getLength(), l = c === 0 ? 0 : 1 - a / c;
                return o.getPointAt(l, t);
            }
            r++;
        }
        return null;
    }
    getLength() {
        let e = this.getCurveLengths();
        return e[e.length - 1];
    }
    updateArcLengths() {
        this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
    }
    getCurveLengths() {
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        let e = [], t = 0;
        for(let n = 0, i = this.curves.length; n < i; n++)t += this.curves[n].getLength(), e.push(t);
        return this.cacheLengths = e, e;
    }
    getSpacedPoints(e = 40) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPoint(n / e));
        return this.autoClose && t.push(t[0]), t;
    }
    getPoints(e = 12) {
        let t = [], n;
        for(let i = 0, r = this.curves; i < r.length; i++){
            let a = r[i], o = a.isEllipseCurve ? e * 2 : a.isLineCurve || a.isLineCurve3 ? 1 : a.isSplineCurve ? e * a.points.length : e, c = a.getPoints(o);
            for(let l = 0; l < c.length; l++){
                let h = c[l];
                n && n.equals(h) || (t.push(h), n = h);
            }
        }
        return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
    }
    copy(e) {
        super.copy(e), this.curves = [];
        for(let t = 0, n = e.curves.length; t < n; t++){
            let i = e.curves[t];
            this.curves.push(i.clone());
        }
        return this.autoClose = e.autoClose, this;
    }
    toJSON() {
        let e = super.toJSON();
        e.autoClose = this.autoClose, e.curves = [];
        for(let t = 0, n = this.curves.length; t < n; t++){
            let i = this.curves[t];
            e.curves.push(i.toJSON());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
        for(let t = 0, n = e.curves.length; t < n; t++){
            let i = e.curves[t];
            this.curves.push(new ca[i.type]().fromJSON(i));
        }
        return this;
    }
}, ji = class extends Xo {
    constructor(e){
        super(), this.type = "Path", this.currentPoint = new Z, e && this.setFromPoints(e);
    }
    setFromPoints(e) {
        this.moveTo(e[0].x, e[0].y);
        for(let t = 1, n = e.length; t < n; t++)this.lineTo(e[t].x, e[t].y);
        return this;
    }
    moveTo(e, t) {
        return this.currentPoint.set(e, t), this;
    }
    lineTo(e, t) {
        let n = new sa(this.currentPoint.clone(), new Z(e, t));
        return this.curves.push(n), this.currentPoint.set(e, t), this;
    }
    quadraticCurveTo(e, t, n, i) {
        let r = new ra(this.currentPoint.clone(), new Z(e, t), new Z(n, i));
        return this.curves.push(r), this.currentPoint.set(n, i), this;
    }
    bezierCurveTo(e, t, n, i, r, a) {
        let o = new ia(this.currentPoint.clone(), new Z(e, t), new Z(n, i), new Z(r, a));
        return this.curves.push(o), this.currentPoint.set(r, a), this;
    }
    splineThru(e) {
        let t = [
            this.currentPoint.clone()
        ].concat(e), n = new oa(t);
        return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
    }
    arc(e, t, n, i, r, a) {
        let o = this.currentPoint.x, c = this.currentPoint.y;
        return this.absarc(e + o, t + c, n, i, r, a), this;
    }
    absarc(e, t, n, i, r, a) {
        return this.absellipse(e, t, n, n, i, r, a), this;
    }
    ellipse(e, t, n, i, r, a, o, c) {
        let l = this.currentPoint.x, h = this.currentPoint.y;
        return this.absellipse(e + l, t + h, n, i, r, a, o, c), this;
    }
    absellipse(e, t, n, i, r, a, o, c) {
        let l = new Ds(e, t, n, i, r, a, o, c);
        if (this.curves.length > 0) {
            let u = l.getPoint(0);
            u.equals(this.currentPoint) || this.lineTo(u.x, u.y);
        }
        this.curves.push(l);
        let h = l.getPoint(1);
        return this.currentPoint.copy(h), this;
    }
    copy(e) {
        return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.currentPoint = this.currentPoint.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
    }
}, la = class s1 extends Ge {
    constructor(e = [
        new Z(0, -.5),
        new Z(.5, 0),
        new Z(0, .5)
    ], t = 12, n = 0, i = Math.PI * 2){
        super(), this.type = "LatheGeometry", this.parameters = {
            points: e,
            segments: t,
            phiStart: n,
            phiLength: i
        }, t = Math.floor(t), i = ct(i, 0, Math.PI * 2);
        let r = [], a = [], o = [], c = [], l = [], h = 1 / t, u = new A, d = new Z, f = new A, m = new A, _ = new A, g = 0, p = 0;
        for(let v = 0; v <= e.length - 1; v++)switch(v){
            case 0:
                g = e[v + 1].x - e[v].x, p = e[v + 1].y - e[v].y, f.x = p * 1, f.y = -g, f.z = p * 0, _.copy(f), f.normalize(), c.push(f.x, f.y, f.z);
                break;
            case e.length - 1:
                c.push(_.x, _.y, _.z);
                break;
            default:
                g = e[v + 1].x - e[v].x, p = e[v + 1].y - e[v].y, f.x = p * 1, f.y = -g, f.z = p * 0, m.copy(f), f.x += _.x, f.y += _.y, f.z += _.z, f.normalize(), c.push(f.x, f.y, f.z), _.copy(m);
        }
        for(let v = 0; v <= t; v++){
            let x = n + v * h * i, y = Math.sin(x), b = Math.cos(x);
            for(let w = 0; w <= e.length - 1; w++){
                u.x = e[w].x * y, u.y = e[w].y, u.z = e[w].x * b, a.push(u.x, u.y, u.z), d.x = v / t, d.y = w / (e.length - 1), o.push(d.x, d.y);
                let R = c[3 * w + 0] * y, I = c[3 * w + 1], M = c[3 * w + 0] * b;
                l.push(R, I, M);
            }
        }
        for(let v = 0; v < t; v++)for(let x = 0; x < e.length - 1; x++){
            let y = x + v * e.length, b = y, w = y + e.length, R = y + e.length + 1, I = y + 1;
            r.push(b, w, I), r.push(R, I, w);
        }
        this.setIndex(r), this.setAttribute("position", new ve(a, 3)), this.setAttribute("uv", new ve(o, 2)), this.setAttribute("normal", new ve(l, 3));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.points, e.segments, e.phiStart, e.phiLength);
    }
}, qo = class s1 extends la {
    constructor(e = 1, t = 1, n = 4, i = 8){
        let r = new ji;
        r.absarc(0, -t / 2, e, Math.PI * 1.5, 0), r.absarc(0, t / 2, e, 0, Math.PI * .5), super(r.getPoints(n), i), this.type = "CapsuleGeometry", this.parameters = {
            radius: e,
            length: t,
            capSegments: n,
            radialSegments: i
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.length, e.capSegments, e.radialSegments);
    }
}, Yo = class s1 extends Ge {
    constructor(e = 1, t = 32, n = 0, i = Math.PI * 2){
        super(), this.type = "CircleGeometry", this.parameters = {
            radius: e,
            segments: t,
            thetaStart: n,
            thetaLength: i
        }, t = Math.max(3, t);
        let r = [], a = [], o = [], c = [], l = new A, h = new Z;
        a.push(0, 0, 0), o.push(0, 0, 1), c.push(.5, .5);
        for(let u = 0, d = 3; u <= t; u++, d += 3){
            let f = n + u / t * i;
            l.x = e * Math.cos(f), l.y = e * Math.sin(f), a.push(l.x, l.y, l.z), o.push(0, 0, 1), h.x = (a[d] / e + 1) / 2, h.y = (a[d + 1] / e + 1) / 2, c.push(h.x, h.y);
        }
        for(let u = 1; u <= t; u++)r.push(u, u + 1, 0);
        this.setIndex(r), this.setAttribute("position", new ve(a, 3)), this.setAttribute("normal", new ve(o, 3)), this.setAttribute("uv", new ve(c, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.segments, e.thetaStart, e.thetaLength);
    }
}, Ns = class s1 extends Ge {
    constructor(e = 1, t = 1, n = 1, i = 32, r = 1, a = !1, o = 0, c = Math.PI * 2){
        super(), this.type = "CylinderGeometry", this.parameters = {
            radiusTop: e,
            radiusBottom: t,
            height: n,
            radialSegments: i,
            heightSegments: r,
            openEnded: a,
            thetaStart: o,
            thetaLength: c
        };
        let l = this;
        i = Math.floor(i), r = Math.floor(r);
        let h = [], u = [], d = [], f = [], m = 0, _ = [], g = n / 2, p = 0;
        v(), a === !1 && (e > 0 && x(!0), t > 0 && x(!1)), this.setIndex(h), this.setAttribute("position", new ve(u, 3)), this.setAttribute("normal", new ve(d, 3)), this.setAttribute("uv", new ve(f, 2));
        function v() {
            let y = new A, b = new A, w = 0, R = (t - e) / n;
            for(let I = 0; I <= r; I++){
                let M = [], T = I / r, O = T * (t - e) + e;
                for(let Y = 0; Y <= i; Y++){
                    let $ = Y / i, U = $ * c + o, z = Math.sin(U), q = Math.cos(U);
                    b.x = O * z, b.y = -T * n + g, b.z = O * q, u.push(b.x, b.y, b.z), y.set(z, R, q).normalize(), d.push(y.x, y.y, y.z), f.push($, 1 - T), M.push(m++);
                }
                _.push(M);
            }
            for(let I = 0; I < i; I++)for(let M = 0; M < r; M++){
                let T = _[M][I], O = _[M + 1][I], Y = _[M + 1][I + 1], $ = _[M][I + 1];
                h.push(T, O, $), h.push(O, Y, $), w += 6;
            }
            l.addGroup(p, w, 0), p += w;
        }
        function x(y) {
            let b = m, w = new Z, R = new A, I = 0, M = y === !0 ? e : t, T = y === !0 ? 1 : -1;
            for(let Y = 1; Y <= i; Y++)u.push(0, g * T, 0), d.push(0, T, 0), f.push(.5, .5), m++;
            let O = m;
            for(let Y = 0; Y <= i; Y++){
                let U = Y / i * c + o, z = Math.cos(U), q = Math.sin(U);
                R.x = M * q, R.y = g * T, R.z = M * z, u.push(R.x, R.y, R.z), d.push(0, T, 0), w.x = z * .5 + .5, w.y = q * .5 * T + .5, f.push(w.x, w.y), m++;
            }
            for(let Y = 0; Y < i; Y++){
                let $ = b + Y, U = O + Y;
                y === !0 ? h.push(U, U + 1, $) : h.push(U + 1, U, $), I += 3;
            }
            l.addGroup(p, I, y === !0 ? 1 : 2), p += I;
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
    }
}, Zo = class s1 extends Ns {
    constructor(e = 1, t = 1, n = 32, i = 1, r = !1, a = 0, o = Math.PI * 2){
        super(0, e, t, n, i, r, a, o), this.type = "ConeGeometry", this.parameters = {
            radius: e,
            height: t,
            radialSegments: n,
            heightSegments: i,
            openEnded: r,
            thetaStart: a,
            thetaLength: o
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
    }
}, di = class s1 extends Ge {
    constructor(e = [], t = [], n = 1, i = 0){
        super(), this.type = "PolyhedronGeometry", this.parameters = {
            vertices: e,
            indices: t,
            radius: n,
            detail: i
        };
        let r = [], a = [];
        o(i), l(n), h(), this.setAttribute("position", new ve(r, 3)), this.setAttribute("normal", new ve(r.slice(), 3)), this.setAttribute("uv", new ve(a, 2)), i === 0 ? this.computeVertexNormals() : this.normalizeNormals();
        function o(v) {
            let x = new A, y = new A, b = new A;
            for(let w = 0; w < t.length; w += 3)f(t[w + 0], x), f(t[w + 1], y), f(t[w + 2], b), c(x, y, b, v);
        }
        function c(v, x, y, b) {
            let w = b + 1, R = [];
            for(let I = 0; I <= w; I++){
                R[I] = [];
                let M = v.clone().lerp(y, I / w), T = x.clone().lerp(y, I / w), O = w - I;
                for(let Y = 0; Y <= O; Y++)Y === 0 && I === w ? R[I][Y] = M : R[I][Y] = M.clone().lerp(T, Y / O);
            }
            for(let I = 0; I < w; I++)for(let M = 0; M < 2 * (w - I) - 1; M++){
                let T = Math.floor(M / 2);
                M % 2 === 0 ? (d(R[I][T + 1]), d(R[I + 1][T]), d(R[I][T])) : (d(R[I][T + 1]), d(R[I + 1][T + 1]), d(R[I + 1][T]));
            }
        }
        function l(v) {
            let x = new A;
            for(let y = 0; y < r.length; y += 3)x.x = r[y + 0], x.y = r[y + 1], x.z = r[y + 2], x.normalize().multiplyScalar(v), r[y + 0] = x.x, r[y + 1] = x.y, r[y + 2] = x.z;
        }
        function h() {
            let v = new A;
            for(let x = 0; x < r.length; x += 3){
                v.x = r[x + 0], v.y = r[x + 1], v.z = r[x + 2];
                let y = g(v) / 2 / Math.PI + .5, b = p(v) / Math.PI + .5;
                a.push(y, 1 - b);
            }
            m(), u();
        }
        function u() {
            for(let v = 0; v < a.length; v += 6){
                let x = a[v + 0], y = a[v + 2], b = a[v + 4], w = Math.max(x, y, b), R = Math.min(x, y, b);
                w > .9 && R < .1 && (x < .2 && (a[v + 0] += 1), y < .2 && (a[v + 2] += 1), b < .2 && (a[v + 4] += 1));
            }
        }
        function d(v) {
            r.push(v.x, v.y, v.z);
        }
        function f(v, x) {
            let y = v * 3;
            x.x = e[y + 0], x.y = e[y + 1], x.z = e[y + 2];
        }
        function m() {
            let v = new A, x = new A, y = new A, b = new A, w = new Z, R = new Z, I = new Z;
            for(let M = 0, T = 0; M < r.length; M += 9, T += 6){
                v.set(r[M + 0], r[M + 1], r[M + 2]), x.set(r[M + 3], r[M + 4], r[M + 5]), y.set(r[M + 6], r[M + 7], r[M + 8]), w.set(a[T + 0], a[T + 1]), R.set(a[T + 2], a[T + 3]), I.set(a[T + 4], a[T + 5]), b.copy(v).add(x).add(y).divideScalar(3);
                let O = g(b);
                _(w, T + 0, v, O), _(R, T + 2, x, O), _(I, T + 4, y, O);
            }
        }
        function _(v, x, y, b) {
            b < 0 && v.x === 1 && (a[x] = v.x - 1), y.x === 0 && y.z === 0 && (a[x] = b / 2 / Math.PI + .5);
        }
        function g(v) {
            return Math.atan2(v.z, -v.x);
        }
        function p(v) {
            return Math.atan2(-v.y, Math.sqrt(v.x * v.x + v.z * v.z));
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.vertices, e.indices, e.radius, e.details);
    }
}, Jo = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = (1 + Math.sqrt(5)) / 2, i = 1 / n, r = [
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            0,
            -i,
            -n,
            0,
            -i,
            n,
            0,
            i,
            -n,
            0,
            i,
            n,
            -i,
            -n,
            0,
            -i,
            n,
            0,
            i,
            -n,
            0,
            i,
            n,
            0,
            -n,
            0,
            -i,
            n,
            0,
            -i,
            -n,
            0,
            i,
            n,
            0,
            i
        ], a = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        super(r, a, e, t), this.type = "DodecahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, vr = new A, yr = new A, ao = new A, Mr = new Un, $o = class extends Ge {
    constructor(e = null, t = 1){
        if (super(), this.type = "EdgesGeometry", this.parameters = {
            geometry: e,
            thresholdAngle: t
        }, e !== null) {
            let i = Math.pow(10, 4), r = Math.cos(ai * t), a = e.getIndex(), o = e.getAttribute("position"), c = a ? a.count : o.count, l = [
                0,
                0,
                0
            ], h = [
                "a",
                "b",
                "c"
            ], u = new Array(3), d = {}, f = [];
            for(let m = 0; m < c; m += 3){
                a ? (l[0] = a.getX(m), l[1] = a.getX(m + 1), l[2] = a.getX(m + 2)) : (l[0] = m, l[1] = m + 1, l[2] = m + 2);
                let { a: _ , b: g , c: p  } = Mr;
                if (_.fromBufferAttribute(o, l[0]), g.fromBufferAttribute(o, l[1]), p.fromBufferAttribute(o, l[2]), Mr.getNormal(ao), u[0] = `${Math.round(_.x * i)},${Math.round(_.y * i)},${Math.round(_.z * i)}`, u[1] = `${Math.round(g.x * i)},${Math.round(g.y * i)},${Math.round(g.z * i)}`, u[2] = `${Math.round(p.x * i)},${Math.round(p.y * i)},${Math.round(p.z * i)}`, !(u[0] === u[1] || u[1] === u[2] || u[2] === u[0])) for(let v = 0; v < 3; v++){
                    let x = (v + 1) % 3, y = u[v], b = u[x], w = Mr[h[v]], R = Mr[h[x]], I = `${y}_${b}`, M = `${b}_${y}`;
                    M in d && d[M] ? (ao.dot(d[M].normal) <= r && (f.push(w.x, w.y, w.z), f.push(R.x, R.y, R.z)), d[M] = null) : I in d || (d[I] = {
                        index0: l[v],
                        index1: l[x],
                        normal: ao.clone()
                    });
                }
            }
            for(let m in d)if (d[m]) {
                let { index0: _ , index1: g  } = d[m];
                vr.fromBufferAttribute(o, _), yr.fromBufferAttribute(o, g), f.push(vr.x, vr.y, vr.z), f.push(yr.x, yr.y, yr.z);
            }
            this.setAttribute("position", new ve(f, 3));
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
}, Fn = class extends ji {
    constructor(e){
        super(e), this.uuid = kt(), this.type = "Shape", this.holes = [];
    }
    getPointsHoles(e) {
        let t = [];
        for(let n = 0, i = this.holes.length; n < i; n++)t[n] = this.holes[n].getPoints(e);
        return t;
    }
    extractPoints(e) {
        return {
            shape: this.getPoints(e),
            holes: this.getPointsHoles(e)
        };
    }
    copy(e) {
        super.copy(e), this.holes = [];
        for(let t = 0, n = e.holes.length; t < n; t++){
            let i = e.holes[t];
            this.holes.push(i.clone());
        }
        return this;
    }
    toJSON() {
        let e = super.toJSON();
        e.uuid = this.uuid, e.holes = [];
        for(let t = 0, n = this.holes.length; t < n; t++){
            let i = this.holes[t];
            e.holes.push(i.toJSON());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
        for(let t = 0, n = e.holes.length; t < n; t++){
            let i = e.holes[t];
            this.holes.push(new ji().fromJSON(i));
        }
        return this;
    }
}, ex = {
    triangulate: function(s1, e, t = 2) {
        let n = e && e.length, i = n ? e[0] * t : s1.length, r = Pd(s1, 0, i, t, !0), a = [];
        if (!r || r.next === r.prev) return a;
        let o, c, l, h, u, d, f;
        if (n && (r = rx(s1, e, r, t)), s1.length > 80 * t) {
            o = l = s1[0], c = h = s1[1];
            for(let m = t; m < i; m += t)u = s1[m], d = s1[m + 1], u < o && (o = u), d < c && (c = d), u > l && (l = u), d > h && (h = d);
            f = Math.max(l - o, h - c), f = f !== 0 ? 32767 / f : 0;
        }
        return Os(r, a, t, o, c, f, 0), a;
    }
};
function Pd(s1, e, t, n, i) {
    let r, a;
    if (i === gx(s1, e, t, n) > 0) for(r = e; r < t; r += n)a = tu(r, s1[r], s1[r + 1], a);
    else for(r = t - n; r >= e; r -= n)a = tu(r, s1[r], s1[r + 1], a);
    return a && Ma(a, a.next) && (Bs(a), a = a.next), a;
}
function fi(s1, e) {
    if (!s1) return s1;
    e || (e = s1);
    let t = s1, n;
    do if (n = !1, !t.steiner && (Ma(t, t.next) || st(t.prev, t, t.next) === 0)) {
        if (Bs(t), t = e = t.prev, t === t.next) break;
        n = !0;
    } else t = t.next;
    while (n || t !== e)
    return e;
}
function Os(s1, e, t, n, i, r, a) {
    if (!s1) return;
    !a && r && hx(s1, n, i, r);
    let o = s1, c, l;
    for(; s1.prev !== s1.next;){
        if (c = s1.prev, l = s1.next, r ? nx(s1, n, i, r) : tx(s1)) {
            e.push(c.i / t | 0), e.push(s1.i / t | 0), e.push(l.i / t | 0), Bs(s1), s1 = l.next, o = l.next;
            continue;
        }
        if (s1 = l, s1 === o) {
            a ? a === 1 ? (s1 = ix(fi(s1), e, t), Os(s1, e, t, n, i, r, 2)) : a === 2 && sx(s1, e, t, n, i, r) : Os(fi(s1), e, t, n, i, r, 1);
            break;
        }
    }
}
function tx(s1) {
    let e = s1.prev, t = s1, n = s1.next;
    if (st(e, t, n) >= 0) return !1;
    let i = e.x, r = t.x, a = n.x, o = e.y, c = t.y, l = n.y, h = i < r ? i < a ? i : a : r < a ? r : a, u = o < c ? o < l ? o : l : c < l ? c : l, d = i > r ? i > a ? i : a : r > a ? r : a, f = o > c ? o > l ? o : l : c > l ? c : l, m = n.next;
    for(; m !== e;){
        if (m.x >= h && m.x <= d && m.y >= u && m.y <= f && Gi(i, o, r, c, a, l, m.x, m.y) && st(m.prev, m, m.next) >= 0) return !1;
        m = m.next;
    }
    return !0;
}
function nx(s1, e, t, n) {
    let i = s1.prev, r = s1, a = s1.next;
    if (st(i, r, a) >= 0) return !1;
    let o = i.x, c = r.x, l = a.x, h = i.y, u = r.y, d = a.y, f = o < c ? o < l ? o : l : c < l ? c : l, m = h < u ? h < d ? h : d : u < d ? u : d, _ = o > c ? o > l ? o : l : c > l ? c : l, g = h > u ? h > d ? h : d : u > d ? u : d, p = Ko(f, m, e, t, n), v = Ko(_, g, e, t, n), x = s1.prevZ, y = s1.nextZ;
    for(; x && x.z >= p && y && y.z <= v;){
        if (x.x >= f && x.x <= _ && x.y >= m && x.y <= g && x !== i && x !== a && Gi(o, h, c, u, l, d, x.x, x.y) && st(x.prev, x, x.next) >= 0 || (x = x.prevZ, y.x >= f && y.x <= _ && y.y >= m && y.y <= g && y !== i && y !== a && Gi(o, h, c, u, l, d, y.x, y.y) && st(y.prev, y, y.next) >= 0)) return !1;
        y = y.nextZ;
    }
    for(; x && x.z >= p;){
        if (x.x >= f && x.x <= _ && x.y >= m && x.y <= g && x !== i && x !== a && Gi(o, h, c, u, l, d, x.x, x.y) && st(x.prev, x, x.next) >= 0) return !1;
        x = x.prevZ;
    }
    for(; y && y.z <= v;){
        if (y.x >= f && y.x <= _ && y.y >= m && y.y <= g && y !== i && y !== a && Gi(o, h, c, u, l, d, y.x, y.y) && st(y.prev, y, y.next) >= 0) return !1;
        y = y.nextZ;
    }
    return !0;
}
function ix(s1, e, t) {
    let n = s1;
    do {
        let i = n.prev, r = n.next.next;
        !Ma(i, r) && Ld(i, n, n.next, r) && Fs(i, r) && Fs(r, i) && (e.push(i.i / t | 0), e.push(n.i / t | 0), e.push(r.i / t | 0), Bs(n), Bs(n.next), n = s1 = r), n = n.next;
    }while (n !== s1)
    return fi(n);
}
function sx(s1, e, t, n, i, r) {
    let a = s1;
    do {
        let o = a.next.next;
        for(; o !== a.prev;){
            if (a.i !== o.i && fx(a, o)) {
                let c = Id(a, o);
                a = fi(a, a.next), c = fi(c, c.next), Os(a, e, t, n, i, r, 0), Os(c, e, t, n, i, r, 0);
                return;
            }
            o = o.next;
        }
        a = a.next;
    }while (a !== s1)
}
function rx(s1, e, t, n) {
    let i = [], r, a, o, c, l;
    for(r = 0, a = e.length; r < a; r++)o = e[r] * n, c = r < a - 1 ? e[r + 1] * n : s1.length, l = Pd(s1, o, c, n, !1), l === l.next && (l.steiner = !0), i.push(dx(l));
    for(i.sort(ax), r = 0; r < i.length; r++)t = ox(i[r], t);
    return t;
}
function ax(s1, e) {
    return s1.x - e.x;
}
function ox(s1, e) {
    let t = cx(s1, e);
    if (!t) return e;
    let n = Id(t, s1);
    return fi(n, n.next), fi(t, t.next);
}
function cx(s1, e) {
    let t = e, n = -1 / 0, i, r = s1.x, a = s1.y;
    do {
        if (a <= t.y && a >= t.next.y && t.next.y !== t.y) {
            let d = t.x + (a - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
            if (d <= r && d > n && (n = d, i = t.x < t.next.x ? t : t.next, d === r)) return i;
        }
        t = t.next;
    }while (t !== e)
    if (!i) return null;
    let o = i, c = i.x, l = i.y, h = 1 / 0, u;
    t = i;
    do r >= t.x && t.x >= c && r !== t.x && Gi(a < l ? r : n, a, c, l, a < l ? n : r, a, t.x, t.y) && (u = Math.abs(a - t.y) / (r - t.x), Fs(t, s1) && (u < h || u === h && (t.x > i.x || t.x === i.x && lx(i, t))) && (i = t, h = u)), t = t.next;
    while (t !== o)
    return i;
}
function lx(s1, e) {
    return st(s1.prev, s1, e.prev) < 0 && st(e.next, s1, s1.next) < 0;
}
function hx(s1, e, t, n) {
    let i = s1;
    do i.z === 0 && (i.z = Ko(i.x, i.y, e, t, n)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
    while (i !== s1)
    i.prevZ.nextZ = null, i.prevZ = null, ux(i);
}
function ux(s1) {
    let e, t, n, i, r, a, o, c, l = 1;
    do {
        for(t = s1, s1 = null, r = null, a = 0; t;){
            for(a++, n = t, o = 0, e = 0; e < l && (o++, n = n.nextZ, !!n); e++);
            for(c = l; o > 0 || c > 0 && n;)o !== 0 && (c === 0 || !n || t.z <= n.z) ? (i = t, t = t.nextZ, o--) : (i = n, n = n.nextZ, c--), r ? r.nextZ = i : s1 = i, i.prevZ = r, r = i;
            t = n;
        }
        r.nextZ = null, l *= 2;
    }while (a > 1)
    return s1;
}
function Ko(s1, e, t, n, i) {
    return s1 = (s1 - t) * i | 0, e = (e - n) * i | 0, s1 = (s1 | s1 << 8) & 16711935, s1 = (s1 | s1 << 4) & 252645135, s1 = (s1 | s1 << 2) & 858993459, s1 = (s1 | s1 << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, s1 | e << 1;
}
function dx(s1) {
    let e = s1, t = s1;
    do (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
    while (e !== s1)
    return t;
}
function Gi(s1, e, t, n, i, r, a, o) {
    return (i - a) * (e - o) >= (s1 - a) * (r - o) && (s1 - a) * (n - o) >= (t - a) * (e - o) && (t - a) * (r - o) >= (i - a) * (n - o);
}
function fx(s1, e) {
    return s1.next.i !== e.i && s1.prev.i !== e.i && !px(s1, e) && (Fs(s1, e) && Fs(e, s1) && mx(s1, e) && (st(s1.prev, s1, e.prev) || st(s1, e.prev, e)) || Ma(s1, e) && st(s1.prev, s1, s1.next) > 0 && st(e.prev, e, e.next) > 0);
}
function st(s1, e, t) {
    return (e.y - s1.y) * (t.x - e.x) - (e.x - s1.x) * (t.y - e.y);
}
function Ma(s1, e) {
    return s1.x === e.x && s1.y === e.y;
}
function Ld(s1, e, t, n) {
    let i = br(st(s1, e, t)), r = br(st(s1, e, n)), a = br(st(t, n, s1)), o = br(st(t, n, e));
    return !!(i !== r && a !== o || i === 0 && Sr(s1, t, e) || r === 0 && Sr(s1, n, e) || a === 0 && Sr(t, s1, n) || o === 0 && Sr(t, e, n));
}
function Sr(s1, e, t) {
    return e.x <= Math.max(s1.x, t.x) && e.x >= Math.min(s1.x, t.x) && e.y <= Math.max(s1.y, t.y) && e.y >= Math.min(s1.y, t.y);
}
function br(s1) {
    return s1 > 0 ? 1 : s1 < 0 ? -1 : 0;
}
function px(s1, e) {
    let t = s1;
    do {
        if (t.i !== s1.i && t.next.i !== s1.i && t.i !== e.i && t.next.i !== e.i && Ld(t, t.next, s1, e)) return !0;
        t = t.next;
    }while (t !== s1)
    return !1;
}
function Fs(s1, e) {
    return st(s1.prev, s1, s1.next) < 0 ? st(s1, e, s1.next) >= 0 && st(s1, s1.prev, e) >= 0 : st(s1, e, s1.prev) < 0 || st(s1, s1.next, e) < 0;
}
function mx(s1, e) {
    let t = s1, n = !1, i = (s1.x + e.x) / 2, r = (s1.y + e.y) / 2;
    do t.y > r != t.next.y > r && t.next.y !== t.y && i < (t.next.x - t.x) * (r - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
    while (t !== s1)
    return n;
}
function Id(s1, e) {
    let t = new Qo(s1.i, s1.x, s1.y), n = new Qo(e.i, e.x, e.y), i = s1.next, r = e.prev;
    return s1.next = e, e.prev = s1, t.next = i, i.prev = t, n.next = t, t.prev = n, r.next = n, n.prev = r, n;
}
function tu(s1, e, t, n) {
    let i = new Qo(s1, e, t);
    return n ? (i.next = n.next, i.prev = n, n.next.prev = i, n.next = i) : (i.prev = i, i.next = i), i;
}
function Bs(s1) {
    s1.next.prev = s1.prev, s1.prev.next = s1.next, s1.prevZ && (s1.prevZ.nextZ = s1.nextZ), s1.nextZ && (s1.nextZ.prevZ = s1.prevZ);
}
function Qo(s1, e, t) {
    this.i = s1, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function gx(s1, e, t, n) {
    let i = 0;
    for(let r = e, a = t - n; r < t; r += n)i += (s1[a] - s1[r]) * (s1[r + 1] + s1[a + 1]), a = r;
    return i;
}
var yn = class s1 {
    static area(e) {
        let t = e.length, n = 0;
        for(let i = t - 1, r = 0; r < t; i = r++)n += e[i].x * e[r].y - e[r].x * e[i].y;
        return n * .5;
    }
    static isClockWise(e) {
        return s1.area(e) < 0;
    }
    static triangulateShape(e, t) {
        let n = [], i = [], r = [];
        nu(e), iu(n, e);
        let a = e.length;
        t.forEach(nu);
        for(let c = 0; c < t.length; c++)i.push(a), a += t[c].length, iu(n, t[c]);
        let o = ex.triangulate(n, i);
        for(let c = 0; c < o.length; c += 3)r.push(o.slice(c, c + 3));
        return r;
    }
};
function nu(s1) {
    let e = s1.length;
    e > 2 && s1[e - 1].equals(s1[0]) && s1.pop();
}
function iu(s1, e) {
    for(let t = 0; t < e.length; t++)s1.push(e[t].x), s1.push(e[t].y);
}
var jo = class s1 extends Ge {
    constructor(e = new Fn([
        new Z(.5, .5),
        new Z(-.5, .5),
        new Z(-.5, -.5),
        new Z(.5, -.5)
    ]), t = {}){
        super(), this.type = "ExtrudeGeometry", this.parameters = {
            shapes: e,
            options: t
        }, e = Array.isArray(e) ? e : [
            e
        ];
        let n = this, i = [], r = [];
        for(let o = 0, c = e.length; o < c; o++){
            let l = e[o];
            a(l);
        }
        this.setAttribute("position", new ve(i, 3)), this.setAttribute("uv", new ve(r, 2)), this.computeVertexNormals();
        function a(o) {
            let c = [], l = t.curveSegments !== void 0 ? t.curveSegments : 12, h = t.steps !== void 0 ? t.steps : 1, u = t.depth !== void 0 ? t.depth : 1, d = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, f = t.bevelThickness !== void 0 ? t.bevelThickness : .2, m = t.bevelSize !== void 0 ? t.bevelSize : f - .1, _ = t.bevelOffset !== void 0 ? t.bevelOffset : 0, g = t.bevelSegments !== void 0 ? t.bevelSegments : 3, p = t.extrudePath, v = t.UVGenerator !== void 0 ? t.UVGenerator : _x, x, y = !1, b, w, R, I;
            p && (x = p.getSpacedPoints(h), y = !0, d = !1, b = p.computeFrenetFrames(h, !1), w = new A, R = new A, I = new A), d || (g = 0, f = 0, m = 0, _ = 0);
            let M = o.extractPoints(l), T = M.shape, O = M.holes;
            if (!yn.isClockWise(T)) {
                T = T.reverse();
                for(let L = 0, oe = O.length; L < oe; L++){
                    let X = O[L];
                    yn.isClockWise(X) && (O[L] = X.reverse());
                }
            }
            let $ = yn.triangulateShape(T, O), U = T;
            for(let L = 0, oe = O.length; L < oe; L++){
                let X = O[L];
                T = T.concat(X);
            }
            function z(L, oe, X) {
                return oe || console.error("THREE.ExtrudeGeometry: vec does not exist"), L.clone().addScaledVector(oe, X);
            }
            let q = T.length, H = $.length;
            function ne(L, oe, X) {
                let ie, J, Se, me = L.x - oe.x, ye = L.y - oe.y, Ne = X.x - L.x, qe = X.y - L.y, rt = me * me + ye * ye, C = me * qe - ye * Ne;
                if (Math.abs(C) > Number.EPSILON) {
                    let S = Math.sqrt(rt), B = Math.sqrt(Ne * Ne + qe * qe), ee = oe.x - ye / S, j = oe.y + me / S, te = X.x - qe / B, Me = X.y + Ne / B, re = ((te - ee) * qe - (Me - j) * Ne) / (me * qe - ye * Ne);
                    ie = ee + me * re - L.x, J = j + ye * re - L.y;
                    let de = ie * ie + J * J;
                    if (de <= 2) return new Z(ie, J);
                    Se = Math.sqrt(de / 2);
                } else {
                    let S = !1;
                    me > Number.EPSILON ? Ne > Number.EPSILON && (S = !0) : me < -Number.EPSILON ? Ne < -Number.EPSILON && (S = !0) : Math.sign(ye) === Math.sign(qe) && (S = !0), S ? (ie = -ye, J = me, Se = Math.sqrt(rt)) : (ie = me, J = ye, Se = Math.sqrt(rt / 2));
                }
                return new Z(ie / Se, J / Se);
            }
            let W = [];
            for(let L = 0, oe = U.length, X = oe - 1, ie = L + 1; L < oe; L++, X++, ie++)X === oe && (X = 0), ie === oe && (ie = 0), W[L] = ne(U[L], U[X], U[ie]);
            let K = [], D, G = W.concat();
            for(let L = 0, oe = O.length; L < oe; L++){
                let X = O[L];
                D = [];
                for(let ie = 0, J = X.length, Se = J - 1, me = ie + 1; ie < J; ie++, Se++, me++)Se === J && (Se = 0), me === J && (me = 0), D[ie] = ne(X[ie], X[Se], X[me]);
                K.push(D), G = G.concat(D);
            }
            for(let L = 0; L < g; L++){
                let oe = L / g, X = f * Math.cos(oe * Math.PI / 2), ie = m * Math.sin(oe * Math.PI / 2) + _;
                for(let J = 0, Se = U.length; J < Se; J++){
                    let me = z(U[J], W[J], ie);
                    Ee(me.x, me.y, -X);
                }
                for(let J = 0, Se = O.length; J < Se; J++){
                    let me = O[J];
                    D = K[J];
                    for(let ye = 0, Ne = me.length; ye < Ne; ye++){
                        let qe = z(me[ye], D[ye], ie);
                        Ee(qe.x, qe.y, -X);
                    }
                }
            }
            let he = m + _;
            for(let L = 0; L < q; L++){
                let oe = d ? z(T[L], G[L], he) : T[L];
                y ? (R.copy(b.normals[0]).multiplyScalar(oe.x), w.copy(b.binormals[0]).multiplyScalar(oe.y), I.copy(x[0]).add(R).add(w), Ee(I.x, I.y, I.z)) : Ee(oe.x, oe.y, 0);
            }
            for(let L = 1; L <= h; L++)for(let oe = 0; oe < q; oe++){
                let X = d ? z(T[oe], G[oe], he) : T[oe];
                y ? (R.copy(b.normals[L]).multiplyScalar(X.x), w.copy(b.binormals[L]).multiplyScalar(X.y), I.copy(x[L]).add(R).add(w), Ee(I.x, I.y, I.z)) : Ee(X.x, X.y, u / h * L);
            }
            for(let L = g - 1; L >= 0; L--){
                let oe = L / g, X = f * Math.cos(oe * Math.PI / 2), ie = m * Math.sin(oe * Math.PI / 2) + _;
                for(let J = 0, Se = U.length; J < Se; J++){
                    let me = z(U[J], W[J], ie);
                    Ee(me.x, me.y, u + X);
                }
                for(let J = 0, Se = O.length; J < Se; J++){
                    let me = O[J];
                    D = K[J];
                    for(let ye = 0, Ne = me.length; ye < Ne; ye++){
                        let qe = z(me[ye], D[ye], ie);
                        y ? Ee(qe.x, qe.y + x[h - 1].y, x[h - 1].x + X) : Ee(qe.x, qe.y, u + X);
                    }
                }
            }
            fe(), _e();
            function fe() {
                let L = i.length / 3;
                if (d) {
                    let oe = 0, X = q * oe;
                    for(let ie = 0; ie < H; ie++){
                        let J = $[ie];
                        Te(J[2] + X, J[1] + X, J[0] + X);
                    }
                    oe = h + g * 2, X = q * oe;
                    for(let ie = 0; ie < H; ie++){
                        let J = $[ie];
                        Te(J[0] + X, J[1] + X, J[2] + X);
                    }
                } else {
                    for(let oe = 0; oe < H; oe++){
                        let X = $[oe];
                        Te(X[2], X[1], X[0]);
                    }
                    for(let oe = 0; oe < H; oe++){
                        let X = $[oe];
                        Te(X[0] + q * h, X[1] + q * h, X[2] + q * h);
                    }
                }
                n.addGroup(L, i.length / 3 - L, 0);
            }
            function _e() {
                let L = i.length / 3, oe = 0;
                we(U, oe), oe += U.length;
                for(let X = 0, ie = O.length; X < ie; X++){
                    let J = O[X];
                    we(J, oe), oe += J.length;
                }
                n.addGroup(L, i.length / 3 - L, 1);
            }
            function we(L, oe) {
                let X = L.length;
                for(; --X >= 0;){
                    let ie = X, J = X - 1;
                    J < 0 && (J = L.length - 1);
                    for(let Se = 0, me = h + g * 2; Se < me; Se++){
                        let ye = q * Se, Ne = q * (Se + 1), qe = oe + ie + ye, rt = oe + J + ye, C = oe + J + Ne, S = oe + ie + Ne;
                        Ye(qe, rt, C, S);
                    }
                }
            }
            function Ee(L, oe, X) {
                c.push(L), c.push(oe), c.push(X);
            }
            function Te(L, oe, X) {
                it(L), it(oe), it(X);
                let ie = i.length / 3, J = v.generateTopUV(n, i, ie - 3, ie - 2, ie - 1);
                Ce(J[0]), Ce(J[1]), Ce(J[2]);
            }
            function Ye(L, oe, X, ie) {
                it(L), it(oe), it(ie), it(oe), it(X), it(ie);
                let J = i.length / 3, Se = v.generateSideWallUV(n, i, J - 6, J - 3, J - 2, J - 1);
                Ce(Se[0]), Ce(Se[1]), Ce(Se[3]), Ce(Se[1]), Ce(Se[2]), Ce(Se[3]);
            }
            function it(L) {
                i.push(c[L * 3 + 0]), i.push(c[L * 3 + 1]), i.push(c[L * 3 + 2]);
            }
            function Ce(L) {
                r.push(L.x), r.push(L.y);
            }
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    toJSON() {
        let e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
        return xx(t, n, e);
    }
    static fromJSON(e, t) {
        let n = [];
        for(let r = 0, a = e.shapes.length; r < a; r++){
            let o = t[e.shapes[r]];
            n.push(o);
        }
        let i = e.options.extrudePath;
        return i !== void 0 && (e.options.extrudePath = new ca[i.type]().fromJSON(i)), new s1(n, e.options);
    }
}, _x = {
    generateTopUV: function(s1, e, t, n, i) {
        let r = e[t * 3], a = e[t * 3 + 1], o = e[n * 3], c = e[n * 3 + 1], l = e[i * 3], h = e[i * 3 + 1];
        return [
            new Z(r, a),
            new Z(o, c),
            new Z(l, h)
        ];
    },
    generateSideWallUV: function(s1, e, t, n, i, r) {
        let a = e[t * 3], o = e[t * 3 + 1], c = e[t * 3 + 2], l = e[n * 3], h = e[n * 3 + 1], u = e[n * 3 + 2], d = e[i * 3], f = e[i * 3 + 1], m = e[i * 3 + 2], _ = e[r * 3], g = e[r * 3 + 1], p = e[r * 3 + 2];
        return Math.abs(o - h) < Math.abs(a - l) ? [
            new Z(a, 1 - c),
            new Z(l, 1 - u),
            new Z(d, 1 - m),
            new Z(_, 1 - p)
        ] : [
            new Z(o, 1 - c),
            new Z(h, 1 - u),
            new Z(f, 1 - m),
            new Z(g, 1 - p)
        ];
    }
};
function xx(s1, e, t) {
    if (t.shapes = [], Array.isArray(s1)) for(let n = 0, i = s1.length; n < i; n++){
        let r = s1[n];
        t.shapes.push(r.uuid);
    }
    else t.shapes.push(s1.uuid);
    return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
var ec = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = (1 + Math.sqrt(5)) / 2, i = [
            -1,
            n,
            0,
            1,
            n,
            0,
            -1,
            -n,
            0,
            1,
            -n,
            0,
            0,
            -1,
            n,
            0,
            1,
            n,
            0,
            -1,
            -n,
            0,
            1,
            -n,
            n,
            0,
            -1,
            n,
            0,
            1,
            -n,
            0,
            -1,
            -n,
            0,
            1
        ], r = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        super(i, r, e, t), this.type = "IcosahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, ha = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ], i = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        super(n, i, e, t), this.type = "OctahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, tc = class s1 extends Ge {
    constructor(e = .5, t = 1, n = 32, i = 1, r = 0, a = Math.PI * 2){
        super(), this.type = "RingGeometry", this.parameters = {
            innerRadius: e,
            outerRadius: t,
            thetaSegments: n,
            phiSegments: i,
            thetaStart: r,
            thetaLength: a
        }, n = Math.max(3, n), i = Math.max(1, i);
        let o = [], c = [], l = [], h = [], u = e, d = (t - e) / i, f = new A, m = new Z;
        for(let _ = 0; _ <= i; _++){
            for(let g = 0; g <= n; g++){
                let p = r + g / n * a;
                f.x = u * Math.cos(p), f.y = u * Math.sin(p), c.push(f.x, f.y, f.z), l.push(0, 0, 1), m.x = (f.x / t + 1) / 2, m.y = (f.y / t + 1) / 2, h.push(m.x, m.y);
            }
            u += d;
        }
        for(let _ = 0; _ < i; _++){
            let g = _ * (n + 1);
            for(let p = 0; p < n; p++){
                let v = p + g, x = v, y = v + n + 1, b = v + n + 2, w = v + 1;
                o.push(x, y, w), o.push(y, b, w);
            }
        }
        this.setIndex(o), this.setAttribute("position", new ve(c, 3)), this.setAttribute("normal", new ve(l, 3)), this.setAttribute("uv", new ve(h, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
    }
}, nc = class s1 extends Ge {
    constructor(e = new Fn([
        new Z(0, .5),
        new Z(-.5, -.5),
        new Z(.5, -.5)
    ]), t = 12){
        super(), this.type = "ShapeGeometry", this.parameters = {
            shapes: e,
            curveSegments: t
        };
        let n = [], i = [], r = [], a = [], o = 0, c = 0;
        if (Array.isArray(e) === !1) l(e);
        else for(let h = 0; h < e.length; h++)l(e[h]), this.addGroup(o, c, h), o += c, c = 0;
        this.setIndex(n), this.setAttribute("position", new ve(i, 3)), this.setAttribute("normal", new ve(r, 3)), this.setAttribute("uv", new ve(a, 2));
        function l(h) {
            let u = i.length / 3, d = h.extractPoints(t), f = d.shape, m = d.holes;
            yn.isClockWise(f) === !1 && (f = f.reverse());
            for(let g = 0, p = m.length; g < p; g++){
                let v = m[g];
                yn.isClockWise(v) === !0 && (m[g] = v.reverse());
            }
            let _ = yn.triangulateShape(f, m);
            for(let g = 0, p = m.length; g < p; g++){
                let v = m[g];
                f = f.concat(v);
            }
            for(let g = 0, p = f.length; g < p; g++){
                let v = f[g];
                i.push(v.x, v.y, 0), r.push(0, 0, 1), a.push(v.x, v.y);
            }
            for(let g = 0, p = _.length; g < p; g++){
                let v = _[g], x = v[0] + u, y = v[1] + u, b = v[2] + u;
                n.push(x, y, b), c += 3;
            }
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    toJSON() {
        let e = super.toJSON(), t = this.parameters.shapes;
        return vx(t, e);
    }
    static fromJSON(e, t) {
        let n = [];
        for(let i = 0, r = e.shapes.length; i < r; i++){
            let a = t[e.shapes[i]];
            n.push(a);
        }
        return new s1(n, e.curveSegments);
    }
};
function vx(s1, e) {
    if (e.shapes = [], Array.isArray(s1)) for(let t = 0, n = s1.length; t < n; t++){
        let i = s1[t];
        e.shapes.push(i.uuid);
    }
    else e.shapes.push(s1.uuid);
    return e;
}
var ua = class s1 extends Ge {
    constructor(e = 1, t = 32, n = 16, i = 0, r = Math.PI * 2, a = 0, o = Math.PI){
        super(), this.type = "SphereGeometry", this.parameters = {
            radius: e,
            widthSegments: t,
            heightSegments: n,
            phiStart: i,
            phiLength: r,
            thetaStart: a,
            thetaLength: o
        }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
        let c = Math.min(a + o, Math.PI), l = 0, h = [], u = new A, d = new A, f = [], m = [], _ = [], g = [];
        for(let p = 0; p <= n; p++){
            let v = [], x = p / n, y = 0;
            p === 0 && a === 0 ? y = .5 / t : p === n && c === Math.PI && (y = -.5 / t);
            for(let b = 0; b <= t; b++){
                let w = b / t;
                u.x = -e * Math.cos(i + w * r) * Math.sin(a + x * o), u.y = e * Math.cos(a + x * o), u.z = e * Math.sin(i + w * r) * Math.sin(a + x * o), m.push(u.x, u.y, u.z), d.copy(u).normalize(), _.push(d.x, d.y, d.z), g.push(w + y, 1 - x), v.push(l++);
            }
            h.push(v);
        }
        for(let p = 0; p < n; p++)for(let v = 0; v < t; v++){
            let x = h[p][v + 1], y = h[p][v], b = h[p + 1][v], w = h[p + 1][v + 1];
            (p !== 0 || a > 0) && f.push(x, y, w), (p !== n - 1 || c < Math.PI) && f.push(y, b, w);
        }
        this.setIndex(f), this.setAttribute("position", new ve(m, 3)), this.setAttribute("normal", new ve(_, 3)), this.setAttribute("uv", new ve(g, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
    }
}, ic = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ], i = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        super(n, i, e, t), this.type = "TetrahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, sc = class s1 extends Ge {
    constructor(e = 1, t = .4, n = 12, i = 48, r = Math.PI * 2){
        super(), this.type = "TorusGeometry", this.parameters = {
            radius: e,
            tube: t,
            radialSegments: n,
            tubularSegments: i,
            arc: r
        }, n = Math.floor(n), i = Math.floor(i);
        let a = [], o = [], c = [], l = [], h = new A, u = new A, d = new A;
        for(let f = 0; f <= n; f++)for(let m = 0; m <= i; m++){
            let _ = m / i * r, g = f / n * Math.PI * 2;
            u.x = (e + t * Math.cos(g)) * Math.cos(_), u.y = (e + t * Math.cos(g)) * Math.sin(_), u.z = t * Math.sin(g), o.push(u.x, u.y, u.z), h.x = e * Math.cos(_), h.y = e * Math.sin(_), d.subVectors(u, h).normalize(), c.push(d.x, d.y, d.z), l.push(m / i), l.push(f / n);
        }
        for(let f = 1; f <= n; f++)for(let m = 1; m <= i; m++){
            let _ = (i + 1) * f + m - 1, g = (i + 1) * (f - 1) + m - 1, p = (i + 1) * (f - 1) + m, v = (i + 1) * f + m;
            a.push(_, g, v), a.push(g, p, v);
        }
        this.setIndex(a), this.setAttribute("position", new ve(o, 3)), this.setAttribute("normal", new ve(c, 3)), this.setAttribute("uv", new ve(l, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
    }
}, rc = class s1 extends Ge {
    constructor(e = 1, t = .4, n = 64, i = 8, r = 2, a = 3){
        super(), this.type = "TorusKnotGeometry", this.parameters = {
            radius: e,
            tube: t,
            tubularSegments: n,
            radialSegments: i,
            p: r,
            q: a
        }, n = Math.floor(n), i = Math.floor(i);
        let o = [], c = [], l = [], h = [], u = new A, d = new A, f = new A, m = new A, _ = new A, g = new A, p = new A;
        for(let x = 0; x <= n; ++x){
            let y = x / n * r * Math.PI * 2;
            v(y, r, a, e, f), v(y + .01, r, a, e, m), g.subVectors(m, f), p.addVectors(m, f), _.crossVectors(g, p), p.crossVectors(_, g), _.normalize(), p.normalize();
            for(let b = 0; b <= i; ++b){
                let w = b / i * Math.PI * 2, R = -t * Math.cos(w), I = t * Math.sin(w);
                u.x = f.x + (R * p.x + I * _.x), u.y = f.y + (R * p.y + I * _.y), u.z = f.z + (R * p.z + I * _.z), c.push(u.x, u.y, u.z), d.subVectors(u, f).normalize(), l.push(d.x, d.y, d.z), h.push(x / n), h.push(b / i);
            }
        }
        for(let x = 1; x <= n; x++)for(let y = 1; y <= i; y++){
            let b = (i + 1) * (x - 1) + (y - 1), w = (i + 1) * x + (y - 1), R = (i + 1) * x + y, I = (i + 1) * (x - 1) + y;
            o.push(b, w, I), o.push(w, R, I);
        }
        this.setIndex(o), this.setAttribute("position", new ve(c, 3)), this.setAttribute("normal", new ve(l, 3)), this.setAttribute("uv", new ve(h, 2));
        function v(x, y, b, w, R) {
            let I = Math.cos(x), M = Math.sin(x), T = b / y * x, O = Math.cos(T);
            R.x = w * (2 + O) * .5 * I, R.y = w * (2 + O) * M * .5, R.z = w * Math.sin(T) * .5;
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
    }
}, ac = class s1 extends Ge {
    constructor(e = new aa(new A(-1, -1, 0), new A(-1, 1, 0), new A(1, 1, 0)), t = 64, n = 1, i = 8, r = !1){
        super(), this.type = "TubeGeometry", this.parameters = {
            path: e,
            tubularSegments: t,
            radius: n,
            radialSegments: i,
            closed: r
        };
        let a = e.computeFrenetFrames(t, r);
        this.tangents = a.tangents, this.normals = a.normals, this.binormals = a.binormals;
        let o = new A, c = new A, l = new Z, h = new A, u = [], d = [], f = [], m = [];
        _(), this.setIndex(m), this.setAttribute("position", new ve(u, 3)), this.setAttribute("normal", new ve(d, 3)), this.setAttribute("uv", new ve(f, 2));
        function _() {
            for(let x = 0; x < t; x++)g(x);
            g(r === !1 ? t : 0), v(), p();
        }
        function g(x) {
            h = e.getPointAt(x / t, h);
            let y = a.normals[x], b = a.binormals[x];
            for(let w = 0; w <= i; w++){
                let R = w / i * Math.PI * 2, I = Math.sin(R), M = -Math.cos(R);
                c.x = M * y.x + I * b.x, c.y = M * y.y + I * b.y, c.z = M * y.z + I * b.z, c.normalize(), d.push(c.x, c.y, c.z), o.x = h.x + n * c.x, o.y = h.y + n * c.y, o.z = h.z + n * c.z, u.push(o.x, o.y, o.z);
            }
        }
        function p() {
            for(let x = 1; x <= t; x++)for(let y = 1; y <= i; y++){
                let b = (i + 1) * (x - 1) + (y - 1), w = (i + 1) * x + (y - 1), R = (i + 1) * x + y, I = (i + 1) * (x - 1) + y;
                m.push(b, w, I), m.push(w, R, I);
            }
        }
        function v() {
            for(let x = 0; x <= t; x++)for(let y = 0; y <= i; y++)l.x = x / t, l.y = y / i, f.push(l.x, l.y);
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.path = this.parameters.path.toJSON(), e;
    }
    static fromJSON(e) {
        return new s1(new ca[e.path.type]().fromJSON(e.path), e.tubularSegments, e.radius, e.radialSegments, e.closed);
    }
}, oc = class extends Ge {
    constructor(e = null){
        if (super(), this.type = "WireframeGeometry", this.parameters = {
            geometry: e
        }, e !== null) {
            let t = [], n = new Set, i = new A, r = new A;
            if (e.index !== null) {
                let a = e.attributes.position, o = e.index, c = e.groups;
                c.length === 0 && (c = [
                    {
                        start: 0,
                        count: o.count,
                        materialIndex: 0
                    }
                ]);
                for(let l = 0, h = c.length; l < h; ++l){
                    let u = c[l], d = u.start, f = u.count;
                    for(let m = d, _ = d + f; m < _; m += 3)for(let g = 0; g < 3; g++){
                        let p = o.getX(m + g), v = o.getX(m + (g + 1) % 3);
                        i.fromBufferAttribute(a, p), r.fromBufferAttribute(a, v), su(i, r, n) === !0 && (t.push(i.x, i.y, i.z), t.push(r.x, r.y, r.z));
                    }
                }
            } else {
                let a = e.attributes.position;
                for(let o = 0, c = a.count / 3; o < c; o++)for(let l = 0; l < 3; l++){
                    let h = 3 * o + l, u = 3 * o + (l + 1) % 3;
                    i.fromBufferAttribute(a, h), r.fromBufferAttribute(a, u), su(i, r, n) === !0 && (t.push(i.x, i.y, i.z), t.push(r.x, r.y, r.z));
                }
            }
            this.setAttribute("position", new ve(t, 3));
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
};
function su(s1, e, t) {
    let n = `${s1.x},${s1.y},${s1.z}-${e.x},${e.y},${e.z}`, i = `${e.x},${e.y},${e.z}-${s1.x},${s1.y},${s1.z}`;
    return t.has(n) === !0 || t.has(i) === !0 ? !1 : (t.add(n), t.add(i), !0);
}
var ru = Object.freeze({
    __proto__: null,
    BoxGeometry: Ji,
    CapsuleGeometry: qo,
    CircleGeometry: Yo,
    ConeGeometry: Zo,
    CylinderGeometry: Ns,
    DodecahedronGeometry: Jo,
    EdgesGeometry: $o,
    ExtrudeGeometry: jo,
    IcosahedronGeometry: ec,
    LatheGeometry: la,
    OctahedronGeometry: ha,
    PlaneGeometry: $r,
    PolyhedronGeometry: di,
    RingGeometry: tc,
    ShapeGeometry: nc,
    SphereGeometry: ua,
    TetrahedronGeometry: ic,
    TorusGeometry: sc,
    TorusKnotGeometry: rc,
    TubeGeometry: ac,
    WireframeGeometry: oc
}), cc = class extends bt {
    constructor(e){
        super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new pe(0), this.transparent = !0, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
    }
}, lc = class extends jt {
    constructor(e){
        super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
    }
}, da = class extends bt {
    constructor(e){
        super(), this.isMeshStandardMaterial = !0, this.defines = {
            STANDARD: ""
        }, this.type = "MeshStandardMaterial", this.color = new pe(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.defines = {
            STANDARD: ""
        }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, hc = class extends da {
    constructor(e){
        super(), this.isMeshPhysicalMaterial = !0, this.defines = {
            STANDARD: "",
            PHYSICAL: ""
        }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new Z(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
            get: function() {
                return ct(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(t) {
                this.ior = (1 + .4 * t) / (1 - .4 * t);
            }
        }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [
            100,
            400
        ], this.iridescenceThicknessMap = null, this.sheenColor = new pe(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new pe(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new pe(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
    }
    get anisotropy() {
        return this._anisotropy;
    }
    set anisotropy(e) {
        this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
    }
    get clearcoat() {
        return this._clearcoat;
    }
    set clearcoat(e) {
        this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
    }
    get iridescence() {
        return this._iridescence;
    }
    set iridescence(e) {
        this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
    }
    get sheen() {
        return this._sheen;
    }
    set sheen(e) {
        this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
    }
    get transmission() {
        return this._transmission;
    }
    set transmission(e) {
        this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
    }
    copy(e) {
        return super.copy(e), this.defines = {
            STANDARD: "",
            PHYSICAL: ""
        }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [
            ...e.iridescenceThicknessRange
        ], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
    }
}, uc = class extends bt {
    constructor(e){
        super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new pe(16777215), this.specular = new pe(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = xa, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, dc = class extends bt {
    constructor(e){
        super(), this.isMeshToonMaterial = !0, this.defines = {
            TOON: ""
        }, this.type = "MeshToonMaterial", this.color = new pe(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
    }
}, fc = class extends bt {
    constructor(e){
        super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
    }
}, pc = class extends bt {
    constructor(e){
        super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new pe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = xa, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, mc = class extends bt {
    constructor(e){
        super(), this.isMeshMatcapMaterial = !0, this.defines = {
            MATCAP: ""
        }, this.type = "MeshMatcapMaterial", this.color = new pe(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.defines = {
            MATCAP: ""
        }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, gc = class extends wt {
    constructor(e){
        super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
    }
};
function ni(s1, e, t) {
    return !s1 || !t && s1.constructor === e ? s1 : typeof e.BYTES_PER_ELEMENT == "number" ? new e(s1) : Array.prototype.slice.call(s1);
}
function Ud(s1) {
    return ArrayBuffer.isView(s1) && !(s1 instanceof DataView);
}
function Dd(s1) {
    function e(i, r) {
        return s1[i] - s1[r];
    }
    let t = s1.length, n = new Array(t);
    for(let i = 0; i !== t; ++i)n[i] = i;
    return n.sort(e), n;
}
function _c(s1, e, t) {
    let n = s1.length, i = new s1.constructor(n);
    for(let r = 0, a = 0; a !== n; ++r){
        let o = t[r] * e;
        for(let c = 0; c !== e; ++c)i[a++] = s1[o + c];
    }
    return i;
}
function $c(s1, e, t, n) {
    let i = 1, r = s1[0];
    for(; r !== void 0 && r[n] === void 0;)r = s1[i++];
    if (r === void 0) return;
    let a = r[n];
    if (a !== void 0) if (Array.isArray(a)) do a = r[n], a !== void 0 && (e.push(r.time), t.push.apply(t, a)), r = s1[i++];
    while (r !== void 0)
    else if (a.toArray !== void 0) do a = r[n], a !== void 0 && (e.push(r.time), a.toArray(t, t.length)), r = s1[i++];
    while (r !== void 0)
    else do a = r[n], a !== void 0 && (e.push(r.time), t.push(a)), r = s1[i++];
    while (r !== void 0)
}
function yx(s1, e, t, n, i = 30) {
    let r = s1.clone();
    r.name = e;
    let a = [];
    for(let c = 0; c < r.tracks.length; ++c){
        let l = r.tracks[c], h = l.getValueSize(), u = [], d = [];
        for(let f = 0; f < l.times.length; ++f){
            let m = l.times[f] * i;
            if (!(m < t || m >= n)) {
                u.push(l.times[f]);
                for(let _ = 0; _ < h; ++_)d.push(l.values[f * h + _]);
            }
        }
        u.length !== 0 && (l.times = ni(u, l.times.constructor), l.values = ni(d, l.values.constructor), a.push(l));
    }
    r.tracks = a;
    let o = 1 / 0;
    for(let c = 0; c < r.tracks.length; ++c)o > r.tracks[c].times[0] && (o = r.tracks[c].times[0]);
    for(let c = 0; c < r.tracks.length; ++c)r.tracks[c].shift(-1 * o);
    return r.resetDuration(), r;
}
function Mx(s1, e = 0, t = s1, n = 30) {
    n <= 0 && (n = 30);
    let i = t.tracks.length, r = e / n;
    for(let a = 0; a < i; ++a){
        let o = t.tracks[a], c = o.ValueTypeName;
        if (c === "bool" || c === "string") continue;
        let l = s1.tracks.find(function(p) {
            return p.name === o.name && p.ValueTypeName === c;
        });
        if (l === void 0) continue;
        let h = 0, u = o.getValueSize();
        o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (h = u / 3);
        let d = 0, f = l.getValueSize();
        l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (d = f / 3);
        let m = o.times.length - 1, _;
        if (r <= o.times[0]) {
            let p = h, v = u - h;
            _ = o.values.slice(p, v);
        } else if (r >= o.times[m]) {
            let p = m * u + h, v = p + u - h;
            _ = o.values.slice(p, v);
        } else {
            let p = o.createInterpolant(), v = h, x = u - h;
            p.evaluate(r), _ = p.resultBuffer.slice(v, x);
        }
        c === "quaternion" && new Ut().fromArray(_).normalize().conjugate().toArray(_);
        let g = l.times.length;
        for(let p = 0; p < g; ++p){
            let v = p * f + d;
            if (c === "quaternion") Ut.multiplyQuaternionsFlat(l.values, v, _, 0, l.values, v);
            else {
                let x = f - d * 2;
                for(let y = 0; y < x; ++y)l.values[v + y] -= _[y];
            }
        }
    }
    return s1.blendMode = xd, s1;
}
var Sv = {
    convertArray: ni,
    isTypedArray: Ud,
    getKeyframeOrder: Dd,
    sortedArray: _c,
    flattenJSON: $c,
    subclip: yx,
    makeClipAdditive: Mx
}, es = class {
    constructor(e, t, n, i){
        this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = i !== void 0 ? i : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
    }
    evaluate(e) {
        let t = this.parameterPositions, n = this._cachedIndex, i = t[n], r = t[n - 1];
        e: {
            t: {
                let a;
                n: {
                    i: if (!(e < i)) {
                        for(let o = n + 2;;){
                            if (i === void 0) {
                                if (e < r) break i;
                                return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                            }
                            if (n === o) break;
                            if (r = i, i = t[++n], e < i) break t;
                        }
                        a = t.length;
                        break n;
                    }
                    if (!(e >= r)) {
                        let o = t[1];
                        e < o && (n = 2, r = o);
                        for(let c = n - 2;;){
                            if (r === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
                            if (n === c) break;
                            if (i = r, r = t[--n - 1], e >= r) break t;
                        }
                        a = n, n = 0;
                        break n;
                    }
                    break e;
                }
                for(; n < a;){
                    let o = n + a >>> 1;
                    e < t[o] ? a = o : n = o + 1;
                }
                if (i = t[n], r = t[n - 1], r === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
                if (i === void 0) return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
            }
            this._cachedIndex = n, this.intervalChanged_(n, r, i);
        }
        return this.interpolate_(n, r, e, i);
    }
    getSettings_() {
        return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(e) {
        let t = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r = e * i;
        for(let a = 0; a !== i; ++a)t[a] = n[r + a];
        return t;
    }
    interpolate_() {
        throw new Error("call to abstract method");
    }
    intervalChanged_() {}
}, xc = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
            endingStart: zi,
            endingEnd: zi
        };
    }
    intervalChanged_(e, t, n) {
        let i = this.parameterPositions, r = e - 2, a = e + 1, o = i[r], c = i[a];
        if (o === void 0) switch(this.getSettings_().endingStart){
            case Vi:
                r = e, o = 2 * t - n;
                break;
            case Br:
                r = i.length - 2, o = t + i[r] - i[r + 1];
                break;
            default:
                r = e, o = n;
        }
        if (c === void 0) switch(this.getSettings_().endingEnd){
            case Vi:
                a = e, c = 2 * n - t;
                break;
            case Br:
                a = 1, c = n + i[1] - i[0];
                break;
            default:
                a = e - 1, c = t;
        }
        let l = (n - t) * .5, h = this.valueSize;
        this._weightPrev = l / (t - o), this._weightNext = l / (c - n), this._offsetPrev = r * h, this._offsetNext = a * h;
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = this._offsetPrev, u = this._offsetNext, d = this._weightPrev, f = this._weightNext, m = (n - t) / (i - t), _ = m * m, g = _ * m, p = -d * g + 2 * d * _ - d * m, v = (1 + d) * g + (-1.5 - 2 * d) * _ + (-.5 + d) * m + 1, x = (-1 - f) * g + (1.5 + f) * _ + .5 * m, y = f * g - f * _;
        for(let b = 0; b !== o; ++b)r[b] = p * a[h + b] + v * a[l + b] + x * a[c + b] + y * a[u + b];
        return r;
    }
}, fa = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = (n - t) / (i - t), u = 1 - h;
        for(let d = 0; d !== o; ++d)r[d] = a[l + d] * u + a[c + d] * h;
        return r;
    }
}, vc = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e) {
        return this.copySampleValue_(e - 1);
    }
}, Jt = class {
    constructor(e, t, n, i){
        if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
        this.name = e, this.times = ni(t, this.TimeBufferType), this.values = ni(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation);
    }
    static toJSON(e) {
        let t = e.constructor, n;
        if (t.toJSON !== this.toJSON) n = t.toJSON(e);
        else {
            n = {
                name: e.name,
                times: ni(e.times, Array),
                values: ni(e.values, Array)
            };
            let i = e.getInterpolation();
            i !== e.DefaultInterpolation && (n.interpolation = i);
        }
        return n.type = e.ValueTypeName, n;
    }
    InterpolantFactoryMethodDiscrete(e) {
        return new vc(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodLinear(e) {
        return new fa(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodSmooth(e) {
        return new xc(this.times, this.values, this.getValueSize(), e);
    }
    setInterpolation(e) {
        let t;
        switch(e){
            case Or:
                t = this.InterpolantFactoryMethodDiscrete;
                break;
            case Fr:
                t = this.InterpolantFactoryMethodLinear;
                break;
            case La:
                t = this.InterpolantFactoryMethodSmooth;
                break;
        }
        if (t === void 0) {
            let n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === void 0) if (e !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
            else throw new Error(n);
            return console.warn("THREE.KeyframeTrack:", n), this;
        }
        return this.createInterpolant = t, this;
    }
    getInterpolation() {
        switch(this.createInterpolant){
            case this.InterpolantFactoryMethodDiscrete:
                return Or;
            case this.InterpolantFactoryMethodLinear:
                return Fr;
            case this.InterpolantFactoryMethodSmooth:
                return La;
        }
    }
    getValueSize() {
        return this.values.length / this.times.length;
    }
    shift(e) {
        if (e !== 0) {
            let t = this.times;
            for(let n = 0, i = t.length; n !== i; ++n)t[n] += e;
        }
        return this;
    }
    scale(e) {
        if (e !== 1) {
            let t = this.times;
            for(let n = 0, i = t.length; n !== i; ++n)t[n] *= e;
        }
        return this;
    }
    trim(e, t) {
        let n = this.times, i = n.length, r = 0, a = i - 1;
        for(; r !== i && n[r] < e;)++r;
        for(; a !== -1 && n[a] > t;)--a;
        if (++a, r !== 0 || a !== i) {
            r >= a && (a = Math.max(a, 1), r = a - 1);
            let o = this.getValueSize();
            this.times = n.slice(r, a), this.values = this.values.slice(r * o, a * o);
        }
        return this;
    }
    validate() {
        let e = !0, t = this.getValueSize();
        t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
        let n = this.times, i = this.values, r = n.length;
        r === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
        let a = null;
        for(let o = 0; o !== r; o++){
            let c = n[o];
            if (typeof c == "number" && isNaN(c)) {
                console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o, c), e = !1;
                break;
            }
            if (a !== null && a > c) {
                console.error("THREE.KeyframeTrack: Out of order keys.", this, o, c, a), e = !1;
                break;
            }
            a = c;
        }
        if (i !== void 0 && Ud(i)) for(let o = 0, c = i.length; o !== c; ++o){
            let l = i[o];
            if (isNaN(l)) {
                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o, l), e = !1;
                break;
            }
        }
        return e;
    }
    optimize() {
        let e = this.times.slice(), t = this.values.slice(), n = this.getValueSize(), i = this.getInterpolation() === La, r = e.length - 1, a = 1;
        for(let o = 1; o < r; ++o){
            let c = !1, l = e[o], h = e[o + 1];
            if (l !== h && (o !== 1 || l !== e[0])) if (i) c = !0;
            else {
                let u = o * n, d = u - n, f = u + n;
                for(let m = 0; m !== n; ++m){
                    let _ = t[u + m];
                    if (_ !== t[d + m] || _ !== t[f + m]) {
                        c = !0;
                        break;
                    }
                }
            }
            if (c) {
                if (o !== a) {
                    e[a] = e[o];
                    let u = o * n, d = a * n;
                    for(let f = 0; f !== n; ++f)t[d + f] = t[u + f];
                }
                ++a;
            }
        }
        if (r > 0) {
            e[a] = e[r];
            for(let o = r * n, c = a * n, l = 0; l !== n; ++l)t[c + l] = t[o + l];
            ++a;
        }
        return a !== e.length ? (this.times = e.slice(0, a), this.values = t.slice(0, a * n)) : (this.times = e, this.values = t), this;
    }
    clone() {
        let e = this.times.slice(), t = this.values.slice(), n = this.constructor, i = new n(this.name, e, t);
        return i.createInterpolant = this.createInterpolant, i;
    }
};
Jt.prototype.TimeBufferType = Float32Array;
Jt.prototype.ValueBufferType = Float32Array;
Jt.prototype.DefaultInterpolation = Fr;
var Vn = class extends Jt {
};
Vn.prototype.ValueTypeName = "bool";
Vn.prototype.ValueBufferType = Array;
Vn.prototype.DefaultInterpolation = Or;
Vn.prototype.InterpolantFactoryMethodLinear = void 0;
Vn.prototype.InterpolantFactoryMethodSmooth = void 0;
var pa = class extends Jt {
};
pa.prototype.ValueTypeName = "color";
var ts = class extends Jt {
};
ts.prototype.ValueTypeName = "number";
var yc = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = (n - t) / (i - t), l = e * o;
        for(let h = l + o; l !== h; l += 4)Ut.slerpFlat(r, 0, a, l - o, a, l, c);
        return r;
    }
}, pi = class extends Jt {
    InterpolantFactoryMethodLinear(e) {
        return new yc(this.times, this.values, this.getValueSize(), e);
    }
};
pi.prototype.ValueTypeName = "quaternion";
pi.prototype.DefaultInterpolation = Fr;
pi.prototype.InterpolantFactoryMethodSmooth = void 0;
var kn = class extends Jt {
};
kn.prototype.ValueTypeName = "string";
kn.prototype.ValueBufferType = Array;
kn.prototype.DefaultInterpolation = Or;
kn.prototype.InterpolantFactoryMethodLinear = void 0;
kn.prototype.InterpolantFactoryMethodSmooth = void 0;
var ns = class extends Jt {
};
ns.prototype.ValueTypeName = "vector";
var is = class {
    constructor(e, t = -1, n, i = Xc){
        this.name = e, this.tracks = n, this.duration = t, this.blendMode = i, this.uuid = kt(), this.duration < 0 && this.resetDuration();
    }
    static parse(e) {
        let t = [], n = e.tracks, i = 1 / (e.fps || 1);
        for(let a = 0, o = n.length; a !== o; ++a)t.push(bx(n[a]).scale(i));
        let r = new this(e.name, e.duration, t, e.blendMode);
        return r.uuid = e.uuid, r;
    }
    static toJSON(e) {
        let t = [], n = e.tracks, i = {
            name: e.name,
            duration: e.duration,
            tracks: t,
            uuid: e.uuid,
            blendMode: e.blendMode
        };
        for(let r = 0, a = n.length; r !== a; ++r)t.push(Jt.toJSON(n[r]));
        return i;
    }
    static CreateFromMorphTargetSequence(e, t, n, i) {
        let r = t.length, a = [];
        for(let o = 0; o < r; o++){
            let c = [], l = [];
            c.push((o + r - 1) % r, o, (o + 1) % r), l.push(0, 1, 0);
            let h = Dd(c);
            c = _c(c, 1, h), l = _c(l, 1, h), !i && c[0] === 0 && (c.push(r), l.push(l[0])), a.push(new ts(".morphTargetInfluences[" + t[o].name + "]", c, l).scale(1 / n));
        }
        return new this(e, -1, a);
    }
    static findByName(e, t) {
        let n = e;
        if (!Array.isArray(e)) {
            let i = e;
            n = i.geometry && i.geometry.animations || i.animations;
        }
        for(let i = 0; i < n.length; i++)if (n[i].name === t) return n[i];
        return null;
    }
    static CreateClipsFromMorphTargetSequences(e, t, n) {
        let i = {}, r = /^([\w-]*?)([\d]+)$/;
        for(let o = 0, c = e.length; o < c; o++){
            let l = e[o], h = l.name.match(r);
            if (h && h.length > 1) {
                let u = h[1], d = i[u];
                d || (i[u] = d = []), d.push(l);
            }
        }
        let a = [];
        for(let o in i)a.push(this.CreateFromMorphTargetSequence(o, i[o], t, n));
        return a;
    }
    static parseAnimation(e, t) {
        if (!e) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
        let n = function(u, d, f, m, _) {
            if (f.length !== 0) {
                let g = [], p = [];
                $c(f, g, p, m), g.length !== 0 && _.push(new u(d, g, p));
            }
        }, i = [], r = e.name || "default", a = e.fps || 30, o = e.blendMode, c = e.length || -1, l = e.hierarchy || [];
        for(let u = 0; u < l.length; u++){
            let d = l[u].keys;
            if (!(!d || d.length === 0)) if (d[0].morphTargets) {
                let f = {}, m;
                for(m = 0; m < d.length; m++)if (d[m].morphTargets) for(let _ = 0; _ < d[m].morphTargets.length; _++)f[d[m].morphTargets[_]] = -1;
                for(let _ in f){
                    let g = [], p = [];
                    for(let v = 0; v !== d[m].morphTargets.length; ++v){
                        let x = d[m];
                        g.push(x.time), p.push(x.morphTarget === _ ? 1 : 0);
                    }
                    i.push(new ts(".morphTargetInfluence[" + _ + "]", g, p));
                }
                c = f.length * a;
            } else {
                let f = ".bones[" + t[u].name + "]";
                n(ns, f + ".position", d, "pos", i), n(pi, f + ".quaternion", d, "rot", i), n(ns, f + ".scale", d, "scl", i);
            }
        }
        return i.length === 0 ? null : new this(r, c, i, o);
    }
    resetDuration() {
        let e = this.tracks, t = 0;
        for(let n = 0, i = e.length; n !== i; ++n){
            let r = this.tracks[n];
            t = Math.max(t, r.times[r.times.length - 1]);
        }
        return this.duration = t, this;
    }
    trim() {
        for(let e = 0; e < this.tracks.length; e++)this.tracks[e].trim(0, this.duration);
        return this;
    }
    validate() {
        let e = !0;
        for(let t = 0; t < this.tracks.length; t++)e = e && this.tracks[t].validate();
        return e;
    }
    optimize() {
        for(let e = 0; e < this.tracks.length; e++)this.tracks[e].optimize();
        return this;
    }
    clone() {
        let e = [];
        for(let t = 0; t < this.tracks.length; t++)e.push(this.tracks[t].clone());
        return new this.constructor(this.name, this.duration, e, this.blendMode);
    }
    toJSON() {
        return this.constructor.toJSON(this);
    }
};
function Sx(s1) {
    switch(s1.toLowerCase()){
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
            return ts;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
            return ns;
        case "color":
            return pa;
        case "quaternion":
            return pi;
        case "bool":
        case "boolean":
            return Vn;
        case "string":
            return kn;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s1);
}
function bx(s1) {
    if (s1.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    let e = Sx(s1.type);
    if (s1.times === void 0) {
        let t = [], n = [];
        $c(s1.keys, t, n, "value"), s1.times = t, s1.values = n;
    }
    return e.parse !== void 0 ? e.parse(s1) : new e(s1.name, s1.times, s1.values, s1.interpolation);
}
var ss = {
    enabled: !1,
    files: {},
    add: function(s1, e) {
        this.enabled !== !1 && (this.files[s1] = e);
    },
    get: function(s1) {
        if (this.enabled !== !1) return this.files[s1];
    },
    remove: function(s1) {
        delete this.files[s1];
    },
    clear: function() {
        this.files = {};
    }
}, ma = class {
    constructor(e, t, n){
        let i = this, r = !1, a = 0, o = 0, c, l = [];
        this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(h) {
            o++, r === !1 && i.onStart !== void 0 && i.onStart(h, a, o), r = !0;
        }, this.itemEnd = function(h) {
            a++, i.onProgress !== void 0 && i.onProgress(h, a, o), a === o && (r = !1, i.onLoad !== void 0 && i.onLoad());
        }, this.itemError = function(h) {
            i.onError !== void 0 && i.onError(h);
        }, this.resolveURL = function(h) {
            return c ? c(h) : h;
        }, this.setURLModifier = function(h) {
            return c = h, this;
        }, this.addHandler = function(h, u) {
            return l.push(h, u), this;
        }, this.removeHandler = function(h) {
            let u = l.indexOf(h);
            return u !== -1 && l.splice(u, 2), this;
        }, this.getHandler = function(h) {
            for(let u = 0, d = l.length; u < d; u += 2){
                let f = l[u], m = l[u + 1];
                if (f.global && (f.lastIndex = 0), f.test(h)) return m;
            }
            return null;
        };
    }
}, Ex = new ma, Dt = class {
    constructor(e){
        this.manager = e !== void 0 ? e : Ex, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
    }
    load() {}
    loadAsync(e, t) {
        let n = this;
        return new Promise(function(i, r) {
            n.load(e, i, t, r);
        });
    }
    parse() {}
    setCrossOrigin(e) {
        return this.crossOrigin = e, this;
    }
    setWithCredentials(e) {
        return this.withCredentials = e, this;
    }
    setPath(e) {
        return this.path = e, this;
    }
    setResourcePath(e) {
        return this.resourcePath = e, this;
    }
    setRequestHeader(e) {
        return this.requestHeader = e, this;
    }
};
Dt.DEFAULT_MATERIAL_NAME = "__DEFAULT";
var fn = {}, Mc = class extends Error {
    constructor(e, t){
        super(e), this.response = t;
    }
}, rn = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = ss.get(e);
        if (r !== void 0) return this.manager.itemStart(e), setTimeout(()=>{
            t && t(r), this.manager.itemEnd(e);
        }, 0), r;
        if (fn[e] !== void 0) {
            fn[e].push({
                onLoad: t,
                onProgress: n,
                onError: i
            });
            return;
        }
        fn[e] = [], fn[e].push({
            onLoad: t,
            onProgress: n,
            onError: i
        });
        let a = new Request(e, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin"
        }), o = this.mimeType, c = this.responseType;
        fetch(a).then((l)=>{
            if (l.status === 200 || l.status === 0) {
                if (l.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || l.body === void 0 || l.body.getReader === void 0) return l;
                let h = fn[e], u = l.body.getReader(), d = l.headers.get("Content-Length") || l.headers.get("X-File-Size"), f = d ? parseInt(d) : 0, m = f !== 0, _ = 0, g = new ReadableStream({
                    start (p) {
                        v();
                        function v() {
                            u.read().then(({ done: x , value: y  })=>{
                                if (x) p.close();
                                else {
                                    _ += y.byteLength;
                                    let b = new ProgressEvent("progress", {
                                        lengthComputable: m,
                                        loaded: _,
                                        total: f
                                    });
                                    for(let w = 0, R = h.length; w < R; w++){
                                        let I = h[w];
                                        I.onProgress && I.onProgress(b);
                                    }
                                    p.enqueue(y), v();
                                }
                            });
                        }
                    }
                });
                return new Response(g);
            } else throw new Mc(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`, l);
        }).then((l)=>{
            switch(c){
                case "arraybuffer":
                    return l.arrayBuffer();
                case "blob":
                    return l.blob();
                case "document":
                    return l.text().then((h)=>new DOMParser().parseFromString(h, o));
                case "json":
                    return l.json();
                default:
                    if (o === void 0) return l.text();
                    {
                        let u = /charset="?([^;"\s]*)"?/i.exec(o), d = u && u[1] ? u[1].toLowerCase() : void 0, f = new TextDecoder(d);
                        return l.arrayBuffer().then((m)=>f.decode(m));
                    }
            }
        }).then((l)=>{
            ss.add(e, l);
            let h = fn[e];
            delete fn[e];
            for(let u = 0, d = h.length; u < d; u++){
                let f = h[u];
                f.onLoad && f.onLoad(l);
            }
        }).catch((l)=>{
            let h = fn[e];
            if (h === void 0) throw this.manager.itemError(e), l;
            delete fn[e];
            for(let u = 0, d = h.length; u < d; u++){
                let f = h[u];
                f.onError && f.onError(l);
            }
            this.manager.itemError(e);
        }).finally(()=>{
            this.manager.itemEnd(e);
        }), this.manager.itemStart(e);
    }
    setResponseType(e) {
        return this.responseType = e, this;
    }
    setMimeType(e) {
        return this.mimeType = e, this;
    }
}, au = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new rn(this.manager);
        a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(o) {
            try {
                t(r.parse(JSON.parse(o)));
            } catch (c) {
                i ? i(c) : console.error(c), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = [];
        for(let n = 0; n < e.length; n++){
            let i = is.parse(e[n]);
            t.push(i);
        }
        return t;
    }
}, ou = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = [], o = new Us, c = new rn(this.manager);
        c.setPath(this.path), c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), c.setWithCredentials(r.withCredentials);
        let l = 0;
        function h(u) {
            c.load(e[u], function(d) {
                let f = r.parse(d, !0);
                a[u] = {
                    width: f.width,
                    height: f.height,
                    format: f.format,
                    mipmaps: f.mipmaps
                }, l += 1, l === 6 && (f.mipmapCount === 1 && (o.minFilter = mt), o.image = a, o.format = f.format, o.needsUpdate = !0, t && t(o));
            }, n, i);
        }
        if (Array.isArray(e)) for(let u = 0, d = e.length; u < d; ++u)h(u);
        else c.load(e, function(u) {
            let d = r.parse(u, !0);
            if (d.isCubemap) {
                let f = d.mipmaps.length / d.mipmapCount;
                for(let m = 0; m < f; m++){
                    a[m] = {
                        mipmaps: []
                    };
                    for(let _ = 0; _ < d.mipmapCount; _++)a[m].mipmaps.push(d.mipmaps[m * d.mipmapCount + _]), a[m].format = d.format, a[m].width = d.width, a[m].height = d.height;
                }
                o.image = a;
            } else o.image.width = d.width, o.image.height = d.height, o.mipmaps = d.mipmaps;
            d.mipmapCount === 1 && (o.minFilter = mt), o.format = d.format, o.needsUpdate = !0, t && t(o);
        }, n, i);
        return o;
    }
}, rs = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = this, a = ss.get(e);
        if (a !== void 0) return r.manager.itemStart(e), setTimeout(function() {
            t && t(a), r.manager.itemEnd(e);
        }, 0), a;
        let o = ws("img");
        function c() {
            h(), ss.add(e, this), t && t(this), r.manager.itemEnd(e);
        }
        function l(u) {
            h(), i && i(u), r.manager.itemError(e), r.manager.itemEnd(e);
        }
        function h() {
            o.removeEventListener("load", c, !1), o.removeEventListener("error", l, !1);
        }
        return o.addEventListener("load", c, !1), o.addEventListener("error", l, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (o.crossOrigin = this.crossOrigin), r.manager.itemStart(e), o.src = e, o;
    }
}, cu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = new Ki;
        r.colorSpace = vt;
        let a = new rs(this.manager);
        a.setCrossOrigin(this.crossOrigin), a.setPath(this.path);
        let o = 0;
        function c(l) {
            a.load(e[l], function(h) {
                r.images[l] = h, o++, o === 6 && (r.needsUpdate = !0, t && t(r));
            }, void 0, i);
        }
        for(let l = 0; l < e.length; ++l)c(l);
        return r;
    }
}, lu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new oi, o = new rn(this.manager);
        return o.setResponseType("arraybuffer"), o.setRequestHeader(this.requestHeader), o.setPath(this.path), o.setWithCredentials(r.withCredentials), o.load(e, function(c) {
            let l;
            try {
                l = r.parse(c);
            } catch (h) {
                if (i !== void 0) i(h);
                else {
                    console.error(h);
                    return;
                }
            }
            l.image !== void 0 ? a.image = l.image : l.data !== void 0 && (a.image.width = l.width, a.image.height = l.height, a.image.data = l.data), a.wrapS = l.wrapS !== void 0 ? l.wrapS : It, a.wrapT = l.wrapT !== void 0 ? l.wrapT : It, a.magFilter = l.magFilter !== void 0 ? l.magFilter : mt, a.minFilter = l.minFilter !== void 0 ? l.minFilter : mt, a.anisotropy = l.anisotropy !== void 0 ? l.anisotropy : 1, l.colorSpace !== void 0 ? a.colorSpace = l.colorSpace : l.encoding !== void 0 && (a.encoding = l.encoding), l.flipY !== void 0 && (a.flipY = l.flipY), l.format !== void 0 && (a.format = l.format), l.type !== void 0 && (a.type = l.type), l.mipmaps !== void 0 && (a.mipmaps = l.mipmaps, a.minFilter = li), l.mipmapCount === 1 && (a.minFilter = mt), l.generateMipmaps !== void 0 && (a.generateMipmaps = l.generateMipmaps), a.needsUpdate = !0, t && t(a, l);
        }, n, i), a;
    }
}, hu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = new St, a = new rs(this.manager);
        return a.setCrossOrigin(this.crossOrigin), a.setPath(this.path), a.load(e, function(o) {
            r.image = o, r.needsUpdate = !0, t !== void 0 && t(r);
        }, n, i), r;
    }
}, En = class extends Je {
    constructor(e, t = 1){
        super(), this.isLight = !0, this.type = "Light", this.color = new pe(e), this.intensity = t;
    }
    dispose() {}
    copy(e, t) {
        return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
    }
}, Sc = class extends En {
    constructor(e, t, n){
        super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Je.DEFAULT_UP), this.updateMatrix(), this.groundColor = new pe(t);
    }
    copy(e, t) {
        return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
    }
}, oo = new ze, uu = new A, du = new A, zs = class {
    constructor(e){
        this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new Z(512, 512), this.map = null, this.mapPass = null, this.matrix = new ze, this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Ps, this._frameExtents = new Z(1, 1), this._viewportCount = 1, this._viewports = [
            new je(0, 0, 1, 1)
        ];
    }
    getViewportCount() {
        return this._viewportCount;
    }
    getFrustum() {
        return this._frustum;
    }
    updateMatrices(e) {
        let t = this.camera, n = this.matrix;
        uu.setFromMatrixPosition(e.matrixWorld), t.position.copy(uu), du.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(du), t.updateMatrixWorld(), oo.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(oo), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(oo);
    }
    getViewport(e) {
        return this._viewports[e];
    }
    getFrameExtents() {
        return this._frameExtents;
    }
    dispose() {
        this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
    }
    copy(e) {
        return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        let e = {};
        return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
    }
}, bc = class extends zs {
    constructor(){
        super(new yt(50, 1, .5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
    }
    updateMatrices(e) {
        let t = this.camera, n = Zi * 2 * e.angle * this.focus, i = this.mapSize.width / this.mapSize.height, r = e.distance || t.far;
        (n !== t.fov || i !== t.aspect || r !== t.far) && (t.fov = n, t.aspect = i, t.far = r, t.updateProjectionMatrix()), super.updateMatrices(e);
    }
    copy(e) {
        return super.copy(e), this.focus = e.focus, this;
    }
}, Ec = class extends En {
    constructor(e, t, n = 0, i = Math.PI / 3, r = 0, a = 2){
        super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Je.DEFAULT_UP), this.updateMatrix(), this.target = new Je, this.distance = n, this.angle = i, this.penumbra = r, this.decay = a, this.map = null, this.shadow = new bc;
    }
    get power() {
        return this.intensity * Math.PI;
    }
    set power(e) {
        this.intensity = e / Math.PI;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e, t) {
        return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
}, fu = new ze, _s = new A, co = new A, Tc = class extends zs {
    constructor(){
        super(new yt(90, 1, .5, 500)), this.isPointLightShadow = !0, this._frameExtents = new Z(4, 2), this._viewportCount = 6, this._viewports = [
            new je(2, 1, 1, 1),
            new je(0, 1, 1, 1),
            new je(3, 1, 1, 1),
            new je(1, 1, 1, 1),
            new je(3, 0, 1, 1),
            new je(1, 0, 1, 1)
        ], this._cubeDirections = [
            new A(1, 0, 0),
            new A(-1, 0, 0),
            new A(0, 0, 1),
            new A(0, 0, -1),
            new A(0, 1, 0),
            new A(0, -1, 0)
        ], this._cubeUps = [
            new A(0, 1, 0),
            new A(0, 1, 0),
            new A(0, 1, 0),
            new A(0, 1, 0),
            new A(0, 0, 1),
            new A(0, 0, -1)
        ];
    }
    updateMatrices(e, t = 0) {
        let n = this.camera, i = this.matrix, r = e.distance || n.far;
        r !== n.far && (n.far = r, n.updateProjectionMatrix()), _s.setFromMatrixPosition(e.matrixWorld), n.position.copy(_s), co.copy(n.position), co.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(co), n.updateMatrixWorld(), i.makeTranslation(-_s.x, -_s.y, -_s.z), fu.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(fu);
    }
}, wc = class extends En {
    constructor(e, t, n = 0, i = 2){
        super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = i, this.shadow = new Tc;
    }
    get power() {
        return this.intensity * 4 * Math.PI;
    }
    set power(e) {
        this.intensity = e / (4 * Math.PI);
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e, t) {
        return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
    }
}, Ac = class extends zs {
    constructor(){
        super(new Ls(-5, 5, 5, -5, .5, 500)), this.isDirectionalLightShadow = !0;
    }
}, Rc = class extends En {
    constructor(e, t){
        super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Je.DEFAULT_UP), this.updateMatrix(), this.target = new Je, this.shadow = new Ac;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e) {
        return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
}, Cc = class extends En {
    constructor(e, t){
        super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
    }
}, Pc = class extends En {
    constructor(e, t, n = 10, i = 10){
        super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = i;
    }
    get power() {
        return this.intensity * this.width * this.height * Math.PI;
    }
    set power(e) {
        this.intensity = e / (this.width * this.height * Math.PI);
    }
    copy(e) {
        return super.copy(e), this.width = e.width, this.height = e.height, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.width = this.width, t.object.height = this.height, t;
    }
}, Lc = class {
    constructor(){
        this.isSphericalHarmonics3 = !0, this.coefficients = [];
        for(let e = 0; e < 9; e++)this.coefficients.push(new A);
    }
    set(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].copy(e[t]);
        return this;
    }
    zero() {
        for(let e = 0; e < 9; e++)this.coefficients[e].set(0, 0, 0);
        return this;
    }
    getAt(e, t) {
        let n = e.x, i = e.y, r = e.z, a = this.coefficients;
        return t.copy(a[0]).multiplyScalar(.282095), t.addScaledVector(a[1], .488603 * i), t.addScaledVector(a[2], .488603 * r), t.addScaledVector(a[3], .488603 * n), t.addScaledVector(a[4], 1.092548 * (n * i)), t.addScaledVector(a[5], 1.092548 * (i * r)), t.addScaledVector(a[6], .315392 * (3 * r * r - 1)), t.addScaledVector(a[7], 1.092548 * (n * r)), t.addScaledVector(a[8], .546274 * (n * n - i * i)), t;
    }
    getIrradianceAt(e, t) {
        let n = e.x, i = e.y, r = e.z, a = this.coefficients;
        return t.copy(a[0]).multiplyScalar(.886227), t.addScaledVector(a[1], 2 * .511664 * i), t.addScaledVector(a[2], 2 * .511664 * r), t.addScaledVector(a[3], 2 * .511664 * n), t.addScaledVector(a[4], 2 * .429043 * n * i), t.addScaledVector(a[5], 2 * .429043 * i * r), t.addScaledVector(a[6], .743125 * r * r - .247708), t.addScaledVector(a[7], 2 * .429043 * n * r), t.addScaledVector(a[8], .429043 * (n * n - i * i)), t;
    }
    add(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].add(e.coefficients[t]);
        return this;
    }
    addScaledSH(e, t) {
        for(let n = 0; n < 9; n++)this.coefficients[n].addScaledVector(e.coefficients[n], t);
        return this;
    }
    scale(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].multiplyScalar(e);
        return this;
    }
    lerp(e, t) {
        for(let n = 0; n < 9; n++)this.coefficients[n].lerp(e.coefficients[n], t);
        return this;
    }
    equals(e) {
        for(let t = 0; t < 9; t++)if (!this.coefficients[t].equals(e.coefficients[t])) return !1;
        return !0;
    }
    copy(e) {
        return this.set(e.coefficients);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(e, t = 0) {
        let n = this.coefficients;
        for(let i = 0; i < 9; i++)n[i].fromArray(e, t + i * 3);
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.coefficients;
        for(let i = 0; i < 9; i++)n[i].toArray(e, t + i * 3);
        return e;
    }
    static getBasisAt(e, t) {
        let n = e.x, i = e.y, r = e.z;
        t[0] = .282095, t[1] = .488603 * i, t[2] = .488603 * r, t[3] = .488603 * n, t[4] = 1.092548 * n * i, t[5] = 1.092548 * i * r, t[6] = .315392 * (3 * r * r - 1), t[7] = 1.092548 * n * r, t[8] = .546274 * (n * n - i * i);
    }
}, Ic = class extends En {
    constructor(e = new Lc, t = 1){
        super(void 0, t), this.isLightProbe = !0, this.sh = e;
    }
    copy(e) {
        return super.copy(e), this.sh.copy(e.sh), this;
    }
    fromJSON(e) {
        return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.sh = this.sh.toArray(), t;
    }
}, Uc = class s1 extends Dt {
    constructor(e){
        super(e), this.textures = {};
    }
    load(e, t, n, i) {
        let r = this, a = new rn(r.manager);
        a.setPath(r.path), a.setRequestHeader(r.requestHeader), a.setWithCredentials(r.withCredentials), a.load(e, function(o) {
            try {
                t(r.parse(JSON.parse(o)));
            } catch (c) {
                i ? i(c) : console.error(c), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = this.textures;
        function n(r) {
            return t[r] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", r), t[r];
        }
        let i = s1.createMaterialFromType(e.type);
        if (e.uuid !== void 0 && (i.uuid = e.uuid), e.name !== void 0 && (i.name = e.name), e.color !== void 0 && i.color !== void 0 && i.color.setHex(e.color), e.roughness !== void 0 && (i.roughness = e.roughness), e.metalness !== void 0 && (i.metalness = e.metalness), e.sheen !== void 0 && (i.sheen = e.sheen), e.sheenColor !== void 0 && (i.sheenColor = new pe().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (i.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && i.emissive !== void 0 && i.emissive.setHex(e.emissive), e.specular !== void 0 && i.specular !== void 0 && i.specular.setHex(e.specular), e.specularIntensity !== void 0 && (i.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && i.specularColor !== void 0 && i.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (i.shininess = e.shininess), e.clearcoat !== void 0 && (i.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (i.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (i.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (i.transmission = e.transmission), e.thickness !== void 0 && (i.thickness = e.thickness), e.attenuationDistance !== void 0 && (i.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && i.attenuationColor !== void 0 && i.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (i.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (i.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (i.fog = e.fog), e.flatShading !== void 0 && (i.flatShading = e.flatShading), e.blending !== void 0 && (i.blending = e.blending), e.combine !== void 0 && (i.combine = e.combine), e.side !== void 0 && (i.side = e.side), e.shadowSide !== void 0 && (i.shadowSide = e.shadowSide), e.opacity !== void 0 && (i.opacity = e.opacity), e.transparent !== void 0 && (i.transparent = e.transparent), e.alphaTest !== void 0 && (i.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (i.alphaHash = e.alphaHash), e.depthTest !== void 0 && (i.depthTest = e.depthTest), e.depthWrite !== void 0 && (i.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (i.colorWrite = e.colorWrite), e.stencilWrite !== void 0 && (i.stencilWrite = e.stencilWrite), e.stencilWriteMask !== void 0 && (i.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (i.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (i.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (i.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (i.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (i.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (i.stencilZPass = e.stencilZPass), e.wireframe !== void 0 && (i.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (i.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (i.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (i.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (i.rotation = e.rotation), e.linewidth !== void 0 && (i.linewidth = e.linewidth), e.dashSize !== void 0 && (i.dashSize = e.dashSize), e.gapSize !== void 0 && (i.gapSize = e.gapSize), e.scale !== void 0 && (i.scale = e.scale), e.polygonOffset !== void 0 && (i.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (i.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (i.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (i.dithering = e.dithering), e.alphaToCoverage !== void 0 && (i.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (i.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (i.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (i.visible = e.visible), e.toneMapped !== void 0 && (i.toneMapped = e.toneMapped), e.userData !== void 0 && (i.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? i.vertexColors = e.vertexColors > 0 : i.vertexColors = e.vertexColors), e.uniforms !== void 0) for(let r in e.uniforms){
            let a = e.uniforms[r];
            switch(i.uniforms[r] = {}, a.type){
                case "t":
                    i.uniforms[r].value = n(a.value);
                    break;
                case "c":
                    i.uniforms[r].value = new pe().setHex(a.value);
                    break;
                case "v2":
                    i.uniforms[r].value = new Z().fromArray(a.value);
                    break;
                case "v3":
                    i.uniforms[r].value = new A().fromArray(a.value);
                    break;
                case "v4":
                    i.uniforms[r].value = new je().fromArray(a.value);
                    break;
                case "m3":
                    i.uniforms[r].value = new He().fromArray(a.value);
                    break;
                case "m4":
                    i.uniforms[r].value = new ze().fromArray(a.value);
                    break;
                default:
                    i.uniforms[r].value = a.value;
            }
        }
        if (e.defines !== void 0 && (i.defines = e.defines), e.vertexShader !== void 0 && (i.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (i.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (i.glslVersion = e.glslVersion), e.extensions !== void 0) for(let r in e.extensions)i.extensions[r] = e.extensions[r];
        if (e.lights !== void 0 && (i.lights = e.lights), e.clipping !== void 0 && (i.clipping = e.clipping), e.size !== void 0 && (i.size = e.size), e.sizeAttenuation !== void 0 && (i.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (i.map = n(e.map)), e.matcap !== void 0 && (i.matcap = n(e.matcap)), e.alphaMap !== void 0 && (i.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (i.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (i.bumpScale = e.bumpScale), e.normalMap !== void 0 && (i.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (i.normalMapType = e.normalMapType), e.normalScale !== void 0) {
            let r = e.normalScale;
            Array.isArray(r) === !1 && (r = [
                r,
                r
            ]), i.normalScale = new Z().fromArray(r);
        }
        return e.displacementMap !== void 0 && (i.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (i.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (i.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (i.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (i.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (i.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (i.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (i.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (i.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (i.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (i.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (i.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (i.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (i.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (i.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (i.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (i.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (i.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (i.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (i.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (i.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (i.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (i.clearcoatNormalScale = new Z().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (i.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (i.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (i.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (i.thicknessMap = n(e.thicknessMap)), e.anisotropyMap !== void 0 && (i.anisotropyMap = n(e.anisotropyMap)), e.sheenColorMap !== void 0 && (i.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (i.sheenRoughnessMap = n(e.sheenRoughnessMap)), i;
    }
    setTextures(e) {
        return this.textures = e, this;
    }
    static createMaterialFromType(e) {
        let t = {
            ShadowMaterial: cc,
            SpriteMaterial: ea,
            RawShaderMaterial: lc,
            ShaderMaterial: jt,
            PointsMaterial: na,
            MeshPhysicalMaterial: hc,
            MeshStandardMaterial: da,
            MeshPhongMaterial: uc,
            MeshToonMaterial: dc,
            MeshNormalMaterial: fc,
            MeshLambertMaterial: pc,
            MeshDepthMaterial: Qr,
            MeshDistanceMaterial: jr,
            MeshBasicMaterial: Sn,
            MeshMatcapMaterial: mc,
            LineDashedMaterial: gc,
            LineBasicMaterial: wt,
            Material: bt
        };
        return new t[e];
    }
}, ga = class {
    static decodeText(e) {
        if (typeof TextDecoder < "u") return new TextDecoder().decode(e);
        let t = "";
        for(let n = 0, i = e.length; n < i; n++)t += String.fromCharCode(e[n]);
        try {
            return decodeURIComponent(escape(t));
        } catch  {
            return t;
        }
    }
    static extractUrlBase(e) {
        let t = e.lastIndexOf("/");
        return t === -1 ? "./" : e.slice(0, t + 1);
    }
    static resolveURL(e, t) {
        return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
    }
}, Dc = class extends Ge {
    constructor(){
        super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
    }
    copy(e) {
        return super.copy(e), this.instanceCount = e.instanceCount, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
    }
}, Nc = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new rn(r.manager);
        a.setPath(r.path), a.setRequestHeader(r.requestHeader), a.setWithCredentials(r.withCredentials), a.load(e, function(o) {
            try {
                t(r.parse(JSON.parse(o)));
            } catch (c) {
                i ? i(c) : console.error(c), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = {}, n = {};
        function i(f, m) {
            if (t[m] !== void 0) return t[m];
            let g = f.interleavedBuffers[m], p = r(f, g.buffer), v = ki(g.type, p), x = new Is(v, g.stride);
            return x.uuid = g.uuid, t[m] = x, x;
        }
        function r(f, m) {
            if (n[m] !== void 0) return n[m];
            let g = f.arrayBuffers[m], p = new Uint32Array(g).buffer;
            return n[m] = p, p;
        }
        let a = e.isInstancedBufferGeometry ? new Dc : new Ge, o = e.data.index;
        if (o !== void 0) {
            let f = ki(o.type, o.array);
            a.setIndex(new et(f, 1));
        }
        let c = e.data.attributes;
        for(let f in c){
            let m = c[f], _;
            if (m.isInterleavedBufferAttribute) {
                let g = i(e.data, m.data);
                _ = new Qi(g, m.itemSize, m.offset, m.normalized);
            } else {
                let g = ki(m.type, m.array), p = m.isInstancedBufferAttribute ? ui : et;
                _ = new p(g, m.itemSize, m.normalized);
            }
            m.name !== void 0 && (_.name = m.name), m.usage !== void 0 && _.setUsage(m.usage), m.updateRange !== void 0 && (_.updateRange.offset = m.updateRange.offset, _.updateRange.count = m.updateRange.count), a.setAttribute(f, _);
        }
        let l = e.data.morphAttributes;
        if (l) for(let f in l){
            let m = l[f], _ = [];
            for(let g = 0, p = m.length; g < p; g++){
                let v = m[g], x;
                if (v.isInterleavedBufferAttribute) {
                    let y = i(e.data, v.data);
                    x = new Qi(y, v.itemSize, v.offset, v.normalized);
                } else {
                    let y = ki(v.type, v.array);
                    x = new et(y, v.itemSize, v.normalized);
                }
                v.name !== void 0 && (x.name = v.name), _.push(x);
            }
            a.morphAttributes[f] = _;
        }
        e.data.morphTargetsRelative && (a.morphTargetsRelative = !0);
        let u = e.data.groups || e.data.drawcalls || e.data.offsets;
        if (u !== void 0) for(let f = 0, m = u.length; f !== m; ++f){
            let _ = u[f];
            a.addGroup(_.start, _.count, _.materialIndex);
        }
        let d = e.data.boundingSphere;
        if (d !== void 0) {
            let f = new A;
            d.center !== void 0 && f.fromArray(d.center), a.boundingSphere = new Yt(f, d.radius);
        }
        return e.name && (a.name = e.name), e.userData && (a.userData = e.userData), a;
    }
}, pu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = this.path === "" ? ga.extractUrlBase(e) : this.path;
        this.resourcePath = this.resourcePath || a;
        let o = new rn(this.manager);
        o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function(c) {
            let l = null;
            try {
                l = JSON.parse(c);
            } catch (u) {
                i !== void 0 && i(u), console.error("THREE:ObjectLoader: Can't parse " + e + ".", u.message);
                return;
            }
            let h = l.metadata;
            if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry") {
                i !== void 0 && i(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
                return;
            }
            r.parse(l, t);
        }, n, i);
    }
    async loadAsync(e, t) {
        let n = this, i = this.path === "" ? ga.extractUrlBase(e) : this.path;
        this.resourcePath = this.resourcePath || i;
        let r = new rn(this.manager);
        r.setPath(this.path), r.setRequestHeader(this.requestHeader), r.setWithCredentials(this.withCredentials);
        let a = await r.loadAsync(e, t), o = JSON.parse(a), c = o.metadata;
        if (c === void 0 || c.type === void 0 || c.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + e);
        return await n.parseAsync(o);
    }
    parse(e, t) {
        let n = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, i), a = this.parseImages(e.images, function() {
            t !== void 0 && t(l);
        }), o = this.parseTextures(e.textures, a), c = this.parseMaterials(e.materials, o), l = this.parseObject(e.object, r, c, o, n), h = this.parseSkeletons(e.skeletons, l);
        if (this.bindSkeletons(l, h), t !== void 0) {
            let u = !1;
            for(let d in a)if (a[d].data instanceof HTMLImageElement) {
                u = !0;
                break;
            }
            u === !1 && t(l);
        }
        return l;
    }
    async parseAsync(e) {
        let t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), i = this.parseGeometries(e.geometries, n), r = await this.parseImagesAsync(e.images), a = this.parseTextures(e.textures, r), o = this.parseMaterials(e.materials, a), c = this.parseObject(e.object, i, o, a, t), l = this.parseSkeletons(e.skeletons, c);
        return this.bindSkeletons(c, l), c;
    }
    parseShapes(e) {
        let t = {};
        if (e !== void 0) for(let n = 0, i = e.length; n < i; n++){
            let r = new Fn().fromJSON(e[n]);
            t[r.uuid] = r;
        }
        return t;
    }
    parseSkeletons(e, t) {
        let n = {}, i = {};
        if (t.traverse(function(r) {
            r.isBone && (i[r.uuid] = r);
        }), e !== void 0) for(let r = 0, a = e.length; r < a; r++){
            let o = new Oo().fromJSON(e[r], i);
            n[o.uuid] = o;
        }
        return n;
    }
    parseGeometries(e, t) {
        let n = {};
        if (e !== void 0) {
            let i = new Nc;
            for(let r = 0, a = e.length; r < a; r++){
                let o, c = e[r];
                switch(c.type){
                    case "BufferGeometry":
                    case "InstancedBufferGeometry":
                        o = i.parse(c);
                        break;
                    default:
                        c.type in ru ? o = ru[c.type].fromJSON(c, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${c.type}"`);
                }
                o.uuid = c.uuid, c.name !== void 0 && (o.name = c.name), c.userData !== void 0 && (o.userData = c.userData), n[c.uuid] = o;
            }
        }
        return n;
    }
    parseMaterials(e, t) {
        let n = {}, i = {};
        if (e !== void 0) {
            let r = new Uc;
            r.setTextures(t);
            for(let a = 0, o = e.length; a < o; a++){
                let c = e[a];
                n[c.uuid] === void 0 && (n[c.uuid] = r.parse(c)), i[c.uuid] = n[c.uuid];
            }
        }
        return i;
    }
    parseAnimations(e) {
        let t = {};
        if (e !== void 0) for(let n = 0; n < e.length; n++){
            let i = e[n], r = is.parse(i);
            t[r.uuid] = r;
        }
        return t;
    }
    parseImages(e, t) {
        let n = this, i = {}, r;
        function a(c) {
            return n.manager.itemStart(c), r.load(c, function() {
                n.manager.itemEnd(c);
            }, void 0, function() {
                n.manager.itemError(c), n.manager.itemEnd(c);
            });
        }
        function o(c) {
            if (typeof c == "string") {
                let l = c, h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l) ? l : n.resourcePath + l;
                return a(h);
            } else return c.data ? {
                data: ki(c.type, c.data),
                width: c.width,
                height: c.height
            } : null;
        }
        if (e !== void 0 && e.length > 0) {
            let c = new ma(t);
            r = new rs(c), r.setCrossOrigin(this.crossOrigin);
            for(let l = 0, h = e.length; l < h; l++){
                let u = e[l], d = u.url;
                if (Array.isArray(d)) {
                    let f = [];
                    for(let m = 0, _ = d.length; m < _; m++){
                        let g = d[m], p = o(g);
                        p !== null && (p instanceof HTMLImageElement ? f.push(p) : f.push(new oi(p.data, p.width, p.height)));
                    }
                    i[u.uuid] = new In(f);
                } else {
                    let f = o(u.url);
                    i[u.uuid] = new In(f);
                }
            }
        }
        return i;
    }
    async parseImagesAsync(e) {
        let t = this, n = {}, i;
        async function r(a) {
            if (typeof a == "string") {
                let o = a, c = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(o) ? o : t.resourcePath + o;
                return await i.loadAsync(c);
            } else return a.data ? {
                data: ki(a.type, a.data),
                width: a.width,
                height: a.height
            } : null;
        }
        if (e !== void 0 && e.length > 0) {
            i = new rs(this.manager), i.setCrossOrigin(this.crossOrigin);
            for(let a = 0, o = e.length; a < o; a++){
                let c = e[a], l = c.url;
                if (Array.isArray(l)) {
                    let h = [];
                    for(let u = 0, d = l.length; u < d; u++){
                        let f = l[u], m = await r(f);
                        m !== null && (m instanceof HTMLImageElement ? h.push(m) : h.push(new oi(m.data, m.width, m.height)));
                    }
                    n[c.uuid] = new In(h);
                } else {
                    let h = await r(c.url);
                    n[c.uuid] = new In(h);
                }
            }
        }
        return n;
    }
    parseTextures(e, t) {
        function n(r, a) {
            return typeof r == "number" ? r : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", r), a[r]);
        }
        let i = {};
        if (e !== void 0) for(let r = 0, a = e.length; r < a; r++){
            let o = e[r];
            o.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', o.uuid), t[o.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", o.image);
            let c = t[o.image], l = c.data, h;
            Array.isArray(l) ? (h = new Ki, l.length === 6 && (h.needsUpdate = !0)) : (l && l.data ? h = new oi : h = new St, l && (h.needsUpdate = !0)), h.source = c, h.uuid = o.uuid, o.name !== void 0 && (h.name = o.name), o.mapping !== void 0 && (h.mapping = n(o.mapping, Tx)), o.channel !== void 0 && (h.channel = o.channel), o.offset !== void 0 && h.offset.fromArray(o.offset), o.repeat !== void 0 && h.repeat.fromArray(o.repeat), o.center !== void 0 && h.center.fromArray(o.center), o.rotation !== void 0 && (h.rotation = o.rotation), o.wrap !== void 0 && (h.wrapS = n(o.wrap[0], mu), h.wrapT = n(o.wrap[1], mu)), o.format !== void 0 && (h.format = o.format), o.internalFormat !== void 0 && (h.internalFormat = o.internalFormat), o.type !== void 0 && (h.type = o.type), o.colorSpace !== void 0 && (h.colorSpace = o.colorSpace), o.encoding !== void 0 && (h.encoding = o.encoding), o.minFilter !== void 0 && (h.minFilter = n(o.minFilter, gu)), o.magFilter !== void 0 && (h.magFilter = n(o.magFilter, gu)), o.anisotropy !== void 0 && (h.anisotropy = o.anisotropy), o.flipY !== void 0 && (h.flipY = o.flipY), o.generateMipmaps !== void 0 && (h.generateMipmaps = o.generateMipmaps), o.premultiplyAlpha !== void 0 && (h.premultiplyAlpha = o.premultiplyAlpha), o.unpackAlignment !== void 0 && (h.unpackAlignment = o.unpackAlignment), o.compareFunction !== void 0 && (h.compareFunction = o.compareFunction), o.userData !== void 0 && (h.userData = o.userData), i[o.uuid] = h;
        }
        return i;
    }
    parseObject(e, t, n, i, r) {
        let a;
        function o(d) {
            return t[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", d), t[d];
        }
        function c(d) {
            if (d !== void 0) {
                if (Array.isArray(d)) {
                    let f = [];
                    for(let m = 0, _ = d.length; m < _; m++){
                        let g = d[m];
                        n[g] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", g), f.push(n[g]);
                    }
                    return f;
                }
                return n[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", d), n[d];
            }
        }
        function l(d) {
            return i[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", d), i[d];
        }
        let h, u;
        switch(e.type){
            case "Scene":
                a = new Io, e.background !== void 0 && (Number.isInteger(e.background) ? a.background = new pe(e.background) : a.background = l(e.background)), e.environment !== void 0 && (a.environment = l(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? a.fog = new Lo(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (a.fog = new Po(e.fog.color, e.fog.density)), e.fog.name !== "" && (a.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (a.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (a.backgroundIntensity = e.backgroundIntensity);
                break;
            case "PerspectiveCamera":
                a = new yt(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (a.focus = e.focus), e.zoom !== void 0 && (a.zoom = e.zoom), e.filmGauge !== void 0 && (a.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (a.filmOffset = e.filmOffset), e.view !== void 0 && (a.view = Object.assign({}, e.view));
                break;
            case "OrthographicCamera":
                a = new Ls(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (a.zoom = e.zoom), e.view !== void 0 && (a.view = Object.assign({}, e.view));
                break;
            case "AmbientLight":
                a = new Cc(e.color, e.intensity);
                break;
            case "DirectionalLight":
                a = new Rc(e.color, e.intensity);
                break;
            case "PointLight":
                a = new wc(e.color, e.intensity, e.distance, e.decay);
                break;
            case "RectAreaLight":
                a = new Pc(e.color, e.intensity, e.width, e.height);
                break;
            case "SpotLight":
                a = new Ec(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
                break;
            case "HemisphereLight":
                a = new Sc(e.color, e.groundColor, e.intensity);
                break;
            case "LightProbe":
                a = new Ic().fromJSON(e);
                break;
            case "SkinnedMesh":
                h = o(e.geometry), u = c(e.material), a = new No(h, u), e.bindMode !== void 0 && (a.bindMode = e.bindMode), e.bindMatrix !== void 0 && a.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (a.skeleton = e.skeleton);
                break;
            case "Mesh":
                h = o(e.geometry), u = c(e.material), a = new Mt(h, u);
                break;
            case "InstancedMesh":
                h = o(e.geometry), u = c(e.material);
                let d = e.count, f = e.instanceMatrix, m = e.instanceColor;
                a = new Fo(h, u, d), a.instanceMatrix = new ui(new Float32Array(f.array), 16), m !== void 0 && (a.instanceColor = new ui(new Float32Array(m.array), m.itemSize));
                break;
            case "LOD":
                a = new Do;
                break;
            case "Line":
                a = new bn(o(e.geometry), c(e.material));
                break;
            case "LineLoop":
                a = new Bo(o(e.geometry), c(e.material));
                break;
            case "LineSegments":
                a = new en(o(e.geometry), c(e.material));
                break;
            case "PointCloud":
            case "Points":
                a = new Vo(o(e.geometry), c(e.material));
                break;
            case "Sprite":
                a = new Uo(c(e.material));
                break;
            case "Group":
                a = new ti;
                break;
            case "Bone":
                a = new ta;
                break;
            default:
                a = new Je;
        }
        if (a.uuid = e.uuid, e.name !== void 0 && (a.name = e.name), e.matrix !== void 0 ? (a.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (a.matrixAutoUpdate = e.matrixAutoUpdate), a.matrixAutoUpdate && a.matrix.decompose(a.position, a.quaternion, a.scale)) : (e.position !== void 0 && a.position.fromArray(e.position), e.rotation !== void 0 && a.rotation.fromArray(e.rotation), e.quaternion !== void 0 && a.quaternion.fromArray(e.quaternion), e.scale !== void 0 && a.scale.fromArray(e.scale)), e.up !== void 0 && a.up.fromArray(e.up), e.castShadow !== void 0 && (a.castShadow = e.castShadow), e.receiveShadow !== void 0 && (a.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (a.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (a.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (a.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && a.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (a.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (a.visible = e.visible), e.frustumCulled !== void 0 && (a.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (a.renderOrder = e.renderOrder), e.userData !== void 0 && (a.userData = e.userData), e.layers !== void 0 && (a.layers.mask = e.layers), e.children !== void 0) {
            let d = e.children;
            for(let f = 0; f < d.length; f++)a.add(this.parseObject(d[f], t, n, i, r));
        }
        if (e.animations !== void 0) {
            let d = e.animations;
            for(let f = 0; f < d.length; f++){
                let m = d[f];
                a.animations.push(r[m]);
            }
        }
        if (e.type === "LOD") {
            e.autoUpdate !== void 0 && (a.autoUpdate = e.autoUpdate);
            let d = e.levels;
            for(let f = 0; f < d.length; f++){
                let m = d[f], _ = a.getObjectByProperty("uuid", m.object);
                _ !== void 0 && a.addLevel(_, m.distance, m.hysteresis);
            }
        }
        return a;
    }
    bindSkeletons(e, t) {
        Object.keys(t).length !== 0 && e.traverse(function(n) {
            if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
                let i = t[n.skeleton];
                i === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(i, n.bindMatrix);
            }
        });
    }
}, Tx = {
    UVMapping: Gc,
    CubeReflectionMapping: zn,
    CubeRefractionMapping: ci,
    EquirectangularReflectionMapping: Ir,
    EquirectangularRefractionMapping: Ur,
    CubeUVReflectionMapping: Vs
}, mu = {
    RepeatWrapping: Dr,
    ClampToEdgeWrapping: It,
    MirroredRepeatWrapping: Nr
}, gu = {
    NearestFilter: pt,
    NearestMipmapNearestFilter: fo,
    NearestMipmapLinearFilter: Lr,
    LinearFilter: mt,
    LinearMipmapNearestFilter: ud,
    LinearMipmapLinearFilter: li
}, _u = class extends Dt {
    constructor(e){
        super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = {
            premultiplyAlpha: "none"
        };
    }
    setOptions(e) {
        return this.options = e, this;
    }
    load(e, t, n, i) {
        e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = this, a = ss.get(e);
        if (a !== void 0) return r.manager.itemStart(e), setTimeout(function() {
            t && t(a), r.manager.itemEnd(e);
        }, 0), a;
        let o = {};
        o.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", o.headers = this.requestHeader, fetch(e, o).then(function(c) {
            return c.blob();
        }).then(function(c) {
            return createImageBitmap(c, Object.assign(r.options, {
                colorSpaceConversion: "none"
            }));
        }).then(function(c) {
            ss.add(e, c), t && t(c), r.manager.itemEnd(e);
        }).catch(function(c) {
            i && i(c), r.manager.itemError(e), r.manager.itemEnd(e);
        }), r.manager.itemStart(e);
    }
}, Er, _a = class {
    static getContext() {
        return Er === void 0 && (Er = new (window.AudioContext || window.webkitAudioContext)), Er;
    }
    static setContext(e) {
        Er = e;
    }
}, xu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new rn(this.manager);
        a.setResponseType("arraybuffer"), a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(c) {
            try {
                let l = c.slice(0);
                _a.getContext().decodeAudioData(l, function(u) {
                    t(u);
                }, o);
            } catch (l) {
                o(l);
            }
        }, n, i);
        function o(c) {
            i ? i(c) : console.error(c), r.manager.itemError(e);
        }
    }
}, vu = new ze, yu = new ze, Zn = new ze, Mu = class {
    constructor(){
        this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new yt, this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new yt, this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    update(e) {
        let t = this._cache;
        if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
            t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, Zn.copy(e.projectionMatrix);
            let i = t.eyeSep / 2, r = i * t.near / t.focus, a = t.near * Math.tan(ai * t.fov * .5) / t.zoom, o, c;
            yu.elements[12] = -i, vu.elements[12] = i, o = -a * t.aspect + r, c = a * t.aspect + r, Zn.elements[0] = 2 * t.near / (c - o), Zn.elements[8] = (c + o) / (c - o), this.cameraL.projectionMatrix.copy(Zn), o = -a * t.aspect - r, c = a * t.aspect - r, Zn.elements[0] = 2 * t.near / (c - o), Zn.elements[8] = (c + o) / (c - o), this.cameraR.projectionMatrix.copy(Zn);
        }
        this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(yu), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(vu);
    }
}, Oc = class {
    constructor(e = !0){
        this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
    }
    start() {
        this.startTime = Su(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
    }
    stop() {
        this.getElapsedTime(), this.running = !1, this.autoStart = !1;
    }
    getElapsedTime() {
        return this.getDelta(), this.elapsedTime;
    }
    getDelta() {
        let e = 0;
        if (this.autoStart && !this.running) return this.start(), 0;
        if (this.running) {
            let t = Su();
            e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
        }
        return e;
    }
};
function Su() {
    return (typeof performance > "u" ? Date : performance).now();
}
var Jn = new A, bu = new Ut, wx = new A, $n = new A, Eu = class extends Je {
    constructor(){
        super(), this.type = "AudioListener", this.context = _a.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new Oc;
    }
    getInput() {
        return this.gain;
    }
    removeFilter() {
        return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
    }
    getFilter() {
        return this.filter;
    }
    setFilter(e) {
        return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
    }
    getMasterVolume() {
        return this.gain.gain.value;
    }
    setMasterVolume(e) {
        return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this;
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e);
        let t = this.context.listener, n = this.up;
        if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Jn, bu, wx), $n.set(0, 0, -1).applyQuaternion(bu), t.positionX) {
            let i = this.context.currentTime + this.timeDelta;
            t.positionX.linearRampToValueAtTime(Jn.x, i), t.positionY.linearRampToValueAtTime(Jn.y, i), t.positionZ.linearRampToValueAtTime(Jn.z, i), t.forwardX.linearRampToValueAtTime($n.x, i), t.forwardY.linearRampToValueAtTime($n.y, i), t.forwardZ.linearRampToValueAtTime($n.z, i), t.upX.linearRampToValueAtTime(n.x, i), t.upY.linearRampToValueAtTime(n.y, i), t.upZ.linearRampToValueAtTime(n.z, i);
        } else t.setPosition(Jn.x, Jn.y, Jn.z), t.setOrientation($n.x, $n.y, $n.z, n.x, n.y, n.z);
    }
}, Fc = class extends Je {
    constructor(e){
        super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
    }
    getOutput() {
        return this.gain;
    }
    setNodeSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
    }
    setMediaElementSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
    }
    setMediaStreamSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
    }
    setBuffer(e) {
        return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
    }
    play(e = 0) {
        if (this.isPlaying === !0) {
            console.warn("THREE.Audio: Audio is already playing.");
            return;
        }
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this._startedAt = this.context.currentTime + e;
        let t = this.context.createBufferSource();
        return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
    }
    pause() {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
    }
    stop() {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
    }
    connect() {
        if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for(let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].connect(this.filters[e]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        return this._connected = !0, this;
    }
    disconnect() {
        if (this._connected !== !1) {
            if (this.filters.length > 0) {
                this.source.disconnect(this.filters[0]);
                for(let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].disconnect(this.filters[e]);
                this.filters[this.filters.length - 1].disconnect(this.getOutput());
            } else this.source.disconnect(this.getOutput());
            return this._connected = !1, this;
        }
    }
    getFilters() {
        return this.filters;
    }
    setFilters(e) {
        return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
    }
    setDetune(e) {
        if (this.detune = e, this.source.detune !== void 0) return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
    }
    getDetune() {
        return this.detune;
    }
    getFilter() {
        return this.getFilters()[0];
    }
    setFilter(e) {
        return this.setFilters(e ? [
            e
        ] : []);
    }
    setPlaybackRate(e) {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
    }
    getPlaybackRate() {
        return this.playbackRate;
    }
    onEnded() {
        this.isPlaying = !1;
    }
    getLoop() {
        return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
    }
    setLoop(e) {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
    }
    setLoopStart(e) {
        return this.loopStart = e, this;
    }
    setLoopEnd(e) {
        return this.loopEnd = e, this;
    }
    getVolume() {
        return this.gain.gain.value;
    }
    setVolume(e) {
        return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this;
    }
}, Kn = new A, Tu = new Ut, Ax = new A, Qn = new A, wu = class extends Fc {
    constructor(e){
        super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
    }
    connect() {
        super.connect(), this.panner.connect(this.gain);
    }
    disconnect() {
        super.disconnect(), this.panner.disconnect(this.gain);
    }
    getOutput() {
        return this.panner;
    }
    getRefDistance() {
        return this.panner.refDistance;
    }
    setRefDistance(e) {
        return this.panner.refDistance = e, this;
    }
    getRolloffFactor() {
        return this.panner.rolloffFactor;
    }
    setRolloffFactor(e) {
        return this.panner.rolloffFactor = e, this;
    }
    getDistanceModel() {
        return this.panner.distanceModel;
    }
    setDistanceModel(e) {
        return this.panner.distanceModel = e, this;
    }
    getMaxDistance() {
        return this.panner.maxDistance;
    }
    setMaxDistance(e) {
        return this.panner.maxDistance = e, this;
    }
    setDirectionalCone(e, t, n) {
        return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
    }
    updateMatrixWorld(e) {
        if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1) return;
        this.matrixWorld.decompose(Kn, Tu, Ax), Qn.set(0, 0, 1).applyQuaternion(Tu);
        let t = this.panner;
        if (t.positionX) {
            let n = this.context.currentTime + this.listener.timeDelta;
            t.positionX.linearRampToValueAtTime(Kn.x, n), t.positionY.linearRampToValueAtTime(Kn.y, n), t.positionZ.linearRampToValueAtTime(Kn.z, n), t.orientationX.linearRampToValueAtTime(Qn.x, n), t.orientationY.linearRampToValueAtTime(Qn.y, n), t.orientationZ.linearRampToValueAtTime(Qn.z, n);
        } else t.setPosition(Kn.x, Kn.y, Kn.z), t.setOrientation(Qn.x, Qn.y, Qn.z);
    }
}, Au = class {
    constructor(e, t = 2048){
        this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
        return this.analyser.getByteFrequencyData(this.data), this.data;
    }
    getAverageFrequency() {
        let e = 0, t = this.getFrequencyData();
        for(let n = 0; n < t.length; n++)e += t[n];
        return e / t.length;
    }
}, Bc = class {
    constructor(e, t, n){
        this.binding = e, this.valueSize = n;
        let i, r, a;
        switch(t){
            case "quaternion":
                i = this._slerp, r = this._slerpAdditive, a = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
                break;
            case "string":
            case "bool":
                i = this._select, r = this._select, a = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
                break;
            default:
                i = this._lerp, r = this._lerpAdditive, a = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
        }
        this._mixBufferRegion = i, this._mixBufferRegionAdditive = r, this._setIdentity = a, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
    }
    accumulate(e, t) {
        let n = this.buffer, i = this.valueSize, r = e * i + i, a = this.cumulativeWeight;
        if (a === 0) {
            for(let o = 0; o !== i; ++o)n[r + o] = n[o];
            a = t;
        } else {
            a += t;
            let o = t / a;
            this._mixBufferRegion(n, r, 0, o, i);
        }
        this.cumulativeWeight = a;
    }
    accumulateAdditive(e) {
        let t = this.buffer, n = this.valueSize, i = n * this._addIndex;
        this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, i, 0, e, n), this.cumulativeWeightAdditive += e;
    }
    apply(e) {
        let t = this.valueSize, n = this.buffer, i = e * t + t, r = this.cumulativeWeight, a = this.cumulativeWeightAdditive, o = this.binding;
        if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, r < 1) {
            let c = t * this._origIndex;
            this._mixBufferRegion(n, i, c, 1 - r, t);
        }
        a > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t);
        for(let c = t, l = t + t; c !== l; ++c)if (n[c] !== n[c + t]) {
            o.setValue(n, i);
            break;
        }
    }
    saveOriginalState() {
        let e = this.binding, t = this.buffer, n = this.valueSize, i = n * this._origIndex;
        e.getValue(t, i);
        for(let r = n, a = i; r !== a; ++r)t[r] = t[i + r % n];
        this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
    }
    restoreOriginalState() {
        let e = this.valueSize * 3;
        this.binding.setValue(this.buffer, e);
    }
    _setAdditiveIdentityNumeric() {
        let e = this._addIndex * this.valueSize, t = e + this.valueSize;
        for(let n = e; n < t; n++)this.buffer[n] = 0;
    }
    _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
        let e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
        for(let n = 0; n < this.valueSize; n++)this.buffer[t + n] = this.buffer[e + n];
    }
    _select(e, t, n, i, r) {
        if (i >= .5) for(let a = 0; a !== r; ++a)e[t + a] = e[n + a];
    }
    _slerp(e, t, n, i) {
        Ut.slerpFlat(e, t, e, t, e, n, i);
    }
    _slerpAdditive(e, t, n, i, r) {
        let a = this._workIndex * r;
        Ut.multiplyQuaternionsFlat(e, a, e, t, e, n), Ut.slerpFlat(e, t, e, t, e, a, i);
    }
    _lerp(e, t, n, i, r) {
        let a = 1 - i;
        for(let o = 0; o !== r; ++o){
            let c = t + o;
            e[c] = e[c] * a + e[n + o] * i;
        }
    }
    _lerpAdditive(e, t, n, i, r) {
        for(let a = 0; a !== r; ++a){
            let o = t + a;
            e[o] = e[o] + e[n + a] * i;
        }
    }
}, Kc = "\\[\\]\\.:\\/", Rx = new RegExp("[" + Kc + "]", "g"), Qc = "[^" + Kc + "]", Cx = "[^" + Kc.replace("\\.", "") + "]", Px = /((?:WC+[\/:])*)/.source.replace("WC", Qc), Lx = /(WCOD+)?/.source.replace("WCOD", Cx), Ix = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", Qc), Ux = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", Qc), Dx = new RegExp("^" + Px + Lx + Ix + Ux + "$"), Nx = [
    "material",
    "materials",
    "bones",
    "map"
], zc = class {
    constructor(e, t, n){
        let i = n || Ke.parseTrackName(t);
        this._targetGroup = e, this._bindings = e.subscribe_(t, i);
    }
    getValue(e, t) {
        this.bind();
        let n = this._targetGroup.nCachedObjects_, i = this._bindings[n];
        i !== void 0 && i.getValue(e, t);
    }
    setValue(e, t) {
        let n = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i)n[i].setValue(e, t);
    }
    bind() {
        let e = this._bindings;
        for(let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].bind();
    }
    unbind() {
        let e = this._bindings;
        for(let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].unbind();
    }
}, Ke = class s1 {
    constructor(e, t, n){
        this.path = t, this.parsedPath = n || s1.parseTrackName(t), this.node = s1.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
    static create(e, t, n) {
        return e && e.isAnimationObjectGroup ? new s1.Composite(e, t, n) : new s1(e, t, n);
    }
    static sanitizeNodeName(e) {
        return e.replace(/\s/g, "_").replace(Rx, "");
    }
    static parseTrackName(e) {
        let t = Dx.exec(e);
        if (t === null) throw new Error("PropertyBinding: Cannot parse trackName: " + e);
        let n = {
            nodeName: t[2],
            objectName: t[3],
            objectIndex: t[4],
            propertyName: t[5],
            propertyIndex: t[6]
        }, i = n.nodeName && n.nodeName.lastIndexOf(".");
        if (i !== void 0 && i !== -1) {
            let r = n.nodeName.substring(i + 1);
            Nx.indexOf(r) !== -1 && (n.nodeName = n.nodeName.substring(0, i), n.objectName = r);
        }
        if (n.propertyName === null || n.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
        return n;
    }
    static findNode(e, t) {
        if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid) return e;
        if (e.skeleton) {
            let n = e.skeleton.getBoneByName(t);
            if (n !== void 0) return n;
        }
        if (e.children) {
            let n = function(r) {
                for(let a = 0; a < r.length; a++){
                    let o = r[a];
                    if (o.name === t || o.uuid === t) return o;
                    let c = n(o.children);
                    if (c) return c;
                }
                return null;
            }, i = n(e.children);
            if (i) return i;
        }
        return null;
    }
    _getValue_unavailable() {}
    _setValue_unavailable() {}
    _getValue_direct(e, t) {
        e[t] = this.targetObject[this.propertyName];
    }
    _getValue_array(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)e[t++] = n[i];
    }
    _getValue_arrayElement(e, t) {
        e[t] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(e, t) {
        this.resolvedProperty.toArray(e, t);
    }
    _setValue_direct(e, t) {
        this.targetObject[this.propertyName] = e[t];
    }
    _setValue_direct_setNeedsUpdate(e, t) {
        this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
        this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_array(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
    }
    _setValue_array_setNeedsUpdate(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
        this.targetObject.needsUpdate = !0;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
        this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_arrayElement(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t];
    }
    _setValue_arrayElement_setNeedsUpdate(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_fromArray(e, t) {
        this.resolvedProperty.fromArray(e, t);
    }
    _setValue_fromArray_setNeedsUpdate(e, t) {
        this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
        this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _getValue_unbound(e, t) {
        this.bind(), this.getValue(e, t);
    }
    _setValue_unbound(e, t) {
        this.bind(), this.setValue(e, t);
    }
    bind() {
        let e = this.node, t = this.parsedPath, n = t.objectName, i = t.propertyName, r = t.propertyIndex;
        if (e || (e = s1.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
            console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
            return;
        }
        if (n) {
            let l = t.objectIndex;
            switch(n){
                case "materials":
                    if (!e.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!e.material.materials) {
                        console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                        return;
                    }
                    e = e.material.materials;
                    break;
                case "bones":
                    if (!e.skeleton) {
                        console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                        return;
                    }
                    e = e.skeleton.bones;
                    for(let h = 0; h < e.length; h++)if (e[h].name === l) {
                        l = h;
                        break;
                    }
                    break;
                case "map":
                    if ("map" in e) {
                        e = e.map;
                        break;
                    }
                    if (!e.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!e.material.map) {
                        console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                        return;
                    }
                    e = e.material.map;
                    break;
                default:
                    if (e[n] === void 0) {
                        console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                        return;
                    }
                    e = e[n];
            }
            if (l !== void 0) {
                if (e[l] === void 0) {
                    console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
                    return;
                }
                e = e[l];
            }
        }
        let a = e[i];
        if (a === void 0) {
            let l = t.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + l + "." + i + " but it wasn't found.", e);
            return;
        }
        let o = this.Versioning.None;
        this.targetObject = e, e.needsUpdate !== void 0 ? o = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (o = this.Versioning.MatrixWorldNeedsUpdate);
        let c = this.BindingType.Direct;
        if (r !== void 0) {
            if (i === "morphTargetInfluences") {
                if (!e.geometry) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                    return;
                }
                if (!e.geometry.morphAttributes) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                    return;
                }
                e.morphTargetDictionary[r] !== void 0 && (r = e.morphTargetDictionary[r]);
            }
            c = this.BindingType.ArrayElement, this.resolvedProperty = a, this.propertyIndex = r;
        } else a.fromArray !== void 0 && a.toArray !== void 0 ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = a) : Array.isArray(a) ? (c = this.BindingType.EntireArray, this.resolvedProperty = a) : this.propertyName = i;
        this.getValue = this.GetterByBindingType[c], this.setValue = this.SetterByBindingTypeAndVersioning[c][o];
    }
    unbind() {
        this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
};
Ke.Composite = zc;
Ke.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
Ke.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
Ke.prototype.GetterByBindingType = [
    Ke.prototype._getValue_direct,
    Ke.prototype._getValue_array,
    Ke.prototype._getValue_arrayElement,
    Ke.prototype._getValue_toArray
];
Ke.prototype.SetterByBindingTypeAndVersioning = [
    [
        Ke.prototype._setValue_direct,
        Ke.prototype._setValue_direct_setNeedsUpdate,
        Ke.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
        Ke.prototype._setValue_array,
        Ke.prototype._setValue_array_setNeedsUpdate,
        Ke.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
        Ke.prototype._setValue_arrayElement,
        Ke.prototype._setValue_arrayElement_setNeedsUpdate,
        Ke.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
        Ke.prototype._setValue_fromArray,
        Ke.prototype._setValue_fromArray_setNeedsUpdate,
        Ke.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
];
var Ru = class {
    constructor(){
        this.isAnimationObjectGroup = !0, this.uuid = kt(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
        let e = {};
        this._indicesByUUID = e;
        for(let n = 0, i = arguments.length; n !== i; ++n)e[arguments[n].uuid] = n;
        this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
        let t = this;
        this.stats = {
            objects: {
                get total () {
                    return t._objects.length;
                },
                get inUse () {
                    return this.total - t.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return t._bindings.length;
            }
        };
    }
    add() {
        let e = this._objects, t = this._indicesByUUID, n = this._paths, i = this._parsedPaths, r = this._bindings, a = r.length, o, c = e.length, l = this.nCachedObjects_;
        for(let h = 0, u = arguments.length; h !== u; ++h){
            let d = arguments[h], f = d.uuid, m = t[f];
            if (m === void 0) {
                m = c++, t[f] = m, e.push(d);
                for(let _ = 0, g = a; _ !== g; ++_)r[_].push(new Ke(d, n[_], i[_]));
            } else if (m < l) {
                o = e[m];
                let _ = --l, g = e[_];
                t[g.uuid] = m, e[m] = g, t[f] = _, e[_] = d;
                for(let p = 0, v = a; p !== v; ++p){
                    let x = r[p], y = x[_], b = x[m];
                    x[m] = y, b === void 0 && (b = new Ke(d, n[p], i[p])), x[_] = b;
                }
            } else e[m] !== o && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
        this.nCachedObjects_ = l;
    }
    remove() {
        let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_;
        for(let a = 0, o = arguments.length; a !== o; ++a){
            let c = arguments[a], l = c.uuid, h = t[l];
            if (h !== void 0 && h >= r) {
                let u = r++, d = e[u];
                t[d.uuid] = h, e[h] = d, t[l] = u, e[u] = c;
                for(let f = 0, m = i; f !== m; ++f){
                    let _ = n[f], g = _[u], p = _[h];
                    _[h] = g, _[u] = p;
                }
            }
        }
        this.nCachedObjects_ = r;
    }
    uncache() {
        let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_, a = e.length;
        for(let o = 0, c = arguments.length; o !== c; ++o){
            let l = arguments[o], h = l.uuid, u = t[h];
            if (u !== void 0) if (delete t[h], u < r) {
                let d = --r, f = e[d], m = --a, _ = e[m];
                t[f.uuid] = u, e[u] = f, t[_.uuid] = d, e[d] = _, e.pop();
                for(let g = 0, p = i; g !== p; ++g){
                    let v = n[g], x = v[d], y = v[m];
                    v[u] = x, v[d] = y, v.pop();
                }
            } else {
                let d = --a, f = e[d];
                d > 0 && (t[f.uuid] = u), e[u] = f, e.pop();
                for(let m = 0, _ = i; m !== _; ++m){
                    let g = n[m];
                    g[u] = g[d], g.pop();
                }
            }
        }
        this.nCachedObjects_ = r;
    }
    subscribe_(e, t) {
        let n = this._bindingsIndicesByPath, i = n[e], r = this._bindings;
        if (i !== void 0) return r[i];
        let a = this._paths, o = this._parsedPaths, c = this._objects, l = c.length, h = this.nCachedObjects_, u = new Array(l);
        i = r.length, n[e] = i, a.push(e), o.push(t), r.push(u);
        for(let d = h, f = c.length; d !== f; ++d){
            let m = c[d];
            u[d] = new Ke(m, e, t);
        }
        return u;
    }
    unsubscribe_(e) {
        let t = this._bindingsIndicesByPath, n = t[e];
        if (n !== void 0) {
            let i = this._paths, r = this._parsedPaths, a = this._bindings, o = a.length - 1, c = a[o], l = e[o];
            t[l] = n, a[n] = c, a.pop(), r[n] = r[o], r.pop(), i[n] = i[o], i.pop();
        }
    }
}, Vc = class {
    constructor(e, t, n = null, i = t.blendMode){
        this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = i;
        let r = t.tracks, a = r.length, o = new Array(a), c = {
            endingStart: zi,
            endingEnd: zi
        };
        for(let l = 0; l !== a; ++l){
            let h = r[l].createInterpolant(null);
            o[l] = h, h.settings = c;
        }
        this._interpolantSettings = c, this._interpolants = o, this._propertyBindings = new Array(a), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Af, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
    }
    play() {
        return this._mixer._activateAction(this), this;
    }
    stop() {
        return this._mixer._deactivateAction(this), this.reset();
    }
    reset() {
        return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
    }
    isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    isScheduled() {
        return this._mixer._isActiveAction(this);
    }
    startAt(e) {
        return this._startTime = e, this;
    }
    setLoop(e, t) {
        return this.loop = e, this.repetitions = t, this;
    }
    setEffectiveWeight(e) {
        return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
    }
    getEffectiveWeight() {
        return this._effectiveWeight;
    }
    fadeIn(e) {
        return this._scheduleFading(e, 0, 1);
    }
    fadeOut(e) {
        return this._scheduleFading(e, 1, 0);
    }
    crossFadeFrom(e, t, n) {
        if (e.fadeOut(t), this.fadeIn(t), n) {
            let i = this._clip.duration, r = e._clip.duration, a = r / i, o = i / r;
            e.warp(1, a, t), this.warp(o, 1, t);
        }
        return this;
    }
    crossFadeTo(e, t, n) {
        return e.crossFadeFrom(this, t, n);
    }
    stopFading() {
        let e = this._weightInterpolant;
        return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
    }
    setEffectiveTimeScale(e) {
        return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
    }
    getEffectiveTimeScale() {
        return this._effectiveTimeScale;
    }
    setDuration(e) {
        return this.timeScale = this._clip.duration / e, this.stopWarping();
    }
    syncWith(e) {
        return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
    }
    halt(e) {
        return this.warp(this._effectiveTimeScale, 0, e);
    }
    warp(e, t, n) {
        let i = this._mixer, r = i.time, a = this.timeScale, o = this._timeScaleInterpolant;
        o === null && (o = i._lendControlInterpolant(), this._timeScaleInterpolant = o);
        let c = o.parameterPositions, l = o.sampleValues;
        return c[0] = r, c[1] = r + n, l[0] = e / a, l[1] = t / a, this;
    }
    stopWarping() {
        let e = this._timeScaleInterpolant;
        return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
    }
    getMixer() {
        return this._mixer;
    }
    getClip() {
        return this._clip;
    }
    getRoot() {
        return this._localRoot || this._mixer._root;
    }
    _update(e, t, n, i) {
        if (!this.enabled) {
            this._updateWeight(e);
            return;
        }
        let r = this._startTime;
        if (r !== null) {
            let c = (e - r) * n;
            c < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * c);
        }
        t *= this._updateTimeScale(e);
        let a = this._updateTime(t), o = this._updateWeight(e);
        if (o > 0) {
            let c = this._interpolants, l = this._propertyBindings;
            switch(this.blendMode){
                case xd:
                    for(let h = 0, u = c.length; h !== u; ++h)c[h].evaluate(a), l[h].accumulateAdditive(o);
                    break;
                case Xc:
                default:
                    for(let h = 0, u = c.length; h !== u; ++h)c[h].evaluate(a), l[h].accumulate(i, o);
            }
        }
    }
    _updateWeight(e) {
        let t = 0;
        if (this.enabled) {
            t = this.weight;
            let n = this._weightInterpolant;
            if (n !== null) {
                let i = n.evaluate(e)[0];
                t *= i, e > n.parameterPositions[1] && (this.stopFading(), i === 0 && (this.enabled = !1));
            }
        }
        return this._effectiveWeight = t, t;
    }
    _updateTimeScale(e) {
        let t = 0;
        if (!this.paused) {
            t = this.timeScale;
            let n = this._timeScaleInterpolant;
            if (n !== null) {
                let i = n.evaluate(e)[0];
                t *= i, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
            }
        }
        return this._effectiveTimeScale = t, t;
    }
    _updateTime(e) {
        let t = this._clip.duration, n = this.loop, i = this.time + e, r = this._loopCount, a = n === Rf;
        if (e === 0) return r === -1 ? i : a && (r & 1) === 1 ? t - i : i;
        if (n === wf) {
            r === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
            e: {
                if (i >= t) i = t;
                else if (i < 0) i = 0;
                else {
                    this.time = i;
                    break e;
                }
                this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = i, this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: e < 0 ? -1 : 1
                });
            }
        } else {
            if (r === -1 && (e >= 0 ? (r = 0, this._setEndings(!0, this.repetitions === 0, a)) : this._setEndings(this.repetitions === 0, !0, a)), i >= t || i < 0) {
                let o = Math.floor(i / t);
                i -= t * o, r += Math.abs(o);
                let c = this.repetitions - r;
                if (c <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, i = e > 0 ? t : 0, this.time = i, this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: e > 0 ? 1 : -1
                });
                else {
                    if (c === 1) {
                        let l = e < 0;
                        this._setEndings(l, !l, a);
                    } else this._setEndings(!1, !1, a);
                    this._loopCount = r, this.time = i, this._mixer.dispatchEvent({
                        type: "loop",
                        action: this,
                        loopDelta: o
                    });
                }
            } else this.time = i;
            if (a && (r & 1) === 1) return t - i;
        }
        return i;
    }
    _setEndings(e, t, n) {
        let i = this._interpolantSettings;
        n ? (i.endingStart = Vi, i.endingEnd = Vi) : (e ? i.endingStart = this.zeroSlopeAtStart ? Vi : zi : i.endingStart = Br, t ? i.endingEnd = this.zeroSlopeAtEnd ? Vi : zi : i.endingEnd = Br);
    }
    _scheduleFading(e, t, n) {
        let i = this._mixer, r = i.time, a = this._weightInterpolant;
        a === null && (a = i._lendControlInterpolant(), this._weightInterpolant = a);
        let o = a.parameterPositions, c = a.sampleValues;
        return o[0] = r, c[0] = t, o[1] = r + e, c[1] = n, this;
    }
}, Ox = new Float32Array(1), Cu = class extends sn {
    constructor(e){
        super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
    }
    _bindAction(e, t) {
        let n = e._localRoot || this._root, i = e._clip.tracks, r = i.length, a = e._propertyBindings, o = e._interpolants, c = n.uuid, l = this._bindingsByRootAndName, h = l[c];
        h === void 0 && (h = {}, l[c] = h);
        for(let u = 0; u !== r; ++u){
            let d = i[u], f = d.name, m = h[f];
            if (m !== void 0) ++m.referenceCount, a[u] = m;
            else {
                if (m = a[u], m !== void 0) {
                    m._cacheIndex === null && (++m.referenceCount, this._addInactiveBinding(m, c, f));
                    continue;
                }
                let _ = t && t._propertyBindings[u].binding.parsedPath;
                m = new Bc(Ke.create(n, f, _), d.ValueTypeName, d.getValueSize()), ++m.referenceCount, this._addInactiveBinding(m, c, f), a[u] = m;
            }
            o[u].resultBuffer = m.buffer;
        }
    }
    _activateAction(e) {
        if (!this._isActiveAction(e)) {
            if (e._cacheIndex === null) {
                let n = (e._localRoot || this._root).uuid, i = e._clip.uuid, r = this._actionsByClip[i];
                this._bindAction(e, r && r.knownActions[0]), this._addInactiveAction(e, i, n);
            }
            let t = e._propertyBindings;
            for(let n = 0, i = t.length; n !== i; ++n){
                let r = t[n];
                r.useCount++ === 0 && (this._lendBinding(r), r.saveOriginalState());
            }
            this._lendAction(e);
        }
    }
    _deactivateAction(e) {
        if (this._isActiveAction(e)) {
            let t = e._propertyBindings;
            for(let n = 0, i = t.length; n !== i; ++n){
                let r = t[n];
                --r.useCount === 0 && (r.restoreOriginalState(), this._takeBackBinding(r));
            }
            this._takeBackAction(e);
        }
    }
    _initMemoryManager() {
        this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
        let e = this;
        this.stats = {
            actions: {
                get total () {
                    return e._actions.length;
                },
                get inUse () {
                    return e._nActiveActions;
                }
            },
            bindings: {
                get total () {
                    return e._bindings.length;
                },
                get inUse () {
                    return e._nActiveBindings;
                }
            },
            controlInterpolants: {
                get total () {
                    return e._controlInterpolants.length;
                },
                get inUse () {
                    return e._nActiveControlInterpolants;
                }
            }
        };
    }
    _isActiveAction(e) {
        let t = e._cacheIndex;
        return t !== null && t < this._nActiveActions;
    }
    _addInactiveAction(e, t, n) {
        let i = this._actions, r = this._actionsByClip, a = r[t];
        if (a === void 0) a = {
            knownActions: [
                e
            ],
            actionByRoot: {}
        }, e._byClipCacheIndex = 0, r[t] = a;
        else {
            let o = a.knownActions;
            e._byClipCacheIndex = o.length, o.push(e);
        }
        e._cacheIndex = i.length, i.push(e), a.actionByRoot[n] = e;
    }
    _removeInactiveAction(e) {
        let t = this._actions, n = t[t.length - 1], i = e._cacheIndex;
        n._cacheIndex = i, t[i] = n, t.pop(), e._cacheIndex = null;
        let r = e._clip.uuid, a = this._actionsByClip, o = a[r], c = o.knownActions, l = c[c.length - 1], h = e._byClipCacheIndex;
        l._byClipCacheIndex = h, c[h] = l, c.pop(), e._byClipCacheIndex = null;
        let u = o.actionByRoot, d = (e._localRoot || this._root).uuid;
        delete u[d], c.length === 0 && delete a[r], this._removeInactiveBindingsForAction(e);
    }
    _removeInactiveBindingsForAction(e) {
        let t = e._propertyBindings;
        for(let n = 0, i = t.length; n !== i; ++n){
            let r = t[n];
            --r.referenceCount === 0 && this._removeInactiveBinding(r);
        }
    }
    _lendAction(e) {
        let t = this._actions, n = e._cacheIndex, i = this._nActiveActions++, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _takeBackAction(e) {
        let t = this._actions, n = e._cacheIndex, i = --this._nActiveActions, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _addInactiveBinding(e, t, n) {
        let i = this._bindingsByRootAndName, r = this._bindings, a = i[t];
        a === void 0 && (a = {}, i[t] = a), a[n] = e, e._cacheIndex = r.length, r.push(e);
    }
    _removeInactiveBinding(e) {
        let t = this._bindings, n = e.binding, i = n.rootNode.uuid, r = n.path, a = this._bindingsByRootAndName, o = a[i], c = t[t.length - 1], l = e._cacheIndex;
        c._cacheIndex = l, t[l] = c, t.pop(), delete o[r], Object.keys(o).length === 0 && delete a[i];
    }
    _lendBinding(e) {
        let t = this._bindings, n = e._cacheIndex, i = this._nActiveBindings++, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _takeBackBinding(e) {
        let t = this._bindings, n = e._cacheIndex, i = --this._nActiveBindings, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _lendControlInterpolant() {
        let e = this._controlInterpolants, t = this._nActiveControlInterpolants++, n = e[t];
        return n === void 0 && (n = new fa(new Float32Array(2), new Float32Array(2), 1, Ox), n.__cacheIndex = t, e[t] = n), n;
    }
    _takeBackControlInterpolant(e) {
        let t = this._controlInterpolants, n = e.__cacheIndex, i = --this._nActiveControlInterpolants, r = t[i];
        e.__cacheIndex = i, t[i] = e, r.__cacheIndex = n, t[n] = r;
    }
    clipAction(e, t, n) {
        let i = t || this._root, r = i.uuid, a = typeof e == "string" ? is.findByName(i, e) : e, o = a !== null ? a.uuid : e, c = this._actionsByClip[o], l = null;
        if (n === void 0 && (a !== null ? n = a.blendMode : n = Xc), c !== void 0) {
            let u = c.actionByRoot[r];
            if (u !== void 0 && u.blendMode === n) return u;
            l = c.knownActions[0], a === null && (a = l._clip);
        }
        if (a === null) return null;
        let h = new Vc(this, a, t, n);
        return this._bindAction(h, l), this._addInactiveAction(h, o, r), h;
    }
    existingAction(e, t) {
        let n = t || this._root, i = n.uuid, r = typeof e == "string" ? is.findByName(n, e) : e, a = r ? r.uuid : e, o = this._actionsByClip[a];
        return o !== void 0 && o.actionByRoot[i] || null;
    }
    stopAllAction() {
        let e = this._actions, t = this._nActiveActions;
        for(let n = t - 1; n >= 0; --n)e[n].stop();
        return this;
    }
    update(e) {
        e *= this.timeScale;
        let t = this._actions, n = this._nActiveActions, i = this.time += e, r = Math.sign(e), a = this._accuIndex ^= 1;
        for(let l = 0; l !== n; ++l)t[l]._update(i, e, r, a);
        let o = this._bindings, c = this._nActiveBindings;
        for(let l = 0; l !== c; ++l)o[l].apply(a);
        return this;
    }
    setTime(e) {
        this.time = 0;
        for(let t = 0; t < this._actions.length; t++)this._actions[t].time = 0;
        return this.update(e);
    }
    getRoot() {
        return this._root;
    }
    uncacheClip(e) {
        let t = this._actions, n = e.uuid, i = this._actionsByClip, r = i[n];
        if (r !== void 0) {
            let a = r.knownActions;
            for(let o = 0, c = a.length; o !== c; ++o){
                let l = a[o];
                this._deactivateAction(l);
                let h = l._cacheIndex, u = t[t.length - 1];
                l._cacheIndex = null, l._byClipCacheIndex = null, u._cacheIndex = h, t[h] = u, t.pop(), this._removeInactiveBindingsForAction(l);
            }
            delete i[n];
        }
    }
    uncacheRoot(e) {
        let t = e.uuid, n = this._actionsByClip;
        for(let a in n){
            let o = n[a].actionByRoot, c = o[t];
            c !== void 0 && (this._deactivateAction(c), this._removeInactiveAction(c));
        }
        let i = this._bindingsByRootAndName, r = i[t];
        if (r !== void 0) for(let a in r){
            let o = r[a];
            o.restoreOriginalState(), this._removeInactiveBinding(o);
        }
    }
    uncacheAction(e, t) {
        let n = this.existingAction(e, t);
        n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
    }
}, Pu = class s1 {
    constructor(e){
        this.value = e;
    }
    clone() {
        return new s1(this.value.clone === void 0 ? this.value : this.value.clone());
    }
}, Fx = 0, Lu = class extends sn {
    constructor(){
        super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", {
            value: Fx++
        }), this.name = "", this.usage = Hr, this.uniforms = [];
    }
    add(e) {
        return this.uniforms.push(e), this;
    }
    remove(e) {
        let t = this.uniforms.indexOf(e);
        return t !== -1 && this.uniforms.splice(t, 1), this;
    }
    setName(e) {
        return this.name = e, this;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    dispose() {
        return this.dispatchEvent({
            type: "dispose"
        }), this;
    }
    copy(e) {
        this.name = e.name, this.usage = e.usage;
        let t = e.uniforms;
        this.uniforms.length = 0;
        for(let n = 0, i = t.length; n < i; n++)this.uniforms.push(t[n].clone());
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Iu = class extends Is {
    constructor(e, t, n = 1){
        super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
    }
    copy(e) {
        return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
    }
    clone(e) {
        let t = super.clone(e);
        return t.meshPerAttribute = this.meshPerAttribute, t;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
    }
}, Uu = class {
    constructor(e, t, n, i, r){
        this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = i, this.count = r, this.version = 0;
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setBuffer(e) {
        return this.buffer = e, this;
    }
    setType(e, t) {
        return this.type = e, this.elementSize = t, this;
    }
    setItemSize(e) {
        return this.itemSize = e, this;
    }
    setCount(e) {
        return this.count = e, this;
    }
}, Du = class {
    constructor(e, t, n = 0, i = 1 / 0){
        this.ray = new hi(e, t), this.near = n, this.far = i, this.camera = null, this.layers = new Rs, this.params = {
            Mesh: {},
            Line: {
                threshold: 1
            },
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        };
    }
    set(e, t) {
        this.ray.set(e, t);
    }
    setFromCamera(e, t) {
        t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, .5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
    }
    intersectObject(e, t = !0, n = []) {
        return kc(e, this, n, t), n.sort(Nu), n;
    }
    intersectObjects(e, t = !0, n = []) {
        for(let i = 0, r = e.length; i < r; i++)kc(e[i], this, n, t);
        return n.sort(Nu), n;
    }
};
function Nu(s1, e) {
    return s1.distance - e.distance;
}
function kc(s1, e, t, n) {
    if (s1.layers.test(e.layers) && s1.raycast(e, t), n === !0) {
        let i = s1.children;
        for(let r = 0, a = i.length; r < a; r++)kc(i[r], e, t, !0);
    }
}
var Ou = class {
    constructor(e = 1, t = 0, n = 0){
        return this.radius = e, this.phi = t, this.theta = n, this;
    }
    set(e, t, n) {
        return this.radius = e, this.phi = t, this.theta = n, this;
    }
    copy(e) {
        return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
    }
    makeSafe() {
        return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
    }
    setFromVector3(e) {
        return this.setFromCartesianCoords(e.x, e.y, e.z);
    }
    setFromCartesianCoords(e, t, n) {
        return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(ct(t / this.radius, -1, 1))), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Fu = class {
    constructor(e = 1, t = 0, n = 0){
        return this.radius = e, this.theta = t, this.y = n, this;
    }
    set(e, t, n) {
        return this.radius = e, this.theta = t, this.y = n, this;
    }
    copy(e) {
        return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
    }
    setFromVector3(e) {
        return this.setFromCartesianCoords(e.x, e.y, e.z);
    }
    setFromCartesianCoords(e, t, n) {
        return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Bu = new Z, zu = class {
    constructor(e = new Z(1 / 0, 1 / 0), t = new Z(-1 / 0, -1 / 0)){
        this.isBox2 = !0, this.min = e, this.max = t;
    }
    set(e, t) {
        return this.min.copy(e), this.max.copy(t), this;
    }
    setFromPoints(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]);
        return this;
    }
    setFromCenterAndSize(e, t) {
        let n = Bu.copy(t).multiplyScalar(.5);
        return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.min.copy(e.min), this.max.copy(e.max), this;
    }
    makeEmpty() {
        return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
    }
    isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(e) {
        return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5);
    }
    getSize(e) {
        return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
    }
    expandByPoint(e) {
        return this.min.min(e), this.max.max(e), this;
    }
    expandByVector(e) {
        return this.min.sub(e), this.max.add(e), this;
    }
    expandByScalar(e) {
        return this.min.addScalar(-e), this.max.addScalar(e), this;
    }
    containsPoint(e) {
        return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
    }
    containsBox(e) {
        return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
    }
    getParameter(e, t) {
        return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(e) {
        return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
    }
    clampPoint(e, t) {
        return t.copy(e).clamp(this.min, this.max);
    }
    distanceToPoint(e) {
        return this.clampPoint(e, Bu).distanceTo(e);
    }
    intersect(e) {
        return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
    }
    union(e) {
        return this.min.min(e.min), this.max.max(e.max), this;
    }
    translate(e) {
        return this.min.add(e), this.max.add(e), this;
    }
    equals(e) {
        return e.min.equals(this.min) && e.max.equals(this.max);
    }
}, Vu = new A, Tr = new A, ku = class {
    constructor(e = new A, t = new A){
        this.start = e, this.end = t;
    }
    set(e, t) {
        return this.start.copy(e), this.end.copy(t), this;
    }
    copy(e) {
        return this.start.copy(e.start), this.end.copy(e.end), this;
    }
    getCenter(e) {
        return e.addVectors(this.start, this.end).multiplyScalar(.5);
    }
    delta(e) {
        return e.subVectors(this.end, this.start);
    }
    distanceSq() {
        return this.start.distanceToSquared(this.end);
    }
    distance() {
        return this.start.distanceTo(this.end);
    }
    at(e, t) {
        return this.delta(t).multiplyScalar(e).add(this.start);
    }
    closestPointToPointParameter(e, t) {
        Vu.subVectors(e, this.start), Tr.subVectors(this.end, this.start);
        let n = Tr.dot(Tr), r = Tr.dot(Vu) / n;
        return t && (r = ct(r, 0, 1)), r;
    }
    closestPointToPoint(e, t, n) {
        let i = this.closestPointToPointParameter(e, t);
        return this.delta(n).multiplyScalar(i).add(this.start);
    }
    applyMatrix4(e) {
        return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
    }
    equals(e) {
        return e.start.equals(this.start) && e.end.equals(this.end);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Hu = new A, Gu = class extends Je {
    constructor(e, t){
        super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
        let n = new Ge, i = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(let a = 0, o = 1, c = 32; a < c; a++, o++){
            let l = a / c * Math.PI * 2, h = o / c * Math.PI * 2;
            i.push(Math.cos(l), Math.sin(l), 1, Math.cos(h), Math.sin(h), 1);
        }
        n.setAttribute("position", new ve(i, 3));
        let r = new wt({
            fog: !1,
            toneMapped: !1
        });
        this.cone = new en(n, r), this.add(this.cone), this.update();
    }
    dispose() {
        this.cone.geometry.dispose(), this.cone.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
        let e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
        this.cone.scale.set(t, t, e), Hu.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(Hu), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
    }
}, Pn = new A, wr = new ze, lo = new ze, Wu = class extends en {
    constructor(e){
        let t = Nd(e), n = new Ge, i = [], r = [], a = new pe(0, 0, 1), o = new pe(0, 1, 0);
        for(let l = 0; l < t.length; l++){
            let h = t[l];
            h.parent && h.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), r.push(a.r, a.g, a.b), r.push(o.r, o.g, o.b));
        }
        n.setAttribute("position", new ve(i, 3)), n.setAttribute("color", new ve(r, 3));
        let c = new wt({
            vertexColors: !0,
            depthTest: !1,
            depthWrite: !1,
            toneMapped: !1,
            transparent: !0
        });
        super(n, c), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
    }
    updateMatrixWorld(e) {
        let t = this.bones, n = this.geometry, i = n.getAttribute("position");
        lo.copy(this.root.matrixWorld).invert();
        for(let r = 0, a = 0; r < t.length; r++){
            let o = t[r];
            o.parent && o.parent.isBone && (wr.multiplyMatrices(lo, o.matrixWorld), Pn.setFromMatrixPosition(wr), i.setXYZ(a, Pn.x, Pn.y, Pn.z), wr.multiplyMatrices(lo, o.parent.matrixWorld), Pn.setFromMatrixPosition(wr), i.setXYZ(a + 1, Pn.x, Pn.y, Pn.z), a += 2);
        }
        n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
};
function Nd(s1) {
    let e = [];
    s1.isBone === !0 && e.push(s1);
    for(let t = 0; t < s1.children.length; t++)e.push.apply(e, Nd(s1.children[t]));
    return e;
}
var Xu = class extends Mt {
    constructor(e, t, n){
        let i = new ua(t, 4, 2), r = new Sn({
            wireframe: !0,
            fog: !1,
            toneMapped: !1
        });
        super(i, r), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
    }
}, Bx = new A, qu = new pe, Yu = new pe, Zu = class extends Je {
    constructor(e, t, n){
        super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
        let i = new ha(t);
        i.rotateY(Math.PI * .5), this.material = new Sn({
            wireframe: !0,
            fog: !1,
            toneMapped: !1
        }), this.color === void 0 && (this.material.vertexColors = !0);
        let r = i.getAttribute("position"), a = new Float32Array(r.count * 3);
        i.setAttribute("color", new et(a, 3)), this.add(new Mt(i, this.material)), this.update();
    }
    dispose() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose();
    }
    update() {
        let e = this.children[0];
        if (this.color !== void 0) this.material.color.set(this.color);
        else {
            let t = e.geometry.getAttribute("color");
            qu.copy(this.light.color), Yu.copy(this.light.groundColor);
            for(let n = 0, i = t.count; n < i; n++){
                let r = n < i / 2 ? qu : Yu;
                t.setXYZ(n, r.r, r.g, r.b);
            }
            t.needsUpdate = !0;
        }
        this.light.updateWorldMatrix(!0, !1), e.lookAt(Bx.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
}, Ju = class extends en {
    constructor(e = 10, t = 10, n = 4473924, i = 8947848){
        n = new pe(n), i = new pe(i);
        let r = t / 2, a = e / t, o = e / 2, c = [], l = [];
        for(let d = 0, f = 0, m = -o; d <= t; d++, m += a){
            c.push(-o, 0, m, o, 0, m), c.push(m, 0, -o, m, 0, o);
            let _ = d === r ? n : i;
            _.toArray(l, f), f += 3, _.toArray(l, f), f += 3, _.toArray(l, f), f += 3, _.toArray(l, f), f += 3;
        }
        let h = new Ge;
        h.setAttribute("position", new ve(c, 3)), h.setAttribute("color", new ve(l, 3));
        let u = new wt({
            vertexColors: !0,
            toneMapped: !1
        });
        super(h, u), this.type = "GridHelper";
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, $u = class extends en {
    constructor(e = 10, t = 16, n = 8, i = 64, r = 4473924, a = 8947848){
        r = new pe(r), a = new pe(a);
        let o = [], c = [];
        if (t > 1) for(let u = 0; u < t; u++){
            let d = u / t * (Math.PI * 2), f = Math.sin(d) * e, m = Math.cos(d) * e;
            o.push(0, 0, 0), o.push(f, 0, m);
            let _ = u & 1 ? r : a;
            c.push(_.r, _.g, _.b), c.push(_.r, _.g, _.b);
        }
        for(let u = 0; u < n; u++){
            let d = u & 1 ? r : a, f = e - e / n * u;
            for(let m = 0; m < i; m++){
                let _ = m / i * (Math.PI * 2), g = Math.sin(_) * f, p = Math.cos(_) * f;
                o.push(g, 0, p), c.push(d.r, d.g, d.b), _ = (m + 1) / i * (Math.PI * 2), g = Math.sin(_) * f, p = Math.cos(_) * f, o.push(g, 0, p), c.push(d.r, d.g, d.b);
            }
        }
        let l = new Ge;
        l.setAttribute("position", new ve(o, 3)), l.setAttribute("color", new ve(c, 3));
        let h = new wt({
            vertexColors: !0,
            toneMapped: !1
        });
        super(l, h), this.type = "PolarGridHelper";
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, Ku = new A, Ar = new A, Qu = new A, ju = class extends Je {
    constructor(e, t, n){
        super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
        let i = new Ge;
        i.setAttribute("position", new ve([
            -t,
            t,
            0,
            t,
            t,
            0,
            t,
            -t,
            0,
            -t,
            -t,
            0,
            -t,
            t,
            0
        ], 3));
        let r = new wt({
            fog: !1,
            toneMapped: !1
        });
        this.lightPlane = new bn(i, r), this.add(this.lightPlane), i = new Ge, i.setAttribute("position", new ve([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3)), this.targetLine = new bn(i, r), this.add(this.targetLine), this.update();
    }
    dispose() {
        this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), Ku.setFromMatrixPosition(this.light.matrixWorld), Ar.setFromMatrixPosition(this.light.target.matrixWorld), Qu.subVectors(Ar, Ku), this.lightPlane.lookAt(Ar), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(Ar), this.targetLine.scale.z = Qu.length();
    }
}, Rr = new A, ot = new Cs, ed = class extends en {
    constructor(e){
        let t = new Ge, n = new wt({
            color: 16777215,
            vertexColors: !0,
            toneMapped: !1
        }), i = [], r = [], a = {};
        o("n1", "n2"), o("n2", "n4"), o("n4", "n3"), o("n3", "n1"), o("f1", "f2"), o("f2", "f4"), o("f4", "f3"), o("f3", "f1"), o("n1", "f1"), o("n2", "f2"), o("n3", "f3"), o("n4", "f4"), o("p", "n1"), o("p", "n2"), o("p", "n3"), o("p", "n4"), o("u1", "u2"), o("u2", "u3"), o("u3", "u1"), o("c", "t"), o("p", "c"), o("cn1", "cn2"), o("cn3", "cn4"), o("cf1", "cf2"), o("cf3", "cf4");
        function o(m, _) {
            c(m), c(_);
        }
        function c(m) {
            i.push(0, 0, 0), r.push(0, 0, 0), a[m] === void 0 && (a[m] = []), a[m].push(i.length / 3 - 1);
        }
        t.setAttribute("position", new ve(i, 3)), t.setAttribute("color", new ve(r, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = a, this.update();
        let l = new pe(16755200), h = new pe(16711680), u = new pe(43775), d = new pe(16777215), f = new pe(3355443);
        this.setColors(l, h, u, d, f);
    }
    setColors(e, t, n, i, r) {
        let o = this.geometry.getAttribute("color");
        o.setXYZ(0, e.r, e.g, e.b), o.setXYZ(1, e.r, e.g, e.b), o.setXYZ(2, e.r, e.g, e.b), o.setXYZ(3, e.r, e.g, e.b), o.setXYZ(4, e.r, e.g, e.b), o.setXYZ(5, e.r, e.g, e.b), o.setXYZ(6, e.r, e.g, e.b), o.setXYZ(7, e.r, e.g, e.b), o.setXYZ(8, e.r, e.g, e.b), o.setXYZ(9, e.r, e.g, e.b), o.setXYZ(10, e.r, e.g, e.b), o.setXYZ(11, e.r, e.g, e.b), o.setXYZ(12, e.r, e.g, e.b), o.setXYZ(13, e.r, e.g, e.b), o.setXYZ(14, e.r, e.g, e.b), o.setXYZ(15, e.r, e.g, e.b), o.setXYZ(16, e.r, e.g, e.b), o.setXYZ(17, e.r, e.g, e.b), o.setXYZ(18, e.r, e.g, e.b), o.setXYZ(19, e.r, e.g, e.b), o.setXYZ(20, e.r, e.g, e.b), o.setXYZ(21, e.r, e.g, e.b), o.setXYZ(22, e.r, e.g, e.b), o.setXYZ(23, e.r, e.g, e.b), o.setXYZ(24, t.r, t.g, t.b), o.setXYZ(25, t.r, t.g, t.b), o.setXYZ(26, t.r, t.g, t.b), o.setXYZ(27, t.r, t.g, t.b), o.setXYZ(28, t.r, t.g, t.b), o.setXYZ(29, t.r, t.g, t.b), o.setXYZ(30, t.r, t.g, t.b), o.setXYZ(31, t.r, t.g, t.b), o.setXYZ(32, n.r, n.g, n.b), o.setXYZ(33, n.r, n.g, n.b), o.setXYZ(34, n.r, n.g, n.b), o.setXYZ(35, n.r, n.g, n.b), o.setXYZ(36, n.r, n.g, n.b), o.setXYZ(37, n.r, n.g, n.b), o.setXYZ(38, i.r, i.g, i.b), o.setXYZ(39, i.r, i.g, i.b), o.setXYZ(40, r.r, r.g, r.b), o.setXYZ(41, r.r, r.g, r.b), o.setXYZ(42, r.r, r.g, r.b), o.setXYZ(43, r.r, r.g, r.b), o.setXYZ(44, r.r, r.g, r.b), o.setXYZ(45, r.r, r.g, r.b), o.setXYZ(46, r.r, r.g, r.b), o.setXYZ(47, r.r, r.g, r.b), o.setXYZ(48, r.r, r.g, r.b), o.setXYZ(49, r.r, r.g, r.b), o.needsUpdate = !0;
    }
    update() {
        let e = this.geometry, t = this.pointMap, n = 1, i = 1;
        ot.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), ht("c", t, e, ot, 0, 0, -1), ht("t", t, e, ot, 0, 0, 1), ht("n1", t, e, ot, -n, -i, -1), ht("n2", t, e, ot, n, -i, -1), ht("n3", t, e, ot, -n, i, -1), ht("n4", t, e, ot, n, i, -1), ht("f1", t, e, ot, -n, -i, 1), ht("f2", t, e, ot, n, -i, 1), ht("f3", t, e, ot, -n, i, 1), ht("f4", t, e, ot, n, i, 1), ht("u1", t, e, ot, n * .7, i * 1.1, -1), ht("u2", t, e, ot, -n * .7, i * 1.1, -1), ht("u3", t, e, ot, 0, i * 2, -1), ht("cf1", t, e, ot, -n, 0, 1), ht("cf2", t, e, ot, n, 0, 1), ht("cf3", t, e, ot, 0, -i, 1), ht("cf4", t, e, ot, 0, i, 1), ht("cn1", t, e, ot, -n, 0, -1), ht("cn2", t, e, ot, n, 0, -1), ht("cn3", t, e, ot, 0, -i, -1), ht("cn4", t, e, ot, 0, i, -1), e.getAttribute("position").needsUpdate = !0;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
};
function ht(s1, e, t, n, i, r, a) {
    Rr.set(i, r, a).unproject(n);
    let o = e[s1];
    if (o !== void 0) {
        let c = t.getAttribute("position");
        for(let l = 0, h = o.length; l < h; l++)c.setXYZ(o[l], Rr.x, Rr.y, Rr.z);
    }
}
var Cr = new Qt, td = class extends en {
    constructor(e, t = 16776960){
        let n = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]), i = new Float32Array(8 * 3), r = new Ge;
        r.setIndex(new et(n, 1)), r.setAttribute("position", new et(i, 3)), super(r, new wt({
            color: t,
            toneMapped: !1
        })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
    }
    update(e) {
        if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && Cr.setFromObject(this.object), Cr.isEmpty()) return;
        let t = Cr.min, n = Cr.max, i = this.geometry.attributes.position, r = i.array;
        r[0] = n.x, r[1] = n.y, r[2] = n.z, r[3] = t.x, r[4] = n.y, r[5] = n.z, r[6] = t.x, r[7] = t.y, r[8] = n.z, r[9] = n.x, r[10] = t.y, r[11] = n.z, r[12] = n.x, r[13] = n.y, r[14] = t.z, r[15] = t.x, r[16] = n.y, r[17] = t.z, r[18] = t.x, r[19] = t.y, r[20] = t.z, r[21] = n.x, r[22] = t.y, r[23] = t.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
    }
    setFromObject(e) {
        return this.object = e, this.update(), this;
    }
    copy(e, t) {
        return super.copy(e, t), this.object = e.object, this;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, nd = class extends en {
    constructor(e, t = 16776960){
        let n = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]), i = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ], r = new Ge;
        r.setIndex(new et(n, 1)), r.setAttribute("position", new ve(i, 3)), super(r, new wt({
            color: t,
            toneMapped: !1
        })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
    }
    updateMatrixWorld(e) {
        let t = this.box;
        t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(.5), super.updateMatrixWorld(e));
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, id = class extends bn {
    constructor(e, t = 1, n = 16776960){
        let i = n, r = [
            1,
            -1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0,
            1,
            1,
            0
        ], a = new Ge;
        a.setAttribute("position", new ve(r, 3)), a.computeBoundingSphere(), super(a, new wt({
            color: i,
            toneMapped: !1
        })), this.type = "PlaneHelper", this.plane = e, this.size = t;
        let o = [
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0
        ], c = new Ge;
        c.setAttribute("position", new ve(o, 3)), c.computeBoundingSphere(), this.add(new Mt(c, new Sn({
            color: i,
            opacity: .2,
            transparent: !0,
            depthWrite: !1,
            toneMapped: !1
        })));
    }
    updateMatrixWorld(e) {
        this.position.set(0, 0, 0), this.scale.set(.5 * this.size, .5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
    }
}, sd = new A, Pr, ho, rd = class extends Je {
    constructor(e = new A(0, 0, 1), t = new A(0, 0, 0), n = 1, i = 16776960, r = n * .2, a = r * .2){
        super(), this.type = "ArrowHelper", Pr === void 0 && (Pr = new Ge, Pr.setAttribute("position", new ve([
            0,
            0,
            0,
            0,
            1,
            0
        ], 3)), ho = new Ns(0, .5, 1, 5, 1), ho.translate(0, -.5, 0)), this.position.copy(t), this.line = new bn(Pr, new wt({
            color: i,
            toneMapped: !1
        })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Mt(ho, new Sn({
            color: i,
            toneMapped: !1
        })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, r, a);
    }
    setDirection(e) {
        if (e.y > .99999) this.quaternion.set(0, 0, 0, 1);
        else if (e.y < -.99999) this.quaternion.set(1, 0, 0, 0);
        else {
            sd.set(e.z, 0, -e.x).normalize();
            let t = Math.acos(e.y);
            this.quaternion.setFromAxisAngle(sd, t);
        }
    }
    setLength(e, t = e * .2, n = t * .2) {
        this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
    }
    setColor(e) {
        this.line.material.color.set(e), this.cone.material.color.set(e);
    }
    copy(e) {
        return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
    }
    dispose() {
        this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
    }
}, ad = class extends en {
    constructor(e = 1){
        let t = [
            0,
            0,
            0,
            e,
            0,
            0,
            0,
            0,
            0,
            0,
            e,
            0,
            0,
            0,
            0,
            0,
            0,
            e
        ], n = [
            1,
            0,
            0,
            1,
            .6,
            0,
            0,
            1,
            0,
            .6,
            1,
            0,
            0,
            0,
            1,
            0,
            .6,
            1
        ], i = new Ge;
        i.setAttribute("position", new ve(t, 3)), i.setAttribute("color", new ve(n, 3));
        let r = new wt({
            vertexColors: !0,
            toneMapped: !1
        });
        super(i, r), this.type = "AxesHelper";
    }
    setColors(e, t, n) {
        let i = new pe, r = this.geometry.attributes.color.array;
        return i.set(e), i.toArray(r, 0), i.toArray(r, 3), i.set(t), i.toArray(r, 6), i.toArray(r, 9), i.set(n), i.toArray(r, 12), i.toArray(r, 15), this.geometry.attributes.color.needsUpdate = !0, this;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, od = class {
    constructor(){
        this.type = "ShapePath", this.color = new pe, this.subPaths = [], this.currentPath = null;
    }
    moveTo(e, t) {
        return this.currentPath = new ji, this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
    }
    lineTo(e, t) {
        return this.currentPath.lineTo(e, t), this;
    }
    quadraticCurveTo(e, t, n, i) {
        return this.currentPath.quadraticCurveTo(e, t, n, i), this;
    }
    bezierCurveTo(e, t, n, i, r, a) {
        return this.currentPath.bezierCurveTo(e, t, n, i, r, a), this;
    }
    splineThru(e) {
        return this.currentPath.splineThru(e), this;
    }
    toShapes(e) {
        function t(p) {
            let v = [];
            for(let x = 0, y = p.length; x < y; x++){
                let b = p[x], w = new Fn;
                w.curves = b.curves, v.push(w);
            }
            return v;
        }
        function n(p, v) {
            let x = v.length, y = !1;
            for(let b = x - 1, w = 0; w < x; b = w++){
                let R = v[b], I = v[w], M = I.x - R.x, T = I.y - R.y;
                if (Math.abs(T) > Number.EPSILON) {
                    if (T < 0 && (R = v[w], M = -M, I = v[b], T = -T), p.y < R.y || p.y > I.y) continue;
                    if (p.y === R.y) {
                        if (p.x === R.x) return !0;
                    } else {
                        let O = T * (p.x - R.x) - M * (p.y - R.y);
                        if (O === 0) return !0;
                        if (O < 0) continue;
                        y = !y;
                    }
                } else {
                    if (p.y !== R.y) continue;
                    if (I.x <= p.x && p.x <= R.x || R.x <= p.x && p.x <= I.x) return !0;
                }
            }
            return y;
        }
        let i = yn.isClockWise, r = this.subPaths;
        if (r.length === 0) return [];
        let a, o, c, l = [];
        if (r.length === 1) return o = r[0], c = new Fn, c.curves = o.curves, l.push(c), l;
        let h = !i(r[0].getPoints());
        h = e ? !h : h;
        let u = [], d = [], f = [], m = 0, _;
        d[m] = void 0, f[m] = [];
        for(let p = 0, v = r.length; p < v; p++)o = r[p], _ = o.getPoints(), a = i(_), a = e ? !a : a, a ? (!h && d[m] && m++, d[m] = {
            s: new Fn,
            p: _
        }, d[m].s.curves = o.curves, h && m++, f[m] = []) : f[m].push({
            h: o,
            p: _[0]
        });
        if (!d[0]) return t(r);
        if (d.length > 1) {
            let p = !1, v = 0;
            for(let x = 0, y = d.length; x < y; x++)u[x] = [];
            for(let x = 0, y = d.length; x < y; x++){
                let b = f[x];
                for(let w = 0; w < b.length; w++){
                    let R = b[w], I = !0;
                    for(let M = 0; M < d.length; M++)n(R.p, d[M].p) && (x !== M && v++, I ? (I = !1, u[M].push(R)) : p = !0);
                    I && u[x].push(R);
                }
            }
            v > 0 && p === !1 && (f = u);
        }
        let g;
        for(let p = 0, v = d.length; p < v; p++){
            c = d[p].s, l.push(c), g = f[p];
            for(let x = 0, y = g.length; x < y; x++)c.holes.push(g[x].h);
        }
        return l;
    }
};
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
        revision: Hc
    }
}));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Hc);
const mod = {
    ACESFilmicToneMapping: mf,
    AddEquation: Bi,
    AddOperation: uf,
    AdditiveAnimationBlendMode: xd,
    AdditiveBlending: al,
    AlphaFormat: vf,
    AlwaysCompare: Vf,
    AlwaysDepth: sf,
    AlwaysStencilFunc: If,
    AmbientLight: Cc,
    AnimationAction: Vc,
    AnimationClip: is,
    AnimationLoader: au,
    AnimationMixer: Cu,
    AnimationObjectGroup: Ru,
    AnimationUtils: Sv,
    ArcCurve: ko,
    ArrayCamera: To,
    ArrowHelper: rd,
    Audio: Fc,
    AudioAnalyser: Au,
    AudioContext: _a,
    AudioListener: Eu,
    AudioLoader: xu,
    AxesHelper: ad,
    BackSide: Ft,
    BasicDepthPacking: Cf,
    BasicShadowMap: Hx,
    Bone: ta,
    BooleanKeyframeTrack: Vn,
    Box2: zu,
    Box3: Qt,
    Box3Helper: nd,
    BoxGeometry: Ji,
    BoxHelper: td,
    BufferAttribute: et,
    BufferGeometry: Ge,
    BufferGeometryLoader: Nc,
    ByteType: _f,
    Cache: ss,
    Camera: Cs,
    CameraHelper: ed,
    CanvasTexture: jh,
    CapsuleGeometry: qo,
    CatmullRomCurve3: Ho,
    CineonToneMapping: pf,
    CircleGeometry: Yo,
    ClampToEdgeWrapping: It,
    Clock: Oc,
    Color: pe,
    ColorKeyframeTrack: pa,
    ColorManagement: Qe,
    CompressedArrayTexture: Kh,
    CompressedCubeTexture: Qh,
    CompressedTexture: Us,
    CompressedTextureLoader: ou,
    ConeGeometry: Zo,
    CubeCamera: _o,
    CubeReflectionMapping: zn,
    CubeRefractionMapping: ci,
    CubeTexture: Ki,
    CubeTextureLoader: cu,
    CubeUVReflectionMapping: Vs,
    CubicBezierCurve: ia,
    CubicBezierCurve3: Go,
    CubicInterpolant: xc,
    CullFaceBack: rl,
    CullFaceFront: Hd,
    CullFaceFrontBack: kx,
    CullFaceNone: kd,
    Curve: Zt,
    CurvePath: Xo,
    CustomBlending: Wd,
    CustomToneMapping: gf,
    CylinderGeometry: Ns,
    Cylindrical: Fu,
    Data3DTexture: qr,
    DataArrayTexture: As,
    DataTexture: oi,
    DataTextureLoader: lu,
    DataUtils: Mv,
    DecrementStencilOp: ev,
    DecrementWrapStencilOp: nv,
    DefaultLoadingManager: Ex,
    DepthFormat: si,
    DepthStencilFormat: Yi,
    DepthTexture: wo,
    DirectionalLight: Rc,
    DirectionalLightHelper: ju,
    DiscreteInterpolant: vc,
    DisplayP3ColorSpace: qc,
    DodecahedronGeometry: Jo,
    DoubleSide: gn,
    DstAlphaFactor: Kd,
    DstColorFactor: jd,
    DynamicCopyUsage: _v,
    DynamicDrawUsage: uv,
    DynamicReadUsage: pv,
    EdgesGeometry: $o,
    EllipseCurve: Ds,
    EqualCompare: Nf,
    EqualDepth: af,
    EqualStencilFunc: av,
    EquirectangularReflectionMapping: Ir,
    EquirectangularRefractionMapping: Ur,
    Euler: Yr,
    EventDispatcher: sn,
    ExtrudeGeometry: jo,
    FileLoader: rn,
    Float16BufferAttribute: ih,
    Float32BufferAttribute: ve,
    Float64BufferAttribute: sh,
    FloatType: xn,
    Fog: Lo,
    FogExp2: Po,
    FramebufferTexture: $h,
    FrontSide: Bn,
    Frustum: Ps,
    GLBufferAttribute: Uu,
    GLSL1: vv,
    GLSL3: Ol,
    GreaterCompare: Ff,
    GreaterDepth: cf,
    GreaterEqualCompare: zf,
    GreaterEqualDepth: of,
    GreaterEqualStencilFunc: hv,
    GreaterStencilFunc: cv,
    GridHelper: Ju,
    Group: ti,
    HalfFloatType: Ts,
    HemisphereLight: Sc,
    HemisphereLightHelper: Zu,
    IcosahedronGeometry: ec,
    ImageBitmapLoader: _u,
    ImageLoader: rs,
    ImageUtils: Xr,
    IncrementStencilOp: jx,
    IncrementWrapStencilOp: tv,
    InstancedBufferAttribute: ui,
    InstancedBufferGeometry: Dc,
    InstancedInterleavedBuffer: Iu,
    InstancedMesh: Fo,
    Int16BufferAttribute: th,
    Int32BufferAttribute: nh,
    Int8BufferAttribute: Ql,
    IntType: dd,
    InterleavedBuffer: Is,
    InterleavedBufferAttribute: Qi,
    Interpolant: es,
    InterpolateDiscrete: Or,
    InterpolateLinear: Fr,
    InterpolateSmooth: La,
    InvertStencilOp: iv,
    KeepStencilOp: Ia,
    KeyframeTrack: Jt,
    LOD: Do,
    LatheGeometry: la,
    Layers: Rs,
    LessCompare: Df,
    LessDepth: rf,
    LessEqualCompare: Of,
    LessEqualDepth: uo,
    LessEqualStencilFunc: ov,
    LessStencilFunc: rv,
    Light: En,
    LightProbe: Ic,
    Line: bn,
    Line3: ku,
    LineBasicMaterial: wt,
    LineCurve: sa,
    LineCurve3: Wo,
    LineDashedMaterial: gc,
    LineLoop: Bo,
    LineSegments: en,
    LinearDisplayP3ColorSpace: va,
    LinearEncoding: vd,
    LinearFilter: mt,
    LinearInterpolant: fa,
    LinearMipMapLinearFilter: Yx,
    LinearMipMapNearestFilter: qx,
    LinearMipmapLinearFilter: li,
    LinearMipmapNearestFilter: ud,
    LinearSRGBColorSpace: Mn,
    LinearToneMapping: df,
    LinearTransfer: zr,
    Loader: Dt,
    LoaderUtils: ga,
    LoadingManager: ma,
    LoopOnce: wf,
    LoopPingPong: Rf,
    LoopRepeat: Af,
    LuminanceAlphaFormat: Mf,
    LuminanceFormat: yf,
    MOUSE: zx,
    Material: bt,
    MaterialLoader: Uc,
    MathUtils: yv,
    Matrix3: He,
    Matrix4: ze,
    MaxEquation: hl,
    Mesh: Mt,
    MeshBasicMaterial: Sn,
    MeshDepthMaterial: Qr,
    MeshDistanceMaterial: jr,
    MeshLambertMaterial: pc,
    MeshMatcapMaterial: mc,
    MeshNormalMaterial: fc,
    MeshPhongMaterial: uc,
    MeshPhysicalMaterial: hc,
    MeshStandardMaterial: da,
    MeshToonMaterial: dc,
    MinEquation: ll,
    MirroredRepeatWrapping: Nr,
    MixOperation: hf,
    MultiplyBlending: cl,
    MultiplyOperation: xa,
    NearestFilter: pt,
    NearestMipMapLinearFilter: Xx,
    NearestMipMapNearestFilter: Wx,
    NearestMipmapLinearFilter: Lr,
    NearestMipmapNearestFilter: fo,
    NeverCompare: Uf,
    NeverDepth: nf,
    NeverStencilFunc: sv,
    NoBlending: Dn,
    NoColorSpace: Xt,
    NoToneMapping: Nn,
    NormalAnimationBlendMode: Xc,
    NormalBlending: Wi,
    NotEqualCompare: Bf,
    NotEqualDepth: lf,
    NotEqualStencilFunc: lv,
    NumberKeyframeTrack: ts,
    Object3D: Je,
    ObjectLoader: pu,
    ObjectSpaceNormalMap: Lf,
    OctahedronGeometry: ha,
    OneFactor: Zd,
    OneMinusDstAlphaFactor: Qd,
    OneMinusDstColorFactor: ef,
    OneMinusSrcAlphaFactor: hd,
    OneMinusSrcColorFactor: $d,
    OrthographicCamera: Ls,
    P3Primaries: kr,
    PCFShadowMap: cd,
    PCFSoftShadowMap: Gd,
    PMREMGenerator: Kr,
    Path: ji,
    PerspectiveCamera: yt,
    Plane: mn,
    PlaneGeometry: $r,
    PlaneHelper: id,
    PointLight: wc,
    PointLightHelper: Xu,
    Points: Vo,
    PointsMaterial: na,
    PolarGridHelper: $u,
    PolyhedronGeometry: di,
    PositionalAudio: wu,
    PropertyBinding: Ke,
    PropertyMixer: Bc,
    QuadraticBezierCurve: ra,
    QuadraticBezierCurve3: aa,
    Quaternion: Ut,
    QuaternionKeyframeTrack: pi,
    QuaternionLinearInterpolant: yc,
    RED_GREEN_RGTC2_Format: Dl,
    RED_RGTC1_Format: Tf,
    REVISION: Hc,
    RGBADepthPacking: Pf,
    RGBAFormat: Wt,
    RGBAIntegerFormat: _d,
    RGBA_ASTC_10x10_Format: Rl,
    RGBA_ASTC_10x5_Format: Tl,
    RGBA_ASTC_10x6_Format: wl,
    RGBA_ASTC_10x8_Format: Al,
    RGBA_ASTC_12x10_Format: Cl,
    RGBA_ASTC_12x12_Format: Pl,
    RGBA_ASTC_4x4_Format: _l,
    RGBA_ASTC_5x4_Format: xl,
    RGBA_ASTC_5x5_Format: vl,
    RGBA_ASTC_6x5_Format: yl,
    RGBA_ASTC_6x6_Format: Ml,
    RGBA_ASTC_8x5_Format: Sl,
    RGBA_ASTC_8x6_Format: bl,
    RGBA_ASTC_8x8_Format: El,
    RGBA_BPTC_Format: Pa,
    RGBA_ETC2_EAC_Format: gl,
    RGBA_PVRTC_2BPPV1_Format: pl,
    RGBA_PVRTC_4BPPV1_Format: fl,
    RGBA_S3TC_DXT1_Format: Aa,
    RGBA_S3TC_DXT3_Format: Ra,
    RGBA_S3TC_DXT5_Format: Ca,
    RGB_BPTC_SIGNED_Format: Ll,
    RGB_BPTC_UNSIGNED_Format: Il,
    RGB_ETC1_Format: Ef,
    RGB_ETC2_Format: ml,
    RGB_PVRTC_2BPPV1_Format: dl,
    RGB_PVRTC_4BPPV1_Format: ul,
    RGB_S3TC_DXT1_Format: wa,
    RGFormat: bf,
    RGIntegerFormat: gd,
    RawShaderMaterial: lc,
    Ray: hi,
    Raycaster: Du,
    Rec709Primaries: Vr,
    RectAreaLight: Pc,
    RedFormat: Sf,
    RedIntegerFormat: md,
    ReinhardToneMapping: ff,
    RenderTarget: go,
    RepeatWrapping: Dr,
    ReplaceStencilOp: Qx,
    ReverseSubtractEquation: qd,
    RingGeometry: tc,
    SIGNED_RED_GREEN_RGTC2_Format: Nl,
    SIGNED_RED_RGTC1_Format: Ul,
    SRGBColorSpace: vt,
    SRGBTransfer: nt,
    Scene: Io,
    ShaderChunk: ke,
    ShaderLib: nn,
    ShaderMaterial: jt,
    ShadowMaterial: cc,
    Shape: Fn,
    ShapeGeometry: nc,
    ShapePath: od,
    ShapeUtils: yn,
    ShortType: xf,
    Skeleton: Oo,
    SkeletonHelper: Wu,
    SkinnedMesh: No,
    Source: In,
    Sphere: Yt,
    SphereGeometry: ua,
    Spherical: Ou,
    SphericalHarmonics3: Lc,
    SplineCurve: oa,
    SpotLight: Ec,
    SpotLightHelper: Gu,
    Sprite: Uo,
    SpriteMaterial: ea,
    SrcAlphaFactor: ld,
    SrcAlphaSaturateFactor: tf,
    SrcColorFactor: Jd,
    StaticCopyUsage: gv,
    StaticDrawUsage: Hr,
    StaticReadUsage: fv,
    StereoCamera: Mu,
    StreamCopyUsage: xv,
    StreamDrawUsage: dv,
    StreamReadUsage: mv,
    StringKeyframeTrack: kn,
    SubtractEquation: Xd,
    SubtractiveBlending: ol,
    TOUCH: Vx,
    TangentSpaceNormalMap: mi,
    TetrahedronGeometry: ic,
    Texture: St,
    TextureLoader: hu,
    TorusGeometry: sc,
    TorusKnotGeometry: rc,
    Triangle: Un,
    TriangleFanDrawMode: $x,
    TriangleStripDrawMode: Jx,
    TrianglesDrawMode: Zx,
    TubeGeometry: ac,
    TwoPassDoubleSide: Gx,
    UVMapping: Gc,
    Uint16BufferAttribute: Zr,
    Uint32BufferAttribute: Jr,
    Uint8BufferAttribute: jl,
    Uint8ClampedBufferAttribute: eh,
    Uniform: Pu,
    UniformsGroup: Lu,
    UniformsLib: le,
    UniformsUtils: xp,
    UnsignedByteType: On,
    UnsignedInt248Type: ii,
    UnsignedIntType: Ln,
    UnsignedShort4444Type: fd,
    UnsignedShort5551Type: pd,
    UnsignedShortType: Wc,
    VSMShadowMap: pn,
    Vector2: Z,
    Vector3: A,
    Vector4: je,
    VectorKeyframeTrack: ns,
    VideoTexture: Jh,
    WebGL1Renderer: Co,
    WebGL3DRenderTarget: Hl,
    WebGLArrayRenderTarget: kl,
    WebGLCoordinateSystem: vn,
    WebGLCubeRenderTarget: xo,
    WebGLMultipleRenderTargets: Gl,
    WebGLRenderTarget: qt,
    WebGLRenderer: Ro,
    WebGLUtils: V0,
    WebGPUCoordinateSystem: Gr,
    WireframeGeometry: oc,
    WrapAroundEnding: Br,
    ZeroCurvatureEnding: zi,
    ZeroFactor: Yd,
    ZeroSlopeEnding: Vi,
    ZeroStencilOp: Kx,
    _SRGBAFormat: po,
    createCanvasElement: tp,
    sRGBEncoding: ri
};
function getWebGLErrorMessage() {
    return getErrorMessage(1);
}
function getErrorMessage(version) {
    var names = {
        1: "WebGL",
        2: "WebGL 2"
    };
    var contexts = {
        1: window.WebGLRenderingContext,
        2: window.WebGL2RenderingContext
    };
    var message = 'Your $0 does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">$1</a>';
    var element = document.createElement("div");
    element.id = "webglmessage";
    element.style.fontFamily = "monospace";
    element.style.fontSize = "13px";
    element.style.fontWeight = "normal";
    element.style.textAlign = "center";
    element.style.background = "#fff";
    element.style.color = "#000";
    element.style.padding = "1.5em";
    element.style.width = "400px";
    element.style.margin = "5em auto 0";
    if (contexts[version]) {
        message = message.replace("$0", "graphics card");
    } else {
        message = message.replace("$0", "browser");
    }
    message = message.replace("$1", names[version]);
    element.innerHTML = message;
    return element;
}
function typedarray_to_vectype(typedArray, ndim) {
    if (ndim === 1) {
        return "float";
    } else if (typedArray instanceof Float32Array) {
        return "vec" + ndim;
    } else if (typedArray instanceof Int32Array) {
        return "ivec" + ndim;
    } else if (typedArray instanceof Uint32Array) {
        return "uvec" + ndim;
    } else {
        return;
    }
}
function attribute_type(attribute) {
    if (attribute) {
        return typedarray_to_vectype(attribute.array, attribute.itemSize);
    } else {
        return;
    }
}
function uniform_type(obj) {
    if (obj instanceof THREE.Uniform) {
        return uniform_type(obj.value);
    } else if (typeof obj === "number") {
        return "float";
    } else if (typeof obj === "boolean") {
        return "bool";
    } else if (obj instanceof THREE.Vector2) {
        return "vec2";
    } else if (obj instanceof THREE.Vector3) {
        return "vec3";
    } else if (obj instanceof THREE.Vector4) {
        return "vec4";
    } else if (obj instanceof THREE.Color) {
        return "vec4";
    } else if (obj instanceof THREE.Matrix3) {
        return "mat3";
    } else if (obj instanceof THREE.Matrix4) {
        return "mat4";
    } else if (obj instanceof THREE.Texture) {
        return "sampler2D";
    } else {
        return;
    }
}
function uniforms_to_type_declaration(uniform_dict) {
    let result = "";
    for(const name in uniform_dict){
        const uniform = uniform_dict[name];
        const type = uniform_type(uniform);
        result += `uniform ${type} ${name};\n`;
    }
    return result;
}
function attributes_to_type_declaration(attributes_dict) {
    let result = "";
    for(const name in attributes_dict){
        const attribute = attributes_dict[name];
        const type = attribute_type(attribute);
        result += `in ${type} ${name};\n`;
    }
    return result;
}
const _changeEvent = {
    type: "change"
};
const _startEvent = {
    type: "start"
};
const _endEvent = {
    type: "end"
};
const _ray = new hi();
const _plane = new mn();
const TILT_LIMIT = Math.cos(70 * yv.DEG2RAD);
class OrbitControls extends sn {
    constructor(object, domElement, allow_update, is_in_scene){
        super();
        this.object = object;
        this.domElement = domElement;
        this.domElement.style.touchAction = "none";
        this.enabled = true;
        this.target = new A();
        this.cursor = new A();
        this.minDistance = 0;
        this.maxDistance = Infinity;
        this.minZoom = 0;
        this.maxZoom = Infinity;
        this.minTargetRadius = 0;
        this.maxTargetRadius = Infinity;
        this.minPolarAngle = 0;
        this.maxPolarAngle = Math.PI;
        this.minAzimuthAngle = -Infinity;
        this.maxAzimuthAngle = Infinity;
        this.enableDamping = false;
        this.dampingFactor = 0.05;
        this.enableZoom = true;
        this.zoomSpeed = 1.0;
        this.enableRotate = true;
        this.rotateSpeed = 1.0;
        this.enablePan = true;
        this.panSpeed = 1.0;
        this.screenSpacePanning = true;
        this.keyPanSpeed = 7.0;
        this.zoomToCursor = false;
        this.autoRotate = false;
        this.autoRotateSpeed = 2.0;
        this.keys = {
            LEFT: "ArrowLeft",
            UP: "ArrowUp",
            RIGHT: "ArrowRight",
            BOTTOM: "ArrowDown"
        };
        this.mouseButtons = {
            LEFT: zx.ROTATE,
            MIDDLE: zx.DOLLY,
            RIGHT: zx.PAN
        };
        this.touches = {
            ONE: Vx.ROTATE,
            TWO: Vx.DOLLY_PAN
        };
        this.target0 = this.target.clone();
        this.position0 = this.object.position.clone();
        this.zoom0 = this.object.zoom;
        this._domElementKeyEvents = null;
        this.getPolarAngle = function() {
            return spherical.phi;
        };
        this.getAzimuthalAngle = function() {
            return spherical.theta;
        };
        this.getDistance = function() {
            return this.object.position.distanceTo(this.target);
        };
        this.listenToKeyEvents = function(domElement) {
            domElement.addEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = domElement;
        };
        this.stopListenToKeyEvents = function() {
            this._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = null;
        };
        this.saveState = function() {
            scope.target0.copy(scope.target);
            scope.position0.copy(scope.object.position);
            scope.zoom0 = scope.object.zoom;
        };
        this.reset = function() {
            scope.target.copy(scope.target0);
            scope.object.position.copy(scope.position0);
            scope.object.zoom = scope.zoom0;
            scope.object.updateProjectionMatrix();
            scope.dispatchEvent(_changeEvent);
            scope.update();
            state = STATE.NONE;
        };
        this.update = function() {
            const offset = new A();
            const quat = new Ut().setFromUnitVectors(object.up, new A(0, 1, 0));
            const quatInverse = quat.clone().invert();
            const lastPosition = new A();
            const lastQuaternion = new Ut();
            const lastTargetPosition = new A();
            const twoPI = 2 * Math.PI;
            return function update(deltaTime = null) {
                if (!allow_update()) {
                    return;
                }
                const position = scope.object.position;
                offset.copy(position).sub(scope.target);
                offset.applyQuaternion(quat);
                spherical.setFromVector3(offset);
                if (scope.autoRotate && state === STATE.NONE) {
                    rotateLeft(getAutoRotationAngle(deltaTime));
                }
                if (scope.enableDamping) {
                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;
                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;
                } else {
                    spherical.theta += sphericalDelta.theta;
                    spherical.phi += sphericalDelta.phi;
                }
                let min = scope.minAzimuthAngle;
                let max = scope.maxAzimuthAngle;
                if (isFinite(min) && isFinite(max)) {
                    if (min < -Math.PI) min += twoPI;
                    else if (min > Math.PI) min -= twoPI;
                    if (max < -Math.PI) max += twoPI;
                    else if (max > Math.PI) max -= twoPI;
                    if (min <= max) {
                        spherical.theta = Math.max(min, Math.min(max, spherical.theta));
                    } else {
                        spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
                    }
                }
                spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
                spherical.makeSafe();
                if (scope.enableDamping === true) {
                    scope.target.addScaledVector(panOffset, scope.dampingFactor);
                } else {
                    scope.target.add(panOffset);
                }
                scope.target.sub(scope.cursor);
                scope.target.clampLength(scope.minTargetRadius, scope.maxTargetRadius);
                scope.target.add(scope.cursor);
                if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {
                    spherical.radius = clampDistance(spherical.radius);
                } else {
                    spherical.radius = clampDistance(spherical.radius * scale);
                }
                offset.setFromSpherical(spherical);
                offset.applyQuaternion(quatInverse);
                position.copy(scope.target).add(offset);
                scope.object.lookAt(scope.target);
                if (scope.enableDamping === true) {
                    sphericalDelta.theta *= 1 - scope.dampingFactor;
                    sphericalDelta.phi *= 1 - scope.dampingFactor;
                    panOffset.multiplyScalar(1 - scope.dampingFactor);
                } else {
                    sphericalDelta.set(0, 0, 0);
                    panOffset.set(0, 0, 0);
                }
                let zoomChanged = false;
                if (scope.zoomToCursor && performCursorZoom) {
                    let newRadius = null;
                    if (scope.object.isPerspectiveCamera) {
                        const prevRadius = offset.length();
                        newRadius = clampDistance(prevRadius * scale);
                        const radiusDelta = prevRadius - newRadius;
                        scope.object.position.addScaledVector(dollyDirection, radiusDelta);
                        scope.object.updateMatrixWorld();
                    } else if (scope.object.isOrthographicCamera) {
                        const mouseBefore = new A(mouse.x, mouse.y, 0);
                        mouseBefore.unproject(scope.object);
                        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                        scope.object.updateProjectionMatrix();
                        zoomChanged = true;
                        const mouseAfter = new A(mouse.x, mouse.y, 0);
                        mouseAfter.unproject(scope.object);
                        scope.object.position.sub(mouseAfter).add(mouseBefore);
                        scope.object.updateMatrixWorld();
                        newRadius = offset.length();
                    } else {
                        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
                        scope.zoomToCursor = false;
                    }
                    if (newRadius !== null) {
                        if (this.screenSpacePanning) {
                            scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);
                        } else {
                            _ray.origin.copy(scope.object.position);
                            _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);
                            if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {
                                object.lookAt(scope.target);
                            } else {
                                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);
                                _ray.intersectPlane(_plane, scope.target);
                            }
                        }
                    }
                } else if (scope.object.isOrthographicCamera) {
                    scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                    scope.object.updateProjectionMatrix();
                    zoomChanged = true;
                }
                scale = 1;
                performCursorZoom = false;
                if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS || lastTargetPosition.distanceToSquared(scope.target) > 0) {
                    scope.dispatchEvent(_changeEvent);
                    lastPosition.copy(scope.object.position);
                    lastQuaternion.copy(scope.object.quaternion);
                    lastTargetPosition.copy(scope.target);
                    zoomChanged = false;
                    return true;
                }
                return false;
            };
        }();
        this.dispose = function() {
            scope.domElement.removeEventListener("contextmenu", onContextMenu);
            scope.domElement.removeEventListener("pointerdown", onPointerDown);
            scope.domElement.removeEventListener("pointercancel", onPointerUp);
            scope.domElement.removeEventListener("wheel", onMouseWheel);
            scope.domElement.removeEventListener("pointermove", onPointerMove);
            scope.domElement.removeEventListener("pointerup", onPointerUp);
            if (scope._domElementKeyEvents !== null) {
                scope._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
                scope._domElementKeyEvents = null;
            }
        };
        const scope = this;
        const STATE = {
            NONE: -1,
            ROTATE: 0,
            DOLLY: 1,
            PAN: 2,
            TOUCH_ROTATE: 3,
            TOUCH_PAN: 4,
            TOUCH_DOLLY_PAN: 5,
            TOUCH_DOLLY_ROTATE: 6
        };
        let state = STATE.NONE;
        const EPS = 0.000001;
        const spherical = new Ou();
        const sphericalDelta = new Ou();
        let scale = 1;
        const panOffset = new A();
        const rotateStart = new Z();
        const rotateEnd = new Z();
        const rotateDelta = new Z();
        const panStart = new Z();
        const panEnd = new Z();
        const panDelta = new Z();
        const dollyStart = new Z();
        const dollyEnd = new Z();
        const dollyDelta = new Z();
        const dollyDirection = new A();
        const mouse = new Z();
        let performCursorZoom = false;
        const pointers = [];
        const pointerPositions = {};
        function getAutoRotationAngle(deltaTime) {
            if (deltaTime !== null) {
                return 2 * Math.PI / 60 * scope.autoRotateSpeed * deltaTime;
            } else {
                return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
            }
        }
        function getZoomScale() {
            return Math.pow(0.95, scope.zoomSpeed);
        }
        function rotateLeft(angle) {
            sphericalDelta.theta -= angle;
        }
        function rotateUp(angle) {
            sphericalDelta.phi -= angle;
        }
        const panLeft = function() {
            const v = new A();
            return function panLeft(distance, objectMatrix) {
                v.setFromMatrixColumn(objectMatrix, 0);
                v.multiplyScalar(-distance);
                panOffset.add(v);
            };
        }();
        const panUp = function() {
            const v = new A();
            return function panUp(distance, objectMatrix) {
                if (scope.screenSpacePanning === true) {
                    v.setFromMatrixColumn(objectMatrix, 1);
                } else {
                    v.setFromMatrixColumn(objectMatrix, 0);
                    v.crossVectors(scope.object.up, v);
                }
                v.multiplyScalar(distance);
                panOffset.add(v);
            };
        }();
        const pan = function() {
            const offset = new A();
            return function pan(deltaX, deltaY) {
                const element = scope.domElement;
                if (scope.object.isPerspectiveCamera) {
                    const position = scope.object.position;
                    offset.copy(position).sub(scope.target);
                    let targetDistance = offset.length();
                    targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);
                    panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
                    panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
                } else if (scope.object.isOrthographicCamera) {
                    panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
                    panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
                } else {
                    console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
                    scope.enablePan = false;
                }
            };
        }();
        function dollyOut(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
                scale /= dollyScale;
            } else {
                console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
                scope.enableZoom = false;
            }
        }
        function dollyIn(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
                scale *= dollyScale;
            } else {
                console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
                scope.enableZoom = false;
            }
        }
        function updateMouseParameters(event) {
            if (!scope.zoomToCursor) {
                return;
            }
            performCursorZoom = true;
            const rect = scope.domElement.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            const w = rect.width;
            const h = rect.height;
            mouse.x = x / w * 2 - 1;
            mouse.y = -(y / h) * 2 + 1;
            dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();
        }
        function clampDistance(dist) {
            return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));
        }
        function handleMouseDownRotate(event) {
            rotateStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownDolly(event) {
            updateMouseParameters(event);
            dollyStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownPan(event) {
            panStart.set(event.clientX, event.clientY);
        }
        function handleMouseMoveRotate(event) {
            rotateEnd.set(event.clientX, event.clientY);
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
            scope.update();
        }
        function handleMouseMoveDolly(event) {
            dollyEnd.set(event.clientX, event.clientY);
            dollyDelta.subVectors(dollyEnd, dollyStart);
            if (dollyDelta.y > 0) {
                dollyOut(getZoomScale());
            } else if (dollyDelta.y < 0) {
                dollyIn(getZoomScale());
            }
            dollyStart.copy(dollyEnd);
            scope.update();
        }
        function handleMouseMovePan(event) {
            panEnd.set(event.clientX, event.clientY);
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
            scope.update();
        }
        function handleMouseWheel(event) {
            updateMouseParameters(event);
            if (event.deltaY < 0) {
                dollyIn(getZoomScale());
            } else if (event.deltaY > 0) {
                dollyOut(getZoomScale());
            }
            scope.update();
        }
        function handleKeyDown(event) {
            let needsUpdate = false;
            switch(event.code){
                case scope.keys.UP:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateUp(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(0, scope.keyPanSpeed);
                    }
                    needsUpdate = true;
                    break;
                case scope.keys.BOTTOM:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateUp(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(0, -scope.keyPanSpeed);
                    }
                    needsUpdate = true;
                    break;
                case scope.keys.LEFT:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateLeft(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(scope.keyPanSpeed, 0);
                    }
                    needsUpdate = true;
                    break;
                case scope.keys.RIGHT:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateLeft(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(-scope.keyPanSpeed, 0);
                    }
                    needsUpdate = true;
                    break;
            }
            if (needsUpdate) {
                event.preventDefault();
                scope.update();
            }
        }
        function handleTouchStartRotate() {
            if (pointers.length === 1) {
                rotateStart.set(pointers[0].pageX, pointers[0].pageY);
            } else {
                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
                rotateStart.set(x, y);
            }
        }
        function handleTouchStartPan() {
            if (pointers.length === 1) {
                panStart.set(pointers[0].pageX, pointers[0].pageY);
            } else {
                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
                panStart.set(x, y);
            }
        }
        function handleTouchStartDolly() {
            const dx = pointers[0].pageX - pointers[1].pageX;
            const dy = pointers[0].pageY - pointers[1].pageY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyStart.set(0, distance);
        }
        function handleTouchStartDollyPan() {
            if (scope.enableZoom) handleTouchStartDolly();
            if (scope.enablePan) handleTouchStartPan();
        }
        function handleTouchStartDollyRotate() {
            if (scope.enableZoom) handleTouchStartDolly();
            if (scope.enableRotate) handleTouchStartRotate();
        }
        function handleTouchMoveRotate(event) {
            if (pointers.length == 1) {
                rotateEnd.set(event.pageX, event.pageY);
            } else {
                const position = getSecondPointerPosition(event);
                const x = 0.5 * (event.pageX + position.x);
                const y = 0.5 * (event.pageY + position.y);
                rotateEnd.set(x, y);
            }
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
        }
        function handleTouchMovePan(event) {
            if (pointers.length === 1) {
                panEnd.set(event.pageX, event.pageY);
            } else {
                const position = getSecondPointerPosition(event);
                const x = 0.5 * (event.pageX + position.x);
                const y = 0.5 * (event.pageY + position.y);
                panEnd.set(x, y);
            }
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
        }
        function handleTouchMoveDolly(event) {
            const position = getSecondPointerPosition(event);
            const dx = event.pageX - position.x;
            const dy = event.pageY - position.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyEnd.set(0, distance);
            dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
            dollyOut(dollyDelta.y);
            dollyStart.copy(dollyEnd);
        }
        function handleTouchMoveDollyPan(event) {
            if (scope.enableZoom) handleTouchMoveDolly(event);
            if (scope.enablePan) handleTouchMovePan(event);
        }
        function handleTouchMoveDollyRotate(event) {
            if (scope.enableZoom) handleTouchMoveDolly(event);
            if (scope.enableRotate) handleTouchMoveRotate(event);
        }
        function onPointerDown(event) {
            if (scope.enabled === false) return;
            if (pointers.length === 0) {
                scope.domElement.setPointerCapture(event.pointerId);
                scope.domElement.addEventListener("pointermove", onPointerMove);
                scope.domElement.addEventListener("pointerup", onPointerUp);
            }
            addPointer(event);
            if (event.pointerType === "touch") {
                onTouchStart(event);
            } else {
                onMouseDown(event);
            }
        }
        function onPointerMove(event) {
            if (scope.enabled === false) return;
            if (!is_in_scene(event)) return;
            if (event.pointerType === "touch") {
                onTouchMove(event);
            } else {
                onMouseMove(event);
            }
        }
        function onPointerUp(event) {
            removePointer(event);
            if (pointers.length === 0) {
                scope.domElement.releasePointerCapture(event.pointerId);
                scope.domElement.removeEventListener("pointermove", onPointerMove);
                scope.domElement.removeEventListener("pointerup", onPointerUp);
            }
            scope.dispatchEvent(_endEvent);
            state = STATE.NONE;
        }
        function onMouseDown(event) {
            let mouseAction;
            switch(event.button){
                case 0:
                    mouseAction = scope.mouseButtons.LEFT;
                    break;
                case 1:
                    mouseAction = scope.mouseButtons.MIDDLE;
                    break;
                case 2:
                    mouseAction = scope.mouseButtons.RIGHT;
                    break;
                default:
                    mouseAction = -1;
            }
            switch(mouseAction){
                case zx.DOLLY:
                    if (scope.enableZoom === false) return;
                    handleMouseDownDolly(event);
                    state = STATE.DOLLY;
                    break;
                case zx.ROTATE:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        if (scope.enablePan === false) return;
                        handleMouseDownPan(event);
                        state = STATE.PAN;
                    } else {
                        if (scope.enableRotate === false) return;
                        handleMouseDownRotate(event);
                        state = STATE.ROTATE;
                    }
                    break;
                case zx.PAN:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        if (scope.enableRotate === false) return;
                        handleMouseDownRotate(event);
                        state = STATE.ROTATE;
                    } else {
                        if (scope.enablePan === false) return;
                        handleMouseDownPan(event);
                        state = STATE.PAN;
                    }
                    break;
                default:
                    state = STATE.NONE;
            }
            if (state !== STATE.NONE) {
                scope.dispatchEvent(_startEvent);
            }
        }
        function onMouseMove(event) {
            switch(state){
                case STATE.ROTATE:
                    if (scope.enableRotate === false) return;
                    handleMouseMoveRotate(event);
                    break;
                case STATE.DOLLY:
                    if (scope.enableZoom === false) return;
                    handleMouseMoveDolly(event);
                    break;
                case STATE.PAN:
                    if (scope.enablePan === false) return;
                    handleMouseMovePan(event);
                    break;
            }
        }
        function onMouseWheel(event) {
            if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE || !is_in_scene(event)) return;
            event.preventDefault();
            scope.dispatchEvent(_startEvent);
            handleMouseWheel(event);
            scope.dispatchEvent(_endEvent);
        }
        function onKeyDown(event) {
            if (scope.enabled === false || scope.enablePan === false) return;
            handleKeyDown(event);
        }
        function onTouchStart(event) {
            trackPointer(event);
            switch(pointers.length){
                case 1:
                    switch(scope.touches.ONE){
                        case Vx.ROTATE:
                            if (scope.enableRotate === false) return;
                            handleTouchStartRotate();
                            state = STATE.TOUCH_ROTATE;
                            break;
                        case Vx.PAN:
                            if (scope.enablePan === false) return;
                            handleTouchStartPan();
                            state = STATE.TOUCH_PAN;
                            break;
                        default:
                            state = STATE.NONE;
                    }
                    break;
                case 2:
                    switch(scope.touches.TWO){
                        case Vx.DOLLY_PAN:
                            if (scope.enableZoom === false && scope.enablePan === false) return;
                            handleTouchStartDollyPan();
                            state = STATE.TOUCH_DOLLY_PAN;
                            break;
                        case Vx.DOLLY_ROTATE:
                            if (scope.enableZoom === false && scope.enableRotate === false) return;
                            handleTouchStartDollyRotate();
                            state = STATE.TOUCH_DOLLY_ROTATE;
                            break;
                        default:
                            state = STATE.NONE;
                    }
                    break;
                default:
                    state = STATE.NONE;
            }
            if (state !== STATE.NONE) {
                scope.dispatchEvent(_startEvent);
            }
        }
        function onTouchMove(event) {
            trackPointer(event);
            switch(state){
                case STATE.TOUCH_ROTATE:
                    if (scope.enableRotate === false) return;
                    handleTouchMoveRotate(event);
                    scope.update();
                    break;
                case STATE.TOUCH_PAN:
                    if (scope.enablePan === false) return;
                    handleTouchMovePan(event);
                    scope.update();
                    break;
                case STATE.TOUCH_DOLLY_PAN:
                    if (scope.enableZoom === false && scope.enablePan === false) return;
                    handleTouchMoveDollyPan(event);
                    scope.update();
                    break;
                case STATE.TOUCH_DOLLY_ROTATE:
                    if (scope.enableZoom === false && scope.enableRotate === false) return;
                    handleTouchMoveDollyRotate(event);
                    scope.update();
                    break;
                default:
                    state = STATE.NONE;
            }
        }
        function onContextMenu(event) {
            if (scope.enabled === false) return;
            event.preventDefault();
        }
        function addPointer(event) {
            pointers.push(event);
        }
        function removePointer(event) {
            delete pointerPositions[event.pointerId];
            for(let i = 0; i < pointers.length; i++){
                if (pointers[i].pointerId == event.pointerId) {
                    pointers.splice(i, 1);
                    return;
                }
            }
        }
        function trackPointer(event) {
            let position = pointerPositions[event.pointerId];
            if (position === undefined) {
                position = new Z();
                pointerPositions[event.pointerId] = position;
            }
            position.set(event.pageX, event.pageY);
        }
        function getSecondPointerPosition(event) {
            const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
            return pointerPositions[pointer.pointerId];
        }
        scope.domElement.addEventListener("contextmenu", onContextMenu);
        scope.domElement.addEventListener("pointerdown", onPointerDown);
        scope.domElement.addEventListener("pointercancel", onPointerUp);
        scope.domElement.addEventListener("wheel", onMouseWheel, {
            passive: false
        });
        this.update();
    }
}
function events2unitless(screen, event) {
    const { canvas , winscale , renderer  } = screen;
    const rect = canvas.getBoundingClientRect();
    const x = (event.clientX - rect.left) / winscale;
    const y = (event.clientY - rect.top) / winscale;
    return [
        x,
        renderer._height - y
    ];
}
function Identity4x4() {
    return new ze();
}
function in_scene(scene, mouse_event) {
    const [x, y] = events2unitless(scene.screen, mouse_event);
    const [sx, sy, sw, sh] = scene.viewport.value;
    return x >= sx && x < sx + sw && y >= sy && y < sy + sh;
}
function attach_3d_camera(canvas, makie_camera, cam3d, light_dir, scene) {
    if (cam3d === undefined) {
        return;
    }
    const [w, h] = makie_camera.resolution.value;
    const camera = new yt(cam3d.fov.value, w / h, 0.01, 100.0);
    const center = new A(...cam3d.lookat.value);
    camera.up = new A(...cam3d.upvector.value);
    camera.position.set(...cam3d.eyeposition.value);
    camera.lookAt(center);
    const use_orbit_cam = ()=>!(JSServe.can_send_to_julia && JSServe.can_send_to_julia());
    const controls = new OrbitControls(camera, canvas, use_orbit_cam, (e)=>in_scene(scene, e));
    controls.addEventListener("change", (e)=>{
        const view = camera.matrixWorldInverse;
        const projection = camera.projectionMatrix;
        const [width, height] = cam3d.resolution.value;
        const [x, y, z] = camera.position;
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        camera.updateWorldMatrix();
        makie_camera.update_matrices(view.elements, projection.elements, [
            width,
            height
        ], [
            x,
            y,
            z
        ]);
        makie_camera.update_light_dir(light_dir.value);
    });
}
function mul(a, b) {
    return b.clone().multiply(a);
}
function orthographicprojection(left, right, bottom, top, znear, zfar) {
    return [
        2 / (right - left),
        0,
        0,
        0,
        0,
        2 / (top - bottom),
        0,
        0,
        0,
        0,
        -2 / (zfar - znear),
        0,
        -(right + left) / (right - left),
        -(top + bottom) / (top - bottom),
        -(zfar + znear) / (zfar - znear),
        1
    ];
}
function pixel_space_inverse(w, h, near) {
    return [
        0.5 * w,
        0,
        0,
        0,
        0,
        0.5 * h,
        0,
        0,
        0,
        0,
        near,
        0,
        0.5 * w,
        0.5 * h,
        0,
        1
    ];
}
function relative_space() {
    const relative = Identity4x4();
    relative.fromArray([
        2,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        1,
        0,
        -1,
        -1,
        0,
        1
    ]);
    return relative;
}
class MakieCamera {
    constructor(){
        this.view = new Pu(Identity4x4());
        this.projection = new Pu(Identity4x4());
        this.projectionview = new Pu(Identity4x4());
        this.pixel_space = new Pu(Identity4x4());
        this.pixel_space_inverse = new Pu(Identity4x4());
        this.projectionview_inverse = new Pu(Identity4x4());
        this.relative_space = new Pu(relative_space());
        this.relative_inverse = new Pu(relative_space().invert());
        this.clip_space = new Pu(Identity4x4());
        this.resolution = new Pu(new Z());
        this.eyeposition = new Pu(new A());
        this.preprojections = {};
        this.light_direction = new Pu(new A(-1, -1, -1).normalize());
    }
    calculate_matrices() {
        const [w, h] = this.resolution.value;
        const nearclip = -10_000;
        this.pixel_space.value.fromArray(orthographicprojection(0, w, 0, h, nearclip, 10_000));
        this.pixel_space_inverse.value.fromArray(pixel_space_inverse(w, h, nearclip));
        const proj_view = mul(this.view.value, this.projection.value);
        this.projectionview.value = proj_view;
        this.projectionview_inverse.value = proj_view.clone().invert();
        Object.keys(this.preprojections).forEach((key)=>{
            const [space, markerspace] = key.split(",");
            this.preprojections[key].value = this.calculate_preprojection_matrix(space, markerspace);
        });
    }
    update_matrices(view, projection, resolution, eyepos) {
        this.view.value.fromArray(view);
        this.projection.value.fromArray(projection);
        this.resolution.value.fromArray(resolution);
        this.eyeposition.value.fromArray(eyepos);
        this.calculate_matrices();
        return;
    }
    update_light_dir(light_dir) {
        const T = new He().setFromMatrix4(this.view.value).invert();
        const new_dir = new A().fromArray(light_dir);
        new_dir.applyMatrix3(T).normalize();
        this.light_direction.value = new_dir;
    }
    clip_to_space(space) {
        if (space === "data") {
            return this.projectionview_inverse.value;
        } else if (space === "pixel") {
            return this.pixel_space_inverse.value;
        } else if (space === "relative") {
            return this.relative_inverse.value;
        } else if (space === "clip") {
            return this.clip_space.value;
        } else {
            throw new Error(`Space ${space} not recognized`);
        }
    }
    space_to_clip(space) {
        if (space === "data") {
            return this.projectionview.value;
        } else if (space === "pixel") {
            return this.pixel_space.value;
        } else if (space === "relative") {
            return this.relative_space.value;
        } else if (space === "clip") {
            return this.clip_space.value;
        } else {
            throw new Error(`Space ${space} not recognized`);
        }
    }
    calculate_preprojection_matrix(space, markerspace) {
        const cp = this.clip_to_space(markerspace);
        const sc = this.space_to_clip(space);
        return mul(sc, cp);
    }
    preprojection_matrix(space, markerspace) {
        const key = [
            space,
            markerspace
        ];
        const matrix_uniform = this.preprojections[key];
        if (matrix_uniform) {
            return matrix_uniform;
        } else {
            const matrix = this.calculate_preprojection_matrix(space, markerspace);
            const uniform = new Pu(matrix);
            this.preprojections[key] = uniform;
            return uniform;
        }
    }
}
const scene_cache = {};
function filter_by_key(dict, keys, default_value = false) {
    const result = {};
    keys.forEach((key)=>{
        const val = dict[key];
        if (val) {
            result[key] = val;
        } else {
            result[key] = default_value;
        }
    });
    return result;
}
const plot_cache = {};
const TEXTURE_ATLAS = [
    undefined
];
function add_scene(scene_id, three_scene) {
    scene_cache[scene_id] = three_scene;
}
function find_scene(scene_id) {
    return scene_cache[scene_id];
}
function delete_scene(scene_id) {
    const scene = scene_cache[scene_id];
    if (!scene) {
        return;
    }
    delete_three_scene(scene);
    while(scene.children.length > 0){
        scene.remove(scene.children[0]);
    }
    delete scene_cache[scene_id];
}
function find_plots(plot_uuids) {
    const plots = [];
    plot_uuids.forEach((id)=>{
        const plot = plot_cache[id];
        if (plot) {
            plots.push(plot);
        }
    });
    return plots;
}
function delete_scenes(scene_uuids, plot_uuids) {
    plot_uuids.forEach((plot_id)=>{
        const plot = plot_cache[plot_id];
        if (plot) {
            delete_plot(plot);
        }
    });
    scene_uuids.forEach((scene_id)=>{
        delete_scene(scene_id);
    });
}
function insert_plot(scene_id, plot_data) {
    const scene = find_scene(scene_id);
    plot_data.forEach((plot)=>{
        add_plot(scene, plot);
    });
}
function delete_plots(plot_uuids) {
    const plots = find_plots(plot_uuids);
    plots.forEach(delete_plot);
}
function convert_texture(data) {
    const tex = create_texture(data);
    tex.needsUpdate = true;
    tex.minFilter = mod[data.minFilter];
    tex.magFilter = mod[data.magFilter];
    tex.anisotropy = data.anisotropy;
    tex.wrapS = mod[data.wrapS];
    if (data.size.length > 1) {
        tex.wrapT = mod[data.wrapT];
    }
    if (data.size.length > 2) {
        tex.wrapR = mod[data.wrapR];
    }
    return tex;
}
function is_three_fixed_array(value) {
    return value instanceof mod.Vector2 || value instanceof mod.Vector3 || value instanceof mod.Vector4 || value instanceof mod.Matrix4;
}
function to_uniform(data) {
    if (data.type !== undefined) {
        if (data.type == "Sampler") {
            return convert_texture(data);
        }
        throw new Error(`Type ${data.type} not known`);
    }
    if (Array.isArray(data) || ArrayBuffer.isView(data)) {
        if (!data.every((x)=>typeof x === "number")) {
            return data;
        }
        if (data.length == 2) {
            return new mod.Vector2().fromArray(data);
        }
        if (data.length == 3) {
            return new mod.Vector3().fromArray(data);
        }
        if (data.length == 4) {
            return new mod.Vector4().fromArray(data);
        }
        if (data.length == 16) {
            const mat = new mod.Matrix4();
            mat.fromArray(data);
            return mat;
        }
    }
    return data;
}
function deserialize_uniforms(data) {
    const result = {};
    for(const name in data){
        const value = data[name];
        if (value instanceof mod.Uniform) {
            result[name] = value;
        } else {
            const ser = to_uniform(value);
            result[name] = new mod.Uniform(ser);
        }
    }
    return result;
}
function linesegments_vertex_shader(uniforms, attributes) {
    const attribute_decl = attributes_to_type_declaration(attributes);
    const uniform_decl = uniforms_to_type_declaration(uniforms);
    const color = attribute_type(attributes.color_start) || uniform_type(uniforms.color_start);
    return `precision mediump int;
        precision highp float;

        ${attribute_decl}
        ${uniform_decl}

        out vec2 f_uv;
        out ${color} f_color;

        vec2 get_resolution() {
            // 2 * px_per_unit doesn't make any sense, but works
            // TODO, figure out what's going on!
            return resolution / 2.0 * px_per_unit;
        }

        vec3 screen_space(vec3 point) {
            vec4 vertex = projectionview * model * vec4(point, 1);
            return vec3(vertex.xy * get_resolution(), vertex.z + vertex.w * depth_shift) / vertex.w;
        }

        vec3 screen_space(vec2 point) {
            return screen_space(vec3(point, 0));
        }

        void main() {
            vec3 p_a = screen_space(linepoint_start);
            vec3 p_b = screen_space(linepoint_end);
            float width = (px_per_unit * (position.x == 1.0 ? linewidth_end : linewidth_start));
            f_color = position.x == 1.0 ? color_end : color_start;
            f_uv = vec2(position.x, position.y + 0.5);

            vec2 pointA = p_a.xy;
            vec2 pointB = p_b.xy;

            vec2 xBasis = pointB - pointA;
            vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));
            vec2 point = pointA + xBasis * position.x + yBasis * width * position.y;

            gl_Position = vec4(point.xy / get_resolution(), position.x == 1.0 ? p_b.z : p_a.z, 1.0);
        }
        `;
}
function lines_fragment_shader(uniforms, attributes) {
    const color = attribute_type(attributes.color_start) || uniform_type(uniforms.color_start);
    const color_uniforms = filter_by_key(uniforms, [
        "colorrange",
        "colormap",
        "nan_color",
        "highclip",
        "lowclip"
    ]);
    const uniform_decl = uniforms_to_type_declaration(color_uniforms);
    return `#extension GL_OES_standard_derivatives : enable

    precision mediump int;
    precision highp float;
    precision mediump sampler2D;
    precision mediump sampler3D;

    in vec2 f_uv;
    in ${color} f_color;
    ${uniform_decl}

    out vec4 fragment_color;

    // Half width of antialiasing smoothstep
    #define ANTIALIAS_RADIUS 0.7071067811865476

    vec4 get_color_from_cmap(float value, sampler2D colormap, vec2 colorrange) {
        float cmin = colorrange.x;
        float cmax = colorrange.y;
        if (value <= cmax && value >= cmin) {
            // in value range, continue!
        } else if (value < cmin) {
            return lowclip;
        } else if (value > cmax) {
            return highclip;
        } else {
            // isnan CAN be broken (of course) -.-
            // so if outside value range and not smaller/bigger min/max we assume NaN
            return nan_color;
        }
        float i01 = clamp((value - cmin) / (cmax - cmin), 0.0, 1.0);
        // 1/0 corresponds to the corner of the colormap, so to properly interpolate
        // between the colors, we need to scale it, so that the ends are at 1 - (stepsize/2) and 0+(stepsize/2).
        float stepsize = 1.0 / float(textureSize(colormap, 0));
        i01 = (1.0 - stepsize) * i01 + 0.5 * stepsize;
        return texture(colormap, vec2(i01, 0.0));
    }

    vec4 get_color(float color, sampler2D colormap, vec2 colorrange) {
        return get_color_from_cmap(color, colormap, colorrange);
    }

    vec4 get_color(vec4 color, bool colormap, bool colorrange) {
        return color;
    }
    vec4 get_color(vec3 color, bool colormap, bool colorrange) {
        return vec4(color, 1.0);
    }

    float aastep(float threshold, float value) {
        float afwidth = length(vec2(dFdx(value), dFdy(value))) * ANTIALIAS_RADIUS;
        return smoothstep(threshold-afwidth, threshold+afwidth, value);
    }

    float aastep(float threshold1, float threshold2, float dist) {
        return aastep(threshold1, dist) * aastep(threshold2, 1.0 - dist);
    }

    void main(){
        float xalpha = aastep(0.0, 0.0, f_uv.x);
        float yalpha = aastep(0.0, 0.0, f_uv.y);
        vec4 color = get_color(f_color, colormap, colorrange);
        fragment_color = vec4(color.rgb, color.a);
    }
    `;
}
function create_line_material(uniforms, attributes) {
    const uniforms_des = deserialize_uniforms(uniforms);
    return new THREE.RawShaderMaterial({
        uniforms: uniforms_des,
        glslVersion: THREE.GLSL3,
        vertexShader: linesegments_vertex_shader(uniforms_des, attributes),
        fragmentShader: lines_fragment_shader(uniforms_des, attributes),
        transparent: true
    });
}
function attach_interleaved_line_buffer(attr_name, geometry, points, ndim, is_segments) {
    const skip_elems = is_segments ? 2 * ndim : ndim;
    const buffer = new THREE.InstancedInterleavedBuffer(points, skip_elems, 1);
    geometry.setAttribute(attr_name + "_start", new THREE.InterleavedBufferAttribute(buffer, ndim, 0));
    geometry.setAttribute(attr_name + "_end", new THREE.InterleavedBufferAttribute(buffer, ndim, ndim));
    return buffer;
}
function create_line_instance_geometry() {
    const geometry = new THREE.InstancedBufferGeometry();
    const instance_positions = [
        0,
        -0.5,
        1,
        -0.5,
        1,
        0.5,
        0,
        -0.5,
        1,
        0.5,
        0,
        0.5
    ];
    geometry.setAttribute("position", new THREE.Float32BufferAttribute(instance_positions, 2));
    geometry.boundingSphere = new THREE.Sphere();
    geometry.boundingSphere.radius = 10000000000000;
    geometry.frustumCulled = false;
    return geometry;
}
function create_line_buffer(geometry, buffers, name, attr, is_segments) {
    const flat_buffer = attr.value.flat;
    const ndims = attr.value.type_length;
    const linebuffer = attach_interleaved_line_buffer(name, geometry, flat_buffer, ndims, is_segments);
    buffers[name] = linebuffer;
    return flat_buffer;
}
function create_line_buffers(geometry, buffers, attributes, is_segments) {
    for(let name in attributes){
        const attr = attributes[name];
        create_line_buffer(geometry, buffers, name, attr, is_segments);
    }
}
function attach_updates(mesh, buffers, attributes, is_segments) {
    let geometry = mesh.geometry;
    for(let name in attributes){
        const attr = attributes[name];
        attr.on((new_points)=>{
            let buff = buffers[name];
            const ndims = new_points.type_length;
            const new_line_points = new_points.flat;
            const old_count = buff.array.length;
            const new_count = new_line_points.length / ndims;
            if (old_count < new_line_points.length) {
                mesh.geometry.dispose();
                geometry = create_line_instance_geometry();
                buff = attach_interleaved_line_buffer(name, geometry, new_line_points, ndims, is_segments);
                mesh.geometry = geometry;
                buffers[name] = buff;
            } else {
                buff.set(new_line_points);
            }
            const ls_factor = is_segments ? 2 : 1;
            const offset = is_segments ? 0 : 1;
            mesh.geometry.instanceCount = Math.max(0, new_count / ls_factor - offset);
            buff.needsUpdate = true;
            mesh.needsUpdate = true;
        });
    }
}
function _create_line(line_data, is_segments) {
    const geometry = create_line_instance_geometry();
    const buffers = {};
    create_line_buffers(geometry, buffers, line_data.attributes, is_segments);
    const material = create_line_material(line_data.uniforms, geometry.attributes);
    const mesh = new THREE.Mesh(geometry, material);
    const offset = is_segments ? 0 : 1;
    const new_count = geometry.attributes.linepoint_start.count;
    mesh.geometry.instanceCount = Math.max(0, new_count - offset);
    attach_updates(mesh, buffers, line_data.attributes, is_segments);
    return mesh;
}
function create_line(line_data) {
    return _create_line(line_data, false);
}
function create_linesegments(line_data) {
    return _create_line(line_data, true);
}
function deserialize_plot(data) {
    let mesh;
    const update_visible = (v)=>{
        mesh.visible = v;
        return;
    };
    if (data.plot_type === "lines") {
        mesh = create_line(data);
    } else if (data.plot_type === "linesegments") {
        mesh = create_linesegments(data);
    } else if ("instance_attributes" in data) {
        mesh = create_instanced_mesh(data);
    } else {
        mesh = create_mesh(data);
    }
    mesh.name = data.name;
    mesh.frustumCulled = false;
    mesh.matrixAutoUpdate = false;
    mesh.plot_uuid = data.uuid;
    update_visible(data.visible.value);
    data.visible.on(update_visible);
    connect_uniforms(mesh, data.uniform_updater);
    if (!(data.plot_type === "lines" || data.plot_type === "linesegments")) {
        connect_attributes(mesh, data.attribute_updater);
    }
    return mesh;
}
const ON_NEXT_INSERT = new Set();
function on_next_insert(f) {
    ON_NEXT_INSERT.add(f);
}
function add_plot(scene, plot_data) {
    const cam = scene.wgl_camera;
    const identity = new mod.Uniform(new mod.Matrix4());
    if (plot_data.cam_space == "data") {
        plot_data.uniforms.view = cam.view;
        plot_data.uniforms.projection = cam.projection;
        plot_data.uniforms.projectionview = cam.projectionview;
        plot_data.uniforms.eyeposition = cam.eyeposition;
    } else if (plot_data.cam_space == "pixel") {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = cam.pixel_space;
        plot_data.uniforms.projectionview = cam.pixel_space;
    } else if (plot_data.cam_space == "relative") {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = cam.relative_space;
        plot_data.uniforms.projectionview = cam.relative_space;
    } else {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = identity;
        plot_data.uniforms.projectionview = identity;
    }
    const { px_per_unit  } = scene.screen;
    plot_data.uniforms.resolution = cam.resolution;
    plot_data.uniforms.px_per_unit = new mod.Uniform(px_per_unit);
    if (plot_data.uniforms.preprojection) {
        const { space , markerspace  } = plot_data;
        plot_data.uniforms.preprojection = cam.preprojection_matrix(space.value, markerspace.value);
    }
    if (scene.camera_relative_light) {
        plot_data.uniforms.light_direction = cam.light_direction;
        scene.light_direction.on((value)=>{
            cam.update_light_dir(value);
        });
    } else {
        const light_dir = new mod.Vector3().fromArray(scene.light_direction.value);
        plot_data.uniforms.light_direction = new mod.Uniform(light_dir);
        scene.light_direction.on((value)=>{
            plot_data.uniforms.light_direction.value.fromArray(value);
        });
    }
    const p = deserialize_plot(plot_data);
    plot_cache[p.plot_uuid] = p;
    scene.add(p);
    const next_insert = new Set(ON_NEXT_INSERT);
    next_insert.forEach((f)=>f());
}
function connect_uniforms(mesh, updater) {
    updater.on(([name, data])=>{
        if (name === "none") {
            return;
        }
        const uniform = mesh.material.uniforms[name];
        if (uniform.value.isTexture) {
            const im_data = uniform.value.image;
            const [size, tex_data] = data;
            if (tex_data.length == im_data.data.length) {
                im_data.data.set(tex_data);
            } else {
                const old_texture = uniform.value;
                uniform.value = re_create_texture(old_texture, tex_data, size);
                old_texture.dispose();
            }
            uniform.value.needsUpdate = true;
        } else {
            if (is_three_fixed_array(uniform.value)) {
                uniform.value.fromArray(data);
            } else {
                uniform.value = data;
            }
        }
    });
}
function convert_RGB_to_RGBA(rgbArray) {
    const length = rgbArray.length;
    const rgbaArray = new Float32Array(length / 3 * 4);
    for(let i = 0, j = 0; i < length; i += 3, j += 4){
        rgbaArray[j] = rgbArray[i];
        rgbaArray[j + 1] = rgbArray[i + 1];
        rgbaArray[j + 2] = rgbArray[i + 2];
        rgbaArray[j + 3] = 1.0;
    }
    return rgbaArray;
}
function create_texture(data) {
    const buffer = data.data;
    if (data.size.length == 3) {
        const tex = new mod.Data3DTexture(buffer, data.size[0], data.size[1], data.size[2]);
        tex.format = mod[data.three_format];
        tex.type = mod[data.three_type];
        return tex;
    } else {
        let tex_data;
        if (buffer == "texture_atlas") {
            tex_data = TEXTURE_ATLAS[0].value;
        } else {
            tex_data = buffer;
        }
        let format = mod[data.three_format];
        if (data.three_format == "RGBFormat") {
            tex_data = convert_RGB_to_RGBA(tex_data);
            format = mod.RGBAFormat;
        }
        return new mod.DataTexture(tex_data, data.size[0], data.size[1], format, mod[data.three_type]);
    }
}
function re_create_texture(old_texture, buffer, size) {
    let tex;
    if (size.length == 3) {
        tex = new mod.Data3DTexture(buffer, size[0], size[1], size[2]);
        tex.format = old_texture.format;
        tex.type = old_texture.type;
    } else {
        tex = new mod.DataTexture(buffer, size[0], size[1] ? size[1] : 1, old_texture.format, old_texture.type);
    }
    tex.minFilter = old_texture.minFilter;
    tex.magFilter = old_texture.magFilter;
    tex.anisotropy = old_texture.anisotropy;
    tex.wrapS = old_texture.wrapS;
    if (size.length > 1) {
        tex.wrapT = old_texture.wrapT;
    }
    if (size.length > 2) {
        tex.wrapR = old_texture.wrapR;
    }
    return tex;
}
function BufferAttribute(buffer) {
    const jsbuff = new mod.BufferAttribute(buffer.flat, buffer.type_length);
    jsbuff.setUsage(mod.DynamicDrawUsage);
    return jsbuff;
}
function InstanceBufferAttribute(buffer) {
    const jsbuff = new mod.InstancedBufferAttribute(buffer.flat, buffer.type_length);
    jsbuff.setUsage(mod.DynamicDrawUsage);
    return jsbuff;
}
function attach_geometry(buffer_geometry, vertexarrays, faces) {
    for(const name in vertexarrays){
        const buff = vertexarrays[name];
        let buffer;
        if (buff.to_update) {
            buffer = new mod.BufferAttribute(buff.to_update, buff.itemSize);
        } else {
            buffer = BufferAttribute(buff);
        }
        buffer_geometry.setAttribute(name, buffer);
    }
    buffer_geometry.setIndex(faces);
    buffer_geometry.boundingSphere = new mod.Sphere();
    buffer_geometry.boundingSphere.radius = 10000000000000;
    buffer_geometry.frustumCulled = false;
    return buffer_geometry;
}
function attach_instanced_geometry(buffer_geometry, instance_attributes) {
    for(const name in instance_attributes){
        const buffer = InstanceBufferAttribute(instance_attributes[name]);
        buffer_geometry.setAttribute(name, buffer);
    }
}
function recreate_geometry(mesh, vertexarrays, faces) {
    const buffer_geometry = new mod.BufferGeometry();
    attach_geometry(buffer_geometry, vertexarrays, faces);
    mesh.geometry.dispose();
    mesh.geometry = buffer_geometry;
    mesh.needsUpdate = true;
}
function recreate_instanced_geometry(mesh) {
    const buffer_geometry = new mod.InstancedBufferGeometry();
    const vertexarrays = {};
    const instance_attributes = {};
    const faces = [
        ...mesh.geometry.index.array
    ];
    Object.keys(mesh.geometry.attributes).forEach((name)=>{
        const buffer = mesh.geometry.attributes[name];
        const copy = buffer.to_update ? buffer.to_update : buffer.array.map((x)=>x);
        if (buffer.isInstancedBufferAttribute) {
            instance_attributes[name] = {
                flat: copy,
                type_length: buffer.itemSize
            };
        } else {
            vertexarrays[name] = {
                flat: copy,
                type_length: buffer.itemSize
            };
        }
    });
    attach_geometry(buffer_geometry, vertexarrays, faces);
    attach_instanced_geometry(buffer_geometry, instance_attributes);
    mesh.geometry.dispose();
    mesh.geometry = buffer_geometry;
    mesh.needsUpdate = true;
}
function create_material(program) {
    const is_volume = "volumedata" in program.uniforms;
    return new mod.RawShaderMaterial({
        uniforms: deserialize_uniforms(program.uniforms),
        vertexShader: program.vertex_source,
        fragmentShader: program.fragment_source,
        side: is_volume ? mod.BackSide : mod.DoubleSide,
        transparent: true,
        glslVersion: mod.GLSL3,
        depthTest: !program.overdraw.value,
        depthWrite: !program.transparency.value
    });
}
function create_mesh(program) {
    const buffer_geometry = new mod.BufferGeometry();
    const faces = new mod.BufferAttribute(program.faces.value, 1);
    attach_geometry(buffer_geometry, program.vertexarrays, faces);
    const material = create_material(program);
    const mesh = new mod.Mesh(buffer_geometry, material);
    program.faces.on((x)=>{
        mesh.geometry.setIndex(new mod.BufferAttribute(x, 1));
    });
    return mesh;
}
function create_instanced_mesh(program) {
    const buffer_geometry = new mod.InstancedBufferGeometry();
    const faces = new mod.BufferAttribute(program.faces.value, 1);
    attach_geometry(buffer_geometry, program.vertexarrays, faces);
    attach_instanced_geometry(buffer_geometry, program.instance_attributes);
    const material = create_material(program);
    const mesh = new mod.Mesh(buffer_geometry, material);
    program.faces.on((x)=>{
        mesh.geometry.setIndex(new mod.BufferAttribute(x, 1));
    });
    return mesh;
}
function first(x) {
    return x[Object.keys(x)[0]];
}
function connect_attributes(mesh, updater) {
    const instance_buffers = {};
    const geometry_buffers = {};
    let first_instance_buffer;
    const real_instance_length = [
        0
    ];
    let first_geometry_buffer;
    const real_geometry_length = [
        0
    ];
    function re_assign_buffers() {
        const attributes = mesh.geometry.attributes;
        Object.keys(attributes).forEach((name)=>{
            const buffer = attributes[name];
            if (buffer.isInstancedBufferAttribute) {
                instance_buffers[name] = buffer;
            } else {
                geometry_buffers[name] = buffer;
            }
        });
        first_instance_buffer = first(instance_buffers);
        if (first_instance_buffer) {
            real_instance_length[0] = first_instance_buffer.count;
        }
        first_geometry_buffer = first(geometry_buffers);
        real_geometry_length[0] = first_geometry_buffer.count;
    }
    re_assign_buffers();
    updater.on(([name, new_values, length])=>{
        const buffer = mesh.geometry.attributes[name];
        let buffers;
        let real_length;
        let is_instance = false;
        if (name in instance_buffers) {
            buffers = instance_buffers;
            first_instance_buffer;
            real_length = real_instance_length;
            is_instance = true;
        } else {
            buffers = geometry_buffers;
            first_geometry_buffer;
            real_length = real_geometry_length;
        }
        if (length <= real_length[0]) {
            buffer.set(new_values);
            buffer.needsUpdate = true;
            if (is_instance) {
                mesh.geometry.instanceCount = length;
            }
        } else {
            buffer.to_update = new_values;
            const all_have_same_length = Object.values(buffers).every((x)=>x.to_update && x.to_update.length / x.itemSize == length);
            if (all_have_same_length) {
                if (is_instance) {
                    recreate_instanced_geometry(mesh);
                    re_assign_buffers();
                    mesh.geometry.instanceCount = new_values.length / buffer.itemSize;
                } else {
                    recreate_geometry(mesh, buffers, mesh.geometry.index);
                    re_assign_buffers();
                }
            }
        }
    });
}
function deserialize_scene(data, screen) {
    const scene = new mod.Scene();
    scene.screen = screen;
    const { canvas  } = screen;
    add_scene(data.uuid, scene);
    scene.scene_uuid = data.uuid;
    scene.frustumCulled = false;
    scene.viewport = data.viewport;
    scene.backgroundcolor = data.backgroundcolor;
    scene.backgroundcolor_alpha = data.backgroundcolor_alpha;
    scene.clearscene = data.clearscene;
    scene.visible = data.visible;
    scene.camera_relative_light = data.camera_relative_light;
    scene.light_direction = data.light_direction;
    const camera = new MakieCamera();
    scene.wgl_camera = camera;
    function update_cam(camera_matrices, force) {
        if (!force) {
            if (!(JSServe.can_send_to_julia && JSServe.can_send_to_julia())) {
                return;
            }
        }
        const [view, projection, resolution, eyepos] = camera_matrices;
        camera.update_matrices(view, projection, resolution, eyepos);
    }
    if (data.cam3d_state) {
        attach_3d_camera(canvas, camera, data.cam3d_state, data.light_direction, scene);
    }
    update_cam(data.camera.value, true);
    camera.update_light_dir(data.light_direction.value);
    data.camera.on(update_cam);
    data.plots.forEach((plot_data)=>{
        add_plot(scene, plot_data);
    });
    scene.scene_children = data.children.map((child)=>{
        const childscene = deserialize_scene(child, screen);
        return childscene;
    });
    return scene;
}
function delete_plot(plot) {
    delete plot_cache[plot.plot_uuid];
    const { parent  } = plot;
    if (parent) {
        parent.remove(plot);
    }
    plot.geometry.dispose();
    plot.material.dispose();
}
function delete_three_scene(scene) {
    delete scene_cache[scene.scene_uuid];
    scene.scene_children.forEach(delete_three_scene);
    while(scene.children.length > 0){
        delete_plot(scene.children[0]);
    }
}
window.THREE = mod;
function render_scene(scene, picking = false) {
    const { camera , renderer , px_per_unit  } = scene.screen;
    const canvas = renderer.domElement;
    if (!document.body.contains(canvas)) {
        console.log("EXITING WGL");
        delete_three_scene(scene);
        renderer.state.reset();
        renderer.dispose();
        return false;
    }
    if (!scene.visible.value) {
        return true;
    }
    renderer.autoClear = scene.clearscene.value;
    const area = scene.viewport.value;
    if (area) {
        const [x, y, w, h] = area.map((x)=>x * px_per_unit);
        renderer.setViewport(x, y, w, h);
        renderer.setScissor(x, y, w, h);
        renderer.setScissorTest(true);
        if (picking) {
            renderer.setClearAlpha(0);
            renderer.setClearColor(new mod.Color(0), 0.0);
        } else {
            const alpha = scene.backgroundcolor_alpha.value;
            renderer.setClearColor(scene.backgroundcolor.value, alpha);
        }
        renderer.render(scene, camera);
    }
    return scene.scene_children.every((x)=>render_scene(x, picking));
}
function start_renderloop(three_scene) {
    const { fps  } = three_scene.screen;
    const time_per_frame = 1 / fps * 1000;
    let last_time_stamp = performance.now();
    function renderloop(timestamp) {
        if (timestamp - last_time_stamp > time_per_frame) {
            const all_rendered = render_scene(three_scene);
            if (!all_rendered) {
                return;
            }
            last_time_stamp = performance.now();
        }
        window.requestAnimationFrame(renderloop);
    }
    render_scene(three_scene);
    renderloop();
}
function throttle_function(func, delay) {
    let prev = 0;
    let future_id = undefined;
    function inner_throttle(...args) {
        const now = new Date().getTime();
        if (future_id !== undefined) {
            clearTimeout(future_id);
            future_id = undefined;
        }
        if (now - prev > delay) {
            prev = now;
            return func(...args);
        } else {
            future_id = setTimeout(()=>inner_throttle(...args), now - prev + 1);
        }
    }
    return inner_throttle;
}
function get_body_size() {
    const bodyStyle = window.getComputedStyle(document.body);
    const width_padding = parseInt(bodyStyle.paddingLeft, 10) + parseInt(bodyStyle.paddingRight, 10) + parseInt(bodyStyle.marginLeft, 10) + parseInt(bodyStyle.marginRight, 10);
    const height_padding = parseInt(bodyStyle.paddingTop, 10) + parseInt(bodyStyle.paddingBottom, 10) + parseInt(bodyStyle.marginTop, 10) + parseInt(bodyStyle.marginBottom, 10);
    const width = window.innerWidth - width_padding;
    const height = window.innerHeight - height_padding;
    return [
        width,
        height
    ];
}
function get_parent_size(canvas) {
    const rect = canvas.parentElement.getBoundingClientRect();
    return [
        rect.width,
        rect.height
    ];
}
function wglerror(gl, error) {
    switch(error){
        case gl.NO_ERROR:
            return "No error";
        case gl.INVALID_ENUM:
            return "Invalid enum";
        case gl.INVALID_VALUE:
            return "Invalid value";
        case gl.INVALID_OPERATION:
            return "Invalid operation";
        case gl.OUT_OF_MEMORY:
            return "Out of memory";
        case gl.CONTEXT_LOST_WEBGL:
            return "Context lost";
        default:
            return "Unknown error";
    }
}
function handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for(let i = from; i < to; i++){
        const line = i + 1;
        lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
}
function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "") return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
        const errorLine = parseInt(errorMatches[1]);
        return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
    } else {
        return errors;
    }
}
function on_shader_error(gl, program, glVertexShader, glFragmentShader) {
    const programLog = gl.getProgramInfoLog(program).trim();
    const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
    const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
    const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
    const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
    const err = "THREE.WebGLProgram: Shader Error " + wglerror(gl, gl.getError()) + " - " + "VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\n" + "Program Info Log:\n" + programLog + "\n" + vertexErrors + "\n" + fragmentErrors + "\n" + "Fragment log:\n" + fragmentLog + "Vertex log:\n" + vertexLog;
    JSServe.Connection.send_warning(err);
}
function add_canvas_events(screen, comm, resize_to) {
    const { canvas , winscale  } = screen;
    function mouse_callback(event) {
        const [x, y] = events2unitless(screen, event);
        comm.notify({
            mouseposition: [
                x,
                y
            ]
        });
    }
    const notify_mouse_throttled = throttle_function(mouse_callback, 40);
    function mousemove(event) {
        notify_mouse_throttled(event);
        return false;
    }
    canvas.addEventListener("mousemove", mousemove);
    function mousedown(event) {
        comm.notify({
            mousedown: event.buttons
        });
        return false;
    }
    canvas.addEventListener("mousedown", mousedown);
    function mouseup(event) {
        comm.notify({
            mouseup: event.buttons
        });
        return false;
    }
    canvas.addEventListener("mouseup", mouseup);
    function wheel(event) {
        comm.notify({
            scroll: [
                event.deltaX,
                -event.deltaY
            ]
        });
        event.preventDefault();
        return false;
    }
    canvas.addEventListener("wheel", wheel);
    function keydown(event) {
        comm.notify({
            keydown: event.code
        });
        return false;
    }
    canvas.addEventListener("keydown", keydown);
    function keyup(event) {
        comm.notify({
            keyup: event.code
        });
        return false;
    }
    canvas.addEventListener("keyup", keyup);
    function contextmenu(event) {
        comm.notify({
            keyup: "delete_keys"
        });
        return false;
    }
    canvas.addEventListener("contextmenu", (e)=>e.preventDefault());
    canvas.addEventListener("focusout", contextmenu);
    function resize_callback() {
        let width, height;
        if (resize_to == "body") {
            [width, height] = get_body_size();
        } else if (resize_to == "parent") {
            [width, height] = get_parent_size(canvas);
        }
        comm.notify({
            resize: [
                width / winscale,
                height / winscale
            ]
        });
    }
    if (resize_to) {
        const resize_callback_throttled = throttle_function(resize_callback, 100);
        window.addEventListener("resize", (event)=>resize_callback_throttled());
        resize_callback_throttled();
    }
}
function threejs_module(canvas) {
    let context = canvas.getContext("webgl2", {
        preserveDrawingBuffer: true
    });
    if (!context) {
        console.warn("WebGL 2.0 not supported by browser, falling back to WebGL 1.0 (Volume plots will not work)");
        context = canvas.getContext("webgl", {
            preserveDrawingBuffer: true
        });
    }
    if (!context) {
        return;
    }
    const renderer = new mod.WebGLRenderer({
        antialias: true,
        canvas: canvas,
        context: context,
        powerPreference: "high-performance"
    });
    renderer.debug.onShaderError = on_shader_error;
    renderer.setClearColor("#ffffff");
    return renderer;
}
function set_render_size(screen, width, height) {
    const { renderer , canvas , scalefactor , winscale , px_per_unit  } = screen;
    const [swidth, sheight] = [
        winscale * width,
        winscale * height
    ];
    const real_pixel_width = Math.ceil(width * px_per_unit);
    const real_pixel_height = Math.ceil(height * px_per_unit);
    renderer._width = width;
    renderer._height = height;
    canvas.width = real_pixel_width;
    canvas.height = real_pixel_height;
    canvas.style.width = swidth + "px";
    canvas.style.height = sheight + "px";
    renderer.setViewport(0, 0, real_pixel_width, real_pixel_height);
    add_picking_target(screen);
    return;
}
function add_picking_target(screen) {
    const { picking_target , canvas  } = screen;
    const [w, h] = [
        canvas.width,
        canvas.height
    ];
    if (picking_target) {
        if (picking_target.width == w && picking_target.height == h) {
            return;
        } else {
            picking_target.dispose();
        }
    }
    screen.picking_target = new mod.WebGLRenderTarget(w, h);
    return;
}
function create_scene(wrapper, canvas, canvas_width, scenes, comm, width, height, texture_atlas_obs, fps, resize_to, px_per_unit, scalefactor) {
    if (!scalefactor) {
        scalefactor = window.devicePixelRatio || 1.0;
    }
    if (!px_per_unit) {
        px_per_unit = scalefactor;
    }
    const renderer = threejs_module(canvas);
    TEXTURE_ATLAS[0] = texture_atlas_obs;
    if (!renderer) {
        const warning = getWebGLErrorMessage();
        wrapper.appendChild(warning);
    }
    const camera = new mod.PerspectiveCamera(45, 1, 0, 100);
    camera.updateProjectionMatrix();
    const pixel_ratio = window.devicePixelRatio || 1.0;
    const winscale = scalefactor / pixel_ratio;
    const screen = {
        renderer,
        camera,
        fps,
        canvas,
        px_per_unit,
        scalefactor,
        winscale
    };
    add_canvas_events(screen, comm, resize_to);
    set_render_size(screen, width, height);
    const three_scene = deserialize_scene(scenes, screen);
    start_renderloop(three_scene);
    canvas_width.on((w_h)=>{
        set_render_size(screen, ...w_h);
    });
    return renderer;
}
function set_picking_uniforms(scene, last_id, picking, picked_plots, plots, id_to_plot) {
    scene.children.forEach((plot, index)=>{
        const { material  } = plot;
        const { uniforms  } = material;
        if (picking) {
            uniforms.object_id.value = last_id + index;
            uniforms.picking.value = true;
            material.blending = mod.NoBlending;
        } else {
            uniforms.picking.value = false;
            material.blending = mod.NormalBlending;
            const id = uniforms.object_id.value;
            if (id in picked_plots) {
                plots.push([
                    plot,
                    picked_plots[id]
                ]);
                id_to_plot[id] = plot;
            }
        }
    });
    let next_id = last_id + scene.children.length;
    scene.scene_children.forEach((scene)=>{
        next_id = set_picking_uniforms(scene, next_id, picking, picked_plots, plots, id_to_plot);
    });
    return next_id;
}
function pick_native(scene, _x, _y, _w, _h) {
    const { renderer , picking_target , px_per_unit  } = scene.screen;
    [_x, _y, _w, _h] = [
        _x,
        _y,
        _w,
        _h
    ].map((x)=>Math.ceil(x * px_per_unit));
    const [x, y, w, h] = [
        _x,
        _y,
        _w,
        _h
    ];
    renderer.setRenderTarget(picking_target);
    set_picking_uniforms(scene, 1, true);
    render_scene(scene, true);
    renderer.setRenderTarget(null);
    const nbytes = w * h * 4;
    const pixel_bytes = new Uint8Array(nbytes);
    renderer.readRenderTargetPixels(picking_target, x, y, w, h, pixel_bytes);
    const picked_plots = {};
    const picked_plots_array = [];
    const reinterpret_view = new DataView(pixel_bytes.buffer);
    for(let i = 0; i < pixel_bytes.length / 4; i++){
        const id = reinterpret_view.getUint16(i * 4);
        const index = reinterpret_view.getUint16(i * 4 + 2);
        picked_plots_array.push([
            id,
            index
        ]);
        picked_plots[id] = index;
    }
    const plots = [];
    const id_to_plot = {};
    set_picking_uniforms(scene, 0, false, picked_plots, plots, id_to_plot);
    const picked_plots_matrix = picked_plots_array.map(([id, index])=>{
        const p = id_to_plot[id];
        return [
            p ? p.plot_uuid : null,
            index
        ];
    });
    const plot_matrix = {
        data: picked_plots_matrix,
        size: [
            w,
            h
        ]
    };
    return [
        plot_matrix,
        plots
    ];
}
function pick_closest(scene, xy, range) {
    const { renderer  } = scene.screen;
    const [width, height] = [
        renderer._width,
        renderer._height
    ];
    if (!(1.0 <= xy[0] <= width && 1.0 <= xy[1] <= height)) {
        return [
            null,
            0
        ];
    }
    const x0 = Math.max(1, xy[0] - range);
    const y0 = Math.max(1, xy[1] - range);
    const x1 = Math.min(width, Math.floor(xy[0] + range));
    const y1 = Math.min(height, Math.floor(xy[1] + range));
    const dx = x1 - x0;
    const dy = y1 - y0;
    const [plot_data, _] = pick_native(scene, x0, y0, dx, dy);
    const plot_matrix = plot_data.data;
    let min_dist = range ^ 2;
    let selection = [
        null,
        0
    ];
    const x = xy[0] + 1 - x0;
    const y = xy[1] + 1 - y0;
    let pindex = 0;
    for(let i = 1; i <= dx; i++){
        for(let j = 1; j <= dx; j++){
            const d = x - i ^ 2 + (y - j) ^ 2;
            const [plot_uuid, index] = plot_matrix[pindex];
            pindex = pindex + 1;
            if (d < min_dist && plot_uuid) {
                min_dist = d;
                selection = [
                    plot_uuid,
                    index
                ];
            }
        }
    }
    return selection;
}
function pick_sorted(scene, xy, range) {
    const { renderer  } = scene.screen;
    const [width, height] = [
        renderer._width,
        renderer._height
    ];
    if (!(1.0 <= xy[0] <= width && 1.0 <= xy[1] <= height)) {
        return null;
    }
    const x0 = Math.max(1, xy[0] - range);
    const y0 = Math.max(1, xy[1] - range);
    const x1 = Math.min(width, Math.floor(xy[0] + range));
    const y1 = Math.min(height, Math.floor(xy[1] + range));
    const dx = x1 - x0;
    const dy = y1 - y0;
    const [plot_data, selected] = pick_native(scene, x0, y0, dx, dy);
    if (selected.length == 0) {
        return null;
    }
    const plot_matrix = plot_data.data;
    const distances = selected.map((x)=>range ^ 2);
    const x = xy[0] + 1 - x0;
    const y = xy[1] + 1 - y0;
    let pindex = 0;
    for(let i = 1; i <= dx; i++){
        for(let j = 1; j <= dx; j++){
            const d = x - i ^ 2 + (y - j) ^ 2;
            if (plot_matrix.length <= pindex) {
                continue;
            }
            const [plot_uuid, index] = plot_matrix[pindex];
            pindex = pindex + 1;
            const plot_index = selected.findIndex((x)=>x[0].plot_uuid == plot_uuid);
            if (plot_index >= 0 && d < distances[plot_index]) {
                distances[plot_index] = d;
            }
        }
    }
    const sorted_indices = Array.from(Array(distances.length).keys()).sort((a, b)=>distances[a] < distances[b] ? -1 : distances[b] < distances[a] | 0);
    return sorted_indices.map((idx)=>{
        const [plot, index] = selected[idx];
        return [
            plot.plot_uuid,
            index
        ];
    });
}
function pick_native_uuid(scene, x, y, w, h) {
    const [_, picked_plots] = pick_native(scene, x, y, w, h);
    return picked_plots.map(([p, index])=>[
            p.plot_uuid,
            index
        ]);
}
function pick_native_matrix(scene, x, y, w, h) {
    const [matrix, _] = pick_native(scene, x, y, w, h);
    return matrix;
}
function register_popup(popup, scene, plots_to_pick, callback) {
    if (!scene || !scene.screen) {
        return;
    }
    const { canvas  } = scene.screen;
    canvas.addEventListener("mousedown", (event)=>{
        const [x, y] = events2unitless(scene.screen, event);
        const [_, picks] = pick_native(scene, x, y, 1, 1);
        if (picks.length == 1) {
            const [plot, index] = picks[0];
            if (plots_to_pick.has(plot.plot_uuid)) {
                const result = callback(plot, index);
                if (!popup.classList.contains("show")) {
                    popup.classList.add("show");
                }
                popup.style.left = event.pageX + "px";
                popup.style.top = event.pageY + "px";
                if (typeof result === "string" || result instanceof String) {
                    popup.innerText = result;
                } else {
                    popup.innerHTML = result;
                }
            }
        } else {
            popup.classList.remove("show");
        }
    });
    canvas.addEventListener("keyup", (event)=>{
        if (event.key === "Escape") {
            popup.classList.remove("show");
        }
    });
}
window.WGL = {
    deserialize_scene,
    threejs_module,
    start_renderloop,
    delete_plots,
    insert_plot,
    find_plots,
    delete_scene,
    find_scene,
    scene_cache,
    plot_cache,
    delete_scenes,
    create_scene,
    events2unitless,
    on_next_insert,
    register_popup,
    render_scene
};
export { deserialize_scene as deserialize_scene, threejs_module as threejs_module, start_renderloop as start_renderloop, delete_plots as delete_plots, insert_plot as insert_plot, find_plots as find_plots, delete_scene as delete_scene, find_scene as find_scene, scene_cache as scene_cache, plot_cache as plot_cache, delete_scenes as delete_scenes, create_scene as create_scene, events2unitless as events2unitless, on_next_insert as on_next_insert };
export { render_scene as render_scene };
export { wglerror as wglerror };
export { pick_native as pick_native };
export { pick_closest as pick_closest };
export { pick_sorted as pick_sorted };
export { pick_native_uuid as pick_native_uuid };
export { pick_native_matrix as pick_native_matrix };
export { register_popup as register_popup };

" type="module"></script>
    </div>
  </div>
  <div data-jscall-id="5">
    <script src="data:application/javascript;base64,    JSServe.lock_loading(() => {
        return JSServe.fetch_binary('data:application/octet-stream;base64,kscsapPZJDQ1M2I2M2E0LTBlNjEtNDk1Mi04ZWVkLWNmNDMyYTQ4ODE5NYCjc3VigqdwYXlsb2Fkk8kAFmf0a5LHLGqT2SQ0NTNiNjNhNC0wZTYxLTQ5NTItOGVlZC1jZjQzMmE0ODgxOTWAo3N1YoKncGF5bG9hZJbIAcBrksdvapPZJDQ1M2I2M2E0LTBlNjEtNDk1Mi04ZWVkLWNmNDMyYTQ4ODE5NYOmOTEyNzM1xxNlkqY5MTI3MzWaAQIDBAUGBwgJCqY5MTI3MzbHCWWSpjkxMjczNgGmOTEyNzM3xwllkqY5MTI3MzcBo3N1YoOjb2JzxwdopjkxMjczNqdwYXlsb2FkyAEnZpOCtDEyOTI2NTQ2MzAwNDYzMjI4MDUyxwdopjkxMjczNbM2NzM4MzY1NzgzNzUxMjU3MzU5xwdopjkxMjczN9mocmV0dXJuIChpbmRleCkgPT4gewogICAgY29uc3QgdmFsdWVzID0gX19sb29rdXBfaW50ZXJwb2xhdGVkKCcxMjkyNjU0NjMwMDQ2MzIyODA1MicpLnZhbHVlCiAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzY3MzgzNjU3ODM3NTEyNTczNTknKS5ub3RpZnkodmFsdWVzW2luZGV4IC0gMV0pCn0K2TwvaG9tZS9ydW5uZXIvLmp1bGlhL3BhY2thZ2VzL0pTU2VydmUvQlJwREIvc3JjL3dpZGdldHMuamw6NTWobXNnX3R5cGWhMcgBMGuSx0Fqk9kkNDUzYjYzYTQtMGU2MS00OTUyLThlZWQtY2Y0MzJhNDg4MTk1gaY5MTU5MTjHC2WSpjkxNTkxOKIxMKNzdWKDo29ic8cHaKY5MTU5MTincGF5bG9hZMfGZpOA2WpyZXR1cm4gdmFsdWU9PiBKU1NlcnZlLnVwZGF0ZV9ub2RlX2F0dHJpYnV0ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qc2NhbGwtaWQ9IjciXScpLCAnbWF4JywgdmFsdWUp2VYvaG9tZS9ydW5uZXIvLmp1bGlhL3BhY2thZ2VzL0pTU2VydmUvQlJwREIvc3JjL3JlbmRlcmluZy9oeXBlcnNjcmlwdF9pbnRlZ3JhdGlvbi5qbDo5Mahtc2dfdHlwZaExyAExa5LHQGqT2SQ0NTNiNjNhNC0wZTYxLTQ5NTItOGVlZC1jZjQzMmE0ODgxOTWBpjkxNTkxOccKZZKmOTE1OTE5oTGjc3Vig6NvYnPHB2imOTE1OTE5p3BheWxvYWTHyGaTgNlscmV0dXJuIHZhbHVlPT4gSlNTZXJ2ZS51cGRhdGVfbm9kZV9hdHRyaWJ1dGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSI3Il0nKSwgJ3ZhbHVlJywgdmFsdWUp2VYvaG9tZS9ydW5uZXIvLmp1bGlhL3BhY2thZ2VzL0pTU2VydmUvQlJwREIvc3JjL3JlbmRlcmluZy9oeXBlcnNjcmlwdF9pbnRlZ3JhdGlvbi5qbDo5Mahtc2dfdHlwZaExyAEOa5LHQGqT2SQ0NTNiNjNhNC0wZTYxLTQ5NTItOGVlZC1jZjQzMmE0ODgxOTWBpjkxNTkyMMcKZZKmOTE1OTIwoTGjc3Vig6NvYnPHB2imOTE1OTIwp3BheWxvYWTHpWaTgNlVcmV0dXJuICh2YWwpPT4gewogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSI4Il0nKS5pbm5lclRleHQgPSB2YWwKfdlKL2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL0JScERCL3NyYy9yZW5kZXJpbmcvb2JzZXJ2YWJsZXMuamw6ODaobXNnX3R5cGWhMckAFmEAa5LIMfVqk9kkNDUzYjYzYTQtMGU2MS00OTUyLThlZWQtY2Y0MzJhNDg4MTk13gDepjkxNjEwOMduZZKmOTE2MTA4gqt0eXBlX2xlbmd0aAKkZmxhdMdQFzMTp0MAABpCMxOnQwAADkIAYMFDAAAaQgBgwUMAAA5CzazbQwAAGkLNrNtDAAAOQpr59UMAABpCmvn1QwAADkIzIwhEAAAaQjMjCEQAAA5CpjkxMzY3NscJZZKmOTEzNjc2wqExrXRyYWNraW5nLW9ubHmmOTEzMjI0xwllkqY5MTMyMjTCpjkxNTU3MccJZZKmOTE1NTcxw6Y5MTM1ODTHCWWSpjkxMzU4NMOmOTE1NzIxxwllkqY5MTU3MjHDpjkxNjM2OccPZZKmOTE2MzY5kqRub25lkKY5MTYyOTTHDGWSpjkxNjI5NJOgkACmOTE0MTYzxwllkqY5MTQxNjPDpjkxNjIwOccPZZKmOTE2MjA5kqRub25lkKY5MTYzNjHHI2WSpjkxNjM2MccYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAAKY5MTYzNjPHD2WSpjkxNjM2M5Kkbm9uZZCmOTEzMjI4xw1lkqY5MTMyMjikZGF0YaY5MTMxMjPHF2WSpjkxMzEyM8cMFwfh6b4kGyG/E/Qgv6Y5MTU3MDjHCWWSpjkxNTcwOMKmOTE0OTQ2xw1lkqY5MTQ5NDakZGF0YaY5MTY0MTPHD2WSpjkxNjQxM5Kkbm9uZZCmOTE1ODU1xw1lkqY5MTU4NTWkZGF0YaY5MTU0ODDHCWWSpjkxNTQ4MMOmOTE1NTU4xwllkqY5MTU1NTjCpjkxNTEzOccJZZKmOTE1MTM5wqY5MTYyMDDHHmWSpjkxNjIwMIKrdHlwZV9sZW5ndGgBpGZsYXTHABemOTEzOTI4xxdlkqY5MTM5MjjHDBcH4em+JBshvxP0IL+mOTE2MDIyx6hlkqY5MTYwMjKUx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP8dAFw50WjsAAAAAAAAAAAAAAAAAAAAAtKKROwAAAAAAAAAAAAAAAAAAAAAXt9G4AAAAAAAAgL8AAIC/AAAAgAAAgD/XFwAAFkQAAOFDxwwXAACAPwAAgD8AAIA/pjkxNDIzOMcJZZKmOTE0MjM4w6Y5MTU1NjLHDWWSpjkxNTU2MqRkYXRhpjkxNTE0M8cNZZKmOTE1MTQzpGRhdGGmOTE1OTcxxw9lkqY5MTU5NzGSpG5vbmWQpjkxNjQ0MceoZZKmOTE2NDQxlMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD/HQBcOdFo7AAAAAAAAAAAAAAAAAAAAALSikTsAAAAAAAAAAAAAAAAAAAAAF7fRuAAAAAAAAIC/AACAvwAAAIAAAIA/1xcAABZEAADhQ8cMFwAAgD8AAIA/AACAP6Y5MTU3MjXHDWWSpjkxNTcyNaRkYXRhpjkxNDk0MscJZZKmOTE0OTQywqY5MTYyMDXHD2WSpjkxNjIwNZKkbm9uZZCmOTE1OTMyxw1lkqY5MTU5MzLKP4AAAKY5MTU5ODHIBH9lkqY5MTU5ODGCq3R5cGVfbGVuZ3RoBKRmbGF0yARgFwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD4AAAA/AAAAPwAAAD/NzMw+AAAAPwAAAD8AAAA/zczMPgAAAD8AAAA/AAAAP83MzD6mOTEzNDkwxwllkqY5MTM0OTDDpjkxNTkyNscXZZKmOTE1OTI2xwwXNuDIQTbgyEE2T79BpjkxMzAxNscJZZKmOTEzMDE2w6Y5MTYyNDXHI2WSpjkxNjI0NccYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAAKY5MTU2NTHHCWWSpjkxNTY1McOmOTE2NDQyxw9lkqY5MTY0NDKSzQJYzQHCpjkxNjA4MccPZZKmOTE2MDgxkqRub25lkKY5MTYxNTHHHmWSpjkxNjE1MYKrdHlwZV9sZW5ndGgEpGZsYXTHABemOTE1OTc0xx5lkqY5MTU5NzSCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXpjkxNjMwNccPZZKmOTE2MzA1kqRub25lkKY5MTQ3NzXHCWWSpjkxNDc3NcOmOTE1OTMwxxJlkqY5MTU5MzDXFQcBAACLAQAApjkxNTI4MscJZZKmOTE1Mjgyw6Y5MTYyOTPHI2WSpjkxNjI5M8cYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAAKY5MTY0MznYZZKmOTE2NDM5pyNGRkZGRkamOTEzMjQwxw1lkqY5MTMyNDCkZGF0YaY5MTUzNzPHCWWSpjkxNTM3M8KmOTE0MTk5xwllkqY5MTQxOTnCpjkxNjE0NscMZZKmOTE2MTQ2k6CQAKY5MTU1NTfHCWWSpjkxNTU1N8KmOTE2MjQ3xw9lkqY5MTYyNDeSpG5vbmWQpjkxNjA4MMcMZZKmOTE2MDgwk6CQAKY5MTU5ODDIA2dlkqY5MTU5ODCCq3R5cGVfbGVuZ3RoA6RmbGF0yANIF83MDMDNzAzAAACAvzMzQ0HNzAzAAACAv83MDMAAAAAAAACAvzMzQ0EAAAAAAACAv83MDMD//x9AAACAvzMzQ0H//x9AAACAv83MDMAAAKBAAACAvzMzQ0EAAKBAAACAv83MDMAAAPBAAACAvzMzQ0EAAPBAAACAv83MDMAAACBBAACAvzMzQ0EAACBBAACAv83MDMDNzAzAAAAAADMzQ0HNzAzAAAAAAM3MDMDNzAzAAAAAQDMzQ0HNzAzAAAAAQM3MDMDNzAzAAACAQDMzQ0HNzAzAAACAQM3MDMDNzAzAAADAQDMzQ0HNzAzAAADAQM3MDMDNzAzAAAAAQTMzQ0HNzAzAAAAAQc3MDMDNzAzAAAAgQTMzQ0HNzAzAAAAgQc3MDMDNzAzAAACAv83MDMAzM0NBAACAv83MDMDNzAzAAAAAAM3MDMAzM0NBAAAAAM3MDMDNzAzAAAAAQM3MDMAzM0NBAAAAQM3MDMDNzAzAAACAQM3MDMAzM0NBAACAQM3MDMDNzAzAAADAQM3MDMAzM0NBAADAQM3MDMDNzAzAAAAAQc3MDMAzM0NBAAAAQc3MDMDNzAzAAAAgQc3MDMAzM0NBAAAgQQAAAADNzAzAAACAvwAAAAAzM0NBAACAv///H0DNzAzAAACAv///H0AzM0NBAACAvwAAoEDNzAzAAACAvwAAoEAzM0NBAACAvwAA8EDNzAzAAACAvwAA8EAzM0NBAACAvwAAIEHNzAzAAACAvwAAIEEzM0NBAACAv83MDMDNzAzAAACAv83MDMDNzAzAAAAwQQAAAADNzAzAAACAvwAAAADNzAzAAAAwQf//H0DNzAzAAACAv///H0DNzAzAAAAwQQAAoEDNzAzAAACAvwAAoEDNzAzAAAAwQQAA8EDNzAzAAACAvwAA8EDNzAzAAAAwQQAAIEHNzAzAAACAvwAAIEHNzAzAAAAwQc3MDMAAAAAAAACAv83MDMAAAAAAAAAwQc3MDMD//x9AAACAv83MDMD//x9AAAAwQc3MDMAAAKBAAACAv83MDMAAAKBAAAAwQc3MDMAAAPBAAACAv83MDMAAAPBAAAAwQc3MDMAAACBBAACAv83MDMAAACBBAAAwQaY5MTQzOTjHCWWSpjkxNDM5OMKmOTE0MjQ5xwllkqY5MTQyNDnCpjkxNDk1NccNZZKmOTE0OTU1pGRhdGGmOTE2NDM2x2tlkqY5MTY0MzbHYBYAAAAAAQAAAAQAAAAEAAAAAQAAAAUAAAABAAAAAgAAAAUAAAAFAAAAAgAAAAYAAAACAAAAAwAAAAYAAAAGAAAAAwAAAAcAAAADAAAAAAAAAAcAAAAHAAAAAAAAAAQAAACmOTE1NDQ1xwllkqY5MTU0NDXCpjkxNjQxMsceZZKmOTE2NDEygqt0eXBlX2xlbmd0aAGkZmxhdMcAF6Y5MTY0NDTHCWWSpjkxNjQ0NMKmOTE2MzEyx25lkqY5MTYzMTKCq3R5cGVfbGVuZ3RoAqRmbGF0x1AXMxOnQwAA2UMzE6dDAIDaQwBgwUMAANlDAGDBQwCA2kPNrNtDAADZQ82s20MAgNpDmvn1QwAA2UOa+fVDAIDaQzMjCEQAANlDMyMIRACA2kOmOTE2MzIxxw9lkqY5MTYzMjGSpG5vbmWQpjkxMjk5OccXZZKmOTEyOTk5xwwXB+HpviQbIb8T9CC/pjkxNDc4MscJZZKmOTE0Nzgyw6Y5MTYwOTbHbmWSpjkxNjA5NoKrdHlwZV9sZW5ndGgCpGZsYXTHUBcAgKBDAIDEQgAAEkQAgMRCAICgQwBAMUMAABJEAEAxQwCAoEMAIIBDAAASRAAggEMAgKBDAKCnQwAAEkQAoKdDAICgQwAgz0MAABJEACDPQ6Y5MTY0NDDHDWWSpjkxNjQ0MMo/gAAApjkxNDc4MMcJZZKmOTE0Nzgww6Y5MTYwMjbHDWWSpjkxNjAyNso/gAAApjkxNjEwMccPZZKmOTE2MTAxkqRub25lkKY5MTUwMzLHCWWSpjkxNTAzMsOmOTE2NDEwxx5lkqY5MTY0MTCCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXpjkxNjE5OMceZZKmOTE2MTk4gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6Y5MTYzMTfHD2WSpjkxNjMxN5Kkbm9uZZCmOTE2MTU2xy1lkqY5MTYxNTaCq3R5cGVfbGVuZ3RoAqRmbGF02BcAQKBDAAAcQgAgEkQAABxCpjkxNjIwOMduZZKmOTE2MjA4gqt0eXBlX2xlbmd0aAKkZmxhdMdQFwBAoEMAAGtCAMCeQwAAa0IAQKBDAMAJQwDAnkMAwAlDAECgQwDAWEMAwJ5DAMBYQwBAoEMA4JNDAMCeQwDgk0MAQKBDAGC7QwDAnkMAYLtDpjkxNjQxMcceZZKmOTE2NDExgqt0eXBlX2xlbmd0aASkZmxhdMcAF6Y5MTMyMzfHCWWSpjkxMzIzN8OmOTEzOTQxxwllkqY5MTM5NDHCpjkxNDQwM8cNZZKmOTE0NDAzpGRhdGGmOTE0NzkyxwllkqY5MTQ3OTLCpjkxNTk3NsceZZKmOTE1OTc2gqt0eXBlX2xlbmd0aAGkZmxhdMcAF6Y5MTYwODnHD2WSpjkxNjA4OZKkbm9uZZCmOTE1ODUyxwllkqY5MTU4NTLCpjkxNjQwNscMZZKmOTE2NDA2k6CQAKY5MTYzMDDHHmWSpjkxNjMwMIKrdHlwZV9sZW5ndGgBpGZsYXTHABemOTE2MDg1xw9lkqY5MTYwODWSpG5vbmWQpjkxNjI0NscMZZKmOTE2MjQ2k6CQAKY5MTYyNTLHHmWSpjkxNjI1MoKrdHlwZV9sZW5ndGgBpGZsYXTHABemOTE1NDA5xwllkqY5MTU0MDnCpjkxNTk4MsgBN2WSpjkxNTk4MoKrdHlwZV9sZW5ndGgBpGZsYXTIARgXAADAPwAAwD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AADAPwAAwD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AADAPwAAwD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAP6Y5MTYzMDTHbmWSpjkxNjMwNIKrdHlwZV9sZW5ndGgCpGZsYXTHUBeaObRDAADZQ5o5tEMAgNtDZobOQwAA2UNmhs5DAIDbQzTT6EMAANlDNNPoQwCA20MAkAFEAADZQwCQAUQAgNtDZrYORAAA2UNmtg5EAIDbQ6Y5MTY0NDPHCWWSpjkxNjQ0M4CmOTE2MjAxxw9lkqY5MTYyMDGSpG5vbmWQpjkxNTkyNMcXZZKmOTE1OTI0xwwX/kPGQP5DxkAAAKBApjkxMzQ5NscNZZKmOTEzNDk2pGRhdGGmOTE2MTQ3xw9lkqY5MTYxNDeSpG5vbmWQpjkxNjE5OcceZZKmOTE2MTk5gqt0eXBlX2xlbmd0aASkZmxhdMcAF6Y5MTYzMjDHLWWSpjkxNjMyMIKrdHlwZV9sZW5ndGgCpGZsYXTYFwBAoEMAANlDACASRAAA2UOmOTE2MzY2xx5lkqY5MTYzNjaCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXpjkxNjAyMNhlkqY5MTYwMjCnI0ZGRkZGRqY5MTYyNTHHHmWSpjkxNjI1MYKrdHlwZV9sZW5ndGgEpGZsYXTHABemOTE0MDkxxwllkqY5MTQwOTHDpjkxNjMwMccPZZKmOTE2MzAxkqRub25lkKY5MTYwOTLHbmWSpjkxNjA5MoKrdHlwZV9sZW5ndGgCpGZsYXTHUBczE6dDAAAcQjMTp0MAANlDAGDBQwAAHEIAYMFDAADZQ82s20MAABxCzazbQwAA2UOa+fVDAAAcQpr59UMAANlDMyMIRAAAHEIzIwhEAADZQ6Y5MTYwMTXHD2WSpjkxNjAxNZKkbm9uZZCmOTE2MzA4x25lkqY5MTYzMDiCq3R5cGVfbGVuZ3RoAqRmbGF0x1AXAAASRACAxEIAQBNEAIDEQgAAEkQAQDFDAEATRABAMUMAABJEACCAQwBAE0QAIIBDAAASRACgp0MAQBNEAKCnQwAAEkQAIM9DAEATRAAgz0OmOTEzNjc3xwllkqY5MTM2NzfDpjkxNjA1McgJbGWSpjkxNjA1McgJYBYAAAAAAQAAAAwAAAAAAAAADAAAAAsAAAALAAAADAAAABcAAAALAAAAFwAAABYAAAAWAAAAFwAAACIAAAAWAAAAIgAAACEAAAAhAAAAIgAAAC0AAAAhAAAALQAAACwAAAAsAAAALQAAADgAAAAsAAAAOAAAADcAAAA3AAAAOAAAAEMAAAA3AAAAQwAAAEIAAABCAAAAQwAAAE4AAABCAAAATgAAAE0AAABNAAAATgAAAFkAAABNAAAAWQAAAFgAAABYAAAAWQAAAGQAAABYAAAAZAAAAGMAAABjAAAAZAAAAG8AAABjAAAAbwAAAG4AAAABAAAAAgAAAA0AAAABAAAADQAAAAwAAAAMAAAADQAAABgAAAAMAAAAGAAAABcAAAAXAAAAGAAAACMAAAAXAAAAIwAAACIAAAAiAAAAIwAAAC4AAAAiAAAALgAAAC0AAAAtAAAALgAAADkAAAAtAAAAOQAAADgAAAA4AAAAOQAAAEQAAAA4AAAARAAAAEMAAABDAAAARAAAAE8AAABDAAAATwAAAE4AAABOAAAATwAAAFoAAABOAAAAWgAAAFkAAABZAAAAWgAAAGUAAABZAAAAZQAAAGQAAABkAAAAZQAAAHAAAABkAAAAcAAAAG8AAAACAAAAAwAAAA4AAAACAAAADgAAAA0AAAANAAAADgAAABkAAAANAAAAGQAAABgAAAAYAAAAGQAAACQAAAAYAAAAJAAAACMAAAAjAAAAJAAAAC8AAAAjAAAALwAAAC4AAAAuAAAALwAAADoAAAAuAAAAOgAAADkAAAA5AAAAOgAAAEUAAAA5AAAARQAAAEQAAABEAAAARQAAAFAAAABEAAAAUAAAAE8AAABPAAAAUAAAAFsAAABPAAAAWwAAAFoAAABaAAAAWwAAAGYAAABaAAAAZgAAAGUAAABlAAAAZgAAAHEAAABlAAAAcQAAAHAAAAADAAAABAAAAA8AAAADAAAADwAAAA4AAAAOAAAADwAAABoAAAAOAAAAGgAAABkAAAAZAAAAGgAAACUAAAAZAAAAJQAAACQAAAAkAAAAJQAAADAAAAAkAAAAMAAAAC8AAAAvAAAAMAAAADsAAAAvAAAAOwAAADoAAAA6AAAAOwAAAEYAAAA6AAAARgAAAEUAAABFAAAARgAAAFEAAABFAAAAUQAAAFAAAABQAAAAUQAAAFwAAABQAAAAXAAAAFsAAABbAAAAXAAAAGcAAABbAAAAZwAAAGYAAABmAAAAZwAAAHIAAABmAAAAcgAAAHEAAAAEAAAABQAAABAAAAAEAAAAEAAAAA8AAAAPAAAAEAAAABsAAAAPAAAAGwAAABoAAAAaAAAAGwAAACYAAAAaAAAAJgAAACUAAAAlAAAAJgAAADEAAAAlAAAAMQAAADAAAAAwAAAAMQAAADwAAAAwAAAAPAAAADsAAAA7AAAAPAAAAEcAAAA7AAAARwAAAEYAAABGAAAARwAAAFIAAABGAAAAUgAAAFEAAABRAAAAUgAAAF0AAABRAAAAXQAAAFwAAABcAAAAXQAAAGgAAABcAAAAaAAAAGcAAABnAAAAaAAAAHMAAABnAAAAcwAAAHIAAAAFAAAABgAAABEAAAAFAAAAEQAAABAAAAAQAAAAEQAAABwAAAAQAAAAHAAAABsAAAAbAAAAHAAAACcAAAAbAAAAJwAAACYAAAAmAAAAJwAAADIAAAAmAAAAMgAAADEAAAAxAAAAMgAAAD0AAAAxAAAAPQAAADwAAAA8AAAAPQAAAEgAAAA8AAAASAAAAEcAAABHAAAASAAAAFMAAABHAAAAUwAAAFIAAABSAAAAUwAAAF4AAABSAAAAXgAAAF0AAABdAAAAXgAAAGkAAABdAAAAaQAAAGgAAABoAAAAaQAAAHQAAABoAAAAdAAAAHMAAAAGAAAABwAAABIAAAAGAAAAEgAAABEAAAARAAAAEgAAAB0AAAARAAAAHQAAABwAAAAcAAAAHQAAACgAAAAcAAAAKAAAACcAAAAnAAAAKAAAADMAAAAnAAAAMwAAADIAAAAyAAAAMwAAAD4AAAAyAAAAPgAAAD0AAAA9AAAAPgAAAEkAAAA9AAAASQAAAEgAAABIAAAASQAAAFQAAABIAAAAVAAAAFMAAABTAAAAVAAAAF8AAABTAAAAXwAAAF4AAABeAAAAXwAAAGoAAABeAAAAagAAAGkAAABpAAAAagAAAHUAAABpAAAAdQAAAHQAAAAHAAAACAAAABMAAAAHAAAAEwAAABIAAAASAAAAEwAAAB4AAAASAAAAHgAAAB0AAAAdAAAAHgAAACkAAAAdAAAAKQAAACgAAAAoAAAAKQAAADQAAAAoAAAANAAAADMAAAAzAAAANAAAAD8AAAAzAAAAPwAAAD4AAAA+AAAAPwAAAEoAAAA+AAAASgAAAEkAAABJAAAASgAAAFUAAABJAAAAVQAAAFQAAABUAAAAVQAAAGAAAABUAAAAYAAAAF8AAABfAAAAYAAAAGsAAABfAAAAawAAAGoAAABqAAAAawAAAHYAAABqAAAAdgAAAHUAAAAIAAAACQAAABQAAAAIAAAAFAAAABMAAAATAAAAFAAAAB8AAAATAAAAHwAAAB4AAAAeAAAAHwAAACoAAAAeAAAAKgAAACkAAAApAAAAKgAAADUAAAApAAAANQAAADQAAAA0AAAANQAAAEAAAAA0AAAAQAAAAD8AAAA/AAAAQAAAAEsAAAA/AAAASwAAAEoAAABKAAAASwAAAFYAAABKAAAAVgAAAFUAAABVAAAAVgAAAGEAAABVAAAAYQAAAGAAAABgAAAAYQAAAGwAAABgAAAAbAAAAGsAAABrAAAAbAAAAHcAAABrAAAAdwAAAHYAAAAJAAAACgAAABUAAAAJAAAAFQAAABQAAAAUAAAAFQAAACAAAAAUAAAAIAAAAB8AAAAfAAAAIAAAACsAAAAfAAAAKwAAACoAAAAqAAAAKwAAADYAAAAqAAAANgAAADUAAAA1AAAANgAAAEEAAAA1AAAAQQAAAEAAAABAAAAAQQAAAEwAAABAAAAATAAAAEsAAABLAAAATAAAAFcAAABLAAAAVwAAAFYAAABWAAAAVwAAAGIAAABWAAAAYgAAAGEAAABhAAAAYgAAAG0AAABhAAAAbQAAAGwAAABsAAAAbQAAAHgAAABsAAAAeAAAAHcAAACmOTE0MTI3xwllkqY5MTQxMjfCpjkxNjI5OMceZZKmOTE2Mjk4gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6Y5MTY0MDfHD2WSpjkxNjQwN5Kkbm9uZZCmOTE2MTUyxx5lkqY5MTYxNTKCq3R5cGVfbGVuZ3RoAaRmbGF0xwAXpjkxNjA1NccNZZKmOTE2MDU1yj+AAACmOTEzODc0xwllkqY5MTM4NzTDpjkxNDIzOccJZZKmOTE0MjM5w6Y5MTU5MjXHF2WSpjkxNTkyNccMF+0F0b7tBdG+7QVRP6Y5MTU5MjLHGmWSpjkxNTkyMtgVAAAAAAAAAABYAgAAwgEAAKY5MTYwMTTHDGWSpjkxNjAxNJOgkACmOTE1OTcwxwxlkqY5MTU5NzCToJAApjkxNTkyOMcNZZKmOTE1OTI4yj3MzM2mOTE1ODg0xwllkqY5MTU4ODTCpjkxNjMyNMctZZKmOTE2MzI0gqt0eXBlX2xlbmd0aAKkZmxhdNgXAAASRAAAGkIAABJEAEDZQ6Y5MTI4NTDHCWWSpjkxMjg1MMOmOTE2MTQ1xyNlkqY5MTYxNDXHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAACmOTE1OTc1xx5lkqY5MTU5NzWCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXpjkxNDk0MccJZZKmOTE0OTQxwqY5MTM4NzPHCWWSpjkxMzg3M8KmOTE2MDIxxw1lkqY5MTYwMjHKP4AAAKY5MTM0OTnHCWWSpjkxMzQ5OcKmOTE2MDUzxw9lkqY5MTYwNTOSpG5vbmWQpjkxNjI1M8cPZZKmOTE2MjUzkqRub25lkKY5MTY0MzfHDGWSpjkxNjQzN5OgkACmOTE1ODAxxwllkqY5MTU4MDHDpjkxNTkzM8eoZZKmOTE1OTMzlMdAF/MENb/sBdG+O80TPwAAAADzBDU/7AXRvjvNEz8AAAAAAAAAAOwFUT87zRM/AAAAAAAAAABA83k/tjMrwgAAgD/HQBfoDmhAAAAAAAAAAAAAAAAAAAAAAHmCGkAAAAAAAAAAAAAAAAAAAAAARHmNvwAAgL8AAAAAAAAAAPux3MAAAAAA1xcAgINDAIDFQ8cMFzbgyEE24MhBNk+/QaY5MTM0MjDHCWWSpjkxMzQyMMOmOTE2MzI1xw9lkqY5MTYzMjWSpG5vbmWQpjkxNDc4MccJZZKmOTE0Nzgxw6Y5MTYwMTnHD2WSpjkxNjAxOZKkbm9uZZCmOTE1ODY0xwllkqY5MTU4NjTDpjkxNjA1MscMZZKmOTE2MDUyk6CQAKY5MTM5NDLHCWWSpjkxMzk0MsKmOTE0NjAwxw1lkqY5MTQ2MDCkZGF0YaY5MTU5MjPHGmWSpjkxNTkyM9gVEAAAACcAAAAHAQAAiwEAAKY5MTYwNznHI2WSpjkxNjA3OccYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAAKY5MTYxMDnHD2WSpjkxNjEwOZKkbm9uZZCmOTE1OTMx2GWSpjkxNTkzMacjRkZGRkZGpjkxNjI1NsctZZKmOTE2MjU2gqt0eXBlX2xlbmd0aAKkZmxhdNgXAICgQwAAGkIAgKBDAEDZQ6Y5MTM3MzLHF2WSpjkxMzczMscMFwfh6b4kGyG/E/Qgv6Y5MTQyNDDHCWWSpjkxNDI0MMOmOTE0NzM5xwllkqY5MTQ3MznDpjkxNTEzOMcJZZKmOTE1MTM4wqY5MTYzMDnHD2WSpjkxNjMwOZKkbm9uZZCmOTE2MTA0x25lkqY5MTYxMDSCq3R5cGVfbGVuZ3RoAqRmbGF0x1AXmjm0QwAAGkKaObRDAAAGQmaGzkMAABpCZobOQwAABkI00+hDAAAaQjTT6EMAAAZCAJABRAAAGkIAkAFEAAAGQma2DkQAABpCZrYORAAABkKmOTEzOTQwxwllkqY5MTM5NDDDpjkxNjIwNMduZZKmOTE2MjA0gqt0eXBlX2xlbmd0aAKkZmxhdMdQFwBAoEMAgMRCAMCdQwCAxEIAQKBDAEAxQwDAnUMAQDFDAECgQwAggEMAwJ1DACCAQwBAoEMAoKdDAMCdQwCgp0MAQKBDACDPQwDAnUMAIM9DpjkxNjA4OMduZZKmOTE2MDg4gqt0eXBlX2xlbmd0aAKkZmxhdMdQF5o5tEMAABxCmjm0QwAA2UNmhs5DAAAcQmaGzkMAANlDNNPoQwAAHEI00+hDAADZQwCQAUQAABxCAJABRAAA2UNmtg5EAAAcQma2DkQAANlDpjkxNjI1MMceZZKmOTE2MjUwgqt0eXBlX2xlbmd0aAKkZmxhdMcAF6Y5MTYxOTTHDGWSpjkxNjE5NJOgkACmOTE1NzA3xwllkqY5MTU3MDfCpjkxMjg1NMcXZZKmOTEyODU0xwwXB+HpviQbIb8T9CC/pjkxNjAxOMdeZZKmOTE2MDE4gqt0eXBlX2xlbmd0aAKkZmxhdMdAFwAAgL8AAIC/AAAwQQAAgL8AADBBAACAvwAAMEEAADBBAAAwQQAAMEEAAIC/AAAwQQAAgL8AADBBAACAvwAAgL+mOTE1OTgzxw9lkqY5MTU5ODOSpG5vbmWQpjkxNjAyNMcaZZKmOTE2MDI02BVBAQAAJwAAAAcBAACLAQAApjkxNTg4NccJZZKmOTE1ODg1wqY5MTYzMTbHbmWSpjkxNjMxNoKrdHlwZV9sZW5ndGgCpGZsYXTHUBcAABJEAABrQgDAEkQAAGtCAAASRADACUMAwBJEAMAJQwAAEkQAwFhDAMASRADAWEMAABJEAOCTQwDAEkQA4JNDAAASRABgu0MAwBJEAGC7Q6Y5MTU4ODPHCWWSpjkxNTg4M8OmOTE2MjU3xw9lkqY5MTYyNTeSpG5vbmWQpjkxMzAxNccJZZKmOTEzMDE1wqY5MTYzNjjHHmWSpjkxNjM2OIKrdHlwZV9sZW5ndGgBpGZsYXTHABemOTE1MzM3xwllkqY5MTUzMzfCpjkxNTU3NccNZZKmOTE1NTc1pGRhdGGmOTEzMTY3xwllkqY5MTMxNjfDpjkxMjk0NMcJZZKmOTEyOTQ0w6Y5MTYzMTPHD2WSpjkxNjMxM5Kkbm9uZZCmOTE1OTY5xyNlkqY5MTU5NjnHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAACmOTE2MTUwxx5lkqY5MTYxNTCCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXpjkxMjk0M8cJZZKmOTEyOTQzwqY5MTYwMjPHGmWSpjkxNjAyM9gVAAAAAAAAAABYAgAAwgEAAKY5MTQ1OTbHCWWSpjkxNDU5NsKmOTE1OTI5xw1lkqY5MTU5MjnKQoMJraY5MTYzNjfHHmWSpjkxNjM2N4KrdHlwZV9sZW5ndGgEpGZsYXTHABemOTE1NTE2xwllkqY5MTU1MTbDpjkxNjQwNccjZZKmOTE2NDA1xxgWAAAAAAEAAAADAAAAAAAAAAMAAAACAAAApjkxNjE5M8cjZZKmOTE2MTkzxxgWAAAAAAEAAAADAAAAAAAAAAMAAAACAAAApjkxNjA4NMdeZZKmOTE2MDg0gqt0eXBlX2xlbmd0aAKkZmxhdMdAFwCAoEMAABxCAAASRAAAHEIAABJEAAAcQgAAEkQAANlDAAASRAAA2UMAgKBDAADZQwCAoEMAANlDAICgQwAAHEKmOTE1OTc3xw9lkqY5MTU5NzeSpG5vbmWQpjkxMjc1N8cJZZKmOTEyNzU3w6Y5MTU3MTLHDWWSpjkxNTcxMqRkYXRhpjkxNTkyMccaZZKmOTE1OTIx2BUAAAAAAAAAAFgCAADCAQAApjkxNDM5OccJZZKmOTE0Mzk5wqY5MTQ0MTLHDWWSpjkxNDQxMqRkYXRhpjkxNjM2MscMZZKmOTE2MzYyk6CQAKY5MTYwOTfHD2WSpjkxNjA5N5Kkbm9uZZCmOTE2Mjk1xw9lkqY5MTYyOTWSpG5vbmWQpjkxNjAyN8eoZZKmOTE2MDI3lMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD/HQBfNzEw+AAAAAAAAAAAAAAAAAAAAAM3MTD4AAAAAAAAAAAAAAAAAAAAAF7fRuAAAAADNzIy/zcyMvwAAAIAAAIA/1xcAgINDAIDFQ8cMFwAAgD8AAIA/AACAP6Y5MTYwOTPHD2WSpjkxNjA5M5Kkbm9uZZCmOTE2MTAwx25lkqY5MTYxMDCCq3R5cGVfbGVuZ3RoAqRmbGF0x1AXAICgQwAAa0IAABJEAABrQgCAoEMAwAlDAAASRADACUMAgKBDAMBYQwAAEkQAwFhDAICgQwDgk0MAABJEAOCTQwCAoEMAYLtDAAASRABgu0OmOTE2MDU02GWSpjkxNjA1NKcjRkZGRkZGpjkxNTE1MccNZZKmOTE1MTUxpGRhdGGmOTE0NTk1xwllkqY5MTQ1OTXCpjkxNDYwOMcNZZKmOTE0NjA4pGRhdGGmOTE2MDEzx5tlkqY5MTYwMTPHkBYAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAEAAAABgAAAAcAAAAIAAAACQAAAAoAAAAIAAAACgAAAAsAAAAMAAAADQAAAA4AAAAMAAAADgAAAA8AAAAQAAAAEQAAABIAAAAQAAAAEgAAABMAAAAUAAAAFQAAABYAAAAUAAAAFgAAABcAAACmOTE2Mjk5xx5lkqY5MTYyOTmCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXpjkxNjE1M8cPZZKmOTE2MTUzkqRub25lkKY5MTY0MzjHD2WSpjkxNjQzOJKkbm9uZZCmOTEzNDkyxwllkqY5MTM0OTLCpjkxNTkyN8cNZZKmOTE1OTI3ykI0AACmOTE1ODY1xwllkqY5MTU4NjXCpjkxNjEwNccPZZKmOTE2MTA1kqRub25lkKY5MTYwMjXYZZKmOTE2MDI1pyNGRkZGRkamOTEzOTQ2xw1lkqY5MTM5NDakZGF0YaY5MTQ0ODnHCWWSpjkxNDQ4OcOmOTE0MjMzxwllkqY5MTQyMzPDpjkxNjE5NccPZZKmOTE2MTk1kqRub25lkKY5MTU4ODnHDWWSpjkxNTg4OaRkYXRhpjkxNjA1NseoZZKmOTE2MDU2lMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD/HQBcOdFo7AAAAAAAAAAAAAAAAAAAAALSikTsAAAAAAAAAAAAAAAAAAAAAF7fRuAAAAAAAAIC/AACAvwAAAIAAAIA/1xcAABZEAADhQ8cMFwAAgD8AAIA/AACAP6Y5MTYxNTfHD2WSpjkxNjE1N5Kkbm9uZZCjc3VigqdwYXlsb2FkyQAWLuxmk4azMjM1NjEyMTQ2MzAwNDU3NTcxNdVooTG0MTc5NDg4OTc1MTQyNjk0NTMzOTPHB2imOTE2NDQzsjg5NzIwMjQ4NzIxOTczMzQxMscHaKY5MTY0NDKzODM2Njk4NDkyMjY5ODU0NjUxNIylcGxvdHOQr2JhY2tncm91bmRjb2xvcscHaKY5MTY0Mzm1Y2FtZXJhX3JlbGF0aXZlX2xpZ2h0w6hjaGlsZHJlbpKMpXBsb3RzkK9iYWNrZ3JvdW5kY29sb3LHB2imOTE2MDIwtWNhbWVyYV9yZWxhdGl2ZV9saWdodMOoY2hpbGRyZW6RjKVwbG90c5XeABCsdHJhbnNwYXJlbmN5xwdopjkxMzIzN6VzcGFjZccHaKY5MTMyMjisdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAC/AAAAvwAAAD8AAAC/AAAAvwAAAD8AAAA/AAAAP6RuYW1luXRleHQtMTMzODIyOTU5ODUyMjg5MDE0MTCpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABSrcHhfcGVyX3VuaXTKP4AAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+qY29sb3JyYW5nZcKpYmlsbGJvYXJkwqhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAK1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXZmbmPmZm5j5mZuY+qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK1kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZadsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwCAg0MAgMVDpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLCq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAACoY29sb3JtYXDCp3Zpc2libGXHB2imOTEzMTY3q21hcmtlcnNwYWNlxwdopjkxMzI0MLFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5MTU5NzCob3ZlcmRyYXfHB2imOTEzMjI0r3VuaWZvcm1fdXBkYXRlcscHaKY5MTU5NzGlZmFjZXPHB2imOTE1OTY5pHV1aWS0MTMzODIyOTU5ODUyMjg5MDE0MTCtdmVydGV4X3NvdXJjZdocOQpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKXsKICAgIHZlYzIgYmJveF9zaWduZWRfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsgLy8gbm90ZTsgY29tcG9uZW50cyBtYXkgYmUgbmVnYXRpdmUuCiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9zaWduZWRfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIG1hdDQgdHJhbnMgPSBnZXRfdHJhbnNmb3JtX21hcmtlcigpID8gbW9kZWwgOiBtYXQ0KDEuMCk7CgogICAgLy8gQ29tcHV0ZSBjZW50cmUgb2YgYmlsbGJvYXJkIGluIGNsaXBwaW5nIGNvb3JkaW5hdGVzCiAgICAvLyBBbHdheXMgdHJhbnNmb3JtIHRleHQvc2NhdHRlciBwb3NpdGlvbiBhcmd1bWVudAogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICAvLyBtYXliZSB0cmFuc2Zvcm0gbWFya2VyX29mZnNldCArIGdseXBoIG9mZnNldHMKICAgIGRhdGFfcG9pbnQgPSB2ZWM0KGRhdGFfcG9pbnQueHl6IC8gZGF0YV9wb2ludC53ICsgbWF0Myh0cmFucykgKiB0b3ZlYzMoZ2V0X21hcmtlcl9vZmZzZXQoKSksIDEpOwogICAgZGF0YV9wb2ludCA9IHB2aWV3ICogZGF0YV9wb2ludDsKCiAgICAvLyBDb21wdXRlIHRyYW5zZm9ybSBmb3IgdGhlIG9mZnNldCB2ZWN0b3JzIGZyb20gdGhlIGNlbnRyYWwgcG9pbnQKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwoKICAgIHZlYzQgdmNsaXAgPSBkYXRhX3BvaW50ICsgc3ByaXRlX2NlbnRlcjsKCiAgICAvLyBFeHRyYSBidWZmZXJpbmcgaXMgcmVxdWlyZWQgYXJvdW5kIHNwcml0ZXMgd2hpY2ggYXJlIGFudGlhbGlhc2VkIHNvIHRoYXQKICAgIC8vIHRoZSBhbnRpYWxpYXMgYmx1ciBkb2Vzbid0IGdldCBjdXQgb2ZmIChzZWUgIzE1KS4gVGhpcyBibHVyIGZhbGxzIHRvCiAgICAvLyB6ZXJvIGF0IGEgcmFkaXVzIG9mIEFOVElBTElBU19SQURJVVMgcGl4ZWxzIGluIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlcwogICAgLy8gYW5kIHdlIHdhbnQgdG8gYnVmZmVyIHRoZSB2ZXJ0aWNlcyBpbiB0aGUgKnNvdXJjZSogc3ByaXRlIGNvb3JkaW5hdGUKICAgIC8vIHN5c3RlbSBzbyB0aGF0IHdlIGdldCB0aGlzIGFtb3VudCBpbiB0aGUgb3V0cHV0IGNvb3JkaW5hdGVzLgogICAgLy8KICAgIC8vIEhlcmUgd2UgY2FsY3VsYXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBtYXBwaW5nIGZyb20gc3ByaXRlIHh5CiAgICAvLyBjb29yZGluYXRlcyAoZGVmaW5lZCBieSBgdHJhbnNgKSBpbnRvIHRoZSB2aWV3cG9ydCBwaXhlbCBjb29yZGluYXRlcy4KICAgIC8vIFRoZSBkZXJpdmF0aXZlIG5lZWRzIHRvIGluY2x1ZGUgdGhlIHByb3BlciB0ZXJtIGZvciB0aGUgcGVyc3BlY3RpdmUKICAgIC8vIGRpdmlkZSBpbnRvIE5EQywgZXZhbHVhdGVkIGF0IHRoZSBjZW50cmUgcG9pbnQgYHZjbGlwYC4KICAgIG1hdDQgZF9uZGNfZF9jbGlwID0gbWF0NCgKICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwKICAgICAgICAtdmNsaXAueHl6Lyh2Y2xpcC53KnZjbGlwLncpLCAgICAgICAgICAwLjAKICAgICk7CiAgICBtYXQyIGR4eXZfZHh5cyA9IGRpYWdtKDAuNSAqIHB4X3Blcl91bml0ICogZ2V0X3Jlc29sdXRpb24oKSkgKiBtYXQyKGRfbmRjX2RfY2xpcCp0cmFucyk7CiAgICAvLyBOb3csIG91ciBidWZmZXIgc2l6ZSBpcyBleHByZXNzZWQgaW4gdmlld3BvcnQgcGl4ZWxzIGJ1dCB3ZSBnZXQgYmFjayB0bwogICAgLy8gdGhlIHNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSB1c2luZyB0aGUgc2NhbGUgZmFjdG9yIG9mIHRoZQogICAgLy8gdHJhbnNmb3JtYXRpb24gKGZvciBpc290cm9waWMgdHJhbnNmb3JtYXRpb25zKS4gRm9yIGFuaXNvdHJvcGljCiAgICAvLyB0cmFuc2Zvcm1hdGlvbnMsIHRoZSBnZW9tZXRyaWMgbWVhbiBvZiB0aGUgdHdvIHByaW5jaXBsZSBzY2FsZSBmYWN0b3JzCiAgICAvLyBpcyBhIHJlYXNvbmFibGUgY29tcHJvbWlzZToKICAgIGZsb2F0IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlID0gc3FydChhYnMoX2RldGVybWluYW50KGR4eXZfZHh5cykpKTsKCiAgICAvLyBJbiB0aGUgZnJhZ21lbnQgc2hhZGVyIHdlIHdhbnQgb3VyIHNpZ25lZCBkaXN0YW5jZSBpbiB2aWV3cG9ydCAocGl4ZWwpCiAgICAvLyBjb29yZHMgZm9yIGRpcmVjdCB1c2UgaW4gYW50aWFsaWFzaW5nIHN0ZXAgZnVuY3Rpb25zLiBXZSB0aGVyZWZvcmUgbmVlZAogICAgLy8gYSBzY2FsaW5nIGZhY3RvciBzaW1pbGFyIHRvIHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlLCBidXQgaW5jbHVkaW5nCiAgICAvLyB0aGUgdXYtPnNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSBzY2FsaW5nIGZhY3RvciBhcyB3ZWxsLiAgV2UgY2hvb3NlIHRvCiAgICAvLyB1c2UgdGhlIGJvdW5kaW5nIGJveCAqeCogd2lkdGggZm9yIHRoaXMuIFRoaXMgY29tZXMgd2l0aCBzb21lCiAgICAvLyBjb25zaXN0ZW5jeSBjb25kaXRpb25zOgogICAgLy8gKiBGb3IgcHJvY2VkdXJhbCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdGhlIHNwcml0ZSBib3VuZGluZyBib3ggdG8gYmUKICAgIC8vICAgc3F1YXJlLiAoSWYgbm90LCB0aGUgdXYgY29vcmRpbmF0ZXMgd2lsbCBiZSBhbmlzb3Ryb3BpY2FsbHkgc2NhbGVkIGFuZAogICAgLy8gICBhbnkgY2FsY3VsYXRpb24gYmFzZWQgb24gdGhlbSB3aWxsIG5vdCBiZSBhIGRpc3RhbmNlIGZ1bmN0aW9uLikKICAgIC8vICogRm9yIHNhbXBsZWQgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRvIGNvbnNpc3RlbnRseSBjaG9vc2UgdGhlICp4KgogICAgLy8gICBmb3IgdGhlIHNjYWxpbmcgaW4gZ2V0X2Rpc3RhbmNlZmllbGRfc2NhbGUoKS4KICAgIGZsb2F0IHNwcml0ZV9mcm9tX3Vfc2NhbGUgPSBhYnMoZ2V0X21hcmtlcnNpemUoKS54KTsKICAgIGZyYWdfdXZzY2FsZSA9IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlICogc3ByaXRlX2Zyb21fdV9zY2FsZTsKICAgIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSA9IGRpc3RhbmNlZmllbGRfc2NhbGUoKTsKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191diA9IGdldF91digpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBzY3JlZW4gc3BhY2UgY29vcmRpbmF0ZXMgb2YgdGhlIHBvc2l0aW9uCiAgICB2ZWM0IHF1YWRfdmVydGV4ID0gKHRyYW5zICogdmVjNCgyLjAgKiBiYm94X3NpZ25lZF9yYWRpdXMgKiBnZXRfcG9zaXRpb24oKSwgMC4wLCAwLjApKTsKICAgIGdsX1Bvc2l0aW9uID0gdmNsaXAgKyBxdWFkX3ZlcnRleDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hP4CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgppbiB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgZnJhZ191djsKCiNkZWZpbmUgQ0lSQ0xFICAgICAgICAgICAgMAojZGVmaW5lIFJFQ1RBTkdMRSAgICAgICAgIDEKI2RlZmluZSBST1VOREVEX1JFQ1RBTkdMRSAyCiNkZWZpbmUgRElTVEFOQ0VGSUVMRCAgICAgMwojZGVmaW5lIFRSSUFOR0xFICAgICAgICAgIDQKCiNkZWZpbmUgTV9TUVJUXzIgICAgICAgICAgMS40MTQyMTM1CgoKLy8gSGFsZiB3aWR0aCBvZiBhbnRpYWxpYXNpbmcgc21vb3Roc3RlcAojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44Ci8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzLiBDb252ZXJ0IHRvIHNhbWUgZGlzdGFuY2UKICAgIC8vIHNjYWxpbmcgYXMgZl91di54IGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBwcm9jZWR1cmFsIHNpZ25lZF9kaXN0YW5jZQogICAgLy8gY2FsY3VsYXRpb25zLgogICAgcmV0dXJuIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSAqIHRleHR1cmUoZGlzdGFuY2VmaWVsZCwgdXYpLnI7Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGJvb2wgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICByZXR1cm4gMC4wOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewoKICAgIGludCBzaGFwZSA9IGdldF9zaGFwZV90eXBlKCk7CiAgICBmbG9hdCBzaWduZWRfZGlzdGFuY2UgPSAwLjA7CiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CiAgICBpZihzaGFwZSA9PSBDSVJDTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gY2lyY2xlKGZyYWdfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBESVNUQU5DRUZJRUxEKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKDAuMCwgc2lnbmVkX2Rpc3RhbmNlKTsKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMgBUBcW+0u+sZ1vvnzyML5nZma+FvtLvrGdb76qglG+Z2ZmvnzyML5nZma+YeVQvrOdb75h5VC+s51vvnzyML5nZma+FvtLvrGdb746I0q+Z2ZmvnzyML5nZma+YeVQvrOdb74wuye+Z2Zmvhb7S76xnW++fPIwvmdmZr4W+0u+sZ1vvh/5g75xPYq+FvtLvrGdb7588jC+Z2Zmvhb7S76xnW++qoJRvmdmZr588jC+Z2ZmvmHlUL6znW++YeVQvrOdb7588jC+Z2Zmvhb7S76xnW++OiNKvmdmZr588jC+Z2ZmvmHlUL6znW++MLsnvmdmZr4W+0u+sZ1vvnzyML5nZma+FvtLvrGdb74B3oK+gZravhb7S76xnW++qoJRvmdmZr5iMlW+Z2Zmvhb7S76xnW++zqpPvrGdb74wuye+Z2Zmvhb7S76xnW++1J99vnE9ir6qbWFya2Vyc2l6ZYKrdHlwZV9sZW5ndGgCpGZsYXTIAVAXbHg6PwpoYj+mLAM/piwDP2x4Oj8KaGI/m3c8PzgaYD+mLAM/piwDP+2ePD84GmA/7Z48PzgaYD+mLAM/piwDP2x4Oj8KaGI/pAE8P2TMXT+mLAM/piwDP+2ePD84GmA//tQYPzgaYD9seDo/CmhiP6YsAz+mLAM/bHg6PwpoYj85Sl4/3dJqP2x4Oj8KaGI/piwDP6YsAz9seDo/CmhiP5t3PD84GmA/piwDP6YsAz/tnjw/OBpgP+2ePD84GmA/piwDP6YsAz9seDo/CmhiP6QBPD9kzF0/piwDP6YsAz/tnjw/OBpgP/7UGD84GmA/bHg6PwpoYj+mLAM/piwDP2x4Oj8KaGI/mKheP7KAiT9seDo/CmhiP5t3PD84GmA/bsU+PzgaYD9aZDs/CmhiP0hQPD8KaGI//tQYPzgaYD9seDo/CmhiP6XCWD/d0mo/rW1hcmtlcl9vZmZzZXSCq3R5cGVfbGVuZ3RoA6RmbGF0yAH4F+XyXz7m8l+yAAAAAObyXz6ezao+AAAAAOfyXz42GgA/AAAAAOXyXz7m8l+yAAAAAObyXz6ezao+AAAAAOfyXz42GgA/AAAAAOXyXz7m8l+yAAAAAObyXz6ezao+AAAAAOfyXz42GgA/AAAAAOXyXz7m8l+yAAAAAObyXz6ezao+AAAAAOfyXz42GgA/AAAAAOXyXz7m8l+yAAAAAObyXz6ezao+AAAAAOjyXz6ezSo/AAAAAOjyXz4GgVU/AAAAAIlehj6KXoayAAAAAAaBVT/r8l8+AAAAADYaAD/p8l8+AAAAAJ3Nqj7o8l8+AAAAAAaBVT/r8l8+AAAAADYaAD/p8l8+AAAAAJ3Nqj7o8l8+AAAAAAaBVT/r8l8+AAAAADYaAD/p8l8+AAAAAJ3Nqj7o8l8+AAAAAAaBVT/r8l8+AAAAADYaAD/p8l8+AAAAAJ3Nqj7o8l8+AAAAAOtzlT/t8l8+AAAAAAaBVT/r8l8+AAAAADcaAD/p8l8+AAAAAJ3Nqj7o8l8+AAAAAOtRuD6LXoY+AAAAAJ3Nqj7m8l+y5/Jfvp3Nqj7m8l+y5/Jfvp3Nqj7m8l+y5/Jfvp3Nqj7m8l+y5/Jfvp3Nqj7m8l+y5/Jfvp7NKj/m8l+y6fJfvp3Nqj7m8l+y5/JfvupRuD6KXoayil6GvqVjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTIAqAXAAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAAAAAAAAAAAAAAAAgD8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAAAAAAAAAAAAAAACAPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAA/AAAAPwAAAD+amRk/AAAAPwAAAD8AAAA/mpkZPwAAAD8AAAA/AAAAP5qZGT8AAAAAAAAAAAAAAAAAAIA/r3V2X29mZnNldF93aWR0aIKrdHlwZV9sZW5ndGgEpGZsYXTIAqAXAMCUPgDA1z4AQKg+AEDvPgCAMD4A4Bo/AIBLPgCgIT8AwJQ+AMDXPgBAqD4AQO8+AMCUPgDA7z4AQKg+AGADPwCAMD4A4Bo/AIBLPgCgIT8AwJQ+AGAbPwBAqD4A4CY/AMCUPgBgGz8AQKg+AOAmPwCAMD4A4Bo/AIBLPgCgIT8AwJQ+AMDXPgBAqD4AQO8+AMCUPgAgMz8AQKg+AKA+PwCAMD4A4Bo/AIBLPgCgIT8AwJQ+AGAbPwBAqD4A4CY/AIAwPgAgDz8AgE8+AKAaPwDAlD4AwNc+AECoPgBA7z4AgDA+AOAaPwCASz4AoCE/AMCUPgDA1z4AQKg+AEDvPgAgDD8AgGw+AKAVPwBAij4AwJQ+AMDXPgBAqD4AQO8+AIAwPgDgGj8AgEs+AKAhPwDAlD4AwNc+AECoPgBA7z4AwJQ+AMDvPgBAqD4AYAM/AIAwPgDgGj8AgEs+AKAhPwDAlD4AYBs/AECoPgDgJj8AwJQ+AGAbPwBAqD4A4CY/AIAwPgDgGj8AgEs+AKAhPwDAlD4AwNc+AECoPgBA7z4AwJQ+ACAzPwBAqD4AoD4/AIAwPgDgGj8AgEs+AKAhPwDAlD4AYBs/AECoPgDgJj8AgDA+ACAPPwCATz4AoBo/AMCUPgDA1z4AQKg+AEDvPgCAMD4A4Bo/AIBLPgCgIT8AwJQ+AMDXPgBAqD4AQO8+AOAVPwCAbD4AYB8/AMCNPgDAlD4AwNc+AECoPgBA7z4AwJQ+AMDvPgBAqD4AYAM/AMCUPgCgDz8AQKg+ACAbPwDAlD4AICc/AECoPgDgMj8AwJQ+AOA+PwBAqD4AoEo/AIAwPgAgDz8AgE8+AKAaPwDAlD4AwNc+AECoPgBA7z4AoB8/AIBsPgDgKD8AQIo+o3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTIAfgXAAAAAKwcSkEAAIC/AAAAAKwcSkEAAIC/AAAAAKwcSkEAAIC///8fQKwcSkEAAIC///8fQKwcSkEAAIC///8fQKwcSkEAAIC/AACgQKwcSkEAAIC/AACgQKwcSkEAAIC/AACgQKwcSkEAAIC/AADwQKwcSkEAAIC/AADwQKwcSkEAAIC/AADwQKwcSkEAAIC/AAAgQawcSkEAAIC/AAAgQawcSkEAAIC/AAAgQawcSkEAAIC/AAAgQawcSkEAAIC/MzMzQKK0Y0EAAIC/rBxKQQAAAAAAAIC/rBxKQQAAAAAAAIC/rBxKQQAAAAAAAIC/rBxKQf//H0AAAIC/rBxKQf//H0AAAIC/rBxKQf//H0AAAIC/rBxKQQAAoEAAAIC/rBxKQQAAoEAAAIC/rBxKQQAAoEAAAIC/rBxKQQAA8EAAAIC/rBxKQQAA8EAAAIC/rBxKQQAA8EAAAIC/rBxKQQAAIEEAAIC/rBxKQQAAIEEAAIC/rBxKQQAAIEEAAIC/rBxKQQAAIEEAAIC/orRjQTMzM0AAAIC/rBxKQc3MDMAAAAAArBxKQc3MDMAAAABArBxKQc3MDMAAAIBArBxKQc3MDMAAAMBArBxKQc3MDMAAAABBrBxKQc3MDMAAACBBrBxKQc3MDMAAACBB/7JbQc3MDMAAAIBAqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTIAqAXAAAAgAAAAIDzBDW/8wQ1vwAAAIAAAACA8wQ1v/MENb8AAACAAAAAgPMENb/zBDW/AAAAgAAAAIDzBDW/8wQ1vwAAAIAAAACA8wQ1v/MENb8AAACAAAAAgPMENb/zBDW/AAAAgAAAAIDzBDW/8wQ1vwAAAIAAAACA8wQ1v/MENb8AAACAAAAAgPMENb/zBDW/AAAAgAAAAIDzBDW/8wQ1vwAAAIAAAACA8wQ1v/MENb8AAACAAAAAgPMENb/zBDW/AAAAgAAAAIDzBDW/8wQ1vwAAAIAAAACA8wQ1v/MENb8AAACAAAAAgPMENb/zBDW/AAAAgAAAAIDzBDW/8wQ1vwAAAIAAAACA8wQ1v/MENb8AAAAAAAAAAAAAgD8uvTuzAAAAAAAAAAAAAIA/Lr07swAAAAAAAAAAAACAPy69O7MAAAAAAAAAAAAAgD8uvTuzAAAAAAAAAAAAAIA/Lr07swAAAAAAAAAAAACAPy69O7MAAAAAAAAAAAAAgD8uvTuzAAAAAAAAAAAAAIA/Lr07swAAAAAAAAAAAACAPy69O7MAAAAAAAAAAAAAgD8uvTuzAAAAAAAAAAAAAIA/Lr07swAAAAAAAAAAAACAPy69O7MAAAAAAAAAAAAAgD8uvTuzAAAAAAAAAAAAAIA/Lr07swAAAAAAAAAAAACAPy69O7MAAAAAAAAAAAAAgD8uvTuzAAAAAAAAAAAAAIA/Lr07s2PABDPzBDU/8wQ1P2PABLNjwAQz8wQ1P/MENT9jwASzY8AEM/MENT/zBDU/Y8AEs2PABDPzBDU/8wQ1P2PABLNjwAQz8wQ1P/MENT9jwASzY8AEM/MENT/zBDU/Y8AEs2PABDPzBDU/8wQ1P2PABLNjwAQz8wQ1P/MENT9jwASziKd2aXNpYmxlxwdopjkxMzQyMKRuYW1l2SFsaW5lc2VnbWVudHMtMTI2MTE2ODMxNDkzNjgwNDMzNzeqYXR0cmlidXRlc4OlY29sb3LHB2imOTE1OTc1qWxpbmVwb2ludMcHaKY5MTU5NzSpbGluZXdpZHRoxwdopjkxNTk3NqR1dWlktDEyNjExNjgzMTQ5MzY4MDQzMzc3qWNhbV9zcGFjZaVwaXhlbKlwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTU5NzeodW5pZm9ybXOHp3BpY2tpbmfCpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAqW9iamVjdF9pZAGnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACIp3Zpc2libGXHB2imOTEzMTY3pG5hbWXZIGxpbmVzZWdtZW50cy04MzQwOTMzMzYzNzgwMjQzMTU5qmF0dHJpYnV0ZXODpWNvbG9yxwdopjkxNTk4MalsaW5lcG9pbnTHB2imOTE1OTgwqWxpbmV3aWR0aMcHaKY5MTU5ODKkdXVpZLM4MzQwOTMzMzYzNzgwMjQzMTU5qWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjkxNTk4M6h1bmlmb3Jtc4encGlja2luZ8KlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACpb2JqZWN0X2lkAadsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAI6sdHJhbnNwYXJlbmN5xwdopjkxMzQ5OaVzcGFjZccHaKY5MTM0OTasdmVydGV4YXJyYXlzgahwb3NpdGlvboKrdHlwZV9sZW5ndGgDpGZsYXTIASAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAgD8AAIA/AAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAACAPwAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAACAPwAAgD8AAAAAAACAPwAAAAAAAAAAAACAPwAAgD8AAIA/AAAAAAAAgD8AAIA/AAAAAAAAAAAAAIA/AACAPwAAAAAAAIA/AACAPwAAgD8AAIA/AACAPwAAAAAAAIA/AACAPwAAAAAAAAAAAACAPwAAgD8AAAAAAACAPwAAgD8AAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/pG5hbWW7dm9sdW1lLTE4MjM1MzAyMjE2Njc5MTAxOTM0qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAXpW1vZGVsx0AXAAAgQQAAAAAAAAAAAAAAAAAAAAAAACBBAAAAAAAAAAAAAAAAAAAAAAAAIEEAAAAAAAAAAAAAAAAAAAAAAACAP6dkaWZmdXNlxwwXAACAPwAAgD8AAIA/qmNvbG9ycmFuZ2XXF3WhcTkKyn8/p2xvd2NsaXDYF8C0iD4Ttp87FamoPgAAAACoaGlnaGNsaXDYF4BFfj/o+Wc/9WMTPgAAAACqdm9sdW1lZGF0YYuqYW5pc290cm9weco/gAAApXdyYXBSs0NsYW1wVG9FZGdlV3JhcHBpbmekZGF0YcgPoBdQ7xg/JNQ6PxUJzD7HdV4/8KIFP7CRRD86AgA/+KROP6hiJT/StTE/0ANVP8ndUj9gET4+cT1QP4AmHz8A0d8+yoWWPm6eij6rug4/7UghPu9qDz89igo/ISLiPtWITT9fW6s++dZCP9NXoj5RuDc+G+3RPjZibj9qsic/sbAIP4wnpz42Lgc+JNHXPnC2vD5QiUo/OVfvPu5CDT+P52U+92luP6KIEz9ez28/LmamPVjjUT9uXyY/WHF3P0c/Az8g/IQ+qwnZPWinSj8PqB4/l9/NPQbYez+TNow9XmrMPWHOiz5QmtQ9DWjHPjCn6T6LGFI/WDGLPnpjvD5n7zU/9Y0xPsAobD9XKA8/W2oUPwoaZD7Q+Q0/MzQuP97U0z6RSC8/0livPbTvaj8t/0Y+el++Pr3pXz+xjtU+JBouPyZBQj/GQmU/wAVXP4+N0D1XbdE+q0IkP6QLzT4Q1Fw+TmPSPqopbD8T2TI/fdQTPug5JD+WZ5w9hFAoPiMvAz/4JrE+d9goPxSGez++wWY/B4A2Pipxaz8eslo/O/QjP9srRT5W0z8/LRa5PjChmj5U0XQ+F0VSP21YLT/qVJs9W7NTP0DB9z3GxDk/Y5QOPin16D0hhFA/8ieBPYANdT9z8Pw+l9kxPwcKYj9JWWk/pXLPPoHQzD3H4Gc/xmIlPhaXJD96OdQ+2PcDP+PRdT/ElBo/BTxuPu3fjz511wY/GvknPg6PDz17yyk/ZcUyPzAQhj3RQVo+yfPzPq7oOz8pBHQ/ak9GP8JesT7QK5g+MPAuP/+05j5pbGM8y05gP0JtZj8wyFg/vSYrP69KBj8mJAU/u5prPykOAj5n/tI8v0psPw0a0z2aVx4/CJHuPbV8tj42upg83DElPZovEz8qqW4/cE7dPTbS7j20aBI/46QpPXRA4j7BHn4/rlE0PriOiz6+rQg/SVI3P/+W5z4o3i0/GNUpP8fpcz/bSIg+6y92P05/oz5tsok85kAEP3c8Vj5agyQ/dR6/PUnScT8rRPk+oSQhP+jYEz/zYMk9qdomP27Gaj+QM3E/UD0OPuSqYD/GNm0/brUHP4i4Tj1HQog+2pVpPzjmfj8bcww/De8nP5MYKj8V0GE+5pvqPqXaND9wgGE/zlhePcl34jxE1yE/Csp/P99XaD9f5V0/p+APP9enWj93WAU9wqphPtpWmj4AwQI+T6AzPzR/uT5WG2o/x/qJPnEVXj8D5oI+GgkaP9O2ZT4K7B0/c927PqPSUzyhxFA/zaDOPp3N1j751sg+Z/AwP6QrHj/fmRY/dvRzP4qLNT8leSs/rXqjPUBbEz5DlEA/4M5rP9itoz5UuUM/C0CwPsw6OT/Tj4E+z51pP0LBOz8OtrQ+8UpnPy5sPj/t3W09z5tQPyNxHz/Rbv8+unZiP70uXj93kXY/TYXvPpPSDT9Mxac+dBQKP7ShTj2WhxI/9JdZPjENmjx+MoY+80roPgGMrj7d0xM+4GbIPqrYTz81GR08bt7ePmHIWD8sxUM/6BpEPx1k5T0Er9Y+r5ehPtLecj+CcxM+NyNaP0SlLD8AMPk+qJ8NP6uExj45l0M/LtEOP33c6D5tow8/JrF/P9Zrbz9GkkU/YnjyPcqKrT5+eyo/pSQgP/5MWz8BZFQ/gxmpPqPI+T7hoGw+ZnAKP/tzdT8lNzI+NkyjOuyyAj+zLHg98vdiPbcqET9I+3k/vXNJPxbZbz+6ai0/5OhWPWhonj4Zln0/K/h9P6NeCj6sMn4/cxHQPri5TD65x40+7aSzPkmXZD7zl6Y+6m2cPou2Qj+bYg8/ylhfP74s4j7MelM/M7dWPoW4JD5vpS4/xxweP8wCNj9Jmcc9r7pdP+9ICj9ziSQ/Mjk+P8/ZPj7SrTE+SDJiP3s4CD9S/fU8+KmkPv7V/D7Lq00/KdlaP9Xtdj1Ovw8/D99jP0nu2DwyNGM98/gXP6ITzz5gvH8/usZUP1PcYT8craw+DulfP/gHJD4IpO89ZL7jPuyHMz/ZfwY+sQVXP/rdFT4WcgQ/7cMoPxyDID+5/Sk/N3NPPkQ4Lj16Ri0/op4GPw4AfT8Uwmg+FCCVPiqwKD+zv6I9oblHP2u0Zz4fjkg/z1JnPh5iQD+AUlk/SRc8Po15fD5BC4c+Tt4LPwjldT+bmhg/7qcMP1NtHz8uDzk/Ap1hP1frsj40WC4/Hp15P3yMQj8W+kg+waJzP3sFFj8svfU+VRhBP0DrDD+VySE//gTiPZ+lez9v+g8/vTUCP6sAQT1xRkk/969bP63WXT9BDQk+X7sxP243Pj8UIAQ/iNQ8P6bCMj+Jx/4+rD0OP1a+zT0f2OI+G6GrPvz0ND7LW3s//2f6Pnc1Xz+5IpA+JPb7PnhyKz/Ua8s9kqwHP4Vk5z5TouQ+jDzQPiT5XD03Jxs/yTPFPv7VNj425IU9Fp7GPlqpGj+wPMY+VkapPlck4D5CE00/ok54P+h3Qj+c5b09vDJYP2PoDj+tqcs96zt5P5xjnj6F5gg+3vFhP5hdjD6tuio+/PiEPvwQgzsTuiw+R7BHPwYSmj5B1Bc/dPkfP8WBdj99nwc/CFC/PQRZVT7yEiY/YsTRPYe2Mz+e1hQ/P2SoO2j/ADv8Bl4/OrK3Phb1AD+GkZE+RkTcPdh3UT+HtM4+/A9CPo6FeD95Yzo/ZEqNPotnQz+gxhI/UWsjP1yd/T60Tbs9GsEzP55ZST3Zjvc+Rn5pOs76YD+Ut4o+TQVhPVYDaT/G0mg/MOIUPh7bVT9j4Cc/1lMdPlHPcD/dLHQ/frJlPzuv7D1VhkM/GaT9PrBdvT5e7C4/uVgBPi6RVD/FdE4+iGr7PgchQz86XFk/CCp8P05Lnz4MUEs/QnIrPx7MJj95T2Y/3U5LPrn3PT9nsGU+/j/dPvzQyD1iFVk/C4g1P8cswz5RLQw/6scBPxe2UD9uDXA/PP1kP4sV4D5epWI/72JBPzP1ID3VI8U9dwGOPow9/T4l3y0/HyrAPT/+Mz0Ulg09/V1jP+jAjj3amfM+6SuNPkqy1j5fMmk+r6TxPqJ1Dz9s8AQ/VKU3P2tGnj3McJI+EMCePSb3gz7Qrwo/+IdJP5c9nT4fgUc/b0FJP5HcCj8YELs+zCBTP3Ke+j2tpdI+70tcPp0jSD7O4pc+D4AjP7lzPz83D4A+V7ImP38oZj9QKlQ/tggCP9x6hD63p60+uv0IP8hnpj7LYWI/EQxdP6vd5z1FqzI/vdgAPp/OHT9NDXs/6nhLP0e6Fz92W2A/jz9FPwJyHT5YCYk96E1FPrby1DyhV+c+pCSBPdcpYD86xdU8+qKyPmWP9z6rvjQ/P30fP3FAzz5MtHA/andDP9ew/T7kfAg/RZjbPvX5dj7m1X0+BCUrP6tw/j6kGmE/WSRxP5Rb8D7dtj8/lU5rP+velD7YTzU/keDqPctwGT7ugSE/R8lEPwwcJz+mu18/8Q41Pxgp6D6x/3g+mwK7PlZMhT5Z/gM+3j99P55tBj9z2jw/3o8tP+1GHj9z1H094a1wP90fjj6fKts9vRPWPnAgXT/BleM+yGBjPqnkWj7/Cgg+KT+yPTSvYz8Om14/k0vGPoSoxj2awXA/2vpFPkmvZD8wSzY+YBBtP0rmQD+Ti5s+tClRPtluQD/Shyk/LgmjPmMZ8j6JaQM/xbZuPwFnBT9/fD49t1AyP4lQlT6ANcI9k+FSP2qcID9N9YI+9eJYP8AsUD9NNBw/Ym4MPzETZT4wbyk/ORLKPoc0fz/xfE4/DW9CPzgTlz1oA7c+uyO+PD9DZz++onc+CFejPvXJMj/FDPg+ffa3Pt9rRD/CS0Y/RulbPpQtXD5DR5A+x5PAPuCKPz0QUdE+kIZxPoPLWD+7tdk9JFqXPtPOdT47hmY/SZ26O70kkzyNW8Q+7SyjPctKTT0i6ao+fttlPRl0VD+e93A9IP+BPc6MwD7UON0+NIJYP7ZuyD7Bh4o+daFxObHdUz4sSiQ/iVouPxPAQD2bLTo9jqgmPwD+dT+8zWA/uk6YPjdOPT9SGRA/2qrZPoTRvz6PejE/hyYCPX894z70KDI/G/IxPkh9vD3sg24/0lZFP2J8QD+kM/E+fnGuPmifrD69vAY/qClXPnACUD69X2g/XDiDPp6tTj/dU5499yZ5P9mTBT9xCeY+HJSNPRnzrT53nBU/8FYIPUOTID9NbSs/fgYRP8YjKz+SAmE/UkPTPj9/5j7Jc2k/jIBhP+QIMj+9YB4/90JDP3QnwD6TYyU9OEkDP/9QQT//D1Y/xE4cP90lbT8mX3A/EKNdPlrXVj/X2wU/kiZ2P0JmeD9NFDI/laBCP81B7D4WPTM+yXdfPkKHPD+scFI/Lm5ePiEqcT+Q67k+J7IzPzR1DD4UDkI/jYdvP+Jpgj604gM/7OtvPwx8Qj83kzs/jDZ4Px4+NT9Z0Hw/nEXRPmDePT9nsoc+skSTPnm9OD7Vh2g/QdZXP4/Laz9b8Cs/aptPPlsMPj5f+5U+QJ9tPIc7aj+b1iQ/HI1HPpxOzz5VBXE/FLo5P9OuIT6/23Y/dvckP5+sWz09LVg+zOhvPf+7AD/voUQ/+DxjP0HUOT8GZGk+KyIkPkjdEz8H+7g8D7NrPyyruT40B2c/NHJ0P6rIKj9P++U9hvhqPk0paz/lLWk/GGEpP6aLST6Yoro9z50LP83/cT+AkQI/b/vKPgbpET/H+oQ+0OgTPQjIWT+ZRXQ/CnpCPynbVj/rFEs+ifl2P0X2vj6Lh5w7sPpIP+r9sT5RySM+dNThPkk5cj6gkSg+KitLPworNT6ZlMs9rxbTPARtRj/IFzg/x9MsP2OaEj8kgA49XQE5O+ot5jwhaRw/RHGVPkDs5D0AGxs/VKTnPuZ99T6TnRg/H/t2P6ICBj8FpmY+vIXfPsSAUz6cr7Y+I3DwPgZZlT5xZr0+GHD1PoP8cz9f2Fg/tx+KPj8hEz/mUjk/CVBfP8xIDT3QqPQ+uYV1P51k1j46KYE+GRc1P/geeD04/AU/9tSSPqbsXj4mVWU/sXaGPvFgcD1zy10/FW2+PcW1+T496v8+MpPuPPN8eD+TIU8/Nj0uPkIXYD8b0R8+374jPWh+WD+qxDU/ENqAPskH6zx1HAA/Jj1DP5hrpD5HXwM/pWV5P4Thgj1GllE+giy6PuD19j7Ie+I+3ddUP1NFPz9Nd6w++QG6PtTDtT7r3/g+wWysPtrqDz/XGsU9K7VcP/LbXj8WKs4+pSAoPxkCDz+OKIo9cuVEP9amED/2zSs/AawtP7JKbz9yoFE/6+0uP6XIuj6yCls/b7QkP5MVAz+t9zg/9KJMPxyQFj+XMR0/qW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKpbWFnRmlsdGVyrExpbmVhckZpbHRlcqV3cmFwU7NDbGFtcFRvRWRnZVdyYXBwaW5nrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZccMFQoAAAAKAAAACgAAAKV3cmFwVLNDbGFtcFRvRWRnZVdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZaluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACnYW1iaWVudMcMF2Zm5j5mZuY+ZmbmPqtleWVwb3NpdGlvbscMFwAAgD8AAIA/AACAP6hzcGVjdWxhcscMF83MTD7NzEw+zcxMPqdwaWNraW5nwqhtb2RlbGludsdAF83MzD0AAAAAAAAAAAAAAAAAAAAAzczMPQAAAAAAAAAAAAAAAAAAAADNzMw9AAAAAAAAAAAAAAAAAAAAAAAAgD+pYWxnb3JpdGhtB69saWdodF9kaXJlY3Rpb27HDBcAAIA/AACAPwAAgD+pb2JqZWN0X2lkAKhpc29yYW5nZco9TMzNq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/qmFic29ycHRpb27KP4AAAKtkZXB0aF9zaGlmdMoAAAAApWNvbG9ywqlzaGluaW5lc3PKQgAAAKhpc292YWx1Zco/AAAAqGNvbG9ybWFwialtaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKP4AAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTs0NsYW1wVG9FZGdlV3JhcHBpbmekZGF0YcgPoBfAtIg+E7afOxWpqD4AAAAArH6JPqZZHzziz6s+AAAAALM+ij5z0HM8b+6uPgAAAAC09Io+j7GmPG0Esj4AAAAAyqCLPvcY1jxgEbU+AAAAAL5CjD45GQQ9cBW4PgAAAADJ2ow+XW4ePeYPuz4AAAAAxmiNPvksOT3cAL4+AAAAAKDsjT5I7lI9FOjAPgAAAABxZo4+tN9rPf3Ewz4AAAAALNaOPtkUgj2Sl8Y+AAAAAKE7jz4u9Y09ml/JPgAAAADslo8+8puZPb4czD4AAAAAAeiPPv8SpT3Zzs4+AAAAANQukD6BYbA9snXRPgAAAABva5A+FY27PfUQ1D4AAAAAyp2QPiibxj1woNY+AAAAAO3FkD62j9E99yPZPgAAAADf45A+rm3cPV6b2z4AAAAAqveQPkY45z1YBt4+AAAAADgBkT5+8fE9wmTgPgAAAACbAJE+SJv8PXi24j4AAAAA5fWQPqubAz5C++Q+AAAAACjhkD5l4wg+/zLnPgAAAABjwpA+iCUOPpxd6T4AAAAAq5mQPkliEz70eus+AAAAADlnkD4Kmhg+44rtPgAAAAD9KpA+S80dPkWN7z4AAAAAIOWPPib8Ij4kgvE+AAAAAMiVjz7KJig+dmnzPgAAAAAPPY8+H00tPhVD9T4AAAAAFtuOPkFvMj4PD/c+AAAAAANwjj52jTc+Vc34PgAAAAAU/I0+aac8Pvp9+j4AAAAAkX+NPi29QT4gIfw+AAAAAG36jD7SzkY+s7b9PgAAAAD4bIw+WNxLPsg+/z4AAAAAY9eLPkflUD7SXAA/AACAPxA6iz7I6VU+lxMBPwAAgD8qlYo+pOlaPtPDAT8AAIA/1uiJPtTkXz6obQI/AACAPzg1iT4W22Q+ChEDPwAAgD/oeog+V8xpPieuAz8AAIA/EbqHPlG4bj71RAQ/AACAP8vyhj4Nn3M+x9UEPwAAgD+iJYY+UYB4PpRgBT8AAIA/vVKFPk5cfT6d5QU/AACAP4V6hD4+GYE+92QGPwAAAABInYM+WoGDPsneBj8AAAAAZbuCPqrmhT4/Uwc/AAAAAAjVgT71SIg+Y8IHPwAAAAB+6oA+OqiKPm0sCD8AAAAAS/h/PnkEjT6IkQg/AAAAAIoUfj6qXY8+0PEIPwAAAADRKnw+p7ORPndNCT8AAAAAajt6PngGlD6mpAk/AAAAAMlGeD5EVpY+gPcJPwAAAACvTXY+0aKYPiZGCj8AAAAAkVB0PjTsmj7RkAo/AAAAAAtQcj58Mp0+m9cKPwAAAAACTXA+oXWfPrgaCz8AAAAABUhuPom1oT5IWgs/AAAAAGFBbD5J8qM+eJYLPwAAAACjOWo+8SumPm7PCz8AAAAAWDFoPpNiqD5OBQw/AAAAAPIoZj4wlqo+MjgMPwAAAAD7IGQ+x8asPj9oDD8AAAAA4hliPmz0rj6hlQw/AAAAAA4UYD4vH7E+fMAMPwAAAADyD14++UazPt7oDD8AAAAA8Q1cPgNstT72Dg0/AAAAAFMOWj5Yjrc+5jINPwAAAACQEVg+7q25PsFUDT8AAAAABhhWPt3Kuz60dA0/AAAAAPwhVD4y5b0+y5INPwAAAAC7L1I+BP2/PhWvDT8AAAAAG0FQPl4Swj6yyQ0/AAAAALpWTj53JcQ+t+INPwAAAACEcEw+QTbGPkb6DT8AAAAAa45KPtNEyD5iEA4/AACAPy6xSD4yUco+HSUOPwAAgD9j2EY+flvMPpg4Dj8AAIA/PwRFPttjzj7XSg4/AACAP8Y0Qz5NatA+2VsOPwAAgD9YakE+6m7SPrprDj8AAIA/U6Q/Pr5x1D6Eeg4/AACAP/niPT7wctY+RYgOPwAAgD9FJjw+m3LYPv+UDj8AAIA/7m06Pqhw2j6yoA4/AAAAAMq5OD5Wbdw+b6sOPwAAAAAwCjc+o2jePjq1Dj8AAAAAbl41Pp5i4D4Yvg4/AAAAAJS2Mz54W+I+98UOPwAAAACoEjI+J1PkPu3MDj8AAAAACXIwPtVJ5j7x0g4/AAAAAMnULj51P+g+BtgOPwAAAADdOi0+KDTqPh/cDj8AAAAAx6MrPgko7D5H3w4/AAAAAIUPKj4jG+4+aOEOPwAAAACjfSg+jA3wPoHiDj8AAAAAEO4mPkb/8T6T4g4/AAAAAJ5gJT5t8PM+jeEOPwAAAADS1CM+DOH1Pl3fDj8AAAAArEoiPizR9z762w4/AAAAACzCID70wPk+Y9cOPwAAAAALOx8+U7D7Po/RDj8AAAAABLUdPluf/T5jyg4/AAAAADwwHD4cjv8+z8EOPwAAAACsrBo+Vr4AP9O3Dj8AAAAAYCoZPoG1AT9YrA4/AAAAAHOpFz6frAI/Xp8OPwAAAADmKRY+p6MDP8WQDj8AAAAA56sUPqOaBD91gA4/AAAAAF8vEz6fkQU/YW4OPwAAAADMtBE+m4gGP3daDj8AAAAAnzwQPop/Bz+mRA4/AAAAACHHDj6Bdgg/2ywOPwAAAADQVA0+fW0JP/YSDj8AAAAAduYLPodkCj/x9g0/AAAAAF59Cj6GWws/ydgNPwAAAACIGQk+oFIMP1W4DT8AAIA/HrwHPq9JDT96lQ0/AACAPwpmBj7cQA4/KXANPwAAgD/lGAU+CzgPP19IDT8AAIA/VtUDPjsvED/YHQ0/AACAP6qdAj57JhE/rPAMPwAAgD/ccgE+vB0SP5fADD8AAIA/glcAPgwVEz++jQw/AACAP5iZ/j1ODBQ/4lcMPwAAgD9zqfw9ngMVPwwfDD8AAIA/AeP6Pd/6FT8M4ws/AAAAAHJK+T0g8hY/36MLPwAAAAA05fc9XekXP2VhCz8AAAAA/bf2PYngGD+UGws/AAAAAE/I9T2j1xk/S9IKPwAAAAA3G/U9qM4aP5iFCj8AAAAAx7X0PYrFGz9INQo/AAAAAIad9D1NvBw/QuEJPwAAAABY2PQ99LIdP4KJCT8AAAAAumr1PWupHj/1LQk/AAAAABla9j2znx8/ic4IPwAAAAC6q/c9vJUgPzFrCD8AAAAAIWT5PZCLIT/bAwg/AAAAAEmH+z0ggSI/ZpgHPwAAAABVGf49YHYjP9EoBz8AAAAAho4APklrJD8NtQY/AAAAAMNKAj7aXyU//TwGPwAAAACmQgQ+CVQmP5rABT8AAAAAAncGPtBHJz/ZPwU/AAAAAGboCD4hOyg/qboEPwAAAAARlws++y0pP/cwBD8AAAAALoMOPksgKj+9ogM/AAAAAH+sET4TEis/5A8DPwAAAABzEhU+SAMsP2p4Aj8AAAAAq7QYPtTzLD9L3AE/AAAAABuSHD684y0/ZzsBPwAAAAC9qSA++dIuP8CVAD8AAAAAvvokPnnBLz+F1v8+AAAAAKCDKT43rzA/43f+PgAAAAAkQy4+JpwxP2sP/T4AAAAAKzgzPkKIMj8rnfs+AAAAAORgOD5uczM/0iD6PgAAAABIvD0+s100P4ua+D4AAIA/h0hDPgNHNT9ACvc+AACAP6sEST5dLzY/zW/1PgAAgD/S7k4+oBY3PzDL8z4AAIA/0QVVPsr8Nz9pHPI+AACAP4BJWz7T4Tg/OWPwPgAAgD9wt2E+ocU5P3ef7j4AAIA/PE5oPlGoOj9n0ew+AACAP8gMbz6liTs/BPnqPgAAgD/x8XU+umk8PxQW6T4AAAAAmPx8PnxIPT/RKOc+AAAAAM8Vgj7PJT4/GDHlPgAAAAD4voU+vAE/P8ou4z4AAAAAYnmJPifcPz/hIeE+AAAAALREjT4OtUA/SQrfPgAAAABfIJE+aoxBPxzo3D4AAAAA5wuVPiBiQj9cu9o+AAAAAPkGmT4vNkM/B4TYPgAAAAApEZ0+kwhEPx5C1j4AAAAAJCqhPjrZRD+g9dM+AAAAAJ5RpT4XqEU/gp7RPgAAAAAyh6k+HXVGP548zz4AAAAAq8qtPj5ARz/9z8w+AAAAALQbsj50CUg/yFjKPgAAAADvebY+rdBIP/7Wxz4AAAAABeW6PuiVST+QSsU+AAAAAL9cvz4SWUo/n7PCPgAAAADl4MM+JhpLPykSwD4AAAAAH3HIPhbZSz8iZr0+AAAAADgNzT7dlUw/qq+6PgAAAAAMtdE+ZFBNP5futz4AAAAAY2jWPp8ITj/4IrU+AAAAAN4m2z6Mvk4//0yyPgAAAAA+8N8+InJPP7hsrz4AAAAASMTkPlcjUD88gqw+AAAAALWi6T4j0lA/lI2pPgAAAAA8i+4+b35RP/aOpj4AAAAArn3zPkkoUj8+hqM+AAAAAOt5+D6Uz1I/rnOgPgAAAAB3f/0+Q3RTP3lXnT4AAAAAHEcBP2MWVD+JMZo+AAAAAPjSAz/qtVQ/MgKXPgAAgD8uYwY/xlJVP2TJkz4AAIA/l/cIP/PsVT9ah5A+AACAPwGQCz9ihFY/nTyNPgAAgD9WLA4/IxlXPzjpiT4AAIA/bMwQPy6rVz+cjYY+AACAPw9wEz9wOlg/8ymDPgAAgD8cFxY/5MZYP0h9fz4AAIA/UcEYP6lQWT/ymHg+AACAP5duGz+u11k/UadxPgAAgD+4Hh4/9FtaPwOqaj4AAAAAcdEgP33dWj8zomM+AAAAAKeGIz9XXFs/bJFcPgAAAAAIPiY/hdhbP9J5VT4AAAAAbvcoPwRSXD9UXU4+AAAAAJ2yKz/eyFw/rj5HPgAAAABTby4/LT1dP7QgQD4AAAAAVC0xP/KuXT/5Bjk+AAAAAFnsMz83Hl4/M/UxPgAAAAAlrDY/FIteP0DwKj4AAAAAgmw5P5f1Xj+//SM+AAAAABwtPD/VXV8/7yMdPgAAAACr7T4/3cNfP3RqFj4AAAAA561BP9MnYD8K2g8+AAAAAJFtRD/KiWA//nwJPgAAAABaLEc/1OlgP89eAz4AAAAA9+lJPx5IYT+YGfs9AAAAACqmTD+4pGE/jCzwPQAAAACaYE8/wf9hP8AX5j0AAAAACRlSP2NZYj9L/9w9AAAAAD/PVD+5sWI/5AnVPQAAAADrglc/6AhjP3Vezj0AAAAAxjNaPxRfYz/eIsk9AAAAAJHhXD9htGM/MnnFPQAAAAAcjF8/8whkPwJ9wz0AAAAAKDNiP+1cZD83QsM9AAAAAInWZD9osGQ/4dHEPQAAAAD/dWc/nANlPz0qyD0AAAAAXxFqP5tWZT+/Ps09AAAAAD6obD+5qWU/kfrTPQAAAACSOm8/7/xlPwlA3D0AAAAAW8hxP3JQZj9I7uU9AAAAAH9RdD9NpGY/xeHwPQAAAADX1XY/rvhmP3b4/D0AAAAAUFV5P61NZz/SBwU+AAAAANnPez9Zo2c/hQQMPgAAAACARX4/6PlnP/VjEz4AAAAArHRocmVlX2Zvcm1hdKpSR0JBRm9ybWF0pHNpemXWFfoAAACkdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlp3Zpc2libGXHB2imOTEzNDkwsWF0dHJpYnV0ZV91cGRhdGVyxwdopjkxNjAxNKhvdmVyZHJhd8cHaKY5MTM0OTKvdW5pZm9ybV91cGRhdGVyxwdopjkxNjAxNaVmYWNlc8cHaKY5MTYwMTOkdXVpZLQxODIzNTMwMjIxNjY3OTEwMTkzNK12ZXJ0ZXhfc291cmNl2gc0CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMzIHBvc2l0aW9uOwp2ZWMzIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gZmxvYXQgYWJzb3JwdGlvbjsKZmxvYXQgZ2V0X2Fic29ycHRpb24oKXtyZXR1cm4gYWJzb3JwdGlvbjt9CnVuaWZvcm0gc2FtcGxlcjJEIGNvbG9ybWFwOwp1bmlmb3JtIGZsb2F0IGlzb3ZhbHVlOwpmbG9hdCBnZXRfaXNvdmFsdWUoKXtyZXR1cm4gaXNvdmFsdWU7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWMzIGV5ZXBvc2l0aW9uOwp2ZWMzIGdldF9leWVwb3NpdGlvbigpe3JldHVybiBleWVwb3NpdGlvbjt9CnVuaWZvcm0gZmxvYXQgaXNvcmFuZ2U7CmZsb2F0IGdldF9pc29yYW5nZSgpe3JldHVybiBpc29yYW5nZTt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMzIHNwZWN1bGFyOwp2ZWMzIGdldF9zcGVjdWxhcigpe3JldHVybiBzcGVjdWxhcjt9CnVuaWZvcm0gbWF0NCBtb2RlbGludjsKbWF0NCBnZXRfbW9kZWxpbnYoKXtyZXR1cm4gbW9kZWxpbnY7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gdWludCBhbGdvcml0aG07CnVpbnQgZ2V0X2FsZ29yaXRobSgpe3JldHVybiBhbGdvcml0aG07fQp1bmlmb3JtIHZlYzMgYW1iaWVudDsKdmVjMyBnZXRfYW1iaWVudCgpe3JldHVybiBhbWJpZW50O30KdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzOwpmbG9hdCBnZXRfc2hpbmluZXNzKCl7cmV0dXJuIHNoaW5pbmVzczt9CnVuaWZvcm0gc2FtcGxlcjNEIHZvbHVtZWRhdGE7CnVuaWZvcm0gdmVjMyBsaWdodF9jb2xvcjsKdmVjMyBnZXRfbGlnaHRfY29sb3IoKXtyZXR1cm4gbGlnaHRfY29sb3I7fQp1bmlmb3JtIHZlYzIgY29sb3JyYW5nZTsKdmVjMiBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBib29sIGNvbG9yOwpib29sIGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIHZlYzMgbGlnaHRfZGlyZWN0aW9uOwp2ZWMzIGdldF9saWdodF9kaXJlY3Rpb24oKXtyZXR1cm4gbGlnaHRfZGlyZWN0aW9uO30KCgoKb3V0IHZlYzMgZnJhZ192ZXJ0OwoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb24sIHZpZXc7Cgp2b2lkIG1haW4oKQp7CiAgICBmcmFnX3ZlcnQgPSBwb3NpdGlvbjsKICAgIHZlYzQgd29ybGRfdmVydCA9IG1vZGVsICogdmVjNChwb3NpdGlvbiwgMSk7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb24gKiB2aWV3ICogd29ybGRfdmVydDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwp9CgqvZnJhZ21lbnRfc291cmNl2iM+CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gZmxvYXQgYWJzb3JwdGlvbjsKZmxvYXQgZ2V0X2Fic29ycHRpb24oKXtyZXR1cm4gYWJzb3JwdGlvbjt9CnVuaWZvcm0gc2FtcGxlcjJEIGNvbG9ybWFwOwp1bmlmb3JtIGZsb2F0IGlzb3ZhbHVlOwpmbG9hdCBnZXRfaXNvdmFsdWUoKXtyZXR1cm4gaXNvdmFsdWU7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWMzIGV5ZXBvc2l0aW9uOwp2ZWMzIGdldF9leWVwb3NpdGlvbigpe3JldHVybiBleWVwb3NpdGlvbjt9CnVuaWZvcm0gZmxvYXQgaXNvcmFuZ2U7CmZsb2F0IGdldF9pc29yYW5nZSgpe3JldHVybiBpc29yYW5nZTt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMzIHNwZWN1bGFyOwp2ZWMzIGdldF9zcGVjdWxhcigpe3JldHVybiBzcGVjdWxhcjt9CnVuaWZvcm0gbWF0NCBtb2RlbGludjsKbWF0NCBnZXRfbW9kZWxpbnYoKXtyZXR1cm4gbW9kZWxpbnY7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gdWludCBhbGdvcml0aG07CnVpbnQgZ2V0X2FsZ29yaXRobSgpe3JldHVybiBhbGdvcml0aG07fQp1bmlmb3JtIHZlYzMgYW1iaWVudDsKdmVjMyBnZXRfYW1iaWVudCgpe3JldHVybiBhbWJpZW50O30KdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzOwpmbG9hdCBnZXRfc2hpbmluZXNzKCl7cmV0dXJuIHNoaW5pbmVzczt9CnVuaWZvcm0gc2FtcGxlcjNEIHZvbHVtZWRhdGE7CnVuaWZvcm0gdmVjMyBsaWdodF9jb2xvcjsKdmVjMyBnZXRfbGlnaHRfY29sb3IoKXtyZXR1cm4gbGlnaHRfY29sb3I7fQp1bmlmb3JtIHZlYzIgY29sb3JyYW5nZTsKdmVjMiBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBib29sIGNvbG9yOwpib29sIGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIHZlYzMgbGlnaHRfZGlyZWN0aW9uOwp2ZWMzIGdldF9saWdodF9kaXJlY3Rpb24oKXtyZXR1cm4gbGlnaHRfZGlyZWN0aW9uO30KCnN0cnVjdCBOb3RoaW5neyAvL05vdGhpbmcgdHlwZSwgdG8gZW5jb2RlIGlmIHNvbWUgdmFyaWFibGUgZG9lc24ndCBjb250YWluIGFueSBkYXRhCiAgICBib29sIF87IC8vZW1wdHkgc3RydWN0cyBhcmUgbm90IGFsbG93ZWQKfTsKaW4gdmVjMyBmcmFnX3ZlcnQ7Cgpjb25zdCBmbG9hdCBtYXhfZGlzdGFuY2UgPSAxLjM7Cgpjb25zdCBpbnQgbnVtX3NhbXBsZXMgPSAyMDA7CmNvbnN0IGZsb2F0IHN0ZXBfc2l6ZSA9IG1heF9kaXN0YW5jZSAvIGZsb2F0KG51bV9zYW1wbGVzKTsKCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0bykKewogICAgcmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTsKfQoKdmVjNCBjb2xvcl9sb29rdXAoZmxvYXQgaW50ZW5zaXR5LCBzYW1wbGVyMkQgY29sb3JfcmFtcCwgdmVjMiBub3JtKQp7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvcl9yYW1wLCB2ZWMyKF9ub3JtYWxpemUoaW50ZW5zaXR5LCBub3JtLngsIG5vcm0ueSksIDAuMCkpOwp9Cgp2ZWMzIGdlbm5vcm1hbCh2ZWMzIHV2dywgZmxvYXQgZCkKewogICAgdmVjMyBhLCBiOwogICAgLy8gaGFuZGxlIG5vcm1hbHMgYXQgZWRnZXMhCiAgICBpZih1dncueCArIGQgPj0gMS4wKXsKICAgICAgICByZXR1cm4gdmVjMygxLCAwLCAwKTsKICAgIH0KICAgIGlmKHV2dy55ICsgZCA+PSAxLjApewogICAgICAgIHJldHVybiB2ZWMzKDAsIDEsIDApOwogICAgfQogICAgaWYodXZ3LnogKyBkID49IDEuMCl7CiAgICAgICAgcmV0dXJuIHZlYzMoMCwgMCwgMSk7CiAgICB9CgogICAgaWYodXZ3LnggLSBkIDw9IDAuMCl7CiAgICAgICAgcmV0dXJuIHZlYzMoLTEsIDAsIDApOwogICAgfQogICAgaWYodXZ3LnkgLSBkIDw9IDAuMCl7CiAgICAgICAgcmV0dXJuIHZlYzMoMCwgLTEsIDApOwogICAgfQogICAgaWYodXZ3LnogLSBkIDw9IDAuMCl7CiAgICAgICAgcmV0dXJuIHZlYzMoMCwgMCwgLTEpOwogICAgfQoKICAgIGEueCA9IHRleHR1cmUodm9sdW1lZGF0YSwgdXZ3IC0gdmVjMyhkLDAuMCwwLjApKS5yOwogICAgYi54ID0gdGV4dHVyZSh2b2x1bWVkYXRhLCB1dncgKyB2ZWMzKGQsMC4wLDAuMCkpLnI7CgogICAgYS55ID0gdGV4dHVyZSh2b2x1bWVkYXRhLCB1dncgLSB2ZWMzKDAuMCxkLDAuMCkpLnI7CiAgICBiLnkgPSB0ZXh0dXJlKHZvbHVtZWRhdGEsIHV2dyArIHZlYzMoMC4wLGQsMC4wKSkucjsKCiAgICBhLnogPSB0ZXh0dXJlKHZvbHVtZWRhdGEsIHV2dyAtIHZlYzMoMC4wLDAuMCxkKSkucjsKICAgIGIueiA9IHRleHR1cmUodm9sdW1lZGF0YSwgdXZ3ICsgdmVjMygwLjAsMC4wLGQpKS5yOwogICAgcmV0dXJuIG5vcm1hbGl6ZShhLWIpOwp9CgovLyBTbW9vdGhlcyBvdXQgZWRnZSBhcm91bmQgMCBsaWdodCBpbnRlbnNpdHksIHNlZSBHTE1ha2llCmZsb2F0IHNtb290aF96ZXJvX21heChmbG9hdCB4KSB7CiAgICBjb25zdCBmbG9hdCBjID0gMC4wMDM5MDYyNSwgeHN3YXAgPSAwLjY0MDY3MDcxMjAxNTI3NTksIHlzd2FwID0gMC4yMDUwODM4MzkwMDE5MDk1NTsKICAgIGNvbnN0IGZsb2F0IHNoaWZ0ID0gMS4wICsgeHN3YXAgLSB5c3dhcDsKICAgIGZsb2F0IHBvdzggPSB4ICsgc2hpZnQ7CiAgICBwb3c4ID0gcG93OCAqIHBvdzg7IHBvdzggPSBwb3c4ICogcG93ODsgcG93OCA9IHBvdzggKiBwb3c4OwogICAgcmV0dXJuIHggPCB5c3dhcCA/IGMgKiBwb3c4IDogeDsKfQoKdmVjMyBibGlubnBob25nKHZlYzMgTiwgdmVjMyBWLCB2ZWMzIEwsIHZlYzMgY29sb3IpewogICAgLy8gVE9ETyB1c2UgYmFja2xpZ2h0IGhlcmUgdG9vPwogICAgZmxvYXQgZGlmZl9jb2VmZiA9IHNtb290aF96ZXJvX21heChkb3QoTCwgLU4pKSArIHNtb290aF96ZXJvX21heChkb3QoTCwgTikpOwogICAgLy8gc3BlY3VsYXIgY29lZmZpY2llbnQKICAgIHZlYzMgSCA9IG5vcm1hbGl6ZShMICsgVik7CiAgICBmbG9hdCBzcGVjX2NvZWZmID0gcG93KG1heChkb3QoSCwgLU4pLCAwLjApICsgbWF4KGRvdChILCBOKSwgMC4wKSwgc2hpbmluZXNzKTsKICAgIC8vIGZpbmFsIGxpZ2h0aW5nIG1vZGVsCiAgICByZXR1cm4gYW1iaWVudCAqIGNvbG9yICsgZ2V0X2xpZ2h0X2NvbG9yKCkgKiB2ZWMzKAogICAgICAgIGdldF9kaWZmdXNlKCkgKiBkaWZmX2NvZWZmICogY29sb3IgKwogICAgICAgIGdldF9zcGVjdWxhcigpICogc3BlY19jb2VmZgogICAgKTsKfQoKLy8gU2ltcGxlIHJhbmRvbSBnZW5lcmF0b3IgZm91bmQ6Ci8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDIwMDIyNC9yYW5kb20tbm9pc2UtZnVuY3Rpb25zLWZvci1nbHNsCmZsb2F0IHJhbmQoKXsKICAgIHJldHVybiBmcmFjdChzaW4oZ2xfRnJhZ0Nvb3JkLnggKiAxMi45ODk4ICsgZ2xfRnJhZ0Nvb3JkLnkgKiA3OC4yMzMpICogNDM3NTguNTQ1Myk7Cn0KCnZlYzQgdm9sdW1lKHZlYzMgZnJvbnQsIHZlYzMgZGlyKQp7CiAgICAvLyBUaGUgcGVyLXZveGVsIGFscGhhIGNoYW5uZWwgaXMgc3BlY2lmaWVkIGluIHVuaXRzIG9mIG9wYWNpdHkvbGVuZ3RoLgogICAgLy8gSWYgb3VyIHZveGVscyBhcmUgbm90IGlzb3Ryb3BpYywgdGhlbiB0aGUgZGlzdGFuY2UgdGhhdCB3ZSB0cmFjZSB0aHJvdWdoCiAgICAvLyBkZXBlbmRzIG9uIHRoZSBkaXJlY3Rpb24uCiAgICB2ZWMzICBwb3MgPSBmcm9udDsKICAgIGZsb2F0IFQgPSAxLjA7CiAgICB2ZWMzIExvID0gdmVjMygwLjApOwogICAgaW50IGkgPSAwOwogICAgZm9yIChpOyBpIDwgbnVtX3NhbXBsZXM7ICsraSkgewogICAgICAgIGZsb2F0IGludGVuc2l0eSA9IHRleHR1cmUodm9sdW1lZGF0YSwgcG9zKS54OwogICAgICAgIHZlYzQgZGVuc2l0eSA9IGNvbG9yX2xvb2t1cChpbnRlbnNpdHksIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgICAgICBmbG9hdCBvcGFjaXR5ID0gc3RlcF9zaXplICogZGVuc2l0eS5hICogYWJzb3JwdGlvbjsKICAgICAgICBUICo9IDEuMCAtIG9wYWNpdHk7CiAgICAgICAgaWYgKFQgPD0gMC4wMSkKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgIExvICs9IChUKm9wYWNpdHkpKmRlbnNpdHkucmdiOwogICAgICAgIHBvcyArPSBkaXI7CiAgICB9CiAgICByZXR1cm4gdmVjNChMbywgMS4wIC0gVCk7Cn0KCgp2ZWM0IHZvbHVtZXJnYmEodmVjMyBmcm9udCwgdmVjMyBkaXIpCnsKICAgIHZlYzMgIHBvcyA9IGZyb250OwogICAgZmxvYXQgVCA9IDEuMDsKICAgIHZlYzMgTG8gPSB2ZWMzKDAuMCk7CiAgICBpbnQgaSA9IDA7CiAgICBmb3IgKGk7IGkgPCBudW1fc2FtcGxlcyA7ICsraSkgewogICAgICAgIHZlYzQgZGVuc2l0eSA9IHRleHR1cmUodm9sdW1lZGF0YSwgcG9zKTsKICAgICAgICBmbG9hdCBvcGFjaXR5ID0gc3RlcF9zaXplICogZGVuc2l0eS5hOwogICAgICAgIFQgKj0gMS4wIC0gb3BhY2l0eTsKICAgICAgICBpZiAoVCA8PSAwLjAxKQogICAgICAgICAgICBicmVhazsKCiAgICAgICAgTG8gKz0gKFQqb3BhY2l0eSkqZGVuc2l0eS5yZ2I7CiAgICAgICAgcG9zICs9IGRpcjsKICAgIH0KICAgIHJldHVybiB2ZWM0KExvLCAxLjAgLSBUKTsKfQoKdmVjNCBjb250b3Vycyh2ZWMzIGZyb250LCB2ZWMzIGRpcikKewogICAgdmVjMyBwb3MgPSBmcm9udDsKICAgIGZsb2F0IFQgPSAxLjA7CiAgICB2ZWMzIExvID0gdmVjMygwLjApOwogICAgaW50IGkgPSAwOwogICAgdmVjMyBjYW1kaXIgPSBub3JtYWxpemUoZGlyKTsKICAgIGZvciAoaTsgaSA8IG51bV9zYW1wbGVzOyArK2kpIHsKICAgICAgICBmbG9hdCBpbnRlbnNpdHkgPSB0ZXh0dXJlKHZvbHVtZWRhdGEsIHBvcykueDsKICAgICAgICB2ZWM0IGRlbnNpdHkgPSBjb2xvcl9sb29rdXAoaW50ZW5zaXR5LCBjb2xvcm1hcCwgY29sb3JyYW5nZSk7CiAgICAgICAgZmxvYXQgb3BhY2l0eSA9IGRlbnNpdHkuYTsKICAgICAgICBpZihvcGFjaXR5ID4gMC4wKXsKICAgICAgICAgICAgdmVjMyBOID0gZ2Vubm9ybWFsKHBvcywgc3RlcF9zaXplKTsKICAgICAgICAgICAgdmVjMyBMID0gZ2V0X2xpZ2h0X2RpcmVjdGlvbigpOwogICAgICAgICAgICB2ZWMzIG9wYXF1ZSA9IGJsaW5ucGhvbmcoTiwgY2FtZGlyLCBMLCBkZW5zaXR5LnJnYik7CiAgICAgICAgICAgIExvICs9IChUICogb3BhY2l0eSkgKiBvcGFxdWU7CiAgICAgICAgICAgIFQgKj0gMS4wIC0gb3BhY2l0eTsKICAgICAgICAgICAgaWYgKFQgPD0gMC4wMSkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBwb3MgKz0gZGlyOwogICAgfQogICAgcmV0dXJuIHZlYzQoTG8sIDEuMCAtIFQpOwp9Cgp2ZWM0IGlzb3N1cmZhY2UodmVjMyBmcm9udCwgdmVjMyBkaXIpCnsKICAgIHZlYzMgcG9zID0gZnJvbnQ7CiAgICB2ZWM0IGMgPSB2ZWM0KDAuMCk7CiAgICBpbnQgaSA9IDA7CiAgICB2ZWM0IGRpZmZ1c2VfY29sb3IgPSBjb2xvcl9sb29rdXAoaXNvdmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIHZlYzMgY2FtZGlyID0gbm9ybWFsaXplKGRpcik7CiAgICBmb3IgKGk7IGkgPCBudW1fc2FtcGxlczsgKytpKXsKICAgICAgICBmbG9hdCBkZW5zaXR5ID0gdGV4dHVyZSh2b2x1bWVkYXRhLCBwb3MpLng7CiAgICAgICAgaWYoYWJzKGRlbnNpdHkgLSBpc292YWx1ZSkgPCBpc29yYW5nZSl7CiAgICAgICAgICAgIHZlYzMgTiA9IGdlbm5vcm1hbChwb3MsIHN0ZXBfc2l6ZSk7CiAgICAgICAgICAgIHZlYzMgTCA9IGdldF9saWdodF9kaXJlY3Rpb24oKTsKICAgICAgICAgICAgYyA9IHZlYzQoCiAgICAgICAgICAgICAgICBibGlubnBob25nKE4sIGNhbWRpciwgTCwgZGlmZnVzZV9jb2xvci5yZ2IpLAogICAgICAgICAgICAgICAgZGlmZnVzZV9jb2xvci5hCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBwb3MgKz0gZGlyOwogICAgfQogICAgcmV0dXJuIGM7Cn0KCnZlYzQgbWlwKHZlYzMgZnJvbnQsIHZlYzMgZGlyKQp7CiAgICB2ZWMzIHBvcyA9IGZyb250OwogICAgaW50IGkgPSAwOwogICAgZmxvYXQgbWF4aW11bSA9IDAuMDsKICAgIGZvciAoaTsgaSA8IG51bV9zYW1wbGVzOyArK2ksIHBvcyArPSBkaXIpewogICAgICAgIGZsb2F0IGRlbnNpdHkgPSB0ZXh0dXJlKHZvbHVtZWRhdGEsIHBvcykueDsKICAgICAgICBpZihtYXhpbXVtIDwgZGVuc2l0eSkKICAgICAgICAgICAgbWF4aW11bSA9IGRlbnNpdHk7CiAgICB9CiAgICByZXR1cm4gY29sb3JfbG9va3VwKG1heGltdW0sIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKfQoKdW5pZm9ybSB1aW50IG9iamVjdGlkOwoKY29uc3QgZmxvYXQgdHlwZW1heCA9IDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMC4wOwoKYm9vbCBub19zb2x1dGlvbihmbG9hdCB4KXsKICAgIHJldHVybiB4IDw9IDAuMDAwMSB8fCBpc2luZih4KSB8fCBpc25hbih4KTsKfQoKZmxvYXQgbWluX2JpZ2dlcl8wKGZsb2F0IGEsIGZsb2F0IGIpewogICAgYm9vbCBhX25vID0gbm9fc29sdXRpb24oYSk7CiAgICBib29sIGJfbm8gPSBub19zb2x1dGlvbihiKTsKICAgIGlmKGFfbm8gJiYgYl9ubyl7CiAgICAgICAgLy8gbm8gc29sdXRpb24KICAgICAgICByZXR1cm4gdHlwZW1heDsKICAgIH0KICAgIGlmKGFfbm8pewogICAgICAgIHJldHVybiBiOwogICAgfQogICAgaWYoYl9ubyl7CiAgICAgICAgcmV0dXJuIGE7CiAgICB9CiAgICByZXR1cm4gbWluKGEsIGIpOwp9CgpmbG9hdCBtaW5fYmlnZ2VyXzAodmVjMyB2MSwgdmVjMyB2Mil7CiAgICBmbG9hdCB4ID0gbWluX2JpZ2dlcl8wKHYxLngsIHYyLngpOwogICAgZmxvYXQgeSA9IG1pbl9iaWdnZXJfMCh2MS55LCB2Mi55KTsKICAgIGZsb2F0IHogPSBtaW5fYmlnZ2VyXzAodjEueiwgdjIueik7CiAgICByZXR1cm4gbWluKHgsIG1pbih5LCB6KSk7Cn0KCnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgY29sb3I7CiAgICB2ZWMzIGV5ZV91bml0ID0gdmVjMyhtb2RlbGludiAqIHZlYzQoZXllcG9zaXRpb24sIDEpKTsKICAgIHZlYzMgYmFja19wb3NpdGlvbiA9IGZyYWdfdmVydDsKICAgIHZlYzMgZGlyID0gbm9ybWFsaXplKGV5ZV91bml0IC0gYmFja19wb3NpdGlvbik7CiAgICAvLyBzb2x2ZSBiYWNrX3Bvc2l0aW9uICsgZGlzdGFuY2UgKiBkaXIgPT0gMQogICAgLy8gc29sdmUgYmFja19wb3NpdGlvbiArIGRpc3RhbmNlICogZGlyID09IDAKICAgIC8vIHRvIHNlZSB3aGVyZSBpdCBmaXJzdCBoaXRzIHVuaXQgY3ViZSEKICAgIHZlYzMgc29sdXRpb25fMSA9ICgxLjAgLSBiYWNrX3Bvc2l0aW9uKSAvIGRpcjsKICAgIHZlYzMgc29sdXRpb25fMCA9ICgwLjAgLSBiYWNrX3Bvc2l0aW9uKSAvIGRpcjsKICAgIGZsb2F0IHNvbHV0aW9uID0gbWluX2JpZ2dlcl8wKHNvbHV0aW9uXzEsIHNvbHV0aW9uXzApOwoKICAgIHZlYzMgc3RhcnQgPSBiYWNrX3Bvc2l0aW9uICsgc29sdXRpb24gKiBkaXI7CiAgICB2ZWMzIHN0ZXBfaW5fZGlyID0gKGJhY2tfcG9zaXRpb24gLSBzdGFydCkgLyBmbG9hdChudW1fc2FtcGxlcyk7CgogICAgZmxvYXQgc3RlcHMgPSAwLjE7CiAgICBpZihhbGdvcml0aG0gPT0gdWludCgwKSkKICAgICAgICBjb2xvciA9IGlzb3N1cmZhY2Uoc3RhcnQsIHN0ZXBfaW5fZGlyKTsKICAgIGVsc2UgaWYoYWxnb3JpdGhtID09IHVpbnQoMSkpCiAgICAgICAgY29sb3IgPSB2b2x1bWUoc3RhcnQsIHN0ZXBfaW5fZGlyKTsKICAgIGVsc2UgaWYoYWxnb3JpdGhtID09IHVpbnQoMikpCiAgICAgICAgY29sb3IgPSBtaXAoc3RhcnQsIHN0ZXBfaW5fZGlyKTsKICAgIGVsc2UgaWYoYWxnb3JpdGhtID09IHVpbnQoMykpCiAgICAgICAgY29sb3IgPSB2b2x1bWVyZ2JhKHN0YXJ0LCBzdGVwX2luX2Rpcik7CiAgICBlbHNlIGlmKGFsZ29yaXRobSA9PSB1aW50KDQpKQogICAgICAgIGNvbG9yID0gdmVjNCgwLjApOwogICAgICAgIC8vIGNvbG9yID0gdm9sdW1laW5kZXhlZHJnYmEoc3RhcnQsIHN0ZXBfaW5fZGlyKTsKICAgIGVsc2UKICAgICAgICBjb2xvciA9IGNvbnRvdXJzKHN0YXJ0LCBzdGVwX2luX2Rpcik7CgogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgdWludCgwKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChjb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gY29sb3I7Cgp9CoindmlzaWJsZccHaKY5MTM1ODSkbmFtZdkgbGluZXNlZ21lbnRzLTU3MDE1MTAxNzk3NzQwMDY5MTSqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjAxOKR1dWlkszU3MDE1MTAxNzk3NzQwMDY5MTSpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2MDE5qHVuaWZvcm1zi6tjb2xvcl9zdGFydNgXAACAPwAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACvbGluZXdpZHRoX3N0YXJ0ykAAAACncGlja2luZ8KtbGluZXdpZHRoX2VuZMpAAAAAqW9iamVjdF9pZAGpY29sb3JfZW5k2BcAAIA/AAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACvYmFja2dyb3VuZGNvbG9yxwdopjkxNTkzMbVjYW1lcmFfcmVsYXRpdmVfbGlnaHTDqGNoaWxkcmVukKd2aXNpYmxlxwdopjkxMzAxNrViYWNrZ3JvdW5kY29sb3JfYWxwaGHHB2imOTE1OTMypmNhbWVyYccHaKY5MTU5MzOvbGlnaHRfZGlyZWN0aW9uxwdopjkxMzEyM6pjbGVhcnNjZW5lxwdopjkxMzAxNaR1dWlktDEyMTcwMjU4ODQxNTI0ODg4NzE4qHZpZXdwb3J0xwdopjkxNTkyM6tjYW0zZF9zdGF0ZYembG9va2F0xwdopjkxNTkyNKtleWVwb3NpdGlvbscHaKY5MTU5MjaqcmVzb2x1dGlvbscHaKY5MTU5MzCodXB2ZWN0b3LHB2imOTE1OTI1o2ZvdscHaKY5MTU5MjekbmVhcscHaKY5MTU5MjijZmFyxwdopjkxNTkyOad2aXNpYmxlxwdopjkxMjk0NLViYWNrZ3JvdW5kY29sb3JfYWxwaGHHB2imOTE2MDIxpmNhbWVyYccHaKY5MTYwMjKvbGlnaHRfZGlyZWN0aW9uxwdopjkxMjk5OapjbGVhcnNjZW5lxwdopjkxMjk0M6R1dWlktDE1Nzg2NjE2MzU4NjM4NTUzNjAyqHZpZXdwb3J0xwdopjkxNTkyMqtjYW0zZF9zdGF0ZcCMpXBsb3Rz3AAfjqx0cmFuc3BhcmVuY3nHB2imOTEzOTQxpXNwYWNlxwdopjkxMzk0Nqx2ZXJ0ZXhhcnJheXOBqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwCAoEMAABxCAAASRAAAHEIAgKBDAADZQwAAEkQAANlDpG5hbWW3bWVzaC0zMjUyNjk0MzkxMjY4NjcyMTGpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABi+aW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyw6liYWNrbGlnaHTKAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAADIwgAAgD+nZGlmZnVzZccMFwAAgD8AAIA/AACAP6pjb2xvcnJhbmdlwqdsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAp2FtYmllbnTHDBdmZuY+ZmbmPmZm5j6pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAp3BhdHRlcm7CrG5vcm1hbG1hdHJpeMckFwAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP6J1dtcXAAAAAAAAAACnc2hhZGluZ8Koc3BlY3VsYXLHDBfNzEw+zcxMPs3MTD6nbm9ybWFsc8cMFwAAAAAAAAAAAAAAAKdwaWNraW5nwq9saWdodF9kaXJlY3Rpb27HDBcAAIA/AACAPwAAgD+pb2JqZWN0X2lkAK11bmlmb3JtX2NvbG9y2BcAAIA/AACAPwAAgD8AAIA/q2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAAClY29sb3LCqXNoaW5pbmVzc8pCAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjkxMzk0MLFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5MTYwODCob3ZlcmRyYXfHB2imOTEzOTQyr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYwODGlZmFjZXPHB2imOTE2MDc5pHV1aWSyMzI1MjY5NDM5MTI2ODY3MjExrXZlcnRleF9zb3VyY2XaE0wKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjMyBzcGVjdWxhcjsKdmVjMyBnZXRfc3BlY3VsYXIoKXtyZXR1cm4gc3BlY3VsYXI7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSB2ZWMzIG5vcm1hbHM7CnZlYzMgZ2V0X25vcm1hbHMoKXtyZXR1cm4gbm9ybWFsczt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGF0dGVybjsKYm9vbCBnZXRfcGF0dGVybigpe3JldHVybiBwYXR0ZXJuO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gYm9vbCBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7CmJvb2wgZ2V0X2ludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcigpe3JldHVybiBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7fQp1bmlmb3JtIGZsb2F0IGJhY2tsaWdodDsKZmxvYXQgZ2V0X2JhY2tsaWdodCgpe3JldHVybiBiYWNrbGlnaHQ7fQp1bmlmb3JtIHZlYzMgYW1iaWVudDsKdmVjMyBnZXRfYW1iaWVudCgpe3JldHVybiBhbWJpZW50O30KdW5pZm9ybSBtYXQzIG5vcm1hbG1hdHJpeDsKbWF0MyBnZXRfbm9ybWFsbWF0cml4KCl7cmV0dXJuIG5vcm1hbG1hdHJpeDt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHNoaW5pbmVzczsKZmxvYXQgZ2V0X3NoaW5pbmVzcygpe3JldHVybiBzaGluaW5lc3M7fQp1bmlmb3JtIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2NvbG9yOwp2ZWMzIGdldF9saWdodF9jb2xvcigpe3JldHVybiBsaWdodF9jb2xvcjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIGNvbG9yOwpib29sIGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gdmVjNCB1bmlmb3JtX2NvbG9yOwp2ZWM0IGdldF91bmlmb3JtX2NvbG9yKCl7cmV0dXJuIHVuaWZvcm1fY29sb3I7fQp1bmlmb3JtIGJvb2wgc2hhZGluZzsKYm9vbCBnZXRfc2hhZGluZygpe3JldHVybiBzaGFkaW5nO30KdW5pZm9ybSB2ZWMzIGRpZmZ1c2U7CnZlYzMgZ2V0X2RpZmZ1c2UoKXtyZXR1cm4gZGlmZnVzZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIHZlYzMgbGlnaHRfZGlyZWN0aW9uOwp2ZWMzIGdldF9saWdodF9kaXJlY3Rpb24oKXtyZXR1cm4gbGlnaHRfZGlyZWN0aW9uO30KCgoKb3V0IHZlYzIgZnJhZ191djsKb3V0IHZlYzMgb19ub3JtYWw7Cm91dCB2ZWMzIG9fY2FtZGlyOwoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKdW5pZm9ybSB2ZWMzIGV5ZXBvc2l0aW9uOwoKdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNChmbG9hdCB2KXtyZXR1cm4gdmVjNCh2LCAwLjAsIDAuMCwgMC4wKTt9CnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKZmxvYXQgX25vcm1hbGl6ZShmbG9hdCB2YWwsIGZsb2F0IGZyb20sIGZsb2F0IHRvKXtyZXR1cm4gKHZhbC1mcm9tKSAvICh0byAtIGZyb20pO30KCnZlYzQgZ2V0X2NvbG9yX2Zyb21fY21hcChmbG9hdCB2YWx1ZSwgc2FtcGxlcjJEIGNvbG9yX21hcCwgdmVjMiBjb2xvcnJhbmdlKSB7CiAgICBmbG9hdCBjbWluID0gY29sb3JyYW5nZS54OwogICAgZmxvYXQgY21heCA9IGNvbG9ycmFuZ2UueTsKICAgIGlmICh2YWx1ZSA8PSBjbWF4ICYmIHZhbHVlID49IGNtaW4pIHsKICAgICAgICAvLyBpbiB2YWx1ZSByYW5nZSwgY29udGludWUhCiAgICB9IGVsc2UgaWYgKHZhbHVlIDwgY21pbikgewogICAgICAgIHJldHVybiBnZXRfbG93Y2xpcCgpOwogICAgfSBlbHNlIGlmICh2YWx1ZSA+IGNtYXgpIHsKICAgICAgICByZXR1cm4gZ2V0X2hpZ2hjbGlwKCk7CiAgICB9IGVsc2UgewogICAgICAgIC8vIGlzbmFuIGlzIGJyb2tlbiAob2YgY291cnNlKSAtLi0KICAgICAgICAvLyBzbyBpZiBvdXRzaWRlIHZhbHVlIHJhbmdlIGFuZCBub3Qgc21hbGxlci9iaWdnZXIgbWluL21heCB3ZSBhc3N1bWUgTmFOCiAgICAgICAgcmV0dXJuIGdldF9uYW5fY29sb3IoKTsKICAgIH0KICAgIGZsb2F0IGkwMSA9IGNsYW1wKCh2YWx1ZSAtIGNtaW4pIC8gKGNtYXggLSBjbWluKSwgMC4wLCAxLjApOwogICAgLy8gMS8wIGNvcnJlc3BvbmRzIHRvIHRoZSBjb3JuZXIgb2YgdGhlIGNvbG9ybWFwLCBzbyB0byBwcm9wZXJseSBpbnRlcnBvbGF0ZQogICAgLy8gYmV0d2VlbiB0aGUgY29sb3JzLCB3ZSBuZWVkIHRvIHNjYWxlIGl0LCBzbyB0aGF0IHRoZSBlbmRzIGFyZSBhdCAxIC0gKHN0ZXBzaXplLzIpIGFuZCAwKyhzdGVwc2l6ZS8yKS4KICAgIGZsb2F0IHN0ZXBzaXplID0gMS4wIC8gZmxvYXQodGV4dHVyZVNpemUoY29sb3JfbWFwLCAwKSk7CiAgICBpMDEgPSAoMS4wIC0gc3RlcHNpemUpICogaTAxICsgMC41ICogc3RlcHNpemU7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvcl9tYXAsIHZlYzIoaTAxLCAwLjApKTsKfQoKdmVjNCB2ZXJ0ZXhfY29sb3IodmVjMyBjb2xvciwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiB2ZWM0KGNvbG9yLCAxLjApOwp9CnZlYzQgdmVydGV4X2NvbG9yKHZlYzQgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gY29sb3I7Cn0KdmVjNCB2ZXJ0ZXhfY29sb3IoYm9vbCBjb2xvciwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIC8vIGNvbG9yIHNhbXBsaW5nIGhhcHBlbnMgaW4gZnJhZ21lbnQgc2hhZGVyCiAgICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApOwp9CnZlYzQgdmVydGV4X2NvbG9yKGJvb2wgdmFsdWUsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIC8vIGNvbG9yIHNhbXBsaW5nIGhhcHBlbnMgaW4gZnJhZ21lbnQgc2hhZGVyCiAgICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApOwp9CnZlYzQgdmVydGV4X2NvbG9yKGZsb2F0IHZhbHVlLCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICBpZiAoZ2V0X2ludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcigpKSB7CiAgICAgICAgcmV0dXJuIHZlYzQodmFsdWUsIDAuMCwgMC4wLCAwLjApOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZ2V0X2NvbG9yX2Zyb21fY21hcCh2YWx1ZSwgY29sb3JtYXAsIGNvbG9ycmFuZ2UpOwogICAgfQp9Cgp2b2lkIHJlbmRlcih2ZWM0IHBvc2l0aW9uX3dvcmxkLCB2ZWMzIG5vcm1hbCwgbWF0NCB2aWV3LCBtYXQ0IHByb2plY3Rpb24pCnsKICAgIC8vIG5vcm1hbCBpbiB3b3JsZCBzcGFjZQogICAgb19ub3JtYWwgPSBnZXRfbm9ybWFsbWF0cml4KCkgKiBub3JtYWw7CiAgICAvLyBwb3NpdGlvbiBpbiBjbGlwIHNwYWNlICh3LyBkZXB0aCkKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbiAqIHZpZXcgKiBwb3NpdGlvbl93b3JsZDsgLy8gVE9ETyBjb25zaWRlciB1c2luZyBwcm9qZWN0aW9udmlldyBkaXJlY3RseQogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CiAgICAvLyBkaXJlY3Rpb24gdG8gY2FtZXJhCiAgICBvX2NhbWRpciA9IHBvc2l0aW9uX3dvcmxkLnh5eiAvIHBvc2l0aW9uX3dvcmxkLncgLSBleWVwb3NpdGlvbjsKfQoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCl7CiAgICAvLyBnZXRfKiBnZXRzIHRoZSBnbG9iYWwgaW5wdXRzICh1bmlmb3JtLCBzYW1wbGVyLCBwb3NpdGlvbiBhcnJheSkKICAgIC8vIHRob3NlIGZ1bmN0aW9ucyB3aWxsIGdldCBpbnNlcnRlZCBieSB0aGUgc2hhZGVyIGNyZWF0aW9uIHBpcGVsaW5lCiAgICB2ZWMzIHZlcnRleF9wb3NpdGlvbiA9IHRvdmVjMyhnZXRfcG9zaXRpb24oKSk7CiAgICBpZiAoaXNuYW4odmVydGV4X3Bvc2l0aW9uLnopKSB7CiAgICAgICAgdmVydGV4X3Bvc2l0aW9uLnogPSAwLjA7CiAgICB9CiAgICB2ZWM0IHBvc2l0aW9uX3dvcmxkID0gbW9kZWwgKiB2ZWM0KHZlcnRleF9wb3NpdGlvbiwgMSk7CgogICAgcmVuZGVyKHBvc2l0aW9uX3dvcmxkLCBnZXRfbm9ybWFscygpLCB2aWV3LCBwcm9qZWN0aW9uKTsKICAgIGZyYWdfdXYgPSBnZXRfdXYoKTsKICAgIGZyYWdfdXYgPSB2ZWMyKDEuMCAtIGZyYWdfdXYueSwgZnJhZ191di54KTsKICAgIGZyYWdfY29sb3IgPSB2ZXJ0ZXhfY29sb3IoZ2V0X2NvbG9yKCksIGdldF9jb2xvcnJhbmdlKCksIGNvbG9ybWFwKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9WZXJ0ZXhJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaF0QKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjMyBzcGVjdWxhcjsKdmVjMyBnZXRfc3BlY3VsYXIoKXtyZXR1cm4gc3BlY3VsYXI7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSB2ZWMzIG5vcm1hbHM7CnZlYzMgZ2V0X25vcm1hbHMoKXtyZXR1cm4gbm9ybWFsczt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGF0dGVybjsKYm9vbCBnZXRfcGF0dGVybigpe3JldHVybiBwYXR0ZXJuO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gYm9vbCBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7CmJvb2wgZ2V0X2ludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcigpe3JldHVybiBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7fQp1bmlmb3JtIGZsb2F0IGJhY2tsaWdodDsKZmxvYXQgZ2V0X2JhY2tsaWdodCgpe3JldHVybiBiYWNrbGlnaHQ7fQp1bmlmb3JtIHZlYzMgYW1iaWVudDsKdmVjMyBnZXRfYW1iaWVudCgpe3JldHVybiBhbWJpZW50O30KdW5pZm9ybSBtYXQzIG5vcm1hbG1hdHJpeDsKbWF0MyBnZXRfbm9ybWFsbWF0cml4KCl7cmV0dXJuIG5vcm1hbG1hdHJpeDt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHNoaW5pbmVzczsKZmxvYXQgZ2V0X3NoaW5pbmVzcygpe3JldHVybiBzaGluaW5lc3M7fQp1bmlmb3JtIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2NvbG9yOwp2ZWMzIGdldF9saWdodF9jb2xvcigpe3JldHVybiBsaWdodF9jb2xvcjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIGNvbG9yOwpib29sIGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gdmVjNCB1bmlmb3JtX2NvbG9yOwp2ZWM0IGdldF91bmlmb3JtX2NvbG9yKCl7cmV0dXJuIHVuaWZvcm1fY29sb3I7fQp1bmlmb3JtIGJvb2wgc2hhZGluZzsKYm9vbCBnZXRfc2hhZGluZygpe3JldHVybiBzaGFkaW5nO30KdW5pZm9ybSB2ZWMzIGRpZmZ1c2U7CnZlYzMgZ2V0X2RpZmZ1c2UoKXtyZXR1cm4gZGlmZnVzZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIHZlYzMgbGlnaHRfZGlyZWN0aW9uOwp2ZWMzIGdldF9saWdodF9kaXJlY3Rpb24oKXtyZXR1cm4gbGlnaHRfZGlyZWN0aW9uO30KCmluIHZlYzIgZnJhZ191djsKaW4gdmVjNCBmcmFnX2NvbG9yOwpmbGF0IGluIGludCBzYW1wbGVfZnJhZ19jb2xvcjsKCmluIHZlYzMgb19ub3JtYWw7CmluIHZlYzMgb19jYW1kaXI7CgovLyBTbW9vdGhlcyBvdXQgZWRnZSBhcm91bmQgMCBsaWdodCBpbnRlbnNpdHksIHNlZSBHTE1ha2llCmZsb2F0IHNtb290aF96ZXJvX21heChmbG9hdCB4KSB7CiAgICBjb25zdCBmbG9hdCBjID0gMC4wMDM5MDYyNSwgeHN3YXAgPSAwLjY0MDY3MDcxMjAxNTI3NTksIHlzd2FwID0gMC4yMDUwODM4MzkwMDE5MDk1NTsKICAgIGNvbnN0IGZsb2F0IHNoaWZ0ID0gMS4wICsgeHN3YXAgLSB5c3dhcDsKICAgIGZsb2F0IHBvdzggPSB4ICsgc2hpZnQ7CiAgICBwb3c4ID0gcG93OCAqIHBvdzg7IHBvdzggPSBwb3c4ICogcG93ODsgcG93OCA9IHBvdzggKiBwb3c4OwogICAgcmV0dXJuIHggPCB5c3dhcCA/IGMgKiBwb3c4IDogeDsKfQoKdmVjMyBibGlubnBob25nKHZlYzMgTiwgdmVjMyBWLCB2ZWMzIEwsIHZlYzMgY29sb3IpewogICAgZmxvYXQgYmFja2xpZ2h0ID0gZ2V0X2JhY2tsaWdodCgpOwogICAgZmxvYXQgZGlmZl9jb2VmZiA9IHNtb290aF96ZXJvX21heChkb3QoTCwgLU4pKSArCiAgICAgICAgYmFja2xpZ2h0ICogc21vb3RoX3plcm9fbWF4KGRvdChMLCBOKSk7CgogICAgLy8gc3BlY3VsYXIgY29lZmZpY2llbnQKICAgIHZlYzMgSCA9IG5vcm1hbGl6ZShMICsgVik7CgogICAgZmxvYXQgc3BlY19jb2VmZiA9IHBvdyhtYXgoZG90KEgsIC1OKSwgMC4wKSwgZ2V0X3NoaW5pbmVzcygpKSArCiAgICAgICAgYmFja2xpZ2h0ICogcG93KG1heChkb3QoSCwgTiksIDAuMCksIGdldF9zaGluaW5lc3MoKSk7CiAgICBpZiAoZGlmZl9jb2VmZiA8PSAwLjApCiAgICAgICAgc3BlY19jb2VmZiA9IDAuMDsKCiAgICAvLyBmaW5hbCBsaWdodGluZyBtb2RlbAogICAgcmV0dXJuIGdldF9saWdodF9jb2xvcigpICogdmVjMygKICAgICAgICBnZXRfZGlmZnVzZSgpICogZGlmZl9jb2VmZiAqIGNvbG9yICsKICAgICAgICBnZXRfc3BlY3VsYXIoKSAqIHNwZWNfY29lZmYKICAgICk7Cn0KCnZlYzQgZ2V0X2NvbG9yKHZlYzMgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQoKdmVjNCBnZXRfY29sb3IodmVjNCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBjb2xvcjsKfQoKdmVjNCBnZXRfY29sb3IoYm9vbCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBmcmFnX2NvbG9yOyAgLy8gY29sb3Igbm90IGluIHVuaWZvcm0KfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgaWYgKGdldF9wYXR0ZXJuKCkpIHsKICAgICAgICB2ZWMyIHNpemUgPSB2ZWMyKHRleHR1cmVTaXplKGNvbG9yLCAwKSk7CiAgICAgICAgdmVjMiBwb3MgPSBnbF9GcmFnQ29vcmQueHk7CiAgICAgICAgcmV0dXJuIHRleGVsRmV0Y2goY29sb3IsIGl2ZWMyKG1vZChwb3MueCwgc2l6ZS54KSwgbW9kKHBvcy55LCBzaXplLnkpKSwgMCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yLCB1dik7CiAgICB9Cn0KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgZ2V0X2NvbG9yKGJvb2wgY29sb3IsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGlmIChnZXRfaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyKCkpIHsKICAgICAgICByZXR1cm4gZ2V0X2NvbG9yX2Zyb21fY21hcChmcmFnX2NvbG9yLngsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZyYWdfY29sb3I7CiAgICB9Cn0KCnZlYzQgZ2V0X2NvbG9yKHNhbXBsZXIyRCB2YWx1ZXMsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGZsb2F0IHZhbHVlID0gdGV4dHVyZSh2YWx1ZXMsIHV2KS54OwogICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvciwgdXYpOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgdmVjNCByZWFsX2NvbG9yID0gZ2V0X2NvbG9yKHVuaWZvcm1fY29sb3IsIGZyYWdfdXYsIGdldF9jb2xvcnJhbmdlKCksIGNvbG9ybWFwKTsKICAgIHZlYzMgc2hhZGVkX2NvbG9yID0gcmVhbF9jb2xvci5yZ2I7CgogICAgaWYoZ2V0X3NoYWRpbmcoKSl7CiAgICAgICAgdmVjMyBMID0gZ2V0X2xpZ2h0X2RpcmVjdGlvbigpOwogICAgICAgIHZlYzMgTiA9IG5vcm1hbGl6ZShvX25vcm1hbCk7CiAgICAgICAgdmVjMyBsaWdodCA9IGJsaW5ucGhvbmcoTiwgbm9ybWFsaXplKG9fY2FtZGlyKSwgTCwgcmVhbF9jb2xvci5yZ2IpOwogICAgICAgIHNoYWRlZF9jb2xvciA9IGdldF9hbWJpZW50KCkgKiByZWFsX2NvbG9yLnJnYiArIGxpZ2h0OwogICAgfQoKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKHJlYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAocmVhbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gdmVjNChzaGFkZWRfY29sb3IsIHJlYWxfY29sb3IuYSk7Cn0KiKd2aXNpYmxlxwdopjkxMzk0MKRuYW1lv2xpbmVzZWdtZW50cy02NjIyNzY1NjUwMTUxMzQxNzWqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjA4NKR1dWlksjY2MjI3NjU2NTAxNTEzNDE3NaljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYwODWodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAMjCAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKAAAAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kygAAAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAAACrZGVwdGhfc2hpZnTKtyfFrIindmlzaWJsZccHaKY5MTQwOTGkbmFtZdkhbGluZXNlZ21lbnRzLTEwODE2MDAxNzg1NjMyNTE2Nzg2qmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5MTYwODikdXVpZLQxMDgxNjAwMTc4NTYzMjUxNjc4NqljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYwODmodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAACPwvU9pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACDBAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKP4AAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAI/C9T2rZGVwdGhfc2hpZnTKAAAAAIindmlzaWJsZccHaKY5MTQxMjekbmFtZdkgbGluZXNlZ21lbnRzLTY1MTExNzQ4MjMyNjM0OTI3NzSqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjA5MqR1dWlkszY1MTExNzQ4MjMyNjM0OTI3NzSpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2MDkzqHVuaWZvcm1zi6tjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAzcxMPaVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgwQAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACvbGluZXdpZHRoX3N0YXJ0yj+AAACncGlja2luZ8KtbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZAGpY29sb3JfZW5k2BcAAAAAAAAAAAAAAADNzEw9q2RlcHRoX3NoaWZ0ygAAAACIp3Zpc2libGXHB2imOTE0MTYzpG5hbWXZIGxpbmVzZWdtZW50cy0zMDgzMDg1NzYzMTM4NTc4OTQyqmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5MTYwOTakdXVpZLMzMDgzMDg1NzYzMTM4NTc4OTQyqWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjkxNjA5N6h1bmlmb3Jtc4urY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAI/C9T2lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIMEAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAr2xpbmV3aWR0aF9zdGFydMo/gAAAp3BpY2tpbmfCrWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQBqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAj8L1PatkZXB0aF9zaGlmdMoAAAAAiKd2aXNpYmxlxwdopjkxNDE5OaRuYW1lv2xpbmVzZWdtZW50cy05MTU4OTc4OTI5NDk0OTc4NzOqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjEwMKR1dWlksjkxNTg5Nzg5Mjk0OTQ5Nzg3M6ljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYxMDGodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAADNzEw9pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACDBAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKP4AAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAM3MTD2rZGVwdGhfc2hpZnTKAAAAAIindmlzaWJsZccHaKY5MTQyMzmkbmFtZdkhbGluZXNlZ21lbnRzLTEyNzk3NzgxODQ2NzY4MzI0NDgwqmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5MTYxMDSkdXVpZLQxMjc5Nzc4MTg0Njc2ODMyNDQ4MKljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYxMDWodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACBBAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKP4AAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAIindmlzaWJsZccHaKY5MTQyNDmkbmFtZdkgbGluZXNlZ21lbnRzLTU5OTYxNjY4NTc5MjgxMzAwMDaqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjEwOKR1dWlkszU5OTYxNjY4NTc5MjgxMzAwMDapY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2MTA5qHVuaWZvcm1zi6tjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACvbGluZXdpZHRoX3N0YXJ0yj+AAACncGlja2luZ8KtbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZAGpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAADeABCsdHJhbnNwYXJlbmN5xwdopjkxNDM5OKVzcGFjZccHaKY5MTQ0MDOsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAC/AAAAvwAAAD8AAAC/AAAAvwAAAD8AAAA/AAAAP6RuYW1luHRleHQtODQ5NjE3NDgwODQ5ODM3MjM1NKljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc94AFKtweF9wZXJfdW5pdMo/gAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6pjb2xvcnJhbmdlwqliaWxsYm9hcmTCqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAArXByZXByb2plY3Rpb27HQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/p2FtYmllbnTHDBdmZuY+ZmbmPmZm5j6pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAArWRpc3RhbmNlZmllbGSKqW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKqYW5pc290cm9wecpBgAAAqW1hZ0ZpbHRlcqxMaW5lYXJGaWx0ZXKld3JhcFOuUmVwZWF0V3JhcHBpbmekZGF0Ya10ZXh0dXJlX2F0bGFzrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZZLNBADNBACld3JhcFSuUmVwZWF0V3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACyYXRsYXNfdGV4dHVyZV9zaXplykSAAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAAAWRAAA4UOlaW1hZ2XCqW9iamVjdF9pZACqc2hhcGVfdHlwZQOwdHJhbnNmb3JtX21hcmtlcsKrbGlnaHRfY29sb3LHDBcAAAA/AAAAPwAAAD+rZGVwdGhfc2hpZnTKAAAAAKhjb2xvcm1hcMKndmlzaWJsZccHaKY5MTQyMzOrbWFya2Vyc3BhY2XHB2imOTE0NDEysWF0dHJpYnV0ZV91cGRhdGVyxwdopjkxNjE0NqhvdmVyZHJhd8cHaKY5MTQzOTmvdW5pZm9ybV91cGRhdGVyxwdopjkxNjE0N6VmYWNlc8cHaKY5MTYxNDWkdXVpZLM4NDk2MTc0ODA4NDk4MzcyMzU0rXZlcnRleF9zb3VyY2XaHDkKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIG1hcmtlcnNpemU7CnZlYzIgZ2V0X21hcmtlcnNpemUoKXtyZXR1cm4gbWFya2Vyc2l6ZTt9CmluIHZlYzQgcm90YXRpb25zOwp2ZWM0IGdldF9yb3RhdGlvbnMoKXtyZXR1cm4gcm90YXRpb25zO30KaW4gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQppbiB2ZWMzIHBvczsKdmVjMyBnZXRfcG9zKCl7cmV0dXJuIHBvczt9CmluIHZlYzIgcXVhZF9vZmZzZXQ7CnZlYzIgZ2V0X3F1YWRfb2Zmc2V0KCl7cmV0dXJuIHF1YWRfb2Zmc2V0O30KaW4gdmVjNCB1dl9vZmZzZXRfd2lkdGg7CnZlYzQgZ2V0X3V2X29mZnNldF93aWR0aCgpe3JldHVybiB1dl9vZmZzZXRfd2lkdGg7fQppbiB2ZWMzIG1hcmtlcl9vZmZzZXQ7CnZlYzMgZ2V0X21hcmtlcl9vZmZzZXQoKXtyZXR1cm4gbWFya2VyX29mZnNldDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleF9kaW07CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwpvdXQgdmVjMiBmcmFnX3V2OwpvdXQgZmxvYXQgZnJhZ191dnNjYWxlOwpvdXQgZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwpvdXQgdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCgptYXQ0IHFtYXQodmVjNCBxdWF0KXsKICAgIGZsb2F0IG51bSA9IHF1YXQueCAqIDIuMDsKICAgIGZsb2F0IG51bTIgPSBxdWF0LnkgKiAyLjA7CiAgICBmbG9hdCBudW0zID0gcXVhdC56ICogMi4wOwogICAgZmxvYXQgbnVtNCA9IHF1YXQueCAqIG51bTsKICAgIGZsb2F0IG51bTUgPSBxdWF0LnkgKiBudW0yOwogICAgZmxvYXQgbnVtNiA9IHF1YXQueiAqIG51bTM7CiAgICBmbG9hdCBudW03ID0gcXVhdC54ICogbnVtMjsKICAgIGZsb2F0IG51bTggPSBxdWF0LnggKiBudW0zOwogICAgZmxvYXQgbnVtOSA9IHF1YXQueSAqIG51bTM7CiAgICBmbG9hdCBudW0xMCA9IHF1YXQudyAqIG51bTsKICAgIGZsb2F0IG51bTExID0gcXVhdC53ICogbnVtMjsKICAgIGZsb2F0IG51bTEyID0gcXVhdC53ICogbnVtMzsKICAgIHJldHVybiBtYXQ0KAogICAgICAgICgxLjAgLSAobnVtNSArIG51bTYpKSwgKG51bTcgKyBudW0xMiksICAgICAgICAobnVtOCAtIG51bTExKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtNyAtIG51bTEyKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTYpKSwgKG51bTkgKyBudW0xMCksICAgICAgICAwLjAsCiAgICAgICAgKG51bTggKyBudW0xMSksICAgICAgICAobnVtOSAtIG51bTEwKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTUpKSwgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDEuMAogICAgKTsKfQoKZmxvYXQgZGlzdGFuY2VmaWVsZF9zY2FsZSgpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVsczsgY29udmVydCB0byBkaW1lbnNpb25sZXNzCiAgICAvLyB4LWNvb3JkaW5hdGUgb2YgdGV4dHVyZSBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHByb2dyYW1tYXRpYyB1dgogICAgLy8gZGlzdGFuY2UgZmllbGRzIGluIGZyYWdtZW50IHNoYWRlci4gU2VlIGFsc28gY29tbWVudHMgYmVsb3cuCiAgICB2ZWM0IHV2X3JlY3QgPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICBmbG9hdCBwaXhzaXplX3ggPSAodXZfcmVjdC56IC0gdXZfcmVjdC54KSAqIGdldF9hdGxhc190ZXh0dXJlX3NpemUoKTsKICAgIHJldHVybiAtMS4wL3BpeHNpemVfeDsKfQoKdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm1hdDIgZGlhZ20odmVjMiB2KXsKICAgIHJldHVybiBtYXQyKHYueCwgMC4wLCAwLjAsIHYueSk7Cn0KCmZsb2F0IF9kZXRlcm1pbmFudChtYXQyIG0pIHsKICByZXR1cm4gbVswXVswXSAqIG1bMV1bMV0gLSBtWzBdWzFdICogbVsxXVswXTsKfQoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCl7CiAgICB2ZWMyIGJib3hfc2lnbmVkX3JhZGl1cyA9IDAuNSAqIGdldF9tYXJrZXJzaXplKCk7IC8vIG5vdGU7IGNvbXBvbmVudHMgbWF5IGJlIG5lZ2F0aXZlLgogICAgdmVjMiBzcHJpdGVfYmJveF9jZW50cmUgPSBnZXRfcXVhZF9vZmZzZXQoKSArIGJib3hfc2lnbmVkX3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgLy8gQWx3YXlzIHRyYW5zZm9ybSB0ZXh0L3NjYXR0ZXIgcG9zaXRpb24gYXJndW1lbnQKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgLy8gbWF5YmUgdHJhbnNmb3JtIG1hcmtlcl9vZmZzZXQgKyBnbHlwaCBvZmZzZXRzCiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDModHJhbnMpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CgogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKCiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBweF9wZXJfdW5pdCAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gYWJzKGdldF9tYXJrZXJzaXplKCkueCk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CiAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcigpKTsKICAgIGZyYWdfdXYgPSBnZXRfdXYoKTsKICAgIGZyYWdfdXZfb2Zmc2V0X3dpZHRoID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogYmJveF9zaWduZWRfcmFkaXVzICogZ2V0X3Bvc2l0aW9uKCksIDAuMCwgMC4wKSk7CiAgICBnbF9Qb3NpdGlvbiA9IHZjbGlwICsgcXVhZF92ZXJ0ZXg7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKfQoKr2ZyYWdtZW50X3NvdXJjZdoT+ApwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAovLyBUaGVzZSB2ZXJzaW9ucyBvZiBhYXN0ZXAgYXNzdW1lIHRoYXQgYGRpc3RgIGlzIGEgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9uCi8vIHdoaWNoIGhhcyBiZWVuIHNjYWxlZCB0byBiZSBpbiB1bml0cyBvZiBwaXhlbHMuCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDEgKyBBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IHRocmVzaG9sZDIsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMStBTlRJQUxJQVNfUkFESVVTLCBkaXN0KSAtCiAgICAgICAgICAgc21vb3Roc3RlcCh0aHJlc2hvbGQyLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDIrQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCi8vIFByb2NlZHVyYWwgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9ucyBvbiB0aGUgdXYgY29vcmRpbmF0ZSBwYXRjaCBbMCwxXXhbMCwxXQovLyBOb3RlIHRoYXQgZm9yIGFudGlhbGlhc2luZyB0byB3b3JrIHByb3Blcmx5IHRoZXNlIHNob3VsZCBiZSAqc2NhbGUgcHJlc2VydmluZyoKLy8gKElmIHlvdSBtdXN0IHJlc2NhbGUgdXYsIG1ha2Ugc3VyZSB0byBwdXQgdGhlIHNjYWxlIGZhY3RvciBiYWNrIGluIGxhdGVyLikKZmxvYXQgdHJpYW5nbGUodmVjMiBQKXsKICAgIFAgLT0gdmVjMigwLjUpOwogICAgZmxvYXQgeCA9IE1fU1FSVF8yICogKFAueCAtIFAueSk7CiAgICBmbG9hdCB5ID0gTV9TUVJUXzIgKiAoUC54ICsgUC55KTsKICAgIGZsb2F0IHIxID0gbWF4KGFicyh4KSwgYWJzKHkpKSAtIDEuMC8oMi4wKk1fU1FSVF8yKTsKICAgIGZsb2F0IHIyID0gUC55OwogICAgcmV0dXJuIC1tYXgocjEscjIpOwp9CgpmbG9hdCBjaXJjbGUodmVjMiB1dil7CiAgICByZXR1cm4gMC41LWxlbmd0aCh1di12ZWMyKDAuNSkpOwp9CgpmbG9hdCByZWN0YW5nbGUodmVjMiB1dil7CiAgICB2ZWMyIGQgPSBtYXgoLXV2LCB1di12ZWMyKDEpKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpKTsKfQoKZmxvYXQgcm91bmRlZF9yZWN0YW5nbGUodmVjMiB1diwgdmVjMiB0bCwgdmVjMiBicil7CiAgICB2ZWMyIGQgPSBtYXgodGwtdXYsIHV2LWJyKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpLXRsLngpOwp9Cgp2b2lkIGZpbGwoYm9vbCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBjb2xvciA9IG1peChjb2xvciwgZmlsbGNvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIGZpbGwoc2FtcGxlcjJEIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIHZlYzQgaW1fY29sb3IgPSB0ZXh0dXJlKGltYWdlLCB1di55eCk7CiAgICBjb2xvciA9IG1peChjb2xvciwgaW1fY29sb3IsIGluZmlsbCk7Cn0KCmluIGZsb2F0IGZyYWdfdXZzY2FsZTsKaW4gZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwppbiB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwogICAgdmVjNCB1dl9vZmYgPSBmcmFnX3V2X29mZnNldF93aWR0aDsKICAgIHZlYzIgdGV4X3V2ID0gbWl4KHV2X29mZi54eSwgdXZfb2ZmLnp3LCBjbGFtcChmcmFnX3V2LCAwLjAsIDEuMCkpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBzY2FsZWRfZGlzdGFuY2VmaWVsZChkaXN0YW5jZWZpZWxkLCB0ZXhfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBST1VOREVEX1JFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSByb3VuZGVkX3JlY3RhbmdsZShmcmFnX3V2LCB2ZWMyKDAuMiksIHZlYzIoMC44KSk7CiAgICBlbHNlIGlmKHNoYXBlID09IFJFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSAxLjA7IC8vIHJlY3RhbmdsZShmX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gVFJJQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gdHJpYW5nbGUoZnJhZ191dik7CgogICAgc2lnbmVkX2Rpc3RhbmNlICo9IGZyYWdfdXZzY2FsZTsKICAgIGZsb2F0IGluc2lkZSA9IGFhc3RlcCgwLjAsIHNpZ25lZF9kaXN0YW5jZSk7CiAgICB2ZWM0IGZpbmFsX2NvbG9yID0gdmVjNChmcmFnX2NvbG9yLnh5eiwgMCk7CiAgICBmaWxsKGltYWdlLCBmcmFnX2NvbG9yLCBmcmFnX3V2LCBpbnNpZGUsIGZpbmFsX2NvbG9yKTsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZpbmFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZmluYWxfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZpbmFsX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzh6txdWFkX29mZnNldIKrdHlwZV9sZW5ndGgCpGZsYXTHABeqbWFya2Vyc2l6ZYKrdHlwZV9sZW5ndGgCpGZsYXTHABetbWFya2VyX29mZnNldIKrdHlwZV9sZW5ndGgDpGZsYXTHABelY29sb3KCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXr3V2X29mZnNldF93aWR0aIKrdHlwZV9sZW5ndGgEpGZsYXTHABejcG9zgqt0eXBlX2xlbmd0aAOkZmxhdMcAF6lyb3RhdGlvbnOCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXiKd2aXNpYmxlxwdopjkxNDQ4OaRuYW1l2SBsaW5lc2VnbWVudHMtNTc3MjczNjM3NzY5NjU0ODQyNaphdHRyaWJ1dGVzg6Vjb2xvcscHaKY5MTYxNTGpbGluZXBvaW50xwdopjkxNjE1MKlsaW5ld2lkdGjHB2imOTE2MTUypHV1aWSzNTc3MjczNjM3NzY5NjU0ODQyNaljYW1fc3BhY2WlcGl4ZWypcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2MTUzqHVuaWZvcm1zh6dwaWNraW5nwqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAKlvYmplY3RfaWQBp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAiKd2aXNpYmxlxwdopjkxNDI0MKRuYW1l2SFsaW5lc2VnbWVudHMtMTMzNDg0OTY4MDIyNzE3MTk0NjeqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjE1NqR1dWlktDEzMzQ4NDk2ODAyMjcxNzE5NDY3qWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjkxNjE1N6h1bmlmb3Jtc4urY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAoEEAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAr2xpbmV3aWR0aF9zdGFydMo/gAAAp3BpY2tpbmfCrWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQBqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAA3gAQrHRyYW5zcGFyZW5jeccHaKY5MTQ1OTWlc3BhY2XHB2imOTE0NjAwrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbh0ZXh0LTgwMzIzNDY5ODEzMDMyNjUwMjOpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABSrcHhfcGVyX3VuaXTKP4AAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+qY29sb3JyYW5nZcKpYmlsbGJvYXJkwqhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAK1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXZmbmPmZm5j5mZuY+qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK1kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZadsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAAFkQAAOFDpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLCq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAACoY29sb3JtYXDCp3Zpc2libGXHB2imOTE0MjM4q21hcmtlcnNwYWNlxwdopjkxNDYwOLFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5MTYxOTSob3ZlcmRyYXfHB2imOTE0NTk2r3VuaWZvcm1fdXBkYXRlcscHaKY5MTYxOTWlZmFjZXPHB2imOTE2MTkzpHV1aWSzODAzMjM0Njk4MTMwMzI2NTAyM612ZXJ0ZXhfc291cmNl2hw5CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleHR1cmVfc2l6ZTsKZmxvYXQgZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpe3JldHVybiBhdGxhc190ZXh0dXJlX3NpemU7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gZmxvYXQgcHhfcGVyX3VuaXQ7CmZsb2F0IGdldF9weF9wZXJfdW5pdCgpe3JldHVybiBweF9wZXJfdW5pdDt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBtYXJrZXJzaXplOwp2ZWMyIGdldF9tYXJrZXJzaXplKCl7cmV0dXJuIG1hcmtlcnNpemU7fQppbiB2ZWM0IHJvdGF0aW9uczsKdmVjNCBnZXRfcm90YXRpb25zKCl7cmV0dXJuIHJvdGF0aW9uczt9CmluIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KaW4gdmVjMyBwb3M7CnZlYzMgZ2V0X3Bvcygpe3JldHVybiBwb3M7fQppbiB2ZWMyIHF1YWRfb2Zmc2V0Owp2ZWMyIGdldF9xdWFkX29mZnNldCgpe3JldHVybiBxdWFkX29mZnNldDt9CmluIHZlYzQgdXZfb2Zmc2V0X3dpZHRoOwp2ZWM0IGdldF91dl9vZmZzZXRfd2lkdGgoKXtyZXR1cm4gdXZfb2Zmc2V0X3dpZHRoO30KaW4gdmVjMyBtYXJrZXJfb2Zmc2V0Owp2ZWMzIGdldF9tYXJrZXJfb2Zmc2V0KCl7cmV0dXJuIG1hcmtlcl9vZmZzZXQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdW5pZm9ybSBmbG9hdCBhdGxhc190ZXhfZGltOwoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKb3V0IHZlYzIgZnJhZ191djsKb3V0IGZsb2F0IGZyYWdfdXZzY2FsZTsKb3V0IGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKb3V0IHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgoKbWF0NCBxbWF0KHZlYzQgcXVhdCl7CiAgICBmbG9hdCBudW0gPSBxdWF0LnggKiAyLjA7CiAgICBmbG9hdCBudW0yID0gcXVhdC55ICogMi4wOwogICAgZmxvYXQgbnVtMyA9IHF1YXQueiAqIDIuMDsKICAgIGZsb2F0IG51bTQgPSBxdWF0LnggKiBudW07CiAgICBmbG9hdCBudW01ID0gcXVhdC55ICogbnVtMjsKICAgIGZsb2F0IG51bTYgPSBxdWF0LnogKiBudW0zOwogICAgZmxvYXQgbnVtNyA9IHF1YXQueCAqIG51bTI7CiAgICBmbG9hdCBudW04ID0gcXVhdC54ICogbnVtMzsKICAgIGZsb2F0IG51bTkgPSBxdWF0LnkgKiBudW0zOwogICAgZmxvYXQgbnVtMTAgPSBxdWF0LncgKiBudW07CiAgICBmbG9hdCBudW0xMSA9IHF1YXQudyAqIG51bTI7CiAgICBmbG9hdCBudW0xMiA9IHF1YXQudyAqIG51bTM7CiAgICByZXR1cm4gbWF0NCgKICAgICAgICAoMS4wIC0gKG51bTUgKyBudW02KSksIChudW03ICsgbnVtMTIpLCAgICAgICAgKG51bTggLSBudW0xMSksICAgICAgICAwLjAsCiAgICAgICAgKG51bTcgLSBudW0xMiksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW02KSksIChudW05ICsgbnVtMTApLCAgICAgICAgMC4wLAogICAgICAgIChudW04ICsgbnVtMTEpLCAgICAgICAgKG51bTkgLSBudW0xMCksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW01KSksIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAxLjAKICAgICk7Cn0KCmZsb2F0IGRpc3RhbmNlZmllbGRfc2NhbGUoKXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHM7IGNvbnZlcnQgdG8gZGltZW5zaW9ubGVzcwogICAgLy8geC1jb29yZGluYXRlIG9mIHRleHR1cmUgaW5zdGVhZCBmb3IgY29uc2lzdGVuY3kgd2l0aCBwcm9ncmFtbWF0aWMgdXYKICAgIC8vIGRpc3RhbmNlIGZpZWxkcyBpbiBmcmFnbWVudCBzaGFkZXIuIFNlZSBhbHNvIGNvbW1lbnRzIGJlbG93LgogICAgdmVjNCB1dl9yZWN0ID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgZmxvYXQgcGl4c2l6ZV94ID0gKHV2X3JlY3QueiAtIHV2X3JlY3QueCkgKiBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCk7CiAgICByZXR1cm4gLTEuMC9waXhzaXplX3g7Cn0KCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgptYXQyIGRpYWdtKHZlYzIgdil7CiAgICByZXR1cm4gbWF0Mih2LngsIDAuMCwgMC4wLCB2LnkpOwp9CgpmbG9hdCBfZGV0ZXJtaW5hbnQobWF0MiBtKSB7CiAgcmV0dXJuIG1bMF1bMF0gKiBtWzFdWzFdIC0gbVswXVsxXSAqIG1bMV1bMF07Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgdmVjMiBiYm94X3NpZ25lZF9yYWRpdXMgPSAwLjUgKiBnZXRfbWFya2Vyc2l6ZSgpOyAvLyBub3RlOyBjb21wb25lbnRzIG1heSBiZSBuZWdhdGl2ZS4KICAgIHZlYzIgc3ByaXRlX2Jib3hfY2VudHJlID0gZ2V0X3F1YWRfb2Zmc2V0KCkgKyBiYm94X3NpZ25lZF9yYWRpdXM7CgogICAgbWF0NCBwdmlldyA9IHByb2plY3Rpb24gKiB2aWV3OwogICAgbWF0NCB0cmFucyA9IGdldF90cmFuc2Zvcm1fbWFya2VyKCkgPyBtb2RlbCA6IG1hdDQoMS4wKTsKCiAgICAvLyBDb21wdXRlIGNlbnRyZSBvZiBiaWxsYm9hcmQgaW4gY2xpcHBpbmcgY29vcmRpbmF0ZXMKICAgIC8vIEFsd2F5cyB0cmFuc2Zvcm0gdGV4dC9zY2F0dGVyIHBvc2l0aW9uIGFyZ3VtZW50CiAgICB2ZWM0IGRhdGFfcG9pbnQgPSBnZXRfcHJlcHJvamVjdGlvbigpICogbW9kZWwgKiB2ZWM0KHRvdmVjMyhnZXRfcG9zKCkpLCAxKTsKICAgIC8vIG1heWJlIHRyYW5zZm9ybSBtYXJrZXJfb2Zmc2V0ICsgZ2x5cGggb2Zmc2V0cwogICAgZGF0YV9wb2ludCA9IHZlYzQoZGF0YV9wb2ludC54eXogLyBkYXRhX3BvaW50LncgKyBtYXQzKHRyYW5zKSAqIHRvdmVjMyhnZXRfbWFya2VyX29mZnNldCgpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gcHZpZXcgKiBkYXRhX3BvaW50OwoKICAgIC8vIENvbXB1dGUgdHJhbnNmb3JtIGZvciB0aGUgb2Zmc2V0IHZlY3RvcnMgZnJvbSB0aGUgY2VudHJhbCBwb2ludAogICAgdHJhbnMgPSAoZ2V0X2JpbGxib2FyZCgpID8gcHJvamVjdGlvbiA6IHB2aWV3KSAqIHFtYXQoZ2V0X3JvdGF0aW9ucygpKSAqIHRyYW5zOwogICAgdmVjNCBzcHJpdGVfY2VudGVyID0gdHJhbnMgKiB2ZWM0KHNwcml0ZV9iYm94X2NlbnRyZSwgMCwgMCk7CgogICAgdmVjNCB2Y2xpcCA9IGRhdGFfcG9pbnQgKyBzcHJpdGVfY2VudGVyOwoKICAgIC8vIEV4dHJhIGJ1ZmZlcmluZyBpcyByZXF1aXJlZCBhcm91bmQgc3ByaXRlcyB3aGljaCBhcmUgYW50aWFsaWFzZWQgc28gdGhhdAogICAgLy8gdGhlIGFudGlhbGlhcyBibHVyIGRvZXNuJ3QgZ2V0IGN1dCBvZmYgKHNlZSAjMTUpLiBUaGlzIGJsdXIgZmFsbHMgdG8KICAgIC8vIHplcm8gYXQgYSByYWRpdXMgb2YgQU5USUFMSUFTX1JBRElVUyBwaXhlbHMgaW4gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGVzCiAgICAvLyBhbmQgd2Ugd2FudCB0byBidWZmZXIgdGhlIHZlcnRpY2VzIGluIHRoZSAqc291cmNlKiBzcHJpdGUgY29vcmRpbmF0ZQogICAgLy8gc3lzdGVtIHNvIHRoYXQgd2UgZ2V0IHRoaXMgYW1vdW50IGluIHRoZSBvdXRwdXQgY29vcmRpbmF0ZXMuCiAgICAvLwogICAgLy8gSGVyZSB3ZSBjYWxjdWxhdGUgdGhlIGRlcml2YXRpdmUgb2YgdGhlIG1hcHBpbmcgZnJvbSBzcHJpdGUgeHkKICAgIC8vIGNvb3JkaW5hdGVzIChkZWZpbmVkIGJ5IGB0cmFuc2ApIGludG8gdGhlIHZpZXdwb3J0IHBpeGVsIGNvb3JkaW5hdGVzLgogICAgLy8gVGhlIGRlcml2YXRpdmUgbmVlZHMgdG8gaW5jbHVkZSB0aGUgcHJvcGVyIHRlcm0gZm9yIHRoZSBwZXJzcGVjdGl2ZQogICAgLy8gZGl2aWRlIGludG8gTkRDLCBldmFsdWF0ZWQgYXQgdGhlIGNlbnRyZSBwb2ludCBgdmNsaXBgLgogICAgbWF0NCBkX25kY19kX2NsaXAgPSBtYXQ0KAogICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLAogICAgICAgIC12Y2xpcC54eXovKHZjbGlwLncqdmNsaXAudyksICAgICAgICAgIDAuMAogICAgKTsKICAgIG1hdDIgZHh5dl9keHlzID0gZGlhZ20oMC41ICogcHhfcGVyX3VuaXQgKiBnZXRfcmVzb2x1dGlvbigpKSAqIG1hdDIoZF9uZGNfZF9jbGlwKnRyYW5zKTsKICAgIC8vIE5vdywgb3VyIGJ1ZmZlciBzaXplIGlzIGV4cHJlc3NlZCBpbiB2aWV3cG9ydCBwaXhlbHMgYnV0IHdlIGdldCBiYWNrIHRvCiAgICAvLyB0aGUgc3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHVzaW5nIHRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlCiAgICAvLyB0cmFuc2Zvcm1hdGlvbiAoZm9yIGlzb3Ryb3BpYyB0cmFuc2Zvcm1hdGlvbnMpLiBGb3IgYW5pc290cm9waWMKICAgIC8vIHRyYW5zZm9ybWF0aW9ucywgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB0d28gcHJpbmNpcGxlIHNjYWxlIGZhY3RvcnMKICAgIC8vIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlOgogICAgZmxvYXQgdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgPSBzcXJ0KGFicyhfZGV0ZXJtaW5hbnQoZHh5dl9keHlzKSkpOwoKICAgIC8vIEluIHRoZSBmcmFnbWVudCBzaGFkZXIgd2Ugd2FudCBvdXIgc2lnbmVkIGRpc3RhbmNlIGluIHZpZXdwb3J0IChwaXhlbCkKICAgIC8vIGNvb3JkcyBmb3IgZGlyZWN0IHVzZSBpbiBhbnRpYWxpYXNpbmcgc3RlcCBmdW5jdGlvbnMuIFdlIHRoZXJlZm9yZSBuZWVkCiAgICAvLyBhIHNjYWxpbmcgZmFjdG9yIHNpbWlsYXIgdG8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUsIGJ1dCBpbmNsdWRpbmcKICAgIC8vIHRoZSB1di0+c3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHNjYWxpbmcgZmFjdG9yIGFzIHdlbGwuICBXZSBjaG9vc2UgdG8KICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94ICp4KiB3aWR0aCBmb3IgdGhpcy4gVGhpcyBjb21lcyB3aXRoIHNvbWUKICAgIC8vIGNvbnNpc3RlbmN5IGNvbmRpdGlvbnM6CiAgICAvLyAqIEZvciBwcm9jZWR1cmFsIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0aGUgc3ByaXRlIGJvdW5kaW5nIGJveCB0byBiZQogICAgLy8gICBzcXVhcmUuIChJZiBub3QsIHRoZSB1diBjb29yZGluYXRlcyB3aWxsIGJlIGFuaXNvdHJvcGljYWxseSBzY2FsZWQgYW5kCiAgICAvLyAgIGFueSBjYWxjdWxhdGlvbiBiYXNlZCBvbiB0aGVtIHdpbGwgbm90IGJlIGEgZGlzdGFuY2UgZnVuY3Rpb24uKQogICAgLy8gKiBGb3Igc2FtcGxlZCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdG8gY29uc2lzdGVudGx5IGNob29zZSB0aGUgKngqCiAgICAvLyAgIGZvciB0aGUgc2NhbGluZyBpbiBnZXRfZGlzdGFuY2VmaWVsZF9zY2FsZSgpLgogICAgZmxvYXQgc3ByaXRlX2Zyb21fdV9zY2FsZSA9IGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpOwogICAgZnJhZ191dnNjYWxlID0gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgKiBzcHJpdGVfZnJvbV91X3NjYWxlOwogICAgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlID0gZGlzdGFuY2VmaWVsZF9zY2FsZSgpOwogICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3IoKSk7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2X29mZnNldF93aWR0aCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIC8vIHNjcmVlbiBzcGFjZSBjb29yZGluYXRlcyBvZiB0aGUgcG9zaXRpb24KICAgIHZlYzQgcXVhZF92ZXJ0ZXggPSAodHJhbnMgKiB2ZWM0KDIuMCAqIGJib3hfc2lnbmVkX3JhZGl1cyAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaE/gKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleHR1cmVfc2l6ZTsKZmxvYXQgZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpe3JldHVybiBhdGxhc190ZXh0dXJlX3NpemU7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gZmxvYXQgcHhfcGVyX3VuaXQ7CmZsb2F0IGdldF9weF9wZXJfdW5pdCgpe3JldHVybiBweF9wZXJfdW5pdDt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCmluIHZlYzQgZnJhZ19jb2xvcjsKaW4gdmVjMiBmcmFnX3V2OwoKI2RlZmluZSBDSVJDTEUgICAgICAgICAgICAwCiNkZWZpbmUgUkVDVEFOR0xFICAgICAgICAgMQojZGVmaW5lIFJPVU5ERURfUkVDVEFOR0xFIDIKI2RlZmluZSBESVNUQU5DRUZJRUxEICAgICAzCiNkZWZpbmUgVFJJQU5HTEUgICAgICAgICAgNAoKI2RlZmluZSBNX1NRUlRfMiAgICAgICAgICAxLjQxNDIxMzUKCgovLyBIYWxmIHdpZHRoIG9mIGFudGlhbGlhc2luZyBzbW9vdGhzdGVwCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9CgppbiBmbG9hdCBmcmFnX3V2c2NhbGU7CmluIGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKaW4gdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHMuIENvbnZlcnQgdG8gc2FtZSBkaXN0YW5jZQogICAgLy8gc2NhbGluZyBhcyBmX3V2LnggZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlIHByb2NlZHVyYWwgc2lnbmVkX2Rpc3RhbmNlCiAgICAvLyBjYWxjdWxhdGlvbnMuCiAgICByZXR1cm4gZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlICogdGV4dHVyZShkaXN0YW5jZWZpZWxkLCB1dikucjsKfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoYm9vbCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIHJldHVybiAwLjA7Cn0KCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CgogICAgaW50IHNoYXBlID0gZ2V0X3NoYXBlX3R5cGUoKTsKICAgIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSA9IDAuMDsKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKICAgIGlmKHNoYXBlID09IENJUkNMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBjaXJjbGUoZnJhZ191dik7CiAgICBlbHNlIGlmKHNoYXBlID09IERJU1RBTkNFRklFTEQpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gc2NhbGVkX2Rpc3RhbmNlZmllbGQoZGlzdGFuY2VmaWVsZCwgdGV4X3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUk9VTkRFRF9SRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gcm91bmRlZF9yZWN0YW5nbGUoZnJhZ191diwgdmVjMigwLjIpLCB2ZWMyKDAuOCkpOwogICAgZWxzZSBpZihzaGFwZSA9PSBSRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gMS4wOyAvLyByZWN0YW5nbGUoZl91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFRSSUFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHRyaWFuZ2xlKGZyYWdfdXYpOwoKICAgIHNpZ25lZF9kaXN0YW5jZSAqPSBmcmFnX3V2c2NhbGU7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoMC4wLCBzaWduZWRfZGlzdGFuY2UpOwogICAgdmVjNCBmaW5hbF9jb2xvciA9IHZlYzQoZnJhZ19jb2xvci54eXosIDApOwogICAgZmlsbChpbWFnZSwgZnJhZ19jb2xvciwgZnJhZ191diwgaW5zaWRlLCBmaW5hbF9jb2xvcik7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmaW5hbF9jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4ercXVhZF9vZmZzZXSCq3R5cGVfbGVuZ3RoAqRmbGF0xzAXnMSYwAAAqMC8dJvAAACowGq8lMBSuK7Ai2yXwFK4rsCmm3TAAACowGq8lMBSuK7Aqm1hcmtlcnNpemWCq3R5cGVfbGVuZ3RoAqRmbGF0xzAXi2yJQXJoo0GgGotBcmijQdejiEGHFqVB30+JQYcWpUFI4V5BcmijQc/3h0GHFqVBrW1hcmtlcl9vZmZzZXSCq3R5cGVfbGVuZ3RoA6RmbGF0x0gXhxZ5wMUgVMEAAAAAhxZ5wMUgVMEAAAAAhxZ5wMUgVMEAAAAAhxZ5wMUgVMEAAAAAhxb5wMUgVMEAAAAAAAAAAMUgVMEAAAAApWNvbG9ygqt0eXBlX2xlbmd0aASkZmxhdMdgFwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP691dl9vZmZzZXRfd2lkdGiCq3R5cGVfbGVuZ3RoBKRmbGF0x2AXAMCUPgDA7z4AQKg+AGADPwDAlD4AoA8/AECoPgAgGz8AwJQ+ACAnPwBAqD4A4DI/AMCUPgDgPj8AQKg+AKBKPwCAMD4AIA8/AIBPPgCgGj8AwJQ+AMDXPgBAqD4AQO8+o3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTHSBeaObRDAAD4QQAAAABmhs5DAAD4QQAAAAA00+hDAAD4QQAAAAAAkAFEAAD4QQAAAABmtg5EAAD4QQAAAABmtg5EAAD4QQAAAACpcm90YXRpb25zgqt0eXBlX2xlbmd0aASkZmxhdMdgFwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP4indmlzaWJsZccHaKY5MTQ3MzmkbmFtZdkhbGluZXNlZ21lbnRzLTExMjI1MTYwMDUyMTI2MTEwNTY3qmF0dHJpYnV0ZXODpWNvbG9yxwdopjkxNjE5OalsaW5lcG9pbnTHB2imOTE2MTk4qWxpbmV3aWR0aMcHaKY5MTYyMDCkdXVpZLQxMTIyNTE2MDA1MjEyNjExMDU2N6ljYW1fc3BhY2WlcGl4ZWypcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2MjAxqHVuaWZvcm1zh6dwaWNraW5nwqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAKlvYmplY3RfaWQBp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAiKd2aXNpYmxlxwdopjkxNDc4MaRuYW1l2SFsaW5lc2VnbWVudHMtMTQyMTA4NjA5NjcyMjI1NTA0ODKqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjIwNKR1dWlktDE0MjEwODYwOTY3MjIyNTUwNDgyqWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjkxNjIwNah1bmlmb3Jtc4urY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIEEAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAr2xpbmV3aWR0aF9zdGFydMo/gAAAp3BpY2tpbmfCrWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQBqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAiKd2aXNpYmxlxwdopjkxNDc5MqRuYW1l2SBsaW5lc2VnbWVudHMtNTE4ODMyNzI0MjY2MTgxODQ3MaphdHRyaWJ1dGVzgalsaW5lcG9pbnTHB2imOTE2MjA4pHV1aWSzNTE4ODMyNzI0MjY2MTgxODQ3MaljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYyMDmodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACBBAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKP4AAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAN4AEKx0cmFuc3BhcmVuY3nHB2imOTE0OTQxpXNwYWNlxwdopjkxNDk0Nqx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/pG5hbWW4dGV4dC04MTQxNDMxMTEwNDc3MTkyMDQ3qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAUq3B4X3Blcl91bml0yj+AAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/qmNvbG9ycmFuZ2XCqWJpbGxib2FyZMKoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACtcHJlcHJvamVjdGlvbsdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nYW1iaWVudMcMF2Zm5j5mZuY+ZmbmPqluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACtZGlzdGFuY2VmaWVsZIqpbWluRmlsdGVyrExpbmVhckZpbHRlcqphbmlzb3Ryb3B5ykGAAACpbWFnRmlsdGVyrExpbmVhckZpbHRlcqV3cmFwU65SZXBlYXRXcmFwcGluZ6RkYXRhrXRleHR1cmVfYXRsYXOsdGhyZWVfZm9ybWF0qVJlZEZvcm1hdKRzaXplks0EAM0EAKV3cmFwVK5SZXBlYXRXcmFwcGluZ6R0eXBlp1NhbXBsZXKqdGhyZWVfdHlwZalGbG9hdFR5cGWnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAALJhdGxhc190ZXh0dXJlX3NpemXKRIAAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAABZEAADhQ6VpbWFnZcKpb2JqZWN0X2lkAKpzaGFwZV90eXBlA7B0cmFuc2Zvcm1fbWFya2VywqtsaWdodF9jb2xvcscMFwAAAD8AAAA/AAAAP6tkZXB0aF9zaGlmdMoAAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjkxNDc3NattYXJrZXJzcGFjZccHaKY5MTQ5NTWxYXR0cmlidXRlX3VwZGF0ZXLHB2imOTE2MjQ2qG92ZXJkcmF3xwdopjkxNDk0Mq91bmlmb3JtX3VwZGF0ZXLHB2imOTE2MjQ3pWZhY2VzxwdopjkxNjI0NaR1dWlkszgxNDE0MzExMTA0NzcxOTIwNDetdmVydGV4X3NvdXJjZdocOQpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKXsKICAgIHZlYzIgYmJveF9zaWduZWRfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsgLy8gbm90ZTsgY29tcG9uZW50cyBtYXkgYmUgbmVnYXRpdmUuCiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9zaWduZWRfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIG1hdDQgdHJhbnMgPSBnZXRfdHJhbnNmb3JtX21hcmtlcigpID8gbW9kZWwgOiBtYXQ0KDEuMCk7CgogICAgLy8gQ29tcHV0ZSBjZW50cmUgb2YgYmlsbGJvYXJkIGluIGNsaXBwaW5nIGNvb3JkaW5hdGVzCiAgICAvLyBBbHdheXMgdHJhbnNmb3JtIHRleHQvc2NhdHRlciBwb3NpdGlvbiBhcmd1bWVudAogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICAvLyBtYXliZSB0cmFuc2Zvcm0gbWFya2VyX29mZnNldCArIGdseXBoIG9mZnNldHMKICAgIGRhdGFfcG9pbnQgPSB2ZWM0KGRhdGFfcG9pbnQueHl6IC8gZGF0YV9wb2ludC53ICsgbWF0Myh0cmFucykgKiB0b3ZlYzMoZ2V0X21hcmtlcl9vZmZzZXQoKSksIDEpOwogICAgZGF0YV9wb2ludCA9IHB2aWV3ICogZGF0YV9wb2ludDsKCiAgICAvLyBDb21wdXRlIHRyYW5zZm9ybSBmb3IgdGhlIG9mZnNldCB2ZWN0b3JzIGZyb20gdGhlIGNlbnRyYWwgcG9pbnQKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwoKICAgIHZlYzQgdmNsaXAgPSBkYXRhX3BvaW50ICsgc3ByaXRlX2NlbnRlcjsKCiAgICAvLyBFeHRyYSBidWZmZXJpbmcgaXMgcmVxdWlyZWQgYXJvdW5kIHNwcml0ZXMgd2hpY2ggYXJlIGFudGlhbGlhc2VkIHNvIHRoYXQKICAgIC8vIHRoZSBhbnRpYWxpYXMgYmx1ciBkb2Vzbid0IGdldCBjdXQgb2ZmIChzZWUgIzE1KS4gVGhpcyBibHVyIGZhbGxzIHRvCiAgICAvLyB6ZXJvIGF0IGEgcmFkaXVzIG9mIEFOVElBTElBU19SQURJVVMgcGl4ZWxzIGluIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlcwogICAgLy8gYW5kIHdlIHdhbnQgdG8gYnVmZmVyIHRoZSB2ZXJ0aWNlcyBpbiB0aGUgKnNvdXJjZSogc3ByaXRlIGNvb3JkaW5hdGUKICAgIC8vIHN5c3RlbSBzbyB0aGF0IHdlIGdldCB0aGlzIGFtb3VudCBpbiB0aGUgb3V0cHV0IGNvb3JkaW5hdGVzLgogICAgLy8KICAgIC8vIEhlcmUgd2UgY2FsY3VsYXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBtYXBwaW5nIGZyb20gc3ByaXRlIHh5CiAgICAvLyBjb29yZGluYXRlcyAoZGVmaW5lZCBieSBgdHJhbnNgKSBpbnRvIHRoZSB2aWV3cG9ydCBwaXhlbCBjb29yZGluYXRlcy4KICAgIC8vIFRoZSBkZXJpdmF0aXZlIG5lZWRzIHRvIGluY2x1ZGUgdGhlIHByb3BlciB0ZXJtIGZvciB0aGUgcGVyc3BlY3RpdmUKICAgIC8vIGRpdmlkZSBpbnRvIE5EQywgZXZhbHVhdGVkIGF0IHRoZSBjZW50cmUgcG9pbnQgYHZjbGlwYC4KICAgIG1hdDQgZF9uZGNfZF9jbGlwID0gbWF0NCgKICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwKICAgICAgICAtdmNsaXAueHl6Lyh2Y2xpcC53KnZjbGlwLncpLCAgICAgICAgICAwLjAKICAgICk7CiAgICBtYXQyIGR4eXZfZHh5cyA9IGRpYWdtKDAuNSAqIHB4X3Blcl91bml0ICogZ2V0X3Jlc29sdXRpb24oKSkgKiBtYXQyKGRfbmRjX2RfY2xpcCp0cmFucyk7CiAgICAvLyBOb3csIG91ciBidWZmZXIgc2l6ZSBpcyBleHByZXNzZWQgaW4gdmlld3BvcnQgcGl4ZWxzIGJ1dCB3ZSBnZXQgYmFjayB0bwogICAgLy8gdGhlIHNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSB1c2luZyB0aGUgc2NhbGUgZmFjdG9yIG9mIHRoZQogICAgLy8gdHJhbnNmb3JtYXRpb24gKGZvciBpc290cm9waWMgdHJhbnNmb3JtYXRpb25zKS4gRm9yIGFuaXNvdHJvcGljCiAgICAvLyB0cmFuc2Zvcm1hdGlvbnMsIHRoZSBnZW9tZXRyaWMgbWVhbiBvZiB0aGUgdHdvIHByaW5jaXBsZSBzY2FsZSBmYWN0b3JzCiAgICAvLyBpcyBhIHJlYXNvbmFibGUgY29tcHJvbWlzZToKICAgIGZsb2F0IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlID0gc3FydChhYnMoX2RldGVybWluYW50KGR4eXZfZHh5cykpKTsKCiAgICAvLyBJbiB0aGUgZnJhZ21lbnQgc2hhZGVyIHdlIHdhbnQgb3VyIHNpZ25lZCBkaXN0YW5jZSBpbiB2aWV3cG9ydCAocGl4ZWwpCiAgICAvLyBjb29yZHMgZm9yIGRpcmVjdCB1c2UgaW4gYW50aWFsaWFzaW5nIHN0ZXAgZnVuY3Rpb25zLiBXZSB0aGVyZWZvcmUgbmVlZAogICAgLy8gYSBzY2FsaW5nIGZhY3RvciBzaW1pbGFyIHRvIHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlLCBidXQgaW5jbHVkaW5nCiAgICAvLyB0aGUgdXYtPnNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSBzY2FsaW5nIGZhY3RvciBhcyB3ZWxsLiAgV2UgY2hvb3NlIHRvCiAgICAvLyB1c2UgdGhlIGJvdW5kaW5nIGJveCAqeCogd2lkdGggZm9yIHRoaXMuIFRoaXMgY29tZXMgd2l0aCBzb21lCiAgICAvLyBjb25zaXN0ZW5jeSBjb25kaXRpb25zOgogICAgLy8gKiBGb3IgcHJvY2VkdXJhbCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdGhlIHNwcml0ZSBib3VuZGluZyBib3ggdG8gYmUKICAgIC8vICAgc3F1YXJlLiAoSWYgbm90LCB0aGUgdXYgY29vcmRpbmF0ZXMgd2lsbCBiZSBhbmlzb3Ryb3BpY2FsbHkgc2NhbGVkIGFuZAogICAgLy8gICBhbnkgY2FsY3VsYXRpb24gYmFzZWQgb24gdGhlbSB3aWxsIG5vdCBiZSBhIGRpc3RhbmNlIGZ1bmN0aW9uLikKICAgIC8vICogRm9yIHNhbXBsZWQgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRvIGNvbnNpc3RlbnRseSBjaG9vc2UgdGhlICp4KgogICAgLy8gICBmb3IgdGhlIHNjYWxpbmcgaW4gZ2V0X2Rpc3RhbmNlZmllbGRfc2NhbGUoKS4KICAgIGZsb2F0IHNwcml0ZV9mcm9tX3Vfc2NhbGUgPSBhYnMoZ2V0X21hcmtlcnNpemUoKS54KTsKICAgIGZyYWdfdXZzY2FsZSA9IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlICogc3ByaXRlX2Zyb21fdV9zY2FsZTsKICAgIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSA9IGRpc3RhbmNlZmllbGRfc2NhbGUoKTsKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191diA9IGdldF91digpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBzY3JlZW4gc3BhY2UgY29vcmRpbmF0ZXMgb2YgdGhlIHBvc2l0aW9uCiAgICB2ZWM0IHF1YWRfdmVydGV4ID0gKHRyYW5zICogdmVjNCgyLjAgKiBiYm94X3NpZ25lZF9yYWRpdXMgKiBnZXRfcG9zaXRpb24oKSwgMC4wLCAwLjApKTsKICAgIGdsX1Bvc2l0aW9uID0gdmNsaXAgKyBxdWFkX3ZlcnRleDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hP4CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgppbiB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgZnJhZ191djsKCiNkZWZpbmUgQ0lSQ0xFICAgICAgICAgICAgMAojZGVmaW5lIFJFQ1RBTkdMRSAgICAgICAgIDEKI2RlZmluZSBST1VOREVEX1JFQ1RBTkdMRSAyCiNkZWZpbmUgRElTVEFOQ0VGSUVMRCAgICAgMwojZGVmaW5lIFRSSUFOR0xFICAgICAgICAgIDQKCiNkZWZpbmUgTV9TUVJUXzIgICAgICAgICAgMS40MTQyMTM1CgoKLy8gSGFsZiB3aWR0aCBvZiBhbnRpYWxpYXNpbmcgc21vb3Roc3RlcAojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44Ci8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzLiBDb252ZXJ0IHRvIHNhbWUgZGlzdGFuY2UKICAgIC8vIHNjYWxpbmcgYXMgZl91di54IGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBwcm9jZWR1cmFsIHNpZ25lZF9kaXN0YW5jZQogICAgLy8gY2FsY3VsYXRpb25zLgogICAgcmV0dXJuIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSAqIHRleHR1cmUoZGlzdGFuY2VmaWVsZCwgdXYpLnI7Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGJvb2wgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICByZXR1cm4gMC4wOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewoKICAgIGludCBzaGFwZSA9IGdldF9zaGFwZV90eXBlKCk7CiAgICBmbG9hdCBzaWduZWRfZGlzdGFuY2UgPSAwLjA7CiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CiAgICBpZihzaGFwZSA9PSBDSVJDTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gY2lyY2xlKGZyYWdfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBESVNUQU5DRUZJRUxEKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKDAuMCwgc2lnbmVkX2Rpc3RhbmNlKTsKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6ptYXJrZXJzaXplgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMcAF6Vjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHABevdXZfb2Zmc2V0X3dpZHRogqt0eXBlX2xlbmd0aASkZmxhdMcAF6Nwb3OCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTHABeIp3Zpc2libGXHB2imOTE1MDMypG5hbWXZIWxpbmVzZWdtZW50cy0xNDEzNDk2MjQ3NjIzODI1Njc5M6phdHRyaWJ1dGVzg6Vjb2xvcscHaKY5MTYyNTGpbGluZXBvaW50xwdopjkxNjI1MKlsaW5ld2lkdGjHB2imOTE2MjUypHV1aWS0MTQxMzQ5NjI0NzYyMzgyNTY3OTOpY2FtX3NwYWNlpXBpeGVsqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjkxNjI1M6h1bmlmb3Jtc4encGlja2luZ8KlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACpb2JqZWN0X2lkAadsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5MTQ3ODKkbmFtZdkgbGluZXNlZ21lbnRzLTgwMDM4MDkyNjg2NDMwMzUwNzmqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjI1NqR1dWlkszgwMDM4MDkyNjg2NDMwMzUwNzmpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2MjU3qHVuaWZvcm1zi6tjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACgQQAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACvbGluZXdpZHRoX3N0YXJ0yj+AAACncGlja2luZ8KtbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZAGpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAADeABCsdHJhbnNwYXJlbmN5xwdopjkxNTEzOKVzcGFjZccHaKY5MTUxNDOsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAC/AAAAvwAAAD8AAAC/AAAAvwAAAD8AAAA/AAAAP6RuYW1luXRleHQtMTA1NTUwOTI5Njk3Njg1ODcwODOpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABSrcHhfcGVyX3VuaXTKP4AAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+qY29sb3JyYW5nZcKpYmlsbGJvYXJkwqhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAK1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXZmbmPmZm5j5mZuY+qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK1kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZadsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAAFkQAAOFDpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLCq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAACoY29sb3JtYXDCp3Zpc2libGXHB2imOTE0Nzgwq21hcmtlcnNwYWNlxwdopjkxNTE1MbFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5MTYyOTSob3ZlcmRyYXfHB2imOTE1MTM5r3VuaWZvcm1fdXBkYXRlcscHaKY5MTYyOTWlZmFjZXPHB2imOTE2MjkzpHV1aWS0MTA1NTUwOTI5Njk3Njg1ODcwODOtdmVydGV4X3NvdXJjZdocOQpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKXsKICAgIHZlYzIgYmJveF9zaWduZWRfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsgLy8gbm90ZTsgY29tcG9uZW50cyBtYXkgYmUgbmVnYXRpdmUuCiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9zaWduZWRfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIG1hdDQgdHJhbnMgPSBnZXRfdHJhbnNmb3JtX21hcmtlcigpID8gbW9kZWwgOiBtYXQ0KDEuMCk7CgogICAgLy8gQ29tcHV0ZSBjZW50cmUgb2YgYmlsbGJvYXJkIGluIGNsaXBwaW5nIGNvb3JkaW5hdGVzCiAgICAvLyBBbHdheXMgdHJhbnNmb3JtIHRleHQvc2NhdHRlciBwb3NpdGlvbiBhcmd1bWVudAogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICAvLyBtYXliZSB0cmFuc2Zvcm0gbWFya2VyX29mZnNldCArIGdseXBoIG9mZnNldHMKICAgIGRhdGFfcG9pbnQgPSB2ZWM0KGRhdGFfcG9pbnQueHl6IC8gZGF0YV9wb2ludC53ICsgbWF0Myh0cmFucykgKiB0b3ZlYzMoZ2V0X21hcmtlcl9vZmZzZXQoKSksIDEpOwogICAgZGF0YV9wb2ludCA9IHB2aWV3ICogZGF0YV9wb2ludDsKCiAgICAvLyBDb21wdXRlIHRyYW5zZm9ybSBmb3IgdGhlIG9mZnNldCB2ZWN0b3JzIGZyb20gdGhlIGNlbnRyYWwgcG9pbnQKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwoKICAgIHZlYzQgdmNsaXAgPSBkYXRhX3BvaW50ICsgc3ByaXRlX2NlbnRlcjsKCiAgICAvLyBFeHRyYSBidWZmZXJpbmcgaXMgcmVxdWlyZWQgYXJvdW5kIHNwcml0ZXMgd2hpY2ggYXJlIGFudGlhbGlhc2VkIHNvIHRoYXQKICAgIC8vIHRoZSBhbnRpYWxpYXMgYmx1ciBkb2Vzbid0IGdldCBjdXQgb2ZmIChzZWUgIzE1KS4gVGhpcyBibHVyIGZhbGxzIHRvCiAgICAvLyB6ZXJvIGF0IGEgcmFkaXVzIG9mIEFOVElBTElBU19SQURJVVMgcGl4ZWxzIGluIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlcwogICAgLy8gYW5kIHdlIHdhbnQgdG8gYnVmZmVyIHRoZSB2ZXJ0aWNlcyBpbiB0aGUgKnNvdXJjZSogc3ByaXRlIGNvb3JkaW5hdGUKICAgIC8vIHN5c3RlbSBzbyB0aGF0IHdlIGdldCB0aGlzIGFtb3VudCBpbiB0aGUgb3V0cHV0IGNvb3JkaW5hdGVzLgogICAgLy8KICAgIC8vIEhlcmUgd2UgY2FsY3VsYXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBtYXBwaW5nIGZyb20gc3ByaXRlIHh5CiAgICAvLyBjb29yZGluYXRlcyAoZGVmaW5lZCBieSBgdHJhbnNgKSBpbnRvIHRoZSB2aWV3cG9ydCBwaXhlbCBjb29yZGluYXRlcy4KICAgIC8vIFRoZSBkZXJpdmF0aXZlIG5lZWRzIHRvIGluY2x1ZGUgdGhlIHByb3BlciB0ZXJtIGZvciB0aGUgcGVyc3BlY3RpdmUKICAgIC8vIGRpdmlkZSBpbnRvIE5EQywgZXZhbHVhdGVkIGF0IHRoZSBjZW50cmUgcG9pbnQgYHZjbGlwYC4KICAgIG1hdDQgZF9uZGNfZF9jbGlwID0gbWF0NCgKICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwKICAgICAgICAtdmNsaXAueHl6Lyh2Y2xpcC53KnZjbGlwLncpLCAgICAgICAgICAwLjAKICAgICk7CiAgICBtYXQyIGR4eXZfZHh5cyA9IGRpYWdtKDAuNSAqIHB4X3Blcl91bml0ICogZ2V0X3Jlc29sdXRpb24oKSkgKiBtYXQyKGRfbmRjX2RfY2xpcCp0cmFucyk7CiAgICAvLyBOb3csIG91ciBidWZmZXIgc2l6ZSBpcyBleHByZXNzZWQgaW4gdmlld3BvcnQgcGl4ZWxzIGJ1dCB3ZSBnZXQgYmFjayB0bwogICAgLy8gdGhlIHNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSB1c2luZyB0aGUgc2NhbGUgZmFjdG9yIG9mIHRoZQogICAgLy8gdHJhbnNmb3JtYXRpb24gKGZvciBpc290cm9waWMgdHJhbnNmb3JtYXRpb25zKS4gRm9yIGFuaXNvdHJvcGljCiAgICAvLyB0cmFuc2Zvcm1hdGlvbnMsIHRoZSBnZW9tZXRyaWMgbWVhbiBvZiB0aGUgdHdvIHByaW5jaXBsZSBzY2FsZSBmYWN0b3JzCiAgICAvLyBpcyBhIHJlYXNvbmFibGUgY29tcHJvbWlzZToKICAgIGZsb2F0IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlID0gc3FydChhYnMoX2RldGVybWluYW50KGR4eXZfZHh5cykpKTsKCiAgICAvLyBJbiB0aGUgZnJhZ21lbnQgc2hhZGVyIHdlIHdhbnQgb3VyIHNpZ25lZCBkaXN0YW5jZSBpbiB2aWV3cG9ydCAocGl4ZWwpCiAgICAvLyBjb29yZHMgZm9yIGRpcmVjdCB1c2UgaW4gYW50aWFsaWFzaW5nIHN0ZXAgZnVuY3Rpb25zLiBXZSB0aGVyZWZvcmUgbmVlZAogICAgLy8gYSBzY2FsaW5nIGZhY3RvciBzaW1pbGFyIHRvIHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlLCBidXQgaW5jbHVkaW5nCiAgICAvLyB0aGUgdXYtPnNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSBzY2FsaW5nIGZhY3RvciBhcyB3ZWxsLiAgV2UgY2hvb3NlIHRvCiAgICAvLyB1c2UgdGhlIGJvdW5kaW5nIGJveCAqeCogd2lkdGggZm9yIHRoaXMuIFRoaXMgY29tZXMgd2l0aCBzb21lCiAgICAvLyBjb25zaXN0ZW5jeSBjb25kaXRpb25zOgogICAgLy8gKiBGb3IgcHJvY2VkdXJhbCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdGhlIHNwcml0ZSBib3VuZGluZyBib3ggdG8gYmUKICAgIC8vICAgc3F1YXJlLiAoSWYgbm90LCB0aGUgdXYgY29vcmRpbmF0ZXMgd2lsbCBiZSBhbmlzb3Ryb3BpY2FsbHkgc2NhbGVkIGFuZAogICAgLy8gICBhbnkgY2FsY3VsYXRpb24gYmFzZWQgb24gdGhlbSB3aWxsIG5vdCBiZSBhIGRpc3RhbmNlIGZ1bmN0aW9uLikKICAgIC8vICogRm9yIHNhbXBsZWQgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRvIGNvbnNpc3RlbnRseSBjaG9vc2UgdGhlICp4KgogICAgLy8gICBmb3IgdGhlIHNjYWxpbmcgaW4gZ2V0X2Rpc3RhbmNlZmllbGRfc2NhbGUoKS4KICAgIGZsb2F0IHNwcml0ZV9mcm9tX3Vfc2NhbGUgPSBhYnMoZ2V0X21hcmtlcnNpemUoKS54KTsKICAgIGZyYWdfdXZzY2FsZSA9IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlICogc3ByaXRlX2Zyb21fdV9zY2FsZTsKICAgIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSA9IGRpc3RhbmNlZmllbGRfc2NhbGUoKTsKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191diA9IGdldF91digpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBzY3JlZW4gc3BhY2UgY29vcmRpbmF0ZXMgb2YgdGhlIHBvc2l0aW9uCiAgICB2ZWM0IHF1YWRfdmVydGV4ID0gKHRyYW5zICogdmVjNCgyLjAgKiBiYm94X3NpZ25lZF9yYWRpdXMgKiBnZXRfcG9zaXRpb24oKSwgMC4wLCAwLjApKTsKICAgIGdsX1Bvc2l0aW9uID0gdmNsaXAgKyBxdWFkX3ZlcnRleDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hP4CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgppbiB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgZnJhZ191djsKCiNkZWZpbmUgQ0lSQ0xFICAgICAgICAgICAgMAojZGVmaW5lIFJFQ1RBTkdMRSAgICAgICAgIDEKI2RlZmluZSBST1VOREVEX1JFQ1RBTkdMRSAyCiNkZWZpbmUgRElTVEFOQ0VGSUVMRCAgICAgMwojZGVmaW5lIFRSSUFOR0xFICAgICAgICAgIDQKCiNkZWZpbmUgTV9TUVJUXzIgICAgICAgICAgMS40MTQyMTM1CgoKLy8gSGFsZiB3aWR0aCBvZiBhbnRpYWxpYXNpbmcgc21vb3Roc3RlcAojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44Ci8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzLiBDb252ZXJ0IHRvIHNhbWUgZGlzdGFuY2UKICAgIC8vIHNjYWxpbmcgYXMgZl91di54IGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBwcm9jZWR1cmFsIHNpZ25lZF9kaXN0YW5jZQogICAgLy8gY2FsY3VsYXRpb25zLgogICAgcmV0dXJuIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSAqIHRleHR1cmUoZGlzdGFuY2VmaWVsZCwgdXYpLnI7Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGJvb2wgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICByZXR1cm4gMC4wOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewoKICAgIGludCBzaGFwZSA9IGdldF9zaGFwZV90eXBlKCk7CiAgICBmbG9hdCBzaWduZWRfZGlzdGFuY2UgPSAwLjA7CiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CiAgICBpZihzaGFwZSA9PSBDSVJDTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gY2lyY2xlKGZyYWdfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBESVNUQU5DRUZJRUxEKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKDAuMCwgc2lnbmVkX2Rpc3RhbmNlKTsKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMcwF5zEmMAAAKjAvHSbwAAAqMBqvJTAUriuwItsl8BSuK7Appt0wAAAqMBqvJTAUriuwKptYXJrZXJzaXplgqt0eXBlX2xlbmd0aAKkZmxhdMcwF4tsiUFyaKNBoBqLQXJoo0HXo4hBhxalQd9PiUGHFqVBSOFeQXJoo0HP94dBhxalQa1tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMdIF4cW+cDHS6PAAAAAAIcW+cDHS6PAAAAAAIcW+cDHS6PAAAAAAIcW+cDHS6PAAAAAAIcWecHHS6PAAAAAAIcW+cDHS6PAAAAAAKVjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHYBcAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD+vdXZfb2Zmc2V0X3dpZHRogqt0eXBlX2xlbmd0aASkZmxhdMdgFwDAlD4AwO8+AECoPgBgAz8AwJQ+AKAPPwBAqD4AIBs/AMCUPgAgJz8AQKg+AOAyPwDAlD4A4D4/AECoPgCgSj8AgDA+ACAPPwCATz4AoBo/AMCUPgDA1z4AQKg+AEDvPqNwb3OCq3R5cGVfbGVuZ3RoA6RmbGF0x0gXAICbQwCAxEIAAAAAAICbQwBAMUMAAAAAAICbQwAggEMAAAAAAICbQwCgp0MAAAAAAICbQwAgz0MAAAAAAICbQwAgz0MAAAAAqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTHYBcAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD+Ip3Zpc2libGXHB2imOTE1MjgypG5hbWXZIGxpbmVzZWdtZW50cy00MDk1ODM3Mjk3NDk0ODE0NDg1qmF0dHJpYnV0ZXODpWNvbG9yxwdopjkxNjI5OalsaW5lcG9pbnTHB2imOTE2Mjk4qWxpbmV3aWR0aMcHaKY5MTYzMDCkdXVpZLM0MDk1ODM3Mjk3NDk0ODE0NDg1qWNhbV9zcGFjZaVwaXhlbKlwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYzMDGodW5pZm9ybXOHp3BpY2tpbmfCpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAqW9iamVjdF9pZAGnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACIp3Zpc2libGXHB2imOTE1MzM3pG5hbWXZIGxpbmVzZWdtZW50cy04MTM5NTAzMTcyNjcwODMxMzM3qmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5MTYzMDSkdXVpZLM4MTM5NTAzMTcyNjcwODMxMzM3qWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjkxNjMwNah1bmlmb3Jtc4urY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIEEAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAr2xpbmV3aWR0aF9zdGFydMo/gAAAp3BpY2tpbmfCrWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQBqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAiKd2aXNpYmxlxwdopjkxNTM3M6RuYW1l2SBsaW5lc2VnbWVudHMtNTc0MjYwNDU5ODY2NTU2ODI4MqphdHRyaWJ1dGVzgalsaW5lcG9pbnTHB2imOTE2MzA4pHV1aWSzNTc0MjYwNDU5ODY2NTU2ODI4MqljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYzMDmodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACBBAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKP4AAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAIindmlzaWJsZccHaKY5MTU0MDmkbmFtZdkhbGluZXNlZ21lbnRzLTE1NDE2MTcwOTMyOTgzNDI3NzQ0qmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5MTYzMTKkdXVpZLQxNTQxNjE3MDkzMjk4MzQyNzc0NKljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYzMTOodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACBBAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKP4AAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAIindmlzaWJsZccHaKY5MTU0NDWkbmFtZdkgbGluZXNlZ21lbnRzLTE0ODI3NzcwNjMwOTI5NjU1MjWqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjMxNqR1dWlkszE0ODI3NzcwNjMwOTI5NjU1MjWpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2MzE3qHVuaWZvcm1zi6tjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACvbGluZXdpZHRoX3N0YXJ0yj+AAACncGlja2luZ8KtbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZAGpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACIp3Zpc2libGXHB2imOTE1NDgwpG5hbWXZIGxpbmVzZWdtZW50cy01Njc2NDY2MDI3ODc2MzMxMDU0qmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5MTYzMjCkdXVpZLM1Njc2NDY2MDI3ODc2MzMxMDU0qWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjkxNjMyMah1bmlmb3Jtc4urY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAoEEAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAr2xpbmV3aWR0aF9zdGFydMo/gAAAp3BpY2tpbmfCrWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQBqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAiKd2aXNpYmxlxwdopjkxNTUxNqRuYW1lv2xpbmVzZWdtZW50cy0xNjgzNTAzOTA4MTM5MTM4NDGqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjkxNjMyNKR1dWlksjE2ODM1MDM5MDgxMzkxMzg0MaljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYzMjWodW5pZm9ybXOLq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAKBBAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK9saW5ld2lkdGhfc3RhcnTKP4AAAKdwaWNraW5nwq1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAaljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAN4AEKx0cmFuc3BhcmVuY3nHB2imOTE1NTU3pXNwYWNlxwdopjkxNTU2Mqx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/pG5hbWW3dGV4dC00ODE1MTI2MDEyOTM0NzMzODOpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABSrcHhfcGVyX3VuaXTKP4AAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+qY29sb3JyYW5nZcKpYmlsbGJvYXJkwqhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAK1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXZmbmPmZm5j5mZuY+qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK1kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZadsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAAFkQAAOFDpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLCq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAACoY29sb3JtYXDCp3Zpc2libGXHB2imOTE1NTcxq21hcmtlcnNwYWNlxwdopjkxNTU3NbFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5MTYzNjKob3ZlcmRyYXfHB2imOTE1NTU4r3VuaWZvcm1fdXBkYXRlcscHaKY5MTYzNjOlZmFjZXPHB2imOTE2MzYxpHV1aWSyNDgxNTEyNjAxMjkzNDczMzgzrXZlcnRleF9zb3VyY2XaHDkKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIG1hcmtlcnNpemU7CnZlYzIgZ2V0X21hcmtlcnNpemUoKXtyZXR1cm4gbWFya2Vyc2l6ZTt9CmluIHZlYzQgcm90YXRpb25zOwp2ZWM0IGdldF9yb3RhdGlvbnMoKXtyZXR1cm4gcm90YXRpb25zO30KaW4gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQppbiB2ZWMzIHBvczsKdmVjMyBnZXRfcG9zKCl7cmV0dXJuIHBvczt9CmluIHZlYzIgcXVhZF9vZmZzZXQ7CnZlYzIgZ2V0X3F1YWRfb2Zmc2V0KCl7cmV0dXJuIHF1YWRfb2Zmc2V0O30KaW4gdmVjNCB1dl9vZmZzZXRfd2lkdGg7CnZlYzQgZ2V0X3V2X29mZnNldF93aWR0aCgpe3JldHVybiB1dl9vZmZzZXRfd2lkdGg7fQppbiB2ZWMzIG1hcmtlcl9vZmZzZXQ7CnZlYzMgZ2V0X21hcmtlcl9vZmZzZXQoKXtyZXR1cm4gbWFya2VyX29mZnNldDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleF9kaW07CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwpvdXQgdmVjMiBmcmFnX3V2OwpvdXQgZmxvYXQgZnJhZ191dnNjYWxlOwpvdXQgZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwpvdXQgdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCgptYXQ0IHFtYXQodmVjNCBxdWF0KXsKICAgIGZsb2F0IG51bSA9IHF1YXQueCAqIDIuMDsKICAgIGZsb2F0IG51bTIgPSBxdWF0LnkgKiAyLjA7CiAgICBmbG9hdCBudW0zID0gcXVhdC56ICogMi4wOwogICAgZmxvYXQgbnVtNCA9IHF1YXQueCAqIG51bTsKICAgIGZsb2F0IG51bTUgPSBxdWF0LnkgKiBudW0yOwogICAgZmxvYXQgbnVtNiA9IHF1YXQueiAqIG51bTM7CiAgICBmbG9hdCBudW03ID0gcXVhdC54ICogbnVtMjsKICAgIGZsb2F0IG51bTggPSBxdWF0LnggKiBudW0zOwogICAgZmxvYXQgbnVtOSA9IHF1YXQueSAqIG51bTM7CiAgICBmbG9hdCBudW0xMCA9IHF1YXQudyAqIG51bTsKICAgIGZsb2F0IG51bTExID0gcXVhdC53ICogbnVtMjsKICAgIGZsb2F0IG51bTEyID0gcXVhdC53ICogbnVtMzsKICAgIHJldHVybiBtYXQ0KAogICAgICAgICgxLjAgLSAobnVtNSArIG51bTYpKSwgKG51bTcgKyBudW0xMiksICAgICAgICAobnVtOCAtIG51bTExKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtNyAtIG51bTEyKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTYpKSwgKG51bTkgKyBudW0xMCksICAgICAgICAwLjAsCiAgICAgICAgKG51bTggKyBudW0xMSksICAgICAgICAobnVtOSAtIG51bTEwKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTUpKSwgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDEuMAogICAgKTsKfQoKZmxvYXQgZGlzdGFuY2VmaWVsZF9zY2FsZSgpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVsczsgY29udmVydCB0byBkaW1lbnNpb25sZXNzCiAgICAvLyB4LWNvb3JkaW5hdGUgb2YgdGV4dHVyZSBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHByb2dyYW1tYXRpYyB1dgogICAgLy8gZGlzdGFuY2UgZmllbGRzIGluIGZyYWdtZW50IHNoYWRlci4gU2VlIGFsc28gY29tbWVudHMgYmVsb3cuCiAgICB2ZWM0IHV2X3JlY3QgPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICBmbG9hdCBwaXhzaXplX3ggPSAodXZfcmVjdC56IC0gdXZfcmVjdC54KSAqIGdldF9hdGxhc190ZXh0dXJlX3NpemUoKTsKICAgIHJldHVybiAtMS4wL3BpeHNpemVfeDsKfQoKdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm1hdDIgZGlhZ20odmVjMiB2KXsKICAgIHJldHVybiBtYXQyKHYueCwgMC4wLCAwLjAsIHYueSk7Cn0KCmZsb2F0IF9kZXRlcm1pbmFudChtYXQyIG0pIHsKICByZXR1cm4gbVswXVswXSAqIG1bMV1bMV0gLSBtWzBdWzFdICogbVsxXVswXTsKfQoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCl7CiAgICB2ZWMyIGJib3hfc2lnbmVkX3JhZGl1cyA9IDAuNSAqIGdldF9tYXJrZXJzaXplKCk7IC8vIG5vdGU7IGNvbXBvbmVudHMgbWF5IGJlIG5lZ2F0aXZlLgogICAgdmVjMiBzcHJpdGVfYmJveF9jZW50cmUgPSBnZXRfcXVhZF9vZmZzZXQoKSArIGJib3hfc2lnbmVkX3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgLy8gQWx3YXlzIHRyYW5zZm9ybSB0ZXh0L3NjYXR0ZXIgcG9zaXRpb24gYXJndW1lbnQKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgLy8gbWF5YmUgdHJhbnNmb3JtIG1hcmtlcl9vZmZzZXQgKyBnbHlwaCBvZmZzZXRzCiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDModHJhbnMpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CgogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKCiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBweF9wZXJfdW5pdCAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gYWJzKGdldF9tYXJrZXJzaXplKCkueCk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CiAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcigpKTsKICAgIGZyYWdfdXYgPSBnZXRfdXYoKTsKICAgIGZyYWdfdXZfb2Zmc2V0X3dpZHRoID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogYmJveF9zaWduZWRfcmFkaXVzICogZ2V0X3Bvc2l0aW9uKCksIDAuMCwgMC4wKSk7CiAgICBnbF9Qb3NpdGlvbiA9IHZjbGlwICsgcXVhZF92ZXJ0ZXg7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKfQoKr2ZyYWdtZW50X3NvdXJjZdoT+ApwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAovLyBUaGVzZSB2ZXJzaW9ucyBvZiBhYXN0ZXAgYXNzdW1lIHRoYXQgYGRpc3RgIGlzIGEgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9uCi8vIHdoaWNoIGhhcyBiZWVuIHNjYWxlZCB0byBiZSBpbiB1bml0cyBvZiBwaXhlbHMuCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDEgKyBBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IHRocmVzaG9sZDIsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMStBTlRJQUxJQVNfUkFESVVTLCBkaXN0KSAtCiAgICAgICAgICAgc21vb3Roc3RlcCh0aHJlc2hvbGQyLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDIrQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCi8vIFByb2NlZHVyYWwgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9ucyBvbiB0aGUgdXYgY29vcmRpbmF0ZSBwYXRjaCBbMCwxXXhbMCwxXQovLyBOb3RlIHRoYXQgZm9yIGFudGlhbGlhc2luZyB0byB3b3JrIHByb3Blcmx5IHRoZXNlIHNob3VsZCBiZSAqc2NhbGUgcHJlc2VydmluZyoKLy8gKElmIHlvdSBtdXN0IHJlc2NhbGUgdXYsIG1ha2Ugc3VyZSB0byBwdXQgdGhlIHNjYWxlIGZhY3RvciBiYWNrIGluIGxhdGVyLikKZmxvYXQgdHJpYW5nbGUodmVjMiBQKXsKICAgIFAgLT0gdmVjMigwLjUpOwogICAgZmxvYXQgeCA9IE1fU1FSVF8yICogKFAueCAtIFAueSk7CiAgICBmbG9hdCB5ID0gTV9TUVJUXzIgKiAoUC54ICsgUC55KTsKICAgIGZsb2F0IHIxID0gbWF4KGFicyh4KSwgYWJzKHkpKSAtIDEuMC8oMi4wKk1fU1FSVF8yKTsKICAgIGZsb2F0IHIyID0gUC55OwogICAgcmV0dXJuIC1tYXgocjEscjIpOwp9CgpmbG9hdCBjaXJjbGUodmVjMiB1dil7CiAgICByZXR1cm4gMC41LWxlbmd0aCh1di12ZWMyKDAuNSkpOwp9CgpmbG9hdCByZWN0YW5nbGUodmVjMiB1dil7CiAgICB2ZWMyIGQgPSBtYXgoLXV2LCB1di12ZWMyKDEpKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpKTsKfQoKZmxvYXQgcm91bmRlZF9yZWN0YW5nbGUodmVjMiB1diwgdmVjMiB0bCwgdmVjMiBicil7CiAgICB2ZWMyIGQgPSBtYXgodGwtdXYsIHV2LWJyKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpLXRsLngpOwp9Cgp2b2lkIGZpbGwoYm9vbCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBjb2xvciA9IG1peChjb2xvciwgZmlsbGNvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIGZpbGwoc2FtcGxlcjJEIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIHZlYzQgaW1fY29sb3IgPSB0ZXh0dXJlKGltYWdlLCB1di55eCk7CiAgICBjb2xvciA9IG1peChjb2xvciwgaW1fY29sb3IsIGluZmlsbCk7Cn0KCmluIGZsb2F0IGZyYWdfdXZzY2FsZTsKaW4gZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwppbiB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwogICAgdmVjNCB1dl9vZmYgPSBmcmFnX3V2X29mZnNldF93aWR0aDsKICAgIHZlYzIgdGV4X3V2ID0gbWl4KHV2X29mZi54eSwgdXZfb2ZmLnp3LCBjbGFtcChmcmFnX3V2LCAwLjAsIDEuMCkpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBzY2FsZWRfZGlzdGFuY2VmaWVsZChkaXN0YW5jZWZpZWxkLCB0ZXhfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBST1VOREVEX1JFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSByb3VuZGVkX3JlY3RhbmdsZShmcmFnX3V2LCB2ZWMyKDAuMiksIHZlYzIoMC44KSk7CiAgICBlbHNlIGlmKHNoYXBlID09IFJFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSAxLjA7IC8vIHJlY3RhbmdsZShmX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gVFJJQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gdHJpYW5nbGUoZnJhZ191dik7CgogICAgc2lnbmVkX2Rpc3RhbmNlICo9IGZyYWdfdXZzY2FsZTsKICAgIGZsb2F0IGluc2lkZSA9IGFhc3RlcCgwLjAsIHNpZ25lZF9kaXN0YW5jZSk7CiAgICB2ZWM0IGZpbmFsX2NvbG9yID0gdmVjNChmcmFnX2NvbG9yLnh5eiwgMCk7CiAgICBmaWxsKGltYWdlLCBmcmFnX2NvbG9yLCBmcmFnX3V2LCBpbnNpZGUsIGZpbmFsX2NvbG9yKTsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZpbmFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZmluYWxfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZpbmFsX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzh6txdWFkX29mZnNldIKrdHlwZV9sZW5ndGgCpGZsYXTHABeqbWFya2Vyc2l6ZYKrdHlwZV9sZW5ndGgCpGZsYXTHABetbWFya2VyX29mZnNldIKrdHlwZV9sZW5ndGgDpGZsYXTHABelY29sb3KCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXr3V2X29mZnNldF93aWR0aIKrdHlwZV9sZW5ndGgEpGZsYXTHABejcG9zgqt0eXBlX2xlbmd0aAOkZmxhdMcAF6lyb3RhdGlvbnOCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXiKd2aXNpYmxlxwdopjkxNTY1MaRuYW1l2SFsaW5lc2VnbWVudHMtMTE4Mzk2Mjg0OTcxNjY3OTEyMjKqYXR0cmlidXRlc4OlY29sb3LHB2imOTE2MzY3qWxpbmVwb2ludMcHaKY5MTYzNjapbGluZXdpZHRoxwdopjkxNjM2OKR1dWlktDExODM5NjI4NDk3MTY2NzkxMjIyqWNhbV9zcGFjZaVwaXhlbKlwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5MTYzNjmodW5pZm9ybXOHp3BpY2tpbmfCpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAqW9iamVjdF9pZAGnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAADeABCsdHJhbnNwYXJlbmN5xwdopjkxNTcwN6VzcGFjZccHaKY5MTU3MTKsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAC/AAAAvwAAAD8AAAC/AAAAvwAAAD8AAAA/AAAAP6RuYW1luHRleHQtNzcwNDUxNzQzODE2MTYzMzU4MKljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc94AFKtweF9wZXJfdW5pdMo/gAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6pjb2xvcnJhbmdlwqliaWxsYm9hcmTCqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAArXByZXByb2plY3Rpb27HQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/p2FtYmllbnTHDBdmZuY+ZmbmPmZm5j6pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAArWRpc3RhbmNlZmllbGSKqW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKqYW5pc290cm9wecpBgAAAqW1hZ0ZpbHRlcqxMaW5lYXJGaWx0ZXKld3JhcFOuUmVwZWF0V3JhcHBpbmekZGF0Ya10ZXh0dXJlX2F0bGFzrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZZLNBADNBACld3JhcFSuUmVwZWF0V3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACyYXRsYXNfdGV4dHVyZV9zaXplykSAAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAAAWRAAA4UOlaW1hZ2XCqW9iamVjdF9pZACqc2hhcGVfdHlwZQOwdHJhbnNmb3JtX21hcmtlcsKrbGlnaHRfY29sb3LHDBcAAAA/AAAAPwAAAD+rZGVwdGhfc2hpZnTKAAAAAKhjb2xvcm1hcMKndmlzaWJsZccHaKY5MTU3MjGrbWFya2Vyc3BhY2XHB2imOTE1NzI1sWF0dHJpYnV0ZV91cGRhdGVyxwdopjkxNjQwNqhvdmVyZHJhd8cHaKY5MTU3MDivdW5pZm9ybV91cGRhdGVyxwdopjkxNjQwN6VmYWNlc8cHaKY5MTY0MDWkdXVpZLM3NzA0NTE3NDM4MTYxNjMzNTgwrXZlcnRleF9zb3VyY2XaHDkKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIG1hcmtlcnNpemU7CnZlYzIgZ2V0X21hcmtlcnNpemUoKXtyZXR1cm4gbWFya2Vyc2l6ZTt9CmluIHZlYzQgcm90YXRpb25zOwp2ZWM0IGdldF9yb3RhdGlvbnMoKXtyZXR1cm4gcm90YXRpb25zO30KaW4gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQppbiB2ZWMzIHBvczsKdmVjMyBnZXRfcG9zKCl7cmV0dXJuIHBvczt9CmluIHZlYzIgcXVhZF9vZmZzZXQ7CnZlYzIgZ2V0X3F1YWRfb2Zmc2V0KCl7cmV0dXJuIHF1YWRfb2Zmc2V0O30KaW4gdmVjNCB1dl9vZmZzZXRfd2lkdGg7CnZlYzQgZ2V0X3V2X29mZnNldF93aWR0aCgpe3JldHVybiB1dl9vZmZzZXRfd2lkdGg7fQppbiB2ZWMzIG1hcmtlcl9vZmZzZXQ7CnZlYzMgZ2V0X21hcmtlcl9vZmZzZXQoKXtyZXR1cm4gbWFya2VyX29mZnNldDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleF9kaW07CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwpvdXQgdmVjMiBmcmFnX3V2OwpvdXQgZmxvYXQgZnJhZ191dnNjYWxlOwpvdXQgZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwpvdXQgdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCgptYXQ0IHFtYXQodmVjNCBxdWF0KXsKICAgIGZsb2F0IG51bSA9IHF1YXQueCAqIDIuMDsKICAgIGZsb2F0IG51bTIgPSBxdWF0LnkgKiAyLjA7CiAgICBmbG9hdCBudW0zID0gcXVhdC56ICogMi4wOwogICAgZmxvYXQgbnVtNCA9IHF1YXQueCAqIG51bTsKICAgIGZsb2F0IG51bTUgPSBxdWF0LnkgKiBudW0yOwogICAgZmxvYXQgbnVtNiA9IHF1YXQueiAqIG51bTM7CiAgICBmbG9hdCBudW03ID0gcXVhdC54ICogbnVtMjsKICAgIGZsb2F0IG51bTggPSBxdWF0LnggKiBudW0zOwogICAgZmxvYXQgbnVtOSA9IHF1YXQueSAqIG51bTM7CiAgICBmbG9hdCBudW0xMCA9IHF1YXQudyAqIG51bTsKICAgIGZsb2F0IG51bTExID0gcXVhdC53ICogbnVtMjsKICAgIGZsb2F0IG51bTEyID0gcXVhdC53ICogbnVtMzsKICAgIHJldHVybiBtYXQ0KAogICAgICAgICgxLjAgLSAobnVtNSArIG51bTYpKSwgKG51bTcgKyBudW0xMiksICAgICAgICAobnVtOCAtIG51bTExKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtNyAtIG51bTEyKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTYpKSwgKG51bTkgKyBudW0xMCksICAgICAgICAwLjAsCiAgICAgICAgKG51bTggKyBudW0xMSksICAgICAgICAobnVtOSAtIG51bTEwKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTUpKSwgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDEuMAogICAgKTsKfQoKZmxvYXQgZGlzdGFuY2VmaWVsZF9zY2FsZSgpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVsczsgY29udmVydCB0byBkaW1lbnNpb25sZXNzCiAgICAvLyB4LWNvb3JkaW5hdGUgb2YgdGV4dHVyZSBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHByb2dyYW1tYXRpYyB1dgogICAgLy8gZGlzdGFuY2UgZmllbGRzIGluIGZyYWdtZW50IHNoYWRlci4gU2VlIGFsc28gY29tbWVudHMgYmVsb3cuCiAgICB2ZWM0IHV2X3JlY3QgPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICBmbG9hdCBwaXhzaXplX3ggPSAodXZfcmVjdC56IC0gdXZfcmVjdC54KSAqIGdldF9hdGxhc190ZXh0dXJlX3NpemUoKTsKICAgIHJldHVybiAtMS4wL3BpeHNpemVfeDsKfQoKdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm1hdDIgZGlhZ20odmVjMiB2KXsKICAgIHJldHVybiBtYXQyKHYueCwgMC4wLCAwLjAsIHYueSk7Cn0KCmZsb2F0IF9kZXRlcm1pbmFudChtYXQyIG0pIHsKICByZXR1cm4gbVswXVswXSAqIG1bMV1bMV0gLSBtWzBdWzFdICogbVsxXVswXTsKfQoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCl7CiAgICB2ZWMyIGJib3hfc2lnbmVkX3JhZGl1cyA9IDAuNSAqIGdldF9tYXJrZXJzaXplKCk7IC8vIG5vdGU7IGNvbXBvbmVudHMgbWF5IGJlIG5lZ2F0aXZlLgogICAgdmVjMiBzcHJpdGVfYmJveF9jZW50cmUgPSBnZXRfcXVhZF9vZmZzZXQoKSArIGJib3hfc2lnbmVkX3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgLy8gQWx3YXlzIHRyYW5zZm9ybSB0ZXh0L3NjYXR0ZXIgcG9zaXRpb24gYXJndW1lbnQKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgLy8gbWF5YmUgdHJhbnNmb3JtIG1hcmtlcl9vZmZzZXQgKyBnbHlwaCBvZmZzZXRzCiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDModHJhbnMpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CgogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKCiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBweF9wZXJfdW5pdCAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gYWJzKGdldF9tYXJrZXJzaXplKCkueCk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CiAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcigpKTsKICAgIGZyYWdfdXYgPSBnZXRfdXYoKTsKICAgIGZyYWdfdXZfb2Zmc2V0X3dpZHRoID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogYmJveF9zaWduZWRfcmFkaXVzICogZ2V0X3Bvc2l0aW9uKCksIDAuMCwgMC4wKSk7CiAgICBnbF9Qb3NpdGlvbiA9IHZjbGlwICsgcXVhZF92ZXJ0ZXg7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKfQoKr2ZyYWdtZW50X3NvdXJjZdoT+ApwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAovLyBUaGVzZSB2ZXJzaW9ucyBvZiBhYXN0ZXAgYXNzdW1lIHRoYXQgYGRpc3RgIGlzIGEgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9uCi8vIHdoaWNoIGhhcyBiZWVuIHNjYWxlZCB0byBiZSBpbiB1bml0cyBvZiBwaXhlbHMuCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDEgKyBBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IHRocmVzaG9sZDIsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMStBTlRJQUxJQVNfUkFESVVTLCBkaXN0KSAtCiAgICAgICAgICAgc21vb3Roc3RlcCh0aHJlc2hvbGQyLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDIrQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCi8vIFByb2NlZHVyYWwgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9ucyBvbiB0aGUgdXYgY29vcmRpbmF0ZSBwYXRjaCBbMCwxXXhbMCwxXQovLyBOb3RlIHRoYXQgZm9yIGFudGlhbGlhc2luZyB0byB3b3JrIHByb3Blcmx5IHRoZXNlIHNob3VsZCBiZSAqc2NhbGUgcHJlc2VydmluZyoKLy8gKElmIHlvdSBtdXN0IHJlc2NhbGUgdXYsIG1ha2Ugc3VyZSB0byBwdXQgdGhlIHNjYWxlIGZhY3RvciBiYWNrIGluIGxhdGVyLikKZmxvYXQgdHJpYW5nbGUodmVjMiBQKXsKICAgIFAgLT0gdmVjMigwLjUpOwogICAgZmxvYXQgeCA9IE1fU1FSVF8yICogKFAueCAtIFAueSk7CiAgICBmbG9hdCB5ID0gTV9TUVJUXzIgKiAoUC54ICsgUC55KTsKICAgIGZsb2F0IHIxID0gbWF4KGFicyh4KSwgYWJzKHkpKSAtIDEuMC8oMi4wKk1fU1FSVF8yKTsKICAgIGZsb2F0IHIyID0gUC55OwogICAgcmV0dXJuIC1tYXgocjEscjIpOwp9CgpmbG9hdCBjaXJjbGUodmVjMiB1dil7CiAgICByZXR1cm4gMC41LWxlbmd0aCh1di12ZWMyKDAuNSkpOwp9CgpmbG9hdCByZWN0YW5nbGUodmVjMiB1dil7CiAgICB2ZWMyIGQgPSBtYXgoLXV2LCB1di12ZWMyKDEpKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpKTsKfQoKZmxvYXQgcm91bmRlZF9yZWN0YW5nbGUodmVjMiB1diwgdmVjMiB0bCwgdmVjMiBicil7CiAgICB2ZWMyIGQgPSBtYXgodGwtdXYsIHV2LWJyKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpLXRsLngpOwp9Cgp2b2lkIGZpbGwoYm9vbCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBjb2xvciA9IG1peChjb2xvciwgZmlsbGNvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIGZpbGwoc2FtcGxlcjJEIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIHZlYzQgaW1fY29sb3IgPSB0ZXh0dXJlKGltYWdlLCB1di55eCk7CiAgICBjb2xvciA9IG1peChjb2xvciwgaW1fY29sb3IsIGluZmlsbCk7Cn0KCmluIGZsb2F0IGZyYWdfdXZzY2FsZTsKaW4gZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwppbiB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwogICAgdmVjNCB1dl9vZmYgPSBmcmFnX3V2X29mZnNldF93aWR0aDsKICAgIHZlYzIgdGV4X3V2ID0gbWl4KHV2X29mZi54eSwgdXZfb2ZmLnp3LCBjbGFtcChmcmFnX3V2LCAwLjAsIDEuMCkpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBzY2FsZWRfZGlzdGFuY2VmaWVsZChkaXN0YW5jZWZpZWxkLCB0ZXhfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBST1VOREVEX1JFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSByb3VuZGVkX3JlY3RhbmdsZShmcmFnX3V2LCB2ZWMyKDAuMiksIHZlYzIoMC44KSk7CiAgICBlbHNlIGlmKHNoYXBlID09IFJFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSAxLjA7IC8vIHJlY3RhbmdsZShmX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gVFJJQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gdHJpYW5nbGUoZnJhZ191dik7CgogICAgc2lnbmVkX2Rpc3RhbmNlICo9IGZyYWdfdXZzY2FsZTsKICAgIGZsb2F0IGluc2lkZSA9IGFhc3RlcCgwLjAsIHNpZ25lZF9kaXN0YW5jZSk7CiAgICB2ZWM0IGZpbmFsX2NvbG9yID0gdmVjNChmcmFnX2NvbG9yLnh5eiwgMCk7CiAgICBmaWxsKGltYWdlLCBmcmFnX2NvbG9yLCBmcmFnX3V2LCBpbnNpZGUsIGZpbmFsX2NvbG9yKTsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZpbmFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZmluYWxfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZpbmFsX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzh6txdWFkX29mZnNldIKrdHlwZV9sZW5ndGgCpGZsYXTHABeqbWFya2Vyc2l6ZYKrdHlwZV9sZW5ndGgCpGZsYXTHABetbWFya2VyX29mZnNldIKrdHlwZV9sZW5ndGgDpGZsYXTHABelY29sb3KCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXr3V2X29mZnNldF93aWR0aIKrdHlwZV9sZW5ndGgEpGZsYXTHABejcG9zgqt0eXBlX2xlbmd0aAOkZmxhdMcAF6lyb3RhdGlvbnOCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXiKd2aXNpYmxlxwdopjkxNTgwMaRuYW1l2SBsaW5lc2VnbWVudHMtMjcyODAyNTMwOTEzNTA2ODY5NKphdHRyaWJ1dGVzg6Vjb2xvcscHaKY5MTY0MTGpbGluZXBvaW50xwdopjkxNjQxMKlsaW5ld2lkdGjHB2imOTE2NDEypHV1aWSzMjcyODAyNTMwOTEzNTA2ODY5NKljYW1fc3BhY2WlcGl4ZWypcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTE2NDEzqHVuaWZvcm1zh6dwaWNraW5nwqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAKlvYmplY3RfaWQBp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAjqx0cmFuc3BhcmVuY3nHB2imOTE1ODY0pXNwYWNlxwdopjkxNTg1Nax2ZXJ0ZXhhcnJheXOCp25vcm1hbHOCq3R5cGVfbGVuZ3RoA6RmbGF0x2AXAAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/qHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMdAF82Mp0POzG5CZkYVRM7MbkJmRhVEm9niQ82Mp0Ob2eJDzYynQ87MbkKaGa5DzsxuQpoZrkPMzJ5CzYynQ8zMnkKkbmFtZbdtZXNoLTU1ODczMjk2MDgwNDY0NTY4N6ljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc94AF75pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXLDqWJhY2tsaWdodMoAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAMhCAACAP6dkaWZmdXNlxwwXAACAPwAAgD8AAIA/qmNvbG9ycmFuZ2XCp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACnYW1iaWVudMcMF2Zm5j5mZuY+ZmbmPqluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACncGF0dGVybsKsbm9ybWFsbWF0cml4xyQXAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/onV21xcAAAAAAAAAAKdzaGFkaW5nwqhzcGVjdWxhcscMF83MTD7NzEw+zcxMPqdwaWNraW5nwq9saWdodF9kaXJlY3Rpb27HDBcAAIA/AACAPwAAgD+pb2JqZWN0X2lkAK11bmlmb3JtX2NvbG9y2BcAAAAAAAAAAAAAAADNzEw+q2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAAClY29sb3LCqXNoaW5pbmVzc8pCAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjkxNTg2NbFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5MTY0Mzeob3ZlcmRyYXfHB2imOTE1ODUyr3VuaWZvcm1fdXBkYXRlcscHaKY5MTY0MzilZmFjZXPHB2imOTE2NDM2pHV1aWSyNTU4NzMyOTYwODA0NjQ1Njg3rXZlcnRleF9zb3VyY2XaE0cKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMyBub3JtYWxzOwp2ZWMzIGdldF9ub3JtYWxzKCl7cmV0dXJuIG5vcm1hbHM7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMzIHNwZWN1bGFyOwp2ZWMzIGdldF9zcGVjdWxhcigpe3JldHVybiBzcGVjdWxhcjt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBhdHRlcm47CmJvb2wgZ2V0X3BhdHRlcm4oKXtyZXR1cm4gcGF0dGVybjt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGJvb2wgaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyOwpib29sIGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKXtyZXR1cm4gaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyO30KdW5pZm9ybSBmbG9hdCBiYWNrbGlnaHQ7CmZsb2F0IGdldF9iYWNrbGlnaHQoKXtyZXR1cm4gYmFja2xpZ2h0O30KdW5pZm9ybSB2ZWMzIGFtYmllbnQ7CnZlYzMgZ2V0X2FtYmllbnQoKXtyZXR1cm4gYW1iaWVudDt9CnVuaWZvcm0gbWF0MyBub3JtYWxtYXRyaXg7Cm1hdDMgZ2V0X25vcm1hbG1hdHJpeCgpe3JldHVybiBub3JtYWxtYXRyaXg7fQp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7CmZsb2F0IGdldF9zaGluaW5lc3MoKXtyZXR1cm4gc2hpbmluZXNzO30KdW5pZm9ybSB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CnVuaWZvcm0gdmVjMyBsaWdodF9jb2xvcjsKdmVjMyBnZXRfbGlnaHRfY29sb3IoKXtyZXR1cm4gbGlnaHRfY29sb3I7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBjb2xvcjsKYm9vbCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIHZlYzQgdW5pZm9ybV9jb2xvcjsKdmVjNCBnZXRfdW5pZm9ybV9jb2xvcigpe3JldHVybiB1bmlmb3JtX2NvbG9yO30KdW5pZm9ybSBib29sIHNoYWRpbmc7CmJvb2wgZ2V0X3NoYWRpbmcoKXtyZXR1cm4gc2hhZGluZzt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2RpcmVjdGlvbjsKdmVjMyBnZXRfbGlnaHRfZGlyZWN0aW9uKCl7cmV0dXJuIGxpZ2h0X2RpcmVjdGlvbjt9CgoKCm91dCB2ZWMyIGZyYWdfdXY7Cm91dCB2ZWMzIG9fbm9ybWFsOwpvdXQgdmVjMyBvX2NhbWRpcjsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7CnVuaWZvcm0gdmVjMyBleWVwb3NpdGlvbjsKCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQoZmxvYXQgdil7cmV0dXJuIHZlYzQodiwgMC4wLCAwLjAsIDAuMCk7fQp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgdmVydGV4X2NvbG9yKHZlYzMgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcih2ZWM0IGNvbG9yLCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGNvbG9yOwp9CnZlYzQgdmVydGV4X2NvbG9yKGJvb2wgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihib29sIHZhbHVlLCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihmbG9hdCB2YWx1ZSwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgaWYgKGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKSkgewogICAgICAgIHJldHVybiB2ZWM0KHZhbHVlLCAwLjAsIDAuMCwgMC4wKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0KfQoKdm9pZCByZW5kZXIodmVjNCBwb3NpdGlvbl93b3JsZCwgdmVjMyBub3JtYWwsIG1hdDQgdmlldywgbWF0NCBwcm9qZWN0aW9uKQp7CiAgICAvLyBub3JtYWwgaW4gd29ybGQgc3BhY2UKICAgIG9fbm9ybWFsID0gZ2V0X25vcm1hbG1hdHJpeCgpICogbm9ybWFsOwogICAgLy8gcG9zaXRpb24gaW4gY2xpcCBzcGFjZSAody8gZGVwdGgpCiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb24gKiB2aWV3ICogcG9zaXRpb25fd29ybGQ7IC8vIFRPRE8gY29uc2lkZXIgdXNpbmcgcHJvamVjdGlvbnZpZXcgZGlyZWN0bHkKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwogICAgLy8gZGlyZWN0aW9uIHRvIGNhbWVyYQogICAgb19jYW1kaXIgPSBwb3NpdGlvbl93b3JsZC54eXogLyBwb3NpdGlvbl93b3JsZC53IC0gZXllcG9zaXRpb247Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgLy8gZ2V0XyogZ2V0cyB0aGUgZ2xvYmFsIGlucHV0cyAodW5pZm9ybSwgc2FtcGxlciwgcG9zaXRpb24gYXJyYXkpCiAgICAvLyB0aG9zZSBmdW5jdGlvbnMgd2lsbCBnZXQgaW5zZXJ0ZWQgYnkgdGhlIHNoYWRlciBjcmVhdGlvbiBwaXBlbGluZQogICAgdmVjMyB2ZXJ0ZXhfcG9zaXRpb24gPSB0b3ZlYzMoZ2V0X3Bvc2l0aW9uKCkpOwogICAgaWYgKGlzbmFuKHZlcnRleF9wb3NpdGlvbi56KSkgewogICAgICAgIHZlcnRleF9wb3NpdGlvbi56ID0gMC4wOwogICAgfQogICAgdmVjNCBwb3NpdGlvbl93b3JsZCA9IG1vZGVsICogdmVjNCh2ZXJ0ZXhfcG9zaXRpb24sIDEpOwoKICAgIHJlbmRlcihwb3NpdGlvbl93b3JsZCwgZ2V0X25vcm1hbHMoKSwgdmlldywgcHJvamVjdGlvbik7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2ID0gdmVjMigxLjAgLSBmcmFnX3V2LnksIGZyYWdfdXYueCk7CiAgICBmcmFnX2NvbG9yID0gdmVydGV4X2NvbG9yKGdldF9jb2xvcigpLCBnZXRfY29sb3JyYW5nZSgpLCBjb2xvcm1hcCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfVmVydGV4SUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hcKCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzMgc3BlY3VsYXI7CnZlYzMgZ2V0X3NwZWN1bGFyKCl7cmV0dXJuIHNwZWN1bGFyO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGF0dGVybjsKYm9vbCBnZXRfcGF0dGVybigpe3JldHVybiBwYXR0ZXJuO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gYm9vbCBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7CmJvb2wgZ2V0X2ludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcigpe3JldHVybiBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7fQp1bmlmb3JtIGZsb2F0IGJhY2tsaWdodDsKZmxvYXQgZ2V0X2JhY2tsaWdodCgpe3JldHVybiBiYWNrbGlnaHQ7fQp1bmlmb3JtIHZlYzMgYW1iaWVudDsKdmVjMyBnZXRfYW1iaWVudCgpe3JldHVybiBhbWJpZW50O30KdW5pZm9ybSBtYXQzIG5vcm1hbG1hdHJpeDsKbWF0MyBnZXRfbm9ybWFsbWF0cml4KCl7cmV0dXJuIG5vcm1hbG1hdHJpeDt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHNoaW5pbmVzczsKZmxvYXQgZ2V0X3NoaW5pbmVzcygpe3JldHVybiBzaGluaW5lc3M7fQp1bmlmb3JtIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2NvbG9yOwp2ZWMzIGdldF9saWdodF9jb2xvcigpe3JldHVybiBsaWdodF9jb2xvcjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIGNvbG9yOwpib29sIGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gdmVjNCB1bmlmb3JtX2NvbG9yOwp2ZWM0IGdldF91bmlmb3JtX2NvbG9yKCl7cmV0dXJuIHVuaWZvcm1fY29sb3I7fQp1bmlmb3JtIGJvb2wgc2hhZGluZzsKYm9vbCBnZXRfc2hhZGluZygpe3JldHVybiBzaGFkaW5nO30KdW5pZm9ybSB2ZWMzIGRpZmZ1c2U7CnZlYzMgZ2V0X2RpZmZ1c2UoKXtyZXR1cm4gZGlmZnVzZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIHZlYzMgbGlnaHRfZGlyZWN0aW9uOwp2ZWMzIGdldF9saWdodF9kaXJlY3Rpb24oKXtyZXR1cm4gbGlnaHRfZGlyZWN0aW9uO30KCmluIHZlYzIgZnJhZ191djsKaW4gdmVjNCBmcmFnX2NvbG9yOwpmbGF0IGluIGludCBzYW1wbGVfZnJhZ19jb2xvcjsKCmluIHZlYzMgb19ub3JtYWw7CmluIHZlYzMgb19jYW1kaXI7CgovLyBTbW9vdGhlcyBvdXQgZWRnZSBhcm91bmQgMCBsaWdodCBpbnRlbnNpdHksIHNlZSBHTE1ha2llCmZsb2F0IHNtb290aF96ZXJvX21heChmbG9hdCB4KSB7CiAgICBjb25zdCBmbG9hdCBjID0gMC4wMDM5MDYyNSwgeHN3YXAgPSAwLjY0MDY3MDcxMjAxNTI3NTksIHlzd2FwID0gMC4yMDUwODM4MzkwMDE5MDk1NTsKICAgIGNvbnN0IGZsb2F0IHNoaWZ0ID0gMS4wICsgeHN3YXAgLSB5c3dhcDsKICAgIGZsb2F0IHBvdzggPSB4ICsgc2hpZnQ7CiAgICBwb3c4ID0gcG93OCAqIHBvdzg7IHBvdzggPSBwb3c4ICogcG93ODsgcG93OCA9IHBvdzggKiBwb3c4OwogICAgcmV0dXJuIHggPCB5c3dhcCA/IGMgKiBwb3c4IDogeDsKfQoKdmVjMyBibGlubnBob25nKHZlYzMgTiwgdmVjMyBWLCB2ZWMzIEwsIHZlYzMgY29sb3IpewogICAgZmxvYXQgYmFja2xpZ2h0ID0gZ2V0X2JhY2tsaWdodCgpOwogICAgZmxvYXQgZGlmZl9jb2VmZiA9IHNtb290aF96ZXJvX21heChkb3QoTCwgLU4pKSArCiAgICAgICAgYmFja2xpZ2h0ICogc21vb3RoX3plcm9fbWF4KGRvdChMLCBOKSk7CgogICAgLy8gc3BlY3VsYXIgY29lZmZpY2llbnQKICAgIHZlYzMgSCA9IG5vcm1hbGl6ZShMICsgVik7CgogICAgZmxvYXQgc3BlY19jb2VmZiA9IHBvdyhtYXgoZG90KEgsIC1OKSwgMC4wKSwgZ2V0X3NoaW5pbmVzcygpKSArCiAgICAgICAgYmFja2xpZ2h0ICogcG93KG1heChkb3QoSCwgTiksIDAuMCksIGdldF9zaGluaW5lc3MoKSk7CiAgICBpZiAoZGlmZl9jb2VmZiA8PSAwLjApCiAgICAgICAgc3BlY19jb2VmZiA9IDAuMDsKCiAgICAvLyBmaW5hbCBsaWdodGluZyBtb2RlbAogICAgcmV0dXJuIGdldF9saWdodF9jb2xvcigpICogdmVjMygKICAgICAgICBnZXRfZGlmZnVzZSgpICogZGlmZl9jb2VmZiAqIGNvbG9yICsKICAgICAgICBnZXRfc3BlY3VsYXIoKSAqIHNwZWNfY29lZmYKICAgICk7Cn0KCnZlYzQgZ2V0X2NvbG9yKHZlYzMgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQoKdmVjNCBnZXRfY29sb3IodmVjNCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBjb2xvcjsKfQoKdmVjNCBnZXRfY29sb3IoYm9vbCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBmcmFnX2NvbG9yOyAgLy8gY29sb3Igbm90IGluIHVuaWZvcm0KfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgaWYgKGdldF9wYXR0ZXJuKCkpIHsKICAgICAgICB2ZWMyIHNpemUgPSB2ZWMyKHRleHR1cmVTaXplKGNvbG9yLCAwKSk7CiAgICAgICAgdmVjMiBwb3MgPSBnbF9GcmFnQ29vcmQueHk7CiAgICAgICAgcmV0dXJuIHRleGVsRmV0Y2goY29sb3IsIGl2ZWMyKG1vZChwb3MueCwgc2l6ZS54KSwgbW9kKHBvcy55LCBzaXplLnkpKSwgMCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yLCB1dik7CiAgICB9Cn0KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgZ2V0X2NvbG9yKGJvb2wgY29sb3IsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGlmIChnZXRfaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyKCkpIHsKICAgICAgICByZXR1cm4gZ2V0X2NvbG9yX2Zyb21fY21hcChmcmFnX2NvbG9yLngsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZyYWdfY29sb3I7CiAgICB9Cn0KCnZlYzQgZ2V0X2NvbG9yKHNhbXBsZXIyRCB2YWx1ZXMsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGZsb2F0IHZhbHVlID0gdGV4dHVyZSh2YWx1ZXMsIHV2KS54OwogICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvciwgdXYpOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgdmVjNCByZWFsX2NvbG9yID0gZ2V0X2NvbG9yKHVuaWZvcm1fY29sb3IsIGZyYWdfdXYsIGdldF9jb2xvcnJhbmdlKCksIGNvbG9ybWFwKTsKICAgIHZlYzMgc2hhZGVkX2NvbG9yID0gcmVhbF9jb2xvci5yZ2I7CgogICAgaWYoZ2V0X3NoYWRpbmcoKSl7CiAgICAgICAgdmVjMyBMID0gZ2V0X2xpZ2h0X2RpcmVjdGlvbigpOwogICAgICAgIHZlYzMgTiA9IG5vcm1hbGl6ZShvX25vcm1hbCk7CiAgICAgICAgdmVjMyBsaWdodCA9IGJsaW5ucGhvbmcoTiwgbm9ybWFsaXplKG9fY2FtZGlyKSwgTCwgcmVhbF9jb2xvci5yZ2IpOwogICAgICAgIHNoYWRlZF9jb2xvciA9IGdldF9hbWJpZW50KCkgKiByZWFsX2NvbG9yLnJnYiArIGxpZ2h0OwogICAgfQoKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKHJlYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAocmVhbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gdmVjNChzaGFkZWRfY29sb3IsIHJlYWxfY29sb3IuYSk7Cn0Kr2JhY2tncm91bmRjb2xvcscHaKY5MTYwNTS1Y2FtZXJhX3JlbGF0aXZlX2xpZ2h0w6hjaGlsZHJlbpGMpXBsb3RzkY6sdHJhbnNwYXJlbmN5xwdopjkxNTg4NKVzcGFjZccHaKY5MTU4ODmsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTIA8gXAAAAAAAAgD/NzMw9AACAP83MTD4AAIA/mpmZPgAAgD/NzMw+AACAPwAAAD8AAIA/mpkZPwAAgD8zMzM/AACAP83MTD8AAIA/ZmZmPwAAgD8AAIA/AACAPwAAAABmZmY/zczMPWZmZj/NzEw+ZmZmP5qZmT5mZmY/zczMPmZmZj8AAAA/ZmZmP5qZGT9mZmY/MzMzP2ZmZj/NzEw/ZmZmP2ZmZj9mZmY/AACAP2ZmZj8AAAAAzcxMP83MzD3NzEw/zcxMPs3MTD+amZk+zcxMP83MzD7NzEw/AAAAP83MTD+amRk/zcxMPzMzMz/NzEw/zcxMP83MTD9mZmY/zcxMPwAAgD/NzEw/AAAAADMzMz/NzMw9MzMzP83MTD4zMzM/mpmZPjMzMz/NzMw+MzMzPwAAAD8zMzM/mpkZPzMzMz8zMzM/MzMzP83MTD8zMzM/ZmZmPzMzMz8AAIA/MzMzPwAAAACamRk/zczMPZqZGT/NzEw+mpkZP5qZmT6amRk/zczMPpqZGT8AAAA/mpkZP5qZGT+amRk/MzMzP5qZGT/NzEw/mpkZP2ZmZj+amRk/AACAP5qZGT8AAAAAAAAAP83MzD0AAAA/zcxMPgAAAD+amZk+AAAAP83MzD4AAAA/AAAAPwAAAD+amRk/AAAAPzMzMz8AAAA/zcxMPwAAAD9mZmY/AAAAPwAAgD8AAAA/AAAAAM3MzD7NzMw9zczMPs3MTD7NzMw+mpmZPs3MzD7NzMw+zczMPgAAAD/NzMw+mpkZP83MzD4zMzM/zczMPs3MTD/NzMw+ZmZmP83MzD4AAIA/zczMPgAAAACamZk+zczMPZqZmT7NzEw+mpmZPpqZmT6amZk+zczMPpqZmT4AAAA/mpmZPpqZGT+amZk+MzMzP5qZmT7NzEw/mpmZPmZmZj+amZk+AACAP5qZmT4AAAAAzcxMPs3MzD3NzEw+zcxMPs3MTD6amZk+zcxMPs3MzD7NzEw+AAAAP83MTD6amRk/zcxMPjMzMz/NzEw+zcxMP83MTD5mZmY/zcxMPgAAgD/NzEw+AAAAAM3MzD3NzMw9zczMPc3MTD7NzMw9mpmZPs3MzD3NzMw+zczMPQAAAD/NzMw9mpkZP83MzD0zMzM/zczMPc3MTD/NzMw9ZmZmP83MzD0AAIA/zczMPQAAAAAAAAAAzczMPQAAAADNzEw+AAAAAJqZmT4AAAAAzczMPgAAAAAAAAA/AAAAAJqZGT8AAAAAMzMzPwAAAADNzEw/AAAAAGZmZj8AAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoA6RmbGF0yAWsFwAAAD8AAAA/AAAAAAAAwD8AAAA/AAAAAAAAIEAAAAA/AAAAAAAAYEAAAAA/AAAAAAAAkEAAAAA/AAAAAAAAsEAAAAA/AAAAAAAA0EAAAAA/AAAAAAAA8EAAAAA/AAAAAAAACEEAAAA/AAAAAAAAGEEAAAA/AAAAAAAAKEEAAAA/AAAAAAAAAD8AAMA/AAAAAAAAwD8AAMA/AAAAAAAAIEAAAMA/AAAAAAAAYEAAAMA/AAAAAAAAkEAAAMA/AAAAAAAAsEAAAMA/AAAAAAAA0EAAAMA/AAAAAAAA8EAAAMA/AAAAAAAACEEAAMA/AAAAAAAAGEEAAMA/AAAAAAAAKEEAAMA/AAAAAAAAAD8AACBAAAAAAAAAwD8AACBAAAAAAAAAIEAAACBAAAAAAAAAYEAAACBAAAAAAAAAkEAAACBAAAAAAAAAsEAAACBAAAAAAAAA0EAAACBAAAAAAAAA8EAAACBAAAAAAAAACEEAACBAAAAAAAAAGEEAACBAAAAAAAAAKEEAACBAAAAAAAAAAD8AAGBAAAAAAAAAwD8AAGBAAAAAAAAAIEAAAGBAAAAAAAAAYEAAAGBAAAAAAAAAkEAAAGBAAAAAAAAAsEAAAGBAAAAAAAAA0EAAAGBAAAAAAAAA8EAAAGBAAAAAAAAACEEAAGBAAAAAAAAAGEEAAGBAAAAAAAAAKEEAAGBAAAAAAAAAAD8AAJBAAAAAAAAAwD8AAJBAAAAAAAAAIEAAAJBAAAAAAAAAYEAAAJBAAAAAAAAAkEAAAJBAAAAAAAAAsEAAAJBAAAAAAAAA0EAAAJBAAAAAAAAA8EAAAJBAAAAAAAAACEEAAJBAAAAAAAAAGEEAAJBAAAAAAAAAKEEAAJBAAAAAAAAAAD8AALBAAAAAAAAAwD8AALBAAAAAAAAAIEAAALBAAAAAAAAAYEAAALBAAAAAAAAAkEAAALBAAAAAAAAAsEAAALBAAAAAAAAA0EAAALBAAAAAAAAA8EAAALBAAAAAAAAACEEAALBAAAAAAAAAGEEAALBAAAAAAAAAKEEAALBAAAAAAAAAAD8AANBAAAAAAAAAwD8AANBAAAAAAAAAIEAAANBAAAAAAAAAYEAAANBAAAAAAAAAkEAAANBAAAAAAAAAsEAAANBAAAAAAAAA0EAAANBAAAAAAAAA8EAAANBAAAAAAAAACEEAANBAAAAAAAAAGEEAANBAAAAAAAAAKEEAANBAAAAAAAAAAD8AAPBAAAAAAAAAwD8AAPBAAAAAAAAAIEAAAPBAAAAAAAAAYEAAAPBAAAAAAAAAkEAAAPBAAAAAAAAAsEAAAPBAAAAAAAAA0EAAAPBAAAAAAAAA8EAAAPBAAAAAAAAACEEAAPBAAAAAAAAAGEEAAPBAAAAAAAAAKEEAAPBAAAAAAAAAAD8AAAhBAAAAAAAAwD8AAAhBAAAAAAAAIEAAAAhBAAAAAAAAYEAAAAhBAAAAAAAAkEAAAAhBAAAAAAAAsEAAAAhBAAAAAAAA0EAAAAhBAAAAAAAA8EAAAAhBAAAAAAAACEEAAAhBAAAAAAAAGEEAAAhBAAAAAAAAKEEAAAhBAAAAAAAAAD8AABhBAAAAAAAAwD8AABhBAAAAAAAAIEAAABhBAAAAAAAAYEAAABhBAAAAAAAAkEAAABhBAAAAAAAAsEAAABhBAAAAAAAA0EAAABhBAAAAAAAA8EAAABhBAAAAAAAACEEAABhBAAAAAAAAGEEAABhBAAAAAAAAKEEAABhBAAAAAAAAAD8AAChBAAAAAAAAwD8AAChBAAAAAAAAIEAAAChBAAAAAAAAYEAAAChBAAAAAAAAkEAAAChBAAAAAAAAsEAAAChBAAAAAAAA0EAAAChBAAAAAAAA8EAAAChBAAAAAAAACEEAAChBAAAAAAAAGEEAAChBAAAAAAAAKEEAAChBAAAAAKRuYW1lvGhlYXRtYXAtMTI2MDgzNjMyNDQ3NjY0OTg0NzipY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABe+aW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyw6liYWNrbGlnaHTKAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nZGlmZnVzZccMFwAAAAAAAAAAAAAAAKpjb2xvcnJhbmdl1xeTNow9Bth7P6dsb3djbGlw2BfAtIg+E7afOxWpqD4AAIA/qGhpZ2hjbGlw2BeARX4/6PlnP/VjEz4AAIA/p2FtYmllbnTHDBdmZuY+ZmbmPmZm5j6pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAp3BhdHRlcm7CrG5vcm1hbG1hdHJpeMckFwAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP6dzaGFkaW5nwqhzcGVjdWxhcscMFwAAAAAAAAAAAAAAAKdub3JtYWxzxwwXAAAAAAAAAAAAAAAAp3BpY2tpbmfCr2xpZ2h0X2RpcmVjdGlvbscMFwAAgD8AAIA/AACAP6lvYmplY3RfaWQArXVuaWZvcm1fY29sb3KKqW1pbkZpbHRlcq1OZWFyZXN0RmlsdGVyqmFuaXNvdHJvcHnKP4AAAKltYWdGaWx0ZXKtTmVhcmVzdEZpbHRlcqV3cmFwU7NDbGFtcFRvRWRnZVdyYXBwaW5npGRhdGHIAZAXUO8YP9ADVT/vag8/arInP/dpbj9op0o/ixhSPzM0Lj8mQUI/E9kyPyTUOj/J3VI/PYoKP7GwCD+iiBM/D6geP1gxiz7e1NM+xkJlP33UEz4VCcw+YBE+PiEi4j6MJ6c+Xs9vP5ffzT16Y7w+kUgvP8AFVz/oOSQ/x3VeP3E9UD/ViE0/Ni4HPi5mpj0G2Hs/Z+81P9JYrz2PjdA9lmecPfCiBT+AJh8/X1urPiTR1z5Y41E/kzaMPfWNMT6072o/V23RPoRQKD6wkUQ/ANHfPvnWQj9wtrw+bl8mP15qzD3AKGw/Lf9GPqtCJD8jLwM/OgIAP8qFlj7TV6I+UIlKP1hxdz9hzos+VygPP3pfvj6kC80++CaxPvikTj9unoo+Ubg3PjlX7z5HPwM/UJrUPVtqFD+96V8/ENRcPnfYKD+oYiU/q7oOPxvt0T7uQg0/IPyEPg1oxz4KGmQ+sY7VPk5j0j4Uhns/0rUxP+1IIT42Ym4/j+dlPqsJ2T0wp+k+0PkNPyQaLj+qKWw/vsFmP6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemXXFQoAAAAKAAAApXdyYXBUs0NsYW1wVG9FZGdlV3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAAClY29sb3LCqXNoaW5pbmVzc8oAAAAAqGNvbG9ybWFwialtaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKP4AAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTs0NsYW1wVG9FZGdlV3JhcHBpbmekZGF0YcgQABfAtIg+E7afOxWpqD4AAIA/JXqJPkpeHTwWvas+AACAPxo2ij6ynW88OsmuPgAAgD996Io+aF2jPD7NsT4AAIA/cZGLPn9p0TybyLQ+AACAP7EwjD4AAwE9lbu3PgAAgD+Cxow+16EaPWGluj4AAIA/wVKNPnXoND0jhr0+AACAP07VjT6DNU49t13APgAAgD9ITo4+/7NmPXcrwz4AAIA/sr2OPsGLfj1j78U+AACAP0Yjjz6a7Yo9WKnIPgAAgD8of48+p1uWPfNYyz4AAIA/V9GPPv6ZoT0R/s0+AACAP7EZkD73r6w9kZjQPgAAgD9YWJA+z6K3PQ8o0z4AAIA/Ko2QPsR3wj1prNU+AACAP0q4kD6PM809WyXYPgAAgD+U2ZA+SdjXPeaS2j4AAIA/TvGQPpxp4j2l9Nw+AACAPzL/kD6j6ew9d0rfPgAAgD9kA5E+71n3PTqU4T4AAIA/4/2QPkzeAD7M0eM+AACAP9DukD5XCQY+6wLmPgAAgD8s1pA+nS4LPpUn6D4AAIA/9rOQPuhOED6rP+o+AACAP1GIkD71aRU+CkvsPgAAgD9+U5A+jYAaPpBJ7j4AAIA/PBWQPvOSHz4dO/A+AACAP+7Njz4noSQ+0R/yPgAAgD+VfY8+baspPoz38z4AAIA/UySPPoGxLj4rwvU+AACAP0jCjj6nszM+0H/3PgAAgD+XV44+ILI4Plkw+T4AAIA/guSNPmmsPT7p0/o+AACAP01pjT7CokI+oWr8PgAAgD/W5Yw+LZVHPl70/T4AAIA/gVqMPqmDTD5Dcf8+AACAP3HHiz6xbVE+ynAAPwAAgD8KLYs+h1NWPpYiAT8AAIA/bouKPuc0Wz4pzgE/AACAP73iiT7TEWA+o3MCPwAAgD8aM4k+B+pkPvUSAz8AAIA/LH2IPoS9aT5grAM/AACAPxbBhz4FjG4+1T8EPwAAgD/W/oY+ilVzPpbNBD8AAIA/9DaGPtIZeD6TVQU/AACAP5BphT4f2Xw+DtgFPwAAgD8Pl4Q+dcmAPhlVBj8AAIA/tr+DPnkjgz7VzAY/AACAP+fjgj7deoU+dT8HPwAAgD/FA4I+X8+HPvesBz8AAIA/kh+BPv8gij6QFQg/AACAP7U3gD69b4w+cHkIPwAAgD+amH4+mbuOPqnYCD8AAIA/Brx8PnEEkT5uMwk/AACAP/HZej4jSpM+34kJPwAAgD+d8ng+FY2VPi/cCT8AAIA/1QZ3PuLMlz5eKgo/AACAPx4XdT6rCZo+wXQKPwAAgD+8I3M+cEOcPla7Cj8AAIA/ui1xPlN6nj5h/go/AACAP6A1bz4QrqA+8z0LPwAAgD/zO20+yt6iPj56Cz8AAIA/s0BrPoAMpT5jsws/AACAP+1EaT5UN6c+hekLPwAAgD+hSGc+Rl+pPsUcDD8AAIA/mExlPlWEqz40TQw/AACAPxZRYz6Dpq0+A3sMPwAAgD+fVmE+78WvPlWmDD8AAIA/eV1fPpvisT5Kzww/AACAPydmXT5l/LM+5PUMPwAAgD/vcFs+shO2PmUaDT8AAIA/E35ZPl8ouD7ePA0/AACAPxmOVz5tOro+X10NPwAAgD9FoVU+/Um8Phx8DT8AAIA/2LdTPhFXvj4TmQ0/AACAPxjSUT7IYcA+V7QNPwAAgD+/708+I2rCPgfODT8AAIA/mRFOPmVwxD425g0/AACAP2E3TD5tdMY+Bf0NPwAAgD8XYUo+XHbIPnMSDj8AAIA/ho9IPjJ2yj6RJg4/AACAPyfCRj4QdMw+gjkOPwAAgD88+UQ+GXDOPkVLDj8AAIA/xjRDPk1q0D7ZWw4/AACAPwh1QT7MYtI+YWsOPwAAgD98uT8+llnUPt15Dj8AAIA/ZAI+Ps9O1j5dhw4/AACAP8JPPD6WQtg+4pMOPwAAgD9RoTo+yjTaPmufDj8AAIA/z/Y4Pq8l3D4Iqg4/AACAP8JQNz5EFd4+vLMOPwAAgD9grjU+igPgPpS8Dj8AAIA/qg80PsPw4T5yxA4/AACAP+J0Mj7P3OM+dcsOPwAAgD9A3TA+78flPo3RDj8AAIA/w0gvPgOy5z7L1g4/AACAP663LT4sm+k+DtsOPwAAgD85KSw+jIPrPnbeDj8AAIA/pp0qPiNr7T7j4A4/AACAP24UKT4RUu8+VOIOPwAAgD9QjSc+WDjxPsriDj8AAIA/jQgmPvcd8z5D4g4/AACAP16FJD4yA/U+oOAOPwAAgD/AAyM+xef2Pt/dDj8AAIA/toMhPhTM+D7x2Q4/AACAPz4FID7/r/o+5dQOPwAAgD/Thx4+hpP8PprODj8AAIA/dAsdPsl2/j4Axw4/AACAP2SQGz7kLAA/Br4OPwAAgD9hFho+VB4BP7yzDj8AAIA/rp0YPqEPAj/wpw4/AACAP0omFz7vAAM/w5oOPwAAgD82sBU+G/IDP/SLDj8AAIA/tDsUPkfjBD+Bew4/AACAP4LIEj501AU/WWkOPwAAgD9pVxE+oMUGP21VDj8AAIA/q+gPPru2Bz+rPw4/AACAP418Dj7npwg/AigOPwAAgD+UEw0+E5kJP1IODj8AAIA/iq4LPlCKCj+Z8g0/AACAP75OCj58ews/2NQNPwAAgD/t8wg+ymwMP920DT8AAIA/Zp8HPgdeDT+Wkg0/AACAP/RRBj5mTw4/9G0NPwAAgD8oDQU+xEAPP/ZGDT8AAIA/idEDPiMyED9YHQ0/AACAPzChAj6SIxE/PfEMPwAAgD/lfAE+ARUSP2HCDD8AAIA/SWcAPoEGEz/mkAw/AACAP87C/j3w9xM/iVwMPwAAgD8r2vw9cOkUP1slDD8AAIA/2xj7PeDaFT8p6ws/AACAP4iC+T1PzBY/860LPwAAgD9xHPg9vr0XP5htCz8AAIA/yOr2PR2vGD8XKgs/AACAP8vy9T1qoBk/P+MKPwAAgD8yOfU9p5EaPzGZCj8AAIA/tcL0PcOCGz+6Swo/AACAPwyU9D29cxw/ufoJPwAAgD+Bs/Q9pmQdPy+mCT8AAIA/wCT1PVxVHj8JTgk/AACAPwft9T3xRR8/OfIIPwAAgD8OEfc9RDYgP6uSCD8AAIA/FJb4PWMmIT9iLwg/AACAP7d++j1RFiI/KsgHPwAAgD810Pw96gUjPwNdBz8AAIA/qIz/PUH1Iz/u7QY/AACAP5pbAT4y5CQ/yHoGPwAAgD89KQM+4dIlP4IDBj8AAIA/STAFPhrBJj8aiAU/AACAP0NxBz7/ric/gQgFPwAAgD+z7Ak+XpwoP6WEBD8AAIA/mKIMPlmJKT92/AM/AACAPzaTDz68dSo/9G8DPwAAgD8GvhI+qmErP/zeAj8AAIA/gSIWPgFNLD+hSQI/AACAP2bAGT6wNy0/0a8BPwAAgD9klh0+ySEuP2sRAT8AAIA/saMhPjkLLz9+bgA/AACAP4bnJT7x8y8/1o3/PgAAgD9OYCo+8NswP4M1/j4AAIA//gwvPibDMT+/0/w+AACAP4nsMz6TqTI/rWj7PgAAgD8a/Tg+FY8zP+nz+T4AAIA/5j0+Pr1zND+0dfg+AACAPxmtQz55VzU/7u32PgAAgD/pSUk+Szo2P3Rc9T4AAIA/fxJPPhEcNz9IwfM+AACAP9EFVT7K/Dc/aRzyPgAAgD/RIls+d9w4P9dt8D4AAIA/MGhhPvW6OT8tte4+AACAP53UZz5nmDo/rvLsPgAAgD8OZ24+inQ7P1sm6z4AAIA/dR51Pn9PPD/wT+k+AACAP8b5ez41KT0/sW/nPgAAgD/6e4E+igE+P3uF5T4AAIA/+guFPpDYPj8ukeM+AACAP36siD4lrj8/yZLhPgAAgD9CXYw+SYJAPyuK3z4AAIA/wR2QPvxUQT91d90+AACAP3Ttkz4cJkI/p1rbPgAAgD8YzJc+qfVCP8Iz2T4AAIA/SbmbPqTDQz/FAtc+AACAP6K0nz78j0Q/sMfUPgAAgD8BvqM+n1pFP4SC0j4AAIA/4dSnPo4jRj8eM9A+AACAPx75qz6n6kY/XtnNPgAAgD94KrA++69HP4Z1yz4AAIA/iGi0PmlzSD+WB8k+AACAPwuzuD7wNEk/jo/GPgAAgD+eCb0+kPRJP04NxD4AAIA/QGzBPimySj84gcE+AACAP4zaxT7KbUs/6uq+PgAAgD8/VMo+UidMP6VKvD4AAIA/ONnOPtPeTD9qoLk+AACAP1Vp0z4YlE0/9uu2PgAAgD9TBNg+NEdOP4wttD4AAIA/zqncPhb4Tj9NZbE+AACAP6NZ4T69pk8/OpOuPgAAgD+QE+Y+GlNQP3S3qz4AAIA/UtfqPir9UD/60ag+AACAP6Wk7z7PpFE/EeOlPgAAgD9ne/Q+J0pSP3Tqoj4AAIA/eVv5PgPtUj+K6J8+AACAP1JE/j5hjVM/ct2cPgAAgD/6mgE/UitUPwzJmT4AAIA/DRgEP8XGVD+9q5Y+AACAP0KZBj+rX1U/YoWTPgAAgD91Hgk/AfZVPz9WkD4AAIA/dqcLP7mJVj/aHo0+AACAPzM0Dj/jGlc/M9+JPgAAgD96xBA/fqlXP9CXhj4AAIA/GVgTP3o1WD/USIM+AACAP/7uFT/Gvlg/AOV/PgAAgD/oiBg/hEVZPz0reT4AAIA/xCUbP6PJWT+hZHI+AACAP2HFHT8jS1o/wJJrPgAAgD97ZyA/BMpaP6a2ZD4AAIA/AgwjP1ZGWz+i0V0+AACAP6KyJT8awFs/zeVWPgAAgD86Wyg/UDdcP7r0Tz4AAIA/lgUrP/erXD8IAUk+AACAP3WxLT8yHl0/Ew1CPgAAgD+iXjA/AI5dP0McOz4AAIA/3QwzP2H7XT++MTQ+AACAP+C7NT93Zl4/tVEtPgAAgD+Lazg/Qs9eP2eBJj4AAIA/ixs7P+M1Xz8Rxh8+AACAP5vLPT9bml8/hSYZPgAAgD94e0A/yvxfP1yqEj4AAIA/4CpDP1NdYD+BWgw+AACAP6HZRT/1u2A/cEEGPgAAgD9Vh0g/0hhhPytqAD4AAIA/2zNLPx10YT8uxfU9AACAP9/eTT/EzWE/xXLrPQAAgD8OiFA/CyZiP5z94T0AAIA/RS9TPwN9Yj9MiNk9AACAP0HUVT/M0mI/ETjSPQAAgD+wdlg/iSdjP5AwzD0AAIA/XRZbP1t7Yz/qlMc9AACAPwezXT9kzmM/AoPEPQAAgD+MTGA/xSBkP28Swz0AAIA/qOJiP59yZD9yU8M9AACAPzp1ZT8FxGQ/SUvFPQAAgD//A2g/OBVlP8P1yD0AAIA/1o5qPzhmZT+3RM49AACAP0gVbT9rt2U/LSPVPQAAgD9ol28/rwhmP8lz3T0AAIA/MxVyP0daZj+cF+c9AACAP4qOdD8yrGY/GO3xPQAAgD9LA3c/pP5mP8fU/T0AAIA/ZHN5P61RZz8VVwU+AACAP8beez9dpWc/ui4MPgAAgD+ARX4/6PlnP/VjEz4AAIA/rHRocmVlX2Zvcm1hdKpSR0JBRm9ybWF0pHNpemXWFQABAACkdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlp3Zpc2libGXHB2imOTE1ODgzsWF0dHJpYnV0ZV91cGRhdGVyxwdopjkxNjA1MqhvdmVyZHJhd8cHaKY5MTU4ODWvdW5pZm9ybV91cGRhdGVyxwdopjkxNjA1M6VmYWNlc8cHaKY5MTYwNTGkdXVpZLQxMjYwODM2MzI0NDc2NjQ5ODQ3OK12ZXJ0ZXhfc291cmNl2hL7CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMzIHBvc2l0aW9uOwp2ZWMzIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjMyBzcGVjdWxhcjsKdmVjMyBnZXRfc3BlY3VsYXIoKXtyZXR1cm4gc3BlY3VsYXI7fQp1bmlmb3JtIHNhbXBsZXIyRCBjb2xvcm1hcDsKdW5pZm9ybSB2ZWMzIG5vcm1hbHM7CnZlYzMgZ2V0X25vcm1hbHMoKXtyZXR1cm4gbm9ybWFsczt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGF0dGVybjsKYm9vbCBnZXRfcGF0dGVybigpe3JldHVybiBwYXR0ZXJuO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gYm9vbCBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7CmJvb2wgZ2V0X2ludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcigpe3JldHVybiBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7fQp1bmlmb3JtIGZsb2F0IGJhY2tsaWdodDsKZmxvYXQgZ2V0X2JhY2tsaWdodCgpe3JldHVybiBiYWNrbGlnaHQ7fQp1bmlmb3JtIHZlYzMgYW1iaWVudDsKdmVjMyBnZXRfYW1iaWVudCgpe3JldHVybiBhbWJpZW50O30KdW5pZm9ybSBtYXQzIG5vcm1hbG1hdHJpeDsKbWF0MyBnZXRfbm9ybWFsbWF0cml4KCl7cmV0dXJuIG5vcm1hbG1hdHJpeDt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHNoaW5pbmVzczsKZmxvYXQgZ2V0X3NoaW5pbmVzcygpe3JldHVybiBzaGluaW5lc3M7fQp1bmlmb3JtIHZlYzMgbGlnaHRfY29sb3I7CnZlYzMgZ2V0X2xpZ2h0X2NvbG9yKCl7cmV0dXJuIGxpZ2h0X2NvbG9yO30KdW5pZm9ybSB2ZWMyIGNvbG9ycmFuZ2U7CnZlYzIgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgY29sb3I7CmJvb2wgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBzYW1wbGVyMkQgdW5pZm9ybV9jb2xvcjsKdW5pZm9ybSBib29sIHNoYWRpbmc7CmJvb2wgZ2V0X3NoYWRpbmcoKXtyZXR1cm4gc2hhZGluZzt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2RpcmVjdGlvbjsKdmVjMyBnZXRfbGlnaHRfZGlyZWN0aW9uKCl7cmV0dXJuIGxpZ2h0X2RpcmVjdGlvbjt9CgoKCm91dCB2ZWMyIGZyYWdfdXY7Cm91dCB2ZWMzIG9fbm9ybWFsOwpvdXQgdmVjMyBvX2NhbWRpcjsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7CnVuaWZvcm0gdmVjMyBleWVwb3NpdGlvbjsKCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQoZmxvYXQgdil7cmV0dXJuIHZlYzQodiwgMC4wLCAwLjAsIDAuMCk7fQp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgdmVydGV4X2NvbG9yKHZlYzMgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcih2ZWM0IGNvbG9yLCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGNvbG9yOwp9CnZlYzQgdmVydGV4X2NvbG9yKGJvb2wgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihib29sIHZhbHVlLCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihmbG9hdCB2YWx1ZSwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgaWYgKGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKSkgewogICAgICAgIHJldHVybiB2ZWM0KHZhbHVlLCAwLjAsIDAuMCwgMC4wKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0KfQoKdm9pZCByZW5kZXIodmVjNCBwb3NpdGlvbl93b3JsZCwgdmVjMyBub3JtYWwsIG1hdDQgdmlldywgbWF0NCBwcm9qZWN0aW9uKQp7CiAgICAvLyBub3JtYWwgaW4gd29ybGQgc3BhY2UKICAgIG9fbm9ybWFsID0gZ2V0X25vcm1hbG1hdHJpeCgpICogbm9ybWFsOwogICAgLy8gcG9zaXRpb24gaW4gY2xpcCBzcGFjZSAody8gZGVwdGgpCiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb24gKiB2aWV3ICogcG9zaXRpb25fd29ybGQ7IC8vIFRPRE8gY29uc2lkZXIgdXNpbmcgcHJvamVjdGlvbnZpZXcgZGlyZWN0bHkKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwogICAgLy8gZGlyZWN0aW9uIHRvIGNhbWVyYQogICAgb19jYW1kaXIgPSBwb3NpdGlvbl93b3JsZC54eXogLyBwb3NpdGlvbl93b3JsZC53IC0gZXllcG9zaXRpb247Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgLy8gZ2V0XyogZ2V0cyB0aGUgZ2xvYmFsIGlucHV0cyAodW5pZm9ybSwgc2FtcGxlciwgcG9zaXRpb24gYXJyYXkpCiAgICAvLyB0aG9zZSBmdW5jdGlvbnMgd2lsbCBnZXQgaW5zZXJ0ZWQgYnkgdGhlIHNoYWRlciBjcmVhdGlvbiBwaXBlbGluZQogICAgdmVjMyB2ZXJ0ZXhfcG9zaXRpb24gPSB0b3ZlYzMoZ2V0X3Bvc2l0aW9uKCkpOwogICAgaWYgKGlzbmFuKHZlcnRleF9wb3NpdGlvbi56KSkgewogICAgICAgIHZlcnRleF9wb3NpdGlvbi56ID0gMC4wOwogICAgfQogICAgdmVjNCBwb3NpdGlvbl93b3JsZCA9IG1vZGVsICogdmVjNCh2ZXJ0ZXhfcG9zaXRpb24sIDEpOwoKICAgIHJlbmRlcihwb3NpdGlvbl93b3JsZCwgZ2V0X25vcm1hbHMoKSwgdmlldywgcHJvamVjdGlvbik7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2ID0gdmVjMigxLjAgLSBmcmFnX3V2LnksIGZyYWdfdXYueCk7CiAgICBmcmFnX2NvbG9yID0gdmVydGV4X2NvbG9yKGdldF9jb2xvcigpLCBnZXRfY29sb3JyYW5nZSgpLCBjb2xvcm1hcCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfVmVydGV4SUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hbNCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzMgc3BlY3VsYXI7CnZlYzMgZ2V0X3NwZWN1bGFyKCl7cmV0dXJuIHNwZWN1bGFyO30KdW5pZm9ybSBzYW1wbGVyMkQgY29sb3JtYXA7CnVuaWZvcm0gdmVjMyBub3JtYWxzOwp2ZWMzIGdldF9ub3JtYWxzKCl7cmV0dXJuIG5vcm1hbHM7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBhdHRlcm47CmJvb2wgZ2V0X3BhdHRlcm4oKXtyZXR1cm4gcGF0dGVybjt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGJvb2wgaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyOwpib29sIGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKXtyZXR1cm4gaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyO30KdW5pZm9ybSBmbG9hdCBiYWNrbGlnaHQ7CmZsb2F0IGdldF9iYWNrbGlnaHQoKXtyZXR1cm4gYmFja2xpZ2h0O30KdW5pZm9ybSB2ZWMzIGFtYmllbnQ7CnZlYzMgZ2V0X2FtYmllbnQoKXtyZXR1cm4gYW1iaWVudDt9CnVuaWZvcm0gbWF0MyBub3JtYWxtYXRyaXg7Cm1hdDMgZ2V0X25vcm1hbG1hdHJpeCgpe3JldHVybiBub3JtYWxtYXRyaXg7fQp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7CmZsb2F0IGdldF9zaGluaW5lc3MoKXtyZXR1cm4gc2hpbmluZXNzO30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2NvbG9yOwp2ZWMzIGdldF9saWdodF9jb2xvcigpe3JldHVybiBsaWdodF9jb2xvcjt9CnVuaWZvcm0gdmVjMiBjb2xvcnJhbmdlOwp2ZWMyIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIGNvbG9yOwpib29sIGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gc2FtcGxlcjJEIHVuaWZvcm1fY29sb3I7CnVuaWZvcm0gYm9vbCBzaGFkaW5nOwpib29sIGdldF9zaGFkaW5nKCl7cmV0dXJuIHNoYWRpbmc7fQp1bmlmb3JtIHZlYzMgZGlmZnVzZTsKdmVjMyBnZXRfZGlmZnVzZSgpe3JldHVybiBkaWZmdXNlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gdmVjMyBsaWdodF9kaXJlY3Rpb247CnZlYzMgZ2V0X2xpZ2h0X2RpcmVjdGlvbigpe3JldHVybiBsaWdodF9kaXJlY3Rpb247fQoKaW4gdmVjMiBmcmFnX3V2OwppbiB2ZWM0IGZyYWdfY29sb3I7CmZsYXQgaW4gaW50IHNhbXBsZV9mcmFnX2NvbG9yOwoKaW4gdmVjMyBvX25vcm1hbDsKaW4gdmVjMyBvX2NhbWRpcjsKCi8vIFNtb290aGVzIG91dCBlZGdlIGFyb3VuZCAwIGxpZ2h0IGludGVuc2l0eSwgc2VlIEdMTWFraWUKZmxvYXQgc21vb3RoX3plcm9fbWF4KGZsb2F0IHgpIHsKICAgIGNvbnN0IGZsb2F0IGMgPSAwLjAwMzkwNjI1LCB4c3dhcCA9IDAuNjQwNjcwNzEyMDE1Mjc1OSwgeXN3YXAgPSAwLjIwNTA4MzgzOTAwMTkwOTU1OwogICAgY29uc3QgZmxvYXQgc2hpZnQgPSAxLjAgKyB4c3dhcCAtIHlzd2FwOwogICAgZmxvYXQgcG93OCA9IHggKyBzaGlmdDsKICAgIHBvdzggPSBwb3c4ICogcG93ODsgcG93OCA9IHBvdzggKiBwb3c4OyBwb3c4ID0gcG93OCAqIHBvdzg7CiAgICByZXR1cm4geCA8IHlzd2FwID8gYyAqIHBvdzggOiB4Owp9Cgp2ZWMzIGJsaW5ucGhvbmcodmVjMyBOLCB2ZWMzIFYsIHZlYzMgTCwgdmVjMyBjb2xvcil7CiAgICBmbG9hdCBiYWNrbGlnaHQgPSBnZXRfYmFja2xpZ2h0KCk7CiAgICBmbG9hdCBkaWZmX2NvZWZmID0gc21vb3RoX3plcm9fbWF4KGRvdChMLCAtTikpICsKICAgICAgICBiYWNrbGlnaHQgKiBzbW9vdGhfemVyb19tYXgoZG90KEwsIE4pKTsKCiAgICAvLyBzcGVjdWxhciBjb2VmZmljaWVudAogICAgdmVjMyBIID0gbm9ybWFsaXplKEwgKyBWKTsKCiAgICBmbG9hdCBzcGVjX2NvZWZmID0gcG93KG1heChkb3QoSCwgLU4pLCAwLjApLCBnZXRfc2hpbmluZXNzKCkpICsKICAgICAgICBiYWNrbGlnaHQgKiBwb3cobWF4KGRvdChILCBOKSwgMC4wKSwgZ2V0X3NoaW5pbmVzcygpKTsKICAgIGlmIChkaWZmX2NvZWZmIDw9IDAuMCkKICAgICAgICBzcGVjX2NvZWZmID0gMC4wOwoKICAgIC8vIGZpbmFsIGxpZ2h0aW5nIG1vZGVsCiAgICByZXR1cm4gZ2V0X2xpZ2h0X2NvbG9yKCkgKiB2ZWMzKAogICAgICAgIGdldF9kaWZmdXNlKCkgKiBkaWZmX2NvZWZmICogY29sb3IgKwogICAgICAgIGdldF9zcGVjdWxhcigpICogc3BlY19jb2VmZgogICAgKTsKfQoKdmVjNCBnZXRfY29sb3IodmVjMyBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiB2ZWM0KGNvbG9yLCAxLjApOwp9Cgp2ZWM0IGdldF9jb2xvcih2ZWM0IGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGNvbG9yOwp9Cgp2ZWM0IGdldF9jb2xvcihib29sIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGZyYWdfY29sb3I7ICAvLyBjb2xvciBub3QgaW4gdW5pZm9ybQp9Cgp2ZWM0IGdldF9jb2xvcihzYW1wbGVyMkQgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICBpZiAoZ2V0X3BhdHRlcm4oKSkgewogICAgICAgIHZlYzIgc2l6ZSA9IHZlYzIodGV4dHVyZVNpemUoY29sb3IsIDApKTsKICAgICAgICB2ZWMyIHBvcyA9IGdsX0ZyYWdDb29yZC54eTsKICAgICAgICByZXR1cm4gdGV4ZWxGZXRjaChjb2xvciwgaXZlYzIobW9kKHBvcy54LCBzaXplLngpLCBtb2QocG9zLnksIHNpemUueSkpLCAwKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRleHR1cmUoY29sb3IsIHV2KTsKICAgIH0KfQoKZmxvYXQgX25vcm1hbGl6ZShmbG9hdCB2YWwsIGZsb2F0IGZyb20sIGZsb2F0IHRvKXtyZXR1cm4gKHZhbC1mcm9tKSAvICh0byAtIGZyb20pO30KCnZlYzQgZ2V0X2NvbG9yX2Zyb21fY21hcChmbG9hdCB2YWx1ZSwgc2FtcGxlcjJEIGNvbG9yX21hcCwgdmVjMiBjb2xvcnJhbmdlKSB7CiAgICBmbG9hdCBjbWluID0gY29sb3JyYW5nZS54OwogICAgZmxvYXQgY21heCA9IGNvbG9ycmFuZ2UueTsKICAgIGlmICh2YWx1ZSA8PSBjbWF4ICYmIHZhbHVlID49IGNtaW4pIHsKICAgICAgICAvLyBpbiB2YWx1ZSByYW5nZSwgY29udGludWUhCiAgICB9IGVsc2UgaWYgKHZhbHVlIDwgY21pbikgewogICAgICAgIHJldHVybiBnZXRfbG93Y2xpcCgpOwogICAgfSBlbHNlIGlmICh2YWx1ZSA+IGNtYXgpIHsKICAgICAgICByZXR1cm4gZ2V0X2hpZ2hjbGlwKCk7CiAgICB9IGVsc2UgewogICAgICAgIC8vIGlzbmFuIGlzIGJyb2tlbiAob2YgY291cnNlKSAtLi0KICAgICAgICAvLyBzbyBpZiBvdXRzaWRlIHZhbHVlIHJhbmdlIGFuZCBub3Qgc21hbGxlci9iaWdnZXIgbWluL21heCB3ZSBhc3N1bWUgTmFOCiAgICAgICAgcmV0dXJuIGdldF9uYW5fY29sb3IoKTsKICAgIH0KICAgIGZsb2F0IGkwMSA9IGNsYW1wKCh2YWx1ZSAtIGNtaW4pIC8gKGNtYXggLSBjbWluKSwgMC4wLCAxLjApOwogICAgLy8gMS8wIGNvcnJlc3BvbmRzIHRvIHRoZSBjb3JuZXIgb2YgdGhlIGNvbG9ybWFwLCBzbyB0byBwcm9wZXJseSBpbnRlcnBvbGF0ZQogICAgLy8gYmV0d2VlbiB0aGUgY29sb3JzLCB3ZSBuZWVkIHRvIHNjYWxlIGl0LCBzbyB0aGF0IHRoZSBlbmRzIGFyZSBhdCAxIC0gKHN0ZXBzaXplLzIpIGFuZCAwKyhzdGVwc2l6ZS8yKS4KICAgIGZsb2F0IHN0ZXBzaXplID0gMS4wIC8gZmxvYXQodGV4dHVyZVNpemUoY29sb3JfbWFwLCAwKSk7CiAgICBpMDEgPSAoMS4wIC0gc3RlcHNpemUpICogaTAxICsgMC41ICogc3RlcHNpemU7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvcl9tYXAsIHZlYzIoaTAxLCAwLjApKTsKfQoKdmVjNCBnZXRfY29sb3IoYm9vbCBjb2xvciwgdmVjMiB1diwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgaWYgKGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKSkgewogICAgICAgIHJldHVybiBnZXRfY29sb3JfZnJvbV9jbWFwKGZyYWdfY29sb3IueCwgY29sb3JtYXAsIGNvbG9ycmFuZ2UpOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZnJhZ19jb2xvcjsKICAgIH0KfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIHZhbHVlcywgdmVjMiB1diwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgZmxvYXQgdmFsdWUgPSB0ZXh0dXJlKHZhbHVlcywgdXYpLng7CiAgICByZXR1cm4gZ2V0X2NvbG9yX2Zyb21fY21hcCh2YWx1ZSwgY29sb3JtYXAsIGNvbG9ycmFuZ2UpOwp9Cgp2ZWM0IGdldF9jb2xvcihzYW1wbGVyMkQgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yLCB1dik7Cn0KCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICB2ZWM0IHJlYWxfY29sb3IgPSBnZXRfY29sb3IodW5pZm9ybV9jb2xvciwgZnJhZ191diwgZ2V0X2NvbG9ycmFuZ2UoKSwgY29sb3JtYXApOwogICAgdmVjMyBzaGFkZWRfY29sb3IgPSByZWFsX2NvbG9yLnJnYjsKCiAgICBpZihnZXRfc2hhZGluZygpKXsKICAgICAgICB2ZWMzIEwgPSBnZXRfbGlnaHRfZGlyZWN0aW9uKCk7CiAgICAgICAgdmVjMyBOID0gbm9ybWFsaXplKG9fbm9ybWFsKTsKICAgICAgICB2ZWMzIGxpZ2h0ID0gYmxpbm5waG9uZyhOLCBub3JtYWxpemUob19jYW1kaXIpLCBMLCByZWFsX2NvbG9yLnJnYik7CiAgICAgICAgc2hhZGVkX2NvbG9yID0gZ2V0X2FtYmllbnQoKSAqIHJlYWxfY29sb3IucmdiICsgbGlnaHQ7CiAgICB9CgogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAocmVhbF9jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChyZWFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSB2ZWM0KHNoYWRlZF9jb2xvciwgcmVhbF9jb2xvci5hKTsKfQqvYmFja2dyb3VuZGNvbG9yxwdopjkxNjAyNbVjYW1lcmFfcmVsYXRpdmVfbGlnaHTDqGNoaWxkcmVukKd2aXNpYmxlxwdopjkxMzg3NLViYWNrZ3JvdW5kY29sb3JfYWxwaGHHB2imOTE2MDI2pmNhbWVyYccHaKY5MTYwMjevbGlnaHRfZGlyZWN0aW9uxwdopjkxMzkyOKpjbGVhcnNjZW5lxwdopjkxMzg3M6R1dWlkszI1OTAxODgzNTc0NTMwMzU4MDaodmlld3BvcnTHB2imOTE2MDI0q2NhbTNkX3N0YXRlwKd2aXNpYmxlxwdopjkxMzY3N7ViYWNrZ3JvdW5kY29sb3JfYWxwaGHHB2imOTE2MDU1pmNhbWVyYccHaKY5MTYwNTavbGlnaHRfZGlyZWN0aW9uxwdopjkxMzczMqpjbGVhcnNjZW5lxwdopjkxMzY3NqR1dWlkszc4NzEwMzUzMTg5MDU0NzQzMzGodmlld3BvcnTHB2imOTE2MDIzq2NhbTNkX3N0YXRlwKd2aXNpYmxlxwdopjkxMjc1N7ViYWNrZ3JvdW5kY29sb3JfYWxwaGHHB2imOTE2NDQwpmNhbWVyYccHaKY5MTY0NDGvbGlnaHRfZGlyZWN0aW9uxwdopjkxMjg1NKpjbGVhcnNjZW5lxwdopjkxMjg1MKR1dWlkszYxODA4OTIyNDk5MTgzMTAyNDaodmlld3BvcnTHB2imOTE1OTIxq2NhbTNkX3N0YXRlwLM3MjE0NTc3MTg0OTI3MDg3MzEywLM1OTAyMTg4OTQwNDc5MDY5OTEwxwdopjkxNjQ0NNsAE3w0KCgpID0+IHsKICAgICAgICAgICAgaWYgKCF3aW5kb3cuSlNTRVJWRV9JTVBPUlRTKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuSlNTRVJWRV9JTVBPUlRTID0ge307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgSlNTRVJWRV9JTVBPUlRTWydjYzRjNmFhNmExZjA2YTFiNTAxM2JjYTAxNzAyZjM2YTE4NGMwNDM5LXdnbG1ha2llLmpzJ10gPSBgZGF0YTphcHBsaWNhdGlvbi9qYXZhc2NyaXB0O2Jhc2U2NCxMeThnWkdWdWJ5MW1iWFF0YVdkdWIzSmxMV1pwYkdVS0x5OGdaR1Z1Ynkxc2FXNTBMV2xuYm05eVpTMW1hV3hsQ2k4dklGUm9hWE1nWTI5a1pTQjNZWE1nWW5WdVpHeGxaQ0IxYzJsdVp5QmdaR1Z1YnlCaWRXNWtiR1ZnSUdGdVpDQnBkQ2R6SUc1dmRDQnlaV052YlcxbGJtUmxaQ0IwYnlCbFpHbDBJR2wwSUcxaGJuVmhiR3g1Q2dwMllYSWdTR01nUFNBaU1UVTNJaXdnZW5nZ1BTQjdDaUFnSUNCTVJVWlVPaUF3TEFvZ0lDQWdUVWxFUkV4Rk9pQXhMQW9nSUNBZ1VrbEhTRlE2SURJc0NpQWdJQ0JTVDFSQlZFVTZJREFzQ2lBZ0lDQkVUMHhNV1RvZ01Td0tJQ0FnSUZCQlRqb2dNZ3A5TENCV2VDQTlJSHNLSUNBZ0lGSlBWRUZVUlRvZ01Dd0tJQ0FnSUZCQlRqb2dNU3dLSUNBZ0lFUlBURXhaWDFCQlRqb2dNaXdLSUNBZ0lFUlBURXhaWDFKUFZFRlVSVG9nTXdwOUxDQnJaQ0E5SURBc0lISnNJRDBnTVN3Z1NHUWdQU0F5TENCcmVDQTlJRE1zSUVoNElEMGdNQ3dnWTJRZ1BTQXhMQ0JIWkNBOUlESXNJSEJ1SUQwZ015d2dRbTRnUFNBd0xDQkdkQ0E5SURFc0lHZHVJRDBnTWl3Z1IzZ2dQU0F5TENCRWJpQTlJREFzSUZkcElEMGdNU3dnWVd3Z1BTQXlMQ0J2YkNBOUlETXNJR05zSUQwZ05Dd2dWMlFnUFNBMUxDQkNhU0E5SURFd01Dd2dXR1FnUFNBeE1ERXNJSEZrSUQwZ01UQXlMQ0JzYkNBOUlERXdNeXdnYUd3Z1BTQXhNRFFzSUZsa0lEMGdNakF3TENCYVpDQTlJREl3TVN3Z1NtUWdQU0F5TURJc0lDUmtJRDBnTWpBekxDQnNaQ0E5SURJd05Dd2dhR1FnUFNBeU1EVXNJRXRrSUQwZ01qQTJMQ0JSWkNBOUlESXdOeXdnYW1RZ1BTQXlNRGdzSUdWbUlEMGdNakE1TENCMFppQTlJREl4TUN3Z2JtWWdQU0F3TENCelppQTlJREVzSUhKbUlEMGdNaXdnZFc4Z1BTQXpMQ0JoWmlBOUlEUXNJRzltSUQwZ05Td2dZMllnUFNBMkxDQnNaaUE5SURjc0lIaGhJRDBnTUN3Z2FHWWdQU0F4TENCMVppQTlJRElzSUU1dUlEMGdNQ3dnWkdZZ1BTQXhMQ0JtWmlBOUlESXNJSEJtSUQwZ015d2diV1lnUFNBMExDQm5aaUE5SURVc0lFZGpJRDBnTXpBd0xDQjZiaUE5SURNd01Td2dZMmtnUFNBek1ESXNJRWx5SUQwZ016QXpMQ0JWY2lBOUlETXdOQ3dnVm5NZ1BTQXpNRFlzSUVSeUlEMGdNV1V6TENCSmRDQTlJREV3TURFc0lFNXlJRDBnTVRBd01pd2djSFFnUFNBeE1EQXpMQ0JtYnlBOUlERXdNRFFzSUZkNElEMGdNVEF3TkN3Z1RISWdQU0F4TURBMUxDQlllQ0E5SURFd01EVXNJRzEwSUQwZ01UQXdOaXdnZFdRZ1BTQXhNREEzTENCeGVDQTlJREV3TURjc0lHeHBJRDBnTVRBd09Dd2dXWGdnUFNBeE1EQTRMQ0JQYmlBOUlERXdNRGtzSUY5bUlEMGdNVEF4TUN3Z2VHWWdQU0F4TURFeExDQlhZeUE5SURFd01USXNJR1JrSUQwZ01UQXhNeXdnVEc0Z1BTQXhNREUwTENCNGJpQTlJREV3TVRVc0lGUnpJRDBnTVRBeE5pd2dabVFnUFNBeE1ERTNMQ0J3WkNBOUlERXdNVGdzSUdscElEMGdNVEF5TUN3Z2RtWWdQU0F4TURJeExDQlhkQ0E5SURFd01qTXNJSGxtSUQwZ01UQXlOQ3dnVFdZZ1BTQXhNREkxTENCemFTQTlJREV3TWpZc0lGbHBJRDBnTVRBeU55d2dVMllnUFNBeE1ESTRMQ0J0WkNBOUlERXdNamtzSUdKbUlEMGdNVEF6TUN3Z1oyUWdQU0F4TURNeExDQmZaQ0E5SURFd016TXNJSGRoSUQwZ016TTNOellzSUVGaElEMGdNek0zTnpjc0lGSmhJRDBnTXpNM056Z3NJRU5oSUQwZ016TTNOemtzSUhWc0lEMGdNelU0TkRBc0lHUnNJRDBnTXpVNE5ERXNJR1pzSUQwZ016VTRORElzSUhCc0lEMGdNelU0TkRNc0lFVm1JRDBnTXpZeE9UWXNJRzFzSUQwZ016YzBPVElzSUdkc0lEMGdNemMwT1RZc0lGOXNJRDBnTXpjNE1EZ3NJSGhzSUQwZ016YzRNRGtzSUhac0lEMGdNemM0TVRBc0lIbHNJRDBnTXpjNE1URXNJRTFzSUQwZ016YzRNVElzSUZOc0lEMGdNemM0TVRNc0lHSnNJRDBnTXpjNE1UUXNJRVZzSUQwZ016YzRNVFVzSUZSc0lEMGdNemM0TVRZc0lIZHNJRDBnTXpjNE1UY3NJRUZzSUQwZ016YzRNVGdzSUZKc0lEMGdNemM0TVRrc0lFTnNJRDBnTXpjNE1qQXNJRkJzSUQwZ016YzRNakVzSUZCaElEMGdNelkwT1RJc0lFeHNJRDBnTXpZME9UUXNJRWxzSUQwZ016WTBPVFVzSUZSbUlEMGdNell5T0RNc0lGVnNJRDBnTXpZeU9EUXNJRVJzSUQwZ016WXlPRFVzSUU1c0lEMGdNell5T0RZc0lIZG1JRDBnTWpJd01Dd2dRV1lnUFNBeU1qQXhMQ0JTWmlBOUlESXlNRElzSUU5eUlEMGdNak13TUN3Z1JuSWdQU0F5TXpBeExDQk1ZU0E5SURJek1ESXNJSHBwSUQwZ01qUXdNQ3dnVm1rZ1BTQXlOREF4TENCQ2NpQTlJREkwTURJc0lGaGpJRDBnTWpVd01Dd2dlR1FnUFNBeU5UQXhMQ0JhZUNBOUlEQXNJRXA0SUQwZ01Td2dKSGdnUFNBeUxDQjJaQ0E5SURObE15d2djbWtnUFNBek1EQXhMQ0JEWmlBOUlETXlNREFzSUZCbUlEMGdNekl3TVN3Z2JXa2dQU0F3TENCTVppQTlJREVzSUZoMElEMGdJaUlzSUhaMElEMGdJbk55WjJJaUxDQk5iaUE5SUNKemNtZGlMV3hwYm1WaGNpSXNJSEZqSUQwZ0ltUnBjM0JzWVhrdGNETWlMQ0IyWVNBOUlDSmthWE53YkdGNUxYQXpMV3hwYm1WaGNpSXNJSHB5SUQwZ0lteHBibVZoY2lJc0lHNTBJRDBnSW5OeVoySWlMQ0JXY2lBOUlDSnlaV00zTURraUxDQnJjaUE5SUNKd015SXNJRXQ0SUQwZ01Dd2dTV0VnUFNBM05qZ3dMQ0JSZUNBOUlEYzJPREVzSUdwNElEMGdOelk0TWl3Z1pYWWdQU0EzTmpnekxDQjBkaUE5SURNME1EVTFMQ0J1ZGlBOUlETTBNRFUyTENCcGRpQTlJRFV6T0RZc0lITjJJRDBnTlRFeUxDQnlkaUE5SURVeE15d2dZWFlnUFNBMU1UUXNJRzkySUQwZ05URTFMQ0JqZGlBOUlEVXhOaXdnYkhZZ1BTQTFNVGNzSUdoMklEMGdOVEU0TENCSlppQTlJRFV4T1N3Z1ZXWWdQU0ExTVRJc0lFUm1JRDBnTlRFekxDQk9aaUE5SURVeE5Dd2dUMllnUFNBMU1UVXNJRVptSUQwZ05URTJMQ0JDWmlBOUlEVXhOeXdnZW1ZZ1BTQTFNVGdzSUZabUlEMGdOVEU1TENCSWNpQTlJRE0xTURRMExDQjFkaUE5SURNMU1EUTRMQ0JrZGlBOUlETTFNRFF3TENCbWRpQTlJRE0xTURRMUxDQndkaUE5SURNMU1EUTVMQ0J0ZGlBOUlETTFNRFF4TENCbmRpQTlJRE0xTURRMkxDQmZkaUE5SURNMU1EVXdMQ0I0ZGlBOUlETTFNRFF5TENCMmRpQTlJQ0l4TURBaUxDQlBiQ0E5SUNJek1EQWdaWE1pTENCd2J5QTlJREV3TXpVc0lIWnVJRDBnTW1VekxDQkhjaUE5SURJd01ERXNJSE51SUQwZ1kyeGhjM01nZXdvZ0lDQWdZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmYkdsemRHVnVaWEp6SUQwOVBTQjJiMmxrSURBZ0ppWWdLSFJvYVhNdVgyeHBjM1JsYm1WeWN5QTlJSHQ5S1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVYMnhwYzNSbGJtVnljenNLSUNBZ0lDQWdJQ0J1VzJWZElEMDlQU0IyYjJsa0lEQWdKaVlnS0c1YlpWMGdQU0JiWFNrc0lHNWJaVjB1YVc1a1pYaFBaaWgwS1NBOVBUMGdMVEVnSmlZZ2JsdGxYUzV3ZFhOb0tIUXBPd29nSUNBZ2ZRb2dJQ0FnYUdGelJYWmxiblJNYVhOMFpXNWxjaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMnhwYzNSbGJtVnljeUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnSVRFN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbDlzYVhOMFpXNWxjbk03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzViWlYwZ0lUMDlJSFp2YVdRZ01DQW1KaUJ1VzJWZExtbHVaR1Y0VDJZb2RDa2dJVDA5SUMweE93b2dJQ0FnZlFvZ0lDQWdjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMnhwYzNSbGJtVnljeUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxsOXNhWE4wWlc1bGNuTmJaVjA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHa3VhVzVrWlhoUFppaDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NpQWhQVDBnTFRFZ0ppWWdhUzV6Y0d4cFkyVW9jaXdnTVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdaR2x6Y0dGMFkyaEZkbVZ1ZENobEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMnhwYzNSbGJtVnljeUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxsOXNhWE4wWlc1bGNuTmJaUzUwZVhCbFhUc0tJQ0FnSUNBZ0lDQnBaaUFvYmlBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdVdWRHRnlaMlYwSUQwZ2RHaHBjenNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdUxuTnNhV05sS0RBcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQmhJRDBnYVM1c1pXNW5kR2c3SUhJZ1BDQmhPeUJ5S3lzcGFWdHlYUzVqWVd4c0tIUm9hWE1zSUdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JsTG5SaGNtZGxkQ0E5SUc1MWJHdzdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRcDlMQ0JGZENBOUlGc0tJQ0FnSUNJd01DSXNDaUFnSUNBaU1ERWlMQW9nSUNBZ0lqQXlJaXdLSUNBZ0lDSXdNeUlzQ2lBZ0lDQWlNRFFpTEFvZ0lDQWdJakExSWl3S0lDQWdJQ0l3TmlJc0NpQWdJQ0FpTURjaUxBb2dJQ0FnSWpBNElpd0tJQ0FnSUNJd09TSXNDaUFnSUNBaU1HRWlMQW9nSUNBZ0lqQmlJaXdLSUNBZ0lDSXdZeUlzQ2lBZ0lDQWlNR1FpTEFvZ0lDQWdJakJsSWl3S0lDQWdJQ0l3WmlJc0NpQWdJQ0FpTVRBaUxBb2dJQ0FnSWpFeElpd0tJQ0FnSUNJeE1pSXNDaUFnSUNBaU1UTWlMQW9nSUNBZ0lqRTBJaXdLSUNBZ0lDSXhOU0lzQ2lBZ0lDQWlNVFlpTEFvZ0lDQWdJakUzSWl3S0lDQWdJQ0l4T0NJc0NpQWdJQ0FpTVRraUxBb2dJQ0FnSWpGaElpd0tJQ0FnSUNJeFlpSXNDaUFnSUNBaU1XTWlMQW9nSUNBZ0lqRmtJaXdLSUNBZ0lDSXhaU0lzQ2lBZ0lDQWlNV1lpTEFvZ0lDQWdJakl3SWl3S0lDQWdJQ0l5TVNJc0NpQWdJQ0FpTWpJaUxBb2dJQ0FnSWpJeklpd0tJQ0FnSUNJeU5DSXNDaUFnSUNBaU1qVWlMQW9nSUNBZ0lqSTJJaXdLSUNBZ0lDSXlOeUlzQ2lBZ0lDQWlNamdpTEFvZ0lDQWdJakk1SWl3S0lDQWdJQ0l5WVNJc0NpQWdJQ0FpTW1JaUxBb2dJQ0FnSWpKaklpd0tJQ0FnSUNJeVpDSXNDaUFnSUNBaU1tVWlMQW9nSUNBZ0lqSm1JaXdLSUNBZ0lDSXpNQ0lzQ2lBZ0lDQWlNekVpTEFvZ0lDQWdJak15SWl3S0lDQWdJQ0l6TXlJc0NpQWdJQ0FpTXpRaUxBb2dJQ0FnSWpNMUlpd0tJQ0FnSUNJek5pSXNDaUFnSUNBaU16Y2lMQW9nSUNBZ0lqTTRJaXdLSUNBZ0lDSXpPU0lzQ2lBZ0lDQWlNMkVpTEFvZ0lDQWdJak5pSWl3S0lDQWdJQ0l6WXlJc0NpQWdJQ0FpTTJRaUxBb2dJQ0FnSWpObElpd0tJQ0FnSUNJelppSXNDaUFnSUNBaU5EQWlMQW9nSUNBZ0lqUXhJaXdLSUNBZ0lDSTBNaUlzQ2lBZ0lDQWlORE1pTEFvZ0lDQWdJalEwSWl3S0lDQWdJQ0kwTlNJc0NpQWdJQ0FpTkRZaUxBb2dJQ0FnSWpRM0lpd0tJQ0FnSUNJME9DSXNDaUFnSUNBaU5Ea2lMQW9nSUNBZ0lqUmhJaXdLSUNBZ0lDSTBZaUlzQ2lBZ0lDQWlOR01pTEFvZ0lDQWdJalJrSWl3S0lDQWdJQ0kwWlNJc0NpQWdJQ0FpTkdZaUxBb2dJQ0FnSWpVd0lpd0tJQ0FnSUNJMU1TSXNDaUFnSUNBaU5USWlMQW9nSUNBZ0lqVXpJaXdLSUNBZ0lDSTFOQ0lzQ2lBZ0lDQWlOVFVpTEFvZ0lDQWdJalUySWl3S0lDQWdJQ0kxTnlJc0NpQWdJQ0FpTlRnaUxBb2dJQ0FnSWpVNUlpd0tJQ0FnSUNJMVlTSXNDaUFnSUNBaU5XSWlMQW9nSUNBZ0lqVmpJaXdLSUNBZ0lDSTFaQ0lzQ2lBZ0lDQWlOV1VpTEFvZ0lDQWdJalZtSWl3S0lDQWdJQ0kyTUNJc0NpQWdJQ0FpTmpFaUxBb2dJQ0FnSWpZeUlpd0tJQ0FnSUNJMk15SXNDaUFnSUNBaU5qUWlMQW9nSUNBZ0lqWTFJaXdLSUNBZ0lDSTJOaUlzQ2lBZ0lDQWlOamNpTEFvZ0lDQWdJalk0SWl3S0lDQWdJQ0kyT1NJc0NpQWdJQ0FpTm1FaUxBb2dJQ0FnSWpaaUlpd0tJQ0FnSUNJMll5SXNDaUFnSUNBaU5tUWlMQW9nSUNBZ0lqWmxJaXdLSUNBZ0lDSTJaaUlzQ2lBZ0lDQWlOekFpTEFvZ0lDQWdJamN4SWl3S0lDQWdJQ0kzTWlJc0NpQWdJQ0FpTnpNaUxBb2dJQ0FnSWpjMElpd0tJQ0FnSUNJM05TSXNDaUFnSUNBaU56WWlMQW9nSUNBZ0lqYzNJaXdLSUNBZ0lDSTNPQ0lzQ2lBZ0lDQWlOemtpTEFvZ0lDQWdJamRoSWl3S0lDQWdJQ0kzWWlJc0NpQWdJQ0FpTjJNaUxBb2dJQ0FnSWpka0lpd0tJQ0FnSUNJM1pTSXNDaUFnSUNBaU4yWWlMQW9nSUNBZ0lqZ3dJaXdLSUNBZ0lDSTRNU0lzQ2lBZ0lDQWlPRElpTEFvZ0lDQWdJamd6SWl3S0lDQWdJQ0k0TkNJc0NpQWdJQ0FpT0RVaUxBb2dJQ0FnSWpnMklpd0tJQ0FnSUNJNE55SXNDaUFnSUNBaU9EZ2lMQW9nSUNBZ0lqZzVJaXdLSUNBZ0lDSTRZU0lzQ2lBZ0lDQWlPR0lpTEFvZ0lDQWdJamhqSWl3S0lDQWdJQ0k0WkNJc0NpQWdJQ0FpT0dVaUxBb2dJQ0FnSWpobUlpd0tJQ0FnSUNJNU1DSXNDaUFnSUNBaU9URWlMQW9nSUNBZ0lqa3lJaXdLSUNBZ0lDSTVNeUlzQ2lBZ0lDQWlPVFFpTEFvZ0lDQWdJamsxSWl3S0lDQWdJQ0k1TmlJc0NpQWdJQ0FpT1RjaUxBb2dJQ0FnSWprNElpd0tJQ0FnSUNJNU9TSXNDaUFnSUNBaU9XRWlMQW9nSUNBZ0lqbGlJaXdLSUNBZ0lDSTVZeUlzQ2lBZ0lDQWlPV1FpTEFvZ0lDQWdJamxsSWl3S0lDQWdJQ0k1WmlJc0NpQWdJQ0FpWVRBaUxBb2dJQ0FnSW1FeElpd0tJQ0FnSUNKaE1pSXNDaUFnSUNBaVlUTWlMQW9nSUNBZ0ltRTBJaXdLSUNBZ0lDSmhOU0lzQ2lBZ0lDQWlZVFlpTEFvZ0lDQWdJbUUzSWl3S0lDQWdJQ0poT0NJc0NpQWdJQ0FpWVRraUxBb2dJQ0FnSW1GaElpd0tJQ0FnSUNKaFlpSXNDaUFnSUNBaVlXTWlMQW9nSUNBZ0ltRmtJaXdLSUNBZ0lDSmhaU0lzQ2lBZ0lDQWlZV1lpTEFvZ0lDQWdJbUl3SWl3S0lDQWdJQ0ppTVNJc0NpQWdJQ0FpWWpJaUxBb2dJQ0FnSW1Jeklpd0tJQ0FnSUNKaU5DSXNDaUFnSUNBaVlqVWlMQW9nSUNBZ0ltSTJJaXdLSUNBZ0lDSmlOeUlzQ2lBZ0lDQWlZamdpTEFvZ0lDQWdJbUk1SWl3S0lDQWdJQ0ppWVNJc0NpQWdJQ0FpWW1JaUxBb2dJQ0FnSW1Kaklpd0tJQ0FnSUNKaVpDSXNDaUFnSUNBaVltVWlMQW9nSUNBZ0ltSm1JaXdLSUNBZ0lDSmpNQ0lzQ2lBZ0lDQWlZekVpTEFvZ0lDQWdJbU15SWl3S0lDQWdJQ0pqTXlJc0NpQWdJQ0FpWXpRaUxBb2dJQ0FnSW1NMUlpd0tJQ0FnSUNKak5pSXNDaUFnSUNBaVl6Y2lMQW9nSUNBZ0ltTTRJaXdLSUNBZ0lDSmpPU0lzQ2lBZ0lDQWlZMkVpTEFvZ0lDQWdJbU5pSWl3S0lDQWdJQ0pqWXlJc0NpQWdJQ0FpWTJRaUxBb2dJQ0FnSW1ObElpd0tJQ0FnSUNKalppSXNDaUFnSUNBaVpEQWlMQW9nSUNBZ0ltUXhJaXdLSUNBZ0lDSmtNaUlzQ2lBZ0lDQWlaRE1pTEFvZ0lDQWdJbVEwSWl3S0lDQWdJQ0prTlNJc0NpQWdJQ0FpWkRZaUxBb2dJQ0FnSW1RM0lpd0tJQ0FnSUNKa09DSXNDaUFnSUNBaVpEa2lMQW9nSUNBZ0ltUmhJaXdLSUNBZ0lDSmtZaUlzQ2lBZ0lDQWlaR01pTEFvZ0lDQWdJbVJrSWl3S0lDQWdJQ0prWlNJc0NpQWdJQ0FpWkdZaUxBb2dJQ0FnSW1Vd0lpd0tJQ0FnSUNKbE1TSXNDaUFnSUNBaVpUSWlMQW9nSUNBZ0ltVXpJaXdLSUNBZ0lDSmxOQ0lzQ2lBZ0lDQWlaVFVpTEFvZ0lDQWdJbVUySWl3S0lDQWdJQ0psTnlJc0NpQWdJQ0FpWlRnaUxBb2dJQ0FnSW1VNUlpd0tJQ0FnSUNKbFlTSXNDaUFnSUNBaVpXSWlMQW9nSUNBZ0ltVmpJaXdLSUNBZ0lDSmxaQ0lzQ2lBZ0lDQWlaV1VpTEFvZ0lDQWdJbVZtSWl3S0lDQWdJQ0ptTUNJc0NpQWdJQ0FpWmpFaUxBb2dJQ0FnSW1ZeUlpd0tJQ0FnSUNKbU15SXNDaUFnSUNBaVpqUWlMQW9nSUNBZ0ltWTFJaXdLSUNBZ0lDSm1OaUlzQ2lBZ0lDQWlaamNpTEFvZ0lDQWdJbVk0SWl3S0lDQWdJQ0ptT1NJc0NpQWdJQ0FpWm1FaUxBb2dJQ0FnSW1aaUlpd0tJQ0FnSUNKbVl5SXNDaUFnSUNBaVptUWlMQW9nSUNBZ0ltWmxJaXdLSUNBZ0lDSm1aaUlLWFN3Z1Jtd2dQU0F4TWpNME5UWTNMQ0JoYVNBOUlFMWhkR2d1VUVrZ0x5QXhPREFzSUZwcElEMGdNVGd3SUM4Z1RXRjBhQzVRU1RzS1puVnVZM1JwYjI0Z2EzUW9LU0I3Q2lBZ0lDQnNaWFFnY3pFZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREFzSUdVZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREFzSUhRZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREFzSUc0Z1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREE3Q2lBZ0lDQnlaWFIxY200Z0tFVjBXM014SUNZZ01qVTFYU0FySUVWMFczTXhJRDQrSURnZ0ppQXlOVFZkSUNzZ1JYUmJjekVnUGo0Z01UWWdKaUF5TlRWZElDc2dSWFJiY3pFZ1BqNGdNalFnSmlBeU5UVmRJQ3NnSWkwaUlDc2dSWFJiWlNBbUlESTFOVjBnS3lCRmRGdGxJRDQrSURnZ0ppQXlOVFZkSUNzZ0lpMGlJQ3NnUlhSYlpTQStQaUF4TmlBbUlERTFJSHdnTmpSZElDc2dSWFJiWlNBK1BpQXlOQ0FtSURJMU5WMGdLeUFpTFNJZ0t5QkZkRnQwSUNZZ05qTWdmQ0F4TWpoZElDc2dSWFJiZENBK1BpQTRJQ1lnTWpVMVhTQXJJQ0l0SWlBcklFVjBXM1FnUGo0Z01UWWdKaUF5TlRWZElDc2dSWFJiZENBK1BpQXlOQ0FtSURJMU5WMGdLeUJGZEZ0dUlDWWdNalUxWFNBcklFVjBXMjRnUGo0Z09DQW1JREkxTlYwZ0t5QkZkRnR1SUQ0K0lERTJJQ1lnTWpVMVhTQXJJRVYwVzI0Z1BqNGdNalFnSmlBeU5UVmRLUzUwYjB4dmQyVnlRMkZ6WlNncE93cDlDbVoxYm1OMGFXOXVJR04wS0hNeExDQmxMQ0IwS1NCN0NpQWdJQ0J5WlhSMWNtNGdUV0YwYUM1dFlYZ29aU3dnVFdGMGFDNXRhVzRvZEN3Z2N6RXBLVHNLZlFwbWRXNWpkR2x2YmlCWll5aHpNU3dnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJQ2h6TVNBbElHVWdLeUJsS1NBbElHVTdDbjBLWm5WdVkzUnBiMjRnYTJZb2N6RXNJR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJSEpsZEhWeWJpQnVJQ3NnS0hNeElDMGdaU2tnS2lBb2FTQXRJRzRwSUM4Z0tIUWdMU0JsS1RzS2ZRcG1kVzVqZEdsdmJpQklaaWh6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdjbVYwZFhKdUlITXhJQ0U5UFNCbElEOGdLSFFnTFNCek1Ta2dMeUFvWlNBdElITXhLU0E2SURBN0NuMEtablZ1WTNScGIyNGdlWE1vY3pFc0lHVXNJSFFwSUhzS0lDQWdJSEpsZEhWeWJpQW9NU0F0SUhRcElDb2djekVnS3lCMElDb2daVHNLZlFwbWRXNWpkR2x2YmlCSFppaHpNU3dnWlN3Z2RDd2diaWtnZXdvZ0lDQWdjbVYwZFhKdUlIbHpLSE14TENCbExDQXhJQzBnVFdGMGFDNWxlSEFvTFhRZ0tpQnVLU2s3Q24wS1puVnVZM1JwYjI0Z1YyWW9jekVzSUdVZ1BTQXhLU0I3Q2lBZ0lDQnlaWFIxY200Z1pTQXRJRTFoZEdndVlXSnpLRmxqS0hNeExDQmxJQ29nTWlrZ0xTQmxLVHNLZlFwbWRXNWpkR2x2YmlCWVppaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2NtVjBkWEp1SUhNeElEdzlJR1VnUHlBd0lEb2djekVnUGowZ2RDQS9JREVnT2lBb2N6RWdQU0FvY3pFZ0xTQmxLU0F2SUNoMElDMGdaU2tzSUhNeElDb2djekVnS2lBb015QXRJRElnS2lCek1Ta3BPd3A5Q21aMWJtTjBhVzl1SUhGbUtITXhMQ0JsTENCMEtTQjdDaUFnSUNCeVpYUjFjbTRnY3pFZ1BEMGdaU0EvSURBZ09pQnpNU0ErUFNCMElEOGdNU0E2SUNoek1TQTlJQ2h6TVNBdElHVXBJQzhnS0hRZ0xTQmxLU3dnY3pFZ0tpQnpNU0FxSUhNeElDb2dLSE14SUNvZ0tITXhJQ29nTmlBdElERTFLU0FySURFd0tTazdDbjBLWm5WdVkzUnBiMjRnV1dZb2N6RXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQnpNU0FySUUxaGRHZ3VabXh2YjNJb1RXRjBhQzV5WVc1a2IyMG9LU0FxSUNobElDMGdjekVnS3lBeEtTazdDbjBLWm5WdVkzUnBiMjRnV21Zb2N6RXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQnpNU0FySUUxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUFvWlNBdElITXhLVHNLZlFwbWRXNWpkR2x2YmlCS1ppaHpNU2tnZXdvZ0lDQWdjbVYwZFhKdUlITXhJQ29nS0M0MUlDMGdUV0YwYUM1eVlXNWtiMjBvS1NrN0NuMEtablZ1WTNScGIyNGdKR1lvY3pFcElIc0tJQ0FnSUhNeElDRTlQU0IyYjJsa0lEQWdKaVlnS0Vac0lEMGdjekVwT3dvZ0lDQWdiR1YwSUdVZ1BTQkdiQ0FyUFNBeE9ETXhOVFkxT0RFek93b2dJQ0FnY21WMGRYSnVJR1VnUFNCTllYUm9MbWx0ZFd3b1pTQmVJR1VnUGo0K0lERTFMQ0JsSUh3Z01Ta3NJR1VnWGowZ1pTQXJJRTFoZEdndWFXMTFiQ2hsSUY0Z1pTQStQajRnTnl3Z1pTQjhJRFl4S1N3Z0tDaGxJRjRnWlNBK1BqNGdNVFFwSUQ0K1BpQXdLU0F2SURReU9UUTVOamN5T1RZN0NuMEtablZ1WTNScGIyNGdTMllvY3pFcElIc0tJQ0FnSUhKbGRIVnliaUJ6TVNBcUlHRnBPd3A5Q21aMWJtTjBhVzl1SUZGbUtITXhLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RWdLaUJhYVRzS2ZRcG1kVzVqZEdsdmJpQnRieWh6TVNrZ2V3b2dJQ0FnY21WMGRYSnVJQ2h6TVNBbUlITXhJQzBnTVNrZ1BUMDlJREFnSmlZZ2N6RWdJVDA5SURBN0NuMEtablZ1WTNScGIyNGdlV1FvY3pFcElIc0tJQ0FnSUhKbGRIVnliaUJOWVhSb0xuQnZkeWd5TENCTllYUm9MbU5sYVd3b1RXRjBhQzVzYjJjb2N6RXBJQzhnVFdGMGFDNU1UaklwS1RzS2ZRcG1kVzVqZEdsdmJpQlhjaWh6TVNrZ2V3b2dJQ0FnY21WMGRYSnVJRTFoZEdndWNHOTNLRElzSUUxaGRHZ3VabXh2YjNJb1RXRjBhQzVzYjJjb2N6RXBJQzhnVFdGMGFDNU1UaklwS1RzS2ZRcG1kVzVqZEdsdmJpQnFaaWh6TVN3Z1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ2JHVjBJSElnUFNCTllYUm9MbU52Y3l3Z1lTQTlJRTFoZEdndWMybHVMQ0J2SUQwZ2NpaDBJQzhnTWlrc0lHTWdQU0JoS0hRZ0x5QXlLU3dnYkNBOUlISW9LR1VnS3lCdUtTQXZJRElwTENCb0lEMGdZU2dvWlNBcklHNHBJQzhnTWlrc0lIVWdQU0J5S0NobElDMGdiaWtnTHlBeUtTd2daQ0E5SUdFb0tHVWdMU0J1S1NBdklESXBMQ0JtSUQwZ2NpZ29iaUF0SUdVcElDOGdNaWtzSUcwZ1BTQmhLQ2h1SUMwZ1pTa2dMeUF5S1RzS0lDQWdJSE4zYVhSamFDaHBLWHNLSUNBZ0lDQWdJQ0JqWVhObElDSllXVmdpT2dvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzV6WlhRb2J5QXFJR2dzSUdNZ0tpQjFMQ0JqSUNvZ1pDd2dieUFxSUd3cE93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUNKWldsa2lPZ29nSUNBZ0lDQWdJQ0FnSUNCek1TNXpaWFFvWXlBcUlHUXNJRzhnS2lCb0xDQmpJQ29nZFN3Z2J5QXFJR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCallYTmxJQ0phV0ZvaU9nb2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1elpYUW9ZeUFxSUhVc0lHTWdLaUJrTENCdklDb2dhQ3dnYnlBcUlHd3BPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0JqWVhObElDSllXbGdpT2dvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzV6WlhRb2J5QXFJR2dzSUdNZ0tpQnRMQ0JqSUNvZ1ppd2dieUFxSUd3cE93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUNKWldGa2lPZ29nSUNBZ0lDQWdJQ0FnSUNCek1TNXpaWFFvWXlBcUlHWXNJRzhnS2lCb0xDQmpJQ29nYlN3Z2J5QXFJR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCallYTmxJQ0phV1ZvaU9nb2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1elpYUW9ZeUFxSUcwc0lHTWdLaUJtTENCdklDb2dhQ3dnYnlBcUlHd3BPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrMWhkR2hWZEdsc2N6b2dMbk5sZEZGMVlYUmxjbTVwYjI1R2NtOXRVSEp2Y0dWeVJYVnNaWElvS1NCbGJtTnZkVzUwWlhKbFpDQmhiaUIxYm10dWIzZHVJRzl5WkdWeU9pQWlJQ3NnYVNrN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z1QzUW9jekVzSUdVcElIc0tJQ0FnSUhOM2FYUmphQ2hsTG1OdmJuTjBjblZqZEc5eUtYc0tJQ0FnSUNBZ0lDQmpZWE5sSUVac2IyRjBNekpCY25KaGVUb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE14T3dvZ0lDQWdJQ0FnSUdOaGMyVWdWV2x1ZERNeVFYSnlZWGs2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCek1TQXZJRFF5T1RRNU5qY3lPVFU3Q2lBZ0lDQWdJQ0FnWTJGelpTQlZhVzUwTVRaQmNuSmhlVG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhNeElDOGdOalUxTXpVN0NpQWdJQ0FnSUNBZ1kyRnpaU0JWYVc1ME9FRnljbUY1T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2N6RWdMeUF5TlRVN0NpQWdJQ0FnSUNBZ1kyRnpaU0JKYm5Rek1rRnljbUY1T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzV0WVhnb2N6RWdMeUF5TVRRM05EZ3pOalEzTENBdE1TazdDaUFnSUNBZ0lDQWdZMkZ6WlNCSmJuUXhOa0Z5Y21GNU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1dFlYZ29jekVnTHlBek1qYzJOeXdnTFRFcE93b2dJQ0FnSUNBZ0lHTmhjMlVnU1c1ME9FRnljbUY1T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzV0WVhnb2N6RWdMeUF4TWpjc0lDMHhLVHNLSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSWtsdWRtRnNhV1FnWTI5dGNHOXVaVzUwSUhSNWNHVXVJaWs3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnUW1Vb2N6RXNJR1VwSUhzS0lDQWdJSE4zYVhSamFDaGxMbU52Ym5OMGNuVmpkRzl5S1hzS0lDQWdJQ0FnSUNCallYTmxJRVpzYjJGME16SkJjbkpoZVRvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITXhPd29nSUNBZ0lDQWdJR05oYzJVZ1ZXbHVkRE15UVhKeVlYazZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuSnZkVzVrS0hNeElDb2dOREk1TkRrMk56STVOU2s3Q2lBZ0lDQWdJQ0FnWTJGelpTQlZhVzUwTVRaQmNuSmhlVG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjbTkxYm1Rb2N6RWdLaUEyTlRVek5TazdDaUFnSUNBZ0lDQWdZMkZ6WlNCVmFXNTBPRUZ5Y21GNU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1eWIzVnVaQ2h6TVNBcUlESTFOU2s3Q2lBZ0lDQWdJQ0FnWTJGelpTQkpiblF6TWtGeWNtRjVPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXliM1Z1WkNoek1TQXFJREl4TkRjME9ETTJORGNwT3dvZ0lDQWdJQ0FnSUdOaGMyVWdTVzUwTVRaQmNuSmhlVG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjbTkxYm1Rb2N6RWdLaUF6TWpjMk55azdDaUFnSUNBZ0lDQWdZMkZ6WlNCSmJuUTRRWEp5WVhrNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5KdmRXNWtLSE14SUNvZ01USTNLVHNLSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSWtsdWRtRnNhV1FnWTI5dGNHOXVaVzUwSUhSNWNHVXVJaWs3Q2lBZ0lDQjlDbjBLZG1GeUlIbDJJRDBnZXdvZ0lDQWdSRVZITWxKQlJEb2dZV2tzQ2lBZ0lDQlNRVVF5UkVWSE9pQmFhU3dLSUNBZ0lHZGxibVZ5WVhSbFZWVkpSRG9nYTNRc0NpQWdJQ0JqYkdGdGNEb2dZM1FzQ2lBZ0lDQmxkV05zYVdSbFlXNU5iMlIxYkc4NklGbGpMQW9nSUNBZ2JXRndUR2x1WldGeU9pQnJaaXdLSUNBZ0lHbHVkbVZ5YzJWTVpYSndPaUJJWml3S0lDQWdJR3hsY25BNklIbHpMQW9nSUNBZ1pHRnRjRG9nUjJZc0NpQWdJQ0J3YVc1bmNHOXVaem9nVjJZc0NpQWdJQ0J6Ylc5dmRHaHpkR1Z3T2lCWVppd0tJQ0FnSUhOdGIyOTBhR1Z5YzNSbGNEb2djV1lzQ2lBZ0lDQnlZVzVrU1c1ME9pQlpaaXdLSUNBZ0lISmhibVJHYkc5aGREb2dXbVlzQ2lBZ0lDQnlZVzVrUm14dllYUlRjSEpsWVdRNklFcG1MQW9nSUNBZ2MyVmxaR1ZrVW1GdVpHOXRPaUFrWml3S0lDQWdJR1JsWjFSdlVtRmtPaUJMWml3S0lDQWdJSEpoWkZSdlJHVm5PaUJSWml3S0lDQWdJR2x6VUc5M1pYSlBabFIzYnpvZ2JXOHNDaUFnSUNCalpXbHNVRzkzWlhKUFpsUjNiem9nZVdRc0NpQWdJQ0JtYkc5dmNsQnZkMlZ5VDJaVWQyODZJRmR5TEFvZ0lDQWdjMlYwVVhWaGRHVnlibWx2YmtaeWIyMVFjbTl3WlhKRmRXeGxjam9nYW1Zc0NpQWdJQ0J1YjNKdFlXeHBlbVU2SUVKbExBb2dJQ0FnWkdWdWIzSnRZV3hwZW1VNklFOTBDbjBzSUZvZ1BTQmpiR0Z6Y3lCek1TQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnTUN3Z2RDQTlJREFwZXdvZ0lDQWdJQ0FnSUhNeExuQnliM1J2ZEhsd1pTNXBjMVpsWTNSdmNqSWdQU0FoTUN3Z2RHaHBjeTU0SUQwZ1pTd2dkR2hwY3k1NUlEMGdkRHNLSUNBZ0lIMEtJQ0FnSUdkbGRDQjNhV1IwYUNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0T3dvZ0lDQWdmUW9nSUNBZ2MyVjBJSGRwWkhSb0tHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuZ2dQU0JsT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJR2hsYVdkb2RDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NU93b2dJQ0FnZlFvZ0lDQWdjMlYwSUdobGFXZG9kQ2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTU1SUQwZ1pUc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1VzSUhSb2FYTXVlU0E5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUlRZMkZzWVhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMQ0IwYUdsekxua2dQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWktHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NUlEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVOdmJYQnZibVZ1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYzNkcGRHTm9LR1VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURBNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmdnUFNCME93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTVRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlU0E5SUhRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpYVc1a1pYZ2dhWE1nYjNWMElHOW1JSEpoYm1kbE9pQWlJQ3NnWlNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFEyOXRjRzl1Wlc1MEtHVXBJSHNLSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29aU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTURvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZzdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNVG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5rN0NpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ltbHVaR1Y0SUdseklHOTFkQ0J2WmlCeVlXNW5aVG9nSWlBcklHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2loMGFHbHpMbmdzSUhSb2FYTXVlU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlM1NExDQjBhR2x6TG5rZ1BTQmxMbmtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JoWkdRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0t6MGdaUzU0TENCMGFHbHpMbmtnS3owZ1pTNTVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZV1JrVTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQ3M5SUdVc0lIUm9hWE11ZVNBclBTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZV1JrVm1WamRHOXljeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHVXVlQ0FySUhRdWVDd2dkR2hwY3k1NUlEMGdaUzU1SUNzZ2RDNTVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZV1JrVTJOaGJHVmtWbVZqZEc5eUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQ3M5SUdVdWVDQXFJSFFzSUhSb2FYTXVlU0FyUFNCbExua2dLaUIwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzNWaUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElDMDlJR1V1ZUN3Z2RHaHBjeTU1SUMwOUlHVXVlU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE4xWWxOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0F0UFNCbExDQjBhR2x6TG5rZ0xUMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE4xWWxabFkzUnZjbk1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMbmdnTFNCMExuZ3NJSFJvYVhNdWVTQTlJR1V1ZVNBdElIUXVlU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzExYkhScGNHeDVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQ285SUdVdWVDd2dkR2hwY3k1NUlDbzlJR1V1ZVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxMWJIUnBjR3g1VTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQ285SUdVc0lIUm9hWE11ZVNBcVBTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR2wyYVdSbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElDODlJR1V1ZUN3Z2RHaHBjeTU1SUM4OUlHVXVlU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1JwZG1sa1pWTmpZV3hoY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YlhWc2RHbHdiSGxUWTJGc1lYSW9NU0F2SUdVcE93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGd6S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11ZUN3Z2JpQTlJSFJvYVhNdWVTd2dhU0E5SUdVdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdsYk1GMGdLaUIwSUNzZ2FWc3pYU0FxSUc0Z0t5QnBXelpkTENCMGFHbHpMbmtnUFNCcFd6RmRJQ29nZENBcklHbGJORjBnS2lCdUlDc2dhVnMzWFN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxcGJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJRTFoZEdndWJXbHVLSFJvYVhNdWVDd2daUzU0S1N3Z2RHaHBjeTU1SUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTU1TENCbExua3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0Y0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzV0WVhnb2RHaHBjeTU0TENCbExuZ3BMQ0IwYUdsekxua2dQU0JOWVhSb0xtMWhlQ2gwYUdsekxua3NJR1V1ZVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHRnRjQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1YldGNEtHVXVlQ3dnVFdGMGFDNXRhVzRvZEM1NExDQjBhR2x6TG5ncEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1dFlYZ29aUzU1TENCTllYUm9MbTFwYmloMExua3NJSFJvYVhNdWVTa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnhoYlhCVFkyRnNZWElvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG0xaGVDaGxMQ0JOWVhSb0xtMXBiaWgwTENCMGFHbHpMbmdwS1N3Z2RHaHBjeTU1SUQwZ1RXRjBhQzV0WVhnb1pTd2dUV0YwYUM1dGFXNG9kQ3dnZEdocGN5NTVLU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkdGdGNFeGxibWQwYUNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxteGxibWQwYUNncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJwZG1sa1pWTmpZV3hoY2lodUlIeDhJREVwTG0xMWJIUnBjR3g1VTJOaGJHRnlLRTFoZEdndWJXRjRLR1VzSUUxaGRHZ3ViV2x1S0hRc0lHNHBLU2s3Q2lBZ0lDQjlDaUFnSUNCbWJHOXZjaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnVFdGMGFDNW1iRzl2Y2loMGFHbHpMbmdwTENCMGFHbHpMbmtnUFNCTllYUm9MbVpzYjI5eUtIUm9hWE11ZVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCalpXbHNLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xtTmxhV3dvZEdocGN5NTRLU3dnZEdocGN5NTVJRDBnVFdGMGFDNWpaV2xzS0hSb2FYTXVlU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNWdVpDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1eWIzVnVaQ2gwYUdsekxuZ3BMQ0IwYUdsekxua2dQU0JOWVhSb0xuSnZkVzVrS0hSb2FYTXVlU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNWdVpGUnZXbVZ5YnlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzUwY25WdVl5aDBhR2x6TG5ncExDQjBhR2x6TG5rZ1BTQk5ZWFJvTG5SeWRXNWpLSFJvYVhNdWVTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnVaV2RoZEdVb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlDMTBhR2x6TG5nc0lIUm9hWE11ZVNBOUlDMTBhR2x6TG5rc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCa2IzUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLaUJsTG5nZ0t5QjBhR2x6TG5rZ0tpQmxMbms3Q2lBZ0lDQjlDaUFnSUNCamNtOXpjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FxSUdVdWVTQXRJSFJvYVhNdWVTQXFJR1V1ZURzS0lDQWdJSDBLSUNBZ0lHeGxibWQwYUZOeEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0tpQjBhR2x6TG5nZ0t5QjBhR2x6TG5rZ0tpQjBhR2x6TG5rN0NpQWdJQ0I5Q2lBZ0lDQnNaVzVuZEdnb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1YzNGeWRDaDBhR2x6TG5nZ0tpQjBhR2x6TG5nZ0t5QjBhR2x6TG5rZ0tpQjBhR2x6TG5rcE93b2dJQ0FnZlFvZ0lDQWdiV0Z1YUdGMGRHRnVUR1Z1WjNSb0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG1GaWN5aDBhR2x6TG5ncElDc2dUV0YwYUM1aFluTW9kR2hwY3k1NUtUc0tJQ0FnSUgwS0lDQWdJRzV2Y20xaGJHbDZaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWthWFpwWkdWVFkyRnNZWElvZEdocGN5NXNaVzVuZEdnb0tTQjhmQ0F4S1RzS0lDQWdJSDBLSUNBZ0lHRnVaMnhsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUYwWVc0eUtDMTBhR2x6TG5rc0lDMTBhR2x6TG5ncElDc2dUV0YwYUM1UVNUc0tJQ0FnSUgwS0lDQWdJR0Z1WjJ4bFZHOG9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVFdGMGFDNXpjWEowS0hSb2FYTXViR1Z1WjNSb1UzRW9LU0FxSUdVdWJHVnVaM1JvVTNFb0tTazdDaUFnSUNBZ0lDQWdhV1lnS0hRZ1BUMDlJREFwSUhKbGRIVnliaUJOWVhSb0xsQkpJQzhnTWpzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVaRzkwS0dVcElDOGdkRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1aFkyOXpLR04wS0c0c0lDMHhMQ0F4S1NrN0NpQWdJQ0I5Q2lBZ0lDQmthWE4wWVc1alpWUnZLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXpjWEowS0hSb2FYTXVaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9aU2twT3dvZ0lDQWdmUW9nSUNBZ1pHbHpkR0Z1WTJWVWIxTnhkV0Z5WldRb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1NElDMGdaUzU0TENCdUlEMGdkR2hwY3k1NUlDMGdaUzU1T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUNvZ2RDQXJJRzRnS2lCdU93b2dJQ0FnZlFvZ0lDQWdiV0Z1YUdGMGRHRnVSR2x6ZEdGdVkyVlVieWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0hSb2FYTXVlQ0F0SUdVdWVDa2dLeUJOWVhSb0xtRmljeWgwYUdsekxua2dMU0JsTG5rcE93b2dJQ0FnZlFvZ0lDQWdjMlYwVEdWdVozUm9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd4cGVtVW9LUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaGxLVHNLSUNBZ0lIMEtJQ0FnSUd4bGNuQW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS3owZ0tHVXVlQ0F0SUhSb2FYTXVlQ2tnS2lCMExDQjBhR2x6TG5rZ0t6MGdLR1V1ZVNBdElIUm9hWE11ZVNrZ0tpQjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiR1Z5Y0ZabFkzUnZjbk1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5nZ0t5QW9kQzU0SUMwZ1pTNTRLU0FxSUc0c0lIUm9hWE11ZVNBOUlHVXVlU0FySUNoMExua2dMU0JsTG5rcElDb2diaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1Z4ZFdGc2N5aGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1ZUNBOVBUMGdkR2hwY3k1NElDWW1JR1V1ZVNBOVBUMGdkR2hwY3k1NU93b2dJQ0FnZlFvZ0lDQWdabkp2YlVGeWNtRjVLR1VzSUhRZ1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1ZiZEYwc0lIUm9hWE11ZVNBOUlHVmJkQ0FySURGZExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUJjbkpoZVNobElEMGdXMTBzSUhRZ1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZiZEYwZ1BTQjBhR2x6TG5nc0lHVmJkQ0FySURGZElEMGdkR2hwY3k1NUxDQmxPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1V1WjJWMFdDaDBLU3dnZEdocGN5NTVJRDBnWlM1blpYUlpLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY205MFlYUmxRWEp2ZFc1a0tHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUUxaGRHZ3VZMjl6S0hRcExDQnBJRDBnVFdGMGFDNXphVzRvZENrc0lISWdQU0IwYUdsekxuZ2dMU0JsTG5nc0lHRWdQU0IwYUdsekxua2dMU0JsTG5rN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUhJZ0tpQnVJQzBnWVNBcUlHa2dLeUJsTG5nc0lIUm9hWE11ZVNBOUlISWdLaUJwSUNzZ1lTQXFJRzRnS3lCbExua3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnlZVzVrYjIwb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1Y21GdVpHOXRLQ2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3VjbUZ1Wkc5dEtDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQXFXMU41YldKdmJDNXBkR1Z5WVhSdmNsMG9LU0I3Q2lBZ0lDQWdJQ0FnZVdsbGJHUWdkR2hwY3k1NExDQjVhV1ZzWkNCMGFHbHpMbms3Q2lBZ0lDQjlDbjBzSUVobElEMGdZMnhoYzNNZ2N6RWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2Jpd2dhU3dnY2l3Z1lTd2dieXdnWXl3Z2JDbDdDaUFnSUNBZ0lDQWdjekV1Y0hKdmRHOTBlWEJsTG1selRXRjBjbWw0TXlBOUlDRXdMQ0IwYUdsekxtVnNaVzFsYm5SeklEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhDaUFnSUNBZ0lDQWdYU3dnWlNBaFBUMGdkbTlwWkNBd0lDWW1JSFJvYVhNdWMyVjBLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXNJRzhzSUdNc0lHd3BPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXNJSFFzSUc0c0lHa3NJSElzSUdFc0lHOHNJR01zSUd3cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlIUm9hWE11Wld4bGJXVnVkSE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR2hiTUYwZ1BTQmxMQ0JvV3pGZElEMGdhU3dnYUZzeVhTQTlJRzhzSUdoYk0xMGdQU0IwTENCb1d6UmRJRDBnY2l3Z2FGczFYU0E5SUdNc0lHaGJObDBnUFNCdUxDQm9XemRkSUQwZ1lTd2dhRnM0WFNBOUlHd3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnBaR1Z1ZEdsMGVTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUW9NU3dnTUN3Z01Dd2dNQ3dnTVN3Z01Dd2dNQ3dnTUN3Z01Ta3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Wld4bGJXVnVkSE1zSUc0Z1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBXekJkSUQwZ2Jsc3dYU3dnZEZzeFhTQTlJRzViTVYwc0lIUmJNbDBnUFNCdVd6SmRMQ0IwV3pOZElEMGdibHN6WFN3Z2RGczBYU0E5SUc1Yk5GMHNJSFJiTlYwZ1BTQnVXelZkTENCMFd6WmRJRDBnYmxzMlhTd2dkRnMzWFNBOUlHNWJOMTBzSUhSYk9GMGdQU0J1V3poZExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYaDBjbUZqZEVKaGMybHpLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV6WlhSR2NtOXRUV0YwY21sNE0wTnZiSFZ0YmloMGFHbHpMQ0F3S1N3Z2RDNXpaWFJHY205dFRXRjBjbWw0TTBOdmJIVnRiaWgwYUdsekxDQXhLU3dnYmk1elpYUkdjbTl0VFdGMGNtbDRNME52YkhWdGJpaDBhR2x6TENBeUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtIUmJNRjBzSUhSYk5GMHNJSFJiT0Ywc0lIUmJNVjBzSUhSYk5WMHNJSFJiT1Ywc0lIUmJNbDBzSUhSYk5sMHNJSFJiTVRCZEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMTFiSFJwY0d4NUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGRXeDBhWEJzZVUxaGRISnBZMlZ6S0hSb2FYTXNJR1VwT3dvZ0lDQWdmUW9nSUNBZ2NISmxiWFZzZEdsd2JIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb1pTd2dkR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQnRkV3gwYVhCc2VVMWhkSEpwWTJWektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVpXeGxiV1Z1ZEhNc0lHa2dQU0IwTG1Wc1pXMWxiblJ6TENCeUlEMGdkR2hwY3k1bGJHVnRaVzUwY3l3Z1lTQTlJRzViTUYwc0lHOGdQU0J1V3pOZExDQmpJRDBnYmxzMlhTd2diQ0E5SUc1Yk1WMHNJR2dnUFNCdVd6UmRMQ0IxSUQwZ2JsczNYU3dnWkNBOUlHNWJNbDBzSUdZZ1BTQnVXelZkTENCdElEMGdibHM0WFN3Z1h5QTlJR2xiTUYwc0lHY2dQU0JwV3pOZExDQndJRDBnYVZzMlhTd2dkaUE5SUdsYk1WMHNJSGdnUFNCcFd6UmRMQ0I1SUQwZ2FWczNYU3dnWWlBOUlHbGJNbDBzSUhjZ1BTQnBXelZkTENCU0lEMGdhVnM0WFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY2xzd1hTQTlJR0VnS2lCZklDc2dieUFxSUhZZ0t5QmpJQ29nWWl3Z2Nsc3pYU0E5SUdFZ0tpQm5JQ3NnYnlBcUlIZ2dLeUJqSUNvZ2R5d2djbHMyWFNBOUlHRWdLaUJ3SUNzZ2J5QXFJSGtnS3lCaklDb2dVaXdnY2xzeFhTQTlJR3dnS2lCZklDc2dhQ0FxSUhZZ0t5QjFJQ29nWWl3Z2NsczBYU0E5SUd3Z0tpQm5JQ3NnYUNBcUlIZ2dLeUIxSUNvZ2R5d2djbHMzWFNBOUlHd2dLaUJ3SUNzZ2FDQXFJSGtnS3lCMUlDb2dVaXdnY2xzeVhTQTlJR1FnS2lCZklDc2daaUFxSUhZZ0t5QnRJQ29nWWl3Z2NsczFYU0E5SUdRZ0tpQm5JQ3NnWmlBcUlIZ2dLeUJ0SUNvZ2R5d2djbHM0WFNBOUlHUWdLaUJ3SUNzZ1ppQXFJSGtnS3lCdElDb2dVaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzExYkhScGNHeDVVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSYk1GMGdLajBnWlN3Z2RGc3pYU0FxUFNCbExDQjBXelpkSUNvOUlHVXNJSFJiTVYwZ0tqMGdaU3dnZEZzMFhTQXFQU0JsTENCMFd6ZGRJQ285SUdVc0lIUmJNbDBnS2owZ1pTd2dkRnMxWFNBcVBTQmxMQ0IwV3poZElDbzlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JrWlhSbGNtMXBibUZ1ZENncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11Wld4bGJXVnVkSE1zSUhRZ1BTQmxXekJkTENCdUlEMGdaVnN4WFN3Z2FTQTlJR1ZiTWwwc0lISWdQU0JsV3pOZExDQmhJRDBnWlZzMFhTd2dieUE5SUdWYk5WMHNJR01nUFNCbFd6WmRMQ0JzSUQwZ1pWczNYU3dnYUNBOUlHVmJPRjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFFnS2lCaElDb2dhQ0F0SUhRZ0tpQnZJQ29nYkNBdElHNGdLaUJ5SUNvZ2FDQXJJRzRnS2lCdklDb2dZeUFySUdrZ0tpQnlJQ29nYkNBdElHa2dLaUJoSUNvZ1l6c0tJQ0FnSUgwS0lDQWdJR2x1ZG1WeWRDZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lIUWdQU0JsV3pCZExDQnVJRDBnWlZzeFhTd2dhU0E5SUdWYk1sMHNJSElnUFNCbFd6TmRMQ0JoSUQwZ1pWczBYU3dnYnlBOUlHVmJOVjBzSUdNZ1BTQmxXelpkTENCc0lEMGdaVnMzWFN3Z2FDQTlJR1ZiT0Ywc0lIVWdQU0JvSUNvZ1lTQXRJRzhnS2lCc0xDQmtJRDBnYnlBcUlHTWdMU0JvSUNvZ2Npd2daaUE5SUd3Z0tpQnlJQzBnWVNBcUlHTXNJRzBnUFNCMElDb2dkU0FySUc0Z0tpQmtJQ3NnYVNBcUlHWTdDaUFnSUNBZ0lDQWdhV1lnS0cwZ1BUMDlJREFwSUhKbGRIVnliaUIwYUdsekxuTmxkQ2d3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1h5QTlJREVnTHlCdE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbFd6QmRJRDBnZFNBcUlGOHNJR1ZiTVYwZ1BTQW9hU0FxSUd3Z0xTQm9JQ29nYmlrZ0tpQmZMQ0JsV3pKZElEMGdLRzhnS2lCdUlDMGdhU0FxSUdFcElDb2dYeXdnWlZzelhTQTlJR1FnS2lCZkxDQmxXelJkSUQwZ0tHZ2dLaUIwSUMwZ2FTQXFJR01wSUNvZ1h5d2daVnMxWFNBOUlDaHBJQ29nY2lBdElHOGdLaUIwS1NBcUlGOHNJR1ZiTmwwZ1BTQm1JQ29nWHl3Z1pWczNYU0E5SUNodUlDb2dZeUF0SUd3Z0tpQjBLU0FxSUY4c0lHVmJPRjBnUFNBb1lTQXFJSFFnTFNCdUlDb2djaWtnS2lCZkxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RISmhibk53YjNObEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbExDQjBJRDBnZEdocGN5NWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQTlJSFJiTVYwc0lIUmJNVjBnUFNCMFd6TmRMQ0IwV3pOZElEMGdaU3dnWlNBOUlIUmJNbDBzSUhSYk1sMGdQU0IwV3paZExDQjBXelpkSUQwZ1pTd2daU0E5SUhSYk5WMHNJSFJiTlYwZ1BTQjBXemRkTENCMFd6ZGRJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFNXZjbTFoYkUxaGRISnBlQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwUm5KdmJVMWhkSEpwZURRb1pTa3VhVzUyWlhKMEtDa3VkSEpoYm5Od2IzTmxLQ2s3Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjM0J2YzJWSmJuUnZRWEp5WVhrb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1bGJHVnRaVzUwY3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlZzd1hTQTlJSFJiTUYwc0lHVmJNVjBnUFNCMFd6TmRMQ0JsV3pKZElEMGdkRnMyWFN3Z1pWc3pYU0E5SUhSYk1WMHNJR1ZiTkYwZ1BTQjBXelJkTENCbFd6VmRJRDBnZEZzM1hTd2daVnMyWFNBOUlIUmJNbDBzSUdWYk4xMGdQU0IwV3pWZExDQmxXemhkSUQwZ2RGczRYU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZWMlZISmhibk5tYjNKdEtHVXNJSFFzSUc0c0lHa3NJSElzSUdFc0lHOHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJRTFoZEdndVkyOXpLSElwTENCc0lEMGdUV0YwYUM1emFXNG9jaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLRzRnS2lCakxDQnVJQ29nYkN3Z0xXNGdLaUFvWXlBcUlHRWdLeUJzSUNvZ2J5a2dLeUJoSUNzZ1pTd2dMV2tnS2lCc0xDQnBJQ29nWXl3Z0xXa2dLaUFvTFd3Z0tpQmhJQ3NnWXlBcUlHOHBJQ3NnYnlBcklIUXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMk5oYkdVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnlaVzExYkhScGNHeDVLRlZoTG0xaGEyVlRZMkZzWlNobExDQjBLU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnlaVzExYkhScGNHeDVLRlZoTG0xaGEyVlNiM1JoZEdsdmJpZ3RaU2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEhKaGJuTnNZWFJsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2NtVnRkV3gwYVhCc2VTaFZZUzV0WVd0bFZISmhibk5zWVhScGIyNG9aU3dnZENrcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JXRnJaVlJ5WVc1emJHRjBhVzl1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVwYzFabFkzUnZjaklnUHlCMGFHbHpMbk5sZENneExDQXdMQ0JsTG5nc0lEQXNJREVzSUdVdWVTd2dNQ3dnTUN3Z01Ta2dPaUIwYUdsekxuTmxkQ2d4TENBd0xDQmxMQ0F3TENBeExDQjBMQ0F3TENBd0xDQXhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzFoYTJWU2IzUmhkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQk5ZWFJvTG1OdmN5aGxLU3dnYmlBOUlFMWhkR2d1YzJsdUtHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDaDBMQ0F0Yml3Z01Dd2diaXdnZEN3Z01Dd2dNQ3dnTUN3Z01Ta3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRZV3RsVTJOaGJHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZENobExDQXdMQ0F3TENBd0xDQjBMQ0F3TENBd0xDQXdMQ0F4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0J1SUQwZ1pTNWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F3T3lCcElEd2dPVHNnYVNzcktXbG1JQ2gwVzJsZElDRTlQU0J1VzJsZEtTQnlaWFIxY200Z0lURTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVRnljbUY1S0dVc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElEazdJRzRyS3lsMGFHbHpMbVZzWlcxbGJuUnpXMjVkSUQwZ1pWdHVJQ3NnZEYwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBGeWNtRjVLR1VnUFNCYlhTd2dkQ0E5SURBcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11Wld4bGJXVnVkSE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZiZEYwZ1BTQnVXekJkTENCbFczUWdLeUF4WFNBOUlHNWJNVjBzSUdWYmRDQXJJREpkSUQwZ2Jsc3lYU3dnWlZ0MElDc2dNMTBnUFNCdVd6TmRMQ0JsVzNRZ0t5QTBYU0E5SUc1Yk5GMHNJR1ZiZENBcklEVmRJRDBnYmxzMVhTd2daVnQwSUNzZ05sMGdQU0J1V3paZExDQmxXM1FnS3lBM1hTQTlJRzViTjEwc0lHVmJkQ0FySURoZElEMGdibHM0WFN3Z1pUc0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1aeWIyMUJjbkpoZVNoMGFHbHpMbVZzWlcxbGJuUnpLVHNLSUNBZ0lIMEtmU3dnVldFZ1BTQnVaWGNnU0dVN0NtWjFibU4wYVc5dUlFMWtLSE14S1NCN0NpQWdJQ0JtYjNJb2JHVjBJR1VnUFNCek1TNXNaVzVuZEdnZ0xTQXhPeUJsSUQ0OUlEQTdJQzB0WlNscFppQW9jekZiWlYwZ1BqMGdOalUxTXpVcElISmxkSFZ5YmlBaE1Ec0tJQ0FnSUhKbGRIVnliaUFoTVRzS2ZRcDJZWElnWlhBZ1BTQjdDaUFnSUNCSmJuUTRRWEp5WVhrc0NpQWdJQ0JWYVc1ME9FRnljbUY1TEFvZ0lDQWdWV2x1ZERoRGJHRnRjR1ZrUVhKeVlYa3NDaUFnSUNCSmJuUXhOa0Z5Y21GNUxBb2dJQ0FnVldsdWRERTJRWEp5WVhrc0NpQWdJQ0JKYm5Rek1rRnljbUY1TEFvZ0lDQWdWV2x1ZERNeVFYSnlZWGtzQ2lBZ0lDQkdiRzloZERNeVFYSnlZWGtzQ2lBZ0lDQkdiRzloZERZMFFYSnlZWGtLZlRzS1puVnVZM1JwYjI0Z2Eya29jekVzSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ1WlhjZ1pYQmJjekZkS0dVcE93cDlDbVoxYm1OMGFXOXVJSGR6S0hNeEtTQjdDaUFnSUNCeVpYUjFjbTRnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRFNVRLQ0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUwzaG9kRzFzSWl3Z2N6RXBPd3A5Q21aMWJtTjBhVzl1SUhSd0tDa2dld29nSUNBZ2JHVjBJSE14SUQwZ2QzTW9JbU5oYm5aaGN5SXBPd29nSUNBZ2NtVjBkWEp1SUhNeExuTjBlV3hsTG1ScGMzQnNZWGtnUFNBaVlteHZZMnNpTENCek1Uc0tmUXAyWVhJZ1Ftd2dQU0I3ZlRzS1puVnVZM1JwYjI0Z1RYTW9jekVwSUhzS0lDQWdJSE14SUdsdUlFSnNJSHg4SUNoQ2JGdHpNVjBnUFNBaE1Dd2dZMjl1YzI5c1pTNTNZWEp1S0hNeEtTazdDbjBLZG1GeUlIcHNJRDBnYm1WM0lFaGxLQ2t1YzJWMEtDNDRNakkwTmpJeExDQXVNVGMzTlRNNExDQXdMQ0F1TURNek1UazBNU3dnTGprMk5qZ3dOVGdzSURBc0lDNHdNVGN3T0RJM0xDQXVNRGN5TXprM05Dd2dMamt4TURVeE9Ua3BMQ0JXYkNBOUlHNWxkeUJJWlNncExuTmxkQ2d4TGpJeU5EazBNREVzSUMwdU1qSTBPVFF3TkN3Z01Dd2dMUzR3TkRJd05UWTVMQ0F4TGpBME1qQTFOekVzSURBc0lDMHVNREU1TmpNM05pd2dMUzR3TnpnMk16WXhMQ0F4TGpBNU9ESTNNelVwTENCSGN5QTlJSHNLSUNBZ0lGdE5ibDA2SUhzS0lDQWdJQ0FnSUNCMGNtRnVjMlpsY2pvZ2VuSXNDaUFnSUNBZ0lDQWdjSEpwYldGeWFXVnpPaUJXY2l3S0lDQWdJQ0FnSUNCMGIxSmxabVZ5Wlc1alpUb2dLSE14S1QwK2N6RXNDaUFnSUNBZ0lDQWdabkp2YlZKbFptVnlaVzVqWlRvZ0tITXhLVDArY3pFS0lDQWdJSDBzQ2lBZ0lDQmJkblJkT2lCN0NpQWdJQ0FnSUNBZ2RISmhibk5tWlhJNklHNTBMQW9nSUNBZ0lDQWdJSEJ5YVcxaGNtbGxjem9nVm5Jc0NpQWdJQ0FnSUNBZ2RHOVNaV1psY21WdVkyVTZJQ2h6TVNrOVBuTXhMbU52Ym5abGNuUlRVa2RDVkc5TWFXNWxZWElvS1N3S0lDQWdJQ0FnSUNCbWNtOXRVbVZtWlhKbGJtTmxPaUFvY3pFcFBUNXpNUzVqYjI1MlpYSjBUR2x1WldGeVZHOVRVa2RDS0NrS0lDQWdJSDBzQ2lBZ0lDQmJkbUZkT2lCN0NpQWdJQ0FnSUNBZ2RISmhibk5tWlhJNklIcHlMQW9nSUNBZ0lDQWdJSEJ5YVcxaGNtbGxjem9nYTNJc0NpQWdJQ0FnSUNBZ2RHOVNaV1psY21WdVkyVTZJQ2h6TVNrOVBuTXhMbUZ3Y0d4NVRXRjBjbWw0TXloV2JDa3NDaUFnSUNBZ0lDQWdabkp2YlZKbFptVnlaVzVqWlRvZ0tITXhLVDArY3pFdVlYQndiSGxOWVhSeWFYZ3pLSHBzS1FvZ0lDQWdmU3dLSUNBZ0lGdHhZMTA2SUhzS0lDQWdJQ0FnSUNCMGNtRnVjMlpsY2pvZ2JuUXNDaUFnSUNBZ0lDQWdjSEpwYldGeWFXVnpPaUJyY2l3S0lDQWdJQ0FnSUNCMGIxSmxabVZ5Wlc1alpUb2dLSE14S1QwK2N6RXVZMjl1ZG1WeWRGTlNSMEpVYjB4cGJtVmhjaWdwTG1Gd2NHeDVUV0YwY21sNE15aFdiQ2tzQ2lBZ0lDQWdJQ0FnWm5KdmJWSmxabVZ5Wlc1alpUb2dLSE14S1QwK2N6RXVZWEJ3YkhsTllYUnlhWGd6S0hwc0tTNWpiMjUyWlhKMFRHbHVaV0Z5Vkc5VFVrZENLQ2tLSUNBZ0lIMEtmU3dnYm5BZ1BTQnVaWGNnVTJWMEtGc0tJQ0FnSUUxdUxBb2dJQ0FnZG1FS1hTa3NJRkZsSUQwZ2V3b2dJQ0FnWlc1aFlteGxaRG9nSVRBc0NpQWdJQ0JmZDI5eWEybHVaME52Ykc5eVUzQmhZMlU2SUUxdUxBb2dJQ0FnWjJWMElHeGxaMkZqZVUxdlpHVWdLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGtOdmJHOXlUV0Z1WVdkbGJXVnVkRG9nTG14bFoyRmplVTF2WkdVOVptRnNjMlVnY21WdVlXMWxaQ0IwYnlBdVpXNWhZbXhsWkQxMGNuVmxJR2x1SUhJeE5UQXVJaWtzSUNGMGFHbHpMbVZ1WVdKc1pXUTdDaUFnSUNCOUxBb2dJQ0FnYzJWMElHeGxaMkZqZVUxdlpHVWdLSE1wZXdvZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVEyOXNiM0pOWVc1aFoyVnRaVzUwT2lBdWJHVm5ZV041VFc5a1pUMW1ZV3h6WlNCeVpXNWhiV1ZrSUhSdklDNWxibUZpYkdWa1BYUnlkV1VnYVc0Z2NqRTFNQzRpS1N3Z2RHaHBjeTVsYm1GaWJHVmtJRDBnSVhNN0NpQWdJQ0I5TEFvZ0lDQWdaMlYwSUhkdmNtdHBibWREYjJ4dmNsTndZV05sSUNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZDI5eWEybHVaME52Ykc5eVUzQmhZMlU3Q2lBZ0lDQjlMQW9nSUNBZ2MyVjBJSGR2Y210cGJtZERiMnh2Y2xOd1lXTmxJQ2h6S1hzS0lDQWdJQ0FnSUNCcFppQW9JVzV3TG1oaGN5aHpLU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JWYm5OMWNIQnZjblJsWkNCM2IzSnJhVzVuSUdOdmJHOXlJSE53WVdObExDQWlKSHR6ZlNJdVlDazdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyOXlhMmx1WjBOdmJHOXlVM0JoWTJVZ1BTQnpPd29nSUNBZ2ZTd0tJQ0FnSUdOdmJuWmxjblE2SUdaMWJtTjBhVzl1S0hNeExDQmxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVpXNWhZbXhsWkNBOVBUMGdJVEVnZkh3Z1pTQTlQVDBnZENCOGZDQWhaU0I4ZkNBaGRDa2djbVYwZFhKdUlITXhPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdSM05iWlYwdWRHOVNaV1psY21WdVkyVXNJR2tnUFNCSGMxdDBYUzVtY205dFVtVm1aWEpsYm1ObE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcEtHNG9jekVwS1RzS0lDQWdJSDBzQ2lBZ0lDQm1jbTl0VjI5eWEybHVaME52Ykc5eVUzQmhZMlU2SUdaMWJtTjBhVzl1S0hNeExDQmxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXVkbVZ5ZENoek1Td2dkR2hwY3k1ZmQyOXlhMmx1WjBOdmJHOXlVM0JoWTJVc0lHVXBPd29nSUNBZ2ZTd0tJQ0FnSUhSdlYyOXlhMmx1WjBOdmJHOXlVM0JoWTJVNklHWjFibU4wYVc5dUtITXhMQ0JsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1ZG1WeWRDaHpNU3dnWlN3Z2RHaHBjeTVmZDI5eWEybHVaME52Ykc5eVUzQmhZMlVwT3dvZ0lDQWdmU3dLSUNBZ0lHZGxkRkJ5YVcxaGNtbGxjem9nWm5WdVkzUnBiMjRvY3pFcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1IzTmJjekZkTG5CeWFXMWhjbWxsY3pzS0lDQWdJSDBzQ2lBZ0lDQm5aWFJVY21GdWMyWmxjam9nWm5WdVkzUnBiMjRvY3pFcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2N6RWdQVDA5SUZoMElEOGdlbklnT2lCSGMxdHpNVjB1ZEhKaGJuTm1aWEk3Q2lBZ0lDQjlDbjA3Q21aMWJtTjBhVzl1SUZocEtITXhLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RWdQQ0F1TURRd05EVWdQeUJ6TVNBcUlDNHdOemN6T1Rrek9EQTRJRG9nVFdGMGFDNXdiM2NvY3pFZ0tpQXVPVFEzT0RZM01qazROaUFySUM0d05USXhNekkzTURFMExDQXlMalFwT3dwOUNtWjFibU4wYVc5dUlFUmhLSE14S1NCN0NpQWdJQ0J5WlhSMWNtNGdjekVnUENBdU1EQXpNVE13T0NBL0lITXhJQ29nTVRJdU9USWdPaUF4TGpBMU5TQXFJRTFoZEdndWNHOTNLSE14TENBdU5ERTJOallwSUMwZ0xqQTFOVHNLZlFwMllYSWdaMmtzSUZoeUlEMGdZMnhoYzNNZ2V3b2dJQ0FnYzNSaGRHbGpJR2RsZEVSaGRHRlZVa3dvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2d2WG1SaGRHRTZMMmt1ZEdWemRDaGxMbk55WXlrZ2ZId2dkSGx3Wlc5bUlFaFVUVXhEWVc1MllYTkZiR1Z0Wlc1MElENGdJblVpS1NCeVpYUjFjbTRnWlM1emNtTTdDaUFnSUNBZ0lDQWdiR1YwSUhRN0NpQWdJQ0FnSUNBZ2FXWWdLR1VnYVc1emRHRnVZMlZ2WmlCSVZFMU1RMkZ1ZG1GelJXeGxiV1Z1ZENrZ2RDQTlJR1U3Q2lBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdkcElEMDlQU0IyYjJsa0lEQWdKaVlnS0dkcElEMGdkM01vSW1OaGJuWmhjeUlwS1N3Z1oya3VkMmxrZEdnZ1BTQmxMbmRwWkhSb0xDQm5hUzVvWldsbmFIUWdQU0JsTG1obGFXZG9kRHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCbmFTNW5aWFJEYjI1MFpYaDBLQ0l5WkNJcE93b2dJQ0FnSUNBZ0lDQWdJQ0JsSUdsdWMzUmhibU5sYjJZZ1NXMWhaMlZFWVhSaElEOGdiaTV3ZFhSSmJXRm5aVVJoZEdFb1pTd2dNQ3dnTUNrZ09pQnVMbVJ5WVhkSmJXRm5aU2hsTENBd0xDQXdMQ0JsTG5kcFpIUm9MQ0JsTG1obGFXZG9kQ2tzSUhRZ1BTQm5hVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1ZDJsa2RHZ2dQaUF5TURRNElIeDhJSFF1YUdWcFoyaDBJRDRnTWpBME9DQS9JQ2hqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGtsdFlXZGxWWFJwYkhNdVoyVjBSR0YwWVZWU1REb2dTVzFoWjJVZ1kyOXVkbVZ5ZEdWa0lIUnZJR3B3WnlCbWIzSWdjR1Z5Wm05eWJXRnVZMlVnY21WaGMyOXVjeUlzSUdVcExDQjBMblJ2UkdGMFlWVlNUQ2dpYVcxaFoyVXZhbkJsWnlJc0lDNDJLU2tnT2lCMExuUnZSR0YwWVZWU1RDZ2lhVzFoWjJVdmNHNW5JaWs3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nYzFKSFFsUnZUR2x1WldGeUtHVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUVoVVRVeEpiV0ZuWlVWc1pXMWxiblFnUENBaWRTSWdKaVlnWlNCcGJuTjBZVzVqWlc5bUlFaFVUVXhKYldGblpVVnNaVzFsYm5RZ2ZId2dkSGx3Wlc5bUlFaFVUVXhEWVc1MllYTkZiR1Z0Wlc1MElEd2dJblVpSUNZbUlHVWdhVzV6ZEdGdVkyVnZaaUJJVkUxTVEyRnVkbUZ6Uld4bGJXVnVkQ0I4ZkNCMGVYQmxiMllnU1cxaFoyVkNhWFJ0WVhBZ1BDQWlkU0lnSmlZZ1pTQnBibk4wWVc1alpXOW1JRWx0WVdkbFFtbDBiV0Z3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdkM01vSW1OaGJuWmhjeUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBMbmRwWkhSb0lEMGdaUzUzYVdSMGFDd2dkQzVvWldsbmFIUWdQU0JsTG1obGFXZG9kRHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMExtZGxkRU52Ym5SbGVIUW9JakprSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJRzR1WkhKaGQwbHRZV2RsS0dVc0lEQXNJREFzSUdVdWQybGtkR2dzSUdVdWFHVnBaMmgwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVMbWRsZEVsdFlXZGxSR0YwWVNnd0xDQXdMQ0JsTG5kcFpIUm9MQ0JsTG1obGFXZG9kQ2tzSUhJZ1BTQnBMbVJoZEdFN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURBN0lHRWdQQ0J5TG14bGJtZDBhRHNnWVNzcktYSmJZVjBnUFNCWWFTaHlXMkZkSUM4Z01qVTFLU0FxSURJMU5Uc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzR1Y0hWMFNXMWhaMlZFWVhSaEtHa3NJREFzSURBcExDQjBPd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWlM1a1lYUmhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNWtZWFJoTG5Oc2FXTmxLREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2dkQzVzWlc1bmRHZzdJRzRyS3lsMElHbHVjM1JoYm1ObGIyWWdWV2x1ZERoQmNuSmhlU0I4ZkNCMElHbHVjM1JoYm1ObGIyWWdWV2x1ZERoRGJHRnRjR1ZrUVhKeVlYa2dQeUIwVzI1ZElEMGdUV0YwYUM1bWJHOXZjaWhZYVNoMFcyNWRJQzhnTWpVMUtTQXFJREkxTlNrZ09pQjBXMjVkSUQwZ1dHa29kRnR1WFNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUdVdWQybGtkR2dzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJR1V1YUdWcFoyaDBDaUFnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGtsdFlXZGxWWFJwYkhNdWMxSkhRbFJ2VEdsdVpXRnlLQ2s2SUZWdWMzVndjRzl5ZEdWa0lHbHRZV2RsSUhSNWNHVXVJRTV2SUdOdmJHOXlJSE53WVdObElHTnZiblpsY25OcGIyNGdZWEJ3YkdsbFpDNGlLU3dnWlRzS0lDQWdJSDBLZlN3Z2FYQWdQU0F3TENCSmJpQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1ZFd4c0tYc0tJQ0FnSUNBZ0lDQjBhR2x6TG1selUyOTFjbU5sSUQwZ0lUQXNJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMGFHbHpMQ0FpYVdRaUxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJwY0NzckNpQWdJQ0FnSUNBZ2ZTa3NJSFJvYVhNdWRYVnBaQ0E5SUd0MEtDa3NJSFJvYVhNdVpHRjBZU0E5SUdVc0lIUm9hWE11ZG1WeWMybHZiaUE5SURBN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnYm1WbFpITlZjR1JoZEdVb1pTa2dld29nSUNBZ0lDQWdJR1VnUFQwOUlDRXdJQ1ltSUhSb2FYTXVkbVZ5YzJsdmJpc3JPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVZ1BUMDlJSFp2YVdRZ01DQjhmQ0IwZVhCbGIyWWdaU0E5UFNBaWMzUnlhVzVuSWpzS0lDQWdJQ0FnSUNCcFppQW9JWFFnSmlZZ1pTNXBiV0ZuWlhOYmRHaHBjeTUxZFdsa1hTQWhQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdaUzVwYldGblpYTmJkR2hwY3k1MWRXbGtYVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RYVnBaRG9nZEdocGN5NTFkV2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFjbXc2SUNJaUNpQWdJQ0FnSUNBZ2ZTd2dhU0E5SUhSb2FYTXVaR0YwWVRzS0lDQWdJQ0FnSUNCcFppQW9hU0FoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2pzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29hU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURBc0lHOGdQU0JwTG14bGJtZDBhRHNnWVNBOElHODdJR0VyS3lscFcyRmRMbWx6UkdGMFlWUmxlSFIxY21VZ1B5QnlMbkIxYzJnb1RtRW9hVnRoWFM1cGJXRm5aU2twSURvZ2NpNXdkWE5vS0U1aEtHbGJZVjBwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElISWdQU0JPWVNocEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYmk1MWNtd2dQU0J5T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENCOGZDQW9aUzVwYldGblpYTmJkR2hwY3k1MWRXbGtYU0E5SUc0cExDQnVPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJPWVNoek1Ta2dld29nSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJJVkUxTVNXMWhaMlZGYkdWdFpXNTBJRHdnSW5VaUlDWW1JSE14SUdsdWMzUmhibU5sYjJZZ1NGUk5URWx0WVdkbFJXeGxiV1Z1ZENCOGZDQjBlWEJsYjJZZ1NGUk5URU5oYm5aaGMwVnNaVzFsYm5RZ1BDQWlkU0lnSmlZZ2N6RWdhVzV6ZEdGdVkyVnZaaUJJVkUxTVEyRnVkbUZ6Uld4bGJXVnVkQ0I4ZkNCMGVYQmxiMllnU1cxaFoyVkNhWFJ0WVhBZ1BDQWlkU0lnSmlZZ2N6RWdhVzV6ZEdGdVkyVnZaaUJKYldGblpVSnBkRzFoY0NBL0lGaHlMbWRsZEVSaGRHRlZVa3dvY3pFcElEb2djekV1WkdGMFlTQS9JSHNLSUNBZ0lDQWdJQ0JrWVhSaE9pQkJjbkpoZVM1bWNtOXRLSE14TG1SaGRHRXBMQW9nSUNBZ0lDQWdJSGRwWkhSb09pQnpNUzUzYVdSMGFDd0tJQ0FnSUNBZ0lDQm9aV2xuYUhRNklITXhMbWhsYVdkb2RDd0tJQ0FnSUNBZ0lDQjBlWEJsT2lCek1TNWtZWFJoTG1OdmJuTjBjblZqZEc5eUxtNWhiV1VLSUNBZ0lIMGdPaUFvWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1VVpYaDBkWEpsT2lCVmJtRmliR1VnZEc4Z2MyVnlhV0ZzYVhwbElGUmxlSFIxY21VdUlpa3NJSHQ5S1RzS2ZRcDJZWElnYzNBZ1BTQXdMQ0JUZENBOUlHTnNZWE56SUhNeElHVjRkR1Z1WkhNZ2MyNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUhNeExrUkZSa0ZWVEZSZlNVMUJSMFVzSUhRZ1BTQnpNUzVFUlVaQlZVeFVYMDFCVUZCSlRrY3NJRzRnUFNCSmRDd2dhU0E5SUVsMExDQnlJRDBnYlhRc0lHRWdQU0JzYVN3Z2J5QTlJRmQwTENCaklEMGdUMjRzSUd3Z1BTQnpNUzVFUlVaQlZVeFVYMEZPU1ZOUFZGSlBVRmtzSUdnZ1BTQllkQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMVJsZUhSMWNtVWdQU0FoTUN3Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJvYVhNc0lDSnBaQ0lzSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklITndLeXNLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjeTUxZFdsa0lEMGdhM1FvS1N3Z2RHaHBjeTV1WVcxbElEMGdJaUlzSUhSb2FYTXVjMjkxY21ObElEMGdibVYzSUVsdUtHVXBMQ0IwYUdsekxtMXBjRzFoY0hNZ1BTQmJYU3dnZEdocGN5NXRZWEJ3YVc1bklEMGdkQ3dnZEdocGN5NWphR0Z1Ym1Wc0lEMGdNQ3dnZEdocGN5NTNjbUZ3VXlBOUlHNHNJSFJvYVhNdWQzSmhjRlFnUFNCcExDQjBhR2x6TG0xaFowWnBiSFJsY2lBOUlISXNJSFJvYVhNdWJXbHVSbWxzZEdWeUlEMGdZU3dnZEdocGN5NWhibWx6YjNSeWIzQjVJRDBnYkN3Z2RHaHBjeTVtYjNKdFlYUWdQU0J2TENCMGFHbHpMbWx1ZEdWeWJtRnNSbTl5YldGMElEMGdiblZzYkN3Z2RHaHBjeTUwZVhCbElEMGdZeXdnZEdocGN5NXZabVp6WlhRZ1BTQnVaWGNnV2lnd0xDQXdLU3dnZEdocGN5NXlaWEJsWVhRZ1BTQnVaWGNnV2lneExDQXhLU3dnZEdocGN5NWpaVzUwWlhJZ1BTQnVaWGNnV2lnd0xDQXdLU3dnZEdocGN5NXliM1JoZEdsdmJpQTlJREFzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJQ0V3TENCMGFHbHpMbTFoZEhKcGVDQTlJRzVsZHlCSVpTd2dkR2hwY3k1blpXNWxjbUYwWlUxcGNHMWhjSE1nUFNBaE1Dd2dkR2hwY3k1d2NtVnRkV3gwYVhCc2VVRnNjR2hoSUQwZ0lURXNJSFJvYVhNdVpteHBjRmtnUFNBaE1Dd2dkR2hwY3k1MWJuQmhZMnRCYkdsbmJtMWxiblFnUFNBMExDQjBlWEJsYjJZZ2FDQTlQU0FpYzNSeWFXNW5JaUEvSUhSb2FYTXVZMjlzYjNKVGNHRmpaU0E5SUdnZ09pQW9UWE1vSWxSSVVrVkZMbFJsZUhSMWNtVTZJRkJ5YjNCbGNuUjVJQzVsYm1OdlpHbHVaeUJvWVhNZ1ltVmxiaUJ5WlhCc1lXTmxaQ0JpZVNBdVkyOXNiM0pUY0dGalpTNGlLU3dnZEdocGN5NWpiMnh2Y2xOd1lXTmxJRDBnYUNBOVBUMGdjbWtnUHlCMmRDQTZJRmgwS1N3Z2RHaHBjeTUxYzJWeVJHRjBZU0E5SUh0OUxDQjBhR2x6TG5abGNuTnBiMjRnUFNBd0xDQjBhR2x6TG05dVZYQmtZWFJsSUQwZ2JuVnNiQ3dnZEdocGN5NXBjMUpsYm1SbGNsUmhjbWRsZEZSbGVIUjFjbVVnUFNBaE1Td2dkR2hwY3k1dVpXVmtjMUJOVWtWTlZYQmtZWFJsSUQwZ0lURTdDaUFnSUNCOUNpQWdJQ0JuWlhRZ2FXMWhaMlVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMjkxY21ObExtUmhkR0U3Q2lBZ0lDQjlDaUFnSUNCelpYUWdhVzFoWjJVb1pTQTlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5OdmRYSmpaUzVrWVhSaElEMGdaVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVTFoZEhKcGVDZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhkSEpwZUM1elpYUlZkbFJ5WVc1elptOXliU2gwYUdsekxtOW1abk5sZEM1NExDQjBhR2x6TG05bVpuTmxkQzU1TENCMGFHbHpMbkpsY0dWaGRDNTRMQ0IwYUdsekxuSmxjR1ZoZEM1NUxDQjBhR2x6TG5KdmRHRjBhVzl1TENCMGFHbHpMbU5sYm5SbGNpNTRMQ0IwYUdsekxtTmxiblJsY2k1NUtUc0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1OdmNIa29kR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1WVcxbElEMGdaUzV1WVcxbExDQjBhR2x6TG5OdmRYSmpaU0E5SUdVdWMyOTFjbU5sTENCMGFHbHpMbTFwY0cxaGNITWdQU0JsTG0xcGNHMWhjSE11YzJ4cFkyVW9NQ2tzSUhSb2FYTXViV0Z3Y0dsdVp5QTlJR1V1YldGd2NHbHVaeXdnZEdocGN5NWphR0Z1Ym1Wc0lEMGdaUzVqYUdGdWJtVnNMQ0IwYUdsekxuZHlZWEJUSUQwZ1pTNTNjbUZ3VXl3Z2RHaHBjeTUzY21Gd1ZDQTlJR1V1ZDNKaGNGUXNJSFJvYVhNdWJXRm5SbWxzZEdWeUlEMGdaUzV0WVdkR2FXeDBaWElzSUhSb2FYTXViV2x1Um1sc2RHVnlJRDBnWlM1dGFXNUdhV3gwWlhJc0lIUm9hWE11WVc1cGMyOTBjbTl3ZVNBOUlHVXVZVzVwYzI5MGNtOXdlU3dnZEdocGN5NW1iM0p0WVhRZ1BTQmxMbVp2Y20xaGRDd2dkR2hwY3k1cGJuUmxjbTVoYkVadmNtMWhkQ0E5SUdVdWFXNTBaWEp1WVd4R2IzSnRZWFFzSUhSb2FYTXVkSGx3WlNBOUlHVXVkSGx3WlN3Z2RHaHBjeTV2Wm1aelpYUXVZMjl3ZVNobExtOW1abk5sZENrc0lIUm9hWE11Y21Wd1pXRjBMbU52Y0hrb1pTNXlaWEJsWVhRcExDQjBhR2x6TG1ObGJuUmxjaTVqYjNCNUtHVXVZMlZ1ZEdWeUtTd2dkR2hwY3k1eWIzUmhkR2x2YmlBOUlHVXVjbTkwWVhScGIyNHNJSFJvYVhNdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOUlHVXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTd2dkR2hwY3k1dFlYUnlhWGd1WTI5d2VTaGxMbTFoZEhKcGVDa3NJSFJvYVhNdVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUQwZ1pTNW5aVzVsY21GMFpVMXBjRzFoY0hNc0lIUm9hWE11Y0hKbGJYVnNkR2x3YkhsQmJIQm9ZU0E5SUdVdWNISmxiWFZzZEdsd2JIbEJiSEJvWVN3Z2RHaHBjeTVtYkdsd1dTQTlJR1V1Wm14cGNGa3NJSFJvYVhNdWRXNXdZV05yUVd4cFoyNXRaVzUwSUQwZ1pTNTFibkJoWTJ0QmJHbG5ibTFsYm5Rc0lIUm9hWE11WTI5c2IzSlRjR0ZqWlNBOUlHVXVZMjlzYjNKVGNHRmpaU3dnZEdocGN5NTFjMlZ5UkdGMFlTQTlJRXBUVDA0dWNHRnljMlVvU2xOUFRpNXpkSEpwYm1kcFpua29aUzUxYzJWeVJHRjBZU2twTENCMGFHbHpMbTVsWldSelZYQmtZWFJsSUQwZ0lUQXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdaU0E5UFQwZ2RtOXBaQ0F3SUh4OElIUjVjR1Z2WmlCbElEMDlJQ0p6ZEhKcGJtY2lPd29nSUNBZ0lDQWdJR2xtSUNnaGRDQW1KaUJsTG5SbGVIUjFjbVZ6VzNSb2FYTXVkWFZwWkYwZ0lUMDlJSFp2YVdRZ01Da2djbVYwZFhKdUlHVXVkR1Y0ZEhWeVpYTmJkR2hwY3k1MWRXbGtYVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JXVjBZV1JoZEdFNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxjbk5wYjI0NklEUXVOaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDSlVaWGgwZFhKbElpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxibVZ5WVhSdmNqb2dJbFJsZUhSMWNtVXVkRzlLVTA5T0lnb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQjFkV2xrT2lCMGFHbHpMblYxYVdRc0NpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklIUm9hWE11Ym1GdFpTd0tJQ0FnSUNBZ0lDQWdJQ0FnYVcxaFoyVTZJSFJvYVhNdWMyOTFjbU5sTG5SdlNsTlBUaWhsS1M1MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCdFlYQndhVzVuT2lCMGFHbHpMbTFoY0hCcGJtY3NDaUFnSUNBZ0lDQWdJQ0FnSUdOb1lXNXVaV3c2SUhSb2FYTXVZMmhoYm01bGJDd0tJQ0FnSUNBZ0lDQWdJQ0FnY21Wd1pXRjBPaUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjR1ZoZEM1NExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhCbFlYUXVlUW9nSUNBZ0lDQWdJQ0FnSUNCZExBb2dJQ0FnSUNBZ0lDQWdJQ0J2Wm1aelpYUTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyWm1jMlYwTG5nc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTltWm5ObGRDNTVDaUFnSUNBZ0lDQWdJQ0FnSUYwc0NpQWdJQ0FnSUNBZ0lDQWdJR05sYm5SbGNqb2dXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1alpXNTBaWEl1ZUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMlZ1ZEdWeUxua0tJQ0FnSUNBZ0lDQWdJQ0FnWFN3S0lDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhScGIyNDZJSFJvYVhNdWNtOTBZWFJwYjI0c0NpQWdJQ0FnSUNBZ0lDQWdJSGR5WVhBNklGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKaGNGTXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keVlYQlVDaUFnSUNBZ0lDQWdJQ0FnSUYwc0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y20xaGREb2dkR2hwY3k1bWIzSnRZWFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHbHVkR1Z5Ym1Gc1JtOXliV0YwT2lCMGFHbHpMbWx1ZEdWeWJtRnNSbTl5YldGMExBb2dJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQjBhR2x6TG5SNWNHVXNDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlVM0JoWTJVNklIUm9hWE11WTI5c2IzSlRjR0ZqWlN3S0lDQWdJQ0FnSUNBZ0lDQWdiV2x1Um1sc2RHVnlPaUIwYUdsekxtMXBia1pwYkhSbGNpd0tJQ0FnSUNBZ0lDQWdJQ0FnYldGblJtbHNkR1Z5T2lCMGFHbHpMbTFoWjBacGJIUmxjaXdLSUNBZ0lDQWdJQ0FnSUNBZ1lXNXBjMjkwY205d2VUb2dkR2hwY3k1aGJtbHpiM1J5YjNCNUxBb2dJQ0FnSUNBZ0lDQWdJQ0JtYkdsd1dUb2dkR2hwY3k1bWJHbHdXU3dLSUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEdWTmFYQnRZWEJ6T2lCMGFHbHpMbWRsYm1WeVlYUmxUV2x3YldGd2N5d0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGJYVnNkR2x3YkhsQmJIQm9ZVG9nZEdocGN5NXdjbVZ0ZFd4MGFYQnNlVUZzY0doaExBb2dJQ0FnSUNBZ0lDQWdJQ0IxYm5CaFkydEJiR2xuYm0xbGJuUTZJSFJvYVhNdWRXNXdZV05yUVd4cFoyNXRaVzUwQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTUxYzJWeVJHRjBZU2t1YkdWdVozUm9JRDRnTUNBbUppQW9iaTUxYzJWeVJHRjBZU0E5SUhSb2FYTXVkWE5sY2tSaGRHRXBMQ0IwSUh4OElDaGxMblJsZUhSMWNtVnpXM1JvYVhNdWRYVnBaRjBnUFNCdUtTd2dianNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOd1lYUmphRVYyWlc1MEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbVJwYzNCdmMyVWlDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjMlp2Y20xVmRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YldGd2NHbHVaeUFoUFQwZ1IyTXBJSEpsZEhWeWJpQmxPd29nSUNBZ0lDQWdJR2xtSUNobExtRndjR3g1VFdGMGNtbDRNeWgwYUdsekxtMWhkSEpwZUNrc0lHVXVlQ0E4SURBZ2ZId2daUzU0SUQ0Z01Ta2djM2RwZEdOb0tIUm9hWE11ZDNKaGNGTXBld29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVJ5T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1NElEMGdaUzU0SUMwZ1RXRjBhQzVtYkc5dmNpaGxMbmdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdTWFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5nZ1BTQmxMbmdnUENBd0lEOGdNQ0E2SURFN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JPY2pvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUUxaGRHZ3VZV0p6S0UxaGRHZ3VabXh2YjNJb1pTNTRLU0FsSURJcElEMDlQU0F4SUQ4Z1pTNTRJRDBnVFdGMGFDNWpaV2xzS0dVdWVDa2dMU0JsTG5nZ09pQmxMbmdnUFNCbExuZ2dMU0JOWVhSb0xtWnNiMjl5S0dVdWVDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLR1V1ZVNBOElEQWdmSHdnWlM1NUlENGdNU2tnYzNkcGRHTm9LSFJvYVhNdWQzSmhjRlFwZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVSeU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTNTVJRDBnWlM1NUlDMGdUV0YwYUM1bWJHOXZjaWhsTG5rcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnU1hRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExua2dQU0JsTG5rZ1BDQXdJRDhnTUNBNklERTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCT2Nqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMWhkR2d1WVdKektFMWhkR2d1Wm14dmIzSW9aUzU1S1NBbElESXBJRDA5UFNBeElEOGdaUzU1SUQwZ1RXRjBhQzVqWldsc0tHVXVlU2tnTFNCbExua2dPaUJsTG5rZ1BTQmxMbmtnTFNCTllYUm9MbVpzYjI5eUtHVXVlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm14cGNGa2dKaVlnS0dVdWVTQTlJREVnTFNCbExua3BMQ0JsT3dvZ0lDQWdmUW9nSUNBZ2MyVjBJRzVsWldSelZYQmtZWFJsS0dVcElIc0tJQ0FnSUNBZ0lDQmxJRDA5UFNBaE1DQW1KaUFvZEdocGN5NTJaWEp6YVc5dUt5c3NJSFJvYVhNdWMyOTFjbU5sTG01bFpXUnpWWEJrWVhSbElEMGdJVEFwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJR1Z1WTI5a2FXNW5LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOY3lnaVZFaFNSVVV1VkdWNGRIVnlaVG9nVUhKdmNHVnlkSGtnTG1WdVkyOWthVzVuSUdoaGN5QmlaV1Z1SUhKbGNHeGhZMlZrSUdKNUlDNWpiMnh2Y2xOd1lXTmxMaUlwTENCMGFHbHpMbU52Ykc5eVUzQmhZMlVnUFQwOUlIWjBJRDhnY21rZ09pQjJaRHNLSUNBZ0lIMEtJQ0FnSUhObGRDQmxibU52WkdsdVp5aGxLU0I3Q2lBZ0lDQWdJQ0FnVFhNb0lsUklVa1ZGTGxSbGVIUjFjbVU2SUZCeWIzQmxjblI1SUM1bGJtTnZaR2x1WnlCb1lYTWdZbVZsYmlCeVpYQnNZV05sWkNCaWVTQXVZMjlzYjNKVGNHRmpaUzRpS1N3Z2RHaHBjeTVqYjJ4dmNsTndZV05sSUQwZ1pTQTlQVDBnY21rZ1B5QjJkQ0E2SUZoME93b2dJQ0FnZlFwOU93cFRkQzVFUlVaQlZVeFVYMGxOUVVkRklEMGdiblZzYkRzS1UzUXVSRVZHUVZWTVZGOU5RVkJRU1U1SElEMGdSMk03Q2xOMExrUkZSa0ZWVEZSZlFVNUpVMDlVVWs5UVdTQTlJREU3Q25aaGNpQnFaU0E5SUdOc1lYTnpJSE14SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXdMQ0IwSUQwZ01Dd2diaUE5SURBc0lHa2dQU0F4S1hzS0lDQWdJQ0FnSUNCek1TNXdjbTkwYjNSNWNHVXVhWE5XWldOMGIzSTBJRDBnSVRBc0lIUm9hWE11ZUNBOUlHVXNJSFJvYVhNdWVTQTlJSFFzSUhSb2FYTXVlaUE5SUc0c0lIUm9hWE11ZHlBOUlHazdDaUFnSUNCOUNpQWdJQ0JuWlhRZ2QybGtkR2dvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlanNLSUNBZ0lIMEtJQ0FnSUhObGRDQjNhV1IwYUNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1NklEMGdaVHNLSUNBZ0lIMEtJQ0FnSUdkbGRDQm9aV2xuYUhRb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZHpzS0lDQWdJSDBLSUNBZ0lITmxkQ0JvWldsbmFIUW9aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkeUE5SUdVN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExDQjBhR2x6TG5rZ1BTQjBMQ0IwYUdsekxub2dQU0J1TENCMGFHbHpMbmNnUFNCcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdaU3dnZEdocGN5NTVJRDBnWlN3Z2RHaHBjeTU2SUQwZ1pTd2dkR2hwY3k1M0lEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwV1NobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZVNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJhS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU2SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRmNvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmNnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBRMjl0Y0c5dVpXNTBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVDQTlJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXhPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1NUlEMGdkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElESTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5vZ1BTQjBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ016b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZHlBOUlIUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaWFXNWtaWGdnYVhNZ2IzVjBJRzltSUhKaGJtZGxPaUFpSUNzZ1pTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBRMjl0Y0c5dVpXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCemQybDBZMmdvWlNsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Eb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmc3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTVRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuazdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5vN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ016b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmM3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSW1sdVpHVjRJR2x6SUc5MWRDQnZaaUJ5WVc1blpUb2dJaUFySUdVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWgwYUdsekxuZ3NJSFJvYVhNdWVTd2dkR2hwY3k1NkxDQjBhR2x6TG5jcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHVXVlQ3dnZEdocGN5NTVJRDBnWlM1NUxDQjBhR2x6TG5vZ1BTQmxMbm9zSUhSb2FYTXVkeUE5SUdVdWR5QWhQVDBnZG05cFpDQXdJRDhnWlM1M0lEb2dNU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0ZrWkNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBclBTQmxMbmdzSUhSb2FYTXVlU0FyUFNCbExua3NJSFJvYVhNdWVpQXJQU0JsTG5vc0lIUm9hWE11ZHlBclBTQmxMbmNzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JoWkdSVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS3owZ1pTd2dkR2hwY3k1NUlDczlJR1VzSUhSb2FYTXVlaUFyUFNCbExDQjBhR2x6TG5jZ0t6MGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0ZrWkZabFkzUnZjbk1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMbmdnS3lCMExuZ3NJSFJvYVhNdWVTQTlJR1V1ZVNBcklIUXVlU3dnZEdocGN5NTZJRDBnWlM1NklDc2dkQzU2TENCMGFHbHpMbmNnUFNCbExuY2dLeUIwTG5jc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFpHUlRZMkZzWldSV1pXTjBiM0lvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0t6MGdaUzU0SUNvZ2RDd2dkR2hwY3k1NUlDczlJR1V1ZVNBcUlIUXNJSFJvYVhNdWVpQXJQU0JsTG5vZ0tpQjBMQ0IwYUdsekxuY2dLejBnWlM1M0lDb2dkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE4xWWlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBdFBTQmxMbmdzSUhSb2FYTXVlU0F0UFNCbExua3NJSFJvYVhNdWVpQXRQU0JsTG5vc0lIUm9hWE11ZHlBdFBTQmxMbmNzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZFdKVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnTFQwZ1pTd2dkR2hwY3k1NUlDMDlJR1VzSUhSb2FYTXVlaUF0UFNCbExDQjBhR2x6TG5jZ0xUMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE4xWWxabFkzUnZjbk1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMbmdnTFNCMExuZ3NJSFJvYVhNdWVTQTlJR1V1ZVNBdElIUXVlU3dnZEdocGN5NTZJRDBnWlM1NklDMGdkQzU2TENCMGFHbHpMbmNnUFNCbExuY2dMU0IwTG5jc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdGRXeDBhWEJzZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBcVBTQmxMbmdzSUhSb2FYTXVlU0FxUFNCbExua3NJSFJvYVhNdWVpQXFQU0JsTG5vc0lIUm9hWE11ZHlBcVBTQmxMbmNzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0ZFd4MGFYQnNlVk5qWVd4aGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXFQU0JsTENCMGFHbHpMbmtnS2owZ1pTd2dkR2hwY3k1NklDbzlJR1VzSUhSb2FYTXVkeUFxUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxOWVhSeWFYZzBLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVlQ3dnYmlBOUlIUm9hWE11ZVN3Z2FTQTlJSFJvYVhNdWVpd2djaUE5SUhSb2FYTXVkeXdnWVNBOUlHVXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHRmJNRjBnS2lCMElDc2dZVnMwWFNBcUlHNGdLeUJoV3poZElDb2dhU0FySUdGYk1USmRJQ29nY2l3Z2RHaHBjeTU1SUQwZ1lWc3hYU0FxSUhRZ0t5QmhXelZkSUNvZ2JpQXJJR0ZiT1YwZ0tpQnBJQ3NnWVZzeE0xMGdLaUJ5TENCMGFHbHpMbm9nUFNCaFd6SmRJQ29nZENBcklHRmJObDBnS2lCdUlDc2dZVnN4TUYwZ0tpQnBJQ3NnWVZzeE5GMGdLaUJ5TENCMGFHbHpMbmNnUFNCaFd6TmRJQ29nZENBcklHRmJOMTBnS2lCdUlDc2dZVnN4TVYwZ0tpQnBJQ3NnWVZzeE5WMGdLaUJ5TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWkdsMmFXUmxVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGRXeDBhWEJzZVZOallXeGhjaWd4SUM4Z1pTazdDaUFnSUNCOUNpQWdJQ0J6WlhSQmVHbHpRVzVuYkdWR2NtOXRVWFZoZEdWeWJtbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTUzSUQwZ01pQXFJRTFoZEdndVlXTnZjeWhsTG5jcE93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1RXRjBhQzV6Y1hKMEtERWdMU0JsTG5jZ0tpQmxMbmNwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUR3Z01XVXROQ0EvSUNoMGFHbHpMbmdnUFNBeExDQjBhR2x6TG5rZ1BTQXdMQ0IwYUdsekxub2dQU0F3S1NBNklDaDBhR2x6TG5nZ1BTQmxMbmdnTHlCMExDQjBhR2x6TG5rZ1BTQmxMbmtnTHlCMExDQjBhR2x6TG5vZ1BTQmxMbm9nTHlCMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRUY0YVhOQmJtZHNaVVp5YjIxU2IzUmhkR2x2YmsxaGRISnBlQ2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFzSUc0c0lHa3NJSElzSUdNZ1BTQmxMbVZzWlcxbGJuUnpMQ0JzSUQwZ1kxc3dYU3dnYUNBOUlHTmJORjBzSUhVZ1BTQmpXemhkTENCa0lEMGdZMXN4WFN3Z1ppQTlJR05iTlYwc0lHMGdQU0JqV3psZExDQmZJRDBnWTFzeVhTd2daeUE5SUdOYk5sMHNJSEFnUFNCald6RXdYVHNLSUNBZ0lDQWdJQ0JwWmlBb1RXRjBhQzVoWW5Nb2FDQXRJR1FwSUR3Z0xqQXhJQ1ltSUUxaGRHZ3VZV0p6S0hVZ0xTQmZLU0E4SUM0d01TQW1KaUJOWVhSb0xtRmljeWh0SUMwZ1p5a2dQQ0F1TURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFMWhkR2d1WVdKektHZ2dLeUJrS1NBOElDNHhJQ1ltSUUxaGRHZ3VZV0p6S0hVZ0t5QmZLU0E4SUM0eElDWW1JRTFoZEdndVlXSnpLRzBnS3lCbktTQThJQzR4SUNZbUlFMWhkR2d1WVdKektHd2dLeUJtSUNzZ2NDQXRJRE1wSUR3Z0xqRXBJSEpsZEhWeWJpQjBhR2x6TG5ObGRDZ3hMQ0F3TENBd0xDQXdLU3dnZEdocGN6c0tJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlFMWhkR2d1VUVrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNElEMGdLR3dnS3lBeEtTQXZJRElzSUhrZ1BTQW9aaUFySURFcElDOGdNaXdnWWlBOUlDaHdJQ3NnTVNrZ0x5QXlMQ0IzSUQwZ0tHZ2dLeUJrS1NBdklEUXNJRklnUFNBb2RTQXJJRjhwSUM4Z05Dd2dTU0E5SUNodElDc2daeWtnTHlBME93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlQ0ErSUhrZ0ppWWdlQ0ErSUdJZ1B5QjRJRHdnTGpBeElEOGdLRzRnUFNBd0xDQnBJRDBnTGpjd056RXdOamM0TVN3Z2NpQTlJQzQzTURjeE1EWTNPREVwSURvZ0tHNGdQU0JOWVhSb0xuTnhjblFvZUNrc0lHa2dQU0IzSUM4Z2Jpd2djaUE5SUZJZ0x5QnVLU0E2SUhrZ1BpQmlJRDhnZVNBOElDNHdNU0EvSUNodUlEMGdMamN3TnpFd05qYzRNU3dnYVNBOUlEQXNJSElnUFNBdU56QTNNVEEyTnpneEtTQTZJQ2hwSUQwZ1RXRjBhQzV6Y1hKMEtIa3BMQ0J1SUQwZ2R5QXZJR2tzSUhJZ1BTQkpJQzhnYVNrZ09pQmlJRHdnTGpBeElEOGdLRzRnUFNBdU56QTNNVEEyTnpneExDQnBJRDBnTGpjd056RXdOamM0TVN3Z2NpQTlJREFwSURvZ0tISWdQU0JOWVhSb0xuTnhjblFvWWlrc0lHNGdQU0JTSUM4Z2Npd2dhU0E5SUVrZ0x5QnlLU3dnZEdocGN5NXpaWFFvYml3Z2FTd2djaXdnZENrc0lIUm9hWE03Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnVFdGMGFDNXpjWEowS0NobklDMGdiU2tnS2lBb1p5QXRJRzBwSUNzZ0tIVWdMU0JmS1NBcUlDaDFJQzBnWHlrZ0t5QW9aQ0F0SUdncElDb2dLR1FnTFNCb0tTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1WVdKektIWXBJRHdnTGpBd01TQW1KaUFvZGlBOUlERXBMQ0IwYUdsekxuZ2dQU0FvWnlBdElHMHBJQzhnZGl3Z2RHaHBjeTU1SUQwZ0tIVWdMU0JmS1NBdklIWXNJSFJvYVhNdWVpQTlJQ2hrSUMwZ2FDa2dMeUIyTENCMGFHbHpMbmNnUFNCTllYUm9MbUZqYjNNb0tHd2dLeUJtSUNzZ2NDQXRJREVwSUM4Z01pa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRhVzRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFwYmloMGFHbHpMbmdzSUdVdWVDa3NJSFJvYVhNdWVTQTlJRTFoZEdndWJXbHVLSFJvYVhNdWVTd2daUzU1S1N3Z2RHaHBjeTU2SUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTU2TENCbExub3BMQ0IwYUdsekxuY2dQU0JOWVhSb0xtMXBiaWgwYUdsekxuY3NJR1V1ZHlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdFlYZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xtMWhlQ2gwYUdsekxuZ3NJR1V1ZUNrc0lIUm9hWE11ZVNBOUlFMWhkR2d1YldGNEtIUm9hWE11ZVN3Z1pTNTVLU3dnZEdocGN5NTZJRDBnVFdGMGFDNXRZWGdvZEdocGN5NTZMQ0JsTG5vcExDQjBhR2x6TG5jZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG5jc0lHVXVkeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkdGdGNDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3ViV0Y0S0dVdWVDd2dUV0YwYUM1dGFXNG9kQzU0TENCMGFHbHpMbmdwS1N3Z2RHaHBjeTU1SUQwZ1RXRjBhQzV0WVhnb1pTNTVMQ0JOWVhSb0xtMXBiaWgwTG5rc0lIUm9hWE11ZVNrcExDQjBhR2x6TG5vZ1BTQk5ZWFJvTG0xaGVDaGxMbm9zSUUxaGRHZ3ViV2x1S0hRdWVpd2dkR2hwY3k1NktTa3NJSFJvYVhNdWR5QTlJRTFoZEdndWJXRjRLR1V1ZHl3Z1RXRjBhQzV0YVc0b2RDNTNMQ0IwYUdsekxuY3BLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zWVcxd1UyTmhiR0Z5S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1dFlYZ29aU3dnVFdGMGFDNXRhVzRvZEN3Z2RHaHBjeTU0S1Nrc0lIUm9hWE11ZVNBOUlFMWhkR2d1YldGNEtHVXNJRTFoZEdndWJXbHVLSFFzSUhSb2FYTXVlU2twTENCMGFHbHpMbm9nUFNCTllYUm9MbTFoZUNobExDQk5ZWFJvTG0xcGJpaDBMQ0IwYUdsekxub3BLU3dnZEdocGN5NTNJRDBnVFdGMGFDNXRZWGdvWlN3Z1RXRjBhQzV0YVc0b2RDd2dkR2hwY3k1M0tTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiR0Z0Y0V4bGJtZDBhQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG14bGJtZDBhQ2dwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUnBkbWxrWlZOallXeGhjaWh1SUh4OElERXBMbTExYkhScGNHeDVVMk5oYkdGeUtFMWhkR2d1YldGNEtHVXNJRTFoZEdndWJXbHVLSFFzSUc0cEtTazdDaUFnSUNCOUNpQWdJQ0JtYkc5dmNpZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1bWJHOXZjaWgwYUdsekxuZ3BMQ0IwYUdsekxua2dQU0JOWVhSb0xtWnNiMjl5S0hSb2FYTXVlU2tzSUhSb2FYTXVlaUE5SUUxaGRHZ3VabXh2YjNJb2RHaHBjeTU2S1N3Z2RHaHBjeTUzSUQwZ1RXRjBhQzVtYkc5dmNpaDBhR2x6TG5jcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyVnBiQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnVFdGMGFDNWpaV2xzS0hSb2FYTXVlQ2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3VZMlZwYkNoMGFHbHpMbmtwTENCMGFHbHpMbm9nUFNCTllYUm9MbU5sYVd3b2RHaHBjeTU2S1N3Z2RHaHBjeTUzSUQwZ1RXRjBhQzVqWldsc0tIUm9hWE11ZHlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzVnVaQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnVFdGMGFDNXliM1Z1WkNoMGFHbHpMbmdwTENCMGFHbHpMbmtnUFNCTllYUm9Mbkp2ZFc1a0tIUm9hWE11ZVNrc0lIUm9hWE11ZWlBOUlFMWhkR2d1Y205MWJtUW9kR2hwY3k1NktTd2dkR2hwY3k1M0lEMGdUV0YwYUM1eWIzVnVaQ2gwYUdsekxuY3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkxYm1SVWIxcGxjbThvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3VkSEoxYm1Nb2RHaHBjeTU0S1N3Z2RHaHBjeTU1SUQwZ1RXRjBhQzUwY25WdVl5aDBhR2x6TG5rcExDQjBhR2x6TG5vZ1BTQk5ZWFJvTG5SeWRXNWpLSFJvYVhNdWVpa3NJSFJvYVhNdWR5QTlJRTFoZEdndWRISjFibU1vZEdocGN5NTNLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzVsWjJGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdMWFJvYVhNdWVDd2dkR2hwY3k1NUlEMGdMWFJvYVhNdWVTd2dkR2hwY3k1NklEMGdMWFJvYVhNdWVpd2dkR2hwY3k1M0lEMGdMWFJvYVhNdWR5d2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnZkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FxSUdVdWVDQXJJSFJvYVhNdWVTQXFJR1V1ZVNBcklIUm9hWE11ZWlBcUlHVXVlaUFySUhSb2FYTXVkeUFxSUdVdWR6c0tJQ0FnSUgwS0lDQWdJR3hsYm1kMGFGTnhLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLaUIwYUdsekxuZ2dLeUIwYUdsekxua2dLaUIwYUdsekxua2dLeUIwYUdsekxub2dLaUIwYUdsekxub2dLeUIwYUdsekxuY2dLaUIwYUdsekxuYzdDaUFnSUNCOUNpQWdJQ0JzWlc1bmRHZ29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndWMzRnlkQ2gwYUdsekxuZ2dLaUIwYUdsekxuZ2dLeUIwYUdsekxua2dLaUIwYUdsekxua2dLeUIwYUdsekxub2dLaUIwYUdsekxub2dLeUIwYUdsekxuY2dLaUIwYUdsekxuY3BPd29nSUNBZ2ZRb2dJQ0FnYldGdWFHRjBkR0Z1VEdWdVozUm9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtRmljeWgwYUdsekxuZ3BJQ3NnVFdGMGFDNWhZbk1vZEdocGN5NTVLU0FySUUxaGRHZ3VZV0p6S0hSb2FYTXVlaWtnS3lCTllYUm9MbUZpY3loMGFHbHpMbmNwT3dvZ0lDQWdmUW9nSUNBZ2JtOXliV0ZzYVhwbEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGRtbGtaVk5qWVd4aGNpaDBhR2x6TG14bGJtZDBhQ2dwSUh4OElERXBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFRHVnVaM1JvS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVVvS1M1dGRXeDBhWEJzZVZOallXeGhjaWhsS1RzS0lDQWdJSDBLSUNBZ0lHeGxjbkFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0t6MGdLR1V1ZUNBdElIUm9hWE11ZUNrZ0tpQjBMQ0IwYUdsekxua2dLejBnS0dVdWVTQXRJSFJvYVhNdWVTa2dLaUIwTENCMGFHbHpMbm9nS3owZ0tHVXVlaUF0SUhSb2FYTXVlaWtnS2lCMExDQjBhR2x6TG5jZ0t6MGdLR1V1ZHlBdElIUm9hWE11ZHlrZ0tpQjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiR1Z5Y0ZabFkzUnZjbk1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5nZ0t5QW9kQzU0SUMwZ1pTNTRLU0FxSUc0c0lIUm9hWE11ZVNBOUlHVXVlU0FySUNoMExua2dMU0JsTG5rcElDb2diaXdnZEdocGN5NTZJRDBnWlM1NklDc2dLSFF1ZWlBdElHVXVlaWtnS2lCdUxDQjBhR2x6TG5jZ1BTQmxMbmNnS3lBb2RDNTNJQzBnWlM1M0tTQXFJRzRzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JsY1hWaGJITW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG5nZ1BUMDlJSFJvYVhNdWVDQW1KaUJsTG5rZ1BUMDlJSFJvYVhNdWVTQW1KaUJsTG5vZ1BUMDlJSFJvYVhNdWVpQW1KaUJsTG5jZ1BUMDlJSFJvYVhNdWR6c0tJQ0FnSUgwS0lDQWdJR1p5YjIxQmNuSmhlU2hsTENCMElEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsVzNSZExDQjBhR2x6TG5rZ1BTQmxXM1FnS3lBeFhTd2dkR2hwY3k1NklEMGdaVnQwSUNzZ01sMHNJSFJvYVhNdWR5QTlJR1ZiZENBcklETmRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlCY25KaGVTaGxJRDBnVzEwc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0IwYUdsekxuZ3NJR1ZiZENBcklERmRJRDBnZEdocGN5NTVMQ0JsVzNRZ0t5QXlYU0E5SUhSb2FYTXVlaXdnWlZ0MElDc2dNMTBnUFNCMGFHbHpMbmNzSUdVN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pTNW5aWFJZS0hRcExDQjBhR2x6TG5rZ1BTQmxMbWRsZEZrb2RDa3NJSFJvYVhNdWVpQTlJR1V1WjJWMFdpaDBLU3dnZEdocGN5NTNJRDBnWlM1blpYUlhLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY21GdVpHOXRLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xuSmhibVJ2YlNncExDQjBhR2x6TG5rZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTENCMGFHbHpMbm9nUFNCTllYUm9MbkpoYm1SdmJTZ3BMQ0IwYUdsekxuY2dQU0JOWVhSb0xuSmhibVJ2YlNncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ0tsdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZEtDa2dld29nSUNBZ0lDQWdJSGxwWld4a0lIUm9hWE11ZUN3Z2VXbGxiR1FnZEdocGN5NTVMQ0I1YVdWc1pDQjBhR2x6TG5vc0lIbHBaV3hrSUhSb2FYTXVkenNLSUNBZ0lIMEtmU3dnWjI4Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUhOdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TENCMElEMGdNU3dnYmlBOUlIdDlLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpVbVZ1WkdWeVZHRnlaMlYwSUQwZ0lUQXNJSFJvYVhNdWQybGtkR2dnUFNCbExDQjBhR2x6TG1obGFXZG9kQ0E5SUhRc0lIUm9hWE11WkdWd2RHZ2dQU0F4TENCMGFHbHpMbk5qYVhOemIzSWdQU0J1WlhjZ2FtVW9NQ3dnTUN3Z1pTd2dkQ2tzSUhSb2FYTXVjMk5wYzNOdmNsUmxjM1FnUFNBaE1Td2dkR2hwY3k1MmFXVjNjRzl5ZENBOUlHNWxkeUJxWlNnd0xDQXdMQ0JsTENCMEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHZzZJREVLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUc0dVpXNWpiMlJwYm1jZ0lUMDlJSFp2YVdRZ01DQW1KaUFvVFhNb0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwT2lCdmNIUnBiMjR1Wlc1amIyUnBibWNnYUdGeklHSmxaVzRnY21Wd2JHRmpaV1FnWW5rZ2IzQjBhVzl1TG1OdmJHOXlVM0JoWTJVdUlpa3NJRzR1WTI5c2IzSlRjR0ZqWlNBOUlHNHVaVzVqYjJScGJtY2dQVDA5SUhKcElEOGdkblFnT2lCWWRDa3NJRzRnUFNCUFltcGxZM1F1WVhOemFXZHVLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEdWTmFYQnRZWEJ6T2lBaE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYVc1MFpYSnVZV3hHYjNKdFlYUTZJRzUxYkd3c0NpQWdJQ0FnSUNBZ0lDQWdJRzFwYmtacGJIUmxjam9nYlhRc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1FuVm1abVZ5T2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNSbGJtTnBiRUoxWm1abGNqb2dJVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvVkdWNGRIVnlaVG9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJGdGNHeGxjem9nTUFvZ0lDQWdJQ0FnSUgwc0lHNHBMQ0IwYUdsekxuUmxlSFIxY21VZ1BTQnVaWGNnVTNRb2FTd2diaTV0WVhCd2FXNW5MQ0J1TG5keVlYQlRMQ0J1TG5keVlYQlVMQ0J1TG0xaFowWnBiSFJsY2l3Z2JpNXRhVzVHYVd4MFpYSXNJRzR1Wm05eWJXRjBMQ0J1TG5SNWNHVXNJRzR1WVc1cGMyOTBjbTl3ZVN3Z2JpNWpiMnh2Y2xOd1lXTmxLU3dnZEdocGN5NTBaWGgwZFhKbExtbHpVbVZ1WkdWeVZHRnlaMlYwVkdWNGRIVnlaU0E5SUNFd0xDQjBhR2x6TG5SbGVIUjFjbVV1Wm14cGNGa2dQU0FoTVN3Z2RHaHBjeTUwWlhoMGRYSmxMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJRzR1WjJWdVpYSmhkR1ZOYVhCdFlYQnpMQ0IwYUdsekxuUmxlSFIxY21VdWFXNTBaWEp1WVd4R2IzSnRZWFFnUFNCdUxtbHVkR1Z5Ym1Gc1JtOXliV0YwTENCMGFHbHpMbVJsY0hSb1FuVm1abVZ5SUQwZ2JpNWtaWEIwYUVKMVptWmxjaXdnZEdocGN5NXpkR1Z1WTJsc1FuVm1abVZ5SUQwZ2JpNXpkR1Z1WTJsc1FuVm1abVZ5TENCMGFHbHpMbVJsY0hSb1ZHVjRkSFZ5WlNBOUlHNHVaR1Z3ZEdoVVpYaDBkWEpsTENCMGFHbHpMbk5oYlhCc1pYTWdQU0J1TG5OaGJYQnNaWE03Q2lBZ0lDQjlDaUFnSUNCelpYUlRhWHBsS0dVc0lIUXNJRzRnUFNBeEtTQjdDaUFnSUNBZ0lDQWdLSFJvYVhNdWQybGtkR2dnSVQwOUlHVWdmSHdnZEdocGN5NW9aV2xuYUhRZ0lUMDlJSFFnZkh3Z2RHaHBjeTVrWlhCMGFDQWhQVDBnYmlrZ0ppWWdLSFJvYVhNdWQybGtkR2dnUFNCbExDQjBhR2x6TG1obGFXZG9kQ0E5SUhRc0lIUm9hWE11WkdWd2RHZ2dQU0J1TENCMGFHbHpMblJsZUhSMWNtVXVhVzFoWjJVdWQybGtkR2dnUFNCbExDQjBhR2x6TG5SbGVIUjFjbVV1YVcxaFoyVXVhR1ZwWjJoMElEMGdkQ3dnZEdocGN5NTBaWGgwZFhKbExtbHRZV2RsTG1SbGNIUm9JRDBnYml3Z2RHaHBjeTVrYVhOd2IzTmxLQ2twTENCMGFHbHpMblpwWlhkd2IzSjBMbk5sZENnd0xDQXdMQ0JsTENCMEtTd2dkR2hwY3k1elkybHpjMjl5TG5ObGRDZ3dMQ0F3TENCbExDQjBLVHNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuZHBaSFJvSUQwZ1pTNTNhV1IwYUN3Z2RHaHBjeTVvWldsbmFIUWdQU0JsTG1obGFXZG9kQ3dnZEdocGN5NWtaWEIwYUNBOUlHVXVaR1Z3ZEdnc0lIUm9hWE11YzJOcGMzTnZjaTVqYjNCNUtHVXVjMk5wYzNOdmNpa3NJSFJvYVhNdWMyTnBjM052Y2xSbGMzUWdQU0JsTG5OamFYTnpiM0pVWlhOMExDQjBhR2x6TG5acFpYZHdiM0owTG1OdmNIa29aUzUyYVdWM2NHOXlkQ2tzSUhSb2FYTXVkR1Y0ZEhWeVpTQTlJR1V1ZEdWNGRIVnlaUzVqYkc5dVpTZ3BMQ0IwYUdsekxuUmxlSFIxY21VdWFYTlNaVzVrWlhKVVlYSm5aWFJVWlhoMGRYSmxJRDBnSVRBN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExuUmxlSFIxY21VdWFXMWhaMlVwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuUmxlSFIxY21VdWMyOTFjbU5sSUQwZ2JtVjNJRWx1S0hRcExDQjBhR2x6TG1SbGNIUm9RblZtWm1WeUlEMGdaUzVrWlhCMGFFSjFabVpsY2l3Z2RHaHBjeTV6ZEdWdVkybHNRblZtWm1WeUlEMGdaUzV6ZEdWdVkybHNRblZtWm1WeUxDQmxMbVJsY0hSb1ZHVjRkSFZ5WlNBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1a1pYQjBhRlJsZUhSMWNtVWdQU0JsTG1SbGNIUm9WR1Y0ZEhWeVpTNWpiRzl1WlNncEtTd2dkR2hwY3k1ellXMXdiR1Z6SUQwZ1pTNXpZVzF3YkdWekxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFpWkdsemNHOXpaU0lLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJSDBLZlN3Z2NYUWdQU0JqYkdGemN5QmxlSFJsYm1SeklHZHZJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTVN3Z2JpQTlJSHQ5S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMExDQnVLU3dnZEdocGN5NXBjMWRsWWtkTVVtVnVaR1Z5VkdGeVoyVjBJRDBnSVRBN0NpQWdJQ0I5Q24wc0lFRnpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QlRkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JuVnNiQ3dnZENBOUlERXNJRzRnUFNBeExDQnBJRDBnTVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvYm5Wc2JDa3NJSFJvYVhNdWFYTkVZWFJoUVhKeVlYbFVaWGgwZFhKbElEMGdJVEFzSUhSb2FYTXVhVzFoWjJVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvT2lCcENpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1dFlXZEdhV3gwWlhJZ1BTQndkQ3dnZEdocGN5NXRhVzVHYVd4MFpYSWdQU0J3ZEN3Z2RHaHBjeTUzY21Gd1VpQTlJRWwwTENCMGFHbHpMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJQ0V4TENCMGFHbHpMbVpzYVhCWklEMGdJVEVzSUhSb2FYTXVkVzV3WVdOclFXeHBaMjV0Wlc1MElEMGdNVHNLSUNBZ0lIMEtmU3dnYTJ3Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUhGMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TENCMElEMGdNU3dnYmlBOUlERXBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXNJSFFwTENCMGFHbHpMbWx6VjJWaVIweEJjbkpoZVZKbGJtUmxjbFJoY21kbGRDQTlJQ0V3TENCMGFHbHpMbVJsY0hSb0lEMGdiaXdnZEdocGN5NTBaWGgwZFhKbElEMGdibVYzSUVGektHNTFiR3dzSUdVc0lIUXNJRzRwTENCMGFHbHpMblJsZUhSMWNtVXVhWE5TWlc1a1pYSlVZWEpuWlhSVVpYaDBkWEpsSUQwZ0lUQTdDaUFnSUNCOUNuMHNJSEZ5SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJUZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdiblZzYkN3Z2RDQTlJREVzSUc0Z1BTQXhMQ0JwSUQwZ01TbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JuVnNiQ2tzSUhSb2FYTXVhWE5FWVhSaE0wUlVaWGgwZFhKbElEMGdJVEFzSUhSb2FYTXVhVzFoWjJVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvT2lCcENpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1dFlXZEdhV3gwWlhJZ1BTQndkQ3dnZEdocGN5NXRhVzVHYVd4MFpYSWdQU0J3ZEN3Z2RHaHBjeTUzY21Gd1VpQTlJRWwwTENCMGFHbHpMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJQ0V4TENCMGFHbHpMbVpzYVhCWklEMGdJVEVzSUhSb2FYTXVkVzV3WVdOclFXeHBaMjV0Wlc1MElEMGdNVHNLSUNBZ0lIMEtmU3dnU0d3Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUhGMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TENCMElEMGdNU3dnYmlBOUlERXBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXNJSFFwTENCMGFHbHpMbWx6VjJWaVIwd3pSRkpsYm1SbGNsUmhjbWRsZENBOUlDRXdMQ0IwYUdsekxtUmxjSFJvSUQwZ2Jpd2dkR2hwY3k1MFpYaDBkWEpsSUQwZ2JtVjNJSEZ5S0c1MWJHd3NJR1VzSUhRc0lHNHBMQ0IwYUdsekxuUmxlSFIxY21VdWFYTlNaVzVrWlhKVVlYSm5aWFJVWlhoMGRYSmxJRDBnSVRBN0NpQWdJQ0I5Q24wc0lFZHNJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QnhkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Td2dkQ0E5SURFc0lHNGdQU0F4TENCcElEMGdlMzBwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VzSUhRc0lHa3BMQ0IwYUdsekxtbHpWMlZpUjB4TmRXeDBhWEJzWlZKbGJtUmxjbFJoY21kbGRITWdQU0FoTURzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSb2FYTXVkR1Y0ZEhWeVpUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SbGVIUjFjbVVnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHRWdQU0F3T3lCaElEd2dianNnWVNzcktYUm9hWE11ZEdWNGRIVnlaVnRoWFNBOUlISXVZMnh2Ym1Vb0tTd2dkR2hwY3k1MFpYaDBkWEpsVzJGZExtbHpVbVZ1WkdWeVZHRnlaMlYwVkdWNGRIVnlaU0E5SUNFd093b2dJQ0FnZlFvZ0lDQWdjMlYwVTJsNlpTaGxMQ0IwTENCdUlEMGdNU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5kcFpIUm9JQ0U5UFNCbElIeDhJSFJvYVhNdWFHVnBaMmgwSUNFOVBTQjBJSHg4SUhSb2FYTXVaR1Z3ZEdnZ0lUMDlJRzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2FXUjBhQ0E5SUdVc0lIUm9hWE11YUdWcFoyaDBJRDBnZEN3Z2RHaHBjeTVrWlhCMGFDQTlJRzQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREFzSUhJZ1BTQjBhR2x6TG5SbGVIUjFjbVV1YkdWdVozUm9PeUJwSUR3Z2Nqc2dhU3NyS1hSb2FYTXVkR1Y0ZEhWeVpWdHBYUzVwYldGblpTNTNhV1IwYUNBOUlHVXNJSFJvYVhNdWRHVjRkSFZ5WlZ0cFhTNXBiV0ZuWlM1b1pXbG5hSFFnUFNCMExDQjBhR2x6TG5SbGVIUjFjbVZiYVYwdWFXMWhaMlV1WkdWd2RHZ2dQU0J1T3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlVvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdWM2NHOXlkQzV6WlhRb01Dd2dNQ3dnWlN3Z2RDa3NJSFJvYVhNdWMyTnBjM052Y2k1elpYUW9NQ3dnTUN3Z1pTd2dkQ2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzNCdmMyVW9LU3dnZEdocGN5NTNhV1IwYUNBOUlHVXVkMmxrZEdnc0lIUm9hWE11YUdWcFoyaDBJRDBnWlM1b1pXbG5hSFFzSUhSb2FYTXVaR1Z3ZEdnZ1BTQmxMbVJsY0hSb0xDQjBhR2x6TG5OamFYTnpiM0l1WTI5d2VTaGxMbk5qYVhOemIzSXBMQ0IwYUdsekxuTmphWE56YjNKVVpYTjBJRDBnWlM1elkybHpjMjl5VkdWemRDd2dkR2hwY3k1MmFXVjNjRzl5ZEM1amIzQjVLR1V1ZG1sbGQzQnZjblFwTENCMGFHbHpMbVJsY0hSb1FuVm1abVZ5SUQwZ1pTNWtaWEIwYUVKMVptWmxjaXdnZEdocGN5NXpkR1Z1WTJsc1FuVm1abVZ5SUQwZ1pTNXpkR1Z1WTJsc1FuVm1abVZ5TENCbExtUmxjSFJvVkdWNGRIVnlaU0FoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVrWlhCMGFGUmxlSFIxY21VZ1BTQmxMbVJsY0hSb1ZHVjRkSFZ5WlM1amJHOXVaU2dwS1N3Z2RHaHBjeTUwWlhoMGRYSmxMbXhsYm1kMGFDQTlJREE3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUdVdWRHVjRkSFZ5WlM1c1pXNW5kR2c3SUhRZ1BDQnVPeUIwS3lzcGRHaHBjeTUwWlhoMGRYSmxXM1JkSUQwZ1pTNTBaWGgwZFhKbFczUmRMbU5zYjI1bEtDa3NJSFJvYVhNdWRHVjRkSFZ5WlZ0MFhTNXBjMUpsYm1SbGNsUmhjbWRsZEZSbGVIUjFjbVVnUFNBaE1Ec0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtmU3dnVlhRZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdNQ3dnZENBOUlEQXNJRzRnUFNBd0xDQnBJRDBnTVNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwYzFGMVlYUmxjbTVwYjI0Z1BTQWhNQ3dnZEdocGN5NWZlQ0E5SUdVc0lIUm9hWE11WDNrZ1BTQjBMQ0IwYUdsekxsOTZJRDBnYml3Z2RHaHBjeTVmZHlBOUlHazdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdjMnhsY25CR2JHRjBLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXNJRzhwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc1YmFTQXJJREJkTENCc0lEMGdibHRwSUNzZ01WMHNJR2dnUFNCdVcya2dLeUF5WFN3Z2RTQTlJRzViYVNBcklETmRMQ0JrSUQwZ2NsdGhJQ3NnTUYwc0lHWWdQU0J5VzJFZ0t5QXhYU3dnYlNBOUlISmJZU0FySURKZExDQmZJRDBnY2x0aElDc2dNMTA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHOGdQVDA5SURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWlZ0MElDc2dNRjBnUFNCakxDQmxXM1FnS3lBeFhTQTlJR3dzSUdWYmRDQXJJREpkSUQwZ2FDd2daVnQwSUNzZ00xMGdQU0IxT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2h2SUQwOVBTQXhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVmJkQ0FySURCZElEMGdaQ3dnWlZ0MElDc2dNVjBnUFNCbUxDQmxXM1FnS3lBeVhTQTlJRzBzSUdWYmRDQXJJRE5kSUQwZ1h6c0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb2RTQWhQVDBnWHlCOGZDQmpJQ0U5UFNCa0lIeDhJR3dnSVQwOUlHWWdmSHdnYUNBaFBUMGdiU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWnlBOUlERWdMU0J2TENCd0lEMGdZeUFxSUdRZ0t5QnNJQ29nWmlBcklHZ2dLaUJ0SUNzZ2RTQXFJRjhzSUhZZ1BTQndJRDQ5SURBZ1B5QXhJRG9nTFRFc0lIZ2dQU0F4SUMwZ2NDQXFJSEE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2g0SUQ0Z1RuVnRZbVZ5TGtWUVUwbE1UMDRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmlJRDBnVFdGMGFDNXpjWEowS0hncExDQjNJRDBnVFdGMGFDNWhkR0Z1TWloaUxDQndJQ29nZGlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbklEMGdUV0YwYUM1emFXNG9aeUFxSUhjcElDOGdZaXdnYnlBOUlFMWhkR2d1YzJsdUtHOGdLaUIzS1NBdklHSTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhrZ1BTQnZJQ29nZGpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dNZ1BTQmpJQ29nWnlBcklHUWdLaUI1TENCc0lEMGdiQ0FxSUdjZ0t5Qm1JQ29nZVN3Z2FDQTlJR2dnS2lCbklDc2diU0FxSUhrc0lIVWdQU0IxSUNvZ1p5QXJJRjhnS2lCNUxDQm5JRDA5UFNBeElDMGdieWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSWdQU0F4SUM4Z1RXRjBhQzV6Y1hKMEtHTWdLaUJqSUNzZ2JDQXFJR3dnS3lCb0lDb2dhQ0FySUhVZ0tpQjFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR01nS2owZ1lpd2diQ0FxUFNCaUxDQm9JQ285SUdJc0lIVWdLajBnWWpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JsVzNSZElEMGdZeXdnWlZ0MElDc2dNVjBnUFNCc0xDQmxXM1FnS3lBeVhTQTlJR2dzSUdWYmRDQXJJRE5kSUQwZ2RUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5QnRkV3gwYVhCc2VWRjFZWFJsY201cGIyNXpSbXhoZENobExDQjBMQ0J1TENCcExDQnlMQ0JoS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCdVcybGRMQ0JqSUQwZ2JsdHBJQ3NnTVYwc0lHd2dQU0J1VzJrZ0t5QXlYU3dnYUNBOUlHNWJhU0FySUROZExDQjFJRDBnY2x0aFhTd2daQ0E5SUhKYllTQXJJREZkTENCbUlEMGdjbHRoSUNzZ01sMHNJRzBnUFNCeVcyRWdLeUF6WFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlZ0MFhTQTlJRzhnS2lCdElDc2dhQ0FxSUhVZ0t5QmpJQ29nWmlBdElHd2dLaUJrTENCbFczUWdLeUF4WFNBOUlHTWdLaUJ0SUNzZ2FDQXFJR1FnS3lCc0lDb2dkU0F0SUc4Z0tpQm1MQ0JsVzNRZ0t5QXlYU0E5SUd3Z0tpQnRJQ3NnYUNBcUlHWWdLeUJ2SUNvZ1pDQXRJR01nS2lCMUxDQmxXM1FnS3lBelhTQTlJR2dnS2lCdElDMGdieUFxSUhVZ0xTQmpJQ29nWkNBdElHd2dLaUJtTENCbE93b2dJQ0FnZlFvZ0lDQWdaMlYwSUhnb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNnN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnZUNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmVDQTlJR1VzSUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc29LVHNLSUNBZ0lIMEtJQ0FnSUdkbGRDQjVLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTVPd29nSUNBZ2ZRb2dJQ0FnYzJWMElIa29aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYM2tnUFNCbExDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0NrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFFnZWlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZWpzS0lDQWdJSDBLSUNBZ0lITmxkQ0I2S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5NklEMGdaU3dnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BPd29nSUNBZ2ZRb2dJQ0FnWjJWMElIY29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzYzdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2R5aGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZkeUE5SUdVc0lIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1RzS0lDQWdJSDBLSUNBZ0lITmxkQ2hsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2dnUFNCbExDQjBhR2x6TGw5NUlEMGdkQ3dnZEdocGN5NWZlaUE5SUc0c0lIUm9hWE11WDNjZ1BTQnBMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9kR2hwY3k1ZmVDd2dkR2hwY3k1ZmVTd2dkR2hwY3k1ZmVpd2dkR2hwY3k1ZmR5azdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmVDQTlJR1V1ZUN3Z2RHaHBjeTVmZVNBOUlHVXVlU3dnZEdocGN5NWZlaUE5SUdVdWVpd2dkR2hwY3k1ZmR5QTlJR1V1ZHl3Z2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVVYxYkdWeUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVgzZ3NJR2tnUFNCbExsOTVMQ0J5SUQwZ1pTNWZlaXdnWVNBOUlHVXVYMjl5WkdWeUxDQnZJRDBnVFdGMGFDNWpiM01zSUdNZ1BTQk5ZWFJvTG5OcGJpd2diQ0E5SUc4b2JpQXZJRElwTENCb0lEMGdieWhwSUM4Z01pa3NJSFVnUFNCdktISWdMeUF5S1N3Z1pDQTlJR01vYmlBdklESXBMQ0JtSUQwZ1l5aHBJQzhnTWlrc0lHMGdQU0JqS0hJZ0x5QXlLVHNLSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29ZU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxoWldpSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5NElEMGdaQ0FxSUdnZ0tpQjFJQ3NnYkNBcUlHWWdLaUJ0TENCMGFHbHpMbDk1SUQwZ2JDQXFJR1lnS2lCMUlDMGdaQ0FxSUdnZ0tpQnRMQ0IwYUdsekxsOTZJRDBnYkNBcUlHZ2dLaUJ0SUNzZ1pDQXFJR1lnS2lCMUxDQjBhR2x6TGw5M0lEMGdiQ0FxSUdnZ0tpQjFJQzBnWkNBcUlHWWdLaUJ0T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGxZV2lJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDk0SUQwZ1pDQXFJR2dnS2lCMUlDc2diQ0FxSUdZZ0tpQnRMQ0IwYUdsekxsOTVJRDBnYkNBcUlHWWdLaUIxSUMwZ1pDQXFJR2dnS2lCdExDQjBhR2x6TGw5NklEMGdiQ0FxSUdnZ0tpQnRJQzBnWkNBcUlHWWdLaUIxTENCMGFHbHpMbDkzSUQwZ2JDQXFJR2dnS2lCMUlDc2daQ0FxSUdZZ0tpQnRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lscFlXU0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTRJRDBnWkNBcUlHZ2dLaUIxSUMwZ2JDQXFJR1lnS2lCdExDQjBhR2x6TGw5NUlEMGdiQ0FxSUdZZ0tpQjFJQ3NnWkNBcUlHZ2dLaUJ0TENCMGFHbHpMbDk2SUQwZ2JDQXFJR2dnS2lCdElDc2daQ0FxSUdZZ0tpQjFMQ0IwYUdsekxsOTNJRDBnYkNBcUlHZ2dLaUIxSUMwZ1pDQXFJR1lnS2lCdE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxwWldDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5NElEMGdaQ0FxSUdnZ0tpQjFJQzBnYkNBcUlHWWdLaUJ0TENCMGFHbHpMbDk1SUQwZ2JDQXFJR1lnS2lCMUlDc2daQ0FxSUdnZ0tpQnRMQ0IwYUdsekxsOTZJRDBnYkNBcUlHZ2dLaUJ0SUMwZ1pDQXFJR1lnS2lCMUxDQjBhR2x6TGw5M0lEMGdiQ0FxSUdnZ0tpQjFJQ3NnWkNBcUlHWWdLaUJ0T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGxhV0NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDk0SUQwZ1pDQXFJR2dnS2lCMUlDc2diQ0FxSUdZZ0tpQnRMQ0IwYUdsekxsOTVJRDBnYkNBcUlHWWdLaUIxSUNzZ1pDQXFJR2dnS2lCdExDQjBhR2x6TGw5NklEMGdiQ0FxSUdnZ0tpQnRJQzBnWkNBcUlHWWdLaUIxTENCMGFHbHpMbDkzSUQwZ2JDQXFJR2dnS2lCMUlDMGdaQ0FxSUdZZ0tpQnRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsaGFXU0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTRJRDBnWkNBcUlHZ2dLaUIxSUMwZ2JDQXFJR1lnS2lCdExDQjBhR2x6TGw5NUlEMGdiQ0FxSUdZZ0tpQjFJQzBnWkNBcUlHZ2dLaUJ0TENCMGFHbHpMbDk2SUQwZ2JDQXFJR2dnS2lCdElDc2daQ0FxSUdZZ0tpQjFMQ0IwYUdsekxsOTNJRDBnYkNBcUlHZ2dLaUIxSUNzZ1pDQXFJR1lnS2lCdE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsRjFZWFJsY201cGIyNDZJQzV6WlhSR2NtOXRSWFZzWlhJb0tTQmxibU52ZFc1MFpYSmxaQ0JoYmlCMWJtdHViM2R1SUc5eVpHVnlPaUFpSUNzZ1lTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBJQ0U5UFNBaE1TQW1KaUIwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFFYaHBjMEZ1WjJ4bEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRZ0x5QXlMQ0JwSUQwZ1RXRjBhQzV6YVc0b2JpazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNnZ1BTQmxMbmdnS2lCcExDQjBhR2x6TGw5NUlEMGdaUzU1SUNvZ2FTd2dkR2hwY3k1ZmVpQTlJR1V1ZWlBcUlHa3NJSFJvYVhNdVgzY2dQU0JOWVhSb0xtTnZjeWh1S1N3Z2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVkp2ZEdGMGFXOXVUV0YwY21sNEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1V1Wld4bGJXVnVkSE1zSUc0Z1BTQjBXekJkTENCcElEMGdkRnMwWFN3Z2NpQTlJSFJiT0Ywc0lHRWdQU0IwV3pGZExDQnZJRDBnZEZzMVhTd2dZeUE5SUhSYk9WMHNJR3dnUFNCMFd6SmRMQ0JvSUQwZ2RGczJYU3dnZFNBOUlIUmJNVEJkTENCa0lEMGdiaUFySUc4Z0t5QjFPd29nSUNBZ0lDQWdJR2xtSUNoa0lENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlDNDFJQzhnVFdGMGFDNXpjWEowS0dRZ0t5QXhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZHlBOUlDNHlOU0F2SUdZc0lIUm9hWE11WDNnZ1BTQW9hQ0F0SUdNcElDb2daaXdnZEdocGN5NWZlU0E5SUNoeUlDMGdiQ2tnS2lCbUxDQjBhR2x6TGw5NklEMGdLR0VnTFNCcEtTQXFJR1k3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNodUlENGdieUFtSmlCdUlENGdkU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlESWdLaUJOWVhSb0xuTnhjblFvTVNBcklHNGdMU0J2SUMwZ2RTazdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2NnUFNBb2FDQXRJR01wSUM4Z1ppd2dkR2hwY3k1ZmVDQTlJQzR5TlNBcUlHWXNJSFJvYVhNdVgza2dQU0FvYVNBcklHRXBJQzhnWml3Z2RHaHBjeTVmZWlBOUlDaHlJQ3NnYkNrZ0x5Qm1Pd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYnlBK0lIVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNBeUlDb2dUV0YwYUM1emNYSjBLREVnS3lCdklDMGdiaUF0SUhVcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNJRDBnS0hJZ0xTQnNLU0F2SUdZc0lIUm9hWE11WDNnZ1BTQW9hU0FySUdFcElDOGdaaXdnZEdocGN5NWZlU0E5SUM0eU5TQXFJR1lzSUhSb2FYTXVYM29nUFNBb1l5QXJJR2dwSUM4Z1pqc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJRElnS2lCTllYUm9Mbk54Y25Rb01TQXJJSFVnTFNCdUlDMGdieWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNjZ1BTQW9ZU0F0SUdrcElDOGdaaXdnZEdocGN5NWZlQ0E5SUNoeUlDc2diQ2tnTHlCbUxDQjBhR2x6TGw5NUlEMGdLR01nS3lCb0tTQXZJR1lzSUhSb2FYTXVYM29nUFNBdU1qVWdLaUJtT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJWVnVhWFJXWldOMGIzSnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVaRzkwS0hRcElDc2dNVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaUE4SUU1MWJXSmxjaTVGVUZOSlRFOU9JRDhnS0c0Z1BTQXdMQ0JOWVhSb0xtRmljeWhsTG5ncElENGdUV0YwYUM1aFluTW9aUzU2S1NBL0lDaDBhR2x6TGw5NElEMGdMV1V1ZVN3Z2RHaHBjeTVmZVNBOUlHVXVlQ3dnZEdocGN5NWZlaUE5SURBc0lIUm9hWE11WDNjZ1BTQnVLU0E2SUNoMGFHbHpMbDk0SUQwZ01Dd2dkR2hwY3k1ZmVTQTlJQzFsTG5vc0lIUm9hWE11WDNvZ1BTQmxMbmtzSUhSb2FYTXVYM2NnUFNCdUtTa2dPaUFvZEdocGN5NWZlQ0E5SUdVdWVTQXFJSFF1ZWlBdElHVXVlaUFxSUhRdWVTd2dkR2hwY3k1ZmVTQTlJR1V1ZWlBcUlIUXVlQ0F0SUdVdWVDQXFJSFF1ZWl3Z2RHaHBjeTVmZWlBOUlHVXVlQ0FxSUhRdWVTQXRJR1V1ZVNBcUlIUXVlQ3dnZEdocGN5NWZkeUE5SUc0cExDQjBhR2x6TG01dmNtMWhiR2w2WlNncE93b2dJQ0FnZlFvZ0lDQWdZVzVuYkdWVWJ5aGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRElnS2lCTllYUm9MbUZqYjNNb1RXRjBhQzVoWW5Nb1kzUW9kR2hwY3k1a2IzUW9aU2tzSUMweExDQXhLU2twT3dvZ0lDQWdmUW9nSUNBZ2NtOTBZWFJsVkc5M1lYSmtjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1GdVoyeGxWRzhvWlNrN0NpQWdJQ0FnSUNBZ2FXWWdLRzRnUFQwOUlEQXBJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnVFdGMGFDNXRhVzRvTVN3Z2RDQXZJRzRwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTnNaWEp3S0dVc0lHa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdhV1JsYm5ScGRIa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLREFzSURBc0lEQXNJREVwT3dvZ0lDQWdmUW9nSUNBZ2FXNTJaWEowS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52Ym1wMVoyRjBaU2dwT3dvZ0lDQWdmUW9nSUNBZ1kyOXVhblZuWVhSbEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5NElDbzlJQzB4TENCMGFHbHpMbDk1SUNvOUlDMHhMQ0IwYUdsekxsOTZJQ285SUMweExDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCa2IzUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTRJQ29nWlM1ZmVDQXJJSFJvYVhNdVgza2dLaUJsTGw5NUlDc2dkR2hwY3k1ZmVpQXFJR1V1WDNvZ0t5QjBhR2x6TGw5M0lDb2daUzVmZHpzS0lDQWdJSDBLSUNBZ0lHeGxibWQwYUZOeEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5NElDb2dkR2hwY3k1ZmVDQXJJSFJvYVhNdVgza2dLaUIwYUdsekxsOTVJQ3NnZEdocGN5NWZlaUFxSUhSb2FYTXVYM29nS3lCMGFHbHpMbDkzSUNvZ2RHaHBjeTVmZHpzS0lDQWdJSDBLSUNBZ0lHeGxibWQwYUNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzV6Y1hKMEtIUm9hWE11WDNnZ0tpQjBhR2x6TGw5NElDc2dkR2hwY3k1ZmVTQXFJSFJvYVhNdVgza2dLeUIwYUdsekxsOTZJQ29nZEdocGN5NWZlaUFySUhSb2FYTXVYM2NnS2lCMGFHbHpMbDkzS1RzS0lDQWdJSDBLSUNBZ0lHNXZjbTFoYkdsNlpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdWJHVnVaM1JvS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVZ1BUMDlJREFnUHlBb2RHaHBjeTVmZUNBOUlEQXNJSFJvYVhNdVgza2dQU0F3TENCMGFHbHpMbDk2SUQwZ01Dd2dkR2hwY3k1ZmR5QTlJREVwSURvZ0tHVWdQU0F4SUM4Z1pTd2dkR2hwY3k1ZmVDQTlJSFJvYVhNdVgzZ2dLaUJsTENCMGFHbHpMbDk1SUQwZ2RHaHBjeTVmZVNBcUlHVXNJSFJvYVhNdVgzb2dQU0IwYUdsekxsOTZJQ29nWlN3Z2RHaHBjeTVmZHlBOUlIUm9hWE11WDNjZ0tpQmxLU3dnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiWFZzZEdsd2JIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMTFiSFJwY0d4NVVYVmhkR1Z5Ym1sdmJuTW9kR2hwY3l3Z1pTazdDaUFnSUNCOUNpQWdJQ0J3Y21WdGRXeDBhWEJzZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YlhWc2RHbHdiSGxSZFdGMFpYSnVhVzl1Y3lobExDQjBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lHMTFiSFJwY0d4NVVYVmhkR1Z5Ym1sdmJuTW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1pTNWZlQ3dnYVNBOUlHVXVYM2tzSUhJZ1BTQmxMbDk2TENCaElEMGdaUzVmZHl3Z2J5QTlJSFF1WDNnc0lHTWdQU0IwTGw5NUxDQnNJRDBnZEM1ZmVpd2dhQ0E5SUhRdVgzYzdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNnZ1BTQnVJQ29nYUNBcklHRWdLaUJ2SUNzZ2FTQXFJR3dnTFNCeUlDb2dZeXdnZEdocGN5NWZlU0E5SUdrZ0tpQm9JQ3NnWVNBcUlHTWdLeUJ5SUNvZ2J5QXRJRzRnS2lCc0xDQjBhR2x6TGw5NklEMGdjaUFxSUdnZ0t5QmhJQ29nYkNBcklHNGdLaUJqSUMwZ2FTQXFJRzhzSUhSb2FYTXVYM2NnUFNCaElDb2dhQ0F0SUc0Z0tpQnZJQzBnYVNBcUlHTWdMU0J5SUNvZ2JDd2dkR2hwY3k1ZmIyNURhR0Z1WjJWRFlXeHNZbUZqYXlncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyeGxjbkFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR2xtSUNoMElEMDlQU0F3S1NCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUNBZ0lDQnBaaUFvZENBOVBUMGdNU2tnY21WMGRYSnVJSFJvYVhNdVkyOXdlU2hsS1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVYM2dzSUdrZ1BTQjBhR2x6TGw5NUxDQnlJRDBnZEdocGN5NWZlaXdnWVNBOUlIUm9hWE11WDNjc0lHOGdQU0JoSUNvZ1pTNWZkeUFySUc0Z0tpQmxMbDk0SUNzZ2FTQXFJR1V1WDNrZ0t5QnlJQ29nWlM1ZmVqc0tJQ0FnSUNBZ0lDQnBaaUFvYnlBOElEQWdQeUFvZEdocGN5NWZkeUE5SUMxbExsOTNMQ0IwYUdsekxsOTRJRDBnTFdVdVgzZ3NJSFJvYVhNdVgza2dQU0F0WlM1ZmVTd2dkR2hwY3k1ZmVpQTlJQzFsTGw5NkxDQnZJRDBnTFc4cElEb2dkR2hwY3k1amIzQjVLR1VwTENCdklENDlJREVwSUhKbGRIVnliaUIwYUdsekxsOTNJRDBnWVN3Z2RHaHBjeTVmZUNBOUlHNHNJSFJvYVhNdVgza2dQU0JwTENCMGFHbHpMbDk2SUQwZ2Npd2dkR2hwY3pzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SURFZ0xTQnZJQ29nYnpzS0lDQWdJQ0FnSUNCcFppQW9ZeUE4UFNCT2RXMWlaWEl1UlZCVFNVeFBUaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlERWdMU0IwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZHlBOUlHWWdLaUJoSUNzZ2RDQXFJSFJvYVhNdVgzY3NJSFJvYVhNdVgzZ2dQU0JtSUNvZ2JpQXJJSFFnS2lCMGFHbHpMbDk0TENCMGFHbHpMbDk1SUQwZ1ppQXFJR2tnS3lCMElDb2dkR2hwY3k1ZmVTd2dkR2hwY3k1ZmVpQTlJR1lnS2lCeUlDc2dkQ0FxSUhSb2FYTXVYM29zSUhSb2FYTXVibTl5YldGc2FYcGxLQ2tzSUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc29LU3dnZEdocGN6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUd3Z1BTQk5ZWFJvTG5OeGNuUW9ZeWtzSUdnZ1BTQk5ZWFJvTG1GMFlXNHlLR3dzSUc4cExDQjFJRDBnVFdGMGFDNXphVzRvS0RFZ0xTQjBLU0FxSUdncElDOGdiQ3dnWkNBOUlFMWhkR2d1YzJsdUtIUWdLaUJvS1NBdklHdzdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNjZ1BTQmhJQ29nZFNBcklIUm9hWE11WDNjZ0tpQmtMQ0IwYUdsekxsOTRJRDBnYmlBcUlIVWdLeUIwYUdsekxsOTRJQ29nWkN3Z2RHaHBjeTVmZVNBOUlHa2dLaUIxSUNzZ2RHaHBjeTVmZVNBcUlHUXNJSFJvYVhNdVgzb2dQU0J5SUNvZ2RTQXJJSFJvYVhNdVgzb2dLaUJrTENCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6YkdWeWNGRjFZWFJsY201cGIyNXpLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIzQjVLR1VwTG5Oc1pYSndLSFFzSUc0cE93b2dJQ0FnZlFvZ0lDQWdjbUZ1Wkc5dEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdUV0YwYUM1eVlXNWtiMjBvS1N3Z2RDQTlJRTFoZEdndWMzRnlkQ2d4SUMwZ1pTa3NJRzRnUFNCTllYUm9Mbk54Y25Rb1pTa3NJR2tnUFNBeUlDb2dUV0YwYUM1UVNTQXFJRTFoZEdndWNtRnVaRzl0S0Nrc0lISWdQU0F5SUNvZ1RXRjBhQzVRU1NBcUlFMWhkR2d1Y21GdVpHOXRLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLSFFnS2lCTllYUm9MbU52Y3locEtTd2diaUFxSUUxaGRHZ3VjMmx1S0hJcExDQnVJQ29nVFdGMGFDNWpiM01vY2lrc0lIUWdLaUJOWVhSb0xuTnBiaWhwS1NrN0NpQWdJQ0I5Q2lBZ0lDQmxjWFZoYkhNb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbDk0SUQwOVBTQjBhR2x6TGw5NElDWW1JR1V1WDNrZ1BUMDlJSFJvYVhNdVgza2dKaVlnWlM1ZmVpQTlQVDBnZEdocGN5NWZlaUFtSmlCbExsOTNJRDA5UFNCMGFHbHpMbDkzT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUZ5Y21GNUtHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNnZ1BTQmxXM1JkTENCMGFHbHpMbDk1SUQwZ1pWdDBJQ3NnTVYwc0lIUm9hWE11WDNvZ1BTQmxXM1FnS3lBeVhTd2dkR2hwY3k1ZmR5QTlJR1ZiZENBcklETmRMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMEZ5Y21GNUtHVWdQU0JiWFN3Z2RDQTlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlZ0MFhTQTlJSFJvYVhNdVgzZ3NJR1ZiZENBcklERmRJRDBnZEdocGN5NWZlU3dnWlZ0MElDc2dNbDBnUFNCMGFHbHpMbDk2TENCbFczUWdLeUF6WFNBOUlIUm9hWE11WDNjc0lHVTdDaUFnSUNCOUNpQWdJQ0JtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmVDQTlJR1V1WjJWMFdDaDBLU3dnZEdocGN5NWZlU0E5SUdVdVoyVjBXU2gwS1N3Z2RHaHBjeTVmZWlBOUlHVXVaMlYwV2loMEtTd2dkR2hwY3k1ZmR5QTlJR1V1WjJWMFZ5aDBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MGIwRnljbUY1S0NrN0NpQWdJQ0I5Q2lBZ0lDQmZiMjVEYUdGdVoyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRjl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2tnZTMwS0lDQWdJQ3BiVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwSUhzS0lDQWdJQ0FnSUNCNWFXVnNaQ0IwYUdsekxsOTRMQ0I1YVdWc1pDQjBhR2x6TGw5NUxDQjVhV1ZzWkNCMGFHbHpMbDk2TENCNWFXVnNaQ0IwYUdsekxsOTNPd29nSUNBZ2ZRcDlMQ0JCSUQwZ1kyeGhjM01nY3pFZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREFzSUhRZ1BTQXdMQ0J1SUQwZ01DbDdDaUFnSUNBZ0lDQWdjekV1Y0hKdmRHOTBlWEJsTG1selZtVmpkRzl5TXlBOUlDRXdMQ0IwYUdsekxuZ2dQU0JsTENCMGFHbHpMbmtnUFNCMExDQjBhR2x6TG5vZ1BTQnVPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpQTlQVDBnZG05cFpDQXdJQ1ltSUNodUlEMGdkR2hwY3k1NktTd2dkR2hwY3k1NElEMGdaU3dnZEdocGN5NTVJRDBnZEN3Z2RHaHBjeTU2SUQwZ2Jpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRk5qWVd4aGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1VzSUhSb2FYTXVlU0E5SUdVc0lIUm9hWE11ZWlBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJZS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRmtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmtnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBXaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlaUE5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkRiMjF3YjI1bGJuUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lITjNhWFJqYUNobEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXdPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1NElEMGdkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElERTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5rZ1BTQjBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01qb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZWlBOUlIUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaWFXNWtaWGdnYVhNZ2IzVjBJRzltSUhKaGJtZGxPaUFpSUNzZ1pTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBRMjl0Y0c5dVpXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCemQybDBZMmdvWlNsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Eb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmc3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTVRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuazdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5vN0NpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ltbHVaR1Y0SUdseklHOTFkQ0J2WmlCeVlXNW5aVG9nSWlBcklHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2loMGFHbHpMbmdzSUhSb2FYTXVlU3dnZEdocGN5NTZLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5nc0lIUm9hWE11ZVNBOUlHVXVlU3dnZEdocGN5NTZJRDBnWlM1NkxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lXUmtLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQ3M5SUdVdWVDd2dkR2hwY3k1NUlDczlJR1V1ZVN3Z2RHaHBjeTU2SUNzOUlHVXVlaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0ZrWkZOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FyUFNCbExDQjBhR2x6TG5rZ0t6MGdaU3dnZEdocGN5NTZJQ3M5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFpHUldaV04wYjNKektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlM1NElDc2dkQzU0TENCMGFHbHpMbmtnUFNCbExua2dLeUIwTG5rc0lIUm9hWE11ZWlBOUlHVXVlaUFySUhRdWVpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHRmtaRk5qWVd4bFpGWmxZM1J2Y2lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXJQU0JsTG5nZ0tpQjBMQ0IwYUdsekxua2dLejBnWlM1NUlDb2dkQ3dnZEdocGN5NTZJQ3M5SUdVdWVpQXFJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZFdJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0xUMGdaUzU0TENCMGFHbHpMbmtnTFQwZ1pTNTVMQ0IwYUdsekxub2dMVDBnWlM1NkxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzVmlVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElDMDlJR1VzSUhSb2FYTXVlU0F0UFNCbExDQjBhR2x6TG5vZ0xUMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE4xWWxabFkzUnZjbk1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMbmdnTFNCMExuZ3NJSFJvYVhNdWVTQTlJR1V1ZVNBdElIUXVlU3dnZEdocGN5NTZJRDBnWlM1NklDMGdkQzU2TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2owZ1pTNTRMQ0IwYUdsekxua2dLajBnWlM1NUxDQjBhR2x6TG5vZ0tqMGdaUzU2TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGxUWTJGc1lYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLajBnWlN3Z2RHaHBjeTU1SUNvOUlHVXNJSFJvYVhNdWVpQXFQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGxXWldOMGIzSnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pTNTRJQ29nZEM1NExDQjBhR2x6TG5rZ1BTQmxMbmtnS2lCMExua3NJSFJvYVhNdWVpQTlJR1V1ZWlBcUlIUXVlaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVJYVnNaWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ3Y0d4NVVYVmhkR1Z5Ym1sdmJpaFhiQzV6WlhSR2NtOXRSWFZzWlhJb1pTa3BPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbEJlR2x6UVc1bmJHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ3Y0d4NVVYVmhkR1Z5Ym1sdmJpaFhiQzV6WlhSR2NtOXRRWGhwYzBGdVoyeGxLR1VzSUhRcEtUc0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TXlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5nc0lHNGdQU0IwYUdsekxua3NJR2tnUFNCMGFHbHpMbm9zSUhJZ1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQnlXekJkSUNvZ2RDQXJJSEpiTTEwZ0tpQnVJQ3NnY2xzMlhTQXFJR2tzSUhSb2FYTXVlU0E5SUhKYk1WMGdLaUIwSUNzZ2NsczBYU0FxSUc0Z0t5QnlXemRkSUNvZ2FTd2dkR2hwY3k1NklEMGdjbHN5WFNBcUlIUWdLeUJ5V3pWZElDb2diaUFySUhKYk9GMGdLaUJwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE9iM0p0WVd4TllYUnlhWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ3Y0d4NVRXRjBjbWw0TXlobEtTNXViM0p0WVd4cGVtVW9LVHNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE5DaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuZ3NJRzRnUFNCMGFHbHpMbmtzSUdrZ1BTQjBhR2x6TG5vc0lISWdQU0JsTG1Wc1pXMWxiblJ6TENCaElEMGdNU0F2SUNoeVd6TmRJQ29nZENBcklISmJOMTBnS2lCdUlDc2djbHN4TVYwZ0tpQnBJQ3NnY2xzeE5WMHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQW9jbHN3WFNBcUlIUWdLeUJ5V3pSZElDb2diaUFySUhKYk9GMGdLaUJwSUNzZ2Nsc3hNbDBwSUNvZ1lTd2dkR2hwY3k1NUlEMGdLSEpiTVYwZ0tpQjBJQ3NnY2xzMVhTQXFJRzRnS3lCeVd6bGRJQ29nYVNBcklISmJNVE5kS1NBcUlHRXNJSFJvYVhNdWVpQTlJQ2h5V3pKZElDb2dkQ0FySUhKYk5sMGdLaUJ1SUNzZ2Nsc3hNRjBnS2lCcElDc2djbHN4TkYwcElDb2dZU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVVYVmhkR1Z5Ym1sdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuZ3NJRzRnUFNCMGFHbHpMbmtzSUdrZ1BTQjBhR2x6TG5vc0lISWdQU0JsTG5nc0lHRWdQU0JsTG5rc0lHOGdQU0JsTG5vc0lHTWdQU0JsTG5jc0lHd2dQU0JqSUNvZ2RDQXJJR0VnS2lCcElDMGdieUFxSUc0c0lHZ2dQU0JqSUNvZ2JpQXJJRzhnS2lCMElDMGdjaUFxSUdrc0lIVWdQU0JqSUNvZ2FTQXJJSElnS2lCdUlDMGdZU0FxSUhRc0lHUWdQU0F0Y2lBcUlIUWdMU0JoSUNvZ2JpQXRJRzhnS2lCcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCc0lDb2dZeUFySUdRZ0tpQXRjaUFySUdnZ0tpQXRieUF0SUhVZ0tpQXRZU3dnZEdocGN5NTVJRDBnYUNBcUlHTWdLeUJrSUNvZ0xXRWdLeUIxSUNvZ0xYSWdMU0JzSUNvZ0xXOHNJSFJvYVhNdWVpQTlJSFVnS2lCaklDc2daQ0FxSUMxdklDc2diQ0FxSUMxaElDMGdhQ0FxSUMxeUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2NISnZhbVZqZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhCd2JIbE5ZWFJ5YVhnMEtHVXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxLUzVoY0hCc2VVMWhkSEpwZURRb1pTNXdjbTlxWldOMGFXOXVUV0YwY21sNEtUc0tJQ0FnSUgwS0lDQWdJSFZ1Y0hKdmFtVmpkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEJ3YkhsTllYUnlhWGcwS0dVdWNISnZhbVZqZEdsdmJrMWhkSEpwZUVsdWRtVnljMlVwTG1Gd2NHeDVUV0YwY21sNE5DaGxMbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuZ3NJRzRnUFNCMGFHbHpMbmtzSUdrZ1BTQjBhR2x6TG5vc0lISWdQU0JsTG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0J5V3pCZElDb2dkQ0FySUhKYk5GMGdLaUJ1SUNzZ2NsczRYU0FxSUdrc0lIUm9hWE11ZVNBOUlISmJNVjBnS2lCMElDc2djbHMxWFNBcUlHNGdLeUJ5V3psZElDb2dhU3dnZEdocGN5NTZJRDBnY2xzeVhTQXFJSFFnS3lCeVd6WmRJQ29nYmlBcklISmJNVEJkSUNvZ2FTd2dkR2hwY3k1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUgwS0lDQWdJR1JwZG1sa1pTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXZQU0JsTG5nc0lIUm9hWE11ZVNBdlBTQmxMbmtzSUhSb2FYTXVlaUF2UFNCbExub3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmthWFpwWkdWVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVVMk5oYkdGeUtERWdMeUJsS1RzS0lDQWdJSDBLSUNBZ0lHMXBiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3ViV2x1S0hSb2FYTXVlQ3dnWlM1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1dGFXNG9kR2hwY3k1NUxDQmxMbmtwTENCMGFHbHpMbm9nUFNCTllYUm9MbTFwYmloMGFHbHpMbm9zSUdVdWVpa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRZWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFoZUNoMGFHbHpMbmdzSUdVdWVDa3NJSFJvYVhNdWVTQTlJRTFoZEdndWJXRjRLSFJvYVhNdWVTd2daUzU1S1N3Z2RHaHBjeTU2SUQwZ1RXRjBhQzV0WVhnb2RHaHBjeTU2TENCbExub3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnhoYlhBb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xtMWhlQ2hsTG5nc0lFMWhkR2d1YldsdUtIUXVlQ3dnZEdocGN5NTRLU2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3ViV0Y0S0dVdWVTd2dUV0YwYUM1dGFXNG9kQzU1TENCMGFHbHpMbmtwS1N3Z2RHaHBjeTU2SUQwZ1RXRjBhQzV0WVhnb1pTNTZMQ0JOWVhSb0xtMXBiaWgwTG5vc0lIUm9hWE11ZWlrcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyeGhiWEJUWTJGc1lYSW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFoZUNobExDQk5ZWFJvTG0xcGJpaDBMQ0IwYUdsekxuZ3BLU3dnZEdocGN5NTVJRDBnVFdGMGFDNXRZWGdvWlN3Z1RXRjBhQzV0YVc0b2RDd2dkR2hwY3k1NUtTa3NJSFJvYVhNdWVpQTlJRTFoZEdndWJXRjRLR1VzSUUxaGRHZ3ViV2x1S0hRc0lIUm9hWE11ZWlrcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyeGhiWEJNWlc1bmRHZ29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVzWlc1bmRHZ29LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a2FYWnBaR1ZUWTJGc1lYSW9iaUI4ZkNBeEtTNXRkV3gwYVhCc2VWTmpZV3hoY2loTllYUm9MbTFoZUNobExDQk5ZWFJvTG0xcGJpaDBMQ0J1S1NrcE93b2dJQ0FnZlFvZ0lDQWdabXh2YjNJb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1Wm14dmIzSW9kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1bWJHOXZjaWgwYUdsekxua3BMQ0IwYUdsekxub2dQU0JOWVhSb0xtWnNiMjl5S0hSb2FYTXVlaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqWldsc0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG1ObGFXd29kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1alpXbHNLSFJvYVhNdWVTa3NJSFJvYVhNdWVpQTlJRTFoZEdndVkyVnBiQ2gwYUdsekxub3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkxYm1Rb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1Y205MWJtUW9kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1eWIzVnVaQ2gwYUdsekxua3BMQ0IwYUdsekxub2dQU0JOWVhSb0xuSnZkVzVrS0hSb2FYTXVlaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNWdVpGUnZXbVZ5YnlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzUwY25WdVl5aDBhR2x6TG5ncExDQjBhR2x6TG5rZ1BTQk5ZWFJvTG5SeWRXNWpLSFJvYVhNdWVTa3NJSFJvYVhNdWVpQTlJRTFoZEdndWRISjFibU1vZEdocGN5NTZLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzVsWjJGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdMWFJvYVhNdWVDd2dkR2hwY3k1NUlEMGdMWFJvYVhNdWVTd2dkR2hwY3k1NklEMGdMWFJvYVhNdWVpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnZkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FxSUdVdWVDQXJJSFJvYVhNdWVTQXFJR1V1ZVNBcklIUm9hWE11ZWlBcUlHVXVlanNLSUNBZ0lIMEtJQ0FnSUd4bGJtZDBhRk54S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2lCMGFHbHpMbmdnS3lCMGFHbHpMbmtnS2lCMGFHbHpMbmtnS3lCMGFHbHpMbm9nS2lCMGFHbHpMbm83Q2lBZ0lDQjlDaUFnSUNCc1pXNW5kR2dvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbmdnS2lCMGFHbHpMbmdnS3lCMGFHbHpMbmtnS2lCMGFHbHpMbmtnS3lCMGFHbHpMbm9nS2lCMGFHbHpMbm9wT3dvZ0lDQWdmUW9nSUNBZ2JXRnVhR0YwZEdGdVRHVnVaM1JvS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUZpY3loMGFHbHpMbmdwSUNzZ1RXRjBhQzVoWW5Nb2RHaHBjeTU1S1NBcklFMWhkR2d1WVdKektIUm9hWE11ZWlrN0NpQWdJQ0I5Q2lBZ0lDQnViM0p0WVd4cGVtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHbDJhV1JsVTJOaGJHRnlLSFJvYVhNdWJHVnVaM1JvS0NrZ2ZId2dNU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUk1aVzVuZEdnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WlNncExtMTFiSFJwY0d4NVUyTmhiR0Z5S0dVcE93b2dJQ0FnZlFvZ0lDQWdiR1Z5Y0NobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXJQU0FvWlM1NElDMGdkR2hwY3k1NEtTQXFJSFFzSUhSb2FYTXVlU0FyUFNBb1pTNTVJQzBnZEdocGN5NTVLU0FxSUhRc0lIUm9hWE11ZWlBclBTQW9aUzU2SUMwZ2RHaHBjeTU2S1NBcUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnNaWEp3Vm1WamRHOXljeWhsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1V1ZUNBcklDaDBMbmdnTFNCbExuZ3BJQ29nYml3Z2RHaHBjeTU1SUQwZ1pTNTVJQ3NnS0hRdWVTQXRJR1V1ZVNrZ0tpQnVMQ0IwYUdsekxub2dQU0JsTG5vZ0t5QW9kQzU2SUMwZ1pTNTZLU0FxSUc0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamNtOXpjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0p2YzNOV1pXTjBiM0p6S0hSb2FYTXNJR1VwT3dvZ0lDQWdmUW9nSUNBZ1kzSnZjM05XWldOMGIzSnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVlQ3dnYVNBOUlHVXVlU3dnY2lBOUlHVXVlaXdnWVNBOUlIUXVlQ3dnYnlBOUlIUXVlU3dnWXlBOUlIUXVlanNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdhU0FxSUdNZ0xTQnlJQ29nYnl3Z2RHaHBjeTU1SUQwZ2NpQXFJR0VnTFNCdUlDb2dZeXdnZEdocGN5NTZJRDBnYmlBcUlHOGdMU0JwSUNvZ1lTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIQnliMnBsWTNSUGJsWmxZM1J2Y2lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbXhsYm1kMGFGTnhLQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUWdQVDA5SURBcElISmxkSFZ5YmlCMGFHbHpMbk5sZENnd0xDQXdMQ0F3S1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVpHOTBLSFJvYVhNcElDOGdkRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIzQjVLR1VwTG0xMWJIUnBjR3g1VTJOaGJHRnlLRzRwT3dvZ0lDQWdmUW9nSUNBZ2NISnZhbVZqZEU5dVVHeGhibVVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCUFlTNWpiM0I1S0hSb2FYTXBMbkJ5YjJwbFkzUlBibFpsWTNSdmNpaGxLU3dnZEdocGN5NXpkV0lvVDJFcE93b2dJQ0FnZlFvZ0lDQWdjbVZtYkdWamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzVmlLRTloTG1OdmNIa29aU2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9NaUFxSUhSb2FYTXVaRzkwS0dVcEtTazdDaUFnSUNCOUNpQWdJQ0JoYm1kc1pWUnZLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbXhsYm1kMGFGTnhLQ2tnS2lCbExteGxibWQwYUZOeEtDa3BPd29nSUNBZ0lDQWdJR2xtSUNoMElEMDlQU0F3S1NCeVpYUjFjbTRnVFdGMGFDNVFTU0F2SURJN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbVJ2ZENobEtTQXZJSFE3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndVlXTnZjeWhqZENodUxDQXRNU3dnTVNrcE93b2dJQ0FnZlFvZ0lDQWdaR2x6ZEdGdVkyVlVieWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLR1VwS1RzS0lDQWdJSDBLSUNBZ0lHUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWVDQXRJR1V1ZUN3Z2JpQTlJSFJvYVhNdWVTQXRJR1V1ZVN3Z2FTQTlJSFJvYVhNdWVpQXRJR1V1ZWpzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENBcUlIUWdLeUJ1SUNvZ2JpQXJJR2tnS2lCcE93b2dJQ0FnZlFvZ0lDQWdiV0Z1YUdGMGRHRnVSR2x6ZEdGdVkyVlVieWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0hSb2FYTXVlQ0F0SUdVdWVDa2dLeUJOWVhSb0xtRmljeWgwYUdsekxua2dMU0JsTG5rcElDc2dUV0YwYUM1aFluTW9kR2hwY3k1NklDMGdaUzU2S1RzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxVGNHaGxjbWxqWVd3b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRFWnliMjFUY0dobGNtbGpZV3hEYjI5eVpITW9aUzV5WVdScGRYTXNJR1V1Y0docExDQmxMblJvWlhSaEtUc0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMVRjR2hsY21sallXeERiMjl5WkhNb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1RXRjBhQzV6YVc0b2RDa2dLaUJsT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JwSUNvZ1RXRjBhQzV6YVc0b2Jpa3NJSFJvYVhNdWVTQTlJRTFoZEdndVkyOXpLSFFwSUNvZ1pTd2dkR2hwY3k1NklEMGdhU0FxSUUxaGRHZ3VZMjl6S0c0cExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlVONWJHbHVaSEpwWTJGc0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUkdjbTl0UTNsc2FXNWtjbWxqWVd4RGIyOXlaSE1vWlM1eVlXUnBkWE1zSUdVdWRHaGxkR0VzSUdVdWVTazdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRRM2xzYVc1a2NtbGpZV3hEYjI5eVpITW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxJQ29nVFdGMGFDNXphVzRvZENrc0lIUm9hWE11ZVNBOUlHNHNJSFJvYVhNdWVpQTlJR1VnS2lCTllYUm9MbU52Y3loMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbExtVnNaVzFsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCMFd6RXlYU3dnZEdocGN5NTVJRDBnZEZzeE0xMHNJSFJvYVhNdWVpQTlJSFJiTVRSZExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlUxaGRISnBlRk5qWVd4bEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaGxMQ0F3S1M1c1pXNW5kR2dvS1N3Z2JpQTlJSFJvYVhNdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaGxMQ0F4S1M1c1pXNW5kR2dvS1N3Z2FTQTlJSFJvYVhNdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaGxMQ0F5S1M1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnZEN3Z2RHaHBjeTU1SUQwZ2Jpd2dkR2hwY3k1NklEMGdhU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMU5ZWFJ5YVhoRGIyeDFiVzRvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1aeWIyMUJjbkpoZVNobExtVnNaVzFsYm5SekxDQjBJQ29nTkNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFRXRjBjbWw0TTBOdmJIVnRiaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm5KdmJVRnljbUY1S0dVdVpXeGxiV1Z1ZEhNc0lIUWdLaUF6S1RzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxRmRXeGxjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVdVgzZ3NJSFJvYVhNdWVTQTlJR1V1WDNrc0lIUm9hWE11ZWlBOUlHVXVYM29zSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRRMjlzYjNJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMbklzSUhSb2FYTXVlU0E5SUdVdVp5d2dkR2hwY3k1NklEMGdaUzVpTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhGMVlXeHpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1NElEMDlQU0IwYUdsekxuZ2dKaVlnWlM1NUlEMDlQU0IwYUdsekxua2dKaVlnWlM1NklEMDlQU0IwYUdsekxubzdDaUFnSUNCOUNpQWdJQ0JtY205dFFYSnlZWGtvWlN3Z2RDQTlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlZ0MFhTd2dkR2hwY3k1NUlEMGdaVnQwSUNzZ01WMHNJSFJvYVhNdWVpQTlJR1ZiZENBcklESmRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlCY25KaGVTaGxJRDBnVzEwc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0IwYUdsekxuZ3NJR1ZiZENBcklERmRJRDBnZEdocGN5NTVMQ0JsVzNRZ0t5QXlYU0E5SUhSb2FYTXVlaXdnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExtZGxkRmdvZENrc0lIUm9hWE11ZVNBOUlHVXVaMlYwV1NoMEtTd2dkR2hwY3k1NklEMGdaUzVuWlhSYUtIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbUZ1Wkc5dEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTENCMGFHbHpMbmtnUFNCTllYUm9MbkpoYm1SdmJTZ3BMQ0IwYUdsekxub2dQU0JOWVhSb0xuSmhibVJ2YlNncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2NtRnVaRzl0UkdseVpXTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ0tFMWhkR2d1Y21GdVpHOXRLQ2tnTFNBdU5Ta2dLaUF5TENCMElEMGdUV0YwYUM1eVlXNWtiMjBvS1NBcUlFMWhkR2d1VUVrZ0tpQXlMQ0J1SUQwZ1RXRjBhQzV6Y1hKMEtERWdMU0JsSUNvcUlESXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQnVJQ29nVFdGMGFDNWpiM01vZENrc0lIUm9hWE11ZVNBOUlHNGdLaUJOWVhSb0xuTnBiaWgwS1N3Z2RHaHBjeTU2SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lDcGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BJSHNLSUNBZ0lDQWdJQ0I1YVdWc1pDQjBhR2x6TG5nc0lIbHBaV3hrSUhSb2FYTXVlU3dnZVdsbGJHUWdkR2hwY3k1Nk93b2dJQ0FnZlFwOUxDQlBZU0E5SUc1bGR5QkJMQ0JYYkNBOUlHNWxkeUJWZEN3Z1VYUWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lFRW9NU0F2SURBc0lERWdMeUF3TENBeElDOGdNQ2tzSUhRZ1BTQnVaWGNnUVNndE1TQXZJREFzSUMweElDOGdNQ3dnTFRFZ0x5QXdLU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXBjMEp2ZURNZ1BTQWhNQ3dnZEdocGN5NXRhVzRnUFNCbExDQjBhR2x6TG0xaGVDQTlJSFE3Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTFwYmk1amIzQjVLR1VwTENCMGFHbHpMbTFoZUM1amIzQjVLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVUZ5Y21GNUtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhhMlZGYlhCMGVTZ3BPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0JsTG14bGJtZDBhRHNnZENBOElHNDdJSFFnS3owZ015bDBhR2x6TG1WNGNHRnVaRUo1VUc5cGJuUW9ZMjR1Wm5KdmJVRnljbUY1S0dVc0lIUXBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YldGclpVVnRjSFI1S0NrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlHVXVZMjkxYm5RN0lIUWdQQ0J1T3lCMEt5c3BkR2hwY3k1bGVIQmhibVJDZVZCdmFXNTBLR051TG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb1pTd2dkQ2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJWQnZhVzUwY3lobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlXdGxSVzF3ZEhrb0tUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdaUzVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZEdocGN5NWxlSEJoYm1SQ2VWQnZhVzUwS0dWYmRGMHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlVObGJuUmxja0Z1WkZOcGVtVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1kyNHVZMjl3ZVNoMEtTNXRkV3gwYVhCc2VWTmpZV3hoY2lndU5TazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxtTnZjSGtvWlNrdWMzVmlLRzRwTENCMGFHbHpMbTFoZUM1amIzQjVLR1VwTG1Ga1pDaHVLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMVBZbXBsWTNRb1pTd2dkQ0E5SUNFeEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldGclpVVnRjSFI1S0Nrc0lIUm9hWE11Wlhod1lXNWtRbmxQWW1wbFkzUW9aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9LUzVqYjNCNUtIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG1OdmNIa29aUzV0YVc0cExDQjBhR2x6TG0xaGVDNWpiM0I1S0dVdWJXRjRLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzFoYTJWRmJYQjBlU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1ZUNBOUlIUm9hWE11YldsdUxua2dQU0IwYUdsekxtMXBiaTU2SUQwZ01TQXZJREFzSUhSb2FYTXViV0Y0TG5nZ1BTQjBhR2x6TG0xaGVDNTVJRDBnZEdocGN5NXRZWGd1ZWlBOUlDMHhJQzhnTUN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdselJXMXdkSGtvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV0Y0TG5nZ1BDQjBhR2x6TG0xcGJpNTRJSHg4SUhSb2FYTXViV0Y0TG5rZ1BDQjBhR2x6TG0xcGJpNTVJSHg4SUhSb2FYTXViV0Y0TG5vZ1BDQjBhR2x6TG0xcGJpNTZPd29nSUNBZ2ZRb2dJQ0FnWjJWMFEyVnVkR1Z5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYzBWdGNIUjVLQ2tnUHlCbExuTmxkQ2d3TENBd0xDQXdLU0E2SUdVdVlXUmtWbVZqZEc5eWN5aDBhR2x6TG0xcGJpd2dkR2hwY3k1dFlYZ3BMbTExYkhScGNHeDVVMk5oYkdGeUtDNDFLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGTnBlbVVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx6Ulcxd2RIa29LU0EvSUdVdWMyVjBLREFzSURBc0lEQXBJRG9nWlM1emRXSldaV04wYjNKektIUm9hWE11YldGNExDQjBhR2x6TG0xcGJpazdDaUFnSUNCOUNpQWdJQ0JsZUhCaGJtUkNlVkJ2YVc1MEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHViV2x1S0dVcExDQjBhR2x6TG0xaGVDNXRZWGdvWlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCbGVIQmhibVJDZVZabFkzUnZjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG5OMVlpaGxLU3dnZEdocGN5NXRZWGd1WVdSa0tHVXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWGh3WVc1a1FubFRZMkZzWVhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNWhaR1JUWTJGc1lYSW9MV1VwTENCMGFHbHpMbTFoZUM1aFpHUlRZMkZzWVhJb1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmxlSEJoYm1SQ2VVOWlhbVZqZENobExDQjBJRDBnSVRFcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1MWNHUmhkR1ZYYjNKc1pFMWhkSEpwZUNnaE1Td2dJVEVwTENCbExtSnZkVzVrYVc1blFtOTRJQ0U5UFNCMmIybGtJREFwSUdVdVltOTFibVJwYm1kQ2IzZ2dQVDA5SUc1MWJHd2dKaVlnWlM1amIyMXdkWFJsUW05MWJtUnBibWRDYjNnb0tTd2dYMmt1WTI5d2VTaGxMbUp2ZFc1a2FXNW5RbTk0S1N3Z1gya3VZWEJ3YkhsTllYUnlhWGcwS0dVdWJXRjBjbWw0VjI5eWJHUXBMQ0IwYUdsekxuVnVhVzl1S0Y5cEtUc0tJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbWRsYjIxbGRISjVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0FoUFQwZ2RtOXBaQ0F3S1NCcFppQW9kQ0FtSmlCcExtRjBkSEpwWW5WMFpYTWdJVDA5SUhadmFXUWdNQ0FtSmlCcExtRjBkSEpwWW5WMFpYTXVjRzl6YVhScGIyNGdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0JwTG1GMGRISnBZblYwWlhNdWNHOXphWFJwYjI0N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdFZ1BTQXdMQ0J2SUQwZ2NpNWpiM1Z1ZERzZ1lTQThJRzg3SUdFckt5bGpiaTVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0hJc0lHRXBMbUZ3Y0d4NVRXRjBjbWw0TkNobExtMWhkSEpwZUZkdmNteGtLU3dnZEdocGN5NWxlSEJoYm1SQ2VWQnZhVzUwS0dOdUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2t1WW05MWJtUnBibWRDYjNnZ1BUMDlJRzUxYkd3Z0ppWWdhUzVqYjIxd2RYUmxRbTkxYm1ScGJtZENiM2dvS1N3Z1gya3VZMjl3ZVNocExtSnZkVzVrYVc1blFtOTRLU3dnWDJrdVlYQndiSGxOWVhSeWFYZzBLR1V1YldGMGNtbDRWMjl5YkdRcExDQjBhR2x6TG5WdWFXOXVLRjlwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCbExtTm9hV3hrY21WdU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREFzSUhJZ1BTQnVMbXhsYm1kMGFEc2dhU0E4SUhJN0lHa3JLeWwwYUdsekxtVjRjR0Z1WkVKNVQySnFaV04wS0c1YmFWMHNJSFFwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl1ZEdGcGJuTlFiMmx1ZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRW9aUzU0SUR3Z2RHaHBjeTV0YVc0dWVDQjhmQ0JsTG5nZ1BpQjBhR2x6TG0xaGVDNTRJSHg4SUdVdWVTQThJSFJvYVhNdWJXbHVMbmtnZkh3Z1pTNTVJRDRnZEdocGN5NXRZWGd1ZVNCOGZDQmxMbm9nUENCMGFHbHpMbTFwYmk1NklIeDhJR1V1ZWlBK0lIUm9hWE11YldGNExub3BPd29nSUNBZ2ZRb2dJQ0FnWTI5dWRHRnBibk5DYjNnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNTRJRHc5SUdVdWJXbHVMbmdnSmlZZ1pTNXRZWGd1ZUNBOFBTQjBhR2x6TG0xaGVDNTRJQ1ltSUhSb2FYTXViV2x1TG5rZ1BEMGdaUzV0YVc0dWVTQW1KaUJsTG0xaGVDNTVJRHc5SUhSb2FYTXViV0Y0TG5rZ0ppWWdkR2hwY3k1dGFXNHVlaUE4UFNCbExtMXBiaTU2SUNZbUlHVXViV0Y0TG5vZ1BEMGdkR2hwY3k1dFlYZ3VlanNLSUNBZ0lIMEtJQ0FnSUdkbGRGQmhjbUZ0WlhSbGNpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRdWMyVjBLQ2hsTG5nZ0xTQjBhR2x6TG0xcGJpNTRLU0F2SUNoMGFHbHpMbTFoZUM1NElDMGdkR2hwY3k1dGFXNHVlQ2tzSUNobExua2dMU0IwYUdsekxtMXBiaTU1S1NBdklDaDBhR2x6TG0xaGVDNTVJQzBnZEdocGN5NXRhVzR1ZVNrc0lDaGxMbm9nTFNCMGFHbHpMbTFwYmk1NktTQXZJQ2gwYUdsekxtMWhlQzU2SUMwZ2RHaHBjeTV0YVc0dWVpa3BPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wYzBKdmVDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0VvWlM1dFlYZ3VlQ0E4SUhSb2FYTXViV2x1TG5nZ2ZId2daUzV0YVc0dWVDQStJSFJvYVhNdWJXRjRMbmdnZkh3Z1pTNXRZWGd1ZVNBOElIUm9hWE11YldsdUxua2dmSHdnWlM1dGFXNHVlU0ErSUhSb2FYTXViV0Y0TG5rZ2ZId2daUzV0WVhndWVpQThJSFJvYVhNdWJXbHVMbm9nZkh3Z1pTNXRhVzR1ZWlBK0lIUm9hWE11YldGNExub3BPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wYzFOd2FHVnlaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnhoYlhCUWIybHVkQ2hsTG1ObGJuUmxjaXdnWTI0cExDQmpiaTVrYVhOMFlXNWpaVlJ2VTNGMVlYSmxaQ2hsTG1ObGJuUmxjaWtnUEQwZ1pTNXlZV1JwZFhNZ0tpQmxMbkpoWkdsMWN6c0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkSE5RYkdGdVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUXNJRzQ3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1Ym05eWJXRnNMbmdnUGlBd0lEOGdLSFFnUFNCbExtNXZjbTFoYkM1NElDb2dkR2hwY3k1dGFXNHVlQ3dnYmlBOUlHVXVibTl5YldGc0xuZ2dLaUIwYUdsekxtMWhlQzU0S1NBNklDaDBJRDBnWlM1dWIzSnRZV3d1ZUNBcUlIUm9hWE11YldGNExuZ3NJRzRnUFNCbExtNXZjbTFoYkM1NElDb2dkR2hwY3k1dGFXNHVlQ2tzSUdVdWJtOXliV0ZzTG5rZ1BpQXdJRDhnS0hRZ0t6MGdaUzV1YjNKdFlXd3VlU0FxSUhSb2FYTXViV2x1TG5rc0lHNGdLejBnWlM1dWIzSnRZV3d1ZVNBcUlIUm9hWE11YldGNExua3BJRG9nS0hRZ0t6MGdaUzV1YjNKdFlXd3VlU0FxSUhSb2FYTXViV0Y0TG5rc0lHNGdLejBnWlM1dWIzSnRZV3d1ZVNBcUlIUm9hWE11YldsdUxua3BMQ0JsTG01dmNtMWhiQzU2SUQ0Z01DQS9JQ2gwSUNzOUlHVXVibTl5YldGc0xub2dLaUIwYUdsekxtMXBiaTU2TENCdUlDczlJR1V1Ym05eWJXRnNMbm9nS2lCMGFHbHpMbTFoZUM1NktTQTZJQ2gwSUNzOUlHVXVibTl5YldGc0xub2dLaUIwYUdsekxtMWhlQzU2TENCdUlDczlJR1V1Ym05eWJXRnNMbm9nS2lCMGFHbHpMbTFwYmk1NktTd2dkQ0E4UFNBdFpTNWpiMjV6ZEdGdWRDQW1KaUJ1SUQ0OUlDMWxMbU52Ym5OMFlXNTBPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wYzFSeWFXRnVaMnhsS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBjMFZ0Y0hSNUtDa3BJSEpsZEhWeWJpQWhNVHNLSUNBZ0lDQWdJQ0IwYUdsekxtZGxkRU5sYm5SbGNpaGpjeWtzSUZkekxuTjFZbFpsWTNSdmNuTW9kR2hwY3k1dFlYZ3NJR056S1N3Z2VHa3VjM1ZpVm1WamRHOXljeWhsTG1Fc0lHTnpLU3dnZG1rdWMzVmlWbVZqZEc5eWN5aGxMbUlzSUdOektTd2dlV2t1YzNWaVZtVmpkRzl5Y3lobExtTXNJR056S1N3Z1ZHNHVjM1ZpVm1WamRHOXljeWgyYVN3Z2VHa3BMQ0IzYmk1emRXSldaV04wYjNKektIbHBMQ0IyYVNrc0lGZHVMbk4xWWxabFkzUnZjbk1vZUdrc0lIbHBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTFZSdUxub3NDaUFnSUNBZ0lDQWdJQ0FnSUZSdUxua3NDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzEzYmk1NkxBb2dJQ0FnSUNBZ0lDQWdJQ0IzYmk1NUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRWMjR1ZWl3S0lDQWdJQ0FnSUNBZ0lDQWdWMjR1ZVN3S0lDQWdJQ0FnSUNBZ0lDQWdWRzR1ZWl3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xWUnVMbmdzQ2lBZ0lDQWdJQ0FnSUNBZ0lIZHVMbm9zQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxM2JpNTRMQW9nSUNBZ0lDQWdJQ0FnSUNCWGJpNTZMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0VjI0dWVDd0tJQ0FnSUNBZ0lDQWdJQ0FnTFZSdUxua3NDaUFnSUNBZ0lDQWdJQ0FnSUZSdUxuZ3NDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzEzYmk1NUxBb2dJQ0FnSUNBZ0lDQWdJQ0IzYmk1NExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRWMjR1ZVN3S0lDQWdJQ0FnSUNBZ0lDQWdWMjR1ZUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQW9nSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0ZHWVNoMExDQjRhU3dnZG1rc0lIbHBMQ0JYY3lrZ2ZId2dLSFFnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFS0lDQWdJQ0FnSUNCZExDQWhSbUVvZEN3Z2VHa3NJSFpwTENCNWFTd2dWM01wS1NBL0lDRXhJRG9nS0ZoekxtTnliM056Vm1WamRHOXljeWhVYml3Z2QyNHBMQ0IwSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0JZY3k1NExBb2dJQ0FnSUNBZ0lDQWdJQ0JZY3k1NUxBb2dJQ0FnSUNBZ0lDQWdJQ0JZY3k1NkNpQWdJQ0FnSUNBZ1hTd2dSbUVvZEN3Z2VHa3NJSFpwTENCNWFTd2dWM01wS1RzS0lDQWdJSDBLSUNBZ0lHTnNZVzF3VUc5cGJuUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtTnZjSGtvWlNrdVkyeGhiWEFvZEdocGN5NXRhVzRzSUhSb2FYTXViV0Y0S1RzS0lDQWdJSDBLSUNBZ0lHUnBjM1JoYm1ObFZHOVFiMmx1ZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTJ4aGJYQlFiMmx1ZENobExDQmpiaWt1WkdsemRHRnVZMlZVYnlobEtUc0tJQ0FnSUgwS0lDQWdJR2RsZEVKdmRXNWthVzVuVTNCb1pYSmxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBjMFZ0Y0hSNUtDa2dQeUJsTG0xaGEyVkZiWEIwZVNncElEb2dLSFJvYVhNdVoyVjBRMlZ1ZEdWeUtHVXVZMlZ1ZEdWeUtTd2daUzV5WVdScGRYTWdQU0IwYUdsekxtZGxkRk5wZW1Vb1kyNHBMbXhsYm1kMGFDZ3BJQ29nTGpVcExDQmxPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0YVc0dWJXRjRLR1V1YldsdUtTd2dkR2hwY3k1dFlYZ3ViV2x1S0dVdWJXRjRLU3dnZEdocGN5NXBjMFZ0Y0hSNUtDa2dKaVlnZEdocGN5NXRZV3RsUlcxd2RIa29LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFZ1YVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHViV2x1S0dVdWJXbHVLU3dnZEdocGN5NXRZWGd1YldGNEtHVXViV0Y0S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE5DaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFYTkZiWEIwZVNncElEOGdkR2hwY3lBNklDaHZibHN3WFM1elpYUW9kR2hwY3k1dGFXNHVlQ3dnZEdocGN5NXRhVzR1ZVN3Z2RHaHBjeTV0YVc0dWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQnZibHN4WFM1elpYUW9kR2hwY3k1dGFXNHVlQ3dnZEdocGN5NXRhVzR1ZVN3Z2RHaHBjeTV0WVhndWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQnZibHN5WFM1elpYUW9kR2hwY3k1dGFXNHVlQ3dnZEdocGN5NXRZWGd1ZVN3Z2RHaHBjeTV0YVc0dWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQnZibHN6WFM1elpYUW9kR2hwY3k1dGFXNHVlQ3dnZEdocGN5NXRZWGd1ZVN3Z2RHaHBjeTV0WVhndWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQnZibHMwWFM1elpYUW9kR2hwY3k1dFlYZ3VlQ3dnZEdocGN5NXRhVzR1ZVN3Z2RHaHBjeTV0YVc0dWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQnZibHMxWFM1elpYUW9kR2hwY3k1dFlYZ3VlQ3dnZEdocGN5NXRhVzR1ZVN3Z2RHaHBjeTV0WVhndWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQnZibHMyWFM1elpYUW9kR2hwY3k1dFlYZ3VlQ3dnZEdocGN5NXRZWGd1ZVN3Z2RHaHBjeTV0YVc0dWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQnZibHMzWFM1elpYUW9kR2hwY3k1dFlYZ3VlQ3dnZEdocGN5NXRZWGd1ZVN3Z2RHaHBjeTV0WVhndWVpa3VZWEJ3YkhsTllYUnlhWGcwS0dVcExDQjBhR2x6TG5ObGRFWnliMjFRYjJsdWRITW9iMjRwTENCMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUhSeVlXNXpiR0YwWlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxtRmtaQ2hsS1N3Z2RHaHBjeTV0WVhndVlXUmtLR1VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhGMVlXeHpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1dGFXNHVaWEYxWVd4ektIUm9hWE11YldsdUtTQW1KaUJsTG0xaGVDNWxjWFZoYkhNb2RHaHBjeTV0WVhncE93b2dJQ0FnZlFwOUxDQnZiaUE5SUZzS0lDQWdJRzVsZHlCQkxBb2dJQ0FnYm1WM0lFRXNDaUFnSUNCdVpYY2dRU3dLSUNBZ0lHNWxkeUJCTEFvZ0lDQWdibVYzSUVFc0NpQWdJQ0J1WlhjZ1FTd0tJQ0FnSUc1bGR5QkJMQW9nSUNBZ2JtVjNJRUVLWFN3Z1kyNGdQU0J1WlhjZ1FTd2dYMmtnUFNCdVpYY2dVWFFzSUhocElEMGdibVYzSUVFc0lIWnBJRDBnYm1WM0lFRXNJSGxwSUQwZ2JtVjNJRUVzSUZSdUlEMGdibVYzSUVFc0lIZHVJRDBnYm1WM0lFRXNJRmR1SUQwZ2JtVjNJRUVzSUdOeklEMGdibVYzSUVFc0lGZHpJRDBnYm1WM0lFRXNJRmh6SUQwZ2JtVjNJRUVzSUZodUlEMGdibVYzSUVFN0NtWjFibU4wYVc5dUlFWmhLSE14TENCbExDQjBMQ0J1TENCcEtTQjdDaUFnSUNCbWIzSW9iR1YwSUhJZ1BTQXdMQ0JoSUQwZ2N6RXViR1Z1WjNSb0lDMGdNenNnY2lBOFBTQmhPeUJ5SUNzOUlETXBld29nSUNBZ0lDQWdJRmh1TG1aeWIyMUJjbkpoZVNoek1Td2djaWs3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0JwTG5nZ0tpQk5ZWFJvTG1GaWN5aFliaTU0S1NBcklHa3VlU0FxSUUxaGRHZ3VZV0p6S0ZodUxua3BJQ3NnYVM1NklDb2dUV0YwYUM1aFluTW9XRzR1ZWlrc0lHTWdQU0JsTG1SdmRDaFliaWtzSUd3Z1BTQjBMbVJ2ZENoWWJpa3NJR2dnUFNCdUxtUnZkQ2hZYmlrN0NpQWdJQ0FnSUNBZ2FXWWdLRTFoZEdndWJXRjRLQzFOWVhSb0xtMWhlQ2hqTENCc0xDQm9LU3dnVFdGMGFDNXRhVzRvWXl3Z2JDd2dhQ2twSUQ0Z2J5a2djbVYwZFhKdUlDRXhPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJQ0V3T3dwOUNuWmhjaUJ5Y0NBOUlHNWxkeUJSZEN3Z2JITWdQU0J1WlhjZ1FTd2dRbUVnUFNCdVpYY2dRU3dnV1hRZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdibVYzSUVFc0lIUWdQU0F0TVNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqWlc1MFpYSWdQU0JsTENCMGFHbHpMbkpoWkdsMWN5QTlJSFE3Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5sYm5SbGNpNWpiM0I1S0dVcExDQjBhR2x6TG5KaFpHbDFjeUE5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0VUc5cGJuUnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WTJWdWRHVnlPd29nSUNBZ0lDQWdJSFFnSVQwOUlIWnZhV1FnTUNBL0lHNHVZMjl3ZVNoMEtTQTZJSEp3TG5ObGRFWnliMjFRYjJsdWRITW9aU2t1WjJWMFEyVnVkR1Z5S0c0cE93b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ01Ec0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdaUzVzWlc1bmRHZzdJSElnUENCaE95QnlLeXNwYVNBOUlFMWhkR2d1YldGNEtHa3NJRzR1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvWlZ0eVhTa3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KaFpHbDFjeUE5SUUxaGRHZ3VjM0Z5ZENocEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5sYm5SbGNpNWpiM0I1S0dVdVkyVnVkR1Z5S1N3Z2RHaHBjeTV5WVdScGRYTWdQU0JsTG5KaFpHbDFjeXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2x6Ulcxd2RIa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtRmthWFZ6SUR3Z01Ec0tJQ0FnSUgwS0lDQWdJRzFoYTJWRmJYQjBlU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpaVzUwWlhJdWMyVjBLREFzSURBc0lEQXBMQ0IwYUdsekxuSmhaR2wxY3lBOUlDMHhMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl1ZEdGcGJuTlFiMmx1ZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9kR2hwY3k1alpXNTBaWElwSUR3OUlIUm9hWE11Y21Ga2FYVnpJQ29nZEdocGN5NXlZV1JwZFhNN0NpQWdJQ0I5Q2lBZ0lDQmthWE4wWVc1alpWUnZVRzlwYm5Rb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbVJwYzNSaGJtTmxWRzhvZEdocGN5NWpaVzUwWlhJcElDMGdkR2hwY3k1eVlXUnBkWE03Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSelUzQm9aWEpsS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Y21Ga2FYVnpJQ3NnWlM1eVlXUnBkWE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1WTJWdWRHVnlMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLSFJvYVhNdVkyVnVkR1Z5S1NBOFBTQjBJQ29nZERzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRITkNiM2dvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtbHVkR1Z5YzJWamRITlRjR2hsY21Vb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSelVHeGhibVVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUZpY3lobExtUnBjM1JoYm1ObFZHOVFiMmx1ZENoMGFHbHpMbU5sYm5SbGNpa3BJRHc5SUhSb2FYTXVjbUZrYVhWek93b2dJQ0FnZlFvZ0lDQWdZMnhoYlhCUWIybHVkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1ObGJuUmxjaTVrYVhOMFlXNWpaVlJ2VTNGMVlYSmxaQ2hsS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1amIzQjVLR1VwTENCdUlENGdkR2hwY3k1eVlXUnBkWE1nS2lCMGFHbHpMbkpoWkdsMWN5QW1KaUFvZEM1emRXSW9kR2hwY3k1alpXNTBaWElwTG01dmNtMWhiR2w2WlNncExDQjBMbTExYkhScGNHeDVVMk5oYkdGeUtIUm9hWE11Y21Ga2FYVnpLUzVoWkdRb2RHaHBjeTVqWlc1MFpYSXBLU3dnZERzS0lDQWdJSDBLSUNBZ0lHZGxkRUp2ZFc1a2FXNW5RbTk0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYzBWdGNIUjVLQ2tnUHlBb1pTNXRZV3RsUlcxd2RIa29LU3dnWlNrZ09pQW9aUzV6WlhRb2RHaHBjeTVqWlc1MFpYSXNJSFJvYVhNdVkyVnVkR1Z5S1N3Z1pTNWxlSEJoYm1SQ2VWTmpZV3hoY2loMGFHbHpMbkpoWkdsMWN5a3NJR1VwT3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxOWVhSeWFYZzBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpaVzUwWlhJdVlYQndiSGxOWVhSeWFYZzBLR1VwTENCMGFHbHpMbkpoWkdsMWN5QTlJSFJvYVhNdWNtRmthWFZ6SUNvZ1pTNW5aWFJOWVhoVFkyRnNaVTl1UVhocGN5Z3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkSEpoYm5Oc1lYUmxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpaVzUwWlhJdVlXUmtLR1VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhod1lXNWtRbmxRYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVhORmJYQjBlU2dwS1NCeVpYUjFjbTRnZEdocGN5NWpaVzUwWlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTV5WVdScGRYTWdQU0F3TENCMGFHbHpPd29nSUNBZ0lDQWdJR3h6TG5OMVlsWmxZM1J2Y25Nb1pTd2dkR2hwY3k1alpXNTBaWElwT3dvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnYkhNdWJHVnVaM1JvVTNFb0tUc0tJQ0FnSUNBZ0lDQnBaaUFvZENBK0lIUm9hWE11Y21Ga2FYVnpJQ29nZEdocGN5NXlZV1JwZFhNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNGdQU0JOWVhSb0xuTnhjblFvZENrc0lHa2dQU0FvYmlBdElIUm9hWE11Y21Ga2FYVnpLU0FxSUM0MU93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTmxiblJsY2k1aFpHUlRZMkZzWldSV1pXTjBiM0lvYkhNc0lHa2dMeUJ1S1N3Z2RHaHBjeTV5WVdScGRYTWdLejBnYVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IxYm1sdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1YVhORmJYQjBlU2dwSUQ4Z2RHaHBjeUE2SUhSb2FYTXVhWE5GYlhCMGVTZ3BJRDhnS0hSb2FYTXVZMjl3ZVNobEtTd2dkR2hwY3lrZ09pQW9kR2hwY3k1alpXNTBaWEl1WlhGMVlXeHpLR1V1WTJWdWRHVnlLU0E5UFQwZ0lUQWdQeUIwYUdsekxuSmhaR2wxY3lBOUlFMWhkR2d1YldGNEtIUm9hWE11Y21Ga2FYVnpMQ0JsTG5KaFpHbDFjeWtnT2lBb1FtRXVjM1ZpVm1WamRHOXljeWhsTG1ObGJuUmxjaXdnZEdocGN5NWpaVzUwWlhJcExuTmxkRXhsYm1kMGFDaGxMbkpoWkdsMWN5a3NJSFJvYVhNdVpYaHdZVzVrUW5sUWIybHVkQ2hzY3k1amIzQjVLR1V1WTJWdWRHVnlLUzVoWkdRb1FtRXBLU3dnZEdocGN5NWxlSEJoYm1SQ2VWQnZhVzUwS0d4ekxtTnZjSGtvWlM1alpXNTBaWElwTG5OMVlpaENZU2twS1N3Z2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCbGNYVmhiSE1vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtTmxiblJsY2k1bGNYVmhiSE1vZEdocGN5NWpaVzUwWlhJcElDWW1JR1V1Y21Ga2FYVnpJRDA5UFNCMGFHbHpMbkpoWkdsMWN6c0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1OdmNIa29kR2hwY3lrN0NpQWdJQ0I5Q24wc0lHeHVJRDBnYm1WM0lFRXNJSHBoSUQwZ2JtVjNJRUVzSUhGeklEMGdibVYzSUVFc0lFRnVJRDBnYm1WM0lFRXNJRlpoSUQwZ2JtVjNJRUVzSUZseklEMGdibVYzSUVFc0lHdGhJRDBnYm1WM0lFRXNJR2hwSUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJCTENCMElEMGdibVYzSUVFb01Dd2dNQ3dnTFRFcEtYc0tJQ0FnSUNBZ0lDQjBhR2x6TG05eWFXZHBiaUE5SUdVc0lIUm9hWE11WkdseVpXTjBhVzl1SUQwZ2REc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIzSnBaMmx1TG1OdmNIa29aU2tzSUhSb2FYTXVaR2x5WldOMGFXOXVMbU52Y0hrb2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y21sbmFXNHVZMjl3ZVNobExtOXlhV2RwYmlrc0lIUm9hWE11WkdseVpXTjBhVzl1TG1OdmNIa29aUzVrYVhKbFkzUnBiMjRwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwTG1OdmNIa29kR2hwY3k1dmNtbG5hVzRwTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWgwYUdsekxtUnBjbVZqZEdsdmJpd2daU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyOXJRWFFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJwY21WamRHbHZiaTVqYjNCNUtHVXBMbk4xWWloMGFHbHpMbTl5YVdkcGJpa3VibTl5YldGc2FYcGxLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5WldOaGMzUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtOXlhV2RwYmk1amIzQjVLSFJvYVhNdVlYUW9aU3dnYkc0cEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnNiM05sYzNSUWIybHVkRlJ2VUc5cGJuUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUXVjM1ZpVm1WamRHOXljeWhsTENCMGFHbHpMbTl5YVdkcGJpazdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBMbVJ2ZENoMGFHbHpMbVJwY21WamRHbHZiaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzRnUENBd0lEOGdkQzVqYjNCNUtIUm9hWE11YjNKcFoybHVLU0E2SUhRdVkyOXdlU2gwYUdsekxtOXlhV2RwYmlrdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0hSb2FYTXVaR2x5WldOMGFXOXVMQ0J1S1RzS0lDQWdJSDBLSUNBZ0lHUnBjM1JoYm1ObFZHOVFiMmx1ZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1YzNGeWRDaDBhR2x6TG1ScGMzUmhibU5sVTNGVWIxQnZhVzUwS0dVcEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNSaGJtTmxVM0ZVYjFCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUd4dUxuTjFZbFpsWTNSdmNuTW9aU3dnZEdocGN5NXZjbWxuYVc0cExtUnZkQ2gwYUdsekxtUnBjbVZqZEdsdmJpazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUWdQQ0F3SUQ4Z2RHaHBjeTV2Y21sbmFXNHVaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9aU2tnT2lBb2JHNHVZMjl3ZVNoMGFHbHpMbTl5YVdkcGJpa3VZV1JrVTJOaGJHVmtWbVZqZEc5eUtIUm9hWE11WkdseVpXTjBhVzl1TENCMEtTd2diRzR1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvWlNrcE93b2dJQ0FnZlFvZ0lDQWdaR2x6ZEdGdVkyVlRjVlJ2VTJWbmJXVnVkQ2hsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ2VtRXVZMjl3ZVNobEtTNWhaR1FvZENrdWJYVnNkR2x3YkhsVFkyRnNZWElvTGpVcExDQnhjeTVqYjNCNUtIUXBMbk4xWWlobEtTNXViM0p0WVd4cGVtVW9LU3dnUVc0dVkyOXdlU2gwYUdsekxtOXlhV2RwYmlrdWMzVmlLSHBoS1RzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUdVdVpHbHpkR0Z1WTJWVWJ5aDBLU0FxSUM0MUxDQmhJRDBnTFhSb2FYTXVaR2x5WldOMGFXOXVMbVJ2ZENoeGN5a3NJRzhnUFNCQmJpNWtiM1FvZEdocGN5NWthWEpsWTNScGIyNHBMQ0JqSUQwZ0xVRnVMbVJ2ZENoeGN5a3NJR3dnUFNCQmJpNXNaVzVuZEdoVGNTZ3BMQ0JvSUQwZ1RXRjBhQzVoWW5Nb01TQXRJR0VnS2lCaEtTd2dkU3dnWkN3Z1ppd2diVHNLSUNBZ0lDQWdJQ0JwWmlBb2FDQStJREFwSUdsbUlDaDFJRDBnWVNBcUlHTWdMU0J2TENCa0lEMGdZU0FxSUc4Z0xTQmpMQ0J0SUQwZ2NpQXFJR2dzSUhVZ1BqMGdNQ2tnYVdZZ0tHUWdQajBnTFcwcElHbG1JQ2hrSUR3OUlHMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNBeElDOGdhRHNLSUNBZ0lDQWdJQ0FnSUNBZ2RTQXFQU0JmTENCa0lDbzlJRjhzSUdZZ1BTQjFJQ29nS0hVZ0t5QmhJQ29nWkNBcklESWdLaUJ2S1NBcklHUWdLaUFvWVNBcUlIVWdLeUJrSUNzZ01pQXFJR01wSUNzZ2JEc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1pDQTlJSElzSUhVZ1BTQk5ZWFJvTG0xaGVDZ3dMQ0F0S0dFZ0tpQmtJQ3NnYnlrcExDQm1JRDBnTFhVZ0tpQjFJQ3NnWkNBcUlDaGtJQ3NnTWlBcUlHTXBJQ3NnYkRzS0lDQWdJQ0FnSUNCbGJITmxJR1FnUFNBdGNpd2dkU0E5SUUxaGRHZ3ViV0Y0S0RBc0lDMG9ZU0FxSUdRZ0t5QnZLU2tzSUdZZ1BTQXRkU0FxSUhVZ0t5QmtJQ29nS0dRZ0t5QXlJQ29nWXlrZ0t5QnNPd29nSUNBZ0lDQWdJR1ZzYzJVZ1pDQThQU0F0YlNBL0lDaDFJRDBnVFdGMGFDNXRZWGdvTUN3Z0xTZ3RZU0FxSUhJZ0t5QnZLU2tzSUdRZ1BTQjFJRDRnTUNBL0lDMXlJRG9nVFdGMGFDNXRhVzRvVFdGMGFDNXRZWGdvTFhJc0lDMWpLU3dnY2lrc0lHWWdQU0F0ZFNBcUlIVWdLeUJrSUNvZ0tHUWdLeUF5SUNvZ1l5a2dLeUJzS1NBNklHUWdQRDBnYlNBL0lDaDFJRDBnTUN3Z1pDQTlJRTFoZEdndWJXbHVLRTFoZEdndWJXRjRLQzF5TENBdFl5a3NJSElwTENCbUlEMGdaQ0FxSUNoa0lDc2dNaUFxSUdNcElDc2diQ2tnT2lBb2RTQTlJRTFoZEdndWJXRjRLREFzSUMwb1lTQXFJSElnS3lCdktTa3NJR1FnUFNCMUlENGdNQ0EvSUhJZ09pQk5ZWFJvTG0xcGJpaE5ZWFJvTG0xaGVDZ3RjaXdnTFdNcExDQnlLU3dnWmlBOUlDMTFJQ29nZFNBcklHUWdLaUFvWkNBcklESWdLaUJqS1NBcklHd3BPd29nSUNBZ0lDQWdJR1ZzYzJVZ1pDQTlJR0VnUGlBd0lEOGdMWElnT2lCeUxDQjFJRDBnVFdGMGFDNXRZWGdvTUN3Z0xTaGhJQ29nWkNBcklHOHBLU3dnWmlBOUlDMTFJQ29nZFNBcklHUWdLaUFvWkNBcklESWdLaUJqS1NBcklHdzdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNGdKaVlnYmk1amIzQjVLSFJvYVhNdWIzSnBaMmx1S1M1aFpHUlRZMkZzWldSV1pXTjBiM0lvZEdocGN5NWthWEpsWTNScGIyNHNJSFVwTENCcElDWW1JR2t1WTI5d2VTaDZZU2t1WVdSa1UyTmhiR1ZrVm1WamRHOXlLSEZ6TENCa0tTd2daanNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljMlZqZEZOd2FHVnlaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiRzR1YzNWaVZtVmpkRzl5Y3lobExtTmxiblJsY2l3Z2RHaHBjeTV2Y21sbmFXNHBPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdiRzR1Wkc5MEtIUm9hWE11WkdseVpXTjBhVzl1S1N3Z2FTQTlJR3h1TG1SdmRDaHNiaWtnTFNCdUlDb2diaXdnY2lBOUlHVXVjbUZrYVhWeklDb2daUzV5WVdScGRYTTdDaUFnSUNBZ0lDQWdhV1lnS0drZ1BpQnlLU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUUxaGRHZ3VjM0Z5ZENoeUlDMGdhU2tzSUc4Z1BTQnVJQzBnWVN3Z1l5QTlJRzRnS3lCaE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCaklEd2dNQ0EvSUc1MWJHd2dPaUJ2SUR3Z01DQS9JSFJvYVhNdVlYUW9ZeXdnZENrZ09pQjBhR2x6TG1GMEtHOHNJSFFwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMxTndhR1Z5WlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdsemRHRnVZMlZUY1ZSdlVHOXBiblFvWlM1alpXNTBaWElwSUR3OUlHVXVjbUZrYVhWeklDb2daUzV5WVdScGRYTTdDaUFnSUNCOUNpQWdJQ0JrYVhOMFlXNWpaVlJ2VUd4aGJtVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1dWIzSnRZV3d1Wkc5MEtIUm9hWE11WkdseVpXTjBhVzl1S1RzS0lDQWdJQ0FnSUNCcFppQW9kQ0E5UFQwZ01Da2djbVYwZFhKdUlHVXVaR2x6ZEdGdVkyVlViMUJ2YVc1MEtIUm9hWE11YjNKcFoybHVLU0E5UFQwZ01DQS9JREFnT2lCdWRXeHNPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdMU2gwYUdsekxtOXlhV2RwYmk1a2IzUW9aUzV1YjNKdFlXd3BJQ3NnWlM1amIyNXpkR0Z1ZENrZ0x5QjBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVJRDQ5SURBZ1B5QnVJRG9nYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkRkJzWVc1bEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVaR2x6ZEdGdVkyVlViMUJzWVc1bEtHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVJRDA5UFNCdWRXeHNJRDhnYm5Wc2JDQTZJSFJvYVhNdVlYUW9iaXdnZENrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpVR3hoYm1Vb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVrYVhOMFlXNWpaVlJ2VUc5cGJuUW9kR2hwY3k1dmNtbG5hVzRwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUQwOVBTQXdJSHg4SUdVdWJtOXliV0ZzTG1SdmRDaDBhR2x6TG1ScGNtVmpkR2x2YmlrZ0tpQjBJRHdnTURzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRFSnZlQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0c0lHa3NJSElzSUdFc0lHOHNJR01zSUd3Z1BTQXhJQzhnZEdocGN5NWthWEpsWTNScGIyNHVlQ3dnYUNBOUlERWdMeUIwYUdsekxtUnBjbVZqZEdsdmJpNTVMQ0IxSUQwZ01TQXZJSFJvYVhNdVpHbHlaV04wYVc5dUxub3NJR1FnUFNCMGFHbHpMbTl5YVdkcGJqc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JDQStQU0F3SUQ4Z0tHNGdQU0FvWlM1dGFXNHVlQ0F0SUdRdWVDa2dLaUJzTENCcElEMGdLR1V1YldGNExuZ2dMU0JrTG5ncElDb2diQ2tnT2lBb2JpQTlJQ2hsTG0xaGVDNTRJQzBnWkM1NEtTQXFJR3dzSUdrZ1BTQW9aUzV0YVc0dWVDQXRJR1F1ZUNrZ0tpQnNLU3dnYUNBK1BTQXdJRDhnS0hJZ1BTQW9aUzV0YVc0dWVTQXRJR1F1ZVNrZ0tpQm9MQ0JoSUQwZ0tHVXViV0Y0TG5rZ0xTQmtMbmtwSUNvZ2FDa2dPaUFvY2lBOUlDaGxMbTFoZUM1NUlDMGdaQzU1S1NBcUlHZ3NJR0VnUFNBb1pTNXRhVzR1ZVNBdElHUXVlU2tnS2lCb0tTd2diaUErSUdFZ2ZId2djaUErSUdrZ2ZId2dLQ2h5SUQ0Z2JpQjhmQ0JwYzA1aFRpaHVLU2tnSmlZZ0tHNGdQU0J5S1N3Z0tHRWdQQ0JwSUh4OElHbHpUbUZPS0drcEtTQW1KaUFvYVNBOUlHRXBMQ0IxSUQ0OUlEQWdQeUFvYnlBOUlDaGxMbTFwYmk1NklDMGdaQzU2S1NBcUlIVXNJR01nUFNBb1pTNXRZWGd1ZWlBdElHUXVlaWtnS2lCMUtTQTZJQ2h2SUQwZ0tHVXViV0Y0TG5vZ0xTQmtMbm9wSUNvZ2RTd2dZeUE5SUNobExtMXBiaTU2SUMwZ1pDNTZLU0FxSUhVcExDQnVJRDRnWXlCOGZDQnZJRDRnYVNrZ2ZId2dLQ2h2SUQ0Z2JpQjhmQ0J1SUNFOVBTQnVLU0FtSmlBb2JpQTlJRzhwTENBb1l5QThJR2tnZkh3Z2FTQWhQVDBnYVNrZ0ppWWdLR2tnUFNCaktTd2dhU0E4SURBcElEOGdiblZzYkNBNklIUm9hWE11WVhRb2JpQStQU0F3SUQ4Z2JpQTZJR2tzSUhRcE93b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKelpXTjBjMEp2ZUNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVc1MFpYSnpaV04wUW05NEtHVXNJR3h1S1NBaFBUMGdiblZzYkRzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRGUnlhV0Z1WjJ4bEtHVXNJSFFzSUc0c0lHa3NJSElwSUhzS0lDQWdJQ0FnSUNCV1lTNXpkV0pXWldOMGIzSnpLSFFzSUdVcExDQlpjeTV6ZFdKV1pXTjBiM0p6S0c0c0lHVXBMQ0JyWVM1amNtOXpjMVpsWTNSdmNuTW9WbUVzSUZsektUc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIUm9hWE11WkdseVpXTjBhVzl1TG1SdmRDaHJZU2tzSUc4N0NpQWdJQ0FnSUNBZ2FXWWdLR0VnUGlBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBLU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJQ0FnSUNBZ0lDQWdieUE5SURFN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhJRHdnTUNrZ2J5QTlJQzB4TENCaElEMGdMV0U3Q2lBZ0lDQWdJQ0FnWld4elpTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lDQWdJQ0JCYmk1emRXSldaV04wYjNKektIUm9hWE11YjNKcFoybHVMQ0JsS1RzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc4Z0tpQjBhR2x6TG1ScGNtVmpkR2x2Ymk1a2IzUW9XWE11WTNKdmMzTldaV04wYjNKektFRnVMQ0JaY3lrcE93b2dJQ0FnSUNBZ0lHbG1JQ2hqSUR3Z01Da2djbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0J2SUNvZ2RHaHBjeTVrYVhKbFkzUnBiMjR1Wkc5MEtGWmhMbU55YjNOektFRnVLU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHd2dQQ0F3SUh4OElHTWdLeUJzSUQ0Z1lTa2djbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnYkdWMElHZ2dQU0F0YnlBcUlFRnVMbVJ2ZENocllTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHZ2dQQ0F3SUQ4Z2JuVnNiQ0E2SUhSb2FYTXVZWFFvYUNBdklHRXNJSElwT3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxOWVhSeWFYZzBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXZjbWxuYVc0dVlYQndiSGxOWVhSeWFYZzBLR1VwTENCMGFHbHpMbVJwY21WamRHbHZiaTUwY21GdWMyWnZjbTFFYVhKbFkzUnBiMjRvWlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCbGNYVmhiSE1vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtOXlhV2RwYmk1bGNYVmhiSE1vZEdocGN5NXZjbWxuYVc0cElDWW1JR1V1WkdseVpXTjBhVzl1TG1WeGRXRnNjeWgwYUdsekxtUnBjbVZqZEdsdmJpazdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFwOUxDQjZaU0E5SUdOc1lYTnpJSE14SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRzSUdrc0lISXNJR0VzSUc4c0lHTXNJR3dzSUdnc0lIVXNJR1FzSUdZc0lHMHNJRjhzSUdjcGV3b2dJQ0FnSUNBZ0lITXhMbkJ5YjNSdmRIbHdaUzVwYzAxaGRISnBlRFFnUFNBaE1Dd2dkR2hwY3k1bGJHVnRaVzUwY3lBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVFvZ0lDQWdJQ0FnSUYwc0lHVWdJVDA5SUhadmFXUWdNQ0FtSmlCMGFHbHpMbk5sZENobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzTENCb0xDQjFMQ0JrTENCbUxDQnRMQ0JmTENCbktUc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzTENCb0xDQjFMQ0JrTENCbUxDQnRMQ0JmTENCbktTQjdDaUFnSUNBZ0lDQWdiR1YwSUhBZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3V3pCZElEMGdaU3dnY0ZzMFhTQTlJSFFzSUhCYk9GMGdQU0J1TENCd1d6RXlYU0E5SUdrc0lIQmJNVjBnUFNCeUxDQndXelZkSUQwZ1lTd2djRnM1WFNBOUlHOHNJSEJiTVROZElEMGdZeXdnY0ZzeVhTQTlJR3dzSUhCYk5sMGdQU0JvTENCd1d6RXdYU0E5SUhVc0lIQmJNVFJkSUQwZ1pDd2djRnN6WFNBOUlHWXNJSEJiTjEwZ1BTQnRMQ0J3V3pFeFhTQTlJRjhzSUhCYk1UVmRJRDBnWnl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdsa1pXNTBhWFI1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZENneExDQXdMQ0F3TENBd0xDQXdMQ0F4TENBd0xDQXdMQ0F3TENBd0xDQXhMQ0F3TENBd0xDQXdMQ0F3TENBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2djekVvS1M1bWNtOXRRWEp5WVhrb2RHaHBjeTVsYkdWdFpXNTBjeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVaV3hsYldWdWRITXNJRzRnUFNCbExtVnNaVzFsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMFd6QmRJRDBnYmxzd1hTd2dkRnN4WFNBOUlHNWJNVjBzSUhSYk1sMGdQU0J1V3pKZExDQjBXek5kSUQwZ2Jsc3pYU3dnZEZzMFhTQTlJRzViTkYwc0lIUmJOVjBnUFNCdVd6VmRMQ0IwV3paZElEMGdibHMyWFN3Z2RGczNYU0E5SUc1Yk4xMHNJSFJiT0YwZ1BTQnVXemhkTENCMFd6bGRJRDBnYmxzNVhTd2dkRnN4TUYwZ1BTQnVXekV3WFN3Z2RGc3hNVjBnUFNCdVd6RXhYU3dnZEZzeE1sMGdQU0J1V3pFeVhTd2dkRnN4TTEwZ1BTQnVXekV6WFN3Z2RGc3hORjBnUFNCdVd6RTBYU3dnZEZzeE5WMGdQU0J1V3pFMVhTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGxRYjNOcGRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0J1SUQwZ1pTNWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RGc3hNbDBnUFNCdVd6RXlYU3dnZEZzeE0xMGdQU0J1V3pFelhTd2dkRnN4TkYwZ1BTQnVXekUwWFN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFOWVhSeWFYZ3pLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0hSYk1GMHNJSFJiTTEwc0lIUmJObDBzSURBc0lIUmJNVjBzSUhSYk5GMHNJSFJiTjEwc0lEQXNJSFJiTWwwc0lIUmJOVjBzSUhSYk9GMHNJREFzSURBc0lEQXNJREFzSURFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYaDBjbUZqZEVKaGMybHpLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV6WlhSR2NtOXRUV0YwY21sNFEyOXNkVzF1S0hSb2FYTXNJREFwTENCMExuTmxkRVp5YjIxTllYUnlhWGhEYjJ4MWJXNG9kR2hwY3l3Z01Ta3NJRzR1YzJWMFJuSnZiVTFoZEhKcGVFTnZiSFZ0YmloMGFHbHpMQ0F5S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVkNZWE5wY3lobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0dVdWVDd2dkQzU0TENCdUxuZ3NJREFzSUdVdWVTd2dkQzU1TENCdUxua3NJREFzSUdVdWVpd2dkQzU2TENCdUxub3NJREFzSURBc0lEQXNJREFzSURFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYaDBjbUZqZEZKdmRHRjBhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Wld4bGJXVnVkSE1zSUc0Z1BTQmxMbVZzWlcxbGJuUnpMQ0JwSUQwZ01TQXZJRTFwTG5ObGRFWnliMjFOWVhSeWFYaERiMngxYlc0b1pTd2dNQ2t1YkdWdVozUm9LQ2tzSUhJZ1BTQXhJQzhnVFdrdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaGxMQ0F4S1M1c1pXNW5kR2dvS1N3Z1lTQTlJREVnTHlCTmFTNXpaWFJHY205dFRXRjBjbWw0UTI5c2RXMXVLR1VzSURJcExteGxibWQwYUNncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMFd6QmRJRDBnYmxzd1hTQXFJR2tzSUhSYk1WMGdQU0J1V3pGZElDb2dhU3dnZEZzeVhTQTlJRzViTWwwZ0tpQnBMQ0IwV3pOZElEMGdNQ3dnZEZzMFhTQTlJRzViTkYwZ0tpQnlMQ0IwV3pWZElEMGdibHMxWFNBcUlISXNJSFJiTmwwZ1BTQnVXelpkSUNvZ2Npd2dkRnMzWFNBOUlEQXNJSFJiT0YwZ1BTQnVXemhkSUNvZ1lTd2dkRnM1WFNBOUlHNWJPVjBnS2lCaExDQjBXekV3WFNBOUlHNWJNVEJkSUNvZ1lTd2dkRnN4TVYwZ1BTQXdMQ0IwV3pFeVhTQTlJREFzSUhSYk1UTmRJRDBnTUN3Z2RGc3hORjBnUFNBd0xDQjBXekUxWFNBOUlERXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRZV3RsVW05MFlYUnBiMjVHY205dFJYVnNaWElvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVsYkdWdFpXNTBjeXdnYmlBOUlHVXVlQ3dnYVNBOUlHVXVlU3dnY2lBOUlHVXVlaXdnWVNBOUlFMWhkR2d1WTI5ektHNHBMQ0J2SUQwZ1RXRjBhQzV6YVc0b2Jpa3NJR01nUFNCTllYUm9MbU52Y3locEtTd2diQ0E5SUUxaGRHZ3VjMmx1S0drcExDQm9JRDBnVFdGMGFDNWpiM01vY2lrc0lIVWdQU0JOWVhSb0xuTnBiaWh5S1RzS0lDQWdJQ0FnSUNCcFppQW9aUzV2Y21SbGNpQTlQVDBnSWxoWldpSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCaElDb2dhQ3dnWmlBOUlHRWdLaUIxTENCdElEMGdieUFxSUdnc0lGOGdQU0J2SUNvZ2RUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEZzd1hTQTlJR01nS2lCb0xDQjBXelJkSUQwZ0xXTWdLaUIxTENCMFd6aGRJRDBnYkN3Z2RGc3hYU0E5SUdZZ0t5QnRJQ29nYkN3Z2RGczFYU0E5SUdRZ0xTQmZJQ29nYkN3Z2RGczVYU0E5SUMxdklDb2dZeXdnZEZzeVhTQTlJRjhnTFNCa0lDb2diQ3dnZEZzMlhTQTlJRzBnS3lCbUlDb2diQ3dnZEZzeE1GMGdQU0JoSUNvZ1l6c0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1V1YjNKa1pYSWdQVDA5SUNKWldGb2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ1l5QXFJR2dzSUdZZ1BTQmpJQ29nZFN3Z2JTQTlJR3dnS2lCb0xDQmZJRDBnYkNBcUlIVTdDaUFnSUNBZ0lDQWdJQ0FnSUhSYk1GMGdQU0JrSUNzZ1h5QXFJRzhzSUhSYk5GMGdQU0J0SUNvZ2J5QXRJR1lzSUhSYk9GMGdQU0JoSUNvZ2JDd2dkRnN4WFNBOUlHRWdLaUIxTENCMFd6VmRJRDBnWVNBcUlHZ3NJSFJiT1YwZ1BTQXRieXdnZEZzeVhTQTlJR1lnS2lCdklDMGdiU3dnZEZzMlhTQTlJRjhnS3lCa0lDb2dieXdnZEZzeE1GMGdQU0JoSUNvZ1l6c0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1V1YjNKa1pYSWdQVDA5SUNKYVdGa2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ1l5QXFJR2dzSUdZZ1BTQmpJQ29nZFN3Z2JTQTlJR3dnS2lCb0xDQmZJRDBnYkNBcUlIVTdDaUFnSUNBZ0lDQWdJQ0FnSUhSYk1GMGdQU0JrSUMwZ1h5QXFJRzhzSUhSYk5GMGdQU0F0WVNBcUlIVXNJSFJiT0YwZ1BTQnRJQ3NnWmlBcUlHOHNJSFJiTVYwZ1BTQm1JQ3NnYlNBcUlHOHNJSFJiTlYwZ1BTQmhJQ29nYUN3Z2RGczVYU0E5SUY4Z0xTQmtJQ29nYnl3Z2RGc3lYU0E5SUMxaElDb2diQ3dnZEZzMlhTQTlJRzhzSUhSYk1UQmRJRDBnWVNBcUlHTTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hsTG05eVpHVnlJRDA5UFNBaVdsbFlJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkNBOUlHRWdLaUJvTENCbUlEMGdZU0FxSUhVc0lHMGdQU0J2SUNvZ2FDd2dYeUE5SUc4Z0tpQjFPd29nSUNBZ0lDQWdJQ0FnSUNCMFd6QmRJRDBnWXlBcUlHZ3NJSFJiTkYwZ1BTQnRJQ29nYkNBdElHWXNJSFJiT0YwZ1BTQmtJQ29nYkNBcklGOHNJSFJiTVYwZ1BTQmpJQ29nZFN3Z2RGczFYU0E5SUY4Z0tpQnNJQ3NnWkN3Z2RGczVYU0E5SUdZZ0tpQnNJQzBnYlN3Z2RGc3lYU0E5SUMxc0xDQjBXelpkSUQwZ2J5QXFJR01zSUhSYk1UQmRJRDBnWVNBcUlHTTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hsTG05eVpHVnlJRDA5UFNBaVdWcFlJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkNBOUlHRWdLaUJqTENCbUlEMGdZU0FxSUd3c0lHMGdQU0J2SUNvZ1l5d2dYeUE5SUc4Z0tpQnNPd29nSUNBZ0lDQWdJQ0FnSUNCMFd6QmRJRDBnWXlBcUlHZ3NJSFJiTkYwZ1BTQmZJQzBnWkNBcUlIVXNJSFJiT0YwZ1BTQnRJQ29nZFNBcklHWXNJSFJiTVYwZ1BTQjFMQ0IwV3pWZElEMGdZU0FxSUdnc0lIUmJPVjBnUFNBdGJ5QXFJR2dzSUhSYk1sMGdQU0F0YkNBcUlHZ3NJSFJiTmwwZ1BTQm1JQ29nZFNBcklHMHNJSFJiTVRCZElEMGdaQ0F0SUY4Z0tpQjFPd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWlM1dmNtUmxjaUE5UFQwZ0lsaGFXU0lwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQmhJQ29nWXl3Z1ppQTlJR0VnS2lCc0xDQnRJRDBnYnlBcUlHTXNJRjhnUFNCdklDb2diRHNLSUNBZ0lDQWdJQ0FnSUNBZ2RGc3dYU0E5SUdNZ0tpQm9MQ0IwV3pSZElEMGdMWFVzSUhSYk9GMGdQU0JzSUNvZ2FDd2dkRnN4WFNBOUlHUWdLaUIxSUNzZ1h5d2dkRnMxWFNBOUlHRWdLaUJvTENCMFd6bGRJRDBnWmlBcUlIVWdMU0J0TENCMFd6SmRJRDBnYlNBcUlIVWdMU0JtTENCMFd6WmRJRDBnYnlBcUlHZ3NJSFJiTVRCZElEMGdYeUFxSUhVZ0t5QmtPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRnN6WFNBOUlEQXNJSFJiTjEwZ1BTQXdMQ0IwV3pFeFhTQTlJREFzSUhSYk1USmRJRDBnTUN3Z2RGc3hNMTBnUFNBd0xDQjBXekUwWFNBOUlEQXNJSFJiTVRWZElEMGdNU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzFoYTJWU2IzUmhkR2x2YmtaeWIyMVJkV0YwWlhKdWFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjF3YjNObEtHRndMQ0JsTENCdmNDazdDaUFnSUNCOUNpQWdJQ0JzYjI5clFYUW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwY3k1bGJHVnRaVzUwY3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZW5RdWMzVmlWbVZqZEc5eWN5aGxMQ0IwS1N3Z2VuUXViR1Z1WjNSb1UzRW9LU0E5UFQwZ01DQW1KaUFvZW5RdWVpQTlJREVwTENCNmRDNXViM0p0WVd4cGVtVW9LU3dnVW00dVkzSnZjM05XWldOMGIzSnpLRzRzSUhwMEtTd2dVbTR1YkdWdVozUm9VM0VvS1NBOVBUMGdNQ0FtSmlBb1RXRjBhQzVoWW5Nb2JpNTZLU0E5UFQwZ01TQS9JSHAwTG5nZ0t6MGdNV1V0TkNBNklIcDBMbm9nS3owZ01XVXROQ3dnZW5RdWJtOXliV0ZzYVhwbEtDa3NJRkp1TG1OeWIzTnpWbVZqZEc5eWN5aHVMQ0I2ZENrcExDQlNiaTV1YjNKdFlXeHBlbVVvS1N3Z1duTXVZM0p2YzNOV1pXTjBiM0p6S0hwMExDQlNiaWtzSUdsYk1GMGdQU0JTYmk1NExDQnBXelJkSUQwZ1duTXVlQ3dnYVZzNFhTQTlJSHAwTG5nc0lHbGJNVjBnUFNCU2JpNTVMQ0JwV3pWZElEMGdXbk11ZVN3Z2FWczVYU0E5SUhwMExua3NJR2xiTWwwZ1BTQlNiaTU2TENCcFd6WmRJRDBnV25NdWVpd2dhVnN4TUYwZ1BTQjZkQzU2TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVUV0YwY21salpYTW9kR2hwY3l3Z1pTazdDaUFnSUNCOUNpQWdJQ0J3Y21WdGRXeDBhWEJzZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YlhWc2RHbHdiSGxOWVhSeWFXTmxjeWhsTENCMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUcxMWJIUnBjR3g1VFdGMGNtbGpaWE1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdaUzVsYkdWdFpXNTBjeXdnYVNBOUlIUXVaV3hsYldWdWRITXNJSElnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0JoSUQwZ2Jsc3dYU3dnYnlBOUlHNWJORjBzSUdNZ1BTQnVXemhkTENCc0lEMGdibHN4TWwwc0lHZ2dQU0J1V3pGZExDQjFJRDBnYmxzMVhTd2daQ0E5SUc1Yk9WMHNJR1lnUFNCdVd6RXpYU3dnYlNBOUlHNWJNbDBzSUY4Z1BTQnVXelpkTENCbklEMGdibHN4TUYwc0lIQWdQU0J1V3pFMFhTd2dkaUE5SUc1Yk0xMHNJSGdnUFNCdVd6ZGRMQ0I1SUQwZ2Jsc3hNVjBzSUdJZ1BTQnVXekUxWFN3Z2R5QTlJR2xiTUYwc0lGSWdQU0JwV3pSZExDQkpJRDBnYVZzNFhTd2dUU0E5SUdsYk1USmRMQ0JVSUQwZ2FWc3hYU3dnVHlBOUlHbGJOVjBzSUZrZ1BTQnBXemxkTENBa0lEMGdhVnN4TTEwc0lGVWdQU0JwV3pKZExDQjZJRDBnYVZzMlhTd2djU0E5SUdsYk1UQmRMQ0JJSUQwZ2FWc3hORjBzSUc1bElEMGdhVnN6WFN3Z1Z5QTlJR2xiTjEwc0lFc2dQU0JwV3pFeFhTd2dSQ0E5SUdsYk1UVmRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnlXekJkSUQwZ1lTQXFJSGNnS3lCdklDb2dWQ0FySUdNZ0tpQlZJQ3NnYkNBcUlHNWxMQ0J5V3pSZElEMGdZU0FxSUZJZ0t5QnZJQ29nVHlBcklHTWdLaUI2SUNzZ2JDQXFJRmNzSUhKYk9GMGdQU0JoSUNvZ1NTQXJJRzhnS2lCWklDc2dZeUFxSUhFZ0t5QnNJQ29nU3l3Z2Nsc3hNbDBnUFNCaElDb2dUU0FySUc4Z0tpQWtJQ3NnWXlBcUlFZ2dLeUJzSUNvZ1JDd2djbHN4WFNBOUlHZ2dLaUIzSUNzZ2RTQXFJRlFnS3lCa0lDb2dWU0FySUdZZ0tpQnVaU3dnY2xzMVhTQTlJR2dnS2lCU0lDc2dkU0FxSUU4Z0t5QmtJQ29nZWlBcklHWWdLaUJYTENCeVd6bGRJRDBnYUNBcUlFa2dLeUIxSUNvZ1dTQXJJR1FnS2lCeElDc2daaUFxSUVzc0lISmJNVE5kSUQwZ2FDQXFJRTBnS3lCMUlDb2dKQ0FySUdRZ0tpQklJQ3NnWmlBcUlFUXNJSEpiTWwwZ1BTQnRJQ29nZHlBcklGOGdLaUJVSUNzZ1p5QXFJRlVnS3lCd0lDb2dibVVzSUhKYk5sMGdQU0J0SUNvZ1VpQXJJRjhnS2lCUElDc2daeUFxSUhvZ0t5QndJQ29nVnl3Z2Nsc3hNRjBnUFNCdElDb2dTU0FySUY4Z0tpQlpJQ3NnWnlBcUlIRWdLeUJ3SUNvZ1N5d2djbHN4TkYwZ1BTQnRJQ29nVFNBcklGOGdLaUFrSUNzZ1p5QXFJRWdnS3lCd0lDb2dSQ3dnY2xzelhTQTlJSFlnS2lCM0lDc2dlQ0FxSUZRZ0t5QjVJQ29nVlNBcklHSWdLaUJ1WlN3Z2NsczNYU0E5SUhZZ0tpQlNJQ3NnZUNBcUlFOGdLeUI1SUNvZ2VpQXJJR0lnS2lCWExDQnlXekV4WFNBOUlIWWdLaUJKSUNzZ2VDQXFJRmtnS3lCNUlDb2djU0FySUdJZ0tpQkxMQ0J5V3pFMVhTQTlJSFlnS2lCTklDc2dlQ0FxSUNRZ0t5QjVJQ29nU0NBcklHSWdLaUJFTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGxUWTJGc1lYSW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RGc3dYU0FxUFNCbExDQjBXelJkSUNvOUlHVXNJSFJiT0YwZ0tqMGdaU3dnZEZzeE1sMGdLajBnWlN3Z2RGc3hYU0FxUFNCbExDQjBXelZkSUNvOUlHVXNJSFJiT1YwZ0tqMGdaU3dnZEZzeE0xMGdLajBnWlN3Z2RGc3lYU0FxUFNCbExDQjBXelpkSUNvOUlHVXNJSFJiTVRCZElDbzlJR1VzSUhSYk1UUmRJQ285SUdVc0lIUmJNMTBnS2owZ1pTd2dkRnMzWFNBcVBTQmxMQ0IwV3pFeFhTQXFQU0JsTENCMFd6RTFYU0FxUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHVjBaWEp0YVc1aGJuUW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxtVnNaVzFsYm5SekxDQjBJRDBnWlZzd1hTd2diaUE5SUdWYk5GMHNJR2tnUFNCbFd6aGRMQ0J5SUQwZ1pWc3hNbDBzSUdFZ1BTQmxXekZkTENCdklEMGdaVnMxWFN3Z1l5QTlJR1ZiT1Ywc0lHd2dQU0JsV3pFelhTd2dhQ0E5SUdWYk1sMHNJSFVnUFNCbFd6WmRMQ0JrSUQwZ1pWc3hNRjBzSUdZZ1BTQmxXekUwWFN3Z2JTQTlJR1ZiTTEwc0lGOGdQU0JsV3pkZExDQm5JRDBnWlZzeE1WMHNJSEFnUFNCbFd6RTFYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiU0FxSUNncmNpQXFJR01nS2lCMUlDMGdhU0FxSUd3Z0tpQjFJQzBnY2lBcUlHOGdLaUJrSUNzZ2JpQXFJR3dnS2lCa0lDc2dhU0FxSUc4Z0tpQm1JQzBnYmlBcUlHTWdLaUJtS1NBcklGOGdLaUFvSzNRZ0tpQmpJQ29nWmlBdElIUWdLaUJzSUNvZ1pDQXJJSElnS2lCaElDb2daQ0F0SUdrZ0tpQmhJQ29nWmlBcklHa2dLaUJzSUNvZ2FDQXRJSElnS2lCaklDb2dhQ2tnS3lCbklDb2dLQ3QwSUNvZ2JDQXFJSFVnTFNCMElDb2dieUFxSUdZZ0xTQnlJQ29nWVNBcUlIVWdLeUJ1SUNvZ1lTQXFJR1lnS3lCeUlDb2dieUFxSUdnZ0xTQnVJQ29nYkNBcUlHZ3BJQ3NnY0NBcUlDZ3RhU0FxSUc4Z0tpQm9JQzBnZENBcUlHTWdLaUIxSUNzZ2RDQXFJRzhnS2lCa0lDc2dhU0FxSUdFZ0tpQjFJQzBnYmlBcUlHRWdLaUJrSUNzZ2JpQXFJR01nS2lCb0tUc0tJQ0FnSUgwS0lDQWdJSFJ5WVc1emNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVaV3hsYldWdWRITXNJSFE3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFFnUFNCbFd6RmRMQ0JsV3pGZElEMGdaVnMwWFN3Z1pWczBYU0E5SUhRc0lIUWdQU0JsV3pKZExDQmxXekpkSUQwZ1pWczRYU3dnWlZzNFhTQTlJSFFzSUhRZ1BTQmxXelpkTENCbFd6WmRJRDBnWlZzNVhTd2daVnM1WFNBOUlIUXNJSFFnUFNCbFd6TmRMQ0JsV3pOZElEMGdaVnN4TWwwc0lHVmJNVEpkSUQwZ2RDd2dkQ0E5SUdWYk4xMHNJR1ZiTjEwZ1BTQmxXekV6WFN3Z1pWc3hNMTBnUFNCMExDQjBJRDBnWlZzeE1WMHNJR1ZiTVRGZElEMGdaVnN4TkYwc0lHVmJNVFJkSUQwZ2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRkJ2YzJsMGFXOXVLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWFYTldaV04wYjNJeklEOGdLR2xiTVRKZElEMGdaUzU0TENCcFd6RXpYU0E5SUdVdWVTd2dhVnN4TkYwZ1BTQmxMbm9wSURvZ0tHbGJNVEpkSUQwZ1pTd2dhVnN4TTEwZ1BTQjBMQ0JwV3pFMFhTQTlJRzRwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYVc1MlpYSjBLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2dkQ0E5SUdWYk1GMHNJRzRnUFNCbFd6RmRMQ0JwSUQwZ1pWc3lYU3dnY2lBOUlHVmJNMTBzSUdFZ1BTQmxXelJkTENCdklEMGdaVnMxWFN3Z1l5QTlJR1ZiTmwwc0lHd2dQU0JsV3pkZExDQm9JRDBnWlZzNFhTd2dkU0E5SUdWYk9WMHNJR1FnUFNCbFd6RXdYU3dnWmlBOUlHVmJNVEZkTENCdElEMGdaVnN4TWwwc0lGOGdQU0JsV3pFelhTd2daeUE5SUdWYk1UUmRMQ0J3SUQwZ1pWc3hOVjBzSUhZZ1BTQjFJQ29nWnlBcUlHd2dMU0JmSUNvZ1pDQXFJR3dnS3lCZklDb2dZeUFxSUdZZ0xTQnZJQ29nWnlBcUlHWWdMU0IxSUNvZ1l5QXFJSEFnS3lCdklDb2daQ0FxSUhBc0lIZ2dQU0J0SUNvZ1pDQXFJR3dnTFNCb0lDb2daeUFxSUd3Z0xTQnRJQ29nWXlBcUlHWWdLeUJoSUNvZ1p5QXFJR1lnS3lCb0lDb2dZeUFxSUhBZ0xTQmhJQ29nWkNBcUlIQXNJSGtnUFNCb0lDb2dYeUFxSUd3Z0xTQnRJQ29nZFNBcUlHd2dLeUJ0SUNvZ2J5QXFJR1lnTFNCaElDb2dYeUFxSUdZZ0xTQm9JQ29nYnlBcUlIQWdLeUJoSUNvZ2RTQXFJSEFzSUdJZ1BTQnRJQ29nZFNBcUlHTWdMU0JvSUNvZ1h5QXFJR01nTFNCdElDb2dieUFxSUdRZ0t5QmhJQ29nWHlBcUlHUWdLeUJvSUNvZ2J5QXFJR2NnTFNCaElDb2dkU0FxSUdjc0lIY2dQU0IwSUNvZ2RpQXJJRzRnS2lCNElDc2dhU0FxSUhrZ0t5QnlJQ29nWWpzS0lDQWdJQ0FnSUNCcFppQW9keUE5UFQwZ01Da2djbVYwZFhKdUlIUm9hWE11YzJWMEtEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXBPd29nSUNBZ0lDQWdJR3hsZENCU0lEMGdNU0F2SUhjN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYk1GMGdQU0IySUNvZ1Vpd2daVnN4WFNBOUlDaGZJQ29nWkNBcUlISWdMU0IxSUNvZ1p5QXFJSElnTFNCZklDb2dhU0FxSUdZZ0t5QnVJQ29nWnlBcUlHWWdLeUIxSUNvZ2FTQXFJSEFnTFNCdUlDb2daQ0FxSUhBcElDb2dVaXdnWlZzeVhTQTlJQ2h2SUNvZ1p5QXFJSElnTFNCZklDb2dZeUFxSUhJZ0t5QmZJQ29nYVNBcUlHd2dMU0J1SUNvZ1p5QXFJR3dnTFNCdklDb2dhU0FxSUhBZ0t5QnVJQ29nWXlBcUlIQXBJQ29nVWl3Z1pWc3pYU0E5SUNoMUlDb2dZeUFxSUhJZ0xTQnZJQ29nWkNBcUlISWdMU0IxSUNvZ2FTQXFJR3dnS3lCdUlDb2daQ0FxSUd3Z0t5QnZJQ29nYVNBcUlHWWdMU0J1SUNvZ1l5QXFJR1lwSUNvZ1Vpd2daVnMwWFNBOUlIZ2dLaUJTTENCbFd6VmRJRDBnS0dnZ0tpQm5JQ29nY2lBdElHMGdLaUJrSUNvZ2NpQXJJRzBnS2lCcElDb2daaUF0SUhRZ0tpQm5JQ29nWmlBdElHZ2dLaUJwSUNvZ2NDQXJJSFFnS2lCa0lDb2djQ2tnS2lCU0xDQmxXelpkSUQwZ0tHMGdLaUJqSUNvZ2NpQXRJR0VnS2lCbklDb2djaUF0SUcwZ0tpQnBJQ29nYkNBcklIUWdLaUJuSUNvZ2JDQXJJR0VnS2lCcElDb2djQ0F0SUhRZ0tpQmpJQ29nY0NrZ0tpQlNMQ0JsV3pkZElEMGdLR0VnS2lCa0lDb2djaUF0SUdnZ0tpQmpJQ29nY2lBcklHZ2dLaUJwSUNvZ2JDQXRJSFFnS2lCa0lDb2diQ0F0SUdFZ0tpQnBJQ29nWmlBcklIUWdLaUJqSUNvZ1ppa2dLaUJTTENCbFd6aGRJRDBnZVNBcUlGSXNJR1ZiT1YwZ1BTQW9iU0FxSUhVZ0tpQnlJQzBnYUNBcUlGOGdLaUJ5SUMwZ2JTQXFJRzRnS2lCbUlDc2dkQ0FxSUY4Z0tpQm1JQ3NnYUNBcUlHNGdLaUJ3SUMwZ2RDQXFJSFVnS2lCd0tTQXFJRklzSUdWYk1UQmRJRDBnS0dFZ0tpQmZJQ29nY2lBdElHMGdLaUJ2SUNvZ2NpQXJJRzBnS2lCdUlDb2diQ0F0SUhRZ0tpQmZJQ29nYkNBdElHRWdLaUJ1SUNvZ2NDQXJJSFFnS2lCdklDb2djQ2tnS2lCU0xDQmxXekV4WFNBOUlDaG9JQ29nYnlBcUlISWdMU0JoSUNvZ2RTQXFJSElnTFNCb0lDb2diaUFxSUd3Z0t5QjBJQ29nZFNBcUlHd2dLeUJoSUNvZ2JpQXFJR1lnTFNCMElDb2dieUFxSUdZcElDb2dVaXdnWlZzeE1sMGdQU0JpSUNvZ1Vpd2daVnN4TTEwZ1BTQW9hQ0FxSUY4Z0tpQnBJQzBnYlNBcUlIVWdLaUJwSUNzZ2JTQXFJRzRnS2lCa0lDMGdkQ0FxSUY4Z0tpQmtJQzBnYUNBcUlHNGdLaUJuSUNzZ2RDQXFJSFVnS2lCbktTQXFJRklzSUdWYk1UUmRJRDBnS0cwZ0tpQnZJQ29nYVNBdElHRWdLaUJmSUNvZ2FTQXRJRzBnS2lCdUlDb2dZeUFySUhRZ0tpQmZJQ29nWXlBcklHRWdLaUJ1SUNvZ1p5QXRJSFFnS2lCdklDb2daeWtnS2lCU0xDQmxXekUxWFNBOUlDaGhJQ29nZFNBcUlHa2dMU0JvSUNvZ2J5QXFJR2tnS3lCb0lDb2diaUFxSUdNZ0xTQjBJQ29nZFNBcUlHTWdMU0JoSUNvZ2JpQXFJR1FnS3lCMElDb2dieUFxSUdRcElDb2dVaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5qWVd4bEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lHNGdQU0JsTG5nc0lHa2dQU0JsTG5rc0lISWdQU0JsTG5vN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSYk1GMGdLajBnYml3Z2RGczBYU0FxUFNCcExDQjBXemhkSUNvOUlISXNJSFJiTVYwZ0tqMGdiaXdnZEZzMVhTQXFQU0JwTENCMFd6bGRJQ285SUhJc0lIUmJNbDBnS2owZ2Jpd2dkRnMyWFNBcVBTQnBMQ0IwV3pFd1hTQXFQU0J5TENCMFd6TmRJQ285SUc0c0lIUmJOMTBnS2owZ2FTd2dkRnN4TVYwZ0tqMGdjaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEUxaGVGTmpZV3hsVDI1QmVHbHpLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2dkQ0E5SUdWYk1GMGdLaUJsV3pCZElDc2daVnN4WFNBcUlHVmJNVjBnS3lCbFd6SmRJQ29nWlZzeVhTd2diaUE5SUdWYk5GMGdLaUJsV3pSZElDc2daVnMxWFNBcUlHVmJOVjBnS3lCbFd6WmRJQ29nWlZzMlhTd2dhU0E5SUdWYk9GMGdLaUJsV3poZElDc2daVnM1WFNBcUlHVmJPVjBnS3lCbFd6RXdYU0FxSUdWYk1UQmRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5OeGNuUW9UV0YwYUM1dFlYZ29kQ3dnYml3Z2FTa3BPd29nSUNBZ2ZRb2dJQ0FnYldGclpWUnlZVzV6YkdGMGFXOXVLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVwYzFabFkzUnZjak1nUHlCMGFHbHpMbk5sZENneExDQXdMQ0F3TENCbExuZ3NJREFzSURFc0lEQXNJR1V1ZVN3Z01Dd2dNQ3dnTVN3Z1pTNTZMQ0F3TENBd0xDQXdMQ0F4S1NBNklIUm9hWE11YzJWMEtERXNJREFzSURBc0lHVXNJREFzSURFc0lEQXNJSFFzSURBc0lEQXNJREVzSUc0c0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlZKdmRHRjBhVzl1V0NobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQk5ZWFJvTG1OdmN5aGxLU3dnYmlBOUlFMWhkR2d1YzJsdUtHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDZ3hMQ0F3TENBd0xDQXdMQ0F3TENCMExDQXRiaXdnTUN3Z01Dd2diaXdnZEN3Z01Dd2dNQ3dnTUN3Z01Dd2dNU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVd0bFVtOTBZWFJwYjI1WktHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRTFoZEdndVkyOXpLR1VwTENCdUlEMGdUV0YwYUM1emFXNG9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLSFFzSURBc0lHNHNJREFzSURBc0lERXNJREFzSURBc0lDMXVMQ0F3TENCMExDQXdMQ0F3TENBd0xDQXdMQ0F4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVlNiM1JoZEdsdmJsb29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVFdGMGFDNWpiM01vWlNrc0lHNGdQU0JOWVhSb0xuTnBiaWhsS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFFvZEN3Z0xXNHNJREFzSURBc0lHNHNJSFFzSURBc0lEQXNJREFzSURBc0lERXNJREFzSURBc0lEQXNJREFzSURFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JXRnJaVkp2ZEdGMGFXOXVRWGhwY3lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0JOWVhSb0xtTnZjeWgwS1N3Z2FTQTlJRTFoZEdndWMybHVLSFFwTENCeUlEMGdNU0F0SUc0c0lHRWdQU0JsTG5nc0lHOGdQU0JsTG5rc0lHTWdQU0JsTG5vc0lHd2dQU0J5SUNvZ1lTd2dhQ0E5SUhJZ0tpQnZPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDaHNJQ29nWVNBcklHNHNJR3dnS2lCdklDMGdhU0FxSUdNc0lHd2dLaUJqSUNzZ2FTQXFJRzhzSURBc0lHd2dLaUJ2SUNzZ2FTQXFJR01zSUdnZ0tpQnZJQ3NnYml3Z2FDQXFJR01nTFNCcElDb2dZU3dnTUN3Z2JDQXFJR01nTFNCcElDb2dieXdnYUNBcUlHTWdLeUJwSUNvZ1lTd2djaUFxSUdNZ0tpQmpJQ3NnYml3Z01Dd2dNQ3dnTUN3Z01Dd2dNU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVd0bFUyTmhiR1VvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkQ2hsTENBd0xDQXdMQ0F3TENBd0xDQjBMQ0F3TENBd0xDQXdMQ0F3TENCdUxDQXdMQ0F3TENBd0xDQXdMQ0F4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVlRhR1ZoY2lobExDQjBMQ0J1TENCcExDQnlMQ0JoS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0RFc0lHNHNJSElzSURBc0lHVXNJREVzSUdFc0lEQXNJSFFzSUdrc0lERXNJREFzSURBc0lEQXNJREFzSURFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXRjRzl6WlNobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0J5SUQwZ2RDNWZlQ3dnWVNBOUlIUXVYM2tzSUc4Z1BTQjBMbDk2TENCaklEMGdkQzVmZHl3Z2JDQTlJSElnS3lCeUxDQm9JRDBnWVNBcklHRXNJSFVnUFNCdklDc2dieXdnWkNBOUlISWdLaUJzTENCbUlEMGdjaUFxSUdnc0lHMGdQU0J5SUNvZ2RTd2dYeUE5SUdFZ0tpQm9MQ0JuSUQwZ1lTQXFJSFVzSUhBZ1BTQnZJQ29nZFN3Z2RpQTlJR01nS2lCc0xDQjRJRDBnWXlBcUlHZ3NJSGtnUFNCaklDb2dkU3dnWWlBOUlHNHVlQ3dnZHlBOUlHNHVlU3dnVWlBOUlHNHVlanNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVnN3WFNBOUlDZ3hJQzBnS0Y4Z0t5QndLU2tnS2lCaUxDQnBXekZkSUQwZ0tHWWdLeUI1S1NBcUlHSXNJR2xiTWwwZ1BTQW9iU0F0SUhncElDb2dZaXdnYVZzelhTQTlJREFzSUdsYk5GMGdQU0FvWmlBdElIa3BJQ29nZHl3Z2FWczFYU0E5SUNneElDMGdLR1FnS3lCd0tTa2dLaUIzTENCcFd6WmRJRDBnS0djZ0t5QjJLU0FxSUhjc0lHbGJOMTBnUFNBd0xDQnBXemhkSUQwZ0tHMGdLeUI0S1NBcUlGSXNJR2xiT1YwZ1BTQW9aeUF0SUhZcElDb2dVaXdnYVZzeE1GMGdQU0FvTVNBdElDaGtJQ3NnWHlrcElDb2dVaXdnYVZzeE1WMGdQU0F3TENCcFd6RXlYU0E5SUdVdWVDd2dhVnN4TTEwZ1BTQmxMbmtzSUdsYk1UUmRJRDBnWlM1NkxDQnBXekUxWFNBOUlERXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmtaV052YlhCdmMyVW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwY3k1bGJHVnRaVzUwY3l3Z2NpQTlJRTFwTG5ObGRDaHBXekJkTENCcFd6RmRMQ0JwV3pKZEtTNXNaVzVuZEdnb0tTd2dZU0E5SUUxcExuTmxkQ2hwV3pSZExDQnBXelZkTENCcFd6WmRLUzVzWlc1bmRHZ29LU3dnYnlBOUlFMXBMbk5sZENocFd6aGRMQ0JwV3psZExDQnBXekV3WFNrdWJHVnVaM1JvS0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVrWlhSbGNtMXBibUZ1ZENncElEd2dNQ0FtSmlBb2NpQTlJQzF5S1N3Z1pTNTRJRDBnYVZzeE1sMHNJR1V1ZVNBOUlHbGJNVE5kTENCbExub2dQU0JwV3pFMFhTd2dKSFF1WTI5d2VTaDBhR2x6S1RzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SURFZ0x5QnlMQ0JvSUQwZ01TQXZJR0VzSUhVZ1BTQXhJQzhnYnpzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnSkhRdVpXeGxiV1Z1ZEhOYk1GMGdLajBnYkN3Z0pIUXVaV3hsYldWdWRITmJNVjBnS2owZ2JDd2dKSFF1Wld4bGJXVnVkSE5iTWwwZ0tqMGdiQ3dnSkhRdVpXeGxiV1Z1ZEhOYk5GMGdLajBnYUN3Z0pIUXVaV3hsYldWdWRITmJOVjBnS2owZ2FDd2dKSFF1Wld4bGJXVnVkSE5iTmwwZ0tqMGdhQ3dnSkhRdVpXeGxiV1Z1ZEhOYk9GMGdLajBnZFN3Z0pIUXVaV3hsYldWdWRITmJPVjBnS2owZ2RTd2dKSFF1Wld4bGJXVnVkSE5iTVRCZElDbzlJSFVzSUhRdWMyVjBSbkp2YlZKdmRHRjBhVzl1VFdGMGNtbDRLQ1IwS1N3Z2JpNTRJRDBnY2l3Z2JpNTVJRDBnWVN3Z2JpNTZJRDBnYnl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVlFaWEp6Y0dWamRHbDJaU2hsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2SUQwZ2RtNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lHd2dQU0F5SUNvZ2NpQXZJQ2gwSUMwZ1pTa3NJR2dnUFNBeUlDb2djaUF2SUNodUlDMGdhU2tzSUhVZ1BTQW9kQ0FySUdVcElDOGdLSFFnTFNCbEtTd2daQ0E5SUNodUlDc2dhU2tnTHlBb2JpQXRJR2twTENCbUxDQnRPd29nSUNBZ0lDQWdJR2xtSUNodklEMDlQU0IyYmlrZ1ppQTlJQzBvWVNBcklISXBJQzhnS0dFZ0xTQnlLU3dnYlNBOUlDMHlJQ29nWVNBcUlISWdMeUFvWVNBdElISXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRzhnUFQwOUlFZHlLU0JtSUQwZ0xXRWdMeUFvWVNBdElISXBMQ0J0SUQwZ0xXRWdLaUJ5SUM4Z0tHRWdMU0J5S1RzS0lDQWdJQ0FnSUNCbGJITmxJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVRXRjBjbWw0TkM1dFlXdGxVR1Z5YzNCbFkzUnBkbVVvS1RvZ1NXNTJZV3hwWkNCamIyOXlaR2x1WVhSbElITjVjM1JsYlRvZ0lpQXJJRzhwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJqV3pCZElEMGdiQ3dnWTFzMFhTQTlJREFzSUdOYk9GMGdQU0IxTENCald6RXlYU0E5SURBc0lHTmJNVjBnUFNBd0xDQmpXelZkSUQwZ2FDd2dZMXM1WFNBOUlHUXNJR05iTVROZElEMGdNQ3dnWTFzeVhTQTlJREFzSUdOYk5sMGdQU0F3TENCald6RXdYU0E5SUdZc0lHTmJNVFJkSUQwZ2JTd2dZMXN6WFNBOUlEQXNJR05iTjEwZ1BTQXdMQ0JqV3pFeFhTQTlJQzB4TENCald6RTFYU0E5SURBc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdFlXdGxUM0owYUc5bmNtRndhR2xqS0dVc0lIUXNJRzRzSUdrc0lISXNJR0VzSUc4Z1BTQjJiaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2diQ0E5SURFZ0x5QW9kQ0F0SUdVcExDQm9JRDBnTVNBdklDaHVJQzBnYVNrc0lIVWdQU0F4SUM4Z0tHRWdMU0J5S1N3Z1pDQTlJQ2gwSUNzZ1pTa2dLaUJzTENCbUlEMGdLRzRnS3lCcEtTQXFJR2dzSUcwc0lGODdDaUFnSUNBZ0lDQWdhV1lnS0c4Z1BUMDlJSFp1S1NCdElEMGdLR0VnS3lCeUtTQXFJSFVzSUY4Z1BTQXRNaUFxSUhVN0NpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2J5QTlQVDBnUjNJcElHMGdQU0J5SUNvZ2RTd2dYeUE5SUMweElDb2dkVHNLSUNBZ0lDQWdJQ0JsYkhObElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaVZFaFNSVVV1VFdGMGNtbDROQzV0WVd0bFQzSjBhRzluY21Gd2FHbGpLQ2s2SUVsdWRtRnNhV1FnWTI5dmNtUnBibUYwWlNCemVYTjBaVzA2SUNJZ0t5QnZLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMXN3WFNBOUlESWdLaUJzTENCald6UmRJRDBnTUN3Z1kxczRYU0E5SURBc0lHTmJNVEpkSUQwZ0xXUXNJR05iTVYwZ1BTQXdMQ0JqV3pWZElEMGdNaUFxSUdnc0lHTmJPVjBnUFNBd0xDQmpXekV6WFNBOUlDMW1MQ0JqV3pKZElEMGdNQ3dnWTFzMlhTQTlJREFzSUdOYk1UQmRJRDBnWHl3Z1kxc3hORjBnUFNBdGJTd2dZMXN6WFNBOUlEQXNJR05iTjEwZ1BTQXdMQ0JqV3pFeFhTQTlJREFzSUdOYk1UVmRJRDBnTVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0J1SUQwZ1pTNWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F3T3lCcElEd2dNVFk3SUdrckt5bHBaaUFvZEZ0cFhTQWhQVDBnYmx0cFhTa2djbVYwZFhKdUlDRXhPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQWhNRHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUJjbkpoZVNobExDQjBJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREE3SUc0Z1BDQXhOanNnYmlzcktYUm9hWE11Wld4bGJXVnVkSE5iYmwwZ1BTQmxXMjRnS3lCMFhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlFYSnlZWGtvWlNBOUlGdGRMQ0IwSUQwZ01Da2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1bGJHVnRaVzUwY3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlZ0MFhTQTlJRzViTUYwc0lHVmJkQ0FySURGZElEMGdibHN4WFN3Z1pWdDBJQ3NnTWwwZ1BTQnVXekpkTENCbFczUWdLeUF6WFNBOUlHNWJNMTBzSUdWYmRDQXJJRFJkSUQwZ2JsczBYU3dnWlZ0MElDc2dOVjBnUFNCdVd6VmRMQ0JsVzNRZ0t5QTJYU0E5SUc1Yk5sMHNJR1ZiZENBcklEZGRJRDBnYmxzM1hTd2daVnQwSUNzZ09GMGdQU0J1V3poZExDQmxXM1FnS3lBNVhTQTlJRzViT1Ywc0lHVmJkQ0FySURFd1hTQTlJRzViTVRCZExDQmxXM1FnS3lBeE1WMGdQU0J1V3pFeFhTd2daVnQwSUNzZ01USmRJRDBnYmxzeE1sMHNJR1ZiZENBcklERXpYU0E5SUc1Yk1UTmRMQ0JsVzNRZ0t5QXhORjBnUFNCdVd6RTBYU3dnWlZ0MElDc2dNVFZkSUQwZ2Jsc3hOVjBzSUdVN0NpQWdJQ0I5Q24wc0lFMXBJRDBnYm1WM0lFRXNJQ1IwSUQwZ2JtVjNJSHBsTENCaGNDQTlJRzVsZHlCQktEQXNJREFzSURBcExDQnZjQ0E5SUc1bGR5QkJLREVzSURFc0lERXBMQ0JTYmlBOUlHNWxkeUJCTENCYWN5QTlJRzVsZHlCQkxDQjZkQ0E5SUc1bGR5QkJMQ0JZYkNBOUlHNWxkeUI2WlN3Z2NXd2dQU0J1WlhjZ1ZYUXNJRmx5SUQwZ1kyeGhjM01nY3pFZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREFzSUhRZ1BTQXdMQ0J1SUQwZ01Dd2dhU0E5SUhNeExrUkZSa0ZWVEZSZlQxSkVSVklwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVhWE5GZFd4bGNpQTlJQ0V3TENCMGFHbHpMbDk0SUQwZ1pTd2dkR2hwY3k1ZmVTQTlJSFFzSUhSb2FYTXVYM29nUFNCdUxDQjBhR2x6TGw5dmNtUmxjaUE5SUdrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFFnZUNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZURzS0lDQWdJSDBLSUNBZ0lITmxkQ0I0S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5NElEMGdaU3dnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BPd29nSUNBZ2ZRb2dJQ0FnWjJWMElIa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzazdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZlU0E5SUdVc0lIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1RzS0lDQWdJSDBLSUNBZ0lHZGxkQ0I2S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDk2T3dvZ0lDQWdmUW9nSUNBZ2MyVjBJSG9vWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WDNvZ1BTQmxMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDazdDaUFnSUNCOUNpQWdJQ0JuWlhRZ2IzSmtaWElvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjl5WkdWeU93b2dJQ0FnZlFvZ0lDQWdjMlYwSUc5eVpHVnlLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDl2Y21SbGNpQTlJR1VzSUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc29LVHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwTENCdUxDQnBJRDBnZEdocGN5NWZiM0prWlhJcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZUNBOUlHVXNJSFJvYVhNdVgza2dQU0IwTENCMGFHbHpMbDk2SUQwZ2Jpd2dkR2hwY3k1ZmIzSmtaWElnUFNCcExDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb2RHaHBjeTVmZUN3Z2RHaHBjeTVmZVN3Z2RHaHBjeTVmZWl3Z2RHaHBjeTVmYjNKa1pYSXBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZ2dQU0JsTGw5NExDQjBhR2x6TGw5NUlEMGdaUzVmZVN3Z2RHaHBjeTVmZWlBOUlHVXVYM29zSUhSb2FYTXVYMjl5WkdWeUlEMGdaUzVmYjNKa1pYSXNJSFJvYVhNdVgyOXVRMmhoYm1kbFEyRnNiR0poWTJzb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxU2IzUmhkR2x2YmsxaGRISnBlQ2hsTENCMElEMGdkR2hwY3k1ZmIzSmtaWElzSUc0Z1BTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnWlM1bGJHVnRaVzUwY3l3Z2NpQTlJR2xiTUYwc0lHRWdQU0JwV3pSZExDQnZJRDBnYVZzNFhTd2dZeUE5SUdsYk1WMHNJR3dnUFNCcFd6VmRMQ0JvSUQwZ2FWczVYU3dnZFNBOUlHbGJNbDBzSUdRZ1BTQnBXelpkTENCbUlEMGdhVnN4TUYwN0NpQWdJQ0FnSUNBZ2MzZHBkR05vS0hRcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSllXVm9pT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZlU0E5SUUxaGRHZ3VZWE5wYmloamRDaHZMQ0F0TVN3Z01Ta3BMQ0JOWVhSb0xtRmljeWh2S1NBOElDNDVPVGs1T1RrNUlEOGdLSFJvYVhNdVgzZ2dQU0JOWVhSb0xtRjBZVzR5S0Mxb0xDQm1LU3dnZEdocGN5NWZlaUE5SUUxaGRHZ3VZWFJoYmpJb0xXRXNJSElwS1NBNklDaDBhR2x6TGw5NElEMGdUV0YwYUM1aGRHRnVNaWhrTENCc0tTd2dkR2hwY3k1ZmVpQTlJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGxZV2lJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDk0SUQwZ1RXRjBhQzVoYzJsdUtDMWpkQ2hvTENBdE1Td2dNU2twTENCTllYUm9MbUZpY3lob0tTQThJQzQ1T1RrNU9UazVJRDhnS0hSb2FYTXVYM2tnUFNCTllYUm9MbUYwWVc0eUtHOHNJR1lwTENCMGFHbHpMbDk2SUQwZ1RXRjBhQzVoZEdGdU1paGpMQ0JzS1NrZ09pQW9kR2hwY3k1ZmVTQTlJRTFoZEdndVlYUmhiaklvTFhVc0lISXBMQ0IwYUdsekxsOTZJRDBnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpV2xoWklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNnZ1BTQk5ZWFJvTG1GemFXNG9ZM1FvWkN3Z0xURXNJREVwS1N3Z1RXRjBhQzVoWW5Nb1pDa2dQQ0F1T1RrNU9UazVPU0EvSUNoMGFHbHpMbDk1SUQwZ1RXRjBhQzVoZEdGdU1pZ3RkU3dnWmlrc0lIUm9hWE11WDNvZ1BTQk5ZWFJvTG1GMFlXNHlLQzFoTENCc0tTa2dPaUFvZEdocGN5NWZlU0E5SURBc0lIUm9hWE11WDNvZ1BTQk5ZWFJvTG1GMFlXNHlLR01zSUhJcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKYVdWZ2lPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmVTQTlJRTFoZEdndVlYTnBiaWd0WTNRb2RTd2dMVEVzSURFcEtTd2dUV0YwYUM1aFluTW9kU2tnUENBdU9UazVPVGs1T1NBL0lDaDBhR2x6TGw5NElEMGdUV0YwYUM1aGRHRnVNaWhrTENCbUtTd2dkR2hwY3k1ZmVpQTlJRTFoZEdndVlYUmhiaklvWXl3Z2Npa3BJRG9nS0hSb2FYTXVYM2dnUFNBd0xDQjBhR2x6TGw5NklEMGdUV0YwYUM1aGRHRnVNaWd0WVN3Z2JDa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsbGFXQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTZJRDBnVFdGMGFDNWhjMmx1S0dOMEtHTXNJQzB4TENBeEtTa3NJRTFoZEdndVlXSnpLR01wSUR3Z0xqazVPVGs1T1RrZ1B5QW9kR2hwY3k1ZmVDQTlJRTFoZEdndVlYUmhiaklvTFdnc0lHd3BMQ0IwYUdsekxsOTVJRDBnVFdGMGFDNWhkR0Z1TWlndGRTd2djaWtwSURvZ0tIUm9hWE11WDNnZ1BTQXdMQ0IwYUdsekxsOTVJRDBnVFdGMGFDNWhkR0Z1TWlodkxDQm1LU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlXRnBaSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM29nUFNCTllYUm9MbUZ6YVc0b0xXTjBLR0VzSUMweExDQXhLU2tzSUUxaGRHZ3VZV0p6S0dFcElEd2dMams1T1RrNU9Ua2dQeUFvZEdocGN5NWZlQ0E5SUUxaGRHZ3VZWFJoYmpJb1pDd2diQ2tzSUhSb2FYTXVYM2tnUFNCTllYUm9MbUYwWVc0eUtHOHNJSElwS1NBNklDaDBhR2x6TGw5NElEMGdUV0YwYUM1aGRHRnVNaWd0YUN3Z1ppa3NJSFJvYVhNdVgza2dQU0F3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1RmRXeGxjam9nTG5ObGRFWnliMjFTYjNSaGRHbHZiazFoZEhKcGVDZ3BJR1Z1WTI5MWJuUmxjbVZrSUdGdUlIVnVhMjV2ZDI0Z2IzSmtaWEk2SUNJZ0t5QjBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyOXlaR1Z5SUQwZ2RDd2diaUE5UFQwZ0lUQWdKaVlnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJWRjFZWFJsY201cGIyNG9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlliQzV0WVd0bFVtOTBZWFJwYjI1R2NtOXRVWFZoZEdWeWJtbHZiaWhsS1N3Z2RHaHBjeTV6WlhSR2NtOXRVbTkwWVhScGIyNU5ZWFJ5YVhnb1dHd3NJSFFzSUc0cE93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJWWmxZM1J2Y2pNb1pTd2dkQ0E5SUhSb2FYTXVYMjl5WkdWeUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtHVXVlQ3dnWlM1NUxDQmxMbm9zSUhRcE93b2dJQ0FnZlFvZ0lDQWdjbVZ2Y21SbGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSEZzTG5ObGRFWnliMjFGZFd4bGNpaDBhR2x6S1N3Z2RHaHBjeTV6WlhSR2NtOXRVWFZoZEdWeWJtbHZiaWh4YkN3Z1pTazdDaUFnSUNCOUNpQWdJQ0JsY1hWaGJITW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTGw5NElEMDlQU0IwYUdsekxsOTRJQ1ltSUdVdVgza2dQVDA5SUhSb2FYTXVYM2tnSmlZZ1pTNWZlaUE5UFQwZ2RHaHBjeTVmZWlBbUppQmxMbDl2Y21SbGNpQTlQVDBnZEdocGN5NWZiM0prWlhJN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0UVhKeVlYa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTRJRDBnWlZzd1hTd2dkR2hwY3k1ZmVTQTlJR1ZiTVYwc0lIUm9hWE11WDNvZ1BTQmxXekpkTENCbFd6TmRJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11WDI5eVpHVnlJRDBnWlZzelhTa3NJSFJvYVhNdVgyOXVRMmhoYm1kbFEyRnNiR0poWTJzb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZRWEp5WVhrb1pTQTlJRnRkTENCMElEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsVzNSZElEMGdkR2hwY3k1ZmVDd2daVnQwSUNzZ01WMGdQU0IwYUdsekxsOTVMQ0JsVzNRZ0t5QXlYU0E5SUhSb2FYTXVYM29zSUdWYmRDQXJJRE5kSUQwZ2RHaHBjeTVmYjNKa1pYSXNJR1U3Q2lBZ0lDQjlDaUFnSUNCZmIyNURhR0Z1WjJVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05ySUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lGOXZia05vWVc1blpVTmhiR3hpWVdOcktDa2dlMzBLSUNBZ0lDcGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BJSHNLSUNBZ0lDQWdJQ0I1YVdWc1pDQjBhR2x6TGw5NExDQjVhV1ZzWkNCMGFHbHpMbDk1TENCNWFXVnNaQ0IwYUdsekxsOTZMQ0I1YVdWc1pDQjBhR2x6TGw5dmNtUmxjanNLSUNBZ0lIMEtmVHNLV1hJdVJFVkdRVlZNVkY5UFVrUkZVaUE5SUNKWVdWb2lPd3AyWVhJZ1VuTWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3Bld29nSUNBZ0lDQWdJSFJvYVhNdWJXRnpheUE5SURFN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YldGemF5QTlJQ2d4SUR3OElHVWdmQ0F3S1NBK1BqNGdNRHNLSUNBZ0lIMEtJQ0FnSUdWdVlXSnNaU2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhOcklIdzlJREVnUER3Z1pTQjhJREE3Q2lBZ0lDQjlDaUFnSUNCbGJtRmliR1ZCYkd3b0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlYTnJJRDBnTFRFN0NpQWdJQ0I5Q2lBZ0lDQjBiMmRuYkdVb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJXRnpheUJlUFNBeElEdzhJR1VnZkNBd093b2dJQ0FnZlFvZ0lDQWdaR2x6WVdKc1pTaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRZWE5ySUNZOUlING9NU0E4UENCbElId2dNQ2s3Q2lBZ0lDQjlDaUFnSUNCa2FYTmhZbXhsUVd4c0tDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJXRnpheUE5SURBN0NpQWdJQ0I5Q2lBZ0lDQjBaWE4wS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0tIUm9hWE11YldGemF5QW1JR1V1YldGemF5a2dJVDA5SURBN0NpQWdJQ0I5Q2lBZ0lDQnBjMFZ1WVdKc1pXUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUFvZEdocGN5NXRZWE5ySUNZZ0tERWdQRHdnWlNCOElEQXBLU0FoUFQwZ01Ec0tJQ0FnSUgwS2ZTd2dZM0FnUFNBd0xDQlpiQ0E5SUc1bGR5QkJMQ0JUYVNBOUlHNWxkeUJWZEN3Z2FHNGdQU0J1WlhjZ2VtVXNJRXB6SUQwZ2JtVjNJRUVzSUdoeklEMGdibVYzSUVFc0lHeHdJRDBnYm1WM0lFRXNJR2h3SUQwZ2JtVjNJRlYwTENCYWJDQTlJRzVsZHlCQktERXNJREFzSURBcExDQktiQ0E5SUc1bGR5QkJLREFzSURFc0lEQXBMQ0FrYkNBOUlHNWxkeUJCS0RBc0lEQXNJREVwTENCMWNDQTlJSHNLSUNBZ0lIUjVjR1U2SUNKaFpHUmxaQ0lLZlN3Z1pIQWdQU0I3Q2lBZ0lDQjBlWEJsT2lBaWNtVnRiM1psWkNJS2ZTd2dTbVVnUFNCamJHRnpjeUJ6TVNCbGVIUmxibVJ6SUhOdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1cGMwOWlhbVZqZERORUlEMGdJVEFzSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBhR2x6TENBaWFXUWlMQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCamNDc3JDaUFnSUNBZ0lDQWdmU2tzSUhSb2FYTXVkWFZwWkNBOUlHdDBLQ2tzSUhSb2FYTXVibUZ0WlNBOUlDSWlMQ0IwYUdsekxuUjVjR1VnUFNBaVQySnFaV04wTTBRaUxDQjBhR2x6TG5CaGNtVnVkQ0E5SUc1MWJHd3NJSFJvYVhNdVkyaHBiR1J5Wlc0Z1BTQmJYU3dnZEdocGN5NTFjQ0E5SUhNeExrUkZSa0ZWVEZSZlZWQXVZMnh2Ym1Vb0tUc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlHNWxkeUJCTENCMElEMGdibVYzSUZseUxDQnVJRDBnYm1WM0lGVjBMQ0JwSUQwZ2JtVjNJRUVvTVN3Z01Td2dNU2s3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnY2lncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYmk1elpYUkdjbTl0UlhWc1pYSW9kQ3dnSVRFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmhLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBMbk5sZEVaeWIyMVJkV0YwWlhKdWFXOXVLRzRzSUhadmFXUWdNQ3dnSVRFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBMbDl2YmtOb1lXNW5aU2h5S1N3Z2JpNWZiMjVEYUdGdVoyVW9ZU2tzSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLSFJvYVhNc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lISnZkR0YwYVc5dU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dkQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J4ZFdGMFpYSnVhVzl1T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2Jnb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUFoTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHa0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdiVzlrWld4V2FXVjNUV0YwY21sNE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJSHBsQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiRTFoZEhKcGVEb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJJWlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU2tzSUhSb2FYTXViV0YwY21sNElEMGdibVYzSUhwbExDQjBhR2x6TG0xaGRISnBlRmR2Y214a0lEMGdibVYzSUhwbExDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNCek1TNUVSVVpCVlV4VVgwMUJWRkpKV0Y5QlZWUlBYMVZRUkVGVVJTd2dkR2hwY3k1dFlYUnlhWGhYYjNKc1pFNWxaV1J6VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11YldGMGNtbDRWMjl5YkdSQmRYUnZWWEJrWVhSbElEMGdjekV1UkVWR1FWVk1WRjlOUVZSU1NWaGZWMDlTVEVSZlFWVlVUMTlWVUVSQlZFVXNJSFJvYVhNdWJHRjVaWEp6SUQwZ2JtVjNJRkp6TENCMGFHbHpMblpwYzJsaWJHVWdQU0FoTUN3Z2RHaHBjeTVqWVhOMFUyaGhaRzkzSUQwZ0lURXNJSFJvYVhNdWNtVmpaV2wyWlZOb1lXUnZkeUE5SUNFeExDQjBhR2x6TG1aeWRYTjBkVzFEZFd4c1pXUWdQU0FoTUN3Z2RHaHBjeTV5Wlc1a1pYSlBjbVJsY2lBOUlEQXNJSFJvYVhNdVlXNXBiV0YwYVc5dWN5QTlJRnRkTENCMGFHbHpMblZ6WlhKRVlYUmhJRDBnZTMwN0NpQWdJQ0I5Q2lBZ0lDQnZia0psWm05eVpWSmxibVJsY2lncElIdDlDaUFnSUNCdmJrRm1kR1Z5VW1WdVpHVnlLQ2tnZTMwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TkNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUNZbUlIUm9hWE11ZFhCa1lYUmxUV0YwY21sNEtDa3NJSFJvYVhNdWJXRjBjbWw0TG5CeVpXMTFiSFJwY0d4NUtHVXBMQ0IwYUdsekxtMWhkSEpwZUM1a1pXTnZiWEJ2YzJVb2RHaHBjeTV3YjNOcGRHbHZiaXdnZEdocGN5NXhkV0YwWlhKdWFXOXVMQ0IwYUdsekxuTmpZV3hsS1RzS0lDQWdJSDBLSUNBZ0lHRndjR3g1VVhWaGRHVnlibWx2YmlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y1hWaGRHVnlibWx2Ymk1d2NtVnRkV3gwYVhCc2VTaGxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZKdmRHRjBhVzl1Um5KdmJVRjRhWE5CYm1kc1pTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV4ZFdGMFpYSnVhVzl1TG5ObGRFWnliMjFCZUdselFXNW5iR1VvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0J6WlhSU2IzUmhkR2x2YmtaeWIyMUZkV3hsY2lobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1eGRXRjBaWEp1YVc5dUxuTmxkRVp5YjIxRmRXeGxjaWhsTENBaE1DazdDaUFnSUNCOUNpQWdJQ0J6WlhSU2IzUmhkR2x2YmtaeWIyMU5ZWFJ5YVhnb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWNYVmhkR1Z5Ym1sdmJpNXpaWFJHY205dFVtOTBZWFJwYjI1TllYUnlhWGdvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJTYjNSaGRHbHZia1p5YjIxUmRXRjBaWEp1YVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuRjFZWFJsY201cGIyNHVZMjl3ZVNobEtUc0tJQ0FnSUgwS0lDQWdJSEp2ZEdGMFpVOXVRWGhwY3lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRk5wTG5ObGRFWnliMjFCZUdselFXNW5iR1VvWlN3Z2RDa3NJSFJvYVhNdWNYVmhkR1Z5Ym1sdmJpNXRkV3gwYVhCc2VTaFRhU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVlBibGR2Y214a1FYaHBjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlGTnBMbk5sZEVaeWIyMUJlR2x6UVc1bmJHVW9aU3dnZENrc0lIUm9hWE11Y1hWaGRHVnlibWx2Ymk1d2NtVnRkV3gwYVhCc2VTaFRhU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVllLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXliM1JoZEdWUGJrRjRhWE1vV213c0lHVXBPd29nSUNBZ2ZRb2dJQ0FnY205MFlYUmxXU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbTkwWVhSbFQyNUJlR2x6S0Vwc0xDQmxLVHNLSUNBZ0lIMEtJQ0FnSUhKdmRHRjBaVm9vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkp2ZEdGMFpVOXVRWGhwY3lna2JDd2daU2s3Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjMnhoZEdWUGJrRjRhWE1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlpiQzVqYjNCNUtHVXBMbUZ3Y0d4NVVYVmhkR1Z5Ym1sdmJpaDBhR2x6TG5GMVlYUmxjbTVwYjI0cExDQjBhR2x6TG5CdmMybDBhVzl1TG1Ga1pDaFpiQzV0ZFd4MGFYQnNlVk5qWVd4aGNpaDBLU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwY21GdWMyeGhkR1ZZS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwY21GdWMyeGhkR1ZQYmtGNGFYTW9XbXdzSUdVcE93b2dJQ0FnZlFvZ0lDQWdkSEpoYm5Oc1lYUmxXU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkSEpoYm5Oc1lYUmxUMjVCZUdsektFcHNMQ0JsS1RzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6YkdGMFpWb29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuUnlZVzV6YkdGMFpVOXVRWGhwY3lna2JDd2daU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyTmhiRlJ2VjI5eWJHUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVndaR0YwWlZkdmNteGtUV0YwY21sNEtDRXdMQ0FoTVNrc0lHVXVZWEJ3YkhsTllYUnlhWGcwS0hSb2FYTXViV0YwY21sNFYyOXliR1FwT3dvZ0lDQWdmUW9nSUNBZ2QyOXliR1JVYjB4dlkyRnNLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTFjR1JoZEdWWGIzSnNaRTFoZEhKcGVDZ2hNQ3dnSVRFcExDQmxMbUZ3Y0d4NVRXRjBjbWw0TkNob2JpNWpiM0I1S0hSb2FYTXViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwS1RzS0lDQWdJSDBLSUNBZ0lHeHZiMnRCZENobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ1pTNXBjMVpsWTNSdmNqTWdQeUJLY3k1amIzQjVLR1VwSURvZ1NuTXVjMlYwS0dVc0lIUXNJRzRwT3dvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NXdZWEpsYm5RN0NpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2doTUN3Z0lURXBMQ0JvY3k1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9kR2hwY3k1dFlYUnlhWGhYYjNKc1pDa3NJSFJvYVhNdWFYTkRZVzFsY21FZ2ZId2dkR2hwY3k1cGMweHBaMmgwSUQ4Z2FHNHViRzl2YTBGMEtHaHpMQ0JLY3l3Z2RHaHBjeTUxY0NrZ09pQm9iaTVzYjI5clFYUW9Tbk1zSUdoekxDQjBhR2x6TG5Wd0tTd2dkR2hwY3k1eGRXRjBaWEp1YVc5dUxuTmxkRVp5YjIxU2IzUmhkR2x2YmsxaGRISnBlQ2hvYmlrc0lHa2dKaVlnS0dodUxtVjRkSEpoWTNSU2IzUmhkR2x2YmlocExtMWhkSEpwZUZkdmNteGtLU3dnVTJrdWMyVjBSbkp2YlZKdmRHRjBhVzl1VFdGMGNtbDRLR2h1S1N3Z2RHaHBjeTV4ZFdGMFpYSnVhVzl1TG5CeVpXMTFiSFJwY0d4NUtGTnBMbWx1ZG1WeWRDZ3BLU2s3Q2lBZ0lDQjlDaUFnSUNCaFpHUW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3T3lCMElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dkQ3NyS1hSb2FYTXVZV1JrS0dGeVozVnRaVzUwYzF0MFhTazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQTlQVDBnZEdocGN5QS9JQ2hqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1UFltcGxZM1F6UkM1aFpHUTZJRzlpYW1WamRDQmpZVzRuZENCaVpTQmhaR1JsWkNCaGN5QmhJR05vYVd4a0lHOW1JR2wwYzJWc1ppNGlMQ0JsS1N3Z2RHaHBjeWtnT2lBb1pTQW1KaUJsTG1selQySnFaV04wTTBRZ1B5QW9aUzV3WVhKbGJuUWdJVDA5SUc1MWJHd2dKaVlnWlM1d1lYSmxiblF1Y21WdGIzWmxLR1VwTENCbExuQmhjbVZ1ZENBOUlIUm9hWE1zSUhSb2FYTXVZMmhwYkdSeVpXNHVjSFZ6YUNobEtTd2daUzVrYVhOd1lYUmphRVYyWlc1MEtIVndLU2tnT2lCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVBZbXBsWTNRelJDNWhaR1E2SUc5aWFtVmpkQ0J1YjNRZ1lXNGdhVzV6ZEdGdVkyVWdiMllnVkVoU1JVVXVUMkpxWldOME0wUXVJaXdnWlNrc0lIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ2NtVnRiM1psS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Ec2diaUE4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUc0ckt5bDBhR2x6TG5KbGJXOTJaU2hoY21kMWJXVnVkSE5iYmwwcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5vYVd4a2NtVnVMbWx1WkdWNFQyWW9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFFnSVQwOUlDMHhJQ1ltSUNobExuQmhjbVZ1ZENBOUlHNTFiR3dzSUhSb2FYTXVZMmhwYkdSeVpXNHVjM0JzYVdObEtIUXNJREVwTENCbExtUnBjM0JoZEdOb1JYWmxiblFvWkhBcEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lISmxiVzkyWlVaeWIyMVFZWEpsYm5Rb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG5CaGNtVnVkRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0FoUFQwZ2JuVnNiQ0FtSmlCbExuSmxiVzkyWlNoMGFHbHpLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zWldGeUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGJXOTJaU2d1TGk1MGFHbHpMbU5vYVd4a2NtVnVLVHNLSUNBZ0lIMEtJQ0FnSUdGMGRHRmphQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkWEJrWVhSbFYyOXliR1JOWVhSeWFYZ29JVEFzSUNFeEtTd2dhRzR1WTI5d2VTaDBhR2x6TG0xaGRISnBlRmR2Y214a0tTNXBiblpsY25Rb0tTd2daUzV3WVhKbGJuUWdJVDA5SUc1MWJHd2dKaVlnS0dVdWNHRnlaVzUwTG5Wd1pHRjBaVmR2Y214a1RXRjBjbWw0S0NFd0xDQWhNU2tzSUdodUxtMTFiSFJwY0d4NUtHVXVjR0Z5Wlc1MExtMWhkSEpwZUZkdmNteGtLU2tzSUdVdVlYQndiSGxOWVhSeWFYZzBLR2h1S1N3Z2RHaHBjeTVoWkdRb1pTa3NJR1V1ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvSVRFc0lDRXdLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEU5aWFtVmpkRUo1U1dRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRFOWlhbVZqZEVKNVVISnZjR1Z5ZEhrb0ltbGtJaXdnWlNrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJQWW1wbFkzUkNlVTVoYldVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRFOWlhbVZqZEVKNVVISnZjR1Z5ZEhrb0ltNWhiV1VpTENCbEtUc0tJQ0FnSUgwS0lDQWdJR2RsZEU5aWFtVmpkRUo1VUhKdmNHVnlkSGtvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpXMlZkSUQwOVBTQjBLU0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RHaHBjeTVqYUdsc1pISmxiaTVzWlc1bmRHZzdJRzRnUENCcE95QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIUm9hWE11WTJocGJHUnlaVzViYmwwdVoyVjBUMkpxWldOMFFubFFjbTl3WlhKMGVTaGxMQ0IwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dFZ0lUMDlJSFp2YVdRZ01Da2djbVYwZFhKdUlHRTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWjJWMFQySnFaV04wYzBKNVVISnZjR1Z5ZEhrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnVzEwN0NpQWdJQ0FnSUNBZ2RHaHBjMXRsWFNBOVBUMGdkQ0FtSmlCdUxuQjFjMmdvZEdocGN5azdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJSFJvYVhNdVkyaHBiR1J5Wlc0dWJHVnVaM1JvT3lCcElEd2djanNnYVNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0IwYUdsekxtTm9hV3hrY21WdVcybGRMbWRsZEU5aWFtVmpkSE5DZVZCeWIzQmxjblI1S0dVc0lIUXBPd29nSUNBZ0lDQWdJQ0FnSUNCaExteGxibWQwYUNBK0lEQWdKaVlnS0c0Z1BTQnVMbU52Ym1OaGRDaGhLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1T3dvZ0lDQWdmUW9nSUNBZ1oyVjBWMjl5YkdSUWIzTnBkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvSVRBc0lDRXhLU3dnWlM1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9kR2hwY3k1dFlYUnlhWGhYYjNKc1pDazdDaUFnSUNCOUNpQWdJQ0JuWlhSWGIzSnNaRkYxWVhSbGNtNXBiMjRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLQ0V3TENBaE1Ta3NJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXVaR1ZqYjIxd2IzTmxLR2h6TENCbExDQnNjQ2tzSUdVN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJYYjNKc1pGTmpZV3hsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2doTUN3Z0lURXBMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtMbVJsWTI5dGNHOXpaU2hvY3l3Z2FIQXNJR1VwTENCbE93b2dJQ0FnZlFvZ0lDQWdaMlYwVjI5eWJHUkVhWEpsWTNScGIyNG9aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFYyOXliR1JOWVhSeWFYZ29JVEFzSUNFeEtUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11YldGMGNtbDRWMjl5YkdRdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWMyVjBLSFJiT0Ywc0lIUmJPVjBzSUhSYk1UQmRLUzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJSDBLSUNBZ0lISmhlV05oYzNRb0tTQjdmUW9nSUNBZ2RISmhkbVZ5YzJVb1pTa2dld29nSUNBZ0lDQWdJR1VvZEdocGN5azdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1Ob2FXeGtjbVZ1T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQThJR2s3SUc0ckt5bDBXMjVkTG5SeVlYWmxjbk5sS0dVcE93b2dJQ0FnZlFvZ0lDQWdkSEpoZG1WeWMyVldhWE5wWW14bEtHVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUyYVhOcFlteGxJRDA5UFNBaE1Ta2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lHVW9kR2hwY3lrN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5vYVd4a2NtVnVPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBc0lHa2dQU0IwTG14bGJtZDBhRHNnYmlBOElHazdJRzRyS3lsMFcyNWRMblJ5WVhabGNuTmxWbWx6YVdKc1pTaGxLVHNLSUNBZ0lIMEtJQ0FnSUhSeVlYWmxjbk5sUVc1alpYTjBiM0p6S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Y0dGeVpXNTBPd29nSUNBZ0lDQWdJSFFnSVQwOUlHNTFiR3dnSmlZZ0tHVW9kQ2tzSUhRdWRISmhkbVZ5YzJWQmJtTmxjM1J2Y25Nb1pTa3BPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxUV0YwY21sNEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJXRjBjbWw0TG1OdmJYQnZjMlVvZEdocGN5NXdiM05wZEdsdmJpd2dkR2hwY3k1eGRXRjBaWEp1YVc5dUxDQjBhR2x6TG5OallXeGxLU3dnZEdocGN5NXRZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVk5ZWFJ5YVhoWGIzSnNaQ2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJQ1ltSUhSb2FYTXVkWEJrWVhSbFRXRjBjbWw0S0Nrc0lDaDBhR2x6TG0xaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVWdmSHdnWlNrZ0ppWWdLSFJvYVhNdWNHRnlaVzUwSUQwOVBTQnVkV3hzSUQ4Z2RHaHBjeTV0WVhSeWFYaFhiM0pzWkM1amIzQjVLSFJvYVhNdWJXRjBjbWw0S1NBNklIUm9hWE11YldGMGNtbDRWMjl5YkdRdWJYVnNkR2x3YkhsTllYUnlhV05sY3loMGFHbHpMbkJoY21WdWRDNXRZWFJ5YVhoWGIzSnNaQ3dnZEdocGN5NXRZWFJ5YVhncExDQjBhR2x6TG0xaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVWdQU0FoTVN3Z1pTQTlJQ0V3S1RzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZMmhwYkdSeVpXNDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTUN3Z2FTQTlJSFF1YkdWdVozUm9PeUJ1SUR3Z2FUc2diaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBXMjVkT3dvZ0lDQWdJQ0FnSUNBZ0lDQW9jaTV0WVhSeWFYaFhiM0pzWkVGMWRHOVZjR1JoZEdVZ1BUMDlJQ0V3SUh4OElHVWdQVDA5SUNFd0tTQW1KaUJ5TG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0dVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11Y0dGeVpXNTBPd29nSUNBZ0lDQWdJR2xtSUNobElEMDlQU0FoTUNBbUppQnVJQ0U5UFNCdWRXeHNJQ1ltSUc0dWJXRjBjbWw0VjI5eWJHUkJkWFJ2VlhCa1lYUmxJRDA5UFNBaE1DQW1KaUJ1TG5Wd1pHRjBaVmR2Y214a1RXRjBjbWw0S0NFd0xDQWhNU2tzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQW1KaUIwYUdsekxuVndaR0YwWlUxaGRISnBlQ2dwTENCMGFHbHpMbkJoY21WdWRDQTlQVDBnYm5Wc2JDQS9JSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXVZMjl3ZVNoMGFHbHpMbTFoZEhKcGVDa2dPaUIwYUdsekxtMWhkSEpwZUZkdmNteGtMbTExYkhScGNHeDVUV0YwY21salpYTW9kR2hwY3k1d1lYSmxiblF1YldGMGNtbDRWMjl5YkdRc0lIUm9hWE11YldGMGNtbDRLU3dnZENBOVBUMGdJVEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBhR2x6TG1Ob2FXeGtjbVZ1T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdhUzVzWlc1bmRHZzdJSElnUENCaE95QnlLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0JwVzNKZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5NXRZWFJ5YVhoWGIzSnNaRUYxZEc5VmNHUmhkR1VnUFQwOUlDRXdJQ1ltSUc4dWRYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb0lURXNJQ0V3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbElEMDlQU0IyYjJsa0lEQWdmSHdnZEhsd1pXOW1JR1VnUFQwZ0luTjBjbWx1WnlJc0lHNGdQU0I3ZlRzS0lDQWdJQ0FnSUNCMElDWW1JQ2hsSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JuWlc5dFpYUnlhV1Z6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3h6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGRIVnlaWE02SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0JwYldGblpYTTZJSHQ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnphR0Z3WlhNNklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNCemEyVnNaWFJ2Ym5NNklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1ek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaWE02SUh0OUNpQWdJQ0FnSUNBZ2ZTd2diaTV0WlhSaFpHRjBZU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5YzJsdmJqb2dOQzQyTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVQySnFaV04wSWl3S0lDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHOXlPaUFpVDJKcVpXTjBNMFF1ZEc5S1UwOU9JZ29nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZTMwN0NpQWdJQ0FnSUNBZ2FTNTFkV2xrSUQwZ2RHaHBjeTUxZFdsa0xDQnBMblI1Y0dVZ1BTQjBhR2x6TG5SNWNHVXNJSFJvYVhNdWJtRnRaU0FoUFQwZ0lpSWdKaVlnS0drdWJtRnRaU0E5SUhSb2FYTXVibUZ0WlNrc0lIUm9hWE11WTJGemRGTm9ZV1J2ZHlBOVBUMGdJVEFnSmlZZ0tHa3VZMkZ6ZEZOb1lXUnZkeUE5SUNFd0tTd2dkR2hwY3k1eVpXTmxhWFpsVTJoaFpHOTNJRDA5UFNBaE1DQW1KaUFvYVM1eVpXTmxhWFpsVTJoaFpHOTNJRDBnSVRBcExDQjBhR2x6TG5acGMybGliR1VnUFQwOUlDRXhJQ1ltSUNocExuWnBjMmxpYkdVZ1BTQWhNU2tzSUhSb2FYTXVabkoxYzNSMWJVTjFiR3hsWkNBOVBUMGdJVEVnSmlZZ0tHa3VabkoxYzNSMWJVTjFiR3hsWkNBOUlDRXhLU3dnZEdocGN5NXlaVzVrWlhKUGNtUmxjaUFoUFQwZ01DQW1KaUFvYVM1eVpXNWtaWEpQY21SbGNpQTlJSFJvYVhNdWNtVnVaR1Z5VDNKa1pYSXBMQ0JQWW1wbFkzUXVhMlY1Y3loMGFHbHpMblZ6WlhKRVlYUmhLUzVzWlc1bmRHZ2dQaUF3SUNZbUlDaHBMblZ6WlhKRVlYUmhJRDBnZEdocGN5NTFjMlZ5UkdGMFlTa3NJR2t1YkdGNVpYSnpJRDBnZEdocGN5NXNZWGxsY25NdWJXRnpheXdnYVM1dFlYUnlhWGdnUFNCMGFHbHpMbTFoZEhKcGVDNTBiMEZ5Y21GNUtDa3NJR2t1ZFhBZ1BTQjBhR2x6TG5Wd0xuUnZRWEp5WVhrb0tTd2dkR2hwY3k1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUQwOVBTQWhNU0FtSmlBb2FTNXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElEMGdJVEVwTENCMGFHbHpMbWx6U1c1emRHRnVZMlZrVFdWemFDQW1KaUFvYVM1MGVYQmxJRDBnSWtsdWMzUmhibU5sWkUxbGMyZ2lMQ0JwTG1OdmRXNTBJRDBnZEdocGN5NWpiM1Z1ZEN3Z2FTNXBibk4wWVc1alpVMWhkSEpwZUNBOUlIUm9hWE11YVc1emRHRnVZMlZOWVhSeWFYZ3VkRzlLVTA5T0tDa3NJSFJvYVhNdWFXNXpkR0Z1WTJWRGIyeHZjaUFoUFQwZ2JuVnNiQ0FtSmlBb2FTNXBibk4wWVc1alpVTnZiRzl5SUQwZ2RHaHBjeTVwYm5OMFlXNWpaVU52Ykc5eUxuUnZTbE5QVGlncEtTazdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdjaWh2TENCaktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2VzJNdWRYVnBaRjBnUFQwOUlIWnZhV1FnTUNBbUppQW9iMXRqTG5WMWFXUmRJRDBnWXk1MGIwcFRUMDRvWlNrcExDQmpMblYxYVdRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtbHpVMk5sYm1VcElIUm9hWE11WW1GamEyZHliM1Z1WkNBbUppQW9kR2hwY3k1aVlXTnJaM0p2ZFc1a0xtbHpRMjlzYjNJZ1B5QnBMbUpoWTJ0bmNtOTFibVFnUFNCMGFHbHpMbUpoWTJ0bmNtOTFibVF1ZEc5S1UwOU9LQ2tnT2lCMGFHbHpMbUpoWTJ0bmNtOTFibVF1YVhOVVpYaDBkWEpsSUNZbUlDaHBMbUpoWTJ0bmNtOTFibVFnUFNCMGFHbHpMbUpoWTJ0bmNtOTFibVF1ZEc5S1UwOU9LR1VwTG5WMWFXUXBLU3dnZEdocGN5NWxiblpwY205dWJXVnVkQ0FtSmlCMGFHbHpMbVZ1ZG1seWIyNXRaVzUwTG1selZHVjRkSFZ5WlNBbUppQjBhR2x6TG1WdWRtbHliMjV0Wlc1MExtbHpVbVZ1WkdWeVZHRnlaMlYwVkdWNGRIVnlaU0FoUFQwZ0lUQWdKaVlnS0drdVpXNTJhWEp2Ym0xbGJuUWdQU0IwYUdsekxtVnVkbWx5YjI1dFpXNTBMblJ2U2xOUFRpaGxLUzUxZFdsa0tUc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDBhR2x6TG1selRXVnphQ0I4ZkNCMGFHbHpMbWx6VEdsdVpTQjhmQ0IwYUdsekxtbHpVRzlwYm5SektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdrdVoyVnZiV1YwY25rZ1BTQnlLR1V1WjJWdmJXVjBjbWxsY3l3Z2RHaHBjeTVuWlc5dFpYUnllU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RHaHBjeTVuWlc5dFpYUnllUzV3WVhKaGJXVjBaWEp6T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYnlBaFBUMGdkbTlwWkNBd0lDWW1JRzh1YzJoaGNHVnpJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnYnk1emFHRndaWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hqS1NrZ1ptOXlLR3hsZENCc0lEMGdNQ3dnYUNBOUlHTXViR1Z1WjNSb095QnNJRHdnYURzZ2JDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUdOYmJGMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lobExuTm9ZWEJsY3l3Z2RTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhJb1pTNXphR0Z3WlhNc0lHTXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtbHpVMnRwYm01bFpFMWxjMmdnSmlZZ0tHa3VZbWx1WkUxdlpHVWdQU0IwYUdsekxtSnBibVJOYjJSbExDQnBMbUpwYm1STllYUnlhWGdnUFNCMGFHbHpMbUpwYm1STllYUnlhWGd1ZEc5QmNuSmhlU2dwTENCMGFHbHpMbk5yWld4bGRHOXVJQ0U5UFNCMmIybGtJREFnSmlZZ0tISW9aUzV6YTJWc1pYUnZibk1zSUhSb2FYTXVjMnRsYkdWMGIyNHBMQ0JwTG5OclpXeGxkRzl1SUQwZ2RHaHBjeTV6YTJWc1pYUnZiaTUxZFdsa0tTa3NJSFJvYVhNdWJXRjBaWEpwWVd3Z0lUMDlJSFp2YVdRZ01Da2dhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29kR2hwY3k1dFlYUmxjbWxoYkNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmpJRDBnTUN3Z2JDQTlJSFJvYVhNdWJXRjBaWEpwWVd3dWJHVnVaM1JvT3lCaklEd2diRHNnWXlzcktXOHVjSFZ6YUNoeUtHVXViV0YwWlhKcFlXeHpMQ0IwYUdsekxtMWhkR1Z5YVdGc1cyTmRLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHa3ViV0YwWlhKcFlXd2dQU0J2T3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwTG0xaGRHVnlhV0ZzSUQwZ2NpaGxMbTFoZEdWeWFXRnNjeXdnZEdocGN5NXRZWFJsY21saGJDazdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZMmhwYkdSeVpXNHViR1Z1WjNSb0lENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBMbU5vYVd4a2NtVnVJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUE5SURBN0lHOGdQQ0IwYUdsekxtTm9hV3hrY21WdUxteGxibWQwYURzZ2J5c3JLV2t1WTJocGJHUnlaVzR1Y0hWemFDaDBhR2x6TG1Ob2FXeGtjbVZ1VzI5ZExuUnZTbE5QVGlobEtTNXZZbXBsWTNRcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWhibWx0WVhScGIyNXpMbXhsYm1kMGFDQStJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhUzVoYm1sdFlYUnBiMjV6SUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYnlBOUlEQTdJRzhnUENCMGFHbHpMbUZ1YVcxaGRHbHZibk11YkdWdVozUm9PeUJ2S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCMGFHbHpMbUZ1YVcxaGRHbHZibk5iYjEwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExtRnVhVzFoZEdsdmJuTXVjSFZ6YUNoeUtHVXVZVzVwYldGMGFXOXVjeXdnWXlrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaDBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ1lTaGxMbWRsYjIxbGRISnBaWE1wTENCaklEMGdZU2hsTG0xaGRHVnlhV0ZzY3lrc0lHd2dQU0JoS0dVdWRHVjRkSFZ5WlhNcExDQm9JRDBnWVNobExtbHRZV2RsY3lrc0lIVWdQU0JoS0dVdWMyaGhjR1Z6S1N3Z1pDQTlJR0VvWlM1emEyVnNaWFJ2Ym5NcExDQm1JRDBnWVNobExtRnVhVzFoZEdsdmJuTXBMQ0J0SUQwZ1lTaGxMbTV2WkdWektUc0tJQ0FnSUNBZ0lDQWdJQ0FnYnk1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG1kbGIyMWxkSEpwWlhNZ1BTQnZLU3dnWXk1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG0xaGRHVnlhV0ZzY3lBOUlHTXBMQ0JzTG14bGJtZDBhQ0ErSURBZ0ppWWdLRzR1ZEdWNGRIVnlaWE1nUFNCc0tTd2dhQzVzWlc1bmRHZ2dQaUF3SUNZbUlDaHVMbWx0WVdkbGN5QTlJR2dwTENCMUxteGxibWQwYUNBK0lEQWdKaVlnS0c0dWMyaGhjR1Z6SUQwZ2RTa3NJR1F1YkdWdVozUm9JRDRnTUNBbUppQW9iaTV6YTJWc1pYUnZibk1nUFNCa0tTd2daaTVzWlc1bmRHZ2dQaUF3SUNZbUlDaHVMbUZ1YVcxaGRHbHZibk1nUFNCbUtTd2diUzVzWlc1bmRHZ2dQaUF3SUNZbUlDaHVMbTV2WkdWeklEMGdiU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1TG05aWFtVmpkQ0E5SUdrc0lHNDdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdZU2h2S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JDQnBiaUJ2S1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnYjF0c1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCb0xtMWxkR0ZrWVhSaExDQmpMbkIxYzJnb2FDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5d2daU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VzSUhRZ1BTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG01aGJXVWdQU0JsTG01aGJXVXNJSFJvYVhNdWRYQXVZMjl3ZVNobExuVndLU3dnZEdocGN5NXdiM05wZEdsdmJpNWpiM0I1S0dVdWNHOXphWFJwYjI0cExDQjBhR2x6TG5KdmRHRjBhVzl1TG05eVpHVnlJRDBnWlM1eWIzUmhkR2x2Ymk1dmNtUmxjaXdnZEdocGN5NXhkV0YwWlhKdWFXOXVMbU52Y0hrb1pTNXhkV0YwWlhKdWFXOXVLU3dnZEdocGN5NXpZMkZzWlM1amIzQjVLR1V1YzJOaGJHVXBMQ0IwYUdsekxtMWhkSEpwZUM1amIzQjVLR1V1YldGMGNtbDRLU3dnZEdocGN5NXRZWFJ5YVhoWGIzSnNaQzVqYjNCNUtHVXViV0YwY21sNFYyOXliR1FwTENCMGFHbHpMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVWdQU0JsTG0xaGRISnBlRUYxZEc5VmNHUmhkR1VzSUhSb2FYTXViV0YwY21sNFYyOXliR1JPWldWa2MxVndaR0YwWlNBOUlHVXViV0YwY21sNFYyOXliR1JPWldWa2MxVndaR0YwWlN3Z2RHaHBjeTV0WVhSeWFYaFhiM0pzWkVGMWRHOVZjR1JoZEdVZ1BTQmxMbTFoZEhKcGVGZHZjbXhrUVhWMGIxVndaR0YwWlN3Z2RHaHBjeTVzWVhsbGNuTXViV0Z6YXlBOUlHVXViR0Y1WlhKekxtMWhjMnNzSUhSb2FYTXVkbWx6YVdKc1pTQTlJR1V1ZG1semFXSnNaU3dnZEdocGN5NWpZWE4wVTJoaFpHOTNJRDBnWlM1allYTjBVMmhoWkc5M0xDQjBhR2x6TG5KbFkyVnBkbVZUYUdGa2IzY2dQU0JsTG5KbFkyVnBkbVZUYUdGa2IzY3NJSFJvYVhNdVpuSjFjM1IxYlVOMWJHeGxaQ0E5SUdVdVpuSjFjM1IxYlVOMWJHeGxaQ3dnZEdocGN5NXlaVzVrWlhKUGNtUmxjaUE5SUdVdWNtVnVaR1Z5VDNKa1pYSXNJSFJvYVhNdVlXNXBiV0YwYVc5dWN5QTlJR1V1WVc1cGJXRjBhVzl1Y3k1emJHbGpaU2dwTENCMGFHbHpMblZ6WlhKRVlYUmhJRDBnU2xOUFRpNXdZWEp6WlNoS1UwOU9Mbk4wY21sdVoybG1lU2hsTG5WelpYSkVZWFJoS1Nrc0lIUWdQVDA5SUNFd0tTQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2daUzVqYUdsc1pISmxiaTVzWlc1bmRHZzdJRzRyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaUzVqYUdsc1pISmxibHR1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFpHUW9hUzVqYkc5dVpTZ3BLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q24wN0NrcGxMa1JGUmtGVlRGUmZWVkFnUFNCdVpYY2dRU2d3TENBeExDQXdLVHNLU21VdVJFVkdRVlZNVkY5TlFWUlNTVmhmUVZWVVQxOVZVRVJCVkVVZ1BTQWhNRHNLU21VdVJFVkdRVlZNVkY5TlFWUlNTVmhmVjA5U1RFUmZRVlZVVDE5VlVFUkJWRVVnUFNBaE1Ec0tkbUZ5SUV0MElEMGdibVYzSUVFc0lIVnVJRDBnYm1WM0lFRXNJRWhoSUQwZ2JtVjNJRUVzSUdSdUlEMGdibVYzSUVFc0lHSnBJRDBnYm1WM0lFRXNJRVZwSUQwZ2JtVjNJRUVzSUV0c0lEMGdibVYzSUVFc0lFZGhJRDBnYm1WM0lFRXNJRmRoSUQwZ2JtVjNJRUVzSUZoaElEMGdibVYzSUVFc0lDUnpJRDBnSVRFc0lGVnVJRDBnWTJ4aGMzTWdjekVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJCTENCMElEMGdibVYzSUVFc0lHNGdQU0J1WlhjZ1FTbDdDaUFnSUNBZ0lDQWdkR2hwY3k1aElEMGdaU3dnZEdocGN5NWlJRDBnZEN3Z2RHaHBjeTVqSUQwZ2Jqc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5Qm5aWFJPYjNKdFlXd29aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUdrdWMzVmlWbVZqZEc5eWN5aHVMQ0IwS1N3Z1MzUXVjM1ZpVm1WamRHOXljeWhsTENCMEtTd2dhUzVqY205emN5aExkQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0JwTG14bGJtZDBhRk54S0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhJZ1BpQXdJRDhnYVM1dGRXeDBhWEJzZVZOallXeGhjaWd4SUM4Z1RXRjBhQzV6Y1hKMEtISXBLU0E2SUdrdWMyVjBLREFzSURBc0lEQXBPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR2RsZEVKaGNubGpiMjl5WkNobExDQjBMQ0J1TENCcExDQnlLU0I3Q2lBZ0lDQWdJQ0FnUzNRdWMzVmlWbVZqZEc5eWN5aHBMQ0IwS1N3Z2RXNHVjM1ZpVm1WamRHOXljeWh1TENCMEtTd2dTR0V1YzNWaVZtVmpkRzl5Y3lobExDQjBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJRXQwTG1SdmRDaExkQ2tzSUc4Z1BTQkxkQzVrYjNRb2RXNHBMQ0JqSUQwZ1MzUXVaRzkwS0VoaEtTd2diQ0E5SUhWdUxtUnZkQ2gxYmlrc0lHZ2dQU0IxYmk1a2IzUW9TR0VwTENCMUlEMGdZU0FxSUd3Z0xTQnZJQ29nYnpzS0lDQWdJQ0FnSUNCcFppQW9kU0E5UFQwZ01Da2djbVYwZFhKdUlISXVjMlYwS0MweUxDQXRNU3dnTFRFcE93b2dJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ01TQXZJSFVzSUdZZ1BTQW9iQ0FxSUdNZ0xTQnZJQ29nYUNrZ0tpQmtMQ0J0SUQwZ0tHRWdLaUJvSUMwZ2J5QXFJR01wSUNvZ1pEc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2NpNXpaWFFvTVNBdElHWWdMU0J0TENCdExDQm1LVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJqYjI1MFlXbHVjMUJ2YVc1MEtHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUkNZWEo1WTI5dmNtUW9aU3dnZEN3Z2Jpd2dhU3dnWkc0cExDQmtiaTU0SUQ0OUlEQWdKaVlnWkc0dWVTQStQU0F3SUNZbUlHUnVMbmdnS3lCa2JpNTVJRHc5SURFN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1oyVjBWVllvWlN3Z2RDd2diaXdnYVN3Z2Npd2dZU3dnYnl3Z1l5a2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQWtjeUE5UFQwZ0lURWdKaVlnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVZISnBZVzVuYkdVdVoyVjBWVllvS1NCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklGUklVa1ZGTGxSeWFXRnVaMnhsTG1kbGRFbHVkR1Z5Y0c5c1lYUnBiMjRvS1M0aUtTd2dKSE1nUFNBaE1Da3NJSFJvYVhNdVoyVjBTVzUwWlhKd2IyeGhkR2x2YmlobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJuWlhSSmJuUmxjbkJ2YkdGMGFXOXVLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXNJRzhzSUdNcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSQ1lYSjVZMjl2Y21Rb1pTd2dkQ3dnYml3Z2FTd2daRzRwTENCakxuTmxkRk5qWVd4aGNpZ3dLU3dnWXk1aFpHUlRZMkZzWldSV1pXTjBiM0lvY2l3Z1pHNHVlQ2tzSUdNdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0dFc0lHUnVMbmtwTENCakxtRmtaRk5qWVd4bFpGWmxZM1J2Y2lodkxDQmtiaTU2S1N3Z1l6c0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5QnBjMFp5YjI1MFJtRmphVzVuS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1MzUXVjM1ZpVm1WamRHOXljeWh1TENCMEtTd2dkVzR1YzNWaVZtVmpkRzl5Y3lobExDQjBLU3dnUzNRdVkzSnZjM01vZFc0cExtUnZkQ2hwS1NBOElEQTdDaUFnSUNCOUNpQWdJQ0J6WlhRb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUV1WTI5d2VTaGxLU3dnZEdocGN5NWlMbU52Y0hrb2RDa3NJSFJvYVhNdVl5NWpiM0I1S0c0cExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlZCdmFXNTBjMEZ1WkVsdVpHbGpaWE1vWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUV1WTI5d2VTaGxXM1JkS1N3Z2RHaHBjeTVpTG1OdmNIa29aVnR1WFNrc0lIUm9hWE11WXk1amIzQjVLR1ZiYVYwcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlVGMGRISnBZblYwWlVGdVpFbHVaR2xqWlhNb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1FdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaGxMQ0IwS1N3Z2RHaHBjeTVpTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb1pTd2diaWtzSUhSb2FYTXVZeTVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dVc0lHa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLQ2t1WTI5d2VTaDBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUV1WTI5d2VTaGxMbUVwTENCMGFHbHpMbUl1WTI5d2VTaGxMbUlwTENCMGFHbHpMbU11WTI5d2VTaGxMbU1wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFFYSmxZU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnUzNRdWMzVmlWbVZqZEc5eWN5aDBhR2x6TG1Nc0lIUm9hWE11WWlrc0lIVnVMbk4xWWxabFkzUnZjbk1vZEdocGN5NWhMQ0IwYUdsekxtSXBMQ0JMZEM1amNtOXpjeWgxYmlrdWJHVnVaM1JvS0NrZ0tpQXVOVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFMXBaSEJ2YVc1MEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVoWkdSV1pXTjBiM0p6S0hSb2FYTXVZU3dnZEdocGN5NWlLUzVoWkdRb2RHaHBjeTVqS1M1dGRXeDBhWEJzZVZOallXeGhjaWd4SUM4Z015azdDaUFnSUNCOUNpQWdJQ0JuWlhST2IzSnRZV3dvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCek1TNW5aWFJPYjNKdFlXd29kR2hwY3k1aExDQjBhR2x6TG1Jc0lIUm9hWE11WXl3Z1pTazdDaUFnSUNCOUNpQWdJQ0JuWlhSUWJHRnVaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWMyVjBSbkp2YlVOdmNHeGhibUZ5VUc5cGJuUnpLSFJvYVhNdVlTd2dkR2hwY3k1aUxDQjBhR2x6TG1NcE93b2dJQ0FnZlFvZ0lDQWdaMlYwUW1GeWVXTnZiM0prS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjekV1WjJWMFFtRnllV052YjNKa0tHVXNJSFJvYVhNdVlTd2dkR2hwY3k1aUxDQjBhR2x6TG1Nc0lIUXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZWWW9aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBa2N5QTlQVDBnSVRFZ0ppWWdLR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VkhKcFlXNW5iR1V1WjJWMFZWWW9LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUZSSVVrVkZMbFJ5YVdGdVoyeGxMbWRsZEVsdWRHVnljRzlzWVhScGIyNG9LUzRpS1N3Z0pITWdQU0FoTUNrc0lITXhMbWRsZEVsdWRHVnljRzlzWVhScGIyNG9aU3dnZEdocGN5NWhMQ0IwYUdsekxtSXNJSFJvYVhNdVl5d2dkQ3dnYml3Z2FTd2djaWs3Q2lBZ0lDQjlDaUFnSUNCblpYUkpiblJsY25CdmJHRjBhVzl1S0dVc0lIUXNJRzRzSUdrc0lISXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjekV1WjJWMFNXNTBaWEp3YjJ4aGRHbHZiaWhsTENCMGFHbHpMbUVzSUhSb2FYTXVZaXdnZEdocGN5NWpMQ0IwTENCdUxDQnBMQ0J5S1RzS0lDQWdJSDBLSUNBZ0lHTnZiblJoYVc1elVHOXBiblFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCek1TNWpiMjUwWVdsdWMxQnZhVzUwS0dVc0lIUm9hWE11WVN3Z2RHaHBjeTVpTENCMGFHbHpMbU1wT3dvZ0lDQWdmUW9nSUNBZ2FYTkdjbTl1ZEVaaFkybHVaeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhNeExtbHpSbkp2Ym5SR1lXTnBibWNvZEdocGN5NWhMQ0IwYUdsekxtSXNJSFJvYVhNdVl5d2daU2s3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSelFtOTRLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1cGJuUmxjbk5sWTNSelZISnBZVzVuYkdVb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCamJHOXpaWE4wVUc5cGJuUlViMUJ2YVc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVZU3dnYVNBOUlIUm9hWE11WWl3Z2NpQTlJSFJvYVhNdVl5d2dZU3dnYnpzS0lDQWdJQ0FnSUNCaWFTNXpkV0pXWldOMGIzSnpLR2tzSUc0cExDQkZhUzV6ZFdKV1pXTjBiM0p6S0hJc0lHNHBMQ0JIWVM1emRXSldaV04wYjNKektHVXNJRzRwT3dvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnWW1rdVpHOTBLRWRoS1N3Z2JDQTlJRVZwTG1SdmRDaEhZU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHTWdQRDBnTUNBbUppQnNJRHc5SURBcElISmxkSFZ5YmlCMExtTnZjSGtvYmlrN0NpQWdJQ0FnSUNBZ1YyRXVjM1ZpVm1WamRHOXljeWhsTENCcEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlHSnBMbVJ2ZENoWFlTa3NJSFVnUFNCRmFTNWtiM1FvVjJFcE93b2dJQ0FnSUNBZ0lHbG1JQ2hvSUQ0OUlEQWdKaVlnZFNBOFBTQm9LU0J5WlhSMWNtNGdkQzVqYjNCNUtHa3BPd29nSUNBZ0lDQWdJR3hsZENCa0lEMGdZeUFxSUhVZ0xTQm9JQ29nYkRzS0lDQWdJQ0FnSUNCcFppQW9aQ0E4UFNBd0lDWW1JR01nUGowZ01DQW1KaUJvSUR3OUlEQXBJSEpsZEhWeWJpQmhJRDBnWXlBdklDaGpJQzBnYUNrc0lIUXVZMjl3ZVNodUtTNWhaR1JUWTJGc1pXUldaV04wYjNJb1lta3NJR0VwT3dvZ0lDQWdJQ0FnSUZoaExuTjFZbFpsWTNSdmNuTW9aU3dnY2lrN0NpQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCaWFTNWtiM1FvV0dFcExDQnRJRDBnUldrdVpHOTBLRmhoS1RzS0lDQWdJQ0FnSUNCcFppQW9iU0ErUFNBd0lDWW1JR1lnUEQwZ2JTa2djbVYwZFhKdUlIUXVZMjl3ZVNoeUtUc0tJQ0FnSUNBZ0lDQnNaWFFnWHlBOUlHWWdLaUJzSUMwZ1l5QXFJRzA3Q2lBZ0lDQWdJQ0FnYVdZZ0tGOGdQRDBnTUNBbUppQnNJRDQ5SURBZ0ppWWdiU0E4UFNBd0tTQnlaWFIxY200Z2J5QTlJR3dnTHlBb2JDQXRJRzBwTENCMExtTnZjSGtvYmlrdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0VWcExDQnZLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJR2dnS2lCdElDMGdaaUFxSUhVN0NpQWdJQ0FnSUNBZ2FXWWdLR2NnUEQwZ01DQW1KaUIxSUMwZ2FDQStQU0F3SUNZbUlHWWdMU0J0SUQ0OUlEQXBJSEpsZEhWeWJpQkxiQzV6ZFdKV1pXTjBiM0p6S0hJc0lHa3BMQ0J2SUQwZ0tIVWdMU0JvS1NBdklDaDFJQzBnYUNBcklDaG1JQzBnYlNrcExDQjBMbU52Y0hrb2FTa3VZV1JrVTJOaGJHVmtWbVZqZEc5eUtFdHNMQ0J2S1RzS0lDQWdJQ0FnSUNCc1pYUWdjQ0E5SURFZ0x5QW9aeUFySUY4Z0t5QmtLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZU0E5SUY4Z0tpQndMQ0J2SUQwZ1pDQXFJSEFzSUhRdVkyOXdlU2h1S1M1aFpHUlRZMkZzWldSV1pXTjBiM0lvWW1rc0lHRXBMbUZrWkZOallXeGxaRlpsWTNSdmNpaEZhU3dnYnlrN0NpQWdJQ0I5Q2lBZ0lDQmxjWFZoYkhNb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbUV1WlhGMVlXeHpLSFJvYVhNdVlTa2dKaVlnWlM1aUxtVnhkV0ZzY3loMGFHbHpMbUlwSUNZbUlHVXVZeTVsY1hWaGJITW9kR2hwY3k1aktUc0tJQ0FnSUgwS2ZTd2dabkFnUFNBd0xDQmlkQ0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdjMjRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VFdGMFpYSnBZV3dnUFNBaE1Dd2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ0pwWkNJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1p3S3lzS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1MWRXbGtJRDBnYTNRb0tTd2dkR2hwY3k1dVlXMWxJRDBnSWlJc0lIUm9hWE11ZEhsd1pTQTlJQ0pOWVhSbGNtbGhiQ0lzSUhSb2FYTXVZbXhsYm1ScGJtY2dQU0JYYVN3Z2RHaHBjeTV6YVdSbElEMGdRbTRzSUhSb2FYTXVkbVZ5ZEdWNFEyOXNiM0p6SUQwZ0lURXNJSFJvYVhNdWIzQmhZMmwwZVNBOUlERXNJSFJvYVhNdWRISmhibk53WVhKbGJuUWdQU0FoTVN3Z2RHaHBjeTVoYkhCb1lVaGhjMmdnUFNBaE1Td2dkR2hwY3k1aWJHVnVaRk55WXlBOUlHeGtMQ0IwYUdsekxtSnNaVzVrUkhOMElEMGdhR1FzSUhSb2FYTXVZbXhsYm1SRmNYVmhkR2x2YmlBOUlFSnBMQ0IwYUdsekxtSnNaVzVrVTNKalFXeHdhR0VnUFNCdWRXeHNMQ0IwYUdsekxtSnNaVzVrUkhOMFFXeHdhR0VnUFNCdWRXeHNMQ0IwYUdsekxtSnNaVzVrUlhGMVlYUnBiMjVCYkhCb1lTQTlJRzUxYkd3c0lIUm9hWE11WkdWd2RHaEdkVzVqSUQwZ2RXOHNJSFJvYVhNdVpHVndkR2hVWlhOMElEMGdJVEFzSUhSb2FYTXVaR1Z3ZEdoWGNtbDBaU0E5SUNFd0xDQjBhR2x6TG5OMFpXNWphV3hYY21sMFpVMWhjMnNnUFNBeU5UVXNJSFJvYVhNdWMzUmxibU5wYkVaMWJtTWdQU0JKWml3Z2RHaHBjeTV6ZEdWdVkybHNVbVZtSUQwZ01Dd2dkR2hwY3k1emRHVnVZMmxzUm5WdVkwMWhjMnNnUFNBeU5UVXNJSFJvYVhNdWMzUmxibU5wYkVaaGFXd2dQU0JKWVN3Z2RHaHBjeTV6ZEdWdVkybHNXa1poYVd3Z1BTQkpZU3dnZEdocGN5NXpkR1Z1WTJsc1dsQmhjM01nUFNCSllTd2dkR2hwY3k1emRHVnVZMmxzVjNKcGRHVWdQU0FoTVN3Z2RHaHBjeTVqYkdsd2NHbHVaMUJzWVc1bGN5QTlJRzUxYkd3c0lIUm9hWE11WTJ4cGNFbHVkR1Z5YzJWamRHbHZiaUE5SUNFeExDQjBhR2x6TG1Oc2FYQlRhR0ZrYjNkeklEMGdJVEVzSUhSb2FYTXVjMmhoWkc5M1UybGtaU0E5SUc1MWJHd3NJSFJvYVhNdVkyOXNiM0pYY21sMFpTQTlJQ0V3TENCMGFHbHpMbkJ5WldOcGMybHZiaUE5SUc1MWJHd3NJSFJvYVhNdWNHOXNlV2R2Yms5bVpuTmxkQ0E5SUNFeExDQjBhR2x6TG5CdmJIbG5iMjVQWm1aelpYUkdZV04wYjNJZ1BTQXdMQ0IwYUdsekxuQnZiSGxuYjI1UFptWnpaWFJWYm1sMGN5QTlJREFzSUhSb2FYTXVaR2wwYUdWeWFXNW5JRDBnSVRFc0lIUm9hWE11WVd4d2FHRlViME52ZG1WeVlXZGxJRDBnSVRFc0lIUm9hWE11Y0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoSUQwZ0lURXNJSFJvYVhNdVptOXlZMlZUYVc1bmJHVlFZWE56SUQwZ0lURXNJSFJvYVhNdWRtbHphV0pzWlNBOUlDRXdMQ0IwYUdsekxuUnZibVZOWVhCd1pXUWdQU0FoTUN3Z2RHaHBjeTUxYzJWeVJHRjBZU0E5SUh0OUxDQjBhR2x6TG5abGNuTnBiMjRnUFNBd0xDQjBhR2x6TGw5aGJIQm9ZVlJsYzNRZ1BTQXdPd29nSUNBZ2ZRb2dJQ0FnWjJWMElHRnNjR2hoVkdWemRDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZllXeHdhR0ZVWlhOME93b2dJQ0FnZlFvZ0lDQWdjMlYwSUdGc2NHaGhWR1Z6ZENobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZllXeHdhR0ZVWlhOMElENGdNQ0FoUFNCbElENGdNQ0FtSmlCMGFHbHpMblpsY25OcGIyNHJLeXdnZEdocGN5NWZZV3h3YUdGVVpYTjBJRDBnWlRzS0lDQWdJSDBLSUNBZ0lHOXVRblZwYkdRb0tTQjdmUW9nSUNBZ2IyNUNaV1p2Y21WU1pXNWtaWElvS1NCN2ZRb2dJQ0FnYjI1Q1pXWnZjbVZEYjIxd2FXeGxLQ2tnZTMwS0lDQWdJR04xYzNSdmJWQnliMmR5WVcxRFlXTm9aVXRsZVNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2YmtKbFptOXlaVU52YlhCcGJHVXVkRzlUZEhKcGJtY29LVHNLSUNBZ0lIMEtJQ0FnSUhObGRGWmhiSFZsY3lobEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0dVZ0lUMDlJSFp2YVdRZ01Da2dabTl5S0d4bGRDQjBJR2x1SUdVcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1ZiZEYwN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodUlEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloZ1ZFaFNSVVV1VFdGMFpYSnBZV3c2SUhCaGNtRnRaWFJsY2lBbkpIdDBmU2NnYUdGeklIWmhiSFZsSUc5bUlIVnVaR1ZtYVc1bFpDNWdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwYzF0MFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtHQlVTRkpGUlM1TllYUmxjbWxoYkRvZ0p5UjdkSDBuSUdseklHNXZkQ0JoSUhCeWIzQmxjblI1SUc5bUlGUklVa1ZGTGlSN2RHaHBjeTUwZVhCbGZTNWdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR2tnSmlZZ2FTNXBjME52Ykc5eUlEOGdhUzV6WlhRb2Jpa2dPaUJwSUNZbUlHa3VhWE5XWldOMGIzSXpJQ1ltSUc0Z0ppWWdiaTVwYzFabFkzUnZjak1nUHlCcExtTnZjSGtvYmlrZ09pQjBhR2x6VzNSZElEMGdianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTQTlQVDBnZG05cFpDQXdJSHg4SUhSNWNHVnZaaUJsSUQwOUlDSnpkSEpwYm1jaU93b2dJQ0FnSUNBZ0lIUWdKaVlnS0dVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSbGVIUjFjbVZ6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYVcxaFoyVnpPaUI3ZlFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J0WlhSaFpHRjBZVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWMybHZiam9nTkM0MkxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSWsxaGRHVnlhV0ZzSWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGJtVnlZWFJ2Y2pvZ0lrMWhkR1Z5YVdGc0xuUnZTbE5QVGlJS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYmk1MWRXbGtJRDBnZEdocGN5NTFkV2xrTENCdUxuUjVjR1VnUFNCMGFHbHpMblI1Y0dVc0lIUm9hWE11Ym1GdFpTQWhQVDBnSWlJZ0ppWWdLRzR1Ym1GdFpTQTlJSFJvYVhNdWJtRnRaU2tzSUhSb2FYTXVZMjlzYjNJZ0ppWWdkR2hwY3k1amIyeHZjaTVwYzBOdmJHOXlJQ1ltSUNodUxtTnZiRzl5SUQwZ2RHaHBjeTVqYjJ4dmNpNW5aWFJJWlhnb0tTa3NJSFJvYVhNdWNtOTFaMmh1WlhOeklDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dWNtOTFaMmh1WlhOeklEMGdkR2hwY3k1eWIzVm5hRzVsYzNNcExDQjBhR2x6TG0xbGRHRnNibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG0xbGRHRnNibVZ6Y3lBOUlIUm9hWE11YldWMFlXeHVaWE56S1N3Z2RHaHBjeTV6YUdWbGJpQWhQVDBnZG05cFpDQXdJQ1ltSUNodUxuTm9aV1Z1SUQwZ2RHaHBjeTV6YUdWbGJpa3NJSFJvYVhNdWMyaGxaVzVEYjJ4dmNpQW1KaUIwYUdsekxuTm9aV1Z1UTI5c2IzSXVhWE5EYjJ4dmNpQW1KaUFvYmk1emFHVmxia052Ykc5eUlEMGdkR2hwY3k1emFHVmxia052Ykc5eUxtZGxkRWhsZUNncEtTd2dkR2hwY3k1emFHVmxibEp2ZFdkb2JtVnpjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHVMbk5vWldWdVVtOTFaMmh1WlhOeklEMGdkR2hwY3k1emFHVmxibEp2ZFdkb2JtVnpjeWtzSUhSb2FYTXVaVzFwYzNOcGRtVWdKaVlnZEdocGN5NWxiV2x6YzJsMlpTNXBjME52Ykc5eUlDWW1JQ2h1TG1WdGFYTnphWFpsSUQwZ2RHaHBjeTVsYldsemMybDJaUzVuWlhSSVpYZ29LU2tzSUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa2dKaVlnZEdocGN5NWxiV2x6YzJsMlpVbHVkR1Z1YzJsMGVTQWhQVDBnTVNBbUppQW9iaTVsYldsemMybDJaVWx1ZEdWdWMybDBlU0E5SUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa3BMQ0IwYUdsekxuTndaV04xYkdGeUlDWW1JSFJvYVhNdWMzQmxZM1ZzWVhJdWFYTkRiMnh2Y2lBbUppQW9iaTV6Y0dWamRXeGhjaUE5SUhSb2FYTXVjM0JsWTNWc1lYSXVaMlYwU0dWNEtDa3BMQ0IwYUdsekxuTndaV04xYkdGeVNXNTBaVzV6YVhSNUlDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhrZ1BTQjBhR2x6TG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1S1N3Z2RHaHBjeTV6Y0dWamRXeGhja052Ykc5eUlDWW1JSFJvYVhNdWMzQmxZM1ZzWVhKRGIyeHZjaTVwYzBOdmJHOXlJQ1ltSUNodUxuTndaV04xYkdGeVEyOXNiM0lnUFNCMGFHbHpMbk53WldOMWJHRnlRMjlzYjNJdVoyVjBTR1Y0S0NrcExDQjBhR2x6TG5Ob2FXNXBibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG5Ob2FXNXBibVZ6Y3lBOUlIUm9hWE11YzJocGJtbHVaWE56S1N3Z2RHaHBjeTVqYkdWaGNtTnZZWFFnSVQwOUlIWnZhV1FnTUNBbUppQW9iaTVqYkdWaGNtTnZZWFFnUFNCMGFHbHpMbU5zWldGeVkyOWhkQ2tzSUhSb2FYTXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpJRDBnZEdocGN5NWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTXBMQ0IwYUdsekxtTnNaV0Z5WTI5aGRFMWhjQ0FtSmlCMGFHbHpMbU5zWldGeVkyOWhkRTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WTJ4bFlYSmpiMkYwVFdGd0lEMGdkR2hwY3k1amJHVmhjbU52WVhSTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDQW1KaUIwYUdsekxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3SUQwZ2RHaHBjeTVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FwTENCMGFHbHpMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQ0FtSmlCMGFHbHpMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVZMnhsWVhKamIyRjBUbTl5YldGc1RXRndJRDBnZEdocGN5NWpiR1ZoY21OdllYUk9iM0p0WVd4TllYQXVkRzlLVTA5T0tHVXBMblYxYVdRc0lHNHVZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1VnUFNCMGFHbHpMbU5zWldGeVkyOWhkRTV2Y20xaGJGTmpZV3hsTG5SdlFYSnlZWGtvS1Nrc0lIUm9hWE11YVhKcFpHVnpZMlZ1WTJVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYmk1cGNtbGtaWE5qWlc1alpTQTlJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVXBMQ0IwYUdsekxtbHlhV1JsYzJObGJtTmxTVTlTSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1YVhKcFpHVnpZMlZ1WTJWSlQxSWdQU0IwYUdsekxtbHlhV1JsYzJObGJtTmxTVTlTS1N3Z2RHaHBjeTVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzFKaGJtZGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05TWVc1blpTQTlJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTlNZVzVuWlNrc0lIUm9hWE11YVhKcFpHVnpZMlZ1WTJWTllYQWdKaVlnZEdocGN5NXBjbWxrWlhOalpXNWpaVTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1YVhKcFpHVnpZMlZ1WTJWTllYQWdQU0IwYUdsekxtbHlhV1JsYzJObGJtTmxUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtLU3dnZEdocGN5NXBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoY0NBbUppQjBhR2x6TG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXRndMbWx6VkdWNGRIVnlaU0FtSmlBb2JpNXBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoY0NBOUlIUm9hWE11YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG1GdWFYTnZkSEp2Y0hrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYmk1aGJtbHpiM1J5YjNCNUlEMGdkR2hwY3k1aGJtbHpiM1J5YjNCNUtTd2dkR2hwY3k1aGJtbHpiM1J5YjNCNVVtOTBZWFJwYjI0Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYmk1aGJtbHpiM1J5YjNCNVVtOTBZWFJwYjI0Z1BTQjBhR2x6TG1GdWFYTnZkSEp2Y0hsU2IzUmhkR2x2Ymlrc0lIUm9hWE11WVc1cGMyOTBjbTl3ZVUxaGNDQW1KaUIwYUdsekxtRnVhWE52ZEhKdmNIbE5ZWEF1YVhOVVpYaDBkWEpsSUNZbUlDaHVMbUZ1YVhOdmRISnZjSGxOWVhBZ1BTQjBhR2x6TG1GdWFYTnZkSEp2Y0hsTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG0xaGNDQW1KaUIwYUdsekxtMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHViV0Z3SUQwZ2RHaHBjeTV0WVhBdWRHOUtVMDlPS0dVcExuVjFhV1FwTENCMGFHbHpMbTFoZEdOaGNDQW1KaUIwYUdsekxtMWhkR05oY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1YldGMFkyRndJRDBnZEdocGN5NXRZWFJqWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FwTENCMGFHbHpMbUZzY0doaFRXRndJQ1ltSUhSb2FYTXVZV3h3YUdGTllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxtRnNjR2hoVFdGd0lEMGdkR2hwY3k1aGJIQm9ZVTFoY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ2tzSUhSb2FYTXViR2xuYUhSTllYQWdKaVlnZEdocGN5NXNhV2RvZEUxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWJHbG5hSFJOWVhBZ1BTQjBhR2x6TG14cFoyaDBUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtMQ0J1TG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUQwZ2RHaHBjeTVzYVdkb2RFMWhjRWx1ZEdWdWMybDBlU2tzSUhSb2FYTXVZVzlOWVhBZ0ppWWdkR2hwY3k1aGIwMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVZVzlOWVhBZ1BTQjBhR2x6TG1GdlRXRndMblJ2U2xOUFRpaGxLUzUxZFdsa0xDQnVMbUZ2VFdGd1NXNTBaVzV6YVhSNUlEMGdkR2hwY3k1aGIwMWhjRWx1ZEdWdWMybDBlU2tzSUhSb2FYTXVZblZ0Y0UxaGNDQW1KaUIwYUdsekxtSjFiWEJOWVhBdWFYTlVaWGgwZFhKbElDWW1JQ2h1TG1KMWJYQk5ZWEFnUFNCMGFHbHpMbUoxYlhCTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRc0lHNHVZblZ0Y0ZOallXeGxJRDBnZEdocGN5NWlkVzF3VTJOaGJHVXBMQ0IwYUdsekxtNXZjbTFoYkUxaGNDQW1KaUIwYUdsekxtNXZjbTFoYkUxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWJtOXliV0ZzVFdGd0lEMGdkR2hwY3k1dWIzSnRZV3hOWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FzSUc0dWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUhSb2FYTXVibTl5YldGc1RXRndWSGx3WlN3Z2JpNXViM0p0WVd4VFkyRnNaU0E5SUhSb2FYTXVibTl5YldGc1UyTmhiR1V1ZEc5QmNuSmhlU2dwS1N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdKaVlnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBdWFYTlVaWGgwZFhKbElDWW1JQ2h1TG1ScGMzQnNZV05sYldWdWRFMWhjQ0E5SUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0xuUnZTbE5QVGlobEtTNTFkV2xrTENCdUxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bElEMGdkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlN3Z2JpNWthWE53YkdGalpXMWxiblJDYVdGeklEMGdkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6S1N3Z2RHaHBjeTV5YjNWbmFHNWxjM05OWVhBZ0ppWWdkR2hwY3k1eWIzVm5hRzVsYzNOTllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxuSnZkV2RvYm1WemMwMWhjQ0E5SUhSb2FYTXVjbTkxWjJodVpYTnpUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtLU3dnZEdocGN5NXRaWFJoYkc1bGMzTk5ZWEFnSmlZZ2RHaHBjeTV0WlhSaGJHNWxjM05OWVhBdWFYTlVaWGgwZFhKbElDWW1JQ2h1TG0xbGRHRnNibVZ6YzAxaGNDQTlJSFJvYVhNdWJXVjBZV3h1WlhOelRXRndMblJ2U2xOUFRpaGxLUzUxZFdsa0tTd2dkR2hwY3k1bGJXbHpjMmwyWlUxaGNDQW1KaUIwYUdsekxtVnRhWE56YVhabFRXRndMbWx6VkdWNGRIVnlaU0FtSmlBb2JpNWxiV2x6YzJsMlpVMWhjQ0E5SUhSb2FYTXVaVzFwYzNOcGRtVk5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXBMQ0IwYUdsekxuTndaV04xYkdGeVRXRndJQ1ltSUhSb2FYTXVjM0JsWTNWc1lYSk5ZWEF1YVhOVVpYaDBkWEpsSUNZbUlDaHVMbk53WldOMWJHRnlUV0Z3SUQwZ2RHaHBjeTV6Y0dWamRXeGhjazFoY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ2tzSUhSb2FYTXVjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEFnSmlZZ2RHaHBjeTV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBZ1BTQjBhR2x6TG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0xuUnZTbE5QVGlobEtTNTFkV2xrS1N3Z2RHaHBjeTV6Y0dWamRXeGhja052Ykc5eVRXRndJQ1ltSUhSb2FYTXVjM0JsWTNWc1lYSkRiMnh2Y2sxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWMzQmxZM1ZzWVhKRGIyeHZjazFoY0NBOUlIUm9hWE11YzNCbFkzVnNZWEpEYjJ4dmNrMWhjQzUwYjBwVFQwNG9aU2t1ZFhWcFpDa3NJSFJvYVhNdVpXNTJUV0Z3SUNZbUlIUm9hWE11Wlc1MlRXRndMbWx6VkdWNGRIVnlaU0FtSmlBb2JpNWxiblpOWVhBZ1BTQjBhR2x6TG1WdWRrMWhjQzUwYjBwVFQwNG9aU2t1ZFhWcFpDd2dkR2hwY3k1amIyMWlhVzVsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1WTI5dFltbHVaU0E5SUhSb2FYTXVZMjl0WW1sdVpTa3BMQ0IwYUdsekxtVnVkazFoY0VsdWRHVnVjMmwwZVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG1WdWRrMWhjRWx1ZEdWdWMybDBlU0E5SUhSb2FYTXVaVzUyVFdGd1NXNTBaVzV6YVhSNUtTd2dkR2hwY3k1eVpXWnNaV04wYVhacGRIa2dJVDA5SUhadmFXUWdNQ0FtSmlBb2JpNXlaV1pzWldOMGFYWnBkSGtnUFNCMGFHbHpMbkpsWm14bFkzUnBkbWwwZVNrc0lIUm9hWE11Y21WbWNtRmpkR2x2YmxKaGRHbHZJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVjbVZtY21GamRHbHZibEpoZEdsdklEMGdkR2hwY3k1eVpXWnlZV04wYVc5dVVtRjBhVzhwTENCMGFHbHpMbWR5WVdScFpXNTBUV0Z3SUNZbUlIUm9hWE11WjNKaFpHbGxiblJOWVhBdWFYTlVaWGgwZFhKbElDWW1JQ2h1TG1keVlXUnBaVzUwVFdGd0lEMGdkR2hwY3k1bmNtRmthV1Z1ZEUxaGNDNTBiMHBUVDA0b1pTa3VkWFZwWkNrc0lIUm9hWE11ZEhKaGJuTnRhWE56YVc5dUlDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dWRISmhibk50YVhOemFXOXVJRDBnZEdocGN5NTBjbUZ1YzIxcGMzTnBiMjRwTENCMGFHbHpMblJ5WVc1emJXbHpjMmx2YmsxaGNDQW1KaUIwYUdsekxuUnlZVzV6YldsemMybHZiazFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1ZEhKaGJuTnRhWE56YVc5dVRXRndJRDBnZEdocGN5NTBjbUZ1YzIxcGMzTnBiMjVOWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FwTENCMGFHbHpMblJvYVdOcmJtVnpjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHVMblJvYVdOcmJtVnpjeUE5SUhSb2FYTXVkR2hwWTJ0dVpYTnpLU3dnZEdocGN5NTBhR2xqYTI1bGMzTk5ZWEFnSmlZZ2RHaHBjeTUwYUdsamEyNWxjM05OWVhBdWFYTlVaWGgwZFhKbElDWW1JQ2h1TG5Sb2FXTnJibVZ6YzAxaGNDQTlJSFJvYVhNdWRHaHBZMnR1WlhOelRXRndMblJ2U2xOUFRpaGxLUzUxZFdsa0tTd2dkR2hwY3k1aGRIUmxiblZoZEdsdmJrUnBjM1JoYm1ObElDRTlQU0IyYjJsa0lEQWdKaVlnZEdocGN5NWhkSFJsYm5WaGRHbHZia1JwYzNSaGJtTmxJQ0U5UFNBeElDOGdNQ0FtSmlBb2JpNWhkSFJsYm5WaGRHbHZia1JwYzNSaGJtTmxJRDBnZEdocGN5NWhkSFJsYm5WaGRHbHZia1JwYzNSaGJtTmxLU3dnZEdocGN5NWhkSFJsYm5WaGRHbHZia052Ykc5eUlDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dVlYUjBaVzUxWVhScGIyNURiMnh2Y2lBOUlIUm9hWE11WVhSMFpXNTFZWFJwYjI1RGIyeHZjaTVuWlhSSVpYZ29LU2tzSUhSb2FYTXVjMmw2WlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG5OcGVtVWdQU0IwYUdsekxuTnBlbVVwTENCMGFHbHpMbk5vWVdSdmQxTnBaR1VnSVQwOUlHNTFiR3dnSmlZZ0tHNHVjMmhoWkc5M1UybGtaU0E5SUhSb2FYTXVjMmhoWkc5M1UybGtaU2tzSUhSb2FYTXVjMmw2WlVGMGRHVnVkV0YwYVc5dUlDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dWMybDZaVUYwZEdWdWRXRjBhVzl1SUQwZ2RHaHBjeTV6YVhwbFFYUjBaVzUxWVhScGIyNHBMQ0IwYUdsekxtSnNaVzVrYVc1bklDRTlQU0JYYVNBbUppQW9iaTVpYkdWdVpHbHVaeUE5SUhSb2FYTXVZbXhsYm1ScGJtY3BMQ0IwYUdsekxuTnBaR1VnSVQwOUlFSnVJQ1ltSUNodUxuTnBaR1VnUFNCMGFHbHpMbk5wWkdVcExDQjBhR2x6TG5abGNuUmxlRU52Ykc5eWN5QTlQVDBnSVRBZ0ppWWdLRzR1ZG1WeWRHVjRRMjlzYjNKeklEMGdJVEFwTENCMGFHbHpMbTl3WVdOcGRIa2dQQ0F4SUNZbUlDaHVMbTl3WVdOcGRIa2dQU0IwYUdsekxtOXdZV05wZEhrcExDQjBhR2x6TG5SeVlXNXpjR0Z5Wlc1MElEMDlQU0FoTUNBbUppQW9iaTUwY21GdWMzQmhjbVZ1ZENBOUlDRXdLU3dnYmk1a1pYQjBhRVoxYm1NZ1BTQjBhR2x6TG1SbGNIUm9SblZ1WXl3Z2JpNWtaWEIwYUZSbGMzUWdQU0IwYUdsekxtUmxjSFJvVkdWemRDd2diaTVrWlhCMGFGZHlhWFJsSUQwZ2RHaHBjeTVrWlhCMGFGZHlhWFJsTENCdUxtTnZiRzl5VjNKcGRHVWdQU0IwYUdsekxtTnZiRzl5VjNKcGRHVXNJRzR1YzNSbGJtTnBiRmR5YVhSbElEMGdkR2hwY3k1emRHVnVZMmxzVjNKcGRHVXNJRzR1YzNSbGJtTnBiRmR5YVhSbFRXRnpheUE5SUhSb2FYTXVjM1JsYm1OcGJGZHlhWFJsVFdGemF5d2diaTV6ZEdWdVkybHNSblZ1WXlBOUlIUm9hWE11YzNSbGJtTnBiRVoxYm1Nc0lHNHVjM1JsYm1OcGJGSmxaaUE5SUhSb2FYTXVjM1JsYm1OcGJGSmxaaXdnYmk1emRHVnVZMmxzUm5WdVkwMWhjMnNnUFNCMGFHbHpMbk4wWlc1amFXeEdkVzVqVFdGemF5d2diaTV6ZEdWdVkybHNSbUZwYkNBOUlIUm9hWE11YzNSbGJtTnBiRVpoYVd3c0lHNHVjM1JsYm1OcGJGcEdZV2xzSUQwZ2RHaHBjeTV6ZEdWdVkybHNXa1poYVd3c0lHNHVjM1JsYm1OcGJGcFFZWE56SUQwZ2RHaHBjeTV6ZEdWdVkybHNXbEJoYzNNc0lIUm9hWE11Y205MFlYUnBiMjRnSVQwOUlIWnZhV1FnTUNBbUppQjBhR2x6TG5KdmRHRjBhVzl1SUNFOVBTQXdJQ1ltSUNodUxuSnZkR0YwYVc5dUlEMGdkR2hwY3k1eWIzUmhkR2x2Ymlrc0lIUm9hWE11Y0c5c2VXZHZiazltWm5ObGRDQTlQVDBnSVRBZ0ppWWdLRzR1Y0c5c2VXZHZiazltWm5ObGRDQTlJQ0V3S1N3Z2RHaHBjeTV3YjJ4NVoyOXVUMlptYzJWMFJtRmpkRzl5SUNFOVBTQXdJQ1ltSUNodUxuQnZiSGxuYjI1UFptWnpaWFJHWVdOMGIzSWdQU0IwYUdsekxuQnZiSGxuYjI1UFptWnpaWFJHWVdOMGIzSXBMQ0IwYUdsekxuQnZiSGxuYjI1UFptWnpaWFJWYm1sMGN5QWhQVDBnTUNBbUppQW9iaTV3YjJ4NVoyOXVUMlptYzJWMFZXNXBkSE1nUFNCMGFHbHpMbkJ2YkhsbmIyNVBabVp6WlhSVmJtbDBjeWtzSUhSb2FYTXViR2x1WlhkcFpIUm9JQ0U5UFNCMmIybGtJREFnSmlZZ2RHaHBjeTVzYVc1bGQybGtkR2dnSVQwOUlERWdKaVlnS0c0dWJHbHVaWGRwWkhSb0lEMGdkR2hwY3k1c2FXNWxkMmxrZEdncExDQjBhR2x6TG1SaGMyaFRhWHBsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1WkdGemFGTnBlbVVnUFNCMGFHbHpMbVJoYzJoVGFYcGxLU3dnZEdocGN5NW5ZWEJUYVhwbElDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dVoyRndVMmw2WlNBOUlIUm9hWE11WjJGd1UybDZaU2tzSUhSb2FYTXVjMk5oYkdVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYmk1elkyRnNaU0E5SUhSb2FYTXVjMk5oYkdVcExDQjBhR2x6TG1ScGRHaGxjbWx1WnlBOVBUMGdJVEFnSmlZZ0tHNHVaR2wwYUdWeWFXNW5JRDBnSVRBcExDQjBhR2x6TG1Gc2NHaGhWR1Z6ZENBK0lEQWdKaVlnS0c0dVlXeHdhR0ZVWlhOMElEMGdkR2hwY3k1aGJIQm9ZVlJsYzNRcExDQjBhR2x6TG1Gc2NHaGhTR0Z6YUNBOVBUMGdJVEFnSmlZZ0tHNHVZV3h3YUdGSVlYTm9JRDBnSVRBcExDQjBhR2x6TG1Gc2NHaGhWRzlEYjNabGNtRm5aU0E5UFQwZ0lUQWdKaVlnS0c0dVlXeHdhR0ZVYjBOdmRtVnlZV2RsSUQwZ0lUQXBMQ0IwYUdsekxuQnlaVzExYkhScGNHeHBaV1JCYkhCb1lTQTlQVDBnSVRBZ0ppWWdLRzR1Y0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoSUQwZ0lUQXBMQ0IwYUdsekxtWnZjbU5sVTJsdVoyeGxVR0Z6Y3lBOVBUMGdJVEFnSmlZZ0tHNHVabTl5WTJWVGFXNW5iR1ZRWVhOeklEMGdJVEFwTENCMGFHbHpMbmRwY21WbWNtRnRaU0E5UFQwZ0lUQWdKaVlnS0c0dWQybHlaV1p5WVcxbElEMGdJVEFwTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0ErSURFZ0ppWWdLRzR1ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dwTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WallYQWdJVDA5SUNKeWIzVnVaQ0lnSmlZZ0tHNHVkMmx5WldaeVlXMWxUR2x1WldOaGNDQTlJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaV05oY0Nrc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRnSVQwOUlDSnliM1Z1WkNJZ0ppWWdLRzR1ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRnUFNCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVLU3dnZEdocGN5NW1iR0YwVTJoaFpHbHVaeUE5UFQwZ0lUQWdKaVlnS0c0dVpteGhkRk5vWVdScGJtY2dQU0FoTUNrc0lIUm9hWE11ZG1semFXSnNaU0E5UFQwZ0lURWdKaVlnS0c0dWRtbHphV0pzWlNBOUlDRXhLU3dnZEdocGN5NTBiMjVsVFdGd2NHVmtJRDA5UFNBaE1TQW1KaUFvYmk1MGIyNWxUV0Z3Y0dWa0lEMGdJVEVwTENCMGFHbHpMbVp2WnlBOVBUMGdJVEVnSmlZZ0tHNHVabTluSUQwZ0lURXBMQ0JQWW1wbFkzUXVhMlY1Y3loMGFHbHpMblZ6WlhKRVlYUmhLUzVzWlc1bmRHZ2dQaUF3SUNZbUlDaHVMblZ6WlhKRVlYUmhJRDBnZEdocGN5NTFjMlZ5UkdGMFlTazdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhU2h5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaElEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QnBiaUJ5S1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnY2x0dlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCakxtMWxkR0ZrWVhSaExDQmhMbkIxYzJnb1l5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnYVNobExuUmxlSFIxY21WektTd2dZU0E5SUdrb1pTNXBiV0ZuWlhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5TG14bGJtZDBhQ0ErSURBZ0ppWWdLRzR1ZEdWNGRIVnlaWE1nUFNCeUtTd2dZUzVzWlc1bmRHZ2dQaUF3SUNZbUlDaHVMbWx0WVdkbGN5QTlJR0VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmpzS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpZ3BMbU52Y0hrb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTVoYldVZ1BTQmxMbTVoYldVc0lIUm9hWE11WW14bGJtUnBibWNnUFNCbExtSnNaVzVrYVc1bkxDQjBhR2x6TG5OcFpHVWdQU0JsTG5OcFpHVXNJSFJvYVhNdWRtVnlkR1Y0UTI5c2IzSnpJRDBnWlM1MlpYSjBaWGhEYjJ4dmNuTXNJSFJvYVhNdWIzQmhZMmwwZVNBOUlHVXViM0JoWTJsMGVTd2dkR2hwY3k1MGNtRnVjM0JoY21WdWRDQTlJR1V1ZEhKaGJuTndZWEpsYm5Rc0lIUm9hWE11WW14bGJtUlRjbU1nUFNCbExtSnNaVzVrVTNKakxDQjBhR2x6TG1Kc1pXNWtSSE4wSUQwZ1pTNWliR1Z1WkVSemRDd2dkR2hwY3k1aWJHVnVaRVZ4ZFdGMGFXOXVJRDBnWlM1aWJHVnVaRVZ4ZFdGMGFXOXVMQ0IwYUdsekxtSnNaVzVrVTNKalFXeHdhR0VnUFNCbExtSnNaVzVrVTNKalFXeHdhR0VzSUhSb2FYTXVZbXhsYm1SRWMzUkJiSEJvWVNBOUlHVXVZbXhsYm1SRWMzUkJiSEJvWVN3Z2RHaHBjeTVpYkdWdVpFVnhkV0YwYVc5dVFXeHdhR0VnUFNCbExtSnNaVzVrUlhGMVlYUnBiMjVCYkhCb1lTd2dkR2hwY3k1a1pYQjBhRVoxYm1NZ1BTQmxMbVJsY0hSb1JuVnVZeXdnZEdocGN5NWtaWEIwYUZSbGMzUWdQU0JsTG1SbGNIUm9WR1Z6ZEN3Z2RHaHBjeTVrWlhCMGFGZHlhWFJsSUQwZ1pTNWtaWEIwYUZkeWFYUmxMQ0IwYUdsekxuTjBaVzVqYVd4WGNtbDBaVTFoYzJzZ1BTQmxMbk4wWlc1amFXeFhjbWwwWlUxaGMyc3NJSFJvYVhNdWMzUmxibU5wYkVaMWJtTWdQU0JsTG5OMFpXNWphV3hHZFc1akxDQjBhR2x6TG5OMFpXNWphV3hTWldZZ1BTQmxMbk4wWlc1amFXeFNaV1lzSUhSb2FYTXVjM1JsYm1OcGJFWjFibU5OWVhOcklEMGdaUzV6ZEdWdVkybHNSblZ1WTAxaGMyc3NJSFJvYVhNdWMzUmxibU5wYkVaaGFXd2dQU0JsTG5OMFpXNWphV3hHWVdsc0xDQjBhR2x6TG5OMFpXNWphV3hhUm1GcGJDQTlJR1V1YzNSbGJtTnBiRnBHWVdsc0xDQjBhR2x6TG5OMFpXNWphV3hhVUdGemN5QTlJR1V1YzNSbGJtTnBiRnBRWVhOekxDQjBhR2x6TG5OMFpXNWphV3hYY21sMFpTQTlJR1V1YzNSbGJtTnBiRmR5YVhSbE93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNWpiR2x3Y0dsdVoxQnNZVzVsY3l3Z2JpQTlJRzUxYkd3N0NpQWdJQ0FnSUNBZ2FXWWdLSFFnSVQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQWdJQ0FnYmlBOUlHNWxkeUJCY25KaGVTaHBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCeUlEMGdNRHNnY2lBaFBUMGdhVHNnS3l0eUtXNWJjbDBnUFNCMFczSmRMbU5zYjI1bEtDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Oc2FYQndhVzVuVUd4aGJtVnpJRDBnYml3Z2RHaHBjeTVqYkdsd1NXNTBaWEp6WldOMGFXOXVJRDBnWlM1amJHbHdTVzUwWlhKelpXTjBhVzl1TENCMGFHbHpMbU5zYVhCVGFHRmtiM2R6SUQwZ1pTNWpiR2x3VTJoaFpHOTNjeXdnZEdocGN5NXphR0ZrYjNkVGFXUmxJRDBnWlM1emFHRmtiM2RUYVdSbExDQjBhR2x6TG1OdmJHOXlWM0pwZEdVZ1BTQmxMbU52Ykc5eVYzSnBkR1VzSUhSb2FYTXVjSEpsWTJsemFXOXVJRDBnWlM1d2NtVmphWE5wYjI0c0lIUm9hWE11Y0c5c2VXZHZiazltWm5ObGRDQTlJR1V1Y0c5c2VXZHZiazltWm5ObGRDd2dkR2hwY3k1d2IyeDVaMjl1VDJabWMyVjBSbUZqZEc5eUlEMGdaUzV3YjJ4NVoyOXVUMlptYzJWMFJtRmpkRzl5TENCMGFHbHpMbkJ2YkhsbmIyNVBabVp6WlhSVmJtbDBjeUE5SUdVdWNHOXNlV2R2Yms5bVpuTmxkRlZ1YVhSekxDQjBhR2x6TG1ScGRHaGxjbWx1WnlBOUlHVXVaR2wwYUdWeWFXNW5MQ0IwYUdsekxtRnNjR2hoVkdWemRDQTlJR1V1WVd4d2FHRlVaWE4wTENCMGFHbHpMbUZzY0doaFNHRnphQ0E5SUdVdVlXeHdhR0ZJWVhOb0xDQjBhR2x6TG1Gc2NHaGhWRzlEYjNabGNtRm5aU0E5SUdVdVlXeHdhR0ZVYjBOdmRtVnlZV2RsTENCMGFHbHpMbkJ5WlcxMWJIUnBjR3hwWldSQmJIQm9ZU0E5SUdVdWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaExDQjBhR2x6TG1admNtTmxVMmx1WjJ4bFVHRnpjeUE5SUdVdVptOXlZMlZUYVc1bmJHVlFZWE56TENCMGFHbHpMblpwYzJsaWJHVWdQU0JsTG5acGMybGliR1VzSUhSb2FYTXVkRzl1WlUxaGNIQmxaQ0E5SUdVdWRHOXVaVTFoY0hCbFpDd2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlFcFRUMDR1Y0dGeWMyVW9TbE5QVGk1emRISnBibWRwWm5rb1pTNTFjMlZ5UkdGMFlTa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVpHbHpjRzl6WlNJS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUgwS0lDQWdJSE5sZENCdVpXVmtjMVZ3WkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnWlNBOVBUMGdJVEFnSmlZZ2RHaHBjeTUyWlhKemFXOXVLeXM3Q2lBZ0lDQjlDbjBzSUZOa0lEMGdld29nSUNBZ1lXeHBZMlZpYkhWbE9pQXhOVGM1TWpNNE15d0tJQ0FnSUdGdWRHbHhkV1YzYUdsMFpUb2dNVFkwTkRRek56VXNDaUFnSUNCaGNYVmhPaUEyTlRVek5Td0tJQ0FnSUdGeGRXRnRZWEpwYm1VNklEZ3pPRGcxTmpRc0NpQWdJQ0JoZW5WeVpUb2dNVFUzT1RReE56VXNDaUFnSUNCaVpXbG5aVG9nTVRZeE1Ua3lOakFzQ2lBZ0lDQmlhWE54ZFdVNklERTJOemN3TWpRMExBb2dJQ0FnWW14aFkyczZJREFzQ2lBZ0lDQmliR0Z1WTJobFpHRnNiVzl1WkRvZ01UWTNOekl3TkRVc0NpQWdJQ0JpYkhWbE9pQXlOVFVzQ2lBZ0lDQmliSFZsZG1sdmJHVjBPaUE1TURVMU1qQXlMQW9nSUNBZ1luSnZkMjQ2SURFd09ESTBNak0wTEFvZ0lDQWdZblZ5YkhsM2IyOWtPaUF4TkRVNU5qSXpNU3dLSUNBZ0lHTmhaR1YwWW14MVpUb2dOakkyTmpVeU9Dd0tJQ0FnSUdOb1lYSjBjbVYxYzJVNklEZ3pPRGd6TlRJc0NpQWdJQ0JqYUc5amIyeGhkR1U2SURFek56ZzVORGN3TEFvZ0lDQWdZMjl5WVd3NklERTJOelEwTWpjeUxBb2dJQ0FnWTI5eWJtWnNiM2RsY21Kc2RXVTZJRFkxT1RFNU9ERXNDaUFnSUNCamIzSnVjMmxzYXpvZ01UWTNOelV6T0Rnc0NpQWdJQ0JqY21sdGMyOXVPaUF4TkRReU16RXdNQ3dLSUNBZ0lHTjVZVzQ2SURZMU5UTTFMQW9nSUNBZ1pHRnlhMkpzZFdVNklERXpPU3dLSUNBZ0lHUmhjbXRqZVdGdU9pQXpOVGN5TXl3S0lDQWdJR1JoY210bmIyeGtaVzV5YjJRNklERXlNRGt5T1RNNUxBb2dJQ0FnWkdGeWEyZHlZWGs2SURFeE1URTVNREUzTEFvZ0lDQWdaR0Z5YTJkeVpXVnVPaUF5TlRZd01Dd0tJQ0FnSUdSaGNtdG5jbVY1T2lBeE1URXhPVEF4Tnl3S0lDQWdJR1JoY210cmFHRnJhVG9nTVRJME16TXlOVGtzQ2lBZ0lDQmtZWEpyYldGblpXNTBZVG9nT1RFd09UWTBNeXdLSUNBZ0lHUmhjbXR2YkdsMlpXZHlaV1Z1T2lBMU5UazNPVGs1TEFvZ0lDQWdaR0Z5YTI5eVlXNW5aVG9nTVRZM05EYzFNakFzQ2lBZ0lDQmtZWEpyYjNKamFHbGtPaUF4TURBME1EQXhNaXdLSUNBZ0lHUmhjbXR5WldRNklEa3hNRGsxTURRc0NpQWdJQ0JrWVhKcmMyRnNiVzl1T2lBeE5UTXdPRFF4TUN3S0lDQWdJR1JoY210elpXRm5jbVZsYmpvZ09UUXhPVGt4T1N3S0lDQWdJR1JoY210emJHRjBaV0pzZFdVNklEUTNNelF6TkRjc0NpQWdJQ0JrWVhKcmMyeGhkR1ZuY21GNU9pQXpNVEF3TkRrMUxBb2dJQ0FnWkdGeWEzTnNZWFJsWjNKbGVUb2dNekV3TURRNU5Td0tJQ0FnSUdSaGNtdDBkWEp4ZFc5cGMyVTZJRFV5T1RRMUxBb2dJQ0FnWkdGeWEzWnBiMnhsZERvZ09UWTVPVFV6T1N3S0lDQWdJR1JsWlhCd2FXNXJPaUF4TmpjeE5qazBOeXdLSUNBZ0lHUmxaWEJ6YTNsaWJIVmxPaUEwT1RFMU1Td0tJQ0FnSUdScGJXZHlZWGs2SURZNU1EZ3lOalVzQ2lBZ0lDQmthVzFuY21WNU9pQTJPVEE0TWpZMUxBb2dJQ0FnWkc5a1oyVnlZbXgxWlRvZ01qQXdNekU1T1N3S0lDQWdJR1pwY21WaWNtbGphem9nTVRFMk56UXhORFlzQ2lBZ0lDQm1iRzl5WVd4M2FHbDBaVG9nTVRZM056VTVNakFzQ2lBZ0lDQm1iM0psYzNSbmNtVmxiam9nTWpJMk16ZzBNaXdLSUNBZ0lHWjFZMmh6YVdFNklERTJOekV4T1RNMUxBb2dJQ0FnWjJGcGJuTmliM0p2T2lBeE5EUTNORFEyTUN3S0lDQWdJR2RvYjNOMGQyaHBkR1U2SURFMk16RTJOamN4TEFvZ0lDQWdaMjlzWkRvZ01UWTNOalkzTWpBc0NpQWdJQ0JuYjJ4a1pXNXliMlE2SURFME16STVNVEl3TEFvZ0lDQWdaM0poZVRvZ09EUXlNVFV3TkN3S0lDQWdJR2R5WldWdU9pQXpNamMyT0N3S0lDQWdJR2R5WldWdWVXVnNiRzkzT2lBeE1UUXdNekExTlN3S0lDQWdJR2R5WlhrNklEZzBNakUxTURRc0NpQWdJQ0JvYjI1bGVXUmxkem9nTVRVM09UUXhOakFzQ2lBZ0lDQm9iM1J3YVc1ck9pQXhOamN6T0RjME1Dd0tJQ0FnSUdsdVpHbGhibkpsWkRvZ01UTTBOVGcxTWpRc0NpQWdJQ0JwYm1ScFoyODZJRFE1TVRVek16QXNDaUFnSUNCcGRtOXllVG9nTVRZM056Y3lNREFzQ2lBZ0lDQnJhR0ZyYVRvZ01UVTNPRGMyTmpBc0NpQWdJQ0JzWVhabGJtUmxjam9nTVRVeE16STBNVEFzQ2lBZ0lDQnNZWFpsYm1SbGNtSnNkWE5vT2lBeE5qYzNNek0yTlN3S0lDQWdJR3hoZDI1bmNtVmxiam9nT0RFNU1EazNOaXdLSUNBZ0lHeGxiVzl1WTJocFptWnZiam9nTVRZM056VTRPRFVzQ2lBZ0lDQnNhV2RvZEdKc2RXVTZJREV4TXprek1qVTBMQW9nSUNBZ2JHbG5hSFJqYjNKaGJEb2dNVFUzTmpFMU16WXNDaUFnSUNCc2FXZG9kR041WVc0NklERTBOelExTlRrNUxBb2dJQ0FnYkdsbmFIUm5iMnhrWlc1eWIyUjVaV3hzYjNjNklERTJORFE0TWpFd0xBb2dJQ0FnYkdsbmFIUm5jbUY1T2lBeE16ZzRNak15TXl3S0lDQWdJR3hwWjJoMFozSmxaVzQ2SURrME9UZ3lOVFlzQ2lBZ0lDQnNhV2RvZEdkeVpYazZJREV6T0RneU16SXpMQW9nSUNBZ2JHbG5hSFJ3YVc1ck9pQXhOamMxT0RRMk5Td0tJQ0FnSUd4cFoyaDBjMkZzYlc5dU9pQXhOamMxTWpjMk1pd0tJQ0FnSUd4cFoyaDBjMlZoWjNKbFpXNDZJREl4TkRJNE9UQXNDaUFnSUNCc2FXZG9kSE5yZVdKc2RXVTZJRGc1TURBek5EWXNDaUFnSUNCc2FXZG9kSE5zWVhSbFozSmhlVG9nTnpnek16YzFNeXdLSUNBZ0lHeHBaMmgwYzJ4aGRHVm5jbVY1T2lBM09ETXpOelV6TEFvZ0lDQWdiR2xuYUhSemRHVmxiR0pzZFdVNklERXhOVGcwTnpNMExBb2dJQ0FnYkdsbmFIUjVaV3hzYjNjNklERTJOemMzTVRnMExBb2dJQ0FnYkdsdFpUb2dOalV5T0RBc0NpQWdJQ0JzYVcxbFozSmxaVzQ2SURNek1qa3pNekFzQ2lBZ0lDQnNhVzVsYmpvZ01UWTBORFUyTnpBc0NpQWdJQ0J0WVdkbGJuUmhPaUF4TmpjeE1Ua3pOU3dLSUNBZ0lHMWhjbTl2YmpvZ09ETTRPRFl3T0N3S0lDQWdJRzFsWkdsMWJXRnhkV0Z0WVhKcGJtVTZJRFkzTXpjek1qSXNDaUFnSUNCdFpXUnBkVzFpYkhWbE9pQXlNRFVzQ2lBZ0lDQnRaV1JwZFcxdmNtTm9hV1E2SURFeU1qRXhOalkzTEFvZ0lDQWdiV1ZrYVhWdGNIVnljR3hsT2lBNU5qWXlOamd6TEFvZ0lDQWdiV1ZrYVhWdGMyVmhaM0psWlc0NklETTVOemd3T1Rjc0NpQWdJQ0J0WldScGRXMXpiR0YwWldKc2RXVTZJRGd3T0RjM09UQXNDaUFnSUNCdFpXUnBkVzF6Y0hKcGJtZG5jbVZsYmpvZ05qUXhOVFFzQ2lBZ0lDQnRaV1JwZFcxMGRYSnhkVzlwYzJVNklEUTNOekl6TURBc0NpQWdJQ0J0WldScGRXMTJhVzlzWlhSeVpXUTZJREV6TURRM01UY3pMQW9nSUNBZ2JXbGtibWxuYUhSaWJIVmxPaUF4TmpRME9URXlMQW9nSUNBZ2JXbHVkR055WldGdE9pQXhOakV5TVRnMU1Dd0tJQ0FnSUcxcGMzUjVjbTl6WlRvZ01UWTNOekF5TnpNc0NpQWdJQ0J0YjJOallYTnBiam9nTVRZM056QXlNamtzQ2lBZ0lDQnVZWFpoYW05M2FHbDBaVG9nTVRZM05qZzJPRFVzQ2lBZ0lDQnVZWFo1T2lBeE1qZ3NDaUFnSUNCdmJHUnNZV05sT2lBeE5qWTBNelUxT0N3S0lDQWdJRzlzYVhabE9pQTROREl4TXpjMkxBb2dJQ0FnYjJ4cGRtVmtjbUZpT2lBM01EUTROek01TEFvZ0lDQWdiM0poYm1kbE9pQXhOamMxTXpreU1Dd0tJQ0FnSUc5eVlXNW5aWEpsWkRvZ01UWTNNamt6TkRRc0NpQWdJQ0J2Y21Ob2FXUTZJREUwTXpFMU56TTBMQW9nSUNBZ2NHRnNaV2R2YkdSbGJuSnZaRG9nTVRVMk5UY3hNekFzQ2lBZ0lDQndZV3hsWjNKbFpXNDZJREV3TURJMU9EZ3dMQW9nSUNBZ2NHRnNaWFIxY25GMWIybHpaVG9nTVRFMU1qazVOallzQ2lBZ0lDQndZV3hsZG1sdmJHVjBjbVZrT2lBeE5ETTRNVEl3TXl3S0lDQWdJSEJoY0dGNVlYZG9hWEE2SURFMk56Y3pNRGMzTEFvZ0lDQWdjR1ZoWTJod2RXWm1PaUF4TmpjMk56WTNNeXdLSUNBZ0lIQmxjblU2SURFek5EWTRPVGt4TEFvZ0lDQWdjR2x1YXpvZ01UWTNOakV3TXpVc0NpQWdJQ0J3YkhWdE9pQXhORFV5TkRZek55d0tJQ0FnSUhCdmQyUmxjbUpzZFdVNklERXhOVGt4T1RFd0xBb2dJQ0FnY0hWeWNHeGxPaUE0TXpnNE56TTJMQW9nSUNBZ2NtVmlaV05qWVhCMWNuQnNaVG9nTmpZNU56ZzRNU3dLSUNBZ0lISmxaRG9nTVRZM01URTJPREFzQ2lBZ0lDQnliM041WW5KdmQyNDZJREV5TXpVM05URTVMQW9nSUNBZ2NtOTVZV3hpYkhWbE9pQTBNamcyT1RRMUxBb2dJQ0FnYzJGa1pHeGxZbkp2ZDI0NklEa3hNamN4T0Rjc0NpQWdJQ0J6WVd4dGIyNDZJREUyTkRFMk9EZ3lMQW9nSUNBZ2MyRnVaSGxpY205M2Jqb2dNVFl3TXpJNE5qUXNDaUFnSUNCelpXRm5jbVZsYmpvZ016QTFNRE15Tnl3S0lDQWdJSE5sWVhOb1pXeHNPaUF4TmpjM05EWXpPQ3dLSUNBZ0lITnBaVzV1WVRvZ01UQTFNRFkzT1Rjc0NpQWdJQ0J6YVd4MlpYSTZJREV5TmpNeU1qVTJMQW9nSUNBZ2MydDVZbXgxWlRvZ09Ea3dNRE16TVN3S0lDQWdJSE5zWVhSbFlteDFaVG9nTmprM01EQTJNU3dLSUNBZ0lITnNZWFJsWjNKaGVUb2dOek0zTWprME5Dd0tJQ0FnSUhOc1lYUmxaM0psZVRvZ056TTNNamswTkN3S0lDQWdJSE51YjNjNklERTJOemMxT1RNd0xBb2dJQ0FnYzNCeWFXNW5aM0psWlc0NklEWTFOREEzTEFvZ0lDQWdjM1JsWld4aWJIVmxPaUEwTmpJd09UZ3dMQW9nSUNBZ2RHRnVPaUF4TXpnd09EYzRNQ3dLSUNBZ0lIUmxZV3c2SURNeU9EazJMQW9nSUNBZ2RHaHBjM1JzWlRvZ01UUXlNRFE0T0Rnc0NpQWdJQ0IwYjIxaGRHODZJREUyTnpNM01EazFMQW9nSUNBZ2RIVnljWFZ2YVhObE9pQTBNalV4T0RVMkxBb2dJQ0FnZG1sdmJHVjBPaUF4TlRZek1UQTROaXdLSUNBZ0lIZG9aV0YwT2lBeE5qRXhNek16TVN3S0lDQWdJSGRvYVhSbE9pQXhOamMzTnpJeE5Td0tJQ0FnSUhkb2FYUmxjMjF2YTJVNklERTJNVEU1TWpnMUxBb2dJQ0FnZVdWc2JHOTNPaUF4TmpjM05qazJNQ3dLSUNBZ0lIbGxiR3h2ZDJkeVpXVnVPaUF4TURFME5UQTNOQXA5TENCRGJpQTlJSHNLSUNBZ0lHZzZJREFzQ2lBZ0lDQnpPaUF3TEFvZ0lDQWdiRG9nTUFwOUxDQkxjeUE5SUhzS0lDQWdJR2c2SURBc0NpQWdJQ0J6T2lBd0xBb2dJQ0FnYkRvZ01BcDlPd3BtZFc1amRHbHZiaUJ4WVNoek1Td2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJSFFnUENBd0lDWW1JQ2gwSUNzOUlERXBMQ0IwSUQ0Z01TQW1KaUFvZENBdFBTQXhLU3dnZENBOElERWdMeUEySUQ4Z2N6RWdLeUFvWlNBdElITXhLU0FxSURZZ0tpQjBJRG9nZENBOElERWdMeUF5SUQ4Z1pTQTZJSFFnUENBeUlDOGdNeUEvSUhNeElDc2dLR1VnTFNCek1Ta2dLaUEySUNvZ0tESWdMeUF6SUMwZ2RDa2dPaUJ6TVRzS2ZRcDJZWElnY0dVZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBjME52Ykc5eUlEMGdJVEFzSUhSb2FYTXVjaUE5SURFc0lIUm9hWE11WnlBOUlERXNJSFJvYVhNdVlpQTlJREVzSUhSb2FYTXVjMlYwS0dVc0lIUXNJRzRwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RDQTlQVDBnZG05cFpDQXdJQ1ltSUc0Z1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUdVN0NpQWdJQ0FnSUNBZ0lDQWdJR2tnSmlZZ2FTNXBjME52Ykc5eUlEOGdkR2hwY3k1amIzQjVLR2twSURvZ2RIbHdaVzltSUdrZ1BUMGdJbTUxYldKbGNpSWdQeUIwYUdsekxuTmxkRWhsZUNocEtTQTZJSFI1Y0dWdlppQnBJRDA5SUNKemRISnBibWNpSUNZbUlIUm9hWE11YzJWMFUzUjViR1VvYVNrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhSb2FYTXVjMlYwVWtkQ0tHVXNJSFFzSUc0cE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFUyTmhiR0Z5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5SUQwZ1pTd2dkR2hwY3k1bklEMGdaU3dnZEdocGN5NWlJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFaGxlQ2hsTENCMElEMGdkblFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlNBOUlFMWhkR2d1Wm14dmIzSW9aU2tzSUhSb2FYTXVjaUE5SUNobElENCtJREUySUNZZ01qVTFLU0F2SURJMU5Td2dkR2hwY3k1bklEMGdLR1VnUGo0Z09DQW1JREkxTlNrZ0x5QXlOVFVzSUhSb2FYTXVZaUE5SUNobElDWWdNalUxS1NBdklESTFOU3dnVVdVdWRHOVhiM0pyYVc1blEyOXNiM0pUY0dGalpTaDBhR2x6TENCMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRkpIUWlobExDQjBMQ0J1TENCcElEMGdVV1V1ZDI5eWEybHVaME52Ykc5eVUzQmhZMlVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlJRDBnWlN3Z2RHaHBjeTVuSUQwZ2RDd2dkR2hwY3k1aUlEMGdiaXdnVVdVdWRHOVhiM0pyYVc1blEyOXNiM0pUY0dGalpTaDBhR2x6TENCcEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRWhUVENobExDQjBMQ0J1TENCcElEMGdVV1V1ZDI5eWEybHVaME52Ykc5eVUzQmhZMlVwSUhzS0lDQWdJQ0FnSUNCcFppQW9aU0E5SUZsaktHVXNJREVwTENCMElEMGdZM1FvZEN3Z01Dd2dNU2tzSUc0Z1BTQmpkQ2h1TENBd0xDQXhLU3dnZENBOVBUMGdNQ2tnZEdocGN5NXlJRDBnZEdocGN5NW5JRDBnZEdocGN5NWlJRDBnYmpzS0lDQWdJQ0FnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElnUFNCdUlEdzlJQzQxSUQ4Z2JpQXFJQ2d4SUNzZ2RDa2dPaUJ1SUNzZ2RDQXRJRzRnS2lCMExDQmhJRDBnTWlBcUlHNGdMU0J5T3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5JZ1BTQnhZU2hoTENCeUxDQmxJQ3NnTVNBdklETXBMQ0IwYUdsekxtY2dQU0J4WVNoaExDQnlMQ0JsS1N3Z2RHaHBjeTVpSUQwZ2NXRW9ZU3dnY2l3Z1pTQXRJREVnTHlBektUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlGRmxMblJ2VjI5eWEybHVaME52Ykc5eVUzQmhZMlVvZEdocGN5d2dhU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSVGRIbHNaU2hsTENCMElEMGdkblFwSUhzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdUtISXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NpQWhQVDBnZG05cFpDQXdJQ1ltSUhCaGNuTmxSbXh2WVhRb2Npa2dQQ0F4SUNZbUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRMjlzYjNJNklFRnNjR2hoSUdOdmJYQnZibVZ1ZENCdlppQWlJQ3NnWlNBcklDSWdkMmxzYkNCaVpTQnBaMjV2Y21Wa0xpSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2FUc0tJQ0FnSUNBZ0lDQnBaaUFvYVNBOUlDOWVLRngzS3lsY0tDaGJYbHdwWFNvcFhDa3ZMbVY0WldNb1pTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElzSUdFZ1BTQnBXekZkTENCdklEMGdhVnN5WFRzS0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0tHRXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWNtZGlJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0luSm5ZbUVpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwZ0wxNWNjeW9vWEdRcktWeHpLaXhjY3lvb1hHUXJLVnh6S2l4Y2N5b29YR1FyS1Z4ektpZy9PaXhjY3lvb1hHUXFYQzQvWEdRcktWeHpLaWsvSkM4dVpYaGxZeWh2S1NrZ2NtVjBkWEp1SUc0b2NsczBYU2tzSUhSb2FYTXVjMlYwVWtkQ0tFMWhkR2d1YldsdUtESTFOU3dnY0dGeWMyVkpiblFvY2xzeFhTd2dNVEFwS1NBdklESTFOU3dnVFdGMGFDNXRhVzRvTWpVMUxDQndZWEp6WlVsdWRDaHlXekpkTENBeE1Da3BJQzhnTWpVMUxDQk5ZWFJvTG0xcGJpZ3lOVFVzSUhCaGNuTmxTVzUwS0hKYk0xMHNJREV3S1NrZ0x5QXlOVFVzSUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMGdMMTVjY3lvb1hHUXJLVndsWEhNcUxGeHpLaWhjWkNzcFhDVmNjeW9zWEhNcUtGeGtLeWxjSlZ4ektpZy9PaXhjY3lvb1hHUXFYQzQvWEdRcktWeHpLaWsvSkM4dVpYaGxZeWh2S1NrZ2NtVjBkWEp1SUc0b2NsczBYU2tzSUhSb2FYTXVjMlYwVWtkQ0tFMWhkR2d1YldsdUtERXdNQ3dnY0dGeWMyVkpiblFvY2xzeFhTd2dNVEFwS1NBdklERXdNQ3dnVFdGMGFDNXRhVzRvTVRBd0xDQndZWEp6WlVsdWRDaHlXekpkTENBeE1Da3BJQzhnTVRBd0xDQk5ZWFJvTG0xcGJpZ3hNREFzSUhCaGNuTmxTVzUwS0hKYk0xMHNJREV3S1NrZ0x5QXhNREFzSUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpYUhOc0lqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSW1oemJHRWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJRDBnTDE1Y2N5b29YR1FxWEM0L1hHUXJLVnh6S2l4Y2N5b29YR1FxWEM0L1hHUXJLVndsWEhNcUxGeHpLaWhjWkNwY0xqOWNaQ3NwWENWY2N5b29Qem9zWEhNcUtGeGtLbHd1UDF4a0t5bGNjeW9wUHlRdkxtVjRaV01vYnlrcElISmxkSFZ5YmlCdUtISmJORjBwTENCMGFHbHpMbk5sZEVoVFRDaHdZWEp6WlVac2IyRjBLSEpiTVYwcElDOGdNell3TENCd1lYSnpaVVpzYjJGMEtISmJNbDBwSUM4Z01UQXdMQ0J3WVhKelpVWnNiMkYwS0hKYk0xMHBJQzhnTVRBd0xDQjBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1RGIyeHZjam9nVlc1cmJtOTNiaUJqYjJ4dmNpQnRiMlJsYkNBaUlDc2daU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2tnUFNBdlhsd2pLRnRCTFVaaExXWmNaRjByS1NRdkxtVjRaV01vWlNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0JwV3pGZExDQmhJRDBnY2k1c1pXNW5kR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoSUQwOVBTQXpLU0J5WlhSMWNtNGdkR2hwY3k1elpYUlNSMElvY0dGeWMyVkpiblFvY2k1amFHRnlRWFFvTUNrc0lERTJLU0F2SURFMUxDQndZWEp6WlVsdWRDaHlMbU5vWVhKQmRDZ3hLU3dnTVRZcElDOGdNVFVzSUhCaGNuTmxTVzUwS0hJdVkyaGhja0YwS0RJcExDQXhOaWtnTHlBeE5Td2dkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoSUQwOVBTQTJLU0J5WlhSMWNtNGdkR2hwY3k1elpYUklaWGdvY0dGeWMyVkpiblFvY2l3Z01UWXBMQ0IwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVEYjJ4dmNqb2dTVzUyWVd4cFpDQm9aWGdnWTI5c2IzSWdJaUFySUdVcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9aU0FtSmlCbExteGxibWQwYUNBK0lEQXBJSEpsZEhWeWJpQjBhR2x6TG5ObGRFTnZiRzl5VG1GdFpTaGxMQ0IwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVOdmJHOXlUbUZ0WlNobExDQjBJRDBnZG5RcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlGTmtXMlV1ZEc5TWIzZGxja05oYzJVb0tWMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNGdJVDA5SUhadmFXUWdNQ0EvSUhSb2FYTXVjMlYwU0dWNEtHNHNJSFFwSURvZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNURiMnh2Y2pvZ1ZXNXJibTkzYmlCamIyeHZjaUFpSUNzZ1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9kR2hwY3k1eUxDQjBhR2x6TG1jc0lIUm9hWE11WWlrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5SUQwZ1pTNXlMQ0IwYUdsekxtY2dQU0JsTG1jc0lIUm9hWE11WWlBOUlHVXVZaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hsVFVrZENWRzlNYVc1bFlYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSWdQU0JZYVNobExuSXBMQ0IwYUdsekxtY2dQU0JZYVNobExtY3BMQ0IwYUdsekxtSWdQU0JZYVNobExtSXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVV4cGJtVmhjbFJ2VTFKSFFpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNpQTlJRVJoS0dVdWNpa3NJSFJvYVhNdVp5QTlJRVJoS0dVdVp5a3NJSFJvYVhNdVlpQTlJRVJoS0dVdVlpa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiMjUyWlhKMFUxSkhRbFJ2VEdsdVpXRnlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnZjSGxUVWtkQ1ZHOU1hVzVsWVhJb2RHaHBjeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjI1MlpYSjBUR2x1WldGeVZHOVRVa2RDS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52Y0hsTWFXNWxZWEpVYjFOU1IwSW9kR2hwY3lrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUklaWGdvWlNBOUlIWjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRkZsTG1aeWIyMVhiM0pyYVc1blEyOXNiM0pUY0dGalpTaFVkQzVqYjNCNUtIUm9hWE1wTENCbEtTd2dUV0YwYUM1eWIzVnVaQ2hqZENoVWRDNXlJQ29nTWpVMUxDQXdMQ0F5TlRVcEtTQXFJRFkxTlRNMklDc2dUV0YwYUM1eWIzVnVaQ2hqZENoVWRDNW5JQ29nTWpVMUxDQXdMQ0F5TlRVcEtTQXFJREkxTmlBcklFMWhkR2d1Y205MWJtUW9ZM1FvVkhRdVlpQXFJREkxTlN3Z01Dd2dNalUxS1NrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJJWlhoVGRISnBibWNvWlNBOUlIWjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ2dpTURBd01EQXdJaUFySUhSb2FYTXVaMlYwU0dWNEtHVXBMblJ2VTNSeWFXNW5LREUyS1NrdWMyeHBZMlVvTFRZcE93b2dJQ0FnZlFvZ0lDQWdaMlYwU0ZOTUtHVXNJSFFnUFNCUlpTNTNiM0pyYVc1blEyOXNiM0pUY0dGalpTa2dld29nSUNBZ0lDQWdJRkZsTG1aeWIyMVhiM0pyYVc1blEyOXNiM0pUY0dGalpTaFVkQzVqYjNCNUtIUm9hWE1wTENCMEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlGUjBMbklzSUdrZ1BTQlVkQzVuTENCeUlEMGdWSFF1WWl3Z1lTQTlJRTFoZEdndWJXRjRLRzRzSUdrc0lISXBMQ0J2SUQwZ1RXRjBhQzV0YVc0b2Jpd2dhU3dnY2lrc0lHTXNJR3dzSUdnZ1BTQW9ieUFySUdFcElDOGdNanNLSUNBZ0lDQWdJQ0JwWmlBb2J5QTlQVDBnWVNrZ1l5QTlJREFzSUd3Z1BTQXdPd29nSUNBZ0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJR0VnTFNCdk93b2dJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29iQ0E5SUdnZ1BEMGdMalVnUHlCMUlDOGdLR0VnS3lCdktTQTZJSFVnTHlBb01pQXRJR0VnTFNCdktTd2dZU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElHNDZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXlBOUlDaHBJQzBnY2lrZ0x5QjFJQ3NnS0drZ1BDQnlJRDhnTmlBNklEQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCcE9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR01nUFNBb2NpQXRJRzRwSUM4Z2RTQXJJREk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElISTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXlBOUlDaHVJQzBnYVNrZ0x5QjFJQ3NnTkRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCaklDODlJRFk3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG1nZ1BTQmpMQ0JsTG5NZ1BTQnNMQ0JsTG13Z1BTQm9MQ0JsT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVa2RDS0dVc0lIUWdQU0JSWlM1M2IzSnJhVzVuUTI5c2IzSlRjR0ZqWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCUlpTNW1jbTl0VjI5eWEybHVaME52Ykc5eVUzQmhZMlVvVkhRdVkyOXdlU2gwYUdsektTd2dkQ2tzSUdVdWNpQTlJRlIwTG5Jc0lHVXVaeUE5SUZSMExtY3NJR1V1WWlBOUlGUjBMbUlzSUdVN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJUZEhsc1pTaGxJRDBnZG5RcElIc0tJQ0FnSUNBZ0lDQlJaUzVtY205dFYyOXlhMmx1WjBOdmJHOXlVM0JoWTJVb1ZIUXVZMjl3ZVNoMGFHbHpLU3dnWlNrN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCVWRDNXlMQ0J1SUQwZ1ZIUXVaeXdnYVNBOUlGUjBMbUk3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1VnSVQwOUlIWjBJRDhnWUdOdmJHOXlLQ1I3WlgwZ0pIdDBMblJ2Um1sNFpXUW9NeWw5SUNSN2JpNTBiMFpwZUdWa0tETXBmU0FrZTJrdWRHOUdhWGhsWkNnektYMHBZQ0E2SUdCeVoySW9KSHROWVhSb0xuSnZkVzVrS0hRZ0tpQXlOVFVwZlN3a2UwMWhkR2d1Y205MWJtUW9iaUFxSURJMU5TbDlMQ1I3VFdGMGFDNXliM1Z1WkNocElDb2dNalUxS1gwcFlEc0tJQ0FnSUgwS0lDQWdJRzltWm5ObGRFaFRUQ2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBTRk5NS0VOdUtTd2dkR2hwY3k1elpYUklVMHdvUTI0dWFDQXJJR1VzSUVOdUxuTWdLeUIwTENCRGJpNXNJQ3NnYmlrN0NpQWdJQ0I5Q2lBZ0lDQmhaR1FvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnS3owZ1pTNXlMQ0IwYUdsekxtY2dLejBnWlM1bkxDQjBhR2x6TG1JZ0t6MGdaUzVpTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVdSa1EyOXNiM0p6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eUlEMGdaUzV5SUNzZ2RDNXlMQ0IwYUdsekxtY2dQU0JsTG1jZ0t5QjBMbWNzSUhSb2FYTXVZaUE5SUdVdVlpQXJJSFF1WWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pGTmpZV3hoY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y2lBclBTQmxMQ0IwYUdsekxtY2dLejBnWlN3Z2RHaHBjeTVpSUNzOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpkV0lvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnUFNCTllYUm9MbTFoZUNnd0xDQjBhR2x6TG5JZ0xTQmxMbklwTENCMGFHbHpMbWNnUFNCTllYUm9MbTFoZUNnd0xDQjBhR2x6TG1jZ0xTQmxMbWNwTENCMGFHbHpMbUlnUFNCTllYUm9MbTFoZUNnd0xDQjBhR2x6TG1JZ0xTQmxMbUlwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnS2owZ1pTNXlMQ0IwYUdsekxtY2dLajBnWlM1bkxDQjBhR2x6TG1JZ0tqMGdaUzVpTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGxUWTJGc1lYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSWdLajBnWlN3Z2RHaHBjeTVuSUNvOUlHVXNJSFJvYVhNdVlpQXFQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYkdWeWNDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjaUFyUFNBb1pTNXlJQzBnZEdocGN5NXlLU0FxSUhRc0lIUm9hWE11WnlBclBTQW9aUzVuSUMwZ2RHaHBjeTVuS1NBcUlIUXNJSFJvYVhNdVlpQXJQU0FvWlM1aUlDMGdkR2hwY3k1aUtTQXFJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JzWlhKd1EyOXNiM0p6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlJRDBnWlM1eUlDc2dLSFF1Y2lBdElHVXVjaWtnS2lCdUxDQjBhR2x6TG1jZ1BTQmxMbWNnS3lBb2RDNW5JQzBnWlM1bktTQXFJRzRzSUhSb2FYTXVZaUE5SUdVdVlpQXJJQ2gwTG1JZ0xTQmxMbUlwSUNvZ2Jpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHeGxjbkJJVTB3b1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaMlYwU0ZOTUtFTnVLU3dnWlM1blpYUklVMHdvUzNNcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2VYTW9RMjR1YUN3Z1MzTXVhQ3dnZENrc0lHa2dQU0I1Y3loRGJpNXpMQ0JMY3k1ekxDQjBLU3dnY2lBOUlIbHpLRU51TG13c0lFdHpMbXdzSUhRcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZEVoVFRDaHVMQ0JwTENCeUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxV1pXTjBiM0l6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5SUQwZ1pTNTRMQ0IwYUdsekxtY2dQU0JsTG5rc0lIUm9hWE11WWlBOUlHVXVlaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TXlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5Jc0lHNGdQU0IwYUdsekxtY3NJR2tnUFNCMGFHbHpMbUlzSUhJZ1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5JZ1BTQnlXekJkSUNvZ2RDQXJJSEpiTTEwZ0tpQnVJQ3NnY2xzMlhTQXFJR2tzSUhSb2FYTXVaeUE5SUhKYk1WMGdLaUIwSUNzZ2NsczBYU0FxSUc0Z0t5QnlXemRkSUNvZ2FTd2dkR2hwY3k1aUlEMGdjbHN5WFNBcUlIUWdLeUJ5V3pWZElDb2diaUFySUhKYk9GMGdLaUJwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhGMVlXeHpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1eUlEMDlQU0IwYUdsekxuSWdKaVlnWlM1bklEMDlQU0IwYUdsekxtY2dKaVlnWlM1aUlEMDlQU0IwYUdsekxtSTdDaUFnSUNCOUNpQWdJQ0JtY205dFFYSnlZWGtvWlN3Z2RDQTlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlJRDBnWlZ0MFhTd2dkR2hwY3k1bklEMGdaVnQwSUNzZ01WMHNJSFJvYVhNdVlpQTlJR1ZiZENBcklESmRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlCY25KaGVTaGxJRDBnVzEwc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0IwYUdsekxuSXNJR1ZiZENBcklERmRJRDBnZEdocGN5NW5MQ0JsVzNRZ0t5QXlYU0E5SUhSb2FYTXVZaXdnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnUFNCbExtZGxkRmdvZENrc0lIUm9hWE11WnlBOUlHVXVaMlYwV1NoMEtTd2dkR2hwY3k1aUlEMGdaUzVuWlhSYUtIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRFaGxlQ2dwT3dvZ0lDQWdmUW9nSUNBZ0tsdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZEtDa2dld29nSUNBZ0lDQWdJSGxwWld4a0lIUm9hWE11Y2l3Z2VXbGxiR1FnZEdocGN5NW5MQ0I1YVdWc1pDQjBhR2x6TG1JN0NpQWdJQ0I5Q24wc0lGUjBJRDBnYm1WM0lIQmxPd3B3WlM1T1FVMUZVeUE5SUZOa093cDJZWElnVTI0Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdKMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTk5aWE5vUW1GemFXTk5ZWFJsY21saGJDQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlUV1Z6YUVKaGMybGpUV0YwWlhKcFlXd2lMQ0IwYUdsekxtTnZiRzl5SUQwZ2JtVjNJSEJsS0RFMk56YzNNakUxS1N3Z2RHaHBjeTV0WVhBZ1BTQnVkV3hzTENCMGFHbHpMbXhwWjJoMFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1c2FXZG9kRTFoY0VsdWRHVnVjMmwwZVNBOUlERXNJSFJvYVhNdVlXOU5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtRnZUV0Z3U1c1MFpXNXphWFI1SUQwZ01Td2dkR2hwY3k1emNHVmpkV3hoY2sxaGNDQTlJRzUxYkd3c0lIUm9hWE11WVd4d2FHRk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtVnVkazFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZMjl0WW1sdVpTQTlJSGhoTENCMGFHbHpMbkpsWm14bFkzUnBkbWwwZVNBOUlERXNJSFJvYVhNdWNtVm1jbUZqZEdsdmJsSmhkR2x2SUQwZ0xqazRMQ0IwYUdsekxuZHBjbVZtY21GdFpTQTlJQ0V4TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SURFc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ0E5SUNKeWIzVnVaQ0lzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WldwdmFXNGdQU0FpY205MWJtUWlMQ0IwYUdsekxtWnZaeUE5SUNFd0xDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbU52Ykc5eUxtTnZjSGtvWlM1amIyeHZjaWtzSUhSb2FYTXViV0Z3SUQwZ1pTNXRZWEFzSUhSb2FYTXViR2xuYUhSTllYQWdQU0JsTG14cFoyaDBUV0Z3TENCMGFHbHpMbXhwWjJoMFRXRndTVzUwWlc1emFYUjVJRDBnWlM1c2FXZG9kRTFoY0VsdWRHVnVjMmwwZVN3Z2RHaHBjeTVoYjAxaGNDQTlJR1V1WVc5TllYQXNJSFJvYVhNdVlXOU5ZWEJKYm5SbGJuTnBkSGtnUFNCbExtRnZUV0Z3U1c1MFpXNXphWFI1TENCMGFHbHpMbk53WldOMWJHRnlUV0Z3SUQwZ1pTNXpjR1ZqZFd4aGNrMWhjQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJR1V1WVd4d2FHRk5ZWEFzSUhSb2FYTXVaVzUyVFdGd0lEMGdaUzVsYm5aTllYQXNJSFJvYVhNdVkyOXRZbWx1WlNBOUlHVXVZMjl0WW1sdVpTd2dkR2hwY3k1eVpXWnNaV04wYVhacGRIa2dQU0JsTG5KbFpteGxZM1JwZG1sMGVTd2dkR2hwY3k1eVpXWnlZV04wYVc5dVVtRjBhVzhnUFNCbExuSmxabkpoWTNScGIyNVNZWFJwYnl3Z2RHaHBjeTUzYVhKbFpuSmhiV1VnUFNCbExuZHBjbVZtY21GdFpTd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxkMmxrZEdnZ1BTQmxMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsWTJGd0lEMGdaUzUzYVhKbFpuSmhiV1ZNYVc1bFkyRndMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVZxYjJsdUlEMGdaUzUzYVhKbFpuSmhiV1ZNYVc1bGFtOXBiaXdnZEdocGN5NW1iMmNnUFNCbExtWnZaeXdnZEdocGN6c0tJQ0FnSUgwS2ZTd2dYMjRnUFNCd2NDZ3BPd3BtZFc1amRHbHZiaUJ3Y0NncElIc0tJQ0FnSUd4bGRDQnpNU0E5SUc1bGR5QkJjbkpoZVVKMVptWmxjaWcwS1N3Z1pTQTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29jekVwTENCMElEMGdibVYzSUZWcGJuUXpNa0Z5Y21GNUtITXhLU3dnYmlBOUlHNWxkeUJWYVc1ME16SkJjbkpoZVNnMU1USXBMQ0JwSUQwZ2JtVjNJRlZwYm5Rek1rRnljbUY1S0RVeE1pazdDaUFnSUNCbWIzSW9iR1YwSUdNZ1BTQXdPeUJqSUR3Z01qVTJPeUFySzJNcGV3b2dJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1l5QXRJREV5TnpzS0lDQWdJQ0FnSUNCc0lEd2dMVEkzSUQ4Z0tHNWJZMTBnUFNBd0xDQnVXMk1nZkNBeU5UWmRJRDBnTXpJM05qZ3NJR2xiWTEwZ1BTQXlOQ3dnYVZ0aklId2dNalUyWFNBOUlESTBLU0E2SUd3Z1BDQXRNVFFnUHlBb2JsdGpYU0E5SURFd01qUWdQajRnTFd3Z0xTQXhOQ3dnYmx0aklId2dNalUyWFNBOUlERXdNalFnUGo0Z0xXd2dMU0F4TkNCOElETXlOelk0TENCcFcyTmRJRDBnTFd3Z0xTQXhMQ0JwVzJNZ2ZDQXlOVFpkSUQwZ0xXd2dMU0F4S1NBNklHd2dQRDBnTVRVZ1B5QW9ibHRqWFNBOUlHd2dLeUF4TlNBOFBDQXhNQ3dnYmx0aklId2dNalUyWFNBOUlHd2dLeUF4TlNBOFBDQXhNQ0I4SURNeU56WTRMQ0JwVzJOZElEMGdNVE1zSUdsYll5QjhJREkxTmwwZ1BTQXhNeWtnT2lCc0lEd2dNVEk0SUQ4Z0tHNWJZMTBnUFNBek1UYzBOQ3dnYmx0aklId2dNalUyWFNBOUlEWTBOVEV5TENCcFcyTmRJRDBnTWpRc0lHbGJZeUI4SURJMU5sMGdQU0F5TkNrZ09pQW9ibHRqWFNBOUlETXhOelEwTENCdVcyTWdmQ0F5TlRaZElEMGdOalExTVRJc0lHbGJZMTBnUFNBeE15d2dhVnRqSUh3Z01qVTJYU0E5SURFektUc0tJQ0FnSUgwS0lDQWdJR3hsZENCeUlEMGdibVYzSUZWcGJuUXpNa0Z5Y21GNUtESXdORGdwTENCaElEMGdibVYzSUZWcGJuUXpNa0Z5Y21GNUtEWTBLU3dnYnlBOUlHNWxkeUJWYVc1ME16SkJjbkpoZVNnMk5DazdDaUFnSUNCbWIzSW9iR1YwSUdNZ1BTQXhPeUJqSUR3Z01UQXlORHNnS3l0aktYc0tJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlHTWdQRHdnTVRNc0lHZ2dQU0F3T3dvZ0lDQWdJQ0FnSUdadmNpZzdJQ0VvYkNBbUlEZ3pPRGcyTURncE95bHNJRHc4UFNBeExDQm9JQzA5SURnek9EZzJNRGc3Q2lBZ0lDQWdJQ0FnYkNBbVBTQXRPRE00T0RZd09Td2dhQ0FyUFNBNU5EYzVNVEkzTURRc0lISmJZMTBnUFNCc0lId2dhRHNLSUNBZ0lIMEtJQ0FnSUdadmNpaHNaWFFnWXlBOUlERXdNalE3SUdNZ1BDQXlNRFE0T3lBcksyTXBjbHRqWFNBOUlEa3pPVFV5TkRBNU5pQXJJQ2hqSUMwZ01UQXlOQ0E4UENBeE15azdDaUFnSUNCbWIzSW9iR1YwSUdNZ1BTQXhPeUJqSUR3Z016RTdJQ3NyWXlsaFcyTmRJRDBnWXlBOFBDQXlNenNLSUNBZ0lHRmJNekZkSUQwZ01URTVPVFUzTURrME5Dd2dZVnN6TWwwZ1BTQXlNVFEzTkRnek5qUTRPd29nSUNBZ1ptOXlLR3hsZENCaklEMGdNek03SUdNZ1BDQTJNenNnS3l0aktXRmJZMTBnUFNBeU1UUTNORGd6TmpRNElDc2dLR01nTFNBek1pQThQQ0F5TXlrN0NpQWdJQ0JoV3pZelhTQTlJRE16TkRjd05UUTFPVEk3Q2lBZ0lDQm1iM0lvYkdWMElHTWdQU0F4T3lCaklEd2dOalE3SUNzcll5bGpJQ0U5UFNBek1pQW1KaUFvYjF0alhTQTlJREV3TWpRcE93b2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JtYkc5aGRGWnBaWGM2SUdVc0NpQWdJQ0FnSUNBZ2RXbHVkRE15Vm1sbGR6b2dkQ3dLSUNBZ0lDQWdJQ0JpWVhObFZHRmliR1U2SUc0c0NpQWdJQ0FnSUNBZ2MyaHBablJVWVdKc1pUb2dhU3dLSUNBZ0lDQWdJQ0J0WVc1MGFYTnpZVlJoWW14bE9pQnlMQW9nSUNBZ0lDQWdJR1Y0Y0c5dVpXNTBWR0ZpYkdVNklHRXNDaUFnSUNBZ0lDQWdiMlptYzJWMFZHRmliR1U2SUc4S0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z1RuUW9jekVwSUhzS0lDQWdJRTFoZEdndVlXSnpLSE14S1NBK0lEWTFOVEEwSUNZbUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVSR0YwWVZWMGFXeHpMblJ2U0dGc1prWnNiMkYwS0NrNklGWmhiSFZsSUc5MWRDQnZaaUJ5WVc1blpTNGlLU3dnY3pFZ1BTQmpkQ2h6TVN3Z0xUWTFOVEEwTENBMk5UVXdOQ2tzSUY5dUxtWnNiMkYwVm1sbGQxc3dYU0E5SUhNeE93b2dJQ0FnYkdWMElHVWdQU0JmYmk1MWFXNTBNekpXYVdWM1d6QmRMQ0IwSUQwZ1pTQStQaUF5TXlBbUlEVXhNVHNLSUNBZ0lISmxkSFZ5YmlCZmJpNWlZWE5sVkdGaWJHVmJkRjBnS3lBb0tHVWdKaUE0TXpnNE5qQTNLU0ErUGlCZmJpNXphR2xtZEZSaFlteGxXM1JkS1RzS2ZRcG1kVzVqZEdsdmJpQjRjeWh6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0J6TVNBK1BpQXhNRHNLSUNBZ0lISmxkSFZ5YmlCZmJpNTFhVzUwTXpKV2FXVjNXekJkSUQwZ1gyNHViV0Z1ZEdsemMyRlVZV0pzWlZ0ZmJpNXZabVp6WlhSVVlXSnNaVnRsWFNBcklDaHpNU0FtSURFd01qTXBYU0FySUY5dUxtVjRjRzl1Wlc1MFZHRmliR1ZiWlYwc0lGOXVMbVpzYjJGMFZtbGxkMXN3WFRzS2ZRcDJZWElnVFhZZ1BTQjdDaUFnSUNCMGIwaGhiR1pHYkc5aGREb2dUblFzQ2lBZ0lDQm1jbTl0U0dGc1prWnNiMkYwT2lCNGN3cDlMQ0JtZENBOUlHNWxkeUJCTENCUmN5QTlJRzVsZHlCYUxDQmxkQ0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNGdQU0FoTVNsN0NpQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa3BJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSWxSSVVrVkZMa0oxWm1abGNrRjBkSEpwWW5WMFpUb2dZWEp5WVhrZ2MyaHZkV3hrSUdKbElHRWdWSGx3WldRZ1FYSnlZWGt1SWlrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwYzBKMVptWmxja0YwZEhKcFluVjBaU0E5SUNFd0xDQjBhR2x6TG01aGJXVWdQU0FpSWl3Z2RHaHBjeTVoY25KaGVTQTlJR1VzSUhSb2FYTXVhWFJsYlZOcGVtVWdQU0IwTENCMGFHbHpMbU52ZFc1MElEMGdaU0FoUFQwZ2RtOXBaQ0F3SUQ4Z1pTNXNaVzVuZEdnZ0x5QjBJRG9nTUN3Z2RHaHBjeTV1YjNKdFlXeHBlbVZrSUQwZ2Jpd2dkR2hwY3k1MWMyRm5aU0E5SUVoeUxDQjBhR2x6TG5Wd1pHRjBaVkpoYm1kbElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFE2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJR052ZFc1ME9pQXRNUW9nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaM0IxVkhsd1pTQTlJSGh1TENCMGFHbHpMblpsY25OcGIyNGdQU0F3T3dvZ0lDQWdmUW9nSUNBZ2IyNVZjR3h2WVdSRFlXeHNZbUZqYXlncElIdDlDaUFnSUNCelpYUWdibVZsWkhOVmNHUmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHVWdQVDA5SUNFd0lDWW1JSFJvYVhNdWRtVnljMmx2Ymlzck93b2dJQ0FnZlFvZ0lDQWdjMlYwVlhOaFoyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVnpZV2RsSUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTVoYldVZ1BTQmxMbTVoYldVc0lIUm9hWE11WVhKeVlYa2dQU0J1WlhjZ1pTNWhjbkpoZVM1amIyNXpkSEoxWTNSdmNpaGxMbUZ5Y21GNUtTd2dkR2hwY3k1cGRHVnRVMmw2WlNBOUlHVXVhWFJsYlZOcGVtVXNJSFJvYVhNdVkyOTFiblFnUFNCbExtTnZkVzUwTENCMGFHbHpMbTV2Y20xaGJHbDZaV1FnUFNCbExtNXZjbTFoYkdsNlpXUXNJSFJvYVhNdWRYTmhaMlVnUFNCbExuVnpZV2RsTENCMGFHbHpMbWR3ZFZSNWNHVWdQU0JsTG1kd2RWUjVjR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjNCNVFYUW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJR1VnS2owZ2RHaHBjeTVwZEdWdFUybDZaU3dnYmlBcVBTQjBMbWwwWlcxVGFYcGxPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0IwYUdsekxtbDBaVzFUYVhwbE95QnBJRHdnY2pzZ2FTc3JLWFJvYVhNdVlYSnlZWGxiWlNBcklHbGRJRDBnZEM1aGNuSmhlVnR1SUNzZ2FWMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIzQjVRWEp5WVhrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GeWNtRjVMbk5sZENobEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHRndjR3g1VFdGMGNtbDRNeWhsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFYUmxiVk5wZW1VZ1BUMDlJRElwSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCMGFHbHpMbU52ZFc1ME95QjBJRHdnYmpzZ2RDc3JLVkZ6TG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2RHaHBjeXdnZENrc0lGRnpMbUZ3Y0d4NVRXRjBjbWw0TXlobEtTd2dkR2hwY3k1elpYUllXU2gwTENCUmN5NTRMQ0JSY3k1NUtUc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDBhR2x6TG1sMFpXMVRhWHBsSUQwOVBTQXpLU0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnZEdocGN5NWpiM1Z1ZERzZ2RDQThJRzQ3SUhRckt5bG1kQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0hSb2FYTXNJSFFwTENCbWRDNWhjSEJzZVUxaGRISnBlRE1vWlNrc0lIUm9hWE11YzJWMFdGbGFLSFFzSUdaMExuZ3NJR1owTG5rc0lHWjBMbm9wT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdkR2hwY3k1amIzVnVkRHNnZENBOElHNDdJSFFyS3lsbWRDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFJvYVhNc0lIUXBMQ0JtZEM1aGNIQnNlVTFoZEhKcGVEUW9aU2tzSUhSb2FYTXVjMlYwV0ZsYUtIUXNJR1owTG5nc0lHWjBMbmtzSUdaMExub3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxPYjNKdFlXeE5ZWFJ5YVhnb1pTa2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0IwYUdsekxtTnZkVzUwT3lCMElEd2dianNnZENzcktXWjBMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEdocGN5d2dkQ2tzSUdaMExtRndjR3g1VG05eWJXRnNUV0YwY21sNEtHVXBMQ0IwYUdsekxuTmxkRmhaV2loMExDQm1kQzU0TENCbWRDNTVMQ0JtZEM1NktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSeVlXNXpabTl5YlVScGNtVmpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJSFJvYVhNdVkyOTFiblE3SUhRZ1BDQnVPeUIwS3lzcFpuUXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2gwYUdsekxDQjBLU3dnWm5RdWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtHVXBMQ0IwYUdsekxuTmxkRmhaV2loMExDQm1kQzU0TENCbWRDNTVMQ0JtZEM1NktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwSUQwZ01Da2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GeWNtRjVMbk5sZENobExDQjBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEVOdmJYQnZibVZ1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtRnljbUY1VzJVZ0tpQjBhR2x6TG1sMFpXMVRhWHBsSUNzZ2RGMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9iaUE5SUU5MEtHNHNJSFJvYVhNdVlYSnlZWGtwS1N3Z2Jqc0tJQ0FnSUgwS0lDQWdJSE5sZEVOdmJYQnZibVZ1ZENobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTl5YldGc2FYcGxaQ0FtSmlBb2JpQTlJRUpsS0c0c0lIUm9hWE11WVhKeVlYa3BLU3dnZEdocGN5NWhjbkpoZVZ0bElDb2dkR2hwY3k1cGRHVnRVMmw2WlNBcklIUmRJRDBnYml3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRGZ29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWhjbkpoZVZ0bElDb2dkR2hwY3k1cGRHVnRVMmw2WlYwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTl5YldGc2FYcGxaQ0FtSmlBb2RDQTlJRTkwS0hRc0lIUm9hWE11WVhKeVlYa3BLU3dnZERzS0lDQWdJSDBLSUNBZ0lITmxkRmdvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCQ1pTaDBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WVhKeVlYbGJaU0FxSUhSb2FYTXVhWFJsYlZOcGVtVmRJRDBnZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRGa29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWhjbkpoZVZ0bElDb2dkR2hwY3k1cGRHVnRVMmw2WlNBcklERmRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCUGRDaDBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUTdDaUFnSUNCOUNpQWdJQ0J6WlhSWktHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdRbVVvZEN3Z2RHaHBjeTVoY25KaGVTa3BMQ0IwYUdsekxtRnljbUY1VzJVZ0tpQjBhR2x6TG1sMFpXMVRhWHBsSUNzZ01WMGdQU0IwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFdpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtRnljbUY1VzJVZ0tpQjBhR2x6TG1sMFpXMVRhWHBsSUNzZ01sMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUU5MEtIUXNJSFJvYVhNdVlYSnlZWGtwS1N3Z2REc0tJQ0FnSUgwS0lDQWdJSE5sZEZvb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVlYSnlZWGxiWlNBcUlIUm9hWE11YVhSbGJWTnBlbVVnS3lBeVhTQTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSWEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVlYSnlZWGxiWlNBcUlIUm9hWE11YVhSbGJWTnBlbVVnS3lBelhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVZrSUNZbUlDaDBJRDBnVDNRb2RDd2dkR2hwY3k1aGNuSmhlU2twTENCME93b2dJQ0FnZlFvZ0lDQWdjMlYwVnlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOXliV0ZzYVhwbFpDQW1KaUFvZENBOUlFSmxLSFFzSUhSb2FYTXVZWEp5WVhrcEtTd2dkR2hwY3k1aGNuSmhlVnRsSUNvZ2RHaHBjeTVwZEdWdFUybDZaU0FySUROZElEMGdkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZoWktHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQXFQU0IwYUdsekxtbDBaVzFUYVhwbExDQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCQ1pTaDBMQ0IwYUdsekxtRnljbUY1S1N3Z2JpQTlJRUpsS0c0c0lIUm9hWE11WVhKeVlYa3BLU3dnZEdocGN5NWhjbkpoZVZ0bElDc2dNRjBnUFNCMExDQjBhR2x6TG1GeWNtRjVXMlVnS3lBeFhTQTlJRzRzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWVdWb29aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUNvOUlIUm9hWE11YVhSbGJWTnBlbVVzSUhSb2FYTXVibTl5YldGc2FYcGxaQ0FtSmlBb2RDQTlJRUpsS0hRc0lIUm9hWE11WVhKeVlYa3BMQ0J1SUQwZ1FtVW9iaXdnZEdocGN5NWhjbkpoZVNrc0lHa2dQU0JDWlNocExDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREJkSUQwZ2RDd2dkR2hwY3k1aGNuSmhlVnRsSUNzZ01WMGdQU0J1TENCMGFHbHpMbUZ5Y21GNVcyVWdLeUF5WFNBOUlHa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJZV1ZwWEtHVXNJSFFzSUc0c0lHa3NJSElwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlNBcVBTQjBhR2x6TG1sMFpXMVRhWHBsTENCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JDWlNoMExDQjBhR2x6TG1GeWNtRjVLU3dnYmlBOUlFSmxLRzRzSUhSb2FYTXVZWEp5WVhrcExDQnBJRDBnUW1Vb2FTd2dkR2hwY3k1aGNuSmhlU2tzSUhJZ1BTQkNaU2h5TENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVlYSnlZWGxiWlNBcklEQmRJRDBnZEN3Z2RHaHBjeTVoY25KaGVWdGxJQ3NnTVYwZ1BTQnVMQ0IwYUdsekxtRnljbUY1VzJVZ0t5QXlYU0E5SUdrc0lIUm9hWE11WVhKeVlYbGJaU0FySUROZElEMGdjaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzl1VlhCc2IyRmtLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXZibFZ3Ykc5aFpFTmhiR3hpWVdOcklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWgwYUdsekxtRnljbUY1TENCMGFHbHpMbWwwWlcxVGFYcGxLUzVqYjNCNUtIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwZEdWdFUybDZaVG9nZEdocGN5NXBkR1Z0VTJsNlpTd0tJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dkR2hwY3k1aGNuSmhlUzVqYjI1emRISjFZM1J2Y2k1dVlXMWxMQW9nSUNBZ0lDQWdJQ0FnSUNCaGNuSmhlVG9nUVhKeVlYa3Vabkp2YlNoMGFHbHpMbUZ5Y21GNUtTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNhWHBsWkRvZ2RHaHBjeTV1YjNKdFlXeHBlbVZrQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXVZVzFsSUNFOVBTQWlJaUFtSmlBb1pTNXVZVzFsSUQwZ2RHaHBjeTV1WVcxbEtTd2dkR2hwY3k1MWMyRm5aU0FoUFQwZ1NISWdKaVlnS0dVdWRYTmhaMlVnUFNCMGFHbHpMblZ6WVdkbEtTd2dLSFJvYVhNdWRYQmtZWFJsVW1GdVoyVXViMlptYzJWMElDRTlQU0F3SUh4OElIUm9hWE11ZFhCa1lYUmxVbUZ1WjJVdVkyOTFiblFnSVQwOUlDMHhLU0FtSmlBb1pTNTFjR1JoZEdWU1lXNW5aU0E5SUhSb2FYTXVkWEJrWVhSbFVtRnVaMlVwTENCbE93b2dJQ0FnZlFwOUxDQlJiQ0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaWFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9ibVYzSUVsdWREaEJjbkpoZVNobEtTd2dkQ3dnYmlrN0NpQWdJQ0I5Q24wc0lHcHNJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmxkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHVaWGNnVldsdWREaEJjbkpoZVNobEtTd2dkQ3dnYmlrN0NpQWdJQ0I5Q24wc0lHVm9JRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmxkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHVaWGNnVldsdWREaERiR0Z0Y0dWa1FYSnlZWGtvWlNrc0lIUXNJRzRwT3dvZ0lDQWdmUXA5TENCMGFDQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1pYUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JtVjNJRWx1ZERFMlFYSnlZWGtvWlNrc0lIUXNJRzRwT3dvZ0lDQWdmUXA5TENCYWNpQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1pYUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JtVjNJRlZwYm5ReE5rRnljbUY1S0dVcExDQjBMQ0J1S1RzS0lDQWdJSDBLZlN3Z2JtZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklHVjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtHNWxkeUJKYm5Rek1rRnljbUY1S0dVcExDQjBMQ0J1S1RzS0lDQWdJSDBLZlN3Z1NuSWdQU0JqYkdGemN5QmxlSFJsYm1SeklHVjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtHNWxkeUJWYVc1ME16SkJjbkpoZVNobEtTd2dkQ3dnYmlrN0NpQWdJQ0I5Q24wc0lHbG9JRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmxkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHVaWGNnVldsdWRERTJRWEp5WVhrb1pTa3NJSFFzSUc0cExDQjBhR2x6TG1selJteHZZWFF4TmtKMVptWmxja0YwZEhKcFluVjBaU0E5SUNFd093b2dJQ0FnZlFvZ0lDQWdaMlYwV0NobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjRjeWgwYUdsekxtRnljbUY1VzJVZ0tpQjBhR2x6TG1sMFpXMVRhWHBsWFNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTl5YldGc2FYcGxaQ0FtSmlBb2RDQTlJRTkwS0hRc0lIUm9hWE11WVhKeVlYa3BLU3dnZERzS0lDQWdJSDBLSUNBZ0lITmxkRmdvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCQ1pTaDBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WVhKeVlYbGJaU0FxSUhSb2FYTXVhWFJsYlZOcGVtVmRJRDBnVG5Rb2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJaS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIaHpLSFJvYVhNdVlYSnlZWGxiWlNBcUlIUm9hWE11YVhSbGJWTnBlbVVnS3lBeFhTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUU5MEtIUXNJSFJvYVhNdVlYSnlZWGtwS1N3Z2REc0tJQ0FnSUgwS0lDQWdJSE5sZEZrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVlYSnlZWGxiWlNBcUlIUm9hWE11YVhSbGJWTnBlbVVnS3lBeFhTQTlJRTUwS0hRcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBXaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCNGN5aDBhR2x6TG1GeWNtRjVXMlVnS2lCMGFHbHpMbWwwWlcxVGFYcGxJQ3NnTWwwcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JQZENoMExDQjBhR2x6TG1GeWNtRjVLU2tzSUhRN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJhS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3hwZW1Wa0lDWW1JQ2gwSUQwZ1FtVW9kQ3dnZEdocGN5NWhjbkpoZVNrcExDQjBhR2x6TG1GeWNtRjVXMlVnS2lCMGFHbHpMbWwwWlcxVGFYcGxJQ3NnTWwwZ1BTQk9kQ2gwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRGY29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZUhNb2RHaHBjeTVoY25KaGVWdGxJQ29nZEdocGN5NXBkR1Z0VTJsNlpTQXJJRE5kS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdUM1FvZEN3Z2RHaHBjeTVoY25KaGVTa3BMQ0IwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBWeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUVKbEtIUXNJSFJvYVhNdVlYSnlZWGtwS1N3Z2RHaHBjeTVoY25KaGVWdGxJQ29nZEdocGN5NXBkR1Z0VTJsNlpTQXJJRE5kSUQwZ1RuUW9kQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWVdTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdLajBnZEdocGN5NXBkR1Z0VTJsNlpTd2dkR2hwY3k1dWIzSnRZV3hwZW1Wa0lDWW1JQ2gwSUQwZ1FtVW9kQ3dnZEdocGN5NWhjbkpoZVNrc0lHNGdQU0JDWlNodUxDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREJkSUQwZ1RuUW9kQ2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREZkSUQwZ1RuUW9iaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWVdWb29aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUNvOUlIUm9hWE11YVhSbGJWTnBlbVVzSUhSb2FYTXVibTl5YldGc2FYcGxaQ0FtSmlBb2RDQTlJRUpsS0hRc0lIUm9hWE11WVhKeVlYa3BMQ0J1SUQwZ1FtVW9iaXdnZEdocGN5NWhjbkpoZVNrc0lHa2dQU0JDWlNocExDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREJkSUQwZ1RuUW9kQ2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREZkSUQwZ1RuUW9iaWtzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREpkSUQwZ1RuUW9hU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWVdWcFhLR1VzSUhRc0lHNHNJR2tzSUhJcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQXFQU0IwYUdsekxtbDBaVzFUYVhwbExDQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCQ1pTaDBMQ0IwYUdsekxtRnljbUY1S1N3Z2JpQTlJRUpsS0c0c0lIUm9hWE11WVhKeVlYa3BMQ0JwSUQwZ1FtVW9hU3dnZEdocGN5NWhjbkpoZVNrc0lISWdQU0JDWlNoeUxDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREJkSUQwZ1RuUW9kQ2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREZkSUQwZ1RuUW9iaWtzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREpkSUQwZ1RuUW9hU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJRE5kSUQwZ1RuUW9jaWtzSUhSb2FYTTdDaUFnSUNCOUNuMHNJSFpsSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJsZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWh1WlhjZ1JteHZZWFF6TWtGeWNtRjVLR1VwTENCMExDQnVLVHNLSUNBZ0lIMEtmU3dnYzJnZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdWMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0c1bGR5QkdiRzloZERZMFFYSnlZWGtvWlNrc0lIUXNJRzRwT3dvZ0lDQWdmUXA5TENCdGNDQTlJREFzSUVkMElEMGdibVYzSUhwbExDQlpZU0E5SUc1bGR5QktaU3dnVkdrZ1BTQnVaWGNnUVN3Z1ZuUWdQU0J1WlhjZ1VYUXNJSFZ6SUQwZ2JtVjNJRkYwTENCNGRDQTlJRzVsZHlCQkxDQkhaU0E5SUdOc1lYTnpJSE14SUdWNGRHVnVaSE1nYzI0Z2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selFuVm1abVZ5UjJWdmJXVjBjbmtnUFNBaE1Dd2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ0pwWkNJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzF3S3lzS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1MWRXbGtJRDBnYTNRb0tTd2dkR2hwY3k1dVlXMWxJRDBnSWlJc0lIUm9hWE11ZEhsd1pTQTlJQ0pDZFdabVpYSkhaVzl0WlhSeWVTSXNJSFJvYVhNdWFXNWtaWGdnUFNCdWRXeHNMQ0IwYUdsekxtRjBkSEpwWW5WMFpYTWdQU0I3ZlN3Z2RHaHBjeTV0YjNKd2FFRjBkSEpwWW5WMFpYTWdQU0I3ZlN3Z2RHaHBjeTV0YjNKd2FGUmhjbWRsZEhOU1pXeGhkR2wyWlNBOUlDRXhMQ0IwYUdsekxtZHliM1Z3Y3lBOUlGdGRMQ0IwYUdsekxtSnZkVzVrYVc1blFtOTRJRDBnYm5Wc2JDd2dkR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaU0E5SUc1MWJHd3NJSFJvYVhNdVpISmhkMUpoYm1kbElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRG9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdZMjkxYm5RNklERWdMeUF3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTUxYzJWeVJHRjBZU0E5SUh0OU93b2dJQ0FnZlFvZ0lDQWdaMlYwU1c1a1pYZ29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXNWtaWGc3Q2lBZ0lDQjlDaUFnSUNCelpYUkpibVJsZUNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFRnljbUY1TG1selFYSnlZWGtvWlNrZ1B5QjBhR2x6TG1sdVpHVjRJRDBnYm1WM0lDaE5aQ2hsS1NBL0lFcHlJRG9nV25JcEtHVXNJREVwSURvZ2RHaHBjeTVwYm1SbGVDQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSQmRIUnlhV0oxZEdVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GMGRISnBZblYwWlhOYlpWMDdDaUFnSUNCOUNpQWdJQ0J6WlhSQmRIUnlhV0oxZEdVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRjBkSEpwWW5WMFpYTmJaVjBnUFNCMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHVnNaWFJsUVhSMGNtbGlkWFJsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHVnNaWFJsSUhSb2FYTXVZWFIwY21saWRYUmxjMXRsWFN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdoaGMwRjBkSEpwWW5WMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYUjBjbWxpZFhSbGMxdGxYU0FoUFQwZ2RtOXBaQ0F3T3dvZ0lDQWdmUW9nSUNBZ1lXUmtSM0p2ZFhBb1pTd2dkQ3dnYmlBOUlEQXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtZHliM1Z3Y3k1d2RYTm9LSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblE2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR052ZFc1ME9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCdFlYUmxjbWxoYkVsdVpHVjRPaUJ1Q2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0I5Q2lBZ0lDQmpiR1ZoY2tkeWIzVndjeWdwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWR5YjNWd2N5QTlJRnRkT3dvZ0lDQWdmUW9nSUNBZ2MyVjBSSEpoZDFKaGJtZGxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1SeVlYZFNZVzVuWlM1emRHRnlkQ0E5SUdVc0lIUm9hWE11WkhKaGQxSmhibWRsTG1OdmRXNTBJRDBnZERzS0lDQWdJSDBLSUNBZ0lHRndjR3g1VFdGMGNtbDROQ2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjQ3Q2lBZ0lDQWdJQ0FnZENBaFBUMGdkbTlwWkNBd0lDWW1JQ2gwTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnZEM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3S1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVZWFIwY21saWRYUmxjeTV1YjNKdFlXdzdDaUFnSUNBZ0lDQWdhV1lnS0c0Z0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUc1bGR5QklaU2dwTG1kbGRFNXZjbTFoYkUxaGRISnBlQ2hsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiaTVoY0hCc2VVNXZjbTFoYkUxaGRISnBlQ2h5S1N3Z2JpNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11WVhSMGNtbGlkWFJsY3k1MFlXNW5aVzUwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJwSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZEhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0dVcExDQnBMbTVsWldSelZYQmtZWFJsSUQwZ0lUQXBMQ0IwYUdsekxtSnZkVzVrYVc1blFtOTRJQ0U5UFNCdWRXeHNJQ1ltSUhSb2FYTXVZMjl0Y0hWMFpVSnZkVzVrYVc1blFtOTRLQ2tzSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21VZ0lUMDlJRzUxYkd3Z0ppWWdkR2hwY3k1amIyMXdkWFJsUW05MWJtUnBibWRUY0dobGNtVW9LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVVYVmhkR1Z5Ym1sdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRWQwTG0xaGEyVlNiM1JoZEdsdmJrWnliMjFSZFdGMFpYSnVhVzl1S0dVcExDQjBhR2x6TG1Gd2NHeDVUV0YwY21sNE5DaEhkQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVllLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnUjNRdWJXRnJaVkp2ZEdGMGFXOXVXQ2hsS1N3Z2RHaHBjeTVoY0hCc2VVMWhkSEpwZURRb1IzUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkwWVhSbFdTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRWQwTG0xaGEyVlNiM1JoZEdsdmJsa29aU2tzSUhSb2FYTXVZWEJ3YkhsTllYUnlhWGcwS0VkMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lISnZkR0YwWlZvb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQkhkQzV0WVd0bFVtOTBZWFJwYjI1YUtHVXBMQ0IwYUdsekxtRndjR3g1VFdGMGNtbDROQ2hIZENrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjMnhoZEdVb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCSGRDNXRZV3RsVkhKaGJuTnNZWFJwYjI0b1pTd2dkQ3dnYmlrc0lIUm9hWE11WVhCd2JIbE5ZWFJ5YVhnMEtFZDBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5qWVd4bEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1IzUXViV0ZyWlZOallXeGxLR1VzSUhRc0lHNHBMQ0IwYUdsekxtRndjR3g1VFdGMGNtbDROQ2hIZENrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCc2IyOXJRWFFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCWllTNXNiMjlyUVhRb1pTa3NJRmxoTG5Wd1pHRjBaVTFoZEhKcGVDZ3BMQ0IwYUdsekxtRndjR3g1VFdGMGNtbDROQ2haWVM1dFlYUnlhWGdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJWdWRHVnlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnZiWEIxZEdWQ2IzVnVaR2x1WjBKdmVDZ3BMQ0IwYUdsekxtSnZkVzVrYVc1blFtOTRMbWRsZEVObGJuUmxjaWhVYVNrdWJtVm5ZWFJsS0Nrc0lIUm9hWE11ZEhKaGJuTnNZWFJsS0ZScExuZ3NJRlJwTG5rc0lGUnBMbm9wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVkJ2YVc1MGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ1pTNXNaVzVuZEdnN0lHNGdQQ0JwT3lCdUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUdWYmJsMDdDaUFnSUNBZ0lDQWdJQ0FnSUhRdWNIVnphQ2h5TG5nc0lISXVlU3dnY2k1NklIeDhJREFwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJSFpsS0hRc0lETXBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052YlhCMWRHVkNiM1Z1WkdsdVowSnZlQ2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbUp2ZFc1a2FXNW5RbTk0SUQwOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG1KdmRXNWthVzVuUW05NElEMGdibVYzSUZGMEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11WVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2Yml3Z2RDQTlJSFJvYVhNdWJXOXljR2hCZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0FnSUdsbUlDaGxJQ1ltSUdVdWFYTkhURUoxWm1abGNrRjBkSEpwWW5WMFpTa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RVU0ZKRlJTNUNkV1ptWlhKSFpXOXRaWFJ5ZVM1amIyMXdkWFJsUW05MWJtUnBibWRDYjNnb0tUb2dSMHhDZFdabVpYSkJkSFJ5YVdKMWRHVWdjbVZ4ZFdseVpYTWdZU0J0WVc1MVlXd2dZbTkxYm1ScGJtY2dZbTk0TGlCQmJIUmxjbTVoZEdsMlpXeDVJSE5sZENBaWJXVnphQzVtY25WemRIVnRRM1ZzYkdWa0lpQjBieUFpWm1Gc2MyVWlMaWNzSUhSb2FYTXBMQ0IwYUdsekxtSnZkVzVrYVc1blFtOTRMbk5sZENodVpYY2dRU2d0TVNBdklEQXNJQzB4SUM4Z01Dd2dMVEVnTHlBd0tTd2dibVYzSUVFb01TQXZJREFzSURFZ0x5QXdMQ0F4SUM4Z01Da3BPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaGxJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZbTkxYm1ScGJtZENiM2d1YzJWMFJuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaGxLU3dnZENrZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlIUXViR1Z1WjNSb095QnVJRHdnYVRzZ2Jpc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeUlEMGdkRnR1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZaMExuTmxkRVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvY2lrc0lIUm9hWE11Ylc5eWNHaFVZWEpuWlhSelVtVnNZWFJwZG1VZ1B5QW9lSFF1WVdSa1ZtVmpkRzl5Y3loMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG0xcGJpd2dWblF1YldsdUtTd2dkR2hwY3k1aWIzVnVaR2x1WjBKdmVDNWxlSEJoYm1SQ2VWQnZhVzUwS0hoMEtTd2dlSFF1WVdSa1ZtVmpkRzl5Y3loMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG0xaGVDd2dWblF1YldGNEtTd2dkR2hwY3k1aWIzVnVaR2x1WjBKdmVDNWxlSEJoYm1SQ2VWQnZhVzUwS0hoMEtTa2dPaUFvZEdocGN5NWliM1Z1WkdsdVowSnZlQzVsZUhCaGJtUkNlVkJ2YVc1MEtGWjBMbTFwYmlrc0lIUm9hWE11WW05MWJtUnBibWRDYjNndVpYaHdZVzVrUW5sUWIybHVkQ2hXZEM1dFlYZ3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMGdaV3h6WlNCMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG0xaGEyVkZiWEIwZVNncE93b2dJQ0FnSUNBZ0lDaHBjMDVoVGloMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG0xcGJpNTRLU0I4ZkNCcGMwNWhUaWgwYUdsekxtSnZkVzVrYVc1blFtOTRMbTFwYmk1NUtTQjhmQ0JwYzA1aFRpaDBhR2x6TG1KdmRXNWthVzVuUW05NExtMXBiaTU2S1NrZ0ppWWdZMjl1YzI5c1pTNWxjbkp2Y2lnblZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua3VZMjl0Y0hWMFpVSnZkVzVrYVc1blFtOTRLQ2s2SUVOdmJYQjFkR1ZrSUcxcGJpOXRZWGdnYUdGMlpTQk9ZVTRnZG1Gc2RXVnpMaUJVYUdVZ0luQnZjMmwwYVc5dUlpQmhkSFJ5YVdKMWRHVWdhWE1nYkdsclpXeDVJSFJ2SUdoaGRtVWdUbUZPSUhaaGJIVmxjeTRuTENCMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUdOdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtSnZkVzVrYVc1blUzQm9aWEpsSUQwOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxJRDBnYm1WM0lGbDBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVlYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpd2dkQ0E5SUhSb2FYTXViVzl5Y0doQmRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dU93b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNZbUlHVXVhWE5IVEVKMVptWmxja0YwZEhKcFluVjBaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkVVNGSkZSUzVDZFdabVpYSkhaVzl0WlhSeWVTNWpiMjF3ZFhSbFFtOTFibVJwYm1kVGNHaGxjbVVvS1RvZ1IweENkV1ptWlhKQmRIUnlhV0oxZEdVZ2NtVnhkV2x5WlhNZ1lTQnRZVzUxWVd3Z1ltOTFibVJwYm1jZ2MzQm9aWEpsTGlCQmJIUmxjbTVoZEdsMlpXeDVJSE5sZENBaWJXVnphQzVtY25WemRIVnRRM1ZzYkdWa0lpQjBieUFpWm1Gc2MyVWlMaWNzSUhSb2FYTXBMQ0IwYUdsekxtSnZkVzVrYVc1blUzQm9aWEpsTG5ObGRDaHVaWGNnUVN3Z01TQXZJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2hsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaUzVqWlc1MFpYSTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaFdkQzV6WlhSR2NtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHVXBMQ0IwS1NCbWIzSW9iR1YwSUhJZ1BTQXdMQ0JoSUQwZ2RDNXNaVzVuZEdnN0lISWdQQ0JoT3lCeUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQjBXM0pkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhNdWMyVjBSbkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h2S1N3Z2RHaHBjeTV0YjNKd2FGUmhjbWRsZEhOU1pXeGhkR2wyWlNBL0lDaDRkQzVoWkdSV1pXTjBiM0p6S0ZaMExtMXBiaXdnZFhNdWJXbHVLU3dnVm5RdVpYaHdZVzVrUW5sUWIybHVkQ2g0ZENrc0lIaDBMbUZrWkZabFkzUnZjbk1vVm5RdWJXRjRMQ0IxY3k1dFlYZ3BMQ0JXZEM1bGVIQmhibVJDZVZCdmFXNTBLSGgwS1NrZ09pQW9WblF1Wlhod1lXNWtRbmxRYjJsdWRDaDFjeTV0YVc0cExDQldkQzVsZUhCaGJtUkNlVkJ2YVc1MEtIVnpMbTFoZUNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lGWjBMbWRsZEVObGJuUmxjaWh1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQXdPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhJZ1BTQXdMQ0JoSUQwZ1pTNWpiM1Z1ZERzZ2NpQThJR0U3SUhJckt5bDRkQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dVc0lISXBMQ0JwSUQwZ1RXRjBhQzV0WVhnb2FTd2diaTVrYVhOMFlXNWpaVlJ2VTNGMVlYSmxaQ2g0ZENrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RDa2dabTl5S0d4bGRDQnlJRDBnTUN3Z1lTQTlJSFF1YkdWdVozUm9PeUJ5SUR3Z1lUc2djaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZEZ0eVhTd2dZeUE5SUhSb2FYTXViVzl5Y0doVVlYSm5aWFJ6VW1Wc1lYUnBkbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR3dnUFNBd0xDQm9JRDBnYnk1amIzVnVkRHNnYkNBOElHZzdJR3dyS3lsNGRDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLRzhzSUd3cExDQmpJQ1ltSUNoVWFTNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR1VzSUd3cExDQjRkQzVoWkdRb1ZHa3BLU3dnYVNBOUlFMWhkR2d1YldGNEtHa3NJRzR1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvZUhRcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxMbkpoWkdsMWN5QTlJRTFoZEdndWMzRnlkQ2hwS1N3Z2FYTk9ZVTRvZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlM1eVlXUnBkWE1wSUNZbUlHTnZibk52YkdVdVpYSnliM0lvSjFSSVVrVkZMa0oxWm1abGNrZGxiMjFsZEhKNUxtTnZiWEIxZEdWQ2IzVnVaR2x1WjFOd2FHVnlaU2dwT2lCRGIyMXdkWFJsWkNCeVlXUnBkWE1nYVhNZ1RtRk9MaUJVYUdVZ0luQnZjMmwwYVc5dUlpQmhkSFJ5YVdKMWRHVWdhWE1nYkdsclpXeDVJSFJ2SUdoaGRtVWdUbUZPSUhaaGJIVmxjeTRuTENCMGFHbHpLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCamIyMXdkWFJsVkdGdVoyVnVkSE1vS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbWx1WkdWNExDQjBJRDBnZEdocGN5NWhkSFJ5YVdKMWRHVnpPd29nSUNBZ0lDQWdJR2xtSUNobElEMDlQU0J1ZFd4c0lIeDhJSFF1Y0c5emFYUnBiMjRnUFQwOUlIWnZhV1FnTUNCOGZDQjBMbTV2Y20xaGJDQTlQVDBnZG05cFpDQXdJSHg4SUhRdWRYWWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVDZFdabVpYSkhaVzl0WlhSeWVUb2dMbU52YlhCMWRHVlVZVzVuWlc1MGN5Z3BJR1poYVd4bFpDNGdUV2x6YzJsdVp5QnlaWEYxYVhKbFpDQmhkSFJ5YVdKMWRHVnpJQ2hwYm1SbGVDd2djRzl6YVhScGIyNHNJRzV2Y20xaGJDQnZjaUIxZGlraUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1V1WVhKeVlYa3NJR2tnUFNCMExuQnZjMmwwYVc5dUxtRnljbUY1TENCeUlEMGdkQzV1YjNKdFlXd3VZWEp5WVhrc0lHRWdQU0IwTG5WMkxtRnljbUY1TENCdklEMGdhUzVzWlc1bmRHZ2dMeUF6T3dvZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z6UVhSMGNtbGlkWFJsS0NKMFlXNW5aVzUwSWlrZ1BUMDlJQ0V4SUNZbUlIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSjBZVzVuWlc1MElpd2dibVYzSUdWMEtHNWxkeUJHYkc5aGRETXlRWEp5WVhrb05DQXFJRzhwTENBMEtTazdDaUFnSUNBZ0lDQWdiR1YwSUdNZ1BTQjBhR2x6TG1kbGRFRjBkSEpwWW5WMFpTZ2lkR0Z1WjJWdWRDSXBMbUZ5Y21GNUxDQnNJRDBnVzEwc0lHZ2dQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUZRZ1BTQXdPeUJVSUR3Z2J6c2dWQ3NyS1d4YlZGMGdQU0J1WlhjZ1FTd2dhRnRVWFNBOUlHNWxkeUJCT3dvZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnYm1WM0lFRXNJR1FnUFNCdVpYY2dRU3dnWmlBOUlHNWxkeUJCTENCdElEMGdibVYzSUZvc0lGOGdQU0J1WlhjZ1dpd2daeUE5SUc1bGR5QmFMQ0J3SUQwZ2JtVjNJRUVzSUhZZ1BTQnVaWGNnUVRzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCNEtGUXNJRThzSUZrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZFM1bWNtOXRRWEp5WVhrb2FTd2dWQ0FxSURNcExDQmtMbVp5YjIxQmNuSmhlU2hwTENCUElDb2dNeWtzSUdZdVpuSnZiVUZ5Y21GNUtHa3NJRmtnS2lBektTd2diUzVtY205dFFYSnlZWGtvWVN3Z1ZDQXFJRElwTENCZkxtWnliMjFCY25KaGVTaGhMQ0JQSUNvZ01pa3NJR2N1Wm5KdmJVRnljbUY1S0dFc0lGa2dLaUF5S1N3Z1pDNXpkV0lvZFNrc0lHWXVjM1ZpS0hVcExDQmZMbk4xWWlodEtTd2daeTV6ZFdJb2JTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQWtJRDBnTVNBdklDaGZMbmdnS2lCbkxua2dMU0JuTG5nZ0tpQmZMbmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBjMFpwYm1sMFpTZ2tLU0FtSmlBb2NDNWpiM0I1S0dRcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0djdWVTa3VZV1JrVTJOaGJHVmtWbVZqZEc5eUtHWXNJQzFmTG5rcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0NRcExDQjJMbU52Y0hrb1ppa3ViWFZzZEdsd2JIbFRZMkZzWVhJb1h5NTRLUzVoWkdSVFkyRnNaV1JXWldOMGIzSW9aQ3dnTFdjdWVDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb0pDa3NJR3hiVkYwdVlXUmtLSEFwTENCc1cwOWRMbUZrWkNod0tTd2diRnRaWFM1aFpHUW9jQ2tzSUdoYlZGMHVZV1JrS0hZcExDQm9XMDlkTG1Ga1pDaDJLU3dnYUZ0WlhTNWhaR1FvZGlrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnZVNBOUlIUm9hWE11WjNKdmRYQnpPd29nSUNBZ0lDQWdJSGt1YkdWdVozUm9JRDA5UFNBd0lDWW1JQ2g1SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWREb2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052ZFc1ME9pQnVMbXhsYm1kMGFBb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWFNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCVUlEMGdNQ3dnVHlBOUlIa3ViR1Z1WjNSb095QlVJRHdnVHpzZ0t5dFVLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRmtnUFNCNVcxUmRMQ0FrSUQwZ1dTNXpkR0Z5ZEN3Z1ZTQTlJRmt1WTI5MWJuUTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZWlBOUlDUXNJSEVnUFNBa0lDc2dWVHNnZWlBOElIRTdJSG9nS3owZ015bDRLRzViZWlBcklEQmRMQ0J1VzNvZ0t5QXhYU3dnYmx0NklDc2dNbDBwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUc1bGR5QkJMQ0IzSUQwZ2JtVjNJRUVzSUZJZ1BTQnVaWGNnUVN3Z1NTQTlJRzVsZHlCQk93b2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlFMG9WQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQlNMbVp5YjIxQmNuSmhlU2h5TENCVUlDb2dNeWtzSUVrdVkyOXdlU2hTS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUU4Z1BTQnNXMVJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmlMbU52Y0hrb1R5a3NJR0l1YzNWaUtGSXViWFZzZEdsd2JIbFRZMkZzWVhJb1VpNWtiM1FvVHlrcEtTNXViM0p0WVd4cGVtVW9LU3dnZHk1amNtOXpjMVpsWTNSdmNuTW9TU3dnVHlrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENBa0lEMGdkeTVrYjNRb2FGdFVYU2tnUENBd0lEOGdMVEVnT2lBeE93b2dJQ0FnSUNBZ0lDQWdJQ0JqVzFRZ0tpQTBYU0E5SUdJdWVDd2dZMXRVSUNvZ05DQXJJREZkSUQwZ1lpNTVMQ0JqVzFRZ0tpQTBJQ3NnTWwwZ1BTQmlMbm9zSUdOYlZDQXFJRFFnS3lBelhTQTlJQ1E3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVkNBOUlEQXNJRThnUFNCNUxteGxibWQwYURzZ1ZDQThJRTg3SUNzclZDbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQlpJRDBnZVZ0VVhTd2dKQ0E5SUZrdWMzUmhjblFzSUZVZ1BTQlpMbU52ZFc1ME93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSG9nUFNBa0xDQnhJRDBnSkNBcklGVTdJSG9nUENCeE95QjZJQ3M5SURNcFRTaHVXM29nS3lBd1hTa3NJRTBvYmx0NklDc2dNVjBwTENCTktHNWJlaUFySURKZEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JqYjIxd2RYUmxWbVZ5ZEdWNFRtOXliV0ZzY3lncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11YVc1a1pYZ3NJSFFnUFNCMGFHbHpMbWRsZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUtUc0tJQ0FnSUNBZ0lDQnBaaUFvZENBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NW5aWFJCZEhSeWFXSjFkR1VvSW01dmNtMWhiQ0lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYmlBOVBUMGdkbTlwWkNBd0tTQnVJRDBnYm1WM0lHVjBLRzVsZHlCR2JHOWhkRE15UVhKeVlYa29kQzVqYjNWdWRDQXFJRE1wTENBektTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbTV2Y20xaGJDSXNJRzRwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdadmNpaHNaWFFnWkNBOUlEQXNJR1lnUFNCdUxtTnZkVzUwT3lCa0lEd2daanNnWkNzcktXNHVjMlYwV0ZsYUtHUXNJREFzSURBc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUc1bGR5QkJMQ0J5SUQwZ2JtVjNJRUVzSUdFZ1BTQnVaWGNnUVN3Z2J5QTlJRzVsZHlCQkxDQmpJRDBnYm1WM0lFRXNJR3dnUFNCdVpYY2dRU3dnYUNBOUlHNWxkeUJCTENCMUlEMGdibVYzSUVFN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobEtTQm1iM0lvYkdWMElHUWdQU0F3TENCbUlEMGdaUzVqYjNWdWREc2daQ0E4SUdZN0lHUWdLejBnTXlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiU0E5SUdVdVoyVjBXQ2hrSUNzZ01Da3NJRjhnUFNCbExtZGxkRmdvWkNBcklERXBMQ0JuSUQwZ1pTNW5aWFJZS0dRZ0t5QXlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2t1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoMExDQnRLU3dnY2k1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUXNJRjhwTENCaExtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kQ3dnWnlrc0lHZ3VjM1ZpVm1WamRHOXljeWhoTENCeUtTd2dkUzV6ZFdKV1pXTjBiM0p6S0drc0lISXBMQ0JvTG1OeWIzTnpLSFVwTENCdkxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9iaXdnYlNrc0lHTXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h1TENCZktTd2diQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0c0c0lHY3BMQ0J2TG1Ga1pDaG9LU3dnWXk1aFpHUW9hQ2tzSUd3dVlXUmtLR2dwTENCdUxuTmxkRmhaV2lodExDQnZMbmdzSUc4dWVTd2dieTU2S1N3Z2JpNXpaWFJZV1Zvb1h5d2dZeTU0TENCakxua3NJR011ZWlrc0lHNHVjMlYwV0ZsYUtHY3NJR3d1ZUN3Z2JDNTVMQ0JzTG5vcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnWm05eUtHeGxkQ0JrSUQwZ01Dd2daaUE5SUhRdVkyOTFiblE3SUdRZ1BDQm1PeUJrSUNzOUlETXBhUzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0hRc0lHUWdLeUF3S1N3Z2NpNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFFzSUdRZ0t5QXhLU3dnWVM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUXNJR1FnS3lBeUtTd2dhQzV6ZFdKV1pXTjBiM0p6S0dFc0lISXBMQ0IxTG5OMVlsWmxZM1J2Y25Nb2FTd2djaWtzSUdndVkzSnZjM01vZFNrc0lHNHVjMlYwV0ZsYUtHUWdLeUF3TENCb0xuZ3NJR2d1ZVN3Z2FDNTZLU3dnYmk1elpYUllXVm9vWkNBcklERXNJR2d1ZUN3Z2FDNTVMQ0JvTG5vcExDQnVMbk5sZEZoWldpaGtJQ3NnTWl3Z2FDNTRMQ0JvTG5rc0lHZ3VlaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05eWJXRnNhWHBsVG05eWJXRnNjeWdwTENCdUxtNWxaV1J6VlhCa1lYUmxJRDBnSVRBN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdibTl5YldGc2FYcGxUbTl5YldGc2N5Z3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVlYUjBjbWxpZFhSbGN5NXViM0p0WVd3N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlHVXVZMjkxYm5RN0lIUWdQQ0J1T3lCMEt5c3BlSFF1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNobExDQjBLU3dnZUhRdWJtOXliV0ZzYVhwbEtDa3NJR1V1YzJWMFdGbGFLSFFzSUhoMExuZ3NJSGgwTG5rc0lIaDBMbm9wT3dvZ0lDQWdmUW9nSUNBZ2RHOU9iMjVKYm1SbGVHVmtLQ2tnZXdvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdVb2J5d2dZeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlHOHVZWEp5WVhrc0lHZ2dQU0J2TG1sMFpXMVRhWHBsTENCMUlEMGdieTV1YjNKdFlXeHBlbVZrTENCa0lEMGdibVYzSUd3dVkyOXVjM1J5ZFdOMGIzSW9ZeTVzWlc1bmRHZ2dLaUJvS1N3Z1ppQTlJREFzSUcwZ1BTQXdPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUY4Z1BTQXdMQ0JuSUQwZ1l5NXNaVzVuZEdnN0lGOGdQQ0JuT3lCZkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieTVwYzBsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5UVhSMGNtbGlkWFJsSUQ4Z1ppQTlJR05iWDEwZ0tpQnZMbVJoZEdFdWMzUnlhV1JsSUNzZ2J5NXZabVp6WlhRZ09pQm1JRDBnWTF0ZlhTQXFJR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEFnUFNBd095QndJRHdnYURzZ2NDc3JLV1JiYlNzclhTQTlJR3hiWmlzclhUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJR1YwS0dRc0lHZ3NJSFVwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1cGJtUmxlQ0E5UFQwZ2JuVnNiQ2tnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua3VkRzlPYjI1SmJtUmxlR1ZrS0NrNklFSjFabVpsY2tkbGIyMWxkSEo1SUdseklHRnNjbVZoWkhrZ2JtOXVMV2x1WkdWNFpXUXVJaWtzSUhSb2FYTTdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQnVaWGNnY3pFc0lHNGdQU0IwYUdsekxtbHVaR1Y0TG1GeWNtRjVMQ0JwSUQwZ2RHaHBjeTVoZEhSeWFXSjFkR1Z6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYnlCcGJpQnBLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCcFcyOWRMQ0JzSUQwZ1pTaGpMQ0J1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdkQzV6WlhSQmRIUnlhV0oxZEdVb2J5d2diQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEdocGN5NXRiM0p3YUVGMGRISnBZblYwWlhNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdklHbHVJSElwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlGdGRMQ0JzSUQwZ2NsdHZYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCb0lEMGdNQ3dnZFNBOUlHd3ViR1Z1WjNSb095Qm9JRHdnZFRzZ2FDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdiRnRvWFN3Z1ppQTlJR1VvWkN3Z2JpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpMbkIxYzJnb1ppazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdkQzV0YjNKd2FFRjBkSEpwWW5WMFpYTmJiMTBnUFNCak93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBMbTF2Y25Cb1ZHRnlaMlYwYzFKbGJHRjBhWFpsSUQwZ2RHaHBjeTV0YjNKd2FGUmhjbWRsZEhOU1pXeGhkR2wyWlRzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUhSb2FYTXVaM0p2ZFhCek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREFzSUdNZ1BTQmhMbXhsYm1kMGFEc2dieUE4SUdNN0lHOHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1lWdHZYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDNWhaR1JIY205MWNDaHNMbk4wWVhKMExDQnNMbU52ZFc1MExDQnNMbTFoZEdWeWFXRnNTVzVrWlhncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2REc0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JXVjBZV1JoZEdFNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxjbk5wYjI0NklEUXVOaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDSkNkV1ptWlhKSFpXOXRaWFJ5ZVNJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpXNWxjbUYwYjNJNklDSkNkV1ptWlhKSFpXOXRaWFJ5ZVM1MGIwcFRUMDRpQ2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJR2xtSUNobExuVjFhV1FnUFNCMGFHbHpMblYxYVdRc0lHVXVkSGx3WlNBOUlIUm9hWE11ZEhsd1pTd2dkR2hwY3k1dVlXMWxJQ0U5UFNBaUlpQW1KaUFvWlM1dVlXMWxJRDBnZEdocGN5NXVZVzFsS1N3Z1QySnFaV04wTG10bGVYTW9kR2hwY3k1MWMyVnlSR0YwWVNrdWJHVnVaM1JvSUQ0Z01DQW1KaUFvWlM1MWMyVnlSR0YwWVNBOUlIUm9hWE11ZFhObGNrUmhkR0VwTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJSFJvYVhNdWNHRnlZVzFsZEdWeWN6c0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JzSUdsdUlHTXBZMXRzWFNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hsVzJ4ZElEMGdZMXRzWFNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JsTG1SaGRHRWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEpwWW5WMFpYTTZJSHQ5Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVhVzVrWlhnN0NpQWdJQ0FnSUNBZ2RDQWhQVDBnYm5Wc2JDQW1KaUFvWlM1a1lYUmhMbWx1WkdWNElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUIwTG1GeWNtRjVMbU52Ym5OMGNuVmpkRzl5TG01aGJXVXNDaUFnSUNBZ0lDQWdJQ0FnSUdGeWNtRjVPaUJCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2gwTG1GeWNtRjVLUW9nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWhkSFJ5YVdKMWRHVnpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZeUJwYmlCdUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHd2dQU0J1VzJOZE93b2dJQ0FnSUNBZ0lDQWdJQ0JsTG1SaGRHRXVZWFIwY21saWRYUmxjMXRqWFNBOUlHd3VkRzlLVTA5T0tHVXVaR0YwWVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2UzMHNJSElnUFNBaE1Uc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHTWdhVzRnZEdocGN5NXRiM0p3YUVGMGRISnBZblYwWlhNcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJSFJvYVhNdWJXOXljR2hCZEhSeWFXSjFkR1Z6VzJOZExDQm9JRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdkU0E5SURBc0lHUWdQU0JzTG14bGJtZDBhRHNnZFNBOElHUTdJSFVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUd4YmRWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9MbkIxYzJnb1ppNTBiMHBUVDA0b1pTNWtZWFJoS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2FDNXNaVzVuZEdnZ1BpQXdJQ1ltSUNocFcyTmRJRDBnYUN3Z2NpQTlJQ0V3S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NpQW1KaUFvWlM1a1lYUmhMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5QTlJR2tzSUdVdVpHRjBZUzV0YjNKd2FGUmhjbWRsZEhOU1pXeGhkR2wyWlNBOUlIUm9hWE11Ylc5eWNHaFVZWEpuWlhSelVtVnNZWFJwZG1VcE93b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2RHaHBjeTVuY205MWNITTdDaUFnSUNBZ0lDQWdZUzVzWlc1bmRHZ2dQaUF3SUNZbUlDaGxMbVJoZEdFdVozSnZkWEJ6SUQwZ1NsTlBUaTV3WVhKelpTaEtVMDlPTG5OMGNtbHVaMmxtZVNoaEtTa3BPd29nSUNBZ0lDQWdJR3hsZENCdklEMGdkR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdieUFoUFQwZ2JuVnNiQ0FtSmlBb1pTNWtZWFJoTG1KdmRXNWthVzVuVTNCb1pYSmxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpaVzUwWlhJNklHOHVZMlZ1ZEdWeUxuUnZRWEp5WVhrb0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJ2TG5KaFpHbDFjd29nSUNBZ0lDQWdJSDBwTENCbE93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLQ2t1WTI5d2VTaDBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YVc1a1pYZ2dQU0J1ZFd4c0xDQjBhR2x6TG1GMGRISnBZblYwWlhNZ1BTQjdmU3dnZEdocGN5NXRiM0p3YUVGMGRISnBZblYwWlhNZ1BTQjdmU3dnZEdocGN5NW5jbTkxY0hNZ1BTQmJYU3dnZEdocGN5NWliM1Z1WkdsdVowSnZlQ0E5SUc1MWJHd3NJSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVVnUFNCdWRXeHNPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdlMzA3Q2lBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsSUQwZ1pTNXVZVzFsT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlM1cGJtUmxlRHNLSUNBZ0lDQWdJQ0J1SUNFOVBTQnVkV3hzSUNZbUlIUm9hWE11YzJWMFNXNWtaWGdvYmk1amJHOXVaU2gwS1NrN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCbExtRjBkSEpwWW5WMFpYTTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnNJR2x1SUdrcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJR2xiYkYwN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLR3dzSUdndVkyeHZibVVvZENrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHVXViVzl5Y0doQmRIUnlhV0oxZEdWek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JDQnBiaUJ5S1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQmJYU3dnZFNBOUlISmJiRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1pDQTlJREFzSUdZZ1BTQjFMbXhsYm1kMGFEc2daQ0E4SUdZN0lHUXJLeWxvTG5CMWMyZ29kVnRrWFM1amJHOXVaU2gwS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOXljR2hCZEhSeWFXSjFkR1Z6VzJ4ZElEMGdhRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEdocGN5NXRiM0p3YUZSaGNtZGxkSE5TWld4aGRHbDJaU0E5SUdVdWJXOXljR2hVWVhKblpYUnpVbVZzWVhScGRtVTdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQmxMbWR5YjNWd2N6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHd2dQU0F3TENCb0lEMGdZUzVzWlc1bmRHZzdJR3dnUENCb095QnNLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHRmJiRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVdSa1IzSnZkWEFvZFM1emRHRnlkQ3dnZFM1amIzVnVkQ3dnZFM1dFlYUmxjbWxoYkVsdVpHVjRLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0JsTG1KdmRXNWthVzVuUW05NE93b2dJQ0FnSUNBZ0lHOGdJVDA5SUc1MWJHd2dKaVlnS0hSb2FYTXVZbTkxYm1ScGJtZENiM2dnUFNCdkxtTnNiMjVsS0NrcE93b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1pTNWliM1Z1WkdsdVoxTndhR1Z5WlRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWXlBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaU0E5SUdNdVkyeHZibVVvS1Nrc0lIUm9hWE11WkhKaGQxSmhibWRsTG5OMFlYSjBJRDBnWlM1a2NtRjNVbUZ1WjJVdWMzUmhjblFzSUhSb2FYTXVaSEpoZDFKaGJtZGxMbU52ZFc1MElEMGdaUzVrY21GM1VtRnVaMlV1WTI5MWJuUXNJSFJvYVhNdWRYTmxja1JoZEdFZ1BTQmxMblZ6WlhKRVlYUmhMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVpHbHpjRzl6WlNJS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUgwS2ZTd2djbWdnUFNCdVpYY2dlbVVzSUhGdUlEMGdibVYzSUdocExDQnFjeUE5SUc1bGR5QlpkQ3dnWVdnZ1BTQnVaWGNnUVN3Z2Qya2dQU0J1WlhjZ1FTd2dRV2tnUFNCdVpYY2dRU3dnVW1rZ1BTQnVaWGNnUVN3Z1dtRWdQU0J1WlhjZ1FTd2daWElnUFNCdVpYY2dRU3dnZEhJZ1BTQnVaWGNnV2l3Z2JuSWdQU0J1WlhjZ1dpd2dhWElnUFNCdVpYY2dXaXdnYjJnZ1BTQnVaWGNnUVN3Z1kyZ2dQU0J1WlhjZ1FTd2diR2dnUFNCdVpYY2dRU3dnYzNJZ1BTQnVaWGNnUVN3Z2NuSWdQU0J1WlhjZ1FTd2dUWFFnUFNCamJHRnpjeUJsZUhSbGJtUnpJRXBsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnUjJVc0lIUWdQU0J1WlhjZ1UyNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTk5aWE5vSUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKTlpYTm9JaXdnZEdocGN5NW5aVzl0WlhSeWVTQTlJR1VzSUhSb2FYTXViV0YwWlhKcFlXd2dQU0IwTENCMGFHbHpMblZ3WkdGMFpVMXZjbkJvVkdGeVoyVjBjeWdwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU3dnZENrc0lHVXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6SUNFOVBTQjJiMmxrSURBZ0ppWWdLSFJvYVhNdWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpJRDBnWlM1dGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTXVjMnhwWTJVb0tTa3NJR1V1Ylc5eWNHaFVZWEpuWlhSRWFXTjBhVzl1WVhKNUlDRTlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXViVzl5Y0doVVlYSm5aWFJFYVdOMGFXOXVZWEo1SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pTNXRiM0p3YUZSaGNtZGxkRVJwWTNScGIyNWhjbmtwS1N3Z2RHaHBjeTV0WVhSbGNtbGhiQ0E5SUVGeWNtRjVMbWx6UVhKeVlYa29aUzV0WVhSbGNtbGhiQ2tnUHlCbExtMWhkR1Z5YVdGc0xuTnNhV05sS0NrZ09pQmxMbTFoZEdWeWFXRnNMQ0IwYUdsekxtZGxiMjFsZEhKNUlEMGdaUzVuWlc5dFpYUnllU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVMXZjbkJvVkdGeVoyVjBjeWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVaMlZ2YldWMGNua3ViVzl5Y0doQmRIUnlhV0oxZEdWekxDQnVJRDBnVDJKcVpXTjBMbXRsZVhNb2RDazdDaUFnSUNBZ0lDQWdhV1lnS0c0dWJHVnVaM1JvSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSYmJsc3dYVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklEMGdXMTBzSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJFYVdOMGFXOXVZWEo1SUQwZ2UzMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdhUzVzWlc1bmRHZzdJSElnUENCaE95QnlLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2FWdHlYUzV1WVcxbElIeDhJRk4wY21sdVp5aHlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sY3k1d2RYTm9LREFwTENCMGFHbHpMbTF2Y25Cb1ZHRnlaMlYwUkdsamRHbHZibUZ5ZVZ0dlhTQTlJSEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JuWlhSV1pYSjBaWGhRYjNOcGRHbHZiaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1kbGIyMWxkSEo1TENCcElEMGdiaTVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1TENCeUlEMGdiaTV0YjNKd2FFRjBkSEpwWW5WMFpYTXVjRzl6YVhScGIyNHNJR0VnUFNCdUxtMXZjbkJvVkdGeVoyVjBjMUpsYkdGMGFYWmxPd29nSUNBZ0lDQWdJSFF1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNocExDQmxLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSFJvYVhNdWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpPd29nSUNBZ0lDQWdJR2xtSUNoeUlDWW1JRzhwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdaWEl1YzJWMEtEQXNJREFzSURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR01nUFNBd0xDQnNJRDBnY2k1c1pXNW5kR2c3SUdNZ1BDQnNPeUJqS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCdlcyTmRMQ0IxSUQwZ2NsdGpYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2dnSVQwOUlEQWdKaVlnS0ZwaExtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kU3dnWlNrc0lHRWdQeUJsY2k1aFpHUlRZMkZzWldSV1pXTjBiM0lvV21Fc0lHZ3BJRG9nWlhJdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0ZwaExuTjFZaWgwS1N3Z2FDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFF1WVdSa0tHVnlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3Q2lBZ0lDQjlDaUFnSUNCeVlYbGpZWE4wS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVoyVnZiV1YwY25rc0lHa2dQU0IwYUdsekxtMWhkR1Z5YVdGc0xDQnlJRDBnZEdocGN5NXRZWFJ5YVhoWGIzSnNaRHNLSUNBZ0lDQWdJQ0JwSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1WW05MWJtUnBibWRUY0dobGNtVWdQVDA5SUc1MWJHd2dKaVlnYmk1amIyMXdkWFJsUW05MWJtUnBibWRUY0dobGNtVW9LU3dnYW5NdVkyOXdlU2h1TG1KdmRXNWthVzVuVTNCb1pYSmxLU3dnYW5NdVlYQndiSGxOWVhSeWFYZzBLSElwTENCeGJpNWpiM0I1S0dVdWNtRjVLUzV5WldOaGMzUW9aUzV1WldGeUtTd2dJU2hxY3k1amIyNTBZV2x1YzFCdmFXNTBLSEZ1TG05eWFXZHBiaWtnUFQwOUlDRXhJQ1ltSUNoeGJpNXBiblJsY25ObFkzUlRjR2hsY21Vb2FuTXNJR0ZvS1NBOVBUMGdiblZzYkNCOGZDQnhiaTV2Y21sbmFXNHVaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9ZV2dwSUQ0Z0tHVXVabUZ5SUMwZ1pTNXVaV0Z5S1NBcUtpQXlLU2tnSmlZZ0tISm9MbU52Y0hrb2Npa3VhVzUyWlhKMEtDa3NJSEZ1TG1OdmNIa29aUzV5WVhrcExtRndjR3g1VFdGMGNtbDROQ2h5YUNrc0lDRW9iaTVpYjNWdVpHbHVaMEp2ZUNBaFBUMGdiblZzYkNBbUppQnhiaTVwYm5SbGNuTmxZM1J6UW05NEtHNHVZbTkxYm1ScGJtZENiM2dwSUQwOVBTQWhNU2tnSmlZZ2RHaHBjeTVmWTI5dGNIVjBaVWx1ZEdWeWMyVmpkR2x2Ym5Nb1pTd2dkQ3dnY1c0cEtTazdDaUFnSUNCOUNpQWdJQ0JmWTI5dGNIVjBaVWx1ZEdWeWMyVmpkR2x2Ym5Nb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwTENCeUlEMGdkR2hwY3k1blpXOXRaWFJ5ZVN3Z1lTQTlJSFJvYVhNdWJXRjBaWEpwWVd3c0lHOGdQU0J5TG1sdVpHVjRMQ0JqSUQwZ2NpNWhkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVMQ0JzSUQwZ2NpNWhkSFJ5YVdKMWRHVnpMblYyTENCb0lEMGdjaTVoZEhSeWFXSjFkR1Z6TG5WMk1Td2dkU0E5SUhJdVlYUjBjbWxpZFhSbGN5NXViM0p0WVd3c0lHUWdQU0J5TG1keWIzVndjeXdnWmlBOUlISXVaSEpoZDFKaGJtZGxPd29nSUNBZ0lDQWdJR2xtSUNodklDRTlQU0J1ZFd4c0tTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGhLU2tnWm05eUtHeGxkQ0J0SUQwZ01Dd2dYeUE5SUdRdWJHVnVaM1JvT3lCdElEd2dYenNnYlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHY2dQU0JrVzIxZExDQndJRDBnWVZ0bkxtMWhkR1Z5YVdGc1NXNWtaWGhkTENCMklEMGdUV0YwYUM1dFlYZ29aeTV6ZEdGeWRDd2daaTV6ZEdGeWRDa3NJSGdnUFNCTllYUm9MbTFwYmlodkxtTnZkVzUwTENCTllYUm9MbTFwYmlobkxuTjBZWEowSUNzZ1p5NWpiM1Z1ZEN3Z1ppNXpkR0Z5ZENBcklHWXVZMjkxYm5RcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0I1SUQwZ2Rpd2dZaUE5SUhnN0lIa2dQQ0JpT3lCNUlDczlJRE1wZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIY2dQU0J2TG1kbGRGZ29lU2tzSUZJZ1BTQnZMbWRsZEZnb2VTQXJJREVwTENCSklEMGdieTVuWlhSWUtIa2dLeUF5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1BTQmhjaWgwYUdsekxDQndMQ0JsTENCdUxDQnNMQ0JvTENCMUxDQjNMQ0JTTENCSktTd2dhU0FtSmlBb2FTNW1ZV05sU1c1a1pYZ2dQU0JOWVhSb0xtWnNiMjl5S0hrZ0x5QXpLU3dnYVM1bVlXTmxMbTFoZEdWeWFXRnNTVzVrWlhnZ1BTQm5MbTFoZEdWeWFXRnNTVzVrWlhnc0lIUXVjSFZ6YUNocEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0SUQwZ1RXRjBhQzV0WVhnb01Dd2daaTV6ZEdGeWRDa3NJRjhnUFNCTllYUm9MbTFwYmlodkxtTnZkVzUwTENCbUxuTjBZWEowSUNzZ1ppNWpiM1Z1ZENrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaeUE5SUcwc0lIQWdQU0JmT3lCbklEd2djRHNnWnlBclBTQXpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMklEMGdieTVuWlhSWUtHY3BMQ0I0SUQwZ2J5NW5aWFJZS0djZ0t5QXhLU3dnZVNBOUlHOHVaMlYwV0NobklDc2dNaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwSUQwZ1lYSW9kR2hwY3l3Z1lTd2daU3dnYml3Z2JDd2dhQ3dnZFN3Z2Rpd2dlQ3dnZVNrc0lHa2dKaVlnS0drdVptRmpaVWx1WkdWNElEMGdUV0YwYUM1bWJHOXZjaWhuSUM4Z015a3NJSFF1Y0hWemFDaHBLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9ZeUFoUFQwZ2RtOXBaQ0F3S1NCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoaEtTa2dabTl5S0d4bGRDQnRJRDBnTUN3Z1h5QTlJR1F1YkdWdVozUm9PeUJ0SUR3Z1h6c2diU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdjZ1BTQmtXMjFkTENCd0lEMGdZVnRuTG0xaGRHVnlhV0ZzU1c1a1pYaGRMQ0IySUQwZ1RXRjBhQzV0WVhnb1p5NXpkR0Z5ZEN3Z1ppNXpkR0Z5ZENrc0lIZ2dQU0JOWVhSb0xtMXBiaWhqTG1OdmRXNTBMQ0JOWVhSb0xtMXBiaWhuTG5OMFlYSjBJQ3NnWnk1amIzVnVkQ3dnWmk1emRHRnlkQ0FySUdZdVkyOTFiblFwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjVJRDBnZGl3Z1lpQTlJSGc3SUhrZ1BDQmlPeUI1SUNzOUlETXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhjZ1BTQjVMQ0JTSUQwZ2VTQXJJREVzSUVrZ1BTQjVJQ3NnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1BTQmhjaWgwYUdsekxDQndMQ0JsTENCdUxDQnNMQ0JvTENCMUxDQjNMQ0JTTENCSktTd2dhU0FtSmlBb2FTNW1ZV05sU1c1a1pYZ2dQU0JOWVhSb0xtWnNiMjl5S0hrZ0x5QXpLU3dnYVM1bVlXTmxMbTFoZEdWeWFXRnNTVzVrWlhnZ1BTQm5MbTFoZEdWeWFXRnNTVzVrWlhnc0lIUXVjSFZ6YUNocEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0SUQwZ1RXRjBhQzV0WVhnb01Dd2daaTV6ZEdGeWRDa3NJRjhnUFNCTllYUm9MbTFwYmloakxtTnZkVzUwTENCbUxuTjBZWEowSUNzZ1ppNWpiM1Z1ZENrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaeUE5SUcwc0lIQWdQU0JmT3lCbklEd2djRHNnWnlBclBTQXpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMklEMGdaeXdnZUNBOUlHY2dLeUF4TENCNUlEMGdaeUFySURJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElEMGdZWElvZEdocGN5d2dZU3dnWlN3Z2Jpd2diQ3dnYUN3Z2RTd2dkaXdnZUN3Z2VTa3NJR2tnSmlZZ0tHa3VabUZqWlVsdVpHVjRJRDBnVFdGMGFDNW1iRzl2Y2lobklDOGdNeWtzSUhRdWNIVnphQ2hwS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDbjA3Q21aMWJtTjBhVzl1SUdkd0tITXhMQ0JsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2S1NCN0NpQWdJQ0JzWlhRZ1l6c0tJQ0FnSUdsbUlDaGxMbk5wWkdVZ1BUMDlJRVowSUQ4Z1l5QTlJRzR1YVc1MFpYSnpaV04wVkhKcFlXNW5iR1VvWVN3Z2Npd2dhU3dnSVRBc0lHOHBJRG9nWXlBOUlHNHVhVzUwWlhKelpXTjBWSEpwWVc1bmJHVW9hU3dnY2l3Z1lTd2daUzV6YVdSbElEMDlQU0JDYml3Z2J5a3NJR01nUFQwOUlHNTFiR3dwSUhKbGRIVnliaUJ1ZFd4c093b2dJQ0FnY25JdVkyOXdlU2h2S1N3Z2NuSXVZWEJ3YkhsTllYUnlhWGcwS0hNeExtMWhkSEpwZUZkdmNteGtLVHNLSUNBZ0lHeGxkQ0JzSUQwZ2RDNXlZWGt1YjNKcFoybHVMbVJwYzNSaGJtTmxWRzhvY25JcE93b2dJQ0FnY21WMGRYSnVJR3dnUENCMExtNWxZWElnZkh3Z2JDQStJSFF1Wm1GeUlEOGdiblZzYkNBNklIc0tJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2diQ3dLSUNBZ0lDQWdJQ0J3YjJsdWREb2djbkl1WTJ4dmJtVW9LU3dLSUNBZ0lDQWdJQ0J2WW1wbFkzUTZJSE14Q2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUdGeUtITXhMQ0JsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2TENCakxDQnNLU0I3Q2lBZ0lDQnpNUzVuWlhSV1pYSjBaWGhRYjNOcGRHbHZiaWh2TENCM2FTa3NJSE14TG1kbGRGWmxjblJsZUZCdmMybDBhVzl1S0dNc0lFRnBLU3dnY3pFdVoyVjBWbVZ5ZEdWNFVHOXphWFJwYjI0b2JDd2dVbWtwT3dvZ0lDQWdiR1YwSUdnZ1BTQm5jQ2h6TVN3Z1pTd2dkQ3dnYml3Z2Qya3NJRUZwTENCU2FTd2djM0lwT3dvZ0lDQWdhV1lnS0dncElIc0tJQ0FnSUNBZ0lDQnBJQ1ltSUNoMGNpNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR2tzSUc4cExDQnVjaTVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0drc0lHTXBMQ0JwY2k1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHa3NJR3dwTENCb0xuVjJJRDBnVlc0dVoyVjBTVzUwWlhKd2IyeGhkR2x2YmloemNpd2dkMmtzSUVGcExDQlNhU3dnZEhJc0lHNXlMQ0JwY2l3Z2JtVjNJRm9wS1N3Z2NpQW1KaUFvZEhJdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHlMQ0J2S1N3Z2JuSXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h5TENCaktTd2dhWEl1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoeUxDQnNLU3dnYUM1MWRqRWdQU0JWYmk1blpYUkpiblJsY25CdmJHRjBhVzl1S0hOeUxDQjNhU3dnUVdrc0lGSnBMQ0IwY2l3Z2JuSXNJR2x5TENCdVpYY2dXaWtzSUdndWRYWXlJRDBnYUM1MWRqRXBMQ0JoSUNZbUlDaHZhQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dFc0lHOHBMQ0JqYUM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHRXNJR01wTENCc2FDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR0VzSUd3cExDQm9MbTV2Y20xaGJDQTlJRlZ1TG1kbGRFbHVkR1Z5Y0c5c1lYUnBiMjRvYzNJc0lIZHBMQ0JCYVN3Z1Vta3NJRzlvTENCamFDd2diR2dzSUc1bGR5QkJLU3dnYUM1dWIzSnRZV3d1Wkc5MEtHNHVaR2x5WldOMGFXOXVLU0ErSURBZ0ppWWdhQzV1YjNKdFlXd3ViWFZzZEdsd2JIbFRZMkZzWVhJb0xURXBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1lUb2dieXdLSUNBZ0lDQWdJQ0FnSUNBZ1lqb2dZeXdLSUNBZ0lDQWdJQ0FnSUNBZ1l6b2diQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzT2lCdVpYY2dRU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd4SmJtUmxlRG9nTUFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ1ZXNHVaMlYwVG05eWJXRnNLSGRwTENCQmFTd2dVbWtzSUhVdWJtOXliV0ZzS1N3Z2FDNW1ZV05sSUQwZ2RUc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQm9Pd3A5Q25aaGNpQkthU0E5SUdOc1lYTnpJSE14SUdWNGRHVnVaSE1nUjJVZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREVzSUhRZ1BTQXhMQ0J1SUQwZ01Td2dhU0E5SURFc0lISWdQU0F4TENCaElEMGdNU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NTBlWEJsSUQwZ0lrSnZlRWRsYjIxbGRISjVJaXdnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmtaWEIwYURvZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHaFRaV2R0Wlc1MGN6b2dhU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwVTJWbmJXVnVkSE02SUhJc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1UyVm5iV1Z1ZEhNNklHRUtJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJR3hsZENCdklEMGdkR2hwY3pzS0lDQWdJQ0FnSUNCcElEMGdUV0YwYUM1bWJHOXZjaWhwS1N3Z2NpQTlJRTFoZEdndVpteHZiM0lvY2lrc0lHRWdQU0JOWVhSb0xtWnNiMjl5S0dFcE93b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1cxMHNJR3dnUFNCYlhTd2dhQ0E5SUZ0ZExDQjFJRDBnVzEwc0lHUWdQU0F3TENCbUlEMGdNRHNLSUNBZ0lDQWdJQ0J0S0NKNklpd2dJbmtpTENBaWVDSXNJQzB4TENBdE1Td2diaXdnZEN3Z1pTd2dZU3dnY2l3Z01Da3NJRzBvSW5vaUxDQWllU0lzSUNKNElpd2dNU3dnTFRFc0lHNHNJSFFzSUMxbExDQmhMQ0J5TENBeEtTd2diU2dpZUNJc0lDSjZJaXdnSW5raUxDQXhMQ0F4TENCbExDQnVMQ0IwTENCcExDQmhMQ0F5S1N3Z2JTZ2llQ0lzSUNKNklpd2dJbmtpTENBeExDQXRNU3dnWlN3Z2Jpd2dMWFFzSUdrc0lHRXNJRE1wTENCdEtDSjRJaXdnSW5raUxDQWllaUlzSURFc0lDMHhMQ0JsTENCMExDQnVMQ0JwTENCeUxDQTBLU3dnYlNnaWVDSXNJQ0o1SWl3Z0lub2lMQ0F0TVN3Z0xURXNJR1VzSUhRc0lDMXVMQ0JwTENCeUxDQTFLU3dnZEdocGN5NXpaWFJKYm1SbGVDaGpLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJSFpsS0d3c0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW01dmNtMWhiQ0lzSUc1bGR5QjJaU2hvTENBektTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0oxZGlJc0lHNWxkeUIyWlNoMUxDQXlLU2s3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYlNoZkxDQm5MQ0J3TENCMkxDQjRMQ0I1TENCaUxDQjNMQ0JTTENCSkxDQk5LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JVSUQwZ2VTQXZJRklzSUU4Z1BTQmlJQzhnU1N3Z1dTQTlJSGtnTHlBeUxDQWtJRDBnWWlBdklESXNJRlVnUFNCM0lDOGdNaXdnZWlBOUlGSWdLeUF4TENCeElEMGdTU0FySURFc0lFZ2dQU0F3TENCdVpTQTlJREFzSUZjZ1BTQnVaWGNnUVRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkxJRDBnTURzZ1N5QThJSEU3SUVzckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUkNBOUlFc2dLaUJQSUMwZ0pEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1J5QTlJREE3SUVjZ1BDQjZPeUJIS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb1pTQTlJRWNnS2lCVUlDMGdXVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWFcxOWRJRDBnYUdVZ0tpQjJMQ0JYVzJkZElEMGdSQ0FxSUhnc0lGZGJjRjBnUFNCVkxDQnNMbkIxYzJnb1Z5NTRMQ0JYTG5rc0lGY3VlaWtzSUZkYlgxMGdQU0F3TENCWFcyZGRJRDBnTUN3Z1YxdHdYU0E5SUhjZ1BpQXdJRDhnTVNBNklDMHhMQ0JvTG5CMWMyZ29WeTU0TENCWExua3NJRmN1ZWlrc0lIVXVjSFZ6YUNoSElDOGdVaWtzSUhVdWNIVnphQ2d4SUMwZ1N5QXZJRWtwTENCSUlDczlJREU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JMSUQwZ01Ec2dTeUE4SUVrN0lFc3JLeWxtYjNJb2JHVjBJRVFnUFNBd095QkVJRHdnVWpzZ1JDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSElEMGdaQ0FySUVRZ0t5QjZJQ29nU3l3Z2FHVWdQU0JrSUNzZ1JDQXJJSG9nS2lBb1N5QXJJREVwTENCbVpTQTlJR1FnS3lBb1JDQXJJREVwSUNzZ2VpQXFJQ2hMSUNzZ01Ta3NJRjlsSUQwZ1pDQXJJQ2hFSUNzZ01Ta2dLeUI2SUNvZ1N6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTXVjSFZ6YUNoSExDQm9aU3dnWDJVcExDQmpMbkIxYzJnb2FHVXNJR1psTENCZlpTa3NJRzVsSUNzOUlEWTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdieTVoWkdSSGNtOTFjQ2htTENCdVpTd2dUU2tzSUdZZ0t6MGdibVVzSUdRZ0t6MGdTRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdUMkpxWldOMExtRnpjMmxuYmloN2ZTd2daUzV3WVhKaGJXVjBaWEp6S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJtY205dFNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QnpNU2hsTG5kcFpIUm9MQ0JsTG1obGFXZG9kQ3dnWlM1a1pYQjBhQ3dnWlM1M2FXUjBhRk5sWjIxbGJuUnpMQ0JsTG1obGFXZG9kRk5sWjIxbGJuUnpMQ0JsTG1SbGNIUm9VMlZuYldWdWRITXBPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUFrYVNoek1Ta2dld29nSUNBZ2JHVjBJR1VnUFNCN2ZUc0tJQ0FnSUdadmNpaHNaWFFnZENCcGJpQnpNU2w3Q2lBZ0lDQWdJQ0FnWlZ0MFhTQTlJSHQ5T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlCcGJpQnpNVnQwWFNsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdjekZiZEYxYmJsMDdDaUFnSUNBZ0lDQWdJQ0FnSUdrZ0ppWWdLR2t1YVhORGIyeHZjaUI4ZkNCcExtbHpUV0YwY21sNE15QjhmQ0JwTG1selRXRjBjbWw0TkNCOGZDQnBMbWx6Vm1WamRHOXlNaUI4ZkNCcExtbHpWbVZqZEc5eU15QjhmQ0JwTG1selZtVmpkRzl5TkNCOGZDQnBMbWx6VkdWNGRIVnlaU0I4ZkNCcExtbHpVWFZoZEdWeWJtbHZiaWtnUHlCcExtbHpVbVZ1WkdWeVZHRnlaMlYwVkdWNGRIVnlaU0EvSUNoamIyNXpiMnhsTG5kaGNtNG9JbFZ1YVdadmNtMXpWWFJwYkhNNklGUmxlSFIxY21WeklHOW1JSEpsYm1SbGNpQjBZWEpuWlhSeklHTmhibTV2ZENCaVpTQmpiRzl1WldRZ2RtbGhJR05zYjI1bFZXNXBabTl5YlhNb0tTQnZjaUJ0WlhKblpWVnVhV1p2Y20xektDa3VJaWtzSUdWYmRGMWJibDBnUFNCdWRXeHNLU0E2SUdWYmRGMWJibDBnUFNCcExtTnNiMjVsS0NrZ09pQkJjbkpoZVM1cGMwRnljbUY1S0drcElEOGdaVnQwWFZ0dVhTQTlJR2t1YzJ4cFkyVW9LU0E2SUdWYmRGMWJibDBnUFNCcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQmxPd3A5Q21aMWJtTjBhVzl1SUV4MEtITXhLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlIdDlPd29nSUNBZ1ptOXlLR3hsZENCMElEMGdNRHNnZENBOElITXhMbXhsYm1kMGFEc2dkQ3NyS1hzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUNScEtITXhXM1JkS1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ2FXNGdiaWxsVzJsZElEMGdibHRwWFRzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCbE93cDlDbVoxYm1OMGFXOXVJRjl3S0hNeEtTQjdDaUFnSUNCc1pYUWdaU0E5SUZ0ZE93b2dJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Ec2dkQ0E4SUhNeExteGxibWQwYURzZ2RDc3JLV1V1Y0hWemFDaHpNVnQwWFM1amJHOXVaU2dwS1RzS0lDQWdJSEpsZEhWeWJpQmxPd3A5Q21aMWJtTjBhVzl1SUdKa0tITXhLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RXVaMlYwVW1WdVpHVnlWR0Z5WjJWMEtDa2dQVDA5SUc1MWJHd2dQeUJ6TVM1dmRYUndkWFJEYjJ4dmNsTndZV05sSURvZ1VXVXVkMjl5YTJsdVowTnZiRzl5VTNCaFkyVTdDbjBLZG1GeUlIaHdJRDBnZXdvZ0lDQWdZMnh2Ym1VNklDUnBMQW9nSUNBZ2JXVnlaMlU2SUV4MENuMHNJSFp3SUQwZ1lIWnZhV1FnYldGcGJpZ3BJSHNLQ1dkc1gxQnZjMmwwYVc5dUlEMGdjSEp2YW1WamRHbHZiazFoZEhKcGVDQXFJRzF2WkdWc1ZtbGxkMDFoZEhKcGVDQXFJSFpsWXpRb0lIQnZjMmwwYVc5dUxDQXhMakFnS1RzS2ZXQXNJSGx3SUQwZ1lIWnZhV1FnYldGcGJpZ3BJSHNLQ1dkc1gwWnlZV2REYjJ4dmNpQTlJSFpsWXpRb0lERXVNQ3dnTUM0d0xDQXdMakFzSURFdU1DQXBPd3A5WUN3Z2FuUWdQU0JqYkdGemN5QmxlSFJsYm1SeklHSjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5UYUdGa1pYSk5ZWFJsY21saGJDQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlVMmhoWkdWeVRXRjBaWEpwWVd3aUxDQjBhR2x6TG1SbFptbHVaWE1nUFNCN2ZTd2dkR2hwY3k1MWJtbG1iM0p0Y3lBOUlIdDlMQ0IwYUdsekxuVnVhV1p2Y20xelIzSnZkWEJ6SUQwZ1cxMHNJSFJvYVhNdWRtVnlkR1Y0VTJoaFpHVnlJRDBnZG5Bc0lIUm9hWE11Wm5KaFoyMWxiblJUYUdGa1pYSWdQU0I1Y0N3Z2RHaHBjeTVzYVc1bGQybGtkR2dnUFNBeExDQjBhR2x6TG5kcGNtVm1jbUZ0WlNBOUlDRXhMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVYzYVdSMGFDQTlJREVzSUhSb2FYTXVabTluSUQwZ0lURXNJSFJvYVhNdWJHbG5hSFJ6SUQwZ0lURXNJSFJvYVhNdVkyeHBjSEJwYm1jZ1BTQWhNU3dnZEdocGN5NW1iM0pqWlZOcGJtZHNaVkJoYzNNZ1BTQWhNQ3dnZEdocGN5NWxlSFJsYm5OcGIyNXpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmtaWEpwZG1GMGFYWmxjem9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJR1p5WVdkRVpYQjBhRG9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJR1J5WVhkQ2RXWm1aWEp6T2lBaE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHVnlWR1Y0ZEhWeVpVeFBSRG9nSVRFS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1SbFptRjFiSFJCZEhSeWFXSjFkR1ZXWVd4MVpYTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQWdJQ0FnWFN3S0lDQWdJQ0FnSUNBZ0lDQWdkWFk2SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0NpQWdJQ0FnSUNBZ0lDQWdJRjBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIVjJNVG9nV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBS0lDQWdJQ0FnSUNBZ0lDQWdYUW9nSUNBZ0lDQWdJSDBzSUhSb2FYTXVhVzVrWlhnd1FYUjBjbWxpZFhSbFRtRnRaU0E5SUhadmFXUWdNQ3dnZEdocGN5NTFibWxtYjNKdGMwNWxaV1JWY0dSaGRHVWdQU0FoTVN3Z2RHaHBjeTVuYkhOc1ZtVnljMmx2YmlBOUlHNTFiR3dzSUdVZ0lUMDlJSFp2YVdRZ01DQW1KaUIwYUdsekxuTmxkRlpoYkhWbGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1aeVlXZHRaVzUwVTJoaFpHVnlJRDBnWlM1bWNtRm5iV1Z1ZEZOb1lXUmxjaXdnZEdocGN5NTJaWEowWlhoVGFHRmtaWElnUFNCbExuWmxjblJsZUZOb1lXUmxjaXdnZEdocGN5NTFibWxtYjNKdGN5QTlJQ1JwS0dVdWRXNXBabTl5YlhNcExDQjBhR2x6TG5WdWFXWnZjbTF6UjNKdmRYQnpJRDBnWDNBb1pTNTFibWxtYjNKdGMwZHliM1Z3Y3lrc0lIUm9hWE11WkdWbWFXNWxjeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUdVdVpHVm1hVzVsY3lrc0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ1pTNTNhWEpsWm5KaGJXVXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdaUzUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dzSUhSb2FYTXVabTluSUQwZ1pTNW1iMmNzSUhSb2FYTXViR2xuYUhSeklEMGdaUzVzYVdkb2RITXNJSFJvYVhNdVkyeHBjSEJwYm1jZ1BTQmxMbU5zYVhCd2FXNW5MQ0IwYUdsekxtVjRkR1Z1YzJsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JsTG1WNGRHVnVjMmx2Ym5NcExDQjBhR2x6TG1kc2MyeFdaWEp6YVc5dUlEMGdaUzVuYkhOc1ZtVnljMmx2Yml3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCemRYQmxjaTUwYjBwVFQwNG9aU2s3Q2lBZ0lDQWdJQ0FnZEM1bmJITnNWbVZ5YzJsdmJpQTlJSFJvYVhNdVoyeHpiRlpsY25OcGIyNHNJSFF1ZFc1cFptOXliWE1nUFNCN2ZUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dhVzRnZEdocGN5NTFibWxtYjNKdGN5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZEdocGN5NTFibWxtYjNKdGMxdHBYUzUyWVd4MVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnWVNBbUppQmhMbWx6VkdWNGRIVnlaU0EvSUhRdWRXNXBabTl5YlhOYmFWMGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlkQ0lzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dZUzUwYjBwVFQwNG9aU2t1ZFhWcFpBb2dJQ0FnSUNBZ0lDQWdJQ0I5SURvZ1lTQW1KaUJoTG1selEyOXNiM0lnUHlCMExuVnVhV1p2Y20xelcybGRJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbU1pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR0V1WjJWMFNHVjRLQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQTZJR0VnSmlZZ1lTNXBjMVpsWTNSdmNqSWdQeUIwTG5WdWFXWnZjbTF6VzJsZElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0luWXlJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmhMblJ2UVhKeVlYa29LUW9nSUNBZ0lDQWdJQ0FnSUNCOUlEb2dZU0FtSmlCaExtbHpWbVZqZEc5eU15QS9JSFF1ZFc1cFptOXliWE5iYVYwZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaWRqTWlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHRXVkRzlCY25KaGVTZ3BDaUFnSUNBZ0lDQWdJQ0FnSUgwZ09pQmhJQ1ltSUdFdWFYTldaV04wYjNJMElEOGdkQzUxYm1sbWIzSnRjMXRwWFNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKMk5DSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1lTNTBiMEZ5Y21GNUtDa0tJQ0FnSUNBZ0lDQWdJQ0FnZlNBNklHRWdKaVlnWVM1cGMwMWhkSEpwZURNZ1B5QjBMblZ1YVdadmNtMXpXMmxkSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSW0weklpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCaExuUnZRWEp5WVhrb0tRb2dJQ0FnSUNBZ0lDQWdJQ0I5SURvZ1lTQW1KaUJoTG1selRXRjBjbWw0TkNBL0lIUXVkVzVwWm05eWJYTmJhVjBnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFpYlRRaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdFdWRHOUJjbkpoZVNncENpQWdJQ0FnSUNBZ0lDQWdJSDBnT2lCMExuVnVhV1p2Y20xelcybGRJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR0VLSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vZEdocGN5NWtaV1pwYm1WektTNXNaVzVuZEdnZ1BpQXdJQ1ltSUNoMExtUmxabWx1WlhNZ1BTQjBhR2x6TG1SbFptbHVaWE1wTENCMExuWmxjblJsZUZOb1lXUmxjaUE5SUhSb2FYTXVkbVZ5ZEdWNFUyaGhaR1Z5TENCMExtWnlZV2R0Wlc1MFUyaGhaR1Z5SUQwZ2RHaHBjeTVtY21GbmJXVnVkRk5vWVdSbGNpd2dkQzVzYVdkb2RITWdQU0IwYUdsekxteHBaMmgwY3l3Z2RDNWpiR2x3Y0dsdVp5QTlJSFJvYVhNdVkyeHBjSEJwYm1jN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCN2ZUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dhVzRnZEdocGN5NWxlSFJsYm5OcGIyNXpLWFJvYVhNdVpYaDBaVzV6YVc5dWMxdHBYU0E5UFQwZ0lUQWdKaVlnS0c1YmFWMGdQU0FoTUNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVyWlhsektHNHBMbXhsYm1kMGFDQStJREFnSmlZZ0tIUXVaWGgwWlc1emFXOXVjeUE5SUc0cExDQjBPd29nSUNBZ2ZRcDlMQ0JEY3lBOUlHTnNZWE56SUdWNGRHVnVaSE1nU21VZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selEyRnRaWEpoSUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKRFlXMWxjbUVpTENCMGFHbHpMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaU0E5SUc1bGR5QjZaU3dnZEdocGN5NXdjbTlxWldOMGFXOXVUV0YwY21sNElEMGdibVYzSUhwbExDQjBhR2x6TG5CeWIycGxZM1JwYjI1TllYUnlhWGhKYm5abGNuTmxJRDBnYm1WM0lIcGxMQ0IwYUdsekxtTnZiM0prYVc1aGRHVlRlWE4wWlcwZ1BTQjJianNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXNJSFFwTENCMGFHbHpMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaUzVqYjNCNUtHVXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxLU3dnZEdocGN5NXdjbTlxWldOMGFXOXVUV0YwY21sNExtTnZjSGtvWlM1d2NtOXFaV04wYVc5dVRXRjBjbWw0S1N3Z2RHaHBjeTV3Y205cVpXTjBhVzl1VFdGMGNtbDRTVzUyWlhKelpTNWpiM0I1S0dVdWNISnZhbVZqZEdsdmJrMWhkSEpwZUVsdWRtVnljMlVwTENCMGFHbHpMbU52YjNKa2FXNWhkR1ZUZVhOMFpXMGdQU0JsTG1OdmIzSmthVzVoZEdWVGVYTjBaVzBzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSWGIzSnNaRVJwY21WamRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbWRsZEZkdmNteGtSR2x5WldOMGFXOXVLR1VwTG01bFoyRjBaU2dwT3dvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb1pTa2dld29nSUNBZ0lDQWdJSE4xY0dWeUxuVndaR0YwWlUxaGRISnBlRmR2Y214a0tHVXBMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtTVzUyWlhKelpTNWpiM0I1S0hSb2FYTXViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwT3dvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhOMWNHVnlMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLR1VzSUhRcExDQjBhR2x6TG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlM1amIzQjVLSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXBMbWx1ZG1WeWRDZ3BPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS2ZTd2dlWFFnUFNCamJHRnpjeUJsZUhSbGJtUnpJRU56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQTFNQ3dnZENBOUlERXNJRzRnUFNBdU1Td2dhU0E5SURKbE15bDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1cGMxQmxjbk53WldOMGFYWmxRMkZ0WlhKaElEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSlFaWEp6Y0dWamRHbDJaVU5oYldWeVlTSXNJSFJvYVhNdVptOTJJRDBnWlN3Z2RHaHBjeTU2YjI5dElEMGdNU3dnZEdocGN5NXVaV0Z5SUQwZ2Jpd2dkR2hwY3k1bVlYSWdQU0JwTENCMGFHbHpMbVp2WTNWeklEMGdNVEFzSUhSb2FYTXVZWE53WldOMElEMGdkQ3dnZEdocGN5NTJhV1YzSUQwZ2JuVnNiQ3dnZEdocGN5NW1hV3h0UjJGMVoyVWdQU0F6TlN3Z2RHaHBjeTVtYVd4dFQyWm1jMlYwSUQwZ01Dd2dkR2hwY3k1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRLQ2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxMQ0IwS1N3Z2RHaHBjeTVtYjNZZ1BTQmxMbVp2ZGl3Z2RHaHBjeTU2YjI5dElEMGdaUzU2YjI5dExDQjBhR2x6TG01bFlYSWdQU0JsTG01bFlYSXNJSFJvYVhNdVptRnlJRDBnWlM1bVlYSXNJSFJvYVhNdVptOWpkWE1nUFNCbExtWnZZM1Z6TENCMGFHbHpMbUZ6Y0dWamRDQTlJR1V1WVhOd1pXTjBMQ0IwYUdsekxuWnBaWGNnUFNCbExuWnBaWGNnUFQwOUlHNTFiR3dnUHlCdWRXeHNJRG9nVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1MmFXVjNLU3dnZEdocGN5NW1hV3h0UjJGMVoyVWdQU0JsTG1acGJHMUhZWFZuWlN3Z2RHaHBjeTVtYVd4dFQyWm1jMlYwSUQwZ1pTNW1hV3h0VDJabWMyVjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm05allXeE1aVzVuZEdnb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdMalVnS2lCMGFHbHpMbWRsZEVacGJHMUlaV2xuYUhRb0tTQXZJR1U3Q2lBZ0lDQWdJQ0FnZEdocGN5NW1iM1lnUFNCYWFTQXFJRElnS2lCTllYUm9MbUYwWVc0b2RDa3NJSFJvYVhNdWRYQmtZWFJsVUhKdmFtVmpkR2x2YmsxaGRISnBlQ2dwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBSbTlqWVd4TVpXNW5kR2dvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCTllYUm9MblJoYmloaGFTQXFJQzQxSUNvZ2RHaHBjeTVtYjNZcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBdU5TQXFJSFJvYVhNdVoyVjBSbWxzYlVobGFXZG9kQ2dwSUM4Z1pUc0tJQ0FnSUgwS0lDQWdJR2RsZEVWbVptVmpkR2wyWlVaUFZpZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXbWtnS2lBeUlDb2dUV0YwYUM1aGRHRnVLRTFoZEdndWRHRnVLR0ZwSUNvZ0xqVWdLaUIwYUdsekxtWnZkaWtnTHlCMGFHbHpMbnB2YjIwcE93b2dJQ0FnZlFvZ0lDQWdaMlYwUm1sc2JWZHBaSFJvS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpwYkcxSFlYVm5aU0FxSUUxaGRHZ3ViV2x1S0hSb2FYTXVZWE53WldOMExDQXhLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFWnBiRzFJWldsbmFIUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVptbHNiVWRoZFdkbElDOGdUV0YwYUM1dFlYZ29kR2hwY3k1aGMzQmxZM1FzSURFcE93b2dJQ0FnZlFvZ0lDQWdjMlYwVm1sbGQwOW1abk5sZENobExDQjBMQ0J1TENCcExDQnlMQ0JoS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVoYzNCbFkzUWdQU0JsSUM4Z2RDd2dkR2hwY3k1MmFXVjNJRDA5UFNCdWRXeHNJQ1ltSUNoMGFHbHpMblpwWlhjZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdWdVlXSnNaV1E2SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JtZFd4c1YybGtkR2c2SURFc0NpQWdJQ0FnSUNBZ0lDQWdJR1oxYkd4SVpXbG5hSFE2SURFc0NpQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRGZzZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEZrNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUF4TEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklERUtJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NTJhV1YzTG1WdVlXSnNaV1FnUFNBaE1Dd2dkR2hwY3k1MmFXVjNMbVoxYkd4WGFXUjBhQ0E5SUdVc0lIUm9hWE11ZG1sbGR5NW1kV3hzU0dWcFoyaDBJRDBnZEN3Z2RHaHBjeTUyYVdWM0xtOW1abk5sZEZnZ1BTQnVMQ0IwYUdsekxuWnBaWGN1YjJabWMyVjBXU0E5SUdrc0lIUm9hWE11ZG1sbGR5NTNhV1IwYUNBOUlISXNJSFJvYVhNdWRtbGxkeTVvWldsbmFIUWdQU0JoTENCMGFHbHpMblZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tUc0tJQ0FnSUgwS0lDQWdJR05zWldGeVZtbGxkMDltWm5ObGRDZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuWnBaWGNnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11ZG1sbGR5NWxibUZpYkdWa0lEMGdJVEVwTENCMGFHbHpMblZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG01bFlYSXNJSFFnUFNCbElDb2dUV0YwYUM1MFlXNG9ZV2tnS2lBdU5TQXFJSFJvYVhNdVptOTJLU0F2SUhSb2FYTXVlbTl2YlN3Z2JpQTlJRElnS2lCMExDQnBJRDBnZEdocGN5NWhjM0JsWTNRZ0tpQnVMQ0J5SUQwZ0xTNDFJQ29nYVN3Z1lTQTlJSFJvYVhNdWRtbGxkenNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUyYVdWM0lDRTlQU0J1ZFd4c0lDWW1JSFJvYVhNdWRtbGxkeTVsYm1GaWJHVmtLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1lTNW1kV3hzVjJsa2RHZ3NJR3dnUFNCaExtWjFiR3hJWldsbmFIUTdDaUFnSUNBZ0lDQWdJQ0FnSUhJZ0t6MGdZUzV2Wm1aelpYUllJQ29nYVNBdklHTXNJSFFnTFQwZ1lTNXZabVp6WlhSWklDb2diaUF2SUd3c0lHa2dLajBnWVM1M2FXUjBhQ0F2SUdNc0lHNGdLajBnWVM1b1pXbG5hSFFnTHlCc093b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlIUm9hWE11Wm1sc2JVOW1abk5sZERzS0lDQWdJQ0FnSUNCdklDRTlQU0F3SUNZbUlDaHlJQ3M5SUdVZ0tpQnZJQzhnZEdocGN5NW5aWFJHYVd4dFYybGtkR2dvS1Nrc0lIUm9hWE11Y0hKdmFtVmpkR2x2YmsxaGRISnBlQzV0WVd0bFVHVnljM0JsWTNScGRtVW9jaXdnY2lBcklHa3NJSFFzSUhRZ0xTQnVMQ0JsTENCMGFHbHpMbVpoY2l3Z2RHaHBjeTVqYjI5eVpHbHVZWFJsVTNsemRHVnRLU3dnZEdocGN5NXdjbTlxWldOMGFXOXVUV0YwY21sNFNXNTJaWEp6WlM1amIzQjVLSFJvYVhNdWNISnZhbVZqZEdsdmJrMWhkSEpwZUNrdWFXNTJaWEowS0NrN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdjM1Z3WlhJdWRHOUtVMDlPS0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtOWlhbVZqZEM1bWIzWWdQU0IwYUdsekxtWnZkaXdnZEM1dlltcGxZM1F1ZW05dmJTQTlJSFJvYVhNdWVtOXZiU3dnZEM1dlltcGxZM1F1Ym1WaGNpQTlJSFJvYVhNdWJtVmhjaXdnZEM1dlltcGxZM1F1Wm1GeUlEMGdkR2hwY3k1bVlYSXNJSFF1YjJKcVpXTjBMbVp2WTNWeklEMGdkR2hwY3k1bWIyTjFjeXdnZEM1dlltcGxZM1F1WVhOd1pXTjBJRDBnZEdocGN5NWhjM0JsWTNRc0lIUm9hWE11ZG1sbGR5QWhQVDBnYm5Wc2JDQW1KaUFvZEM1dlltcGxZM1F1ZG1sbGR5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJSFJvYVhNdWRtbGxkeWtwTENCMExtOWlhbVZqZEM1bWFXeHRSMkYxWjJVZ1BTQjBhR2x6TG1acGJHMUhZWFZuWlN3Z2RDNXZZbXBsWTNRdVptbHNiVTltWm5ObGRDQTlJSFJvYVhNdVptbHNiVTltWm5ObGRDd2dkRHNLSUNBZ0lIMEtmU3dnUTJrZ1BTQXRPVEFzSUZCcElEMGdNU3dnWDI4Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVwbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pEZFdKbFEyRnRaWEpoSWl3Z2RHaHBjeTV5Wlc1a1pYSlVZWEpuWlhRZ1BTQnVMQ0IwYUdsekxtTnZiM0prYVc1aGRHVlRlWE4wWlcwZ1BTQnVkV3hzTENCMGFHbHpMbUZqZEdsMlpVMXBjRzFoY0V4bGRtVnNJRDBnTURzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUc1bGR5QjVkQ2hEYVN3Z1VHa3NJR1VzSUhRcE93b2dJQ0FnSUNBZ0lHa3ViR0Y1WlhKeklEMGdkR2hwY3k1c1lYbGxjbk1zSUhSb2FYTXVZV1JrS0drcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2JtVjNJSGwwS0VOcExDQlFhU3dnWlN3Z2RDazdDaUFnSUNBZ0lDQWdjaTVzWVhsbGNuTWdQU0IwYUdsekxteGhlV1Z5Y3l3Z2RHaHBjeTVoWkdRb2NpazdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQnVaWGNnZVhRb1Eya3NJRkJwTENCbExDQjBLVHNLSUNBZ0lDQWdJQ0JoTG14aGVXVnljeUE5SUhSb2FYTXViR0Y1WlhKekxDQjBhR2x6TG1Ga1pDaGhLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJRzVsZHlCNWRDaERhU3dnVUdrc0lHVXNJSFFwT3dvZ0lDQWdJQ0FnSUc4dWJHRjVaWEp6SUQwZ2RHaHBjeTVzWVhsbGNuTXNJSFJvYVhNdVlXUmtLRzhwT3dvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnYm1WM0lIbDBLRU5wTENCUWFTd2daU3dnZENrN0NpQWdJQ0FnSUNBZ1l5NXNZWGxsY25NZ1BTQjBhR2x6TG14aGVXVnljeXdnZEdocGN5NWhaR1FvWXlrN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdVpYY2dlWFFvUTJrc0lGQnBMQ0JsTENCMEtUc0tJQ0FnSUNBZ0lDQnNMbXhoZVdWeWN5QTlJSFJvYVhNdWJHRjVaWEp6TENCMGFHbHpMbUZrWkNoc0tUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVTnZiM0prYVc1aGRHVlRlWE4wWlcwb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1OdmIzSmthVzVoZEdWVGVYTjBaVzBzSUhRZ1BTQjBhR2x6TG1Ob2FXeGtjbVZ1TG1OdmJtTmhkQ2dwTENCYmJpd2dhU3dnY2l3Z1lTd2dieXdnWTEwZ1BTQjBPd29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR3dnYjJZZ2RDbDBhR2x6TG5KbGJXOTJaU2hzS1RzS0lDQWdJQ0FnSUNCcFppQW9aU0E5UFQwZ2RtNHBJRzR1ZFhBdWMyVjBLREFzSURFc0lEQXBMQ0J1TG14dmIydEJkQ2d4TENBd0xDQXdLU3dnYVM1MWNDNXpaWFFvTUN3Z01Td2dNQ2tzSUdrdWJHOXZhMEYwS0MweExDQXdMQ0F3S1N3Z2NpNTFjQzV6WlhRb01Dd2dNQ3dnTFRFcExDQnlMbXh2YjJ0QmRDZ3dMQ0F4TENBd0tTd2dZUzUxY0M1elpYUW9NQ3dnTUN3Z01Ta3NJR0V1Ykc5dmEwRjBLREFzSUMweExDQXdLU3dnYnk1MWNDNXpaWFFvTUN3Z01Td2dNQ2tzSUc4dWJHOXZhMEYwS0RBc0lEQXNJREVwTENCakxuVndMbk5sZENnd0xDQXhMQ0F3S1N3Z1l5NXNiMjlyUVhRb01Dd2dNQ3dnTFRFcE93b2dJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHVWdQVDA5SUVkeUtTQnVMblZ3TG5ObGRDZ3dMQ0F0TVN3Z01Da3NJRzR1Ykc5dmEwRjBLQzB4TENBd0xDQXdLU3dnYVM1MWNDNXpaWFFvTUN3Z0xURXNJREFwTENCcExteHZiMnRCZENneExDQXdMQ0F3S1N3Z2NpNTFjQzV6WlhRb01Dd2dNQ3dnTVNrc0lISXViRzl2YTBGMEtEQXNJREVzSURBcExDQmhMblZ3TG5ObGRDZ3dMQ0F3TENBdE1Ta3NJR0V1Ykc5dmEwRjBLREFzSUMweExDQXdLU3dnYnk1MWNDNXpaWFFvTUN3Z0xURXNJREFwTENCdkxteHZiMnRCZENnd0xDQXdMQ0F4S1N3Z1l5NTFjQzV6WlhRb01Dd2dMVEVzSURBcExDQmpMbXh2YjJ0QmRDZ3dMQ0F3TENBdE1TazdDaUFnSUNBZ0lDQWdaV3h6WlNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSWxSSVVrVkZMa04xWW1WRFlXMWxjbUV1ZFhCa1lYUmxRMjl2Y21ScGJtRjBaVk41YzNSbGJTZ3BPaUJKYm5aaGJHbGtJR052YjNKa2FXNWhkR1VnYzNsemRHVnRPaUFpSUNzZ1pTazdDaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdiQ0J2WmlCMEtYUm9hWE11WVdSa0tHd3BMQ0JzTG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0NrN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjR0Z5Wlc1MElEMDlQU0J1ZFd4c0lDWW1JSFJvYVhNdWRYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb0tUc0tJQ0FnSUNBZ0lDQnNaWFFnZXlCeVpXNWtaWEpVWVhKblpYUTZJRzRnTENCaFkzUnBkbVZOYVhCdFlYQk1aWFpsYkRvZ2FTQWdmU0E5SUhSb2FYTTdDaUFnSUNBZ0lDQWdkR2hwY3k1amIyOXlaR2x1WVhSbFUzbHpkR1Z0SUNFOVBTQmxMbU52YjNKa2FXNWhkR1ZUZVhOMFpXMGdKaVlnS0hSb2FYTXVZMjl2Y21ScGJtRjBaVk41YzNSbGJTQTlJR1V1WTI5dmNtUnBibUYwWlZONWMzUmxiU3dnZEdocGN5NTFjR1JoZEdWRGIyOXlaR2x1WVhSbFUzbHpkR1Z0S0NrcE93b2dJQ0FnSUNBZ0lHeGxkQ0JiY2l3Z1lTd2dieXdnWXl3Z2JDd2dhRjBnUFNCMGFHbHpMbU5vYVd4a2NtVnVMQ0IxSUQwZ1pTNW5aWFJTWlc1a1pYSlVZWEpuWlhRb0tTd2daQ0E5SUdVdVoyVjBRV04wYVhabFEzVmlaVVpoWTJVb0tTd2daaUE5SUdVdVoyVjBRV04wYVhabFRXbHdiV0Z3VEdWMlpXd29LU3dnYlNBOUlHVXVlSEl1Wlc1aFlteGxaRHNLSUNBZ0lDQWdJQ0JsTG5oeUxtVnVZV0pzWldRZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JzWlhRZ1h5QTlJRzR1ZEdWNGRIVnlaUzVuWlc1bGNtRjBaVTFwY0cxaGNITTdDaUFnSUNBZ0lDQWdiaTUwWlhoMGRYSmxMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJQ0V4TENCbExuTmxkRkpsYm1SbGNsUmhjbWRsZENodUxDQXdMQ0JwS1N3Z1pTNXlaVzVrWlhJb2RDd2djaWtzSUdVdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0c0c0lERXNJR2twTENCbExuSmxibVJsY2loMExDQmhLU3dnWlM1elpYUlNaVzVrWlhKVVlYSm5aWFFvYml3Z01pd2dhU2tzSUdVdWNtVnVaR1Z5S0hRc0lHOHBMQ0JsTG5ObGRGSmxibVJsY2xSaGNtZGxkQ2h1TENBekxDQnBLU3dnWlM1eVpXNWtaWElvZEN3Z1l5a3NJR1V1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLRzRzSURRc0lHa3BMQ0JsTG5KbGJtUmxjaWgwTENCc0tTd2diaTUwWlhoMGRYSmxMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJRjhzSUdVdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0c0c0lEVXNJR2twTENCbExuSmxibVJsY2loMExDQm9LU3dnWlM1elpYUlNaVzVrWlhKVVlYSm5aWFFvZFN3Z1pDd2daaWtzSUdVdWVISXVaVzVoWW14bFpDQTlJRzBzSUc0dWRHVjRkSFZ5WlM1dVpXVmtjMUJOVWtWTlZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNCOUNuMHNJRXRwSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJUZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzTENCb0tYc0tJQ0FnSUNBZ0lDQmxJRDBnWlNBaFBUMGdkbTlwWkNBd0lEOGdaU0E2SUZ0ZExDQjBJRDBnZENBaFBUMGdkbTlwWkNBd0lEOGdkQ0E2SUhwdUxDQnpkWEJsY2lobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzTENCb0tTd2dkR2hwY3k1cGMwTjFZbVZVWlhoMGRYSmxJRDBnSVRBc0lIUm9hWE11Wm14cGNGa2dQU0FoTVRzS0lDQWdJSDBLSUNBZ0lHZGxkQ0JwYldGblpYTW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXMWhaMlU3Q2lBZ0lDQjlDaUFnSUNCelpYUWdhVzFoWjJWektHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHRZV2RsSUQwZ1pUc0tJQ0FnSUgwS2ZTd2dlRzhnUFNCamJHRnpjeUJsZUhSbGJtUnpJSEYwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ2UzMHBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXNJR1VzSUhRcExDQjBhR2x6TG1selYyVmlSMHhEZFdKbFVtVnVaR1Z5VkdGeVoyVjBJRDBnSVRBN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb09pQXhDaUFnSUNBZ0lDQWdmU3dnYVNBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2Jnb2dJQ0FnSUNBZ0lGMDdDaUFnSUNBZ0lDQWdkQzVsYm1OdlpHbHVaeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaE5jeWdpVkVoU1JVVXVWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwT2lCdmNIUnBiMjR1Wlc1amIyUnBibWNnYUdGeklHSmxaVzRnY21Wd2JHRmpaV1FnWW5rZ2IzQjBhVzl1TG1OdmJHOXlVM0JoWTJVdUlpa3NJSFF1WTI5c2IzSlRjR0ZqWlNBOUlIUXVaVzVqYjJScGJtY2dQVDA5SUhKcElEOGdkblFnT2lCWWRDa3NJSFJvYVhNdWRHVjRkSFZ5WlNBOUlHNWxkeUJMYVNocExDQjBMbTFoY0hCcGJtY3NJSFF1ZDNKaGNGTXNJSFF1ZDNKaGNGUXNJSFF1YldGblJtbHNkR1Z5TENCMExtMXBia1pwYkhSbGNpd2dkQzVtYjNKdFlYUXNJSFF1ZEhsd1pTd2dkQzVoYm1semIzUnliM0I1TENCMExtTnZiRzl5VTNCaFkyVXBMQ0IwYUdsekxuUmxlSFIxY21VdWFYTlNaVzVrWlhKVVlYSm5aWFJVWlhoMGRYSmxJRDBnSVRBc0lIUm9hWE11ZEdWNGRIVnlaUzVuWlc1bGNtRjBaVTFwY0cxaGNITWdQU0IwTG1kbGJtVnlZWFJsVFdsd2JXRndjeUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RDNW5aVzVsY21GMFpVMXBjRzFoY0hNZ09pQWhNU3dnZEdocGN5NTBaWGgwZFhKbExtMXBia1pwYkhSbGNpQTlJSFF1YldsdVJtbHNkR1Z5SUNFOVBTQjJiMmxrSURBZ1B5QjBMbTFwYmtacGJIUmxjaUE2SUcxME93b2dJQ0FnZlFvZ0lDQWdabkp2YlVWeGRXbHlaV04wWVc1bmRXeGhjbFJsZUhSMWNtVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZEdWNGRIVnlaUzUwZVhCbElEMGdkQzUwZVhCbExDQjBhR2x6TG5SbGVIUjFjbVV1WTI5c2IzSlRjR0ZqWlNBOUlIUXVZMjlzYjNKVGNHRmpaU3dnZEdocGN5NTBaWGgwZFhKbExtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lBOUlIUXVaMlZ1WlhKaGRHVk5hWEJ0WVhCekxDQjBhR2x6TG5SbGVIUjFjbVV1YldsdVJtbHNkR1Z5SUQwZ2RDNXRhVzVHYVd4MFpYSXNJSFJvYVhNdWRHVjRkSFZ5WlM1dFlXZEdhV3gwWlhJZ1BTQjBMbTFoWjBacGJIUmxjanNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RXNXBabTl5YlhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUkZjWFZwY21WamREb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nWUFvS0NRa0pDWFpoY25scGJtY2dkbVZqTXlCMlYyOXliR1JFYVhKbFkzUnBiMjQ3Q2dvSkNRa0pkbVZqTXlCMGNtRnVjMlp2Y20xRWFYSmxZM1JwYjI0b0lHbHVJSFpsWXpNZ1pHbHlMQ0JwYmlCdFlYUTBJRzFoZEhKcGVDQXBJSHNLQ2drSkNRa0pjbVYwZFhKdUlHNXZjbTFoYkdsNlpTZ2dLQ0J0WVhSeWFYZ2dLaUIyWldNMEtDQmthWElzSURBdU1DQXBJQ2t1ZUhsNklDazdDZ29KQ1FrSmZRb0tDUWtKQ1hadmFXUWdiV0ZwYmlncElIc0tDZ2tKQ1FrSmRsZHZjbXhrUkdseVpXTjBhVzl1SUQwZ2RISmhibk5tYjNKdFJHbHlaV04wYVc5dUtDQndiM05wZEdsdmJpd2diVzlrWld4TllYUnlhWGdnS1RzS0Nna0pDUWtKSTJsdVkyeDFaR1VnUEdKbFoybHVYM1psY25SbGVENEtDUWtKQ1FramFXNWpiSFZrWlNBOGNISnZhbVZqZEY5MlpYSjBaWGcrQ2dvSkNRa0pmUW9KQ1FsZ0xBb2dJQ0FnSUNBZ0lDQWdJQ0JtY21GbmJXVnVkRk5vWVdSbGNqb2dZQW9LQ1FrSkNYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlIUkZjWFZwY21WamREc0tDZ2tKQ1FsMllYSjVhVzVuSUhabFl6TWdkbGR2Y214a1JHbHlaV04wYVc5dU93b0tDUWtKQ1NOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2dvSkNRa0pkbTlwWkNCdFlXbHVLQ2tnZXdvS0NRa0pDUWwyWldNeklHUnBjbVZqZEdsdmJpQTlJRzV2Y20xaGJHbDZaU2dnZGxkdmNteGtSR2x5WldOMGFXOXVJQ2s3Q2dvSkNRa0pDWFpsWXpJZ2MyRnRjR3hsVlZZZ1BTQmxjWFZwY21WamRGVjJLQ0JrYVhKbFkzUnBiMjRnS1RzS0Nna0pDUWtKWjJ4ZlJuSmhaME52Ykc5eUlEMGdkR1Y0ZEhWeVpUSkVLQ0IwUlhGMWFYSmxZM1FzSUhOaGJYQnNaVlZXSUNrN0Nnb0pDUWtKZlFvSkNRbGdDaUFnSUNBZ0lDQWdmU3dnYVNBOUlHNWxkeUJLYVNnMUxDQTFMQ0ExS1N3Z2NpQTlJRzVsZHlCcWRDaDdDaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ0pEZFdKbGJXRndSbkp2YlVWeGRXbHlaV04wSWl3S0lDQWdJQ0FnSUNBZ0lDQWdkVzVwWm05eWJYTTZJQ1JwS0c0dWRXNXBabTl5YlhNcExBb2dJQ0FnSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklHNHVkbVZ5ZEdWNFUyaGhaR1Z5TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ2JpNW1jbUZuYldWdWRGTm9ZV1JsY2l3S0lDQWdJQ0FnSUNBZ0lDQWdjMmxrWlRvZ1JuUXNDaUFnSUNBZ0lDQWdJQ0FnSUdKc1pXNWthVzVuT2lCRWJnb2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSEl1ZFc1cFptOXliWE11ZEVWeGRXbHlaV04wTG5aaGJIVmxJRDBnZERzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUc1bGR5Qk5kQ2hwTENCeUtTd2dieUE5SUhRdWJXbHVSbWxzZEdWeU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtMXBia1pwYkhSbGNpQTlQVDBnYkdrZ0ppWWdLSFF1YldsdVJtbHNkR1Z5SUQwZ2JYUXBMQ0J1WlhjZ1gyOG9NU3dnTVRBc0lIUm9hWE1wTG5Wd1pHRjBaU2hsTENCaEtTd2dkQzV0YVc1R2FXeDBaWElnUFNCdkxDQmhMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnWVM1dFlYUmxjbWxoYkM1a2FYTndiM05sS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHVmhjaWhsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCbExtZGxkRkpsYm1SbGNsUmhjbWRsZENncE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREE3SUdFZ1BDQTJPeUJoS3lzcFpTNXpaWFJTWlc1a1pYSlVZWEpuWlhRb2RHaHBjeXdnWVNrc0lHVXVZMnhsWVhJb2RDd2diaXdnYVNrN0NpQWdJQ0FnSUNBZ1pTNXpaWFJTWlc1a1pYSlVZWEpuWlhRb2NpazdDaUFnSUNCOUNuMHNJRXBoSUQwZ2JtVjNJRUVzSUUxd0lEMGdibVYzSUVFc0lGTndJRDBnYm1WM0lFaGxMQ0J0YmlBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnUVNneExDQXdMQ0F3S1N3Z2RDQTlJREFwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVhWE5RYkdGdVpTQTlJQ0V3TENCMGFHbHpMbTV2Y20xaGJDQTlJR1VzSUhSb2FYTXVZMjl1YzNSaGJuUWdQU0IwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXd3VZMjl3ZVNobEtTd2dkR2hwY3k1amIyNXpkR0Z1ZENBOUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJEYjIxd2IyNWxiblJ6S0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXd3VjMlYwS0dVc0lIUXNJRzRwTENCMGFHbHpMbU52Ym5OMFlXNTBJRDBnYVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFPYjNKdFlXeEJibVJEYjNCc1lXNWhjbEJ2YVc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd3dVkyOXdlU2hsS1N3Z2RHaHBjeTVqYjI1emRHRnVkQ0E5SUMxMExtUnZkQ2gwYUdsekxtNXZjbTFoYkNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0UTI5d2JHRnVZWEpRYjJsdWRITW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJR3hsZENCcElEMGdTbUV1YzNWaVZtVmpkRzl5Y3lodUxDQjBLUzVqY205emN5aE5jQzV6ZFdKV1pXTjBiM0p6S0dVc0lIUXBLUzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFJHY205dFRtOXliV0ZzUVc1a1EyOXdiR0Z1WVhKUWIybHVkQ2hwTENCbEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2Y20xaGJDNWpiM0I1S0dVdWJtOXliV0ZzS1N3Z2RHaHBjeTVqYjI1emRHRnVkQ0E5SUdVdVkyOXVjM1JoYm5Rc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdWIzSnRZV3hwZW1Vb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQXhJQzhnZEdocGN5NXViM0p0WVd3dWJHVnVaM1JvS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTl5YldGc0xtMTFiSFJwY0d4NVUyTmhiR0Z5S0dVcExDQjBhR2x6TG1OdmJuTjBZVzUwSUNvOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnVaV2RoZEdVb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dWMzUmhiblFnS2owZ0xURXNJSFJvYVhNdWJtOXliV0ZzTG01bFoyRjBaU2dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWkdsemRHRnVZMlZVYjFCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd3dVpHOTBLR1VwSUNzZ2RHaHBjeTVqYjI1emRHRnVkRHNLSUNBZ0lIMEtJQ0FnSUdScGMzUmhibU5sVkc5VGNHaGxjbVVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJwYzNSaGJtTmxWRzlRYjJsdWRDaGxMbU5sYm5SbGNpa2dMU0JsTG5KaFpHbDFjenNLSUNBZ0lIMEtJQ0FnSUhCeWIycGxZM1JRYjJsdWRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRdVkyOXdlU2hsS1M1aFpHUlRZMkZzWldSV1pXTjBiM0lvZEdocGN5NXViM0p0WVd3c0lDMTBhR2x6TG1ScGMzUmhibU5sVkc5UWIybHVkQ2hsS1NrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUk1hVzVsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1V1WkdWc2RHRW9TbUVwTENCcElEMGdkR2hwY3k1dWIzSnRZV3d1Wkc5MEtHNHBPd29nSUNBZ0lDQWdJR2xtSUNocElEMDlQU0F3S1NCeVpYUjFjbTRnZEdocGN5NWthWE4wWVc1alpWUnZVRzlwYm5Rb1pTNXpkR0Z5ZENrZ1BUMDlJREFnUHlCMExtTnZjSGtvWlM1emRHRnlkQ2tnT2lCdWRXeHNPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdMU2hsTG5OMFlYSjBMbVJ2ZENoMGFHbHpMbTV2Y20xaGJDa2dLeUIwYUdsekxtTnZibk4wWVc1MEtTQXZJR2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSElnUENBd0lIeDhJSElnUGlBeElEOGdiblZzYkNBNklIUXVZMjl3ZVNobExuTjBZWEowS1M1aFpHUlRZMkZzWldSV1pXTjBiM0lvYml3Z2NpazdDaUFnSUNCOUNpQWdJQ0JwYm5SbGNuTmxZM1J6VEdsdVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtUnBjM1JoYm1ObFZHOVFiMmx1ZENobExuTjBZWEowS1N3Z2JpQTlJSFJvYVhNdVpHbHpkR0Z1WTJWVWIxQnZhVzUwS0dVdVpXNWtLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ0E4SURBZ0ppWWdiaUErSURBZ2ZId2diaUE4SURBZ0ppWWdkQ0ErSURBN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpRbTk0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXBiblJsY25ObFkzUnpVR3hoYm1Vb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSelUzQm9aWEpsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXBiblJsY25ObFkzUnpVR3hoYm1Vb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQnNZVzVoY2xCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1amIzQjVLSFJvYVhNdWJtOXliV0ZzS1M1dGRXeDBhWEJzZVZOallXeGhjaWd0ZEdocGN5NWpiMjV6ZEdGdWRDazdDaUFnSUNCOUNpQWdJQ0JoY0hCc2VVMWhkSEpwZURRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZENCOGZDQlRjQzVuWlhST2IzSnRZV3hOWVhSeWFYZ29aU2tzSUdrZ1BTQjBhR2x6TG1OdmNHeGhibUZ5VUc5cGJuUW9TbUVwTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnY2lBOUlIUm9hWE11Ym05eWJXRnNMbUZ3Y0d4NVRXRjBjbWw0TXlodUtTNXViM0p0WVd4cGVtVW9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIyNXpkR0Z1ZENBOUlDMXBMbVJ2ZENoeUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6YkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXVjM1JoYm5RZ0xUMGdaUzVrYjNRb2RHaHBjeTV1YjNKdFlXd3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWEYxWVd4ektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV1YjNKdFlXd3VaWEYxWVd4ektIUm9hWE11Ym05eWJXRnNLU0FtSmlCbExtTnZibk4wWVc1MElEMDlQU0IwYUdsekxtTnZibk4wWVc1ME93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLQ2t1WTI5d2VTaDBhR2x6S1RzS0lDQWdJSDBLZlN3Z1dXNGdQU0J1WlhjZ1dYUXNJRzl5SUQwZ2JtVjNJRUVzSUZCeklEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzVsZHlCdGJpd2dkQ0E5SUc1bGR5QnRiaXdnYmlBOUlHNWxkeUJ0Yml3Z2FTQTlJRzVsZHlCdGJpd2djaUE5SUc1bGR5QnRiaXdnWVNBOUlHNWxkeUJ0YmlsN0NpQWdJQ0FnSUNBZ2RHaHBjeTV3YkdGdVpYTWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lHVXNDaUFnSUNBZ0lDQWdJQ0FnSUhRc0NpQWdJQ0FnSUNBZ0lDQWdJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHa3NDaUFnSUNBZ0lDQWdJQ0FnSUhJc0NpQWdJQ0FnSUNBZ0lDQWdJR0VLSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdmUW9nSUNBZ2MyVjBLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSFJvYVhNdWNHeGhibVZ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2V3pCZExtTnZjSGtvWlNrc0lHOWJNVjB1WTI5d2VTaDBLU3dnYjFzeVhTNWpiM0I1S0c0cExDQnZXek5kTG1OdmNIa29hU2tzSUc5Yk5GMHVZMjl3ZVNoeUtTd2diMXMxWFM1amIzQjVLR0VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuQnNZVzVsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3Z05qc2diaXNyS1hSYmJsMHVZMjl3ZVNobExuQnNZVzVsYzF0dVhTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0VUhKdmFtVmpkR2x2YmsxaGRISnBlQ2hsTENCMElEMGdkbTRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVjR3hoYm1WekxDQnBJRDBnWlM1bGJHVnRaVzUwY3l3Z2NpQTlJR2xiTUYwc0lHRWdQU0JwV3pGZExDQnZJRDBnYVZzeVhTd2dZeUE5SUdsYk0xMHNJR3dnUFNCcFd6UmRMQ0JvSUQwZ2FWczFYU3dnZFNBOUlHbGJObDBzSUdRZ1BTQnBXemRkTENCbUlEMGdhVnM0WFN3Z2JTQTlJR2xiT1Ywc0lGOGdQU0JwV3pFd1hTd2daeUE5SUdsYk1URmRMQ0J3SUQwZ2FWc3hNbDBzSUhZZ1BTQnBXekV6WFN3Z2VDQTlJR2xiTVRSZExDQjVJRDBnYVZzeE5WMDdDaUFnSUNBZ0lDQWdhV1lnS0c1Yk1GMHVjMlYwUTI5dGNHOXVaVzUwY3loaklDMGdjaXdnWkNBdElHd3NJR2NnTFNCbUxDQjVJQzBnY0NrdWJtOXliV0ZzYVhwbEtDa3NJRzViTVYwdWMyVjBRMjl0Y0c5dVpXNTBjeWhqSUNzZ2Npd2daQ0FySUd3c0lHY2dLeUJtTENCNUlDc2djQ2t1Ym05eWJXRnNhWHBsS0Nrc0lHNWJNbDB1YzJWMFEyOXRjRzl1Wlc1MGN5aGpJQ3NnWVN3Z1pDQXJJR2dzSUdjZ0t5QnRMQ0I1SUNzZ2Rpa3VibTl5YldGc2FYcGxLQ2tzSUc1Yk0xMHVjMlYwUTI5dGNHOXVaVzUwY3loaklDMGdZU3dnWkNBdElHZ3NJR2NnTFNCdExDQjVJQzBnZGlrdWJtOXliV0ZzYVhwbEtDa3NJRzViTkYwdWMyVjBRMjl0Y0c5dVpXNTBjeWhqSUMwZ2J5d2daQ0F0SUhVc0lHY2dMU0JmTENCNUlDMGdlQ2t1Ym05eWJXRnNhWHBsS0Nrc0lIUWdQVDA5SUhadUtTQnVXelZkTG5ObGRFTnZiWEJ2Ym1WdWRITW9ZeUFySUc4c0lHUWdLeUIxTENCbklDc2dYeXdnZVNBcklIZ3BMbTV2Y20xaGJHbDZaU2dwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hRZ1BUMDlJRWR5S1NCdVd6VmRMbk5sZEVOdmJYQnZibVZ1ZEhNb2J5d2dkU3dnWHl3Z2VDa3VibTl5YldGc2FYcGxLQ2s3Q2lBZ0lDQWdJQ0FnWld4elpTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0lsUklVa1ZGTGtaeWRYTjBkVzB1YzJWMFJuSnZiVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LVG9nU1c1MllXeHBaQ0JqYjI5eVpHbHVZWFJsSUhONWMzUmxiVG9nSWlBcklIUXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMwOWlhbVZqZENobEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0dVdVltOTFibVJwYm1kVGNHaGxjbVVnSVQwOUlIWnZhV1FnTUNrZ1pTNWliM1Z1WkdsdVoxTndhR1Z5WlNBOVBUMGdiblZzYkNBbUppQmxMbU52YlhCMWRHVkNiM1Z1WkdsdVoxTndhR1Z5WlNncExDQlpiaTVqYjNCNUtHVXVZbTkxYm1ScGJtZFRjR2hsY21VcExtRndjR3g1VFdGMGNtbDROQ2hsTG0xaGRISnBlRmR2Y214a0tUc0tJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbWRsYjIxbGRISjVPd29nSUNBZ0lDQWdJQ0FnSUNCMExtSnZkVzVrYVc1blUzQm9aWEpsSUQwOVBTQnVkV3hzSUNZbUlIUXVZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0Nrc0lGbHVMbU52Y0hrb2RDNWliM1Z1WkdsdVoxTndhR1Z5WlNrdVlYQndiSGxOWVhSeWFYZzBLR1V1YldGMGNtbDRWMjl5YkdRcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYm5SbGNuTmxZM1J6VTNCb1pYSmxLRmx1S1RzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRITlRjSEpwZEdVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlpiaTVqWlc1MFpYSXVjMlYwS0RBc0lEQXNJREFwTENCWmJpNXlZV1JwZFhNZ1BTQXVOekEzTVRBMk56Z3hNVGcyTlRRM05pd2dXVzR1WVhCd2JIbE5ZWFJ5YVhnMEtHVXViV0YwY21sNFYyOXliR1FwTENCMGFHbHpMbWx1ZEdWeWMyVmpkSE5UY0dobGNtVW9XVzRwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMxTndhR1Z5WlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5Cc1lXNWxjeXdnYmlBOUlHVXVZMlZ1ZEdWeUxDQnBJRDBnTFdVdWNtRmthWFZ6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQTdJSElnUENBMk95QnlLeXNwYVdZZ0tIUmJjbDB1WkdsemRHRnVZMlZVYjFCdmFXNTBLRzRwSUR3Z2FTa2djbVYwZFhKdUlDRXhPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQWhNRHNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljMlZqZEhOQ2IzZ29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NXdiR0Z1WlhNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElEWTdJRzRyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkRnR1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5eUxuZ2dQU0JwTG01dmNtMWhiQzU0SUQ0Z01DQS9JR1V1YldGNExuZ2dPaUJsTG0xcGJpNTRMQ0J2Y2k1NUlEMGdhUzV1YjNKdFlXd3VlU0ErSURBZ1B5QmxMbTFoZUM1NUlEb2daUzV0YVc0dWVTd2diM0l1ZWlBOUlHa3VibTl5YldGc0xub2dQaUF3SUQ4Z1pTNXRZWGd1ZWlBNklHVXViV2x1TG5vc0lHa3VaR2x6ZEdGdVkyVlViMUJ2YVc1MEtHOXlLU0E4SURBcElISmxkSFZ5YmlBaE1Uc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWTI5dWRHRnBibk5RYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuQnNZVzVsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3Z05qc2diaXNyS1dsbUlDaDBXMjVkTG1ScGMzUmhibU5sVkc5UWIybHVkQ2hsS1NBOElEQXBJSEpsZEhWeWJpQWhNVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdJVEE3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJGWkNncElIc0tJQ0FnSUd4bGRDQnpNU0E5SUc1MWJHd3NJR1VnUFNBaE1Td2dkQ0E5SUc1MWJHd3NJRzRnUFNCdWRXeHNPd29nSUNBZ1puVnVZM1JwYjI0Z2FTaHlMQ0JoS1NCN0NpQWdJQ0FnSUNBZ2RDaHlMQ0JoS1N3Z2JpQTlJSE14TG5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTaHBLVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnYzNSaGNuUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmxJQ0U5UFNBaE1DQW1KaUIwSUNFOVBTQnVkV3hzSUNZbUlDaHVJRDBnY3pFdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLR2twTENCbElEMGdJVEFwT3dvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2MzUnZjRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSE14TG1OaGJtTmxiRUZ1YVcxaGRHbHZia1p5WVcxbEtHNHBMQ0JsSUQwZ0lURTdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhSQmJtbHRZWFJwYjI1TWIyOXdPaUJtZFc1amRHbHZiaWh5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSFFnUFNCeU93b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjMlYwUTI5dWRHVjRkRG9nWm5WdVkzUnBiMjRvY2lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6TVNBOUlISTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZUc0tmUXBtZFc1amRHbHZiaUJpY0Noek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQmxMbWx6VjJWaVIwd3lMQ0J1SUQwZ2JtVjNJRmRsWVd0TllYQTdDaUFnSUNCbWRXNWpkR2x2YmlCcEtHd3NJR2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUd3dVlYSnlZWGtzSUdRZ1BTQnNMblZ6WVdkbExDQm1JRDBnY3pFdVkzSmxZWFJsUW5WbVptVnlLQ2s3Q2lBZ0lDQWdJQ0FnY3pFdVltbHVaRUoxWm1abGNpaG9MQ0JtS1N3Z2N6RXVZblZtWm1WeVJHRjBZU2hvTENCMUxDQmtLU3dnYkM1dmJsVndiRzloWkVOaGJHeGlZV05yS0NrN0NpQWdJQ0FnSUNBZ2JHVjBJRzA3Q2lBZ0lDQWdJQ0FnYVdZZ0tIVWdhVzV6ZEdGdVkyVnZaaUJHYkc5aGRETXlRWEp5WVhrcElHMGdQU0J6TVM1R1RFOUJWRHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gxSUdsdWMzUmhibU5sYjJZZ1ZXbHVkREUyUVhKeVlYa3BJR2xtSUNoc0xtbHpSbXh2WVhReE5rSjFabVpsY2tGMGRISnBZblYwWlNrZ2FXWWdLSFFwSUcwZ1BTQnpNUzVJUVV4R1gwWk1UMEZVT3dvZ0lDQWdJQ0FnSUdWc2MyVWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDSlVTRkpGUlM1WFpXSkhURUYwZEhKcFluVjBaWE02SUZWellXZGxJRzltSUVac2IyRjBNVFpDZFdabVpYSkJkSFJ5YVdKMWRHVWdjbVZ4ZFdseVpYTWdWMlZpUjB3eUxpSXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ2JTQTlJSE14TGxWT1UwbEhUa1ZFWDFOSVQxSlVPd29nSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFVnYVc1emRHRnVZMlZ2WmlCSmJuUXhOa0Z5Y21GNUtTQnRJRDBnY3pFdVUwaFBVbFE3Q2lBZ0lDQWdJQ0FnWld4elpTQnBaaUFvZFNCcGJuTjBZVzVqWlc5bUlGVnBiblF6TWtGeWNtRjVLU0J0SUQwZ2N6RXVWVTVUU1VkT1JVUmZTVTVVT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hVZ2FXNXpkR0Z1WTJWdlppQkpiblF6TWtGeWNtRjVLU0J0SUQwZ2N6RXVTVTVVT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hVZ2FXNXpkR0Z1WTJWdlppQkpiblE0UVhKeVlYa3BJRzBnUFNCek1TNUNXVlJGT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hVZ2FXNXpkR0Z1WTJWdlppQlZhVzUwT0VGeWNtRjVLU0J0SUQwZ2N6RXVWVTVUU1VkT1JVUmZRbGxVUlRzS0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMUlHbHVjM1JoYm1ObGIyWWdWV2x1ZERoRGJHRnRjR1ZrUVhKeVlYa3BJRzBnUFNCek1TNVZUbE5KUjA1RlJGOUNXVlJGT3dvZ0lDQWdJQ0FnSUdWc2MyVWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDSlVTRkpGUlM1WFpXSkhURUYwZEhKcFluVjBaWE02SUZWdWMzVndjRzl5ZEdWa0lHSjFabVpsY2lCa1lYUmhJR1p2Y20xaGREb2dJaUFySUhVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ0lDQWdJR0oxWm1abGNqb2daaXdLSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nYlN3S0lDQWdJQ0FnSUNBZ0lDQWdZbmwwWlhOUVpYSkZiR1Z0Wlc1ME9pQjFMa0paVkVWVFgxQkZVbDlGVEVWTlJVNVVMQW9nSUNBZ0lDQWdJQ0FnSUNCMlpYSnphVzl1T2lCc0xuWmxjbk5wYjI0S0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdjaWhzTENCb0xDQjFLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHUWdQU0JvTG1GeWNtRjVMQ0JtSUQwZ2FDNTFjR1JoZEdWU1lXNW5aVHNLSUNBZ0lDQWdJQ0J6TVM1aWFXNWtRblZtWm1WeUtIVXNJR3dwTENCbUxtTnZkVzUwSUQwOVBTQXRNU0EvSUhNeExtSjFabVpsY2xOMVlrUmhkR0VvZFN3Z01Dd2daQ2tnT2lBb2RDQS9JSE14TG1KMVptWmxjbE4xWWtSaGRHRW9kU3dnWmk1dlptWnpaWFFnS2lCa0xrSlpWRVZUWDFCRlVsOUZURVZOUlU1VUxDQmtMQ0JtTG05bVpuTmxkQ3dnWmk1amIzVnVkQ2tnT2lCek1TNWlkV1ptWlhKVGRXSkVZWFJoS0hVc0lHWXViMlptYzJWMElDb2daQzVDV1ZSRlUxOVFSVkpmUlV4RlRVVk9WQ3dnWkM1emRXSmhjbkpoZVNobUxtOW1abk5sZEN3Z1ppNXZabVp6WlhRZ0t5Qm1MbU52ZFc1MEtTa3NJR1l1WTI5MWJuUWdQU0F0TVNrc0lHZ3ViMjVWY0d4dllXUkRZV3hzWW1GamF5Z3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWVNoc0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHd3VhWE5KYm5SbGNteGxZWFpsWkVKMVptWmxja0YwZEhKcFluVjBaU0FtSmlBb2JDQTlJR3d1WkdGMFlTa3NJRzR1WjJWMEtHd3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYnloc0tTQjdDaUFnSUNBZ0lDQWdiQzVwYzBsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5UVhSMGNtbGlkWFJsSUNZbUlDaHNJRDBnYkM1a1lYUmhLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJRzR1WjJWMEtHd3BPd29nSUNBZ0lDQWdJR2dnSmlZZ0tITXhMbVJsYkdWMFpVSjFabVpsY2lob0xtSjFabVpsY2lrc0lHNHVaR1ZzWlhSbEtHd3BLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdNb2JDd2dhQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaHNMbWx6UjB4Q2RXWm1aWEpCZEhSeWFXSjFkR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQnVMbWRsZENoc0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnS0NGa0lIeDhJR1F1ZG1WeWMybHZiaUE4SUd3dWRtVnljMmx2YmlrZ0ppWWdiaTV6WlhRb2JDd2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblZtWm1WeU9pQnNMbUoxWm1abGNpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUd3dWRIbHdaU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWelVHVnlSV3hsYldWdWREb2diQzVsYkdWdFpXNTBVMmw2WlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhabGNuTnBiMjQ2SUd3dWRtVnljMmx2YmdvZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc0xtbHpTVzUwWlhKc1pXRjJaV1JDZFdabVpYSkJkSFJ5YVdKMWRHVWdKaVlnS0d3Z1BTQnNMbVJoZEdFcE93b2dJQ0FnSUNBZ0lHeGxkQ0IxSUQwZ2JpNW5aWFFvYkNrN0NpQWdJQ0FnSUNBZ2RTQTlQVDBnZG05cFpDQXdJRDhnYmk1elpYUW9iQ3dnYVNoc0xDQm9LU2tnT2lCMUxuWmxjbk5wYjI0Z1BDQnNMblpsY25OcGIyNGdKaVlnS0hJb2RTNWlkV1ptWlhJc0lHd3NJR2dwTENCMUxuWmxjbk5wYjI0Z1BTQnNMblpsY25OcGIyNHBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHRXNDaUFnSUNBZ0lDQWdjbVZ0YjNabE9pQnZMQW9nSUNBZ0lDQWdJSFZ3WkdGMFpUb2dZd29nSUNBZ2ZUc0tmUXAyWVhJZ0pISWdQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJRWRsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ01Td2diaUE5SURFc0lHa2dQU0F4S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMblI1Y0dVZ1BTQWlVR3hoYm1WSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHaFRaV2R0Wlc1MGN6b2diaXdLSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwVTJWbmJXVnVkSE02SUdrS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ1pTQXZJRElzSUdFZ1BTQjBJQzhnTWl3Z2J5QTlJRTFoZEdndVpteHZiM0lvYmlrc0lHTWdQU0JOWVhSb0xtWnNiMjl5S0drcExDQnNJRDBnYnlBcklERXNJR2dnUFNCaklDc2dNU3dnZFNBOUlHVWdMeUJ2TENCa0lEMGdkQ0F2SUdNc0lHWWdQU0JiWFN3Z2JTQTlJRnRkTENCZklEMGdXMTBzSUdjZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEFnUFNBd095QndJRHdnYURzZ2NDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFlnUFNCd0lDb2daQ0F0SUdFN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURBN0lIZ2dQQ0JzT3lCNEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhrZ1BTQjRJQ29nZFNBdElISTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRMbkIxYzJnb2VTd2dMWFlzSURBcExDQmZMbkIxYzJnb01Dd2dNQ3dnTVNrc0lHY3VjSFZ6YUNoNElDOGdieWtzSUdjdWNIVnphQ2d4SUMwZ2NDQXZJR01wT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1p2Y2loc1pYUWdjQ0E5SURBN0lIQWdQQ0JqT3lCd0t5c3BabTl5S0d4bGRDQjJJRDBnTURzZ2RpQThJRzg3SUhZckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnZGlBcklHd2dLaUJ3TENCNUlEMGdkaUFySUd3Z0tpQW9jQ0FySURFcExDQmlJRDBnZGlBcklERWdLeUJzSUNvZ0tIQWdLeUF4S1N3Z2R5QTlJSFlnS3lBeElDc2diQ0FxSUhBN0NpQWdJQ0FnSUNBZ0lDQWdJR1l1Y0hWemFDaDRMQ0I1TENCM0tTd2daaTV3ZFhOb0tIa3NJR0lzSUhjcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHVaR1Y0S0dZcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ2RtVW9iU3dnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpd2dibVYzSUhabEtGOHNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luVjJJaXdnYm1WM0lIWmxLR2NzSURJcEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExuQmhjbUZ0WlhSbGNuTXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhNeEtHVXVkMmxrZEdnc0lHVXVhR1ZwWjJoMExDQmxMbmRwWkhSb1UyVm5iV1Z1ZEhNc0lHVXVhR1ZwWjJoMFUyVm5iV1Z1ZEhNcE93b2dJQ0FnZlFwOUxDQkZjQ0E5SUdBamFXWmtaV1lnVlZORlgwRk1VRWhCU0VGVFNBb0phV1lnS0NCa2FXWm1kWE5sUTI5c2IzSXVZU0E4SUdkbGRFRnNjR2hoU0dGemFGUm9jbVZ6YUc5c1pDZ2dkbEJ2YzJsMGFXOXVJQ2tnS1NCa2FYTmpZWEprT3dvalpXNWthV1pnTENCVWNDQTlJR0FqYVdaa1pXWWdWVk5GWDBGTVVFaEJTRUZUU0FvSlkyOXVjM1FnWm14dllYUWdRVXhRU0VGZlNFRlRTRjlUUTBGTVJTQTlJREF1TURVN0NnbG1iRzloZENCb1lYTm9Na1FvSUhabFl6SWdkbUZzZFdVZ0tTQjdDZ2tKY21WMGRYSnVJR1p5WVdOMEtDQXhMakJsTkNBcUlITnBiaWdnTVRjdU1DQXFJSFpoYkhWbExuZ2dLeUF3TGpFZ0tpQjJZV3gxWlM1NUlDa2dLaUFvSURBdU1TQXJJR0ZpY3lnZ2MybHVLQ0F4TXk0d0lDb2dkbUZzZFdVdWVTQXJJSFpoYkhWbExuZ2dLU0FwSUNrZ0tUc0tDWDBLQ1dac2IyRjBJR2hoYzJnelJDZ2dkbVZqTXlCMllXeDFaU0FwSUhzS0NRbHlaWFIxY200Z2FHRnphREpFS0NCMlpXTXlLQ0JvWVhOb01rUW9JSFpoYkhWbExuaDVJQ2tzSUhaaGJIVmxMbm9nS1NBcE93b0pmUW9KWm14dllYUWdaMlYwUVd4d2FHRklZWE5vVkdoeVpYTm9iMnhrS0NCMlpXTXpJSEJ2YzJsMGFXOXVJQ2tnZXdvSkNXWnNiMkYwSUcxaGVFUmxjbWwySUQwZ2JXRjRLQW9KQ1Fsc1pXNW5kR2dvSUdSR1pIZ29JSEJ2YzJsMGFXOXVMbmg1ZWlBcElDa3NDZ2tKQ1d4bGJtZDBhQ2dnWkVaa2VTZ2djRzl6YVhScGIyNHVlSGw2SUNrZ0tRb0pDU2s3Q2drSlpteHZZWFFnY0dsNFUyTmhiR1VnUFNBeExqQWdMeUFvSUVGTVVFaEJYMGhCVTBoZlUwTkJURVVnS2lCdFlYaEVaWEpwZGlBcE93b0pDWFpsWXpJZ2NHbDRVMk5oYkdWeklEMGdkbVZqTWlnS0NRa0paWGh3TWlnZ1pteHZiM0lvSUd4dlp6SW9JSEJwZUZOallXeGxJQ2tnS1NBcExBb0pDUWxsZUhBeUtDQmpaV2xzS0NCc2IyY3lLQ0J3YVhoVFkyRnNaU0FwSUNrZ0tRb0pDU2s3Q2drSmRtVmpNaUJoYkhCb1lTQTlJSFpsWXpJb0Nna0pDV2hoYzJnelJDZ2dabXh2YjNJb0lIQnBlRk5qWVd4bGN5NTRJQ29nY0c5emFYUnBiMjR1ZUhsNklDa2dLU3dLQ1FrSmFHRnphRE5FS0NCbWJHOXZjaWdnY0dsNFUyTmhiR1Z6TG5rZ0tpQndiM05wZEdsdmJpNTRlWG9nS1NBcENna0pLVHNLQ1FsbWJHOWhkQ0JzWlhKd1JtRmpkRzl5SUQwZ1puSmhZM1FvSUd4dlp6SW9JSEJwZUZOallXeGxJQ2tnS1RzS0NRbG1iRzloZENCNElEMGdLQ0F4TGpBZ0xTQnNaWEp3Um1GamRHOXlJQ2tnS2lCaGJIQm9ZUzU0SUNzZ2JHVnljRVpoWTNSdmNpQXFJR0ZzY0doaExuazdDZ2tKWm14dllYUWdZU0E5SUcxcGJpZ2diR1Z5Y0VaaFkzUnZjaXdnTVM0d0lDMGdiR1Z5Y0VaaFkzUnZjaUFwT3dvSkNYWmxZek1nWTJGelpYTWdQU0IyWldNektBb0pDUWw0SUNvZ2VDQXZJQ2dnTWk0d0lDb2dZU0FxSUNnZ01TNHdJQzBnWVNBcElDa3NDZ2tKQ1NnZ2VDQXRJREF1TlNBcUlHRWdLU0F2SUNnZ01TNHdJQzBnWVNBcExBb0pDUWt4TGpBZ0xTQW9JQ2dnTVM0d0lDMGdlQ0FwSUNvZ0tDQXhMakFnTFNCNElDa2dMeUFvSURJdU1DQXFJR0VnS2lBb0lERXVNQ0F0SUdFZ0tTQXBJQ2tLQ1FrcE93b0pDV1pzYjJGMElIUm9jbVZ6YUc5c1pDQTlJQ2dnZUNBOElDZ2dNUzR3SUMwZ1lTQXBJQ2tLQ1FrSlB5QW9JQ2dnZUNBOElHRWdLU0EvSUdOaGMyVnpMbmdnT2lCallYTmxjeTU1SUNrS0NRa0pPaUJqWVhObGN5NTZPd29KQ1hKbGRIVnliaUJqYkdGdGNDZ2dkR2h5WlhOb2IyeGtJQ3dnTVM0d1pTMDJMQ0F4TGpBZ0tUc0tDWDBLSTJWdVpHbG1ZQ3dnZDNBZ1BTQmdJMmxtWkdWbUlGVlRSVjlCVEZCSVFVMUJVQW9KWkdsbVpuVnpaVU52Ykc5eUxtRWdLajBnZEdWNGRIVnlaVEpFS0NCaGJIQm9ZVTFoY0N3Z2RrRnNjR2hoVFdGd1ZYWWdLUzVuT3dvalpXNWthV1pnTENCQmNDQTlJR0FqYVdaa1pXWWdWVk5GWDBGTVVFaEJUVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCaGJIQm9ZVTFoY0RzS0kyVnVaR2xtWUN3Z1VuQWdQU0JnSTJsbVpHVm1JRlZUUlY5QlRGQklRVlJGVTFRS0NXbG1JQ2dnWkdsbVpuVnpaVU52Ykc5eUxtRWdQQ0JoYkhCb1lWUmxjM1FnS1NCa2FYTmpZWEprT3dvalpXNWthV1pnTENCRGNDQTlJR0FqYVdaa1pXWWdWVk5GWDBGTVVFaEJWRVZUVkFvSmRXNXBabTl5YlNCbWJHOWhkQ0JoYkhCb1lWUmxjM1E3Q2lObGJtUnBabUFzSUZCd0lEMGdZQ05wWm1SbFppQlZVMFZmUVU5TlFWQUtDV1pzYjJGMElHRnRZbWxsYm5SUFkyTnNkWE5wYjI0Z1BTQW9JSFJsZUhSMWNtVXlSQ2dnWVc5TllYQXNJSFpCYjAxaGNGVjJJQ2t1Y2lBdElERXVNQ0FwSUNvZ1lXOU5ZWEJKYm5SbGJuTnBkSGtnS3lBeExqQTdDZ2x5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRFUnBabVoxYzJVZ0tqMGdZVzFpYVdWdWRFOWpZMngxYzJsdmJqc0tDU05wWmlCa1pXWnBibVZrS0NCVlUwVmZSVTVXVFVGUUlDa2dKaVlnWkdWbWFXNWxaQ2dnVTFSQlRrUkJVa1FnS1FvSkNXWnNiMkYwSUdSdmRFNVdJRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2daMlZ2YldWMGNubE9iM0p0WVd3c0lHZGxiMjFsZEhKNVZtbGxkMFJwY2lBcElDazdDZ2tKY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUlRjR1ZqZFd4aGNpQXFQU0JqYjIxd2RYUmxVM0JsWTNWc1lYSlBZMk5zZFhOcGIyNG9JR1J2ZEU1V0xDQmhiV0pwWlc1MFQyTmpiSFZ6YVc5dUxDQnRZWFJsY21saGJDNXliM1ZuYUc1bGMzTWdLVHNLQ1NObGJtUnBaZ29qWlc1a2FXWmdMQ0JNY0NBOUlHQWphV1prWldZZ1ZWTkZYMEZQVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQmhiMDFoY0RzS0NYVnVhV1p2Y20wZ1pteHZZWFFnWVc5TllYQkpiblJsYm5OcGRIazdDaU5sYm1ScFptQXNJRWx3SUQwZ1lIWmxZek1nZEhKaGJuTm1iM0p0WldRZ1BTQjJaV016S0NCd2IzTnBkR2x2YmlBcE93b2phV1prWldZZ1ZWTkZYMEZNVUVoQlNFRlRTQW9KZGxCdmMybDBhVzl1SUQwZ2RtVmpNeWdnY0c5emFYUnBiMjRnS1RzS0kyVnVaR2xtWUN3Z1ZYQWdQU0JnZG1Wak15QnZZbXBsWTNST2IzSnRZV3dnUFNCMlpXTXpLQ0J1YjNKdFlXd2dLVHNLSTJsbVpHVm1JRlZUUlY5VVFVNUhSVTVVQ2dsMlpXTXpJRzlpYW1WamRGUmhibWRsYm5RZ1BTQjJaV016S0NCMFlXNW5aVzUwTG5oNWVpQXBPd29qWlc1a2FXWmdMQ0JFY0NBOUlHQm1iRzloZENCSFgwSnNhVzV1VUdodmJtZGZTVzF3YkdsamFYUW9JQ2tnZXdvSmNtVjBkWEp1SURBdU1qVTdDbjBLWm14dllYUWdSRjlDYkdsdWJsQm9iMjVuS0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0J6YUdsdWFXNWxjM01zSUdOdmJuTjBJR2x1SUdac2IyRjBJR1J2ZEU1SUlDa2dld29KY21WMGRYSnVJRkpGUTBsUVVrOURRVXhmVUVrZ0tpQW9JSE5vYVc1cGJtVnpjeUFxSURBdU5TQXJJREV1TUNBcElDb2djRzkzS0NCa2IzUk9TQ3dnYzJocGJtbHVaWE56SUNrN0NuMEtkbVZqTXlCQ1VrUkdYMEpzYVc1dVVHaHZibWNvSUdOdmJuTjBJR2x1SUhabFl6TWdiR2xuYUhSRWFYSXNJR052Ym5OMElHbHVJSFpsWXpNZ2RtbGxkMFJwY2l3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJ1YjNKdFlXd3NJR052Ym5OMElHbHVJSFpsWXpNZ2MzQmxZM1ZzWVhKRGIyeHZjaXdnWTI5dWMzUWdhVzRnWm14dllYUWdjMmhwYm1sdVpYTnpJQ2tnZXdvSmRtVmpNeUJvWVd4bVJHbHlJRDBnYm05eWJXRnNhWHBsS0NCc2FXZG9kRVJwY2lBcklIWnBaWGRFYVhJZ0tUc0tDV1pzYjJGMElHUnZkRTVJSUQwZ2MyRjBkWEpoZEdVb0lHUnZkQ2dnYm05eWJXRnNMQ0JvWVd4bVJHbHlJQ2tnS1RzS0NXWnNiMkYwSUdSdmRGWklJRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2dkbWxsZDBScGNpd2dhR0ZzWmtScGNpQXBJQ2s3Q2dsMlpXTXpJRVlnUFNCR1gxTmphR3hwWTJzb0lITndaV04xYkdGeVEyOXNiM0lzSURFdU1Dd2daRzkwVmtnZ0tUc0tDV1pzYjJGMElFY2dQU0JIWDBKc2FXNXVVR2h2Ym1kZlNXMXdiR2xqYVhRb0lDazdDZ2xtYkc5aGRDQkVJRDBnUkY5Q2JHbHVibEJvYjI1bktDQnphR2x1YVc1bGMzTXNJR1J2ZEU1SUlDazdDZ2x5WlhSMWNtNGdSaUFxSUNnZ1J5QXFJRVFnS1RzS2ZTQXZMeUIyWVd4cFpHRjBaV1JnTENCT2NDQTlJR0FqYVdaa1pXWWdWVk5GWDBsU1NVUkZVME5GVGtORkNnbGpiMjV6ZENCdFlYUXpJRmhaV2w5VVQxOVNSVU0zTURrZ1BTQnRZWFF6S0FvSkNTQXpMakkwTURRMU5ESXNJQzB3TGprMk9USTJOakFzSUNBd0xqQTFOVFkwTXpRc0Nna0pMVEV1TlRNM01UTTROU3dnSURFdU9EYzJNREV3T0N3Z0xUQXVNakEwTURJMU9Td0tDUWt0TUM0ME9UZzFNekUwTENBZ01DNHdOREUxTlRZd0xDQWdNUzR3TlRjeU1qVXlDZ2twT3dvSmRtVmpNeUJHY21WemJtVnNNRlJ2U1c5eUtDQjJaV016SUdaeVpYTnVaV3d3SUNrZ2V3b0pDWFpsWXpNZ2MzRnlkRVl3SUQwZ2MzRnlkQ2dnWm5KbGMyNWxiREFnS1RzS0NRbHlaWFIxY200Z0tDQjJaV016S0NBeExqQWdLU0FySUhOeGNuUkdNQ0FwSUM4Z0tDQjJaV016S0NBeExqQWdLU0F0SUhOeGNuUkdNQ0FwT3dvSmZRb0pkbVZqTXlCSmIzSlViMFp5WlhOdVpXd3dLQ0IyWldNeklIUnlZVzV6YldsMGRHVmtTVzl5TENCbWJHOWhkQ0JwYm1OcFpHVnVkRWx2Y2lBcElIc0tDUWx5WlhSMWNtNGdjRzkzTWlnZ0tDQjBjbUZ1YzIxcGRIUmxaRWx2Y2lBdElIWmxZek1vSUdsdVkybGtaVzUwU1c5eUlDa2dLU0F2SUNnZ2RISmhibk50YVhSMFpXUkpiM0lnS3lCMlpXTXpLQ0JwYm1OcFpHVnVkRWx2Y2lBcElDa2dLVHNLQ1gwS0NXWnNiMkYwSUVsdmNsUnZSbkpsYzI1bGJEQW9JR1pzYjJGMElIUnlZVzV6YldsMGRHVmtTVzl5TENCbWJHOWhkQ0JwYm1OcFpHVnVkRWx2Y2lBcElIc0tDUWx5WlhSMWNtNGdjRzkzTWlnZ0tDQjBjbUZ1YzIxcGRIUmxaRWx2Y2lBdElHbHVZMmxrWlc1MFNXOXlJQ2tnTHlBb0lIUnlZVzV6YldsMGRHVmtTVzl5SUNzZ2FXNWphV1JsYm5SSmIzSWdLU2s3Q2dsOUNnbDJaV016SUdWMllXeFRaVzV6YVhScGRtbDBlU2dnWm14dllYUWdUMUJFTENCMlpXTXpJSE5vYVdaMElDa2dld29KQ1dac2IyRjBJSEJvWVhObElEMGdNaTR3SUNvZ1VFa2dLaUJQVUVRZ0tpQXhMakJsTFRrN0Nna0pkbVZqTXlCMllXd2dQU0IyWldNektDQTFMalE0TlRabExURXpMQ0EwTGpReU1ERmxMVEV6TENBMUxqSTBPREZsTFRFeklDazdDZ2tKZG1Wak15QndiM01nUFNCMlpXTXpLQ0F4TGpZNE1UQmxLekEyTENBeExqYzVOVE5sS3pBMkxDQXlMakl3T0RSbEt6QTJJQ2s3Q2drSmRtVmpNeUIyWVhJZ1BTQjJaV016S0NBMExqTXlOemhsS3pBNUxDQTVMak13TkRabEt6QTVMQ0EyTGpZeE1qRmxLekE1SUNrN0Nna0pkbVZqTXlCNGVYb2dQU0IyWVd3Z0tpQnpjWEowS0NBeUxqQWdLaUJRU1NBcUlIWmhjaUFwSUNvZ1kyOXpLQ0J3YjNNZ0tpQndhR0Z6WlNBcklITm9hV1owSUNrZ0tpQmxlSEFvSUMwZ2NHOTNNaWdnY0doaGMyVWdLU0FxSUhaaGNpQXBPd29KQ1hoNWVpNTRJQ3M5SURrdU56UTNNR1V0TVRRZ0tpQnpjWEowS0NBeUxqQWdLaUJRU1NBcUlEUXVOVEk0TW1Vck1Ea2dLU0FxSUdOdmN5Z2dNaTR5TXprNVpTc3dOaUFxSUhCb1lYTmxJQ3NnYzJocFpuUmJJREFnWFNBcElDb2daWGh3S0NBdElEUXVOVEk0TW1Vck1Ea2dLaUJ3YjNjeUtDQndhR0Z6WlNBcElDazdDZ2tKZUhsNklDODlJREV1TURZNE5XVXROenNLQ1FsMlpXTXpJSEpuWWlBOUlGaFpXbDlVVDE5U1JVTTNNRGtnS2lCNGVYbzdDZ2tKY21WMGRYSnVJSEpuWWpzS0NYMEtDWFpsWXpNZ1pYWmhiRWx5YVdSbGMyTmxibU5sS0NCbWJHOWhkQ0J2ZFhSemFXUmxTVTlTTENCbWJHOWhkQ0JsZEdFeUxDQm1iRzloZENCamIzTlVhR1YwWVRFc0lHWnNiMkYwSUhSb2FXNUdhV3h0VkdocFkydHVaWE56TENCMlpXTXpJR0poYzJWR01DQXBJSHNLQ1FsMlpXTXpJRWs3Q2drSlpteHZZWFFnYVhKcFpHVnpZMlZ1WTJWSlQxSWdQU0J0YVhnb0lHOTFkSE5wWkdWSlQxSXNJR1YwWVRJc0lITnRiMjkwYUhOMFpYQW9JREF1TUN3Z01DNHdNeXdnZEdocGJrWnBiRzFVYUdsamEyNWxjM01nS1NBcE93b0pDV1pzYjJGMElITnBibFJvWlhSaE1sTnhJRDBnY0c5M01pZ2diM1YwYzJsa1pVbFBVaUF2SUdseWFXUmxjMk5sYm1ObFNVOVNJQ2tnS2lBb0lERXVNQ0F0SUhCdmR6SW9JR052YzFSb1pYUmhNU0FwSUNrN0Nna0pabXh2WVhRZ1kyOXpWR2hsZEdFeVUzRWdQU0F4TGpBZ0xTQnphVzVVYUdWMFlUSlRjVHNLQ1FscFppQW9JR052YzFSb1pYUmhNbE54SUR3Z01DNHdJQ2tnZXdvSkNRbHlaWFIxY200Z2RtVmpNeWdnTVM0d0lDazdDZ2tKZlFvSkNXWnNiMkYwSUdOdmMxUm9aWFJoTWlBOUlITnhjblFvSUdOdmMxUm9aWFJoTWxOeElDazdDZ2tKWm14dllYUWdVakFnUFNCSmIzSlViMFp5WlhOdVpXd3dLQ0JwY21sa1pYTmpaVzVqWlVsUFVpd2diM1YwYzJsa1pVbFBVaUFwT3dvSkNXWnNiMkYwSUZJeE1pQTlJRVpmVTJOb2JHbGpheWdnVWpBc0lERXVNQ3dnWTI5elZHaGxkR0V4SUNrN0Nna0pabXh2WVhRZ1ZERXlNU0E5SURFdU1DQXRJRkl4TWpzS0NRbG1iRzloZENCd2FHa3hNaUE5SURBdU1Ec0tDUWxwWmlBb0lHbHlhV1JsYzJObGJtTmxTVTlTSUR3Z2IzVjBjMmxrWlVsUFVpQXBJSEJvYVRFeUlEMGdVRWs3Q2drSlpteHZZWFFnY0docE1qRWdQU0JRU1NBdElIQm9hVEV5T3dvSkNYWmxZek1nWW1GelpVbFBVaUE5SUVaeVpYTnVaV3d3Vkc5SmIzSW9JR05zWVcxd0tDQmlZWE5sUmpBc0lEQXVNQ3dnTUM0NU9UazVJQ2tnS1RzSkNYWmxZek1nVWpFZ1BTQkpiM0pVYjBaeVpYTnVaV3d3S0NCaVlYTmxTVTlTTENCcGNtbGtaWE5qWlc1alpVbFBVaUFwT3dvSkNYWmxZek1nVWpJeklEMGdSbDlUWTJoc2FXTnJLQ0JTTVN3Z01TNHdMQ0JqYjNOVWFHVjBZVElnS1RzS0NRbDJaV016SUhCb2FUSXpJRDBnZG1Wak15Z2dNQzR3SUNrN0Nna0phV1lnS0NCaVlYTmxTVTlTV3lBd0lGMGdQQ0JwY21sa1pYTmpaVzVqWlVsUFVpQXBJSEJvYVRJeld5QXdJRjBnUFNCUVNUc0tDUWxwWmlBb0lHSmhjMlZKVDFKYklERWdYU0E4SUdseWFXUmxjMk5sYm1ObFNVOVNJQ2tnY0docE1qTmJJREVnWFNBOUlGQkpPd29KQ1dsbUlDZ2dZbUZ6WlVsUFVsc2dNaUJkSUR3Z2FYSnBaR1Z6WTJWdVkyVkpUMUlnS1NCd2FHa3lNMXNnTWlCZElEMGdVRWs3Q2drSlpteHZZWFFnVDFCRUlEMGdNaTR3SUNvZ2FYSnBaR1Z6WTJWdVkyVkpUMUlnS2lCMGFHbHVSbWxzYlZSb2FXTnJibVZ6Y3lBcUlHTnZjMVJvWlhSaE1qc0tDUWwyWldNeklIQm9hU0E5SUhabFl6TW9JSEJvYVRJeElDa2dLeUJ3YUdreU16c0tDUWwyWldNeklGSXhNak1nUFNCamJHRnRjQ2dnVWpFeUlDb2dVakl6TENBeFpTMDFMQ0F3TGprNU9Ua2dLVHNLQ1FsMlpXTXpJSEl4TWpNZ1BTQnpjWEowS0NCU01USXpJQ2s3Q2drSmRtVmpNeUJTY3lBOUlIQnZkeklvSUZReE1qRWdLU0FxSUZJeU15QXZJQ2dnZG1Wak15Z2dNUzR3SUNrZ0xTQlNNVEl6SUNrN0Nna0pkbVZqTXlCRE1DQTlJRkl4TWlBcklGSnpPd29KQ1VrZ1BTQkRNRHNLQ1FsMlpXTXpJRU50SUQwZ1VuTWdMU0JVTVRJeE93b0pDV1p2Y2lBb0lHbHVkQ0J0SUQwZ01Uc2diU0E4UFNBeU95QXJLeUJ0SUNrZ2V3b0pDUWxEYlNBcVBTQnlNVEl6T3dvSkNRbDJaV016SUZOdElEMGdNaTR3SUNvZ1pYWmhiRk5sYm5OcGRHbDJhWFI1S0NCbWJHOWhkQ2dnYlNBcElDb2dUMUJFTENCbWJHOWhkQ2dnYlNBcElDb2djR2hwSUNrN0Nna0pDVWtnS3owZ1EyMGdLaUJUYlRzS0NRbDlDZ2tKY21WMGRYSnVJRzFoZUNnZ1NTd2dkbVZqTXlnZ01DNHdJQ2tnS1RzS0NYMEtJMlZ1WkdsbVlDd2dUM0FnUFNCZ0kybG1aR1ZtSUZWVFJWOUNWVTFRVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQmlkVzF3VFdGd093b0pkVzVwWm05eWJTQm1iRzloZENCaWRXMXdVMk5oYkdVN0NnbDJaV015SUdSSVpIaDVYMlozWkNncElIc0tDUWwyWldNeUlHUlRWR1I0SUQwZ1pFWmtlQ2dnZGtKMWJYQk5ZWEJWZGlBcE93b0pDWFpsWXpJZ1pGTlVaSGtnUFNCa1JtUjVLQ0IyUW5WdGNFMWhjRlYySUNrN0Nna0pabXh2WVhRZ1NHeHNJRDBnWW5WdGNGTmpZV3hsSUNvZ2RHVjRkSFZ5WlRKRUtDQmlkVzF3VFdGd0xDQjJRblZ0Y0UxaGNGVjJJQ2t1ZURzS0NRbG1iRzloZENCa1FuZ2dQU0JpZFcxd1UyTmhiR1VnS2lCMFpYaDBkWEpsTWtRb0lHSjFiWEJOWVhBc0lIWkNkVzF3VFdGd1ZYWWdLeUJrVTFSa2VDQXBMbmdnTFNCSWJHdzdDZ2tKWm14dllYUWdaRUo1SUQwZ1luVnRjRk5qWVd4bElDb2dkR1Y0ZEhWeVpUSkVLQ0JpZFcxd1RXRndMQ0IyUW5WdGNFMWhjRlYySUNzZ1pGTlVaSGtnS1M1NElDMGdTR3hzT3dvSkNYSmxkSFZ5YmlCMlpXTXlLQ0JrUW5nc0lHUkNlU0FwT3dvSmZRb0pkbVZqTXlCd1pYSjBkWEppVG05eWJXRnNRWEppS0NCMlpXTXpJSE4xY21aZmNHOXpMQ0IyWldNeklITjFjbVpmYm05eWJTd2dkbVZqTWlCa1NHUjRlU3dnWm14dllYUWdabUZqWlVScGNtVmpkR2x2YmlBcElIc0tDUWwyWldNeklIWlRhV2R0WVZnZ1BTQmtSbVI0S0NCemRYSm1YM0J2Y3k1NGVYb2dLVHNLQ1FsMlpXTXpJSFpUYVdkdFlWa2dQU0JrUm1SNUtDQnpkWEptWDNCdmN5NTRlWG9nS1RzS0NRbDJaV016SUhaT0lEMGdjM1Z5Wmw5dWIzSnRPd29KQ1habFl6TWdVakVnUFNCamNtOXpjeWdnZGxOcFoyMWhXU3dnZGs0Z0tUc0tDUWwyWldNeklGSXlJRDBnWTNKdmMzTW9JSFpPTENCMlUybG5iV0ZZSUNrN0Nna0pabXh2WVhRZ1prUmxkQ0E5SUdSdmRDZ2dkbE5wWjIxaFdDd2dVakVnS1NBcUlHWmhZMlZFYVhKbFkzUnBiMjQ3Q2drSmRtVmpNeUIyUjNKaFpDQTlJSE5wWjI0b0lHWkVaWFFnS1NBcUlDZ2daRWhrZUhrdWVDQXFJRkl4SUNzZ1pFaGtlSGt1ZVNBcUlGSXlJQ2s3Q2drSmNtVjBkWEp1SUc1dmNtMWhiR2w2WlNnZ1lXSnpLQ0JtUkdWMElDa2dLaUJ6ZFhKbVgyNXZjbTBnTFNCMlIzSmhaQ0FwT3dvSmZRb2paVzVrYVdaZ0xDQkdjQ0E5SUdBamFXWWdUbFZOWDBOTVNWQlFTVTVIWDFCTVFVNUZVeUErSURBS0NYWmxZelFnY0d4aGJtVTdDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2xtYjNJZ0tDQnBiblFnYVNBOUlEQTdJR2tnUENCVlRrbFBUbDlEVEVsUVVFbE9SMTlRVEVGT1JWTTdJR2tnS3lzZ0tTQjdDZ2tKY0d4aGJtVWdQU0JqYkdsd2NHbHVaMUJzWVc1bGMxc2dhU0JkT3dvSkNXbG1JQ2dnWkc5MEtDQjJRMnhwY0ZCdmMybDBhVzl1TENCd2JHRnVaUzU0ZVhvZ0tTQStJSEJzWVc1bExuY2dLU0JrYVhOallYSmtPd29KZlFvSkkzQnlZV2R0WVNCMWJuSnZiR3hmYkc5dmNGOWxibVFLQ1NOcFppQlZUa2xQVGw5RFRFbFFVRWxPUjE5UVRFRk9SVk1nUENCT1ZVMWZRMHhKVUZCSlRrZGZVRXhCVGtWVENna0pZbTl2YkNCamJHbHdjR1ZrSUQwZ2RISjFaVHNLQ1FramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gzTjBZWEowQ2drSlptOXlJQ2dnYVc1MElHa2dQU0JWVGtsUFRsOURURWxRVUVsT1IxOVFURUZPUlZNN0lHa2dQQ0JPVlUxZlEweEpVRkJKVGtkZlVFeEJUa1ZUT3lCcElDc3JJQ2tnZXdvSkNRbHdiR0Z1WlNBOUlHTnNhWEJ3YVc1blVHeGhibVZ6V3lCcElGMDdDZ2tKQ1dOc2FYQndaV1FnUFNBb0lHUnZkQ2dnZGtOc2FYQlFiM05wZEdsdmJpd2djR3hoYm1VdWVIbDZJQ2tnUGlCd2JHRnVaUzUzSUNrZ0ppWWdZMnhwY0hCbFpEc0tDUWw5Q2drSkkzQnlZV2R0WVNCMWJuSnZiR3hmYkc5dmNGOWxibVFLQ1FscFppQW9JR05zYVhCd1pXUWdLU0JrYVhOallYSmtPd29KSTJWdVpHbG1DaU5sYm1ScFptQXNJRUp3SUQwZ1lDTnBaaUJPVlUxZlEweEpVRkJKVGtkZlVFeEJUa1ZUSUQ0Z01Bb0pkbUZ5ZVdsdVp5QjJaV016SUhaRGJHbHdVRzl6YVhScGIyNDdDZ2wxYm1sbWIzSnRJSFpsWXpRZ1kyeHBjSEJwYm1kUWJHRnVaWE5iSUU1VlRWOURURWxRVUVsT1IxOVFURUZPUlZNZ1hUc0tJMlZ1WkdsbVlDd2dlbkFnUFNCZ0kybG1JRTVWVFY5RFRFbFFVRWxPUjE5UVRFRk9SVk1nUGlBd0NnbDJZWEo1YVc1bklIWmxZek1nZGtOc2FYQlFiM05wZEdsdmJqc0tJMlZ1WkdsbVlDd2dWbkFnUFNCZ0kybG1JRTVWVFY5RFRFbFFVRWxPUjE5UVRFRk9SVk1nUGlBd0NnbDJRMnhwY0ZCdmMybDBhVzl1SUQwZ0xTQnRkbEJ2YzJsMGFXOXVMbmg1ZWpzS0kyVnVaR2xtWUN3Z2EzQWdQU0JnSTJsbUlHUmxabWx1WldRb0lGVlRSVjlEVDB4UFVsOUJURkJJUVNBcENnbGthV1ptZFhObFEyOXNiM0lnS2owZ2RrTnZiRzl5T3dvalpXeHBaaUJrWldacGJtVmtLQ0JWVTBWZlEwOU1UMUlnS1FvSlpHbG1ablZ6WlVOdmJHOXlMbkpuWWlBcVBTQjJRMjlzYjNJN0NpTmxibVJwWm1Bc0lFaHdJRDBnWUNOcFppQmtaV1pwYm1Wa0tDQlZVMFZmUTA5TVQxSmZRVXhRU0VFZ0tRb0pkbUZ5ZVdsdVp5QjJaV00wSUhaRGIyeHZjanNLSTJWc2FXWWdaR1ZtYVc1bFpDZ2dWVk5GWDBOUFRFOVNJQ2tLQ1haaGNubHBibWNnZG1Wak15QjJRMjlzYjNJN0NpTmxibVJwWm1Bc0lFZHdJRDBnWUNOcFppQmtaV1pwYm1Wa0tDQlZVMFZmUTA5TVQxSmZRVXhRU0VFZ0tRb0pkbUZ5ZVdsdVp5QjJaV00wSUhaRGIyeHZjanNLSTJWc2FXWWdaR1ZtYVc1bFpDZ2dWVk5GWDBOUFRFOVNJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMGxPVTFSQlRrTkpUa2RmUTA5TVQxSWdLUW9KZG1GeWVXbHVaeUIyWldNeklIWkRiMnh2Y2pzS0kyVnVaR2xtWUN3Z1YzQWdQU0JnSTJsbUlHUmxabWx1WldRb0lGVlRSVjlEVDB4UFVsOUJURkJJUVNBcENnbDJRMjlzYjNJZ1BTQjJaV00wS0NBeExqQWdLVHNLSTJWc2FXWWdaR1ZtYVc1bFpDZ2dWVk5GWDBOUFRFOVNJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMGxPVTFSQlRrTkpUa2RmUTA5TVQxSWdLUW9KZGtOdmJHOXlJRDBnZG1Wak15Z2dNUzR3SUNrN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwTlBURTlTQ2dsMlEyOXNiM0lnS2owZ1kyOXNiM0k3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBsT1UxUkJUa05KVGtkZlEwOU1UMUlLQ1haRGIyeHZjaTU0ZVhvZ0tqMGdhVzV6ZEdGdVkyVkRiMnh2Y2k1NGVYbzdDaU5sYm1ScFptQXNJRmh3SUQwZ1lDTmtaV1pwYm1VZ1VFa2dNeTR4TkRFMU9USTJOVE0xT0RrM09UTUtJMlJsWm1sdVpTQlFTVElnTmk0eU9ETXhPRFV6TURjeE56azFPRFlLSTJSbFptbHVaU0JRU1Y5SVFVeEdJREV1TlRjd056azJNekkyTnprME9EazJOZ29qWkdWbWFXNWxJRkpGUTBsUVVrOURRVXhmVUVrZ01DNHpNVGd6TURrNE9EWXhPRE0zT1RBM0NpTmtaV1pwYm1VZ1VrVkRTVkJTVDBOQlRGOVFTVElnTUM0eE5Ua3hOVFE1TkRNd09URTRPVFV6TlFvalpHVm1hVzVsSUVWUVUwbE1UMDRnTVdVdE5nb2phV1p1WkdWbUlITmhkSFZ5WVhSbENpTmtaV1pwYm1VZ2MyRjBkWEpoZEdVb0lHRWdLU0JqYkdGdGNDZ2dZU3dnTUM0d0xDQXhMakFnS1FvalpXNWthV1lLSTJSbFptbHVaU0IzYUdsMFpVTnZiWEJzWlcxbGJuUW9JR0VnS1NBb0lERXVNQ0F0SUhOaGRIVnlZWFJsS0NCaElDa2dLUXBtYkc5aGRDQndiM2N5S0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0I0SUNrZ2V5QnlaWFIxY200Z2VDcDRPeUI5Q25abFl6TWdjRzkzTWlnZ1kyOXVjM1FnYVc0Z2RtVmpNeUI0SUNrZ2V5QnlaWFIxY200Z2VDcDRPeUI5Q21ac2IyRjBJSEJ2ZHpNb0lHTnZibk4wSUdsdUlHWnNiMkYwSUhnZ0tTQjdJSEpsZEhWeWJpQjRLbmdxZURzZ2ZRcG1iRzloZENCd2IzYzBLQ0JqYjI1emRDQnBiaUJtYkc5aGRDQjRJQ2tnZXlCbWJHOWhkQ0I0TWlBOUlIZ3FlRHNnY21WMGRYSnVJSGd5S25neU95QjlDbVpzYjJGMElHMWhlRE1vSUdOdmJuTjBJR2x1SUhabFl6TWdkaUFwSUhzZ2NtVjBkWEp1SUcxaGVDZ2diV0Y0S0NCMkxuZ3NJSFl1ZVNBcExDQjJMbm9nS1RzZ2ZRcG1iRzloZENCaGRtVnlZV2RsS0NCamIyNXpkQ0JwYmlCMlpXTXpJSFlnS1NCN0lISmxkSFZ5YmlCa2IzUW9JSFlzSUhabFl6TW9JREF1TXpNek16TXpNeUFwSUNrN0lIMEthR2xuYUhBZ1pteHZZWFFnY21GdVpDZ2dZMjl1YzNRZ2FXNGdkbVZqTWlCMWRpQXBJSHNLQ1dOdmJuTjBJR2hwWjJod0lHWnNiMkYwSUdFZ1BTQXhNaTQ1T0RrNExDQmlJRDBnTnpndU1qTXpMQ0JqSUQwZ05ETTNOVGd1TlRRMU16c0tDV2hwWjJod0lHWnNiMkYwSUdSMElEMGdaRzkwS0NCMWRpNTRlU3dnZG1Wak1pZ2dZU3hpSUNrZ0tTd2djMjRnUFNCdGIyUW9JR1IwTENCUVNTQXBPd29KY21WMGRYSnVJR1p5WVdOMEtDQnphVzRvSUhOdUlDa2dLaUJqSUNrN0NuMEtJMmxtWkdWbUlFaEpSMGhmVUZKRlEwbFRTVTlPQ2dsbWJHOWhkQ0J3Y21WamFYTnBiMjVUWVdabFRHVnVaM1JvS0NCMlpXTXpJSFlnS1NCN0lISmxkSFZ5YmlCc1pXNW5kR2dvSUhZZ0tUc2dmUW9qWld4elpRb0pabXh2WVhRZ2NISmxZMmx6YVc5dVUyRm1aVXhsYm1kMGFDZ2dkbVZqTXlCMklDa2dld29KQ1dac2IyRjBJRzFoZUVOdmJYQnZibVZ1ZENBOUlHMWhlRE1vSUdGaWN5Z2dkaUFwSUNrN0Nna0pjbVYwZFhKdUlHeGxibWQwYUNnZ2RpQXZJRzFoZUVOdmJYQnZibVZ1ZENBcElDb2diV0Y0UTI5dGNHOXVaVzUwT3dvSmZRb2paVzVrYVdZS2MzUnlkV04wSUVsdVkybGtaVzUwVEdsbmFIUWdld29KZG1Wak15QmpiMnh2Y2pzS0NYWmxZek1nWkdseVpXTjBhVzl1T3dvSlltOXZiQ0IyYVhOcFlteGxPd3A5T3dwemRISjFZM1FnVW1WbWJHVmpkR1ZrVEdsbmFIUWdld29KZG1Wak15QmthWEpsWTNSRWFXWm1kWE5sT3dvSmRtVmpNeUJrYVhKbFkzUlRjR1ZqZFd4aGNqc0tDWFpsWXpNZ2FXNWthWEpsWTNSRWFXWm1kWE5sT3dvSmRtVmpNeUJwYm1ScGNtVmpkRk53WldOMWJHRnlPd3A5T3dvamFXWmtaV1lnVlZORlgwRk1VRWhCU0VGVFNBb0pkbUZ5ZVdsdVp5QjJaV016SUhaUWIzTnBkR2x2YmpzS0kyVnVaR2xtQ25abFl6TWdkSEpoYm5ObWIzSnRSR2x5WldOMGFXOXVLQ0JwYmlCMlpXTXpJR1JwY2l3Z2FXNGdiV0YwTkNCdFlYUnlhWGdnS1NCN0NnbHlaWFIxY200Z2JtOXliV0ZzYVhwbEtDQW9JRzFoZEhKcGVDQXFJSFpsWXpRb0lHUnBjaXdnTUM0d0lDa2dLUzU0ZVhvZ0tUc0tmUXAyWldNeklHbHVkbVZ5YzJWVWNtRnVjMlp2Y20xRWFYSmxZM1JwYjI0b0lHbHVJSFpsWXpNZ1pHbHlMQ0JwYmlCdFlYUTBJRzFoZEhKcGVDQXBJSHNLQ1hKbGRIVnliaUJ1YjNKdFlXeHBlbVVvSUNnZ2RtVmpOQ2dnWkdseUxDQXdMakFnS1NBcUlHMWhkSEpwZUNBcExuaDVlaUFwT3dwOUNtMWhkRE1nZEhKaGJuTndiM05sVFdGME15Z2dZMjl1YzNRZ2FXNGdiV0YwTXlCdElDa2dld29KYldGME15QjBiWEE3Q2dsMGJYQmJJREFnWFNBOUlIWmxZek1vSUcxYklEQWdYUzU0TENCdFd5QXhJRjB1ZUN3Z2JWc2dNaUJkTG5nZ0tUc0tDWFJ0Y0ZzZ01TQmRJRDBnZG1Wak15Z2diVnNnTUNCZExua3NJRzFiSURFZ1hTNTVMQ0J0V3lBeUlGMHVlU0FwT3dvSmRHMXdXeUF5SUYwZ1BTQjJaV016S0NCdFd5QXdJRjB1ZWl3Z2JWc2dNU0JkTG5vc0lHMWJJRElnWFM1NklDazdDZ2x5WlhSMWNtNGdkRzF3T3dwOUNtWnNiMkYwSUd4MWJXbHVZVzVqWlNnZ1kyOXVjM1FnYVc0Z2RtVmpNeUJ5WjJJZ0tTQjdDZ2xqYjI1emRDQjJaV016SUhkbGFXZG9kSE1nUFNCMlpXTXpLQ0F3TGpJeE1qWTNNamtzSURBdU56RTFNVFV5TWl3Z01DNHdOekl4TnpVd0lDazdDZ2x5WlhSMWNtNGdaRzkwS0NCM1pXbG5hSFJ6TENCeVoySWdLVHNLZlFwaWIyOXNJR2x6VUdWeWMzQmxZM1JwZG1WTllYUnlhWGdvSUcxaGREUWdiU0FwSUhzS0NYSmxkSFZ5YmlCdFd5QXlJRjFiSURNZ1hTQTlQU0F0SURFdU1Ec0tmUXAyWldNeUlHVnhkV2x5WldOMFZYWW9JR2x1SUhabFl6TWdaR2x5SUNrZ2V3b0pabXh2WVhRZ2RTQTlJR0YwWVc0b0lHUnBjaTU2TENCa2FYSXVlQ0FwSUNvZ1VrVkRTVkJTVDBOQlRGOVFTVElnS3lBd0xqVTdDZ2xtYkc5aGRDQjJJRDBnWVhOcGJpZ2dZMnhoYlhBb0lHUnBjaTU1TENBdElERXVNQ3dnTVM0d0lDa2dLU0FxSUZKRlEwbFFVazlEUVV4ZlVFa2dLeUF3TGpVN0NnbHlaWFIxY200Z2RtVmpNaWdnZFN3Z2RpQXBPd3A5Q25abFl6TWdRbEpFUmw5TVlXMWlaWEowS0NCamIyNXpkQ0JwYmlCMlpXTXpJR1JwWm1aMWMyVkRiMnh2Y2lBcElIc0tDWEpsZEhWeWJpQlNSVU5KVUZKUFEwRk1YMUJKSUNvZ1pHbG1ablZ6WlVOdmJHOXlPd3A5Q25abFl6TWdSbDlUWTJoc2FXTnJLQ0JqYjI1emRDQnBiaUIyWldNeklHWXdMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQm1PVEFzSUdOdmJuTjBJR2x1SUdac2IyRjBJR1J2ZEZaSUlDa2dld29KWm14dllYUWdabkpsYzI1bGJDQTlJR1Y0Y0RJb0lDZ2dMU0ExTGpVMU5EY3pJQ29nWkc5MFZrZ2dMU0EyTGprNE16RTJJQ2tnS2lCa2IzUldTQ0FwT3dvSmNtVjBkWEp1SUdZd0lDb2dLQ0F4TGpBZ0xTQm1jbVZ6Ym1Wc0lDa2dLeUFvSUdZNU1DQXFJR1p5WlhOdVpXd2dLVHNLZlFwbWJHOWhkQ0JHWDFOamFHeHBZMnNvSUdOdmJuTjBJR2x1SUdac2IyRjBJR1l3TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JtT1RBc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRGWklJQ2tnZXdvSlpteHZZWFFnWm5KbGMyNWxiQ0E5SUdWNGNESW9JQ2dnTFNBMUxqVTFORGN6SUNvZ1pHOTBWa2dnTFNBMkxqazRNekUySUNrZ0tpQmtiM1JXU0NBcE93b0pjbVYwZFhKdUlHWXdJQ29nS0NBeExqQWdMU0JtY21WemJtVnNJQ2tnS3lBb0lHWTVNQ0FxSUdaeVpYTnVaV3dnS1RzS2ZTQXZMeUIyWVd4cFpHRjBaV1JnTENCeGNDQTlJR0FqYVdaa1pXWWdSVTVXVFVGUVgxUlpVRVZmUTFWQ1JWOVZWZ29KSTJSbFptbHVaU0JqZFdKbFZWWmZiV2x1VFdsd1RHVjJaV3dnTkM0d0Nna2paR1ZtYVc1bElHTjFZbVZWVmw5dGFXNVVhV3hsVTJsNlpTQXhOaTR3Q2dsbWJHOWhkQ0JuWlhSR1lXTmxLQ0IyWldNeklHUnBjbVZqZEdsdmJpQXBJSHNLQ1FsMlpXTXpJR0ZpYzBScGNtVmpkR2x2YmlBOUlHRmljeWdnWkdseVpXTjBhVzl1SUNrN0Nna0pabXh2WVhRZ1ptRmpaU0E5SUMwZ01TNHdPd29KQ1dsbUlDZ2dZV0p6UkdseVpXTjBhVzl1TG5nZ1BpQmhZbk5FYVhKbFkzUnBiMjR1ZWlBcElIc0tDUWtKYVdZZ0tDQmhZbk5FYVhKbFkzUnBiMjR1ZUNBK0lHRmljMFJwY21WamRHbHZiaTU1SUNrS0NRa0pDV1poWTJVZ1BTQmthWEpsWTNScGIyNHVlQ0ErSURBdU1DQS9JREF1TUNBNklETXVNRHNLQ1FrSlpXeHpaUW9KQ1FrSlptRmpaU0E5SUdScGNtVmpkR2x2Ymk1NUlENGdNQzR3SUQ4Z01TNHdJRG9nTkM0d093b0pDWDBnWld4elpTQjdDZ2tKQ1dsbUlDZ2dZV0p6UkdseVpXTjBhVzl1TG5vZ1BpQmhZbk5FYVhKbFkzUnBiMjR1ZVNBcENna0pDUWxtWVdObElEMGdaR2x5WldOMGFXOXVMbm9nUGlBd0xqQWdQeUF5TGpBZ09pQTFMakE3Q2drSkNXVnNjMlVLQ1FrSkNXWmhZMlVnUFNCa2FYSmxZM1JwYjI0dWVTQStJREF1TUNBL0lERXVNQ0E2SURRdU1Ec0tDUWw5Q2drSmNtVjBkWEp1SUdaaFkyVTdDZ2w5Q2dsMlpXTXlJR2RsZEZWV0tDQjJaV016SUdScGNtVmpkR2x2Yml3Z1pteHZZWFFnWm1GalpTQXBJSHNLQ1FsMlpXTXlJSFYyT3dvSkNXbG1JQ2dnWm1GalpTQTlQU0F3TGpBZ0tTQjdDZ2tKQ1hWMklEMGdkbVZqTWlnZ1pHbHlaV04wYVc5dUxub3NJR1JwY21WamRHbHZiaTU1SUNrZ0x5QmhZbk1vSUdScGNtVmpkR2x2Ymk1NElDazdDZ2tKZlNCbGJITmxJR2xtSUNnZ1ptRmpaU0E5UFNBeExqQWdLU0I3Q2drSkNYVjJJRDBnZG1Wak1pZ2dMU0JrYVhKbFkzUnBiMjR1ZUN3Z0xTQmthWEpsWTNScGIyNHVlaUFwSUM4Z1lXSnpLQ0JrYVhKbFkzUnBiMjR1ZVNBcE93b0pDWDBnWld4elpTQnBaaUFvSUdaaFkyVWdQVDBnTWk0d0lDa2dld29KQ1FsMWRpQTlJSFpsWXpJb0lDMGdaR2x5WldOMGFXOXVMbmdzSUdScGNtVmpkR2x2Ymk1NUlDa2dMeUJoWW5Nb0lHUnBjbVZqZEdsdmJpNTZJQ2s3Q2drSmZTQmxiSE5sSUdsbUlDZ2dabUZqWlNBOVBTQXpMakFnS1NCN0Nna0pDWFYySUQwZ2RtVmpNaWdnTFNCa2FYSmxZM1JwYjI0dWVpd2daR2x5WldOMGFXOXVMbmtnS1NBdklHRmljeWdnWkdseVpXTjBhVzl1TG5nZ0tUc0tDUWw5SUdWc2MyVWdhV1lnS0NCbVlXTmxJRDA5SURRdU1DQXBJSHNLQ1FrSmRYWWdQU0IyWldNeUtDQXRJR1JwY21WamRHbHZiaTU0TENCa2FYSmxZM1JwYjI0dWVpQXBJQzhnWVdKektDQmthWEpsWTNScGIyNHVlU0FwT3dvSkNYMGdaV3h6WlNCN0Nna0pDWFYySUQwZ2RtVmpNaWdnWkdseVpXTjBhVzl1TG5nc0lHUnBjbVZqZEdsdmJpNTVJQ2tnTHlCaFluTW9JR1JwY21WamRHbHZiaTU2SUNrN0Nna0pmUW9KQ1hKbGRIVnliaUF3TGpVZ0tpQW9JSFYySUNzZ01TNHdJQ2s3Q2dsOUNnbDJaV016SUdKcGJHbHVaV0Z5UTNWaVpWVldLQ0J6WVcxd2JHVnlNa1FnWlc1MlRXRndMQ0IyWldNeklHUnBjbVZqZEdsdmJpd2dabXh2WVhRZ2JXbHdTVzUwSUNrZ2V3b0pDV1pzYjJGMElHWmhZMlVnUFNCblpYUkdZV05sS0NCa2FYSmxZM1JwYjI0Z0tUc0tDUWxtYkc5aGRDQm1hV3gwWlhKSmJuUWdQU0J0WVhnb0lHTjFZbVZWVmw5dGFXNU5hWEJNWlhabGJDQXRJRzFwY0VsdWRDd2dNQzR3SUNrN0Nna0piV2x3U1c1MElEMGdiV0Y0S0NCdGFYQkpiblFzSUdOMVltVlZWbDl0YVc1TmFYQk1aWFpsYkNBcE93b0pDV1pzYjJGMElHWmhZMlZUYVhwbElEMGdaWGh3TWlnZ2JXbHdTVzUwSUNrN0Nna0phR2xuYUhBZ2RtVmpNaUIxZGlBOUlHZGxkRlZXS0NCa2FYSmxZM1JwYjI0c0lHWmhZMlVnS1NBcUlDZ2dabUZqWlZOcGVtVWdMU0F5TGpBZ0tTQXJJREV1TURzS0NRbHBaaUFvSUdaaFkyVWdQaUF5TGpBZ0tTQjdDZ2tKQ1hWMkxua2dLejBnWm1GalpWTnBlbVU3Q2drSkNXWmhZMlVnTFQwZ015NHdPd29KQ1gwS0NRbDFkaTU0SUNzOUlHWmhZMlVnS2lCbVlXTmxVMmw2WlRzS0NRbDFkaTU0SUNzOUlHWnBiSFJsY2tsdWRDQXFJRE11TUNBcUlHTjFZbVZWVmw5dGFXNVVhV3hsVTJsNlpUc0tDUWwxZGk1NUlDczlJRFF1TUNBcUlDZ2daWGh3TWlnZ1ExVkNSVlZXWDAxQldGOU5TVkFnS1NBdElHWmhZMlZUYVhwbElDazdDZ2tKZFhZdWVDQXFQU0JEVlVKRlZWWmZWRVZZUlV4ZlYwbEVWRWc3Q2drSmRYWXVlU0FxUFNCRFZVSkZWVlpmVkVWWVJVeGZTRVZKUjBoVU93b0pDU05wWm1SbFppQjBaWGgwZFhKbE1rUkhjbUZrUlZoVUNna0pDWEpsZEhWeWJpQjBaWGgwZFhKbE1rUkhjbUZrUlZoVUtDQmxiblpOWVhBc0lIVjJMQ0IyWldNeUtDQXdMakFnS1N3Z2RtVmpNaWdnTUM0d0lDa2dLUzV5WjJJN0Nna0pJMlZzYzJVS0NRa0pjbVYwZFhKdUlIUmxlSFIxY21VeVJDZ2daVzUyVFdGd0xDQjFkaUFwTG5Kbllqc0tDUWtqWlc1a2FXWUtDWDBLQ1NOa1pXWnBibVVnWTNWaVpWVldYM0l3SURFdU1Bb0pJMlJsWm1sdVpTQmpkV0psVlZaZmRqQWdNQzR6TXprS0NTTmtaV1pwYm1VZ1kzVmlaVlZXWDIwd0lDMGdNaTR3Q2dralpHVm1hVzVsSUdOMVltVlZWbDl5TVNBd0xqZ0tDU05rWldacGJtVWdZM1ZpWlZWV1gzWXhJREF1TWpjMkNna2paR1ZtYVc1bElHTjFZbVZWVmw5dE1TQXRJREV1TUFvSkkyUmxabWx1WlNCamRXSmxWVlpmY2pRZ01DNDBDZ2tqWkdWbWFXNWxJR04xWW1WVlZsOTJOQ0F3TGpBME5nb0pJMlJsWm1sdVpTQmpkV0psVlZaZmJUUWdNaTR3Q2dralpHVm1hVzVsSUdOMVltVlZWbDl5TlNBd0xqTXdOUW9KSTJSbFptbHVaU0JqZFdKbFZWWmZkalVnTUM0d01UWUtDU05rWldacGJtVWdZM1ZpWlZWV1gyMDFJRE11TUFvSkkyUmxabWx1WlNCamRXSmxWVlpmY2pZZ01DNHlNUW9KSTJSbFptbHVaU0JqZFdKbFZWWmZkallnTUM0d01ETTRDZ2tqWkdWbWFXNWxJR04xWW1WVlZsOXROaUEwTGpBS0NXWnNiMkYwSUhKdmRXZG9ibVZ6YzFSdlRXbHdLQ0JtYkc5aGRDQnliM1ZuYUc1bGMzTWdLU0I3Q2drSlpteHZZWFFnYldsd0lEMGdNQzR3T3dvSkNXbG1JQ2dnY205MVoyaHVaWE56SUQ0OUlHTjFZbVZWVmw5eU1TQXBJSHNLQ1FrSmJXbHdJRDBnS0NCamRXSmxWVlpmY2pBZ0xTQnliM1ZuYUc1bGMzTWdLU0FxSUNnZ1kzVmlaVlZXWDIweElDMGdZM1ZpWlZWV1gyMHdJQ2tnTHlBb0lHTjFZbVZWVmw5eU1DQXRJR04xWW1WVlZsOXlNU0FwSUNzZ1kzVmlaVlZXWDIwd093b0pDWDBnWld4elpTQnBaaUFvSUhKdmRXZG9ibVZ6Y3lBK1BTQmpkV0psVlZaZmNqUWdLU0I3Q2drSkNXMXBjQ0E5SUNnZ1kzVmlaVlZXWDNJeElDMGdjbTkxWjJodVpYTnpJQ2tnS2lBb0lHTjFZbVZWVmw5dE5DQXRJR04xWW1WVlZsOXRNU0FwSUM4Z0tDQmpkV0psVlZaZmNqRWdMU0JqZFdKbFZWWmZjalFnS1NBcklHTjFZbVZWVmw5dE1Uc0tDUWw5SUdWc2MyVWdhV1lnS0NCeWIzVm5hRzVsYzNNZ1BqMGdZM1ZpWlZWV1gzSTFJQ2tnZXdvSkNRbHRhWEFnUFNBb0lHTjFZbVZWVmw5eU5DQXRJSEp2ZFdkb2JtVnpjeUFwSUNvZ0tDQmpkV0psVlZaZmJUVWdMU0JqZFdKbFZWWmZiVFFnS1NBdklDZ2dZM1ZpWlZWV1gzSTBJQzBnWTNWaVpWVldYM0kxSUNrZ0t5QmpkV0psVlZaZmJUUTdDZ2tKZlNCbGJITmxJR2xtSUNnZ2NtOTFaMmh1WlhOeklENDlJR04xWW1WVlZsOXlOaUFwSUhzS0NRa0piV2x3SUQwZ0tDQmpkV0psVlZaZmNqVWdMU0J5YjNWbmFHNWxjM01nS1NBcUlDZ2dZM1ZpWlZWV1gyMDJJQzBnWTNWaVpWVldYMjAxSUNrZ0x5QW9JR04xWW1WVlZsOXlOU0F0SUdOMVltVlZWbDl5TmlBcElDc2dZM1ZpWlZWV1gyMDFPd29KQ1gwZ1pXeHpaU0I3Q2drSkNXMXBjQ0E5SUMwZ01pNHdJQ29nYkc5bk1pZ2dNUzR4TmlBcUlISnZkV2RvYm1WemN5QXBPd2tKZlFvSkNYSmxkSFZ5YmlCdGFYQTdDZ2w5Q2dsMlpXTTBJSFJsZUhSMWNtVkRkV0psVlZZb0lITmhiWEJzWlhJeVJDQmxiblpOWVhBc0lIWmxZek1nYzJGdGNHeGxSR2x5TENCbWJHOWhkQ0J5YjNWbmFHNWxjM01nS1NCN0Nna0pabXh2WVhRZ2JXbHdJRDBnWTJ4aGJYQW9JSEp2ZFdkb2JtVnpjMVJ2VFdsd0tDQnliM1ZuYUc1bGMzTWdLU3dnWTNWaVpWVldYMjB3TENCRFZVSkZWVlpmVFVGWVgwMUpVQ0FwT3dvSkNXWnNiMkYwSUcxcGNFWWdQU0JtY21GamRDZ2diV2x3SUNrN0Nna0pabXh2WVhRZ2JXbHdTVzUwSUQwZ1pteHZiM0lvSUcxcGNDQXBPd29KQ1habFl6TWdZMjlzYjNJd0lEMGdZbWxzYVc1bFlYSkRkV0psVlZZb0lHVnVkazFoY0N3Z2MyRnRjR3hsUkdseUxDQnRhWEJKYm5RZ0tUc0tDUWxwWmlBb0lHMXBjRVlnUFQwZ01DNHdJQ2tnZXdvSkNRbHlaWFIxY200Z2RtVmpOQ2dnWTI5c2IzSXdMQ0F4TGpBZ0tUc0tDUWw5SUdWc2MyVWdld29KQ1FsMlpXTXpJR052Ykc5eU1TQTlJR0pwYkdsdVpXRnlRM1ZpWlZWV0tDQmxiblpOWVhBc0lITmhiWEJzWlVScGNpd2diV2x3U1c1MElDc2dNUzR3SUNrN0Nna0pDWEpsZEhWeWJpQjJaV00wS0NCdGFYZ29JR052Ykc5eU1Dd2dZMjlzYjNJeExDQnRhWEJHSUNrc0lERXVNQ0FwT3dvSkNYMEtDWDBLSTJWdVpHbG1ZQ3dnV1hBZ1BTQmdkbVZqTXlCMGNtRnVjMlp2Y20xbFpFNXZjbTFoYkNBOUlHOWlhbVZqZEU1dmNtMWhiRHNLSTJsbVpHVm1JRlZUUlY5SlRsTlVRVTVEU1U1SENnbHRZWFF6SUcwZ1BTQnRZWFF6S0NCcGJuTjBZVzVqWlUxaGRISnBlQ0FwT3dvSmRISmhibk5tYjNKdFpXUk9iM0p0WVd3Z0x6MGdkbVZqTXlnZ1pHOTBLQ0J0V3lBd0lGMHNJRzFiSURBZ1hTQXBMQ0JrYjNRb0lHMWJJREVnWFN3Z2JWc2dNU0JkSUNrc0lHUnZkQ2dnYlZzZ01pQmRMQ0J0V3lBeUlGMGdLU0FwT3dvSmRISmhibk5tYjNKdFpXUk9iM0p0WVd3Z1BTQnRJQ29nZEhKaGJuTm1iM0p0WldST2IzSnRZV3c3Q2lObGJtUnBaZ3AwY21GdWMyWnZjbTFsWkU1dmNtMWhiQ0E5SUc1dmNtMWhiRTFoZEhKcGVDQXFJSFJ5WVc1elptOXliV1ZrVG05eWJXRnNPd29qYVdaa1pXWWdSa3hKVUY5VFNVUkZSQW9KZEhKaGJuTm1iM0p0WldST2IzSnRZV3dnUFNBdElIUnlZVzV6Wm05eWJXVmtUbTl5YldGc093b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVVRVTVIUlU1VUNnbDJaV016SUhSeVlXNXpabTl5YldWa1ZHRnVaMlZ1ZENBOUlDZ2diVzlrWld4V2FXVjNUV0YwY21sNElDb2dkbVZqTkNnZ2IySnFaV04wVkdGdVoyVnVkQ3dnTUM0d0lDa2dLUzU0ZVhvN0Nna2phV1prWldZZ1JreEpVRjlUU1VSRlJBb0pDWFJ5WVc1elptOXliV1ZrVkdGdVoyVnVkQ0E5SUMwZ2RISmhibk5tYjNKdFpXUlVZVzVuWlc1ME93b0pJMlZ1WkdsbUNpTmxibVJwWm1Bc0lGcHdJRDBnWUNOcFptUmxaaUJWVTBWZlJFbFRVRXhCUTBWTlJVNVVUVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCa2FYTndiR0ZqWlcxbGJuUk5ZWEE3Q2dsMWJtbG1iM0p0SUdac2IyRjBJR1JwYzNCc1lXTmxiV1Z1ZEZOallXeGxPd29KZFc1cFptOXliU0JtYkc5aGRDQmthWE53YkdGalpXMWxiblJDYVdGek93b2paVzVrYVdaZ0xDQktjQ0E5SUdBamFXWmtaV1lnVlZORlgwUkpVMUJNUVVORlRVVk9WRTFCVUFvSmRISmhibk5tYjNKdFpXUWdLejBnYm05eWJXRnNhWHBsS0NCdlltcGxZM1JPYjNKdFlXd2dLU0FxSUNnZ2RHVjRkSFZ5WlRKRUtDQmthWE53YkdGalpXMWxiblJOWVhBc0lIWkVhWE53YkdGalpXMWxiblJOWVhCVmRpQXBMbmdnS2lCa2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBcklHUnBjM0JzWVdObGJXVnVkRUpwWVhNZ0tUc0tJMlZ1WkdsbVlDd2dKSEFnUFNCZ0kybG1aR1ZtSUZWVFJWOUZUVWxUVTBsV1JVMUJVQW9KZG1Wak5DQmxiV2x6YzJsMlpVTnZiRzl5SUQwZ2RHVjRkSFZ5WlRKRUtDQmxiV2x6YzJsMlpVMWhjQ3dnZGtWdGFYTnphWFpsVFdGd1ZYWWdLVHNLQ1hSdmRHRnNSVzFwYzNOcGRtVlNZV1JwWVc1alpTQXFQU0JsYldsemMybDJaVU52Ykc5eUxuSm5ZanNLSTJWdVpHbG1ZQ3dnUzNBZ1BTQmdJMmxtWkdWbUlGVlRSVjlGVFVsVFUwbFdSVTFCVUFvSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1pXMXBjM05wZG1WTllYQTdDaU5sYm1ScFptQXNJRkZ3SUQwZ0ltZHNYMFp5WVdkRGIyeHZjaUE5SUd4cGJtVmhjbFJ2VDNWMGNIVjBWR1Y0Wld3b0lHZHNYMFp5WVdkRGIyeHZjaUFwT3lJc0lHcHdJRDBnWUFwamIyNXpkQ0J0WVhReklFeEpUa1ZCVWw5VFVrZENYMVJQWDB4SlRrVkJVbDlFU1ZOUVRFRlpYMUF6SUQwZ2JXRjBNeWdLQ1habFl6TW9JREF1T0RJeU5EWXlNU3dnTUM0eE56YzFNemdzSURBdU1DQXBMQW9KZG1Wak15Z2dNQzR3TXpNeE9UUXhMQ0F3TGprMk5qZ3dOVGdzSURBdU1DQXBMQW9KZG1Wak15Z2dNQzR3TVRjd09ESTNMQ0F3TGpBM01qTTVOelFzSURBdU9URXdOVEU1T1NBcENpazdDbU52Ym5OMElHMWhkRE1nVEVsT1JVRlNYMFJKVTFCTVFWbGZVRE5mVkU5ZlRFbE9SVUZTWDFOU1IwSWdQU0J0WVhRektBb0pkbVZqTXlnZ01TNHlNalE1TkRBeExDQXRJREF1TWpJME9UUXdOQ3dnTUM0d0lDa3NDZ2wyWldNektDQXRJREF1TURReU1EVTJPU3dnTVM0d05ESXdOVGN4TENBd0xqQWdLU3dLQ1habFl6TW9JQzBnTUM0d01UazJNemMyTENBdElEQXVNRGM0TmpNMk1Td2dNUzR3T1RneU56TTFJQ2tLS1RzS2RtVmpOQ0JNYVc1bFlYSlRVa2RDVkc5TWFXNWxZWEpFYVhOd2JHRjVVRE1vSUdsdUlIWmxZelFnZG1Gc2RXVWdLU0I3Q2dseVpYUjFjbTRnZG1Wak5DZ2dkbUZzZFdVdWNtZGlJQ29nVEVsT1JVRlNYMU5TUjBKZlZFOWZURWxPUlVGU1gwUkpVMUJNUVZsZlVETXNJSFpoYkhWbExtRWdLVHNLZlFwMlpXTTBJRXhwYm1WaGNrUnBjM0JzWVhsUU0xUnZUR2x1WldGeVUxSkhRaWdnYVc0Z2RtVmpOQ0IyWVd4MVpTQXBJSHNLQ1hKbGRIVnliaUIyWldNMEtDQjJZV3gxWlM1eVoySWdLaUJNU1U1RlFWSmZSRWxUVUV4QldWOVFNMTlVVDE5TVNVNUZRVkpmVTFKSFFpd2dkbUZzZFdVdVlTQXBPd3A5Q25abFl6UWdUR2x1WldGeVZISmhibk5tWlhKUFJWUkdLQ0JwYmlCMlpXTTBJSFpoYkhWbElDa2dld29KY21WMGRYSnVJSFpoYkhWbE93cDlDblpsWXpRZ2MxSkhRbFJ5WVc1elptVnlUMFZVUmlnZ2FXNGdkbVZqTkNCMllXeDFaU0FwSUhzS0NYSmxkSFZ5YmlCMlpXTTBLQ0J0YVhnb0lIQnZkeWdnZG1Gc2RXVXVjbWRpTENCMlpXTXpLQ0F3TGpReE5qWTJJQ2tnS1NBcUlERXVNRFUxSUMwZ2RtVmpNeWdnTUM0d05UVWdLU3dnZG1Gc2RXVXVjbWRpSUNvZ01USXVPVElzSUhabFl6TW9JR3hsYzNOVWFHRnVSWEYxWVd3b0lIWmhiSFZsTG5Kbllpd2dkbVZqTXlnZ01DNHdNRE14TXpBNElDa2dLU0FwSUNrc0lIWmhiSFZsTG1FZ0tUc0tmUXAyWldNMElFeHBibVZoY2xSdlRHbHVaV0Z5S0NCcGJpQjJaV00wSUhaaGJIVmxJQ2tnZXdvSmNtVjBkWEp1SUhaaGJIVmxPd3A5Q25abFl6UWdUR2x1WldGeVZHOXpVa2RDS0NCcGJpQjJaV00wSUhaaGJIVmxJQ2tnZXdvSmNtVjBkWEp1SUhOU1IwSlVjbUZ1YzJabGNrOUZWRVlvSUhaaGJIVmxJQ2s3Q24xZ0xDQmxiU0E5SUdBamFXWmtaV1lnVlZORlgwVk9WazFCVUFvSkkybG1aR1ZtSUVWT1ZsOVhUMUpNUkZCUFV3b0pDWFpsWXpNZ1kyRnRaWEpoVkc5R2NtRm5Pd29KQ1dsbUlDZ2dhWE5QY25Sb2IyZHlZWEJvYVdNZ0tTQjdDZ2tKQ1dOaGJXVnlZVlJ2Um5KaFp5QTlJRzV2Y20xaGJHbDZaU2dnZG1Wak15Z2dMU0IyYVdWM1RXRjBjbWw0V3lBd0lGMWJJRElnWFN3Z0xTQjJhV1YzVFdGMGNtbDRXeUF4SUYxYklESWdYU3dnTFNCMmFXVjNUV0YwY21sNFd5QXlJRjFiSURJZ1hTQXBJQ2s3Q2drSmZTQmxiSE5sSUhzS0NRa0pZMkZ0WlhKaFZHOUdjbUZuSUQwZ2JtOXliV0ZzYVhwbEtDQjJWMjl5YkdSUWIzTnBkR2x2YmlBdElHTmhiV1Z5WVZCdmMybDBhVzl1SUNrN0Nna0pmUW9KQ1habFl6TWdkMjl5YkdST2IzSnRZV3dnUFNCcGJuWmxjbk5sVkhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0NCdWIzSnRZV3dzSUhacFpYZE5ZWFJ5YVhnZ0tUc0tDUWtqYVdaa1pXWWdSVTVXVFVGUVgwMVBSRVZmVWtWR1RFVkRWRWxQVGdvSkNRbDJaV016SUhKbFpteGxZM1JXWldNZ1BTQnlaV1pzWldOMEtDQmpZVzFsY21GVWIwWnlZV2NzSUhkdmNteGtUbTl5YldGc0lDazdDZ2tKSTJWc2MyVUtDUWtKZG1Wak15QnlaV1pzWldOMFZtVmpJRDBnY21WbWNtRmpkQ2dnWTJGdFpYSmhWRzlHY21GbkxDQjNiM0pzWkU1dmNtMWhiQ3dnY21WbWNtRmpkR2x2YmxKaGRHbHZJQ2s3Q2drSkkyVnVaR2xtQ2dralpXeHpaUW9KQ1habFl6TWdjbVZtYkdWamRGWmxZeUE5SUhaU1pXWnNaV04wT3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnUlU1V1RVRlFYMVJaVUVWZlExVkNSUW9KQ1habFl6UWdaVzUyUTI5c2IzSWdQU0IwWlhoMGRYSmxRM1ZpWlNnZ1pXNTJUV0Z3TENCMlpXTXpLQ0JtYkdsd1JXNTJUV0Z3SUNvZ2NtVm1iR1ZqZEZabFl5NTRMQ0J5Wldac1pXTjBWbVZqTG5sNklDa2dLVHNLQ1NObGJITmxDZ2tKZG1Wak5DQmxiblpEYjJ4dmNpQTlJSFpsWXpRb0lEQXVNQ0FwT3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnUlU1V1RVRlFYMEpNUlU1RVNVNUhYMDFWVEZSSlVFeFpDZ2tKYjNWMFoyOXBibWRNYVdkb2RDQTlJRzFwZUNnZ2IzVjBaMjlwYm1kTWFXZG9kQ3dnYjNWMFoyOXBibWRNYVdkb2RDQXFJR1Z1ZGtOdmJHOXlMbmg1ZWl3Z2MzQmxZM1ZzWVhKVGRISmxibWQwYUNBcUlISmxabXhsWTNScGRtbDBlU0FwT3dvSkkyVnNhV1lnWkdWbWFXNWxaQ2dnUlU1V1RVRlFYMEpNUlU1RVNVNUhYMDFKV0NBcENna0piM1YwWjI5cGJtZE1hV2RvZENBOUlHMXBlQ2dnYjNWMFoyOXBibWRNYVdkb2RDd2daVzUyUTI5c2IzSXVlSGw2TENCemNHVmpkV3hoY2xOMGNtVnVaM1JvSUNvZ2NtVm1iR1ZqZEdsMmFYUjVJQ2s3Q2dralpXeHBaaUJrWldacGJtVmtLQ0JGVGxaTlFWQmZRa3hGVGtSSlRrZGZRVVJFSUNrS0NRbHZkWFJuYjJsdVoweHBaMmgwSUNzOUlHVnVka052Ykc5eUxuaDVlaUFxSUhOd1pXTjFiR0Z5VTNSeVpXNW5kR2dnS2lCeVpXWnNaV04wYVhacGRIazdDZ2tqWlc1a2FXWUtJMlZ1WkdsbVlDd2dkRzBnUFNCZ0kybG1aR1ZtSUZWVFJWOUZUbFpOUVZBS0NYVnVhV1p2Y20wZ1pteHZZWFFnWlc1MlRXRndTVzUwWlc1emFYUjVPd29KZFc1cFptOXliU0JtYkc5aGRDQm1iR2x3Ulc1MlRXRndPd29KSTJsbVpHVm1JRVZPVmsxQlVGOVVXVkJGWDBOVlFrVUtDUWwxYm1sbWIzSnRJSE5oYlhCc1pYSkRkV0psSUdWdWRrMWhjRHNLQ1NObGJITmxDZ2tKZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnWlc1MlRXRndPd29KSTJWdVpHbG1DZ2tLSTJWdVpHbG1ZQ3dnYm0wZ1BTQmdJMmxtWkdWbUlGVlRSVjlGVGxaTlFWQUtDWFZ1YVdadmNtMGdabXh2WVhRZ2NtVm1iR1ZqZEdsMmFYUjVPd29KSTJsbUlHUmxabWx1WldRb0lGVlRSVjlDVlUxUVRVRlFJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMDVQVWsxQlRFMUJVQ0FwSUh4OElHUmxabWx1WldRb0lGQklUMDVISUNrZ2ZId2daR1ZtYVc1bFpDZ2dURUZOUWtWU1ZDQXBDZ2tKSTJSbFptbHVaU0JGVGxaZlYwOVNURVJRVDFNS0NTTmxibVJwWmdvSkkybG1aR1ZtSUVWT1ZsOVhUMUpNUkZCUFV3b0pDWFpoY25scGJtY2dkbVZqTXlCMlYyOXliR1JRYjNOcGRHbHZianNLQ1FsMWJtbG1iM0p0SUdac2IyRjBJSEpsWm5KaFkzUnBiMjVTWVhScGJ6c0tDU05sYkhObENna0pkbUZ5ZVdsdVp5QjJaV016SUhaU1pXWnNaV04wT3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUdsdElEMGdZQ05wWm1SbFppQlZVMFZmUlU1V1RVRlFDZ2tqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMEpWVFZCTlFWQWdLU0I4ZkNCa1pXWnBibVZrS0NCVlUwVmZUazlTVFVGTVRVRlFJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1VFaFBUa2NnS1NCOGZDQmtaV1pwYm1Wa0tDQk1RVTFDUlZKVUlDa0tDUWtqWkdWbWFXNWxJRVZPVmw5WFQxSk1SRkJQVXdvSkkyVnVaR2xtQ2dramFXWmtaV1lnUlU1V1gxZFBVa3hFVUU5VENna0pDZ2tKZG1GeWVXbHVaeUIyWldNeklIWlhiM0pzWkZCdmMybDBhVzl1T3dvSkkyVnNjMlVLQ1FsMllYSjVhVzVuSUhabFl6TWdkbEpsWm14bFkzUTdDZ2tKZFc1cFptOXliU0JtYkc5aGRDQnlaV1p5WVdOMGFXOXVVbUYwYVc4N0Nna2paVzVrYVdZS0kyVnVaR2xtWUN3Z2MyMGdQU0JnSTJsbVpHVm1JRlZUUlY5RlRsWk5RVkFLQ1NOcFptUmxaaUJGVGxaZlYwOVNURVJRVDFNS0NRbDJWMjl5YkdSUWIzTnBkR2x2YmlBOUlIZHZjbXhrVUc5emFYUnBiMjR1ZUhsNk93b0pJMlZzYzJVS0NRbDJaV016SUdOaGJXVnlZVlJ2Vm1WeWRHVjRPd29KQ1dsbUlDZ2dhWE5QY25Sb2IyZHlZWEJvYVdNZ0tTQjdDZ2tKQ1dOaGJXVnlZVlJ2Vm1WeWRHVjRJRDBnYm05eWJXRnNhWHBsS0NCMlpXTXpLQ0F0SUhacFpYZE5ZWFJ5YVhoYklEQWdYVnNnTWlCZExDQXRJSFpwWlhkTllYUnlhWGhiSURFZ1hWc2dNaUJkTENBdElIWnBaWGROWVhSeWFYaGJJRElnWFZzZ01pQmRJQ2tnS1RzS0NRbDlJR1ZzYzJVZ2V3b0pDUWxqWVcxbGNtRlViMVpsY25SbGVDQTlJRzV2Y20xaGJHbDZaU2dnZDI5eWJHUlFiM05wZEdsdmJpNTRlWG9nTFNCallXMWxjbUZRYjNOcGRHbHZiaUFwT3dvSkNYMEtDUWwyWldNeklIZHZjbXhrVG05eWJXRnNJRDBnYVc1MlpYSnpaVlJ5WVc1elptOXliVVJwY21WamRHbHZiaWdnZEhKaGJuTm1iM0p0WldST2IzSnRZV3dzSUhacFpYZE5ZWFJ5YVhnZ0tUc0tDUWtqYVdaa1pXWWdSVTVXVFVGUVgwMVBSRVZmVWtWR1RFVkRWRWxQVGdvSkNRbDJVbVZtYkdWamRDQTlJSEpsWm14bFkzUW9JR05oYldWeVlWUnZWbVZ5ZEdWNExDQjNiM0pzWkU1dmNtMWhiQ0FwT3dvSkNTTmxiSE5sQ2drSkNYWlNaV1pzWldOMElEMGdjbVZtY21GamRDZ2dZMkZ0WlhKaFZHOVdaWEowWlhnc0lIZHZjbXhrVG05eWJXRnNMQ0J5WldaeVlXTjBhVzl1VW1GMGFXOGdLVHNLQ1FralpXNWthV1lLQ1NObGJtUnBaZ29qWlc1a2FXWmdMQ0J5YlNBOUlHQWphV1prWldZZ1ZWTkZYMFpQUndvSmRrWnZaMFJsY0hSb0lEMGdMU0J0ZGxCdmMybDBhVzl1TG5vN0NpTmxibVJwWm1Bc0lHRnRJRDBnWUNOcFptUmxaaUJWVTBWZlJrOUhDZ2wyWVhKNWFXNW5JR1pzYjJGMElIWkdiMmRFWlhCMGFEc0tJMlZ1WkdsbVlDd2diMjBnUFNCZ0kybG1aR1ZtSUZWVFJWOUdUMGNLQ1NOcFptUmxaaUJHVDBkZlJWaFFNZ29KQ1dac2IyRjBJR1p2WjBaaFkzUnZjaUE5SURFdU1DQXRJR1Y0Y0NnZ0xTQm1iMmRFWlc1emFYUjVJQ29nWm05blJHVnVjMmwwZVNBcUlIWkdiMmRFWlhCMGFDQXFJSFpHYjJkRVpYQjBhQ0FwT3dvSkkyVnNjMlVLQ1FsbWJHOWhkQ0JtYjJkR1lXTjBiM0lnUFNCemJXOXZkR2h6ZEdWd0tDQm1iMmRPWldGeUxDQm1iMmRHWVhJc0lIWkdiMmRFWlhCMGFDQXBPd29KSTJWdVpHbG1DZ2xuYkY5R2NtRm5RMjlzYjNJdWNtZGlJRDBnYldsNEtDQm5iRjlHY21GblEyOXNiM0l1Y21kaUxDQm1iMmREYjJ4dmNpd2dabTluUm1GamRHOXlJQ2s3Q2lObGJtUnBabUFzSUdOdElEMGdZQ05wWm1SbFppQlZVMFZmUms5SENnbDFibWxtYjNKdElIWmxZek1nWm05blEyOXNiM0k3Q2dsMllYSjVhVzVuSUdac2IyRjBJSFpHYjJkRVpYQjBhRHNLQ1NOcFptUmxaaUJHVDBkZlJWaFFNZ29KQ1hWdWFXWnZjbTBnWm14dllYUWdabTluUkdWdWMybDBlVHNLQ1NObGJITmxDZ2tKZFc1cFptOXliU0JtYkc5aGRDQm1iMmRPWldGeU93b0pDWFZ1YVdadmNtMGdabXh2WVhRZ1ptOW5SbUZ5T3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUd4dElEMGdZQ05wWm1SbFppQlZVMFZmUjFKQlJFbEZUbFJOUVZBS0NYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlHZHlZV1JwWlc1MFRXRndPd29qWlc1a2FXWUtkbVZqTXlCblpYUkhjbUZrYVdWdWRFbHljbUZrYVdGdVkyVW9JSFpsWXpNZ2JtOXliV0ZzTENCMlpXTXpJR3hwWjJoMFJHbHlaV04wYVc5dUlDa2dld29KWm14dllYUWdaRzkwVGt3Z1BTQmtiM1FvSUc1dmNtMWhiQ3dnYkdsbmFIUkVhWEpsWTNScGIyNGdLVHNLQ1habFl6SWdZMjl2Y21RZ1BTQjJaV015S0NCa2IzUk9UQ0FxSURBdU5TQXJJREF1TlN3Z01DNHdJQ2s3Q2dramFXWmtaV1lnVlZORlgwZFNRVVJKUlU1VVRVRlFDZ2tKY21WMGRYSnVJSFpsWXpNb0lIUmxlSFIxY21VeVJDZ2daM0poWkdsbGJuUk5ZWEFzSUdOdmIzSmtJQ2t1Y2lBcE93b0pJMlZzYzJVS0NRbDJaV015SUdaM0lEMGdabmRwWkhSb0tDQmpiMjl5WkNBcElDb2dNQzQxT3dvSkNYSmxkSFZ5YmlCdGFYZ29JSFpsWXpNb0lEQXVOeUFwTENCMlpXTXpLQ0F4TGpBZ0tTd2djMjF2YjNSb2MzUmxjQ2dnTUM0M0lDMGdabmN1ZUN3Z01DNDNJQ3NnWm5jdWVDd2dZMjl2Y21RdWVDQXBJQ2s3Q2dralpXNWthV1lLZldBc0lHaHRJRDBnWUNOcFptUmxaaUJWVTBWZlRFbEhTRlJOUVZBS0NYWmxZelFnYkdsbmFIUk5ZWEJVWlhobGJDQTlJSFJsZUhSMWNtVXlSQ2dnYkdsbmFIUk5ZWEFzSUhaTWFXZG9kRTFoY0ZWMklDazdDZ2wyWldNeklHeHBaMmgwVFdGd1NYSnlZV1JwWVc1alpTQTlJR3hwWjJoMFRXRndWR1Y0Wld3dWNtZGlJQ29nYkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGs3Q2dseVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRVJwWm1aMWMyVWdLejBnYkdsbmFIUk5ZWEJKY25KaFpHbGhibU5sT3dvalpXNWthV1pnTENCMWJTQTlJR0FqYVdaa1pXWWdWVk5GWDB4SlIwaFVUVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCc2FXZG9kRTFoY0RzS0NYVnVhV1p2Y20wZ1pteHZZWFFnYkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGs3Q2lObGJtUnBabUFzSUdSdElEMGdZRXhoYldKbGNuUk5ZWFJsY21saGJDQnRZWFJsY21saGJEc0tiV0YwWlhKcFlXd3VaR2xtWm5WelpVTnZiRzl5SUQwZ1pHbG1ablZ6WlVOdmJHOXlMbkpuWWpzS2JXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKVGRISmxibWQwYUNBOUlITndaV04xYkdGeVUzUnlaVzVuZEdnN1lDd2dabTBnUFNCZ2RtRnllV2x1WnlCMlpXTXpJSFpXYVdWM1VHOXphWFJwYjI0N0NuTjBjblZqZENCTVlXMWlaWEowVFdGMFpYSnBZV3dnZXdvSmRtVmpNeUJrYVdabWRYTmxRMjlzYjNJN0NnbG1iRzloZENCemNHVmpkV3hoY2xOMGNtVnVaM1JvT3dwOU93cDJiMmxrSUZKRlgwUnBjbVZqZEY5TVlXMWlaWEowS0NCamIyNXpkQ0JwYmlCSmJtTnBaR1Z1ZEV4cFoyaDBJR1JwY21WamRFeHBaMmgwTENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVVRzl6YVhScGIyNHNJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sT2IzSnRZV3dzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubFdhV1YzUkdseUxDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1UTJ4bFlYSmpiMkYwVG05eWJXRnNMQ0JqYjI1emRDQnBiaUJNWVcxaVpYSjBUV0YwWlhKcFlXd2diV0YwWlhKcFlXd3NJR2x1YjNWMElGSmxabXhsWTNSbFpFeHBaMmgwSUhKbFpteGxZM1JsWkV4cFoyaDBJQ2tnZXdvSlpteHZZWFFnWkc5MFRrd2dQU0J6WVhSMWNtRjBaU2dnWkc5MEtDQm5aVzl0WlhSeWVVNXZjbTFoYkN3Z1pHbHlaV04wVEdsbmFIUXVaR2x5WldOMGFXOXVJQ2tnS1RzS0NYWmxZek1nYVhKeVlXUnBZVzVqWlNBOUlHUnZkRTVNSUNvZ1pHbHlaV04wVEdsbmFIUXVZMjlzYjNJN0NnbHlaV1pzWldOMFpXUk1hV2RvZEM1a2FYSmxZM1JFYVdabWRYTmxJQ3M5SUdseWNtRmthV0Z1WTJVZ0tpQkNVa1JHWDB4aGJXSmxjblFvSUcxaGRHVnlhV0ZzTG1ScFptWjFjMlZEYjJ4dmNpQXBPd3A5Q25admFXUWdVa1ZmU1c1a2FYSmxZM1JFYVdabWRYTmxYMHhoYldKbGNuUW9JR052Ym5OMElHbHVJSFpsWXpNZ2FYSnlZV1JwWVc1alpTd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVZCdmMybDBhVzl1TENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVUbTl5YldGc0xDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1Vm1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVVTnNaV0Z5WTI5aGRFNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z1RHRnRZbVZ5ZEUxaGRHVnlhV0ZzSUcxaGRHVnlhV0ZzTENCcGJtOTFkQ0JTWldac1pXTjBaV1JNYVdkb2RDQnlaV1pzWldOMFpXUk1hV2RvZENBcElIc0tDWEpsWm14bFkzUmxaRXhwWjJoMExtbHVaR2x5WldOMFJHbG1ablZ6WlNBclBTQnBjbkpoWkdsaGJtTmxJQ29nUWxKRVJsOU1ZVzFpWlhKMEtDQnRZWFJsY21saGJDNWthV1ptZFhObFEyOXNiM0lnS1RzS2ZRb2paR1ZtYVc1bElGSkZYMFJwY21WamRBa0pDUWxTUlY5RWFYSmxZM1JmVEdGdFltVnlkQW9qWkdWbWFXNWxJRkpGWDBsdVpHbHlaV04wUkdsbVpuVnpaUWtKVWtWZlNXNWthWEpsWTNSRWFXWm1kWE5sWDB4aGJXSmxjblJnTENCd2JTQTlJR0IxYm1sbWIzSnRJR0p2YjJ3Z2NtVmpaV2wyWlZOb1lXUnZkenNLZFc1cFptOXliU0IyWldNeklHRnRZbWxsYm5STWFXZG9kRU52Ykc5eU93b2phV1lnWkdWbWFXNWxaQ2dnVlZORlgweEpSMGhVWDFCU1QwSkZVeUFwQ2dsMWJtbG1iM0p0SUhabFl6TWdiR2xuYUhSUWNtOWlaVnNnT1NCZE93b2paVzVrYVdZS2RtVmpNeUJ6YUVkbGRFbHljbUZrYVdGdVkyVkJkQ2dnYVc0Z2RtVmpNeUJ1YjNKdFlXd3NJR2x1SUhabFl6TWdjMmhEYjJWbVptbGphV1Z1ZEhOYklEa2dYU0FwSUhzS0NXWnNiMkYwSUhnZ1BTQnViM0p0WVd3dWVDd2dlU0E5SUc1dmNtMWhiQzU1TENCNklEMGdibTl5YldGc0xubzdDZ2wyWldNeklISmxjM1ZzZENBOUlITm9RMjlsWm1acFkybGxiblJ6V3lBd0lGMGdLaUF3TGpnNE5qSXlOenNLQ1hKbGMzVnNkQ0FyUFNCemFFTnZaV1ptYVdOcFpXNTBjMXNnTVNCZElDb2dNaTR3SUNvZ01DNDFNVEUyTmpRZ0tpQjVPd29KY21WemRXeDBJQ3M5SUhOb1EyOWxabVpwWTJsbGJuUnpXeUF5SUYwZ0tpQXlMakFnS2lBd0xqVXhNVFkyTkNBcUlIbzdDZ2x5WlhOMWJIUWdLejBnYzJoRGIyVm1abWxqYVdWdWRITmJJRE1nWFNBcUlESXVNQ0FxSURBdU5URXhOalkwSUNvZ2VEc0tDWEpsYzNWc2RDQXJQU0J6YUVOdlpXWm1hV05wWlc1MGMxc2dOQ0JkSUNvZ01pNHdJQ29nTUM0ME1qa3dORE1nS2lCNElDb2dlVHNLQ1hKbGMzVnNkQ0FyUFNCemFFTnZaV1ptYVdOcFpXNTBjMXNnTlNCZElDb2dNaTR3SUNvZ01DNDBNamt3TkRNZ0tpQjVJQ29nZWpzS0NYSmxjM1ZzZENBclBTQnphRU52WldabWFXTnBaVzUwYzFzZ05pQmRJQ29nS0NBd0xqYzBNekV5TlNBcUlIb2dLaUI2SUMwZ01DNHlORGMzTURnZ0tUc0tDWEpsYzNWc2RDQXJQU0J6YUVOdlpXWm1hV05wWlc1MGMxc2dOeUJkSUNvZ01pNHdJQ29nTUM0ME1qa3dORE1nS2lCNElDb2dlanNLQ1hKbGMzVnNkQ0FyUFNCemFFTnZaV1ptYVdOcFpXNTBjMXNnT0NCZElDb2dNQzQwTWprd05ETWdLaUFvSUhnZ0tpQjRJQzBnZVNBcUlIa2dLVHNLQ1hKbGRIVnliaUJ5WlhOMWJIUTdDbjBLZG1Wak15Qm5aWFJNYVdkb2RGQnliMkpsU1hKeVlXUnBZVzVqWlNnZ1kyOXVjM1FnYVc0Z2RtVmpNeUJzYVdkb2RGQnliMkpsV3lBNUlGMHNJR052Ym5OMElHbHVJSFpsWXpNZ2JtOXliV0ZzSUNrZ2V3b0pkbVZqTXlCM2IzSnNaRTV2Y20xaGJDQTlJR2x1ZG1WeWMyVlVjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JRzV2Y20xaGJDd2dkbWxsZDAxaGRISnBlQ0FwT3dvSmRtVmpNeUJwY25KaFpHbGhibU5sSUQwZ2MyaEhaWFJKY25KaFpHbGhibU5sUVhRb0lIZHZjbXhrVG05eWJXRnNMQ0JzYVdkb2RGQnliMkpsSUNrN0NnbHlaWFIxY200Z2FYSnlZV1JwWVc1alpUc0tmUXAyWldNeklHZGxkRUZ0WW1sbGJuUk1hV2RvZEVseWNtRmthV0Z1WTJVb0lHTnZibk4wSUdsdUlIWmxZek1nWVcxaWFXVnVkRXhwWjJoMFEyOXNiM0lnS1NCN0NnbDJaV016SUdseWNtRmthV0Z1WTJVZ1BTQmhiV0pwWlc1MFRHbG5hSFJEYjJ4dmNqc0tDWEpsZEhWeWJpQnBjbkpoWkdsaGJtTmxPd3A5Q21ac2IyRjBJR2RsZEVScGMzUmhibU5sUVhSMFpXNTFZWFJwYjI0b0lHTnZibk4wSUdsdUlHWnNiMkYwSUd4cFoyaDBSR2x6ZEdGdVkyVXNJR052Ym5OMElHbHVJR1pzYjJGMElHTjFkRzltWmtScGMzUmhibU5sTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrWldOaGVVVjRjRzl1Wlc1MElDa2dld29KSTJsbUlHUmxabWx1WldRZ0tDQk1SVWRCUTFsZlRFbEhTRlJUSUNrS0NRbHBaaUFvSUdOMWRHOW1aa1JwYzNSaGJtTmxJRDRnTUM0d0lDWW1JR1JsWTJGNVJYaHdiMjVsYm5RZ1BpQXdMakFnS1NCN0Nna0pDWEpsZEhWeWJpQndiM2NvSUhOaGRIVnlZWFJsS0NBdElHeHBaMmgwUkdsemRHRnVZMlVnTHlCamRYUnZabVpFYVhOMFlXNWpaU0FySURFdU1DQXBMQ0JrWldOaGVVVjRjRzl1Wlc1MElDazdDZ2tKZlFvSkNYSmxkSFZ5YmlBeExqQTdDZ2tqWld4elpRb0pDV1pzYjJGMElHUnBjM1JoYm1ObFJtRnNiRzltWmlBOUlERXVNQ0F2SUcxaGVDZ2djRzkzS0NCc2FXZG9kRVJwYzNSaGJtTmxMQ0JrWldOaGVVVjRjRzl1Wlc1MElDa3NJREF1TURFZ0tUc0tDUWxwWmlBb0lHTjFkRzltWmtScGMzUmhibU5sSUQ0Z01DNHdJQ2tnZXdvSkNRbGthWE4wWVc1alpVWmhiR3h2Wm1ZZ0tqMGdjRzkzTWlnZ2MyRjBkWEpoZEdVb0lERXVNQ0F0SUhCdmR6UW9JR3hwWjJoMFJHbHpkR0Z1WTJVZ0x5QmpkWFJ2Wm1aRWFYTjBZVzVqWlNBcElDa2dLVHNLQ1FsOUNna0pjbVYwZFhKdUlHUnBjM1JoYm1ObFJtRnNiRzltWmpzS0NTTmxibVJwWmdwOUNtWnNiMkYwSUdkbGRGTndiM1JCZEhSbGJuVmhkR2x2YmlnZ1kyOXVjM1FnYVc0Z1pteHZZWFFnWTI5dVpVTnZjMmx1WlN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnY0dWdWRXMWljbUZEYjNOcGJtVXNJR052Ym5OMElHbHVJR1pzYjJGMElHRnVaMnhsUTI5emFXNWxJQ2tnZXdvSmNtVjBkWEp1SUhOdGIyOTBhSE4wWlhBb0lHTnZibVZEYjNOcGJtVXNJSEJsYm5WdFluSmhRMjl6YVc1bExDQmhibWRzWlVOdmMybHVaU0FwT3dwOUNpTnBaaUJPVlUxZlJFbFNYMHhKUjBoVVV5QStJREFLQ1hOMGNuVmpkQ0JFYVhKbFkzUnBiMjVoYkV4cFoyaDBJSHNLQ1FsMlpXTXpJR1JwY21WamRHbHZianNLQ1FsMlpXTXpJR052Ykc5eU93b0pmVHNLQ1hWdWFXWnZjbTBnUkdseVpXTjBhVzl1WVd4TWFXZG9kQ0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBjMXNnVGxWTlgwUkpVbDlNU1VkSVZGTWdYVHNLQ1hadmFXUWdaMlYwUkdseVpXTjBhVzl1WVd4TWFXZG9kRWx1Wm04b0lHTnZibk4wSUdsdUlFUnBjbVZqZEdsdmJtRnNUR2xuYUhRZ1pHbHlaV04wYVc5dVlXeE1hV2RvZEN3Z2IzVjBJRWx1WTJsa1pXNTBUR2xuYUhRZ2JHbG5hSFFnS1NCN0Nna0piR2xuYUhRdVkyOXNiM0lnUFNCa2FYSmxZM1JwYjI1aGJFeHBaMmgwTG1OdmJHOXlPd29KQ1d4cFoyaDBMbVJwY21WamRHbHZiaUE5SUdScGNtVmpkR2x2Ym1Gc1RHbG5hSFF1WkdseVpXTjBhVzl1T3dvSkNXeHBaMmgwTG5acGMybGliR1VnUFNCMGNuVmxPd29KZlFvalpXNWthV1lLSTJsbUlFNVZUVjlRVDBsT1ZGOU1TVWRJVkZNZ1BpQXdDZ2x6ZEhKMVkzUWdVRzlwYm5STWFXZG9kQ0I3Q2drSmRtVmpNeUJ3YjNOcGRHbHZianNLQ1FsMlpXTXpJR052Ykc5eU93b0pDV1pzYjJGMElHUnBjM1JoYm1ObE93b0pDV1pzYjJGMElHUmxZMkY1T3dvSmZUc0tDWFZ1YVdadmNtMGdVRzlwYm5STWFXZG9kQ0J3YjJsdWRFeHBaMmgwYzFzZ1RsVk5YMUJQU1U1VVgweEpSMGhVVXlCZE93b0pkbTlwWkNCblpYUlFiMmx1ZEV4cFoyaDBTVzVtYnlnZ1kyOXVjM1FnYVc0Z1VHOXBiblJNYVdkb2RDQndiMmx1ZEV4cFoyaDBMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVVHOXphWFJwYjI0c0lHOTFkQ0JKYm1OcFpHVnVkRXhwWjJoMElHeHBaMmgwSUNrZ2V3b0pDWFpsWXpNZ2JGWmxZM1J2Y2lBOUlIQnZhVzUwVEdsbmFIUXVjRzl6YVhScGIyNGdMU0JuWlc5dFpYUnllVkJ2YzJsMGFXOXVPd29KQ1d4cFoyaDBMbVJwY21WamRHbHZiaUE5SUc1dmNtMWhiR2w2WlNnZ2JGWmxZM1J2Y2lBcE93b0pDV1pzYjJGMElHeHBaMmgwUkdsemRHRnVZMlVnUFNCc1pXNW5kR2dvSUd4V1pXTjBiM0lnS1RzS0NRbHNhV2RvZEM1amIyeHZjaUE5SUhCdmFXNTBUR2xuYUhRdVkyOXNiM0k3Q2drSmJHbG5hSFF1WTI5c2IzSWdLajBnWjJWMFJHbHpkR0Z1WTJWQmRIUmxiblZoZEdsdmJpZ2diR2xuYUhSRWFYTjBZVzVqWlN3Z2NHOXBiblJNYVdkb2RDNWthWE4wWVc1alpTd2djRzlwYm5STWFXZG9kQzVrWldOaGVTQXBPd29KQ1d4cFoyaDBMblpwYzJsaWJHVWdQU0FvSUd4cFoyaDBMbU52Ykc5eUlDRTlJSFpsWXpNb0lEQXVNQ0FwSUNrN0NnbDlDaU5sYm1ScFpnb2phV1lnVGxWTlgxTlFUMVJmVEVsSFNGUlRJRDRnTUFvSmMzUnlkV04wSUZOd2IzUk1hV2RvZENCN0Nna0pkbVZqTXlCd2IzTnBkR2x2YmpzS0NRbDJaV016SUdScGNtVmpkR2x2YmpzS0NRbDJaV016SUdOdmJHOXlPd29KQ1dac2IyRjBJR1JwYzNSaGJtTmxPd29KQ1dac2IyRjBJR1JsWTJGNU93b0pDV1pzYjJGMElHTnZibVZEYjNNN0Nna0pabXh2WVhRZ2NHVnVkVzFpY21GRGIzTTdDZ2w5T3dvSmRXNXBabTl5YlNCVGNHOTBUR2xuYUhRZ2MzQnZkRXhwWjJoMGMxc2dUbFZOWDFOUVQxUmZURWxIU0ZSVElGMDdDZ2wyYjJsa0lHZGxkRk53YjNSTWFXZG9kRWx1Wm04b0lHTnZibk4wSUdsdUlGTndiM1JNYVdkb2RDQnpjRzkwVEdsbmFIUXNJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sUWIzTnBkR2x2Yml3Z2IzVjBJRWx1WTJsa1pXNTBUR2xuYUhRZ2JHbG5hSFFnS1NCN0Nna0pkbVZqTXlCc1ZtVmpkRzl5SUQwZ2MzQnZkRXhwWjJoMExuQnZjMmwwYVc5dUlDMGdaMlZ2YldWMGNubFFiM05wZEdsdmJqc0tDUWxzYVdkb2RDNWthWEpsWTNScGIyNGdQU0J1YjNKdFlXeHBlbVVvSUd4V1pXTjBiM0lnS1RzS0NRbG1iRzloZENCaGJtZHNaVU52Y3lBOUlHUnZkQ2dnYkdsbmFIUXVaR2x5WldOMGFXOXVMQ0J6Y0c5MFRHbG5hSFF1WkdseVpXTjBhVzl1SUNrN0Nna0pabXh2WVhRZ2MzQnZkRUYwZEdWdWRXRjBhVzl1SUQwZ1oyVjBVM0J2ZEVGMGRHVnVkV0YwYVc5dUtDQnpjRzkwVEdsbmFIUXVZMjl1WlVOdmN5d2djM0J2ZEV4cFoyaDBMbkJsYm5WdFluSmhRMjl6TENCaGJtZHNaVU52Y3lBcE93b0pDV2xtSUNnZ2MzQnZkRUYwZEdWdWRXRjBhVzl1SUQ0Z01DNHdJQ2tnZXdvSkNRbG1iRzloZENCc2FXZG9kRVJwYzNSaGJtTmxJRDBnYkdWdVozUm9LQ0JzVm1WamRHOXlJQ2s3Q2drSkNXeHBaMmgwTG1OdmJHOXlJRDBnYzNCdmRFeHBaMmgwTG1OdmJHOXlJQ29nYzNCdmRFRjBkR1Z1ZFdGMGFXOXVPd29KQ1Fsc2FXZG9kQzVqYjJ4dmNpQXFQU0JuWlhSRWFYTjBZVzVqWlVGMGRHVnVkV0YwYVc5dUtDQnNhV2RvZEVScGMzUmhibU5sTENCemNHOTBUR2xuYUhRdVpHbHpkR0Z1WTJVc0lITndiM1JNYVdkb2RDNWtaV05oZVNBcE93b0pDUWxzYVdkb2RDNTJhWE5wWW14bElEMGdLQ0JzYVdkb2RDNWpiMnh2Y2lBaFBTQjJaV016S0NBd0xqQWdLU0FwT3dvSkNYMGdaV3h6WlNCN0Nna0pDV3hwWjJoMExtTnZiRzl5SUQwZ2RtVmpNeWdnTUM0d0lDazdDZ2tKQ1d4cFoyaDBMblpwYzJsaWJHVWdQU0JtWVd4elpUc0tDUWw5Q2dsOUNpTmxibVJwWmdvamFXWWdUbFZOWDFKRlExUmZRVkpGUVY5TVNVZElWRk1nUGlBd0NnbHpkSEoxWTNRZ1VtVmpkRUZ5WldGTWFXZG9kQ0I3Q2drSmRtVmpNeUJqYjJ4dmNqc0tDUWwyWldNeklIQnZjMmwwYVc5dU93b0pDWFpsWXpNZ2FHRnNabGRwWkhSb093b0pDWFpsWXpNZ2FHRnNaa2hsYVdkb2REc0tDWDA3Q2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCc2RHTmZNVHNKZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnYkhSalh6STdDZ2wxYm1sbWIzSnRJRkpsWTNSQmNtVmhUR2xuYUhRZ2NtVmpkRUZ5WldGTWFXZG9kSE5iSUU1VlRWOVNSVU5VWDBGU1JVRmZURWxIU0ZSVElGMDdDaU5sYm1ScFpnb2phV1lnVGxWTlgwaEZUVWxmVEVsSFNGUlRJRDRnTUFvSmMzUnlkV04wSUVobGJXbHpjR2hsY21WTWFXZG9kQ0I3Q2drSmRtVmpNeUJrYVhKbFkzUnBiMjQ3Q2drSmRtVmpNeUJ6YTNsRGIyeHZjanNLQ1FsMlpXTXpJR2R5YjNWdVpFTnZiRzl5T3dvSmZUc0tDWFZ1YVdadmNtMGdTR1Z0YVhOd2FHVnlaVXhwWjJoMElHaGxiV2x6Y0dobGNtVk1hV2RvZEhOYklFNVZUVjlJUlUxSlgweEpSMGhVVXlCZE93b0pkbVZqTXlCblpYUklaVzFwYzNCb1pYSmxUR2xuYUhSSmNuSmhaR2xoYm1ObEtDQmpiMjV6ZENCcGJpQklaVzFwYzNCb1pYSmxUR2xuYUhRZ2FHVnRhVXhwWjJoMExDQmpiMjV6ZENCcGJpQjJaV016SUc1dmNtMWhiQ0FwSUhzS0NRbG1iRzloZENCa2IzUk9UQ0E5SUdSdmRDZ2dibTl5YldGc0xDQm9aVzFwVEdsbmFIUXVaR2x5WldOMGFXOXVJQ2s3Q2drSlpteHZZWFFnYUdWdGFVUnBabVoxYzJWWFpXbG5hSFFnUFNBd0xqVWdLaUJrYjNST1RDQXJJREF1TlRzS0NRbDJaV016SUdseWNtRmthV0Z1WTJVZ1BTQnRhWGdvSUdobGJXbE1hV2RvZEM1bmNtOTFibVJEYjJ4dmNpd2dhR1Z0YVV4cFoyaDBMbk5yZVVOdmJHOXlMQ0JvWlcxcFJHbG1ablZ6WlZkbGFXZG9kQ0FwT3dvSkNYSmxkSFZ5YmlCcGNuSmhaR2xoYm1ObE93b0pmUW9qWlc1a2FXWmdMQ0J0YlNBOUlHQWphV1prWldZZ1ZWTkZYMFZPVmsxQlVBb0pkbVZqTXlCblpYUkpRa3hKY25KaFpHbGhibU5sS0NCamIyNXpkQ0JwYmlCMlpXTXpJRzV2Y20xaGJDQXBJSHNLQ1FramFXWmtaV1lnUlU1V1RVRlFYMVJaVUVWZlExVkNSVjlWVmdvSkNRbDJaV016SUhkdmNteGtUbTl5YldGc0lEMGdhVzUyWlhKelpWUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpZ2dibTl5YldGc0xDQjJhV1YzVFdGMGNtbDRJQ2s3Q2drSkNYWmxZelFnWlc1MlRXRndRMjlzYjNJZ1BTQjBaWGgwZFhKbFEzVmlaVlZXS0NCbGJuWk5ZWEFzSUhkdmNteGtUbTl5YldGc0xDQXhMakFnS1RzS0NRa0pjbVYwZFhKdUlGQkpJQ29nWlc1MlRXRndRMjlzYjNJdWNtZGlJQ29nWlc1MlRXRndTVzUwWlc1emFYUjVPd29KQ1NObGJITmxDZ2tKQ1hKbGRIVnliaUIyWldNektDQXdMakFnS1RzS0NRa2paVzVrYVdZS0NYMEtDWFpsWXpNZ1oyVjBTVUpNVW1Ga2FXRnVZMlVvSUdOdmJuTjBJR2x1SUhabFl6TWdkbWxsZDBScGNpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCdWIzSnRZV3dzSUdOdmJuTjBJR2x1SUdac2IyRjBJSEp2ZFdkb2JtVnpjeUFwSUhzS0NRa2phV1prWldZZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlY5VlZnb0pDUWwyWldNeklISmxabXhsWTNSV1pXTWdQU0J5Wldac1pXTjBLQ0F0SUhacFpYZEVhWElzSUc1dmNtMWhiQ0FwT3dvSkNRbHlaV1pzWldOMFZtVmpJRDBnYm05eWJXRnNhWHBsS0NCdGFYZ29JSEpsWm14bFkzUldaV01zSUc1dmNtMWhiQ3dnY205MVoyaHVaWE56SUNvZ2NtOTFaMmh1WlhOektTQXBPd29KQ1FseVpXWnNaV04wVm1WaklEMGdhVzUyWlhKelpWUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpZ2djbVZtYkdWamRGWmxZeXdnZG1sbGQwMWhkSEpwZUNBcE93b0pDUWwyWldNMElHVnVkazFoY0VOdmJHOXlJRDBnZEdWNGRIVnlaVU4xWW1WVlZpZ2daVzUyVFdGd0xDQnlaV1pzWldOMFZtVmpMQ0J5YjNWbmFHNWxjM01nS1RzS0NRa0pjbVYwZFhKdUlHVnVkazFoY0VOdmJHOXlMbkpuWWlBcUlHVnVkazFoY0VsdWRHVnVjMmwwZVRzS0NRa2paV3h6WlFvSkNRbHlaWFIxY200Z2RtVmpNeWdnTUM0d0lDazdDZ2tKSTJWdVpHbG1DZ2w5Q2dramFXWmtaV1lnVlZORlgwRk9TVk5QVkZKUFVGa0tDUWwyWldNeklHZGxkRWxDVEVGdWFYTnZkSEp2Y0hsU1lXUnBZVzVqWlNnZ1kyOXVjM1FnYVc0Z2RtVmpNeUIyYVdWM1JHbHlMQ0JqYjI1emRDQnBiaUIyWldNeklHNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnY205MVoyaHVaWE56TENCamIyNXpkQ0JwYmlCMlpXTXpJR0pwZEdGdVoyVnVkQ3dnWTI5dWMzUWdhVzRnWm14dllYUWdZVzVwYzI5MGNtOXdlU0FwSUhzS0NRa0pJMmxtWkdWbUlFVk9WazFCVUY5VVdWQkZYME5WUWtWZlZWWUtDUWtKQ1habFl6TWdZbVZ1ZEU1dmNtMWhiQ0E5SUdOeWIzTnpLQ0JpYVhSaGJtZGxiblFzSUhacFpYZEVhWElnS1RzS0NRa0pDV0psYm5ST2IzSnRZV3dnUFNCdWIzSnRZV3hwZW1Vb0lHTnliM056S0NCaVpXNTBUbTl5YldGc0xDQmlhWFJoYm1kbGJuUWdLU0FwT3dvSkNRa0pZbVZ1ZEU1dmNtMWhiQ0E5SUc1dmNtMWhiR2w2WlNnZ2JXbDRLQ0JpWlc1MFRtOXliV0ZzTENCdWIzSnRZV3dzSUhCdmR6SW9JSEJ2ZHpJb0lERXVNQ0F0SUdGdWFYTnZkSEp2Y0hrZ0tpQW9JREV1TUNBdElISnZkV2RvYm1WemN5QXBJQ2tnS1NBcElDazdDZ2tKQ1FseVpYUjFjbTRnWjJWMFNVSk1VbUZrYVdGdVkyVW9JSFpwWlhkRWFYSXNJR0psYm5ST2IzSnRZV3dzSUhKdmRXZG9ibVZ6Y3lBcE93b0pDUWtqWld4elpRb0pDUWtKY21WMGRYSnVJSFpsWXpNb0lEQXVNQ0FwT3dvSkNRa2paVzVrYVdZS0NRbDlDZ2tqWlc1a2FXWUtJMlZ1WkdsbVlDd2daMjBnUFNCZ1ZHOXZiazFoZEdWeWFXRnNJRzFoZEdWeWFXRnNPd3B0WVhSbGNtbGhiQzVrYVdabWRYTmxRMjlzYjNJZ1BTQmthV1ptZFhObFEyOXNiM0l1Y21kaU8yQXNJRjl0SUQwZ1lIWmhjbmxwYm1jZ2RtVmpNeUIyVm1sbGQxQnZjMmwwYVc5dU93cHpkSEoxWTNRZ1ZHOXZiazFoZEdWeWFXRnNJSHNLQ1habFl6TWdaR2xtWm5WelpVTnZiRzl5T3dwOU93cDJiMmxrSUZKRlgwUnBjbVZqZEY5VWIyOXVLQ0JqYjI1emRDQnBiaUJKYm1OcFpHVnVkRXhwWjJoMElHUnBjbVZqZEV4cFoyaDBMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVVHOXphWFJwYjI0c0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxPYjNKdFlXd3NJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sV2FXVjNSR2x5TENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVRMnhsWVhKamIyRjBUbTl5YldGc0xDQmpiMjV6ZENCcGJpQlViMjl1VFdGMFpYSnBZV3dnYldGMFpYSnBZV3dzSUdsdWIzVjBJRkpsWm14bFkzUmxaRXhwWjJoMElISmxabXhsWTNSbFpFeHBaMmgwSUNrZ2V3b0pkbVZqTXlCcGNuSmhaR2xoYm1ObElEMGdaMlYwUjNKaFpHbGxiblJKY25KaFpHbGhibU5sS0NCblpXOXRaWFJ5ZVU1dmNtMWhiQ3dnWkdseVpXTjBUR2xuYUhRdVpHbHlaV04wYVc5dUlDa2dLaUJrYVhKbFkzUk1hV2RvZEM1amIyeHZjanNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRFUnBabVoxYzJVZ0t6MGdhWEp5WVdScFlXNWpaU0FxSUVKU1JFWmZUR0Z0WW1WeWRDZ2diV0YwWlhKcFlXd3VaR2xtWm5WelpVTnZiRzl5SUNrN0NuMEtkbTlwWkNCU1JWOUpibVJwY21WamRFUnBabVoxYzJWZlZHOXZiaWdnWTI5dWMzUWdhVzRnZG1Wak15QnBjbkpoWkdsaGJtTmxMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVVHOXphWFJwYjI0c0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxPYjNKdFlXd3NJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sV2FXVjNSR2x5TENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVRMnhsWVhKamIyRjBUbTl5YldGc0xDQmpiMjV6ZENCcGJpQlViMjl1VFdGMFpYSnBZV3dnYldGMFpYSnBZV3dzSUdsdWIzVjBJRkpsWm14bFkzUmxaRXhwWjJoMElISmxabXhsWTNSbFpFeHBaMmgwSUNrZ2V3b0pjbVZtYkdWamRHVmtUR2xuYUhRdWFXNWthWEpsWTNSRWFXWm1kWE5sSUNzOUlHbHljbUZrYVdGdVkyVWdLaUJDVWtSR1gweGhiV0psY25Rb0lHMWhkR1Z5YVdGc0xtUnBabVoxYzJWRGIyeHZjaUFwT3dwOUNpTmtaV1pwYm1VZ1VrVmZSR2x5WldOMENRa0pDVkpGWDBScGNtVmpkRjlVYjI5dUNpTmtaV1pwYm1VZ1VrVmZTVzVrYVhKbFkzUkVhV1ptZFhObENRbFNSVjlKYm1ScGNtVmpkRVJwWm1aMWMyVmZWRzl2Ym1Bc0lIaHRJRDBnWUVKc2FXNXVVR2h2Ym1kTllYUmxjbWxoYkNCdFlYUmxjbWxoYkRzS2JXRjBaWEpwWVd3dVpHbG1ablZ6WlVOdmJHOXlJRDBnWkdsbVpuVnpaVU52Ykc5eUxuSm5ZanNLYldGMFpYSnBZV3d1YzNCbFkzVnNZWEpEYjJ4dmNpQTlJSE53WldOMWJHRnlPd3B0WVhSbGNtbGhiQzV6Y0dWamRXeGhjbE5vYVc1cGJtVnpjeUE5SUhOb2FXNXBibVZ6Y3pzS2JXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKVGRISmxibWQwYUNBOUlITndaV04xYkdGeVUzUnlaVzVuZEdnN1lDd2dkbTBnUFNCZ2RtRnllV2x1WnlCMlpXTXpJSFpXYVdWM1VHOXphWFJwYjI0N0NuTjBjblZqZENCQ2JHbHVibEJvYjI1blRXRjBaWEpwWVd3Z2V3b0pkbVZqTXlCa2FXWm1kWE5sUTI5c2IzSTdDZ2wyWldNeklITndaV04xYkdGeVEyOXNiM0k3Q2dsbWJHOWhkQ0J6Y0dWamRXeGhjbE5vYVc1cGJtVnpjenNLQ1dac2IyRjBJSE53WldOMWJHRnlVM1J5Wlc1bmRHZzdDbjA3Q25admFXUWdVa1ZmUkdseVpXTjBYMEpzYVc1dVVHaHZibWNvSUdOdmJuTjBJR2x1SUVsdVkybGtaVzUwVEdsbmFIUWdaR2x5WldOMFRHbG5hSFFzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubFFiM05wZEdsdmJpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVU1dmNtMWhiQ3dnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxEYkdWaGNtTnZZWFJPYjNKdFlXd3NJR052Ym5OMElHbHVJRUpzYVc1dVVHaHZibWROWVhSbGNtbGhiQ0J0WVhSbGNtbGhiQ3dnYVc1dmRYUWdVbVZtYkdWamRHVmtUR2xuYUhRZ2NtVm1iR1ZqZEdWa1RHbG5hSFFnS1NCN0NnbG1iRzloZENCa2IzUk9UQ0E5SUhOaGRIVnlZWFJsS0NCa2IzUW9JR2RsYjIxbGRISjVUbTl5YldGc0xDQmthWEpsWTNSTWFXZG9kQzVrYVhKbFkzUnBiMjRnS1NBcE93b0pkbVZqTXlCcGNuSmhaR2xoYm1ObElEMGdaRzkwVGt3Z0tpQmthWEpsWTNSTWFXZG9kQzVqYjJ4dmNqc0tDWEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEVScFptWjFjMlVnS3owZ2FYSnlZV1JwWVc1alpTQXFJRUpTUkVaZlRHRnRZbVZ5ZENnZ2JXRjBaWEpwWVd3dVpHbG1ablZ6WlVOdmJHOXlJQ2s3Q2dseVpXWnNaV04wWldSTWFXZG9kQzVrYVhKbFkzUlRjR1ZqZFd4aGNpQXJQU0JwY25KaFpHbGhibU5sSUNvZ1FsSkVSbDlDYkdsdWJsQm9iMjVuS0NCa2FYSmxZM1JNYVdkb2RDNWthWEpsWTNScGIyNHNJR2RsYjIxbGRISjVWbWxsZDBScGNpd2daMlZ2YldWMGNubE9iM0p0WVd3c0lHMWhkR1Z5YVdGc0xuTndaV04xYkdGeVEyOXNiM0lzSUcxaGRHVnlhV0ZzTG5Od1pXTjFiR0Z5VTJocGJtbHVaWE56SUNrZ0tpQnRZWFJsY21saGJDNXpjR1ZqZFd4aGNsTjBjbVZ1WjNSb093cDlDblp2YVdRZ1VrVmZTVzVrYVhKbFkzUkVhV1ptZFhObFgwSnNhVzV1VUdodmJtY29JR052Ym5OMElHbHVJSFpsWXpNZ2FYSnlZV1JwWVc1alpTd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVZCdmMybDBhVzl1TENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVUbTl5YldGc0xDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1Vm1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVVTnNaV0Z5WTI5aGRFNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z1FteHBibTVRYUc5dVowMWhkR1Z5YVdGc0lHMWhkR1Z5YVdGc0xDQnBibTkxZENCU1pXWnNaV04wWldSTWFXZG9kQ0J5Wldac1pXTjBaV1JNYVdkb2RDQXBJSHNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpTQXJQU0JwY25KaFpHbGhibU5sSUNvZ1FsSkVSbDlNWVcxaVpYSjBLQ0J0WVhSbGNtbGhiQzVrYVdabWRYTmxRMjlzYjNJZ0tUc0tmUW9qWkdWbWFXNWxJRkpGWDBScGNtVmpkQWtKQ1FsU1JWOUVhWEpsWTNSZlFteHBibTVRYUc5dVp3b2paR1ZtYVc1bElGSkZYMGx1WkdseVpXTjBSR2xtWm5WelpRa0pVa1ZmU1c1a2FYSmxZM1JFYVdabWRYTmxYMEpzYVc1dVVHaHZibWRnTENCNWJTQTlJR0JRYUhsemFXTmhiRTFoZEdWeWFXRnNJRzFoZEdWeWFXRnNPd3B0WVhSbGNtbGhiQzVrYVdabWRYTmxRMjlzYjNJZ1BTQmthV1ptZFhObFEyOXNiM0l1Y21kaUlDb2dLQ0F4TGpBZ0xTQnRaWFJoYkc1bGMzTkdZV04wYjNJZ0tUc0tkbVZqTXlCa2VIa2dQU0J0WVhnb0lHRmljeWdnWkVaa2VDZ2dibTl1VUdWeWRIVnlZbVZrVG05eWJXRnNJQ2tnS1N3Z1lXSnpLQ0JrUm1SNUtDQnViMjVRWlhKMGRYSmlaV1JPYjNKdFlXd2dLU0FwSUNrN0NtWnNiMkYwSUdkbGIyMWxkSEo1VW05MVoyaHVaWE56SUQwZ2JXRjRLQ0J0WVhnb0lHUjRlUzU0TENCa2VIa3VlU0FwTENCa2VIa3VlaUFwT3dwdFlYUmxjbWxoYkM1eWIzVm5hRzVsYzNNZ1BTQnRZWGdvSUhKdmRXZG9ibVZ6YzBaaFkzUnZjaXdnTUM0d05USTFJQ2s3YldGMFpYSnBZV3d1Y205MVoyaHVaWE56SUNzOUlHZGxiMjFsZEhKNVVtOTFaMmh1WlhOek93cHRZWFJsY21saGJDNXliM1ZuYUc1bGMzTWdQU0J0YVc0b0lHMWhkR1Z5YVdGc0xuSnZkV2RvYm1WemN5d2dNUzR3SUNrN0NpTnBabVJsWmlCSlQxSUtDVzFoZEdWeWFXRnNMbWx2Y2lBOUlHbHZjanNLQ1NOcFptUmxaaUJWVTBWZlUxQkZRMVZNUVZJS0NRbG1iRzloZENCemNHVmpkV3hoY2tsdWRHVnVjMmwwZVVaaFkzUnZjaUE5SUhOd1pXTjFiR0Z5U1c1MFpXNXphWFI1T3dvSkNYWmxZek1nYzNCbFkzVnNZWEpEYjJ4dmNrWmhZM1J2Y2lBOUlITndaV04xYkdGeVEyOXNiM0k3Q2drSkkybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVsOURUMHhQVWsxQlVBb0pDUWx6Y0dWamRXeGhja052Ykc5eVJtRmpkRzl5SUNvOUlIUmxlSFIxY21VeVJDZ2djM0JsWTNWc1lYSkRiMnh2Y2sxaGNDd2dkbE53WldOMWJHRnlRMjlzYjNKTllYQlZkaUFwTG5Kbllqc0tDUWtqWlc1a2FXWUtDUWtqYVdaa1pXWWdWVk5GWDFOUVJVTlZURUZTWDBsT1ZFVk9VMGxVV1UxQlVBb0pDUWx6Y0dWamRXeGhja2x1ZEdWdWMybDBlVVpoWTNSdmNpQXFQU0IwWlhoMGRYSmxNa1FvSUhOd1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0xDQjJVM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEJWZGlBcExtRTdDZ2tKSTJWdVpHbG1DZ2tKYldGMFpYSnBZV3d1YzNCbFkzVnNZWEpHT1RBZ1BTQnRhWGdvSUhOd1pXTjFiR0Z5U1c1MFpXNXphWFI1Um1GamRHOXlMQ0F4TGpBc0lHMWxkR0ZzYm1WemMwWmhZM1J2Y2lBcE93b0pJMlZzYzJVS0NRbG1iRzloZENCemNHVmpkV3hoY2tsdWRHVnVjMmwwZVVaaFkzUnZjaUE5SURFdU1Ec0tDUWwyWldNeklITndaV04xYkdGeVEyOXNiM0pHWVdOMGIzSWdQU0IyWldNektDQXhMakFnS1RzS0NRbHRZWFJsY21saGJDNXpjR1ZqZFd4aGNrWTVNQ0E5SURFdU1Ec0tDU05sYm1ScFpnb0piV0YwWlhKcFlXd3VjM0JsWTNWc1lYSkRiMnh2Y2lBOUlHMXBlQ2dnYldsdUtDQndiM2N5S0NBb0lHMWhkR1Z5YVdGc0xtbHZjaUF0SURFdU1DQXBJQzhnS0NCdFlYUmxjbWxoYkM1cGIzSWdLeUF4TGpBZ0tTQXBJQ29nYzNCbFkzVnNZWEpEYjJ4dmNrWmhZM1J2Y2l3Z2RtVmpNeWdnTVM0d0lDa2dLU0FxSUhOd1pXTjFiR0Z5U1c1MFpXNXphWFI1Um1GamRHOXlMQ0JrYVdabWRYTmxRMjlzYjNJdWNtZGlMQ0J0WlhSaGJHNWxjM05HWVdOMGIzSWdLVHNLSTJWc2MyVUtDVzFoZEdWeWFXRnNMbk53WldOMWJHRnlRMjlzYjNJZ1BTQnRhWGdvSUhabFl6TW9JREF1TURRZ0tTd2daR2xtWm5WelpVTnZiRzl5TG5Kbllpd2diV1YwWVd4dVpYTnpSbUZqZEc5eUlDazdDZ2x0WVhSbGNtbGhiQzV6Y0dWamRXeGhja1k1TUNBOUlERXVNRHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUTB4RlFWSkRUMEZVQ2dsdFlYUmxjbWxoYkM1amJHVmhjbU52WVhRZ1BTQmpiR1ZoY21OdllYUTdDZ2x0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nUFNCamJHVmhjbU52WVhSU2IzVm5hRzVsYzNNN0NnbHRZWFJsY21saGJDNWpiR1ZoY21OdllYUkdNQ0E5SUhabFl6TW9JREF1TURRZ0tUc0tDVzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRVk1TUNBOUlERXVNRHNLQ1NOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVVRVRlFDZ2tKYldGMFpYSnBZV3d1WTJ4bFlYSmpiMkYwSUNvOUlIUmxlSFIxY21VeVJDZ2dZMnhsWVhKamIyRjBUV0Z3TENCMlEyeGxZWEpqYjJGMFRXRndWWFlnS1M1NE93b0pJMlZ1WkdsbUNna2phV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWRjlTVDFWSFNFNUZVMU5OUVZBS0NRbHRZWFJsY21saGJDNWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTWdLajBnZEdWNGRIVnlaVEpFS0NCamJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQXNJSFpEYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhCVmRpQXBMbms3Q2dralpXNWthV1lLQ1cxaGRHVnlhV0ZzTG1Oc1pXRnlZMjloZENBOUlITmhkSFZ5WVhSbEtDQnRZWFJsY21saGJDNWpiR1ZoY21OdllYUWdLVHNKYldGMFpYSnBZV3d1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56SUQwZ2JXRjRLQ0J0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01zSURBdU1EVXlOU0FwT3dvSmJXRjBaWEpwWVd3dVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOeklDczlJR2RsYjIxbGRISjVVbTkxWjJodVpYTnpPd29KYldGMFpYSnBZV3d1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56SUQwZ2JXbHVLQ0J0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01zSURFdU1DQXBPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlKVWtsRVJWTkRSVTVEUlFvSmJXRjBaWEpwWVd3dWFYSnBaR1Z6WTJWdVkyVWdQU0JwY21sa1pYTmpaVzVqWlRzS0NXMWhkR1Z5YVdGc0xtbHlhV1JsYzJObGJtTmxTVTlTSUQwZ2FYSnBaR1Z6WTJWdVkyVkpUMUk3Q2dramFXWmtaV1lnVlZORlgwbFNTVVJGVTBORlRrTkZUVUZRQ2drSmJXRjBaWEpwWVd3dWFYSnBaR1Z6WTJWdVkyVWdLajBnZEdWNGRIVnlaVEpFS0NCcGNtbGtaWE5qWlc1alpVMWhjQ3dnZGtseWFXUmxjMk5sYm1ObFRXRndWWFlnS1M1eU93b0pJMlZ1WkdsbUNna2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GWDFSSVNVTkxUa1ZUVTAxQlVBb0pDVzFoZEdWeWFXRnNMbWx5YVdSbGMyTmxibU5sVkdocFkydHVaWE56SUQwZ0tHbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV0Y0YVcxMWJTQXRJR2x5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdsdWFXMTFiU2tnS2lCMFpYaDBkWEpsTWtRb0lHbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV0Z3TENCMlNYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEJWZGlBcExtY2dLeUJwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxcGJtbHRkVzA3Q2dralpXeHpaUW9KQ1cxaGRHVnlhV0ZzTG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOeklEMGdhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhocGJYVnRPd29KSTJWdVpHbG1DaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMU5JUlVWT0NnbHRZWFJsY21saGJDNXphR1ZsYmtOdmJHOXlJRDBnYzJobFpXNURiMnh2Y2pzS0NTTnBabVJsWmlCVlUwVmZVMGhGUlU1ZlEwOU1UMUpOUVZBS0NRbHRZWFJsY21saGJDNXphR1ZsYmtOdmJHOXlJQ285SUhSbGVIUjFjbVV5UkNnZ2MyaGxaVzVEYjJ4dmNrMWhjQ3dnZGxOb1pXVnVRMjlzYjNKTllYQlZkaUFwTG5Kbllqc0tDU05sYm1ScFpnb0piV0YwWlhKcFlXd3VjMmhsWlc1U2IzVm5hRzVsYzNNZ1BTQmpiR0Z0Y0NnZ2MyaGxaVzVTYjNWbmFHNWxjM01zSURBdU1EY3NJREV1TUNBcE93b0pJMmxtWkdWbUlGVlRSVjlUU0VWRlRsOVNUMVZIU0U1RlUxTk5RVkFLQ1FsdFlYUmxjbWxoYkM1emFHVmxibEp2ZFdkb2JtVnpjeUFxUFNCMFpYaDBkWEpsTWtRb0lITm9aV1Z1VW05MVoyaHVaWE56VFdGd0xDQjJVMmhsWlc1U2IzVm5hRzVsYzNOTllYQlZkaUFwTG1FN0Nna2paVzVrYVdZS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVNUpVMDlVVWs5UVdRb0pJMmxtWkdWbUlGVlRSVjlCVGtsVFQxUlNUMUJaVFVGUUNna0piV0YwTWlCaGJtbHpiM1J5YjNCNVRXRjBJRDBnYldGME1pZ2dZVzVwYzI5MGNtOXdlVlpsWTNSdmNpNTRMQ0JoYm1semIzUnliM0I1Vm1WamRHOXlMbmtzSUMwZ1lXNXBjMjkwY205d2VWWmxZM1J2Y2k1NUxDQmhibWx6YjNSeWIzQjVWbVZqZEc5eUxuZ2dLVHNLQ1FsMlpXTXpJR0Z1YVhOdmRISnZjSGxRYjJ4aGNpQTlJSFJsZUhSMWNtVXlSQ2dnWVc1cGMyOTBjbTl3ZVUxaGNDd2dka0Z1YVhOdmRISnZjSGxOWVhCVmRpQXBMbkpuWWpzS0NRbDJaV015SUdGdWFYTnZkSEp2Y0hsV0lEMGdZVzVwYzI5MGNtOXdlVTFoZENBcUlHNXZjbTFoYkdsNlpTZ2dNaTR3SUNvZ1lXNXBjMjkwY205d2VWQnZiR0Z5TG5KbklDMGdkbVZqTWlnZ01TNHdJQ2tnS1NBcUlHRnVhWE52ZEhKdmNIbFFiMnhoY2k1aU93b0pJMlZzYzJVS0NRbDJaV015SUdGdWFYTnZkSEp2Y0hsV0lEMGdZVzVwYzI5MGNtOXdlVlpsWTNSdmNqc0tDU05sYm1ScFpnb0piV0YwWlhKcFlXd3VZVzVwYzI5MGNtOXdlU0E5SUd4bGJtZDBhQ2dnWVc1cGMyOTBjbTl3ZVZZZ0tUc0tDV0Z1YVhOdmRISnZjSGxXSUM4OUlHMWhkR1Z5YVdGc0xtRnVhWE52ZEhKdmNIazdDZ2x0WVhSbGNtbGhiQzVoYm1semIzUnliM0I1SUQwZ2MyRjBkWEpoZEdVb0lHMWhkR1Z5YVdGc0xtRnVhWE52ZEhKdmNIa2dLVHNLQ1cxaGRHVnlhV0ZzTG1Gc2NHaGhWQ0E5SUcxcGVDZ2djRzkzTWlnZ2JXRjBaWEpwWVd3dWNtOTFaMmh1WlhOeklDa3NJREV1TUN3Z2NHOTNNaWdnYldGMFpYSnBZV3d1WVc1cGMyOTBjbTl3ZVNBcElDazdDZ2x0WVhSbGNtbGhiQzVoYm1semIzUnliM0I1VkNBOUlIUmlibHNnTUNCZElDb2dZVzVwYzI5MGNtOXdlVll1ZUNBdElIUmlibHNnTVNCZElDb2dZVzVwYzI5MGNtOXdlVll1ZVRzS0NXMWhkR1Z5YVdGc0xtRnVhWE52ZEhKdmNIbENJRDBnZEdKdVd5QXhJRjBnS2lCaGJtbHpiM1J5YjNCNVZpNTRJQ3NnZEdKdVd5QXdJRjBnS2lCaGJtbHpiM1J5YjNCNVZpNTVPd29qWlc1a2FXWmdMQ0JOYlNBOUlHQnpkSEoxWTNRZ1VHaDVjMmxqWVd4TllYUmxjbWxoYkNCN0NnbDJaV016SUdScFptWjFjMlZEYjJ4dmNqc0tDV1pzYjJGMElISnZkV2RvYm1WemN6c0tDWFpsWXpNZ2MzQmxZM1ZzWVhKRGIyeHZjanNLQ1dac2IyRjBJSE53WldOMWJHRnlSamt3T3dvSkkybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUUtDUWxtYkc5aGRDQmpiR1ZoY21OdllYUTdDZ2tKWm14dllYUWdZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpPd29KQ1habFl6TWdZMnhsWVhKamIyRjBSakE3Q2drSlpteHZZWFFnWTJ4bFlYSmpiMkYwUmprd093b0pJMlZ1WkdsbUNna2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GQ2drSlpteHZZWFFnYVhKcFpHVnpZMlZ1WTJVN0Nna0pabXh2WVhRZ2FYSnBaR1Z6WTJWdVkyVkpUMUk3Q2drSlpteHZZWFFnYVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNNN0Nna0pkbVZqTXlCcGNtbGtaWE5qWlc1alpVWnlaWE51Wld3N0Nna0pkbVZqTXlCcGNtbGtaWE5qWlc1alpVWXdPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDFOSVJVVk9DZ2tKZG1Wak15QnphR1ZsYmtOdmJHOXlPd29KQ1dac2IyRjBJSE5vWldWdVVtOTFaMmh1WlhOek93b0pJMlZ1WkdsbUNna2phV1prWldZZ1NVOVNDZ2tKWm14dllYUWdhVzl5T3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnVlZORlgxUlNRVTVUVFVsVFUwbFBUZ29KQ1dac2IyRjBJSFJ5WVc1emJXbHpjMmx2YmpzS0NRbG1iRzloZENCMGNtRnVjMjFwYzNOcGIyNUJiSEJvWVRzS0NRbG1iRzloZENCMGFHbGphMjVsYzNNN0Nna0pabXh2WVhRZ1lYUjBaVzUxWVhScGIyNUVhWE4wWVc1alpUc0tDUWwyWldNeklHRjBkR1Z1ZFdGMGFXOXVRMjlzYjNJN0Nna2paVzVrYVdZS0NTTnBabVJsWmlCVlUwVmZRVTVKVTA5VVVrOVFXUW9KQ1dac2IyRjBJR0Z1YVhOdmRISnZjSGs3Q2drSlpteHZZWFFnWVd4d2FHRlVPd29KQ1habFl6TWdZVzVwYzI5MGNtOXdlVlE3Q2drSmRtVmpNeUJoYm1semIzUnliM0I1UWpzS0NTTmxibVJwWmdwOU93cDJaV016SUdOc1pXRnlZMjloZEZOd1pXTjFiR0Z5SUQwZ2RtVmpNeWdnTUM0d0lDazdDblpsWXpNZ2MyaGxaVzVUY0dWamRXeGhjaUE5SUhabFl6TW9JREF1TUNBcE93cDJaV016SUZOamFHeHBZMnRmZEc5ZlJqQW9JR052Ym5OMElHbHVJSFpsWXpNZ1ppd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1pqa3dMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmtiM1JXU0NBcElIc0tJQ0FnSUdac2IyRjBJSGdnUFNCamJHRnRjQ2dnTVM0d0lDMGdaRzkwVmtnc0lEQXVNQ3dnTVM0d0lDazdDaUFnSUNCbWJHOWhkQ0I0TWlBOUlIZ2dLaUI0T3dvZ0lDQWdabXh2WVhRZ2VEVWdQU0JqYkdGdGNDZ2dlQ0FxSUhneUlDb2dlRElzSURBdU1Dd2dNQzQ1T1RrNUlDazdDaUFnSUNCeVpYUjFjbTRnS0NCbUlDMGdkbVZqTXlnZ1pqa3dJQ2tnS2lCNE5TQXBJQzhnS0NBeExqQWdMU0I0TlNBcE93cDlDbVpzYjJGMElGWmZSMGRZWDFOdGFYUm9RMjl5Y21Wc1lYUmxaQ2dnWTI5dWMzUWdhVzRnWm14dllYUWdZV3h3YUdFc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRFNU1MQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmtiM1JPVmlBcElIc0tDV1pzYjJGMElHRXlJRDBnY0c5M01pZ2dZV3h3YUdFZ0tUc0tDV1pzYjJGMElHZDJJRDBnWkc5MFRrd2dLaUJ6Y1hKMEtDQmhNaUFySUNnZ01TNHdJQzBnWVRJZ0tTQXFJSEJ2ZHpJb0lHUnZkRTVXSUNrZ0tUc0tDV1pzYjJGMElHZHNJRDBnWkc5MFRsWWdLaUJ6Y1hKMEtDQmhNaUFySUNnZ01TNHdJQzBnWVRJZ0tTQXFJSEJ2ZHpJb0lHUnZkRTVNSUNrZ0tUc0tDWEpsZEhWeWJpQXdMalVnTHlCdFlYZ29JR2QySUNzZ1oyd3NJRVZRVTBsTVQwNGdLVHNLZlFwbWJHOWhkQ0JFWDBkSFdDZ2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1lXeHdhR0VzSUdOdmJuTjBJR2x1SUdac2IyRjBJR1J2ZEU1SUlDa2dld29KWm14dllYUWdZVElnUFNCd2IzY3lLQ0JoYkhCb1lTQXBPd29KWm14dllYUWdaR1Z1YjIwZ1BTQndiM2N5S0NCa2IzUk9TQ0FwSUNvZ0tDQmhNaUF0SURFdU1DQXBJQ3NnTVM0d093b0pjbVYwZFhKdUlGSkZRMGxRVWs5RFFVeGZVRWtnS2lCaE1pQXZJSEJ2ZHpJb0lHUmxibTl0SUNrN0NuMEtJMmxtWkdWbUlGVlRSVjlCVGtsVFQxUlNUMUJaQ2dsbWJHOWhkQ0JXWDBkSFdGOVRiV2wwYUVOdmNuSmxiR0YwWldSZlFXNXBjMjkwY205d2FXTW9JR052Ym5OMElHbHVJR1pzYjJGMElHRnNjR2hoVkN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWVd4d2FHRkNMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmtiM1JVVml3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWkc5MFFsWXNJR052Ym5OMElHbHVJR1pzYjJGMElHUnZkRlJNTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrYjNSQ1RDd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1pHOTBUbFlzSUdOdmJuTjBJR2x1SUdac2IyRjBJR1J2ZEU1TUlDa2dld29KQ1dac2IyRjBJR2QySUQwZ1pHOTBUa3dnS2lCc1pXNW5kR2dvSUhabFl6TW9JR0ZzY0doaFZDQXFJR1J2ZEZSV0xDQmhiSEJvWVVJZ0tpQmtiM1JDVml3Z1pHOTBUbFlnS1NBcE93b0pDV1pzYjJGMElHZHNJRDBnWkc5MFRsWWdLaUJzWlc1bmRHZ29JSFpsWXpNb0lHRnNjR2hoVkNBcUlHUnZkRlJNTENCaGJIQm9ZVUlnS2lCa2IzUkNUQ3dnWkc5MFRrd2dLU0FwT3dvSkNXWnNiMkYwSUhZZ1BTQXdMalVnTHlBb0lHZDJJQ3NnWjJ3Z0tUc0tDUWx5WlhSMWNtNGdjMkYwZFhKaGRHVW9kaWs3Q2dsOUNnbG1iRzloZENCRVgwZEhXRjlCYm1semIzUnliM0JwWXlnZ1kyOXVjM1FnYVc0Z1pteHZZWFFnWVd4d2FHRlVMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmhiSEJvWVVJc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRFNUlMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmtiM1JVU0N3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWkc5MFFrZ2dLU0I3Q2drSlpteHZZWFFnWVRJZ1BTQmhiSEJvWVZRZ0tpQmhiSEJvWVVJN0Nna0phR2xuYUhBZ2RtVmpNeUIySUQwZ2RtVmpNeWdnWVd4d2FHRkNJQ29nWkc5MFZFZ3NJR0ZzY0doaFZDQXFJR1J2ZEVKSUxDQmhNaUFxSUdSdmRFNUlJQ2s3Q2drSmFHbG5hSEFnWm14dllYUWdkaklnUFNCa2IzUW9JSFlzSUhZZ0tUc0tDUWxtYkc5aGRDQjNNaUE5SUdFeUlDOGdkakk3Q2drSmNtVjBkWEp1SUZKRlEwbFFVazlEUVV4ZlVFa2dLaUJoTWlBcUlIQnZkeklnS0NCM01pQXBPd29KZlFvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5RFRFVkJVa05QUVZRS0NYWmxZek1nUWxKRVJsOUhSMWhmUTJ4bFlYSmpiMkYwS0NCamIyNXpkQ0JwYmlCMlpXTXpJR3hwWjJoMFJHbHlMQ0JqYjI1emRDQnBiaUIyWldNeklIWnBaWGRFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nYm05eWJXRnNMQ0JqYjI1emRDQnBiaUJRYUhsemFXTmhiRTFoZEdWeWFXRnNJRzFoZEdWeWFXRnNLU0I3Q2drSmRtVmpNeUJtTUNBOUlHMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRFWXdPd29KQ1dac2IyRjBJR1k1TUNBOUlHMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRFWTVNRHNLQ1FsbWJHOWhkQ0J5YjNWbmFHNWxjM01nUFNCdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNN0Nna0pabXh2WVhRZ1lXeHdhR0VnUFNCd2IzY3lLQ0J5YjNWbmFHNWxjM01nS1RzS0NRbDJaV016SUdoaGJHWkVhWElnUFNCdWIzSnRZV3hwZW1Vb0lHeHBaMmgwUkdseUlDc2dkbWxsZDBScGNpQXBPd29KQ1dac2IyRjBJR1J2ZEU1TUlEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ2JtOXliV0ZzTENCc2FXZG9kRVJwY2lBcElDazdDZ2tKWm14dllYUWdaRzkwVGxZZ1BTQnpZWFIxY21GMFpTZ2daRzkwS0NCdWIzSnRZV3dzSUhacFpYZEVhWElnS1NBcE93b0pDV1pzYjJGMElHUnZkRTVJSUQwZ2MyRjBkWEpoZEdVb0lHUnZkQ2dnYm05eWJXRnNMQ0JvWVd4bVJHbHlJQ2tnS1RzS0NRbG1iRzloZENCa2IzUldTQ0E5SUhOaGRIVnlZWFJsS0NCa2IzUW9JSFpwWlhkRWFYSXNJR2hoYkdaRWFYSWdLU0FwT3dvSkNYWmxZek1nUmlBOUlFWmZVMk5vYkdsamF5Z2daakFzSUdZNU1Dd2daRzkwVmtnZ0tUc0tDUWxtYkc5aGRDQldJRDBnVmw5SFIxaGZVMjFwZEdoRGIzSnlaV3hoZEdWa0tDQmhiSEJvWVN3Z1pHOTBUa3dzSUdSdmRFNVdJQ2s3Q2drSlpteHZZWFFnUkNBOUlFUmZSMGRZS0NCaGJIQm9ZU3dnWkc5MFRrZ2dLVHNLQ1FseVpYUjFjbTRnUmlBcUlDZ2dWaUFxSUVRZ0tUc0tDWDBLSTJWdVpHbG1DblpsWXpNZ1FsSkVSbDlIUjFnb0lHTnZibk4wSUdsdUlIWmxZek1nYkdsbmFIUkVhWElzSUdOdmJuTjBJR2x1SUhabFl6TWdkbWxsZDBScGNpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCdWIzSnRZV3dzSUdOdmJuTjBJR2x1SUZCb2VYTnBZMkZzVFdGMFpYSnBZV3dnYldGMFpYSnBZV3dnS1NCN0NnbDJaV016SUdZd0lEMGdiV0YwWlhKcFlXd3VjM0JsWTNWc1lYSkRiMnh2Y2pzS0NXWnNiMkYwSUdZNU1DQTlJRzFoZEdWeWFXRnNMbk53WldOMWJHRnlSamt3T3dvSlpteHZZWFFnY205MVoyaHVaWE56SUQwZ2JXRjBaWEpwWVd3dWNtOTFaMmh1WlhOek93b0pabXh2WVhRZ1lXeHdhR0VnUFNCd2IzY3lLQ0J5YjNWbmFHNWxjM01nS1RzS0NYWmxZek1nYUdGc1prUnBjaUE5SUc1dmNtMWhiR2w2WlNnZ2JHbG5hSFJFYVhJZ0t5QjJhV1YzUkdseUlDazdDZ2xtYkc5aGRDQmtiM1JPVENBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUc1dmNtMWhiQ3dnYkdsbmFIUkVhWElnS1NBcE93b0pabXh2WVhRZ1pHOTBUbFlnUFNCellYUjFjbUYwWlNnZ1pHOTBLQ0J1YjNKdFlXd3NJSFpwWlhkRWFYSWdLU0FwT3dvSlpteHZZWFFnWkc5MFRrZ2dQU0J6WVhSMWNtRjBaU2dnWkc5MEtDQnViM0p0WVd3c0lHaGhiR1pFYVhJZ0tTQXBPd29KWm14dllYUWdaRzkwVmtnZ1BTQnpZWFIxY21GMFpTZ2daRzkwS0NCMmFXVjNSR2x5TENCb1lXeG1SR2x5SUNrZ0tUc0tDWFpsWXpNZ1JpQTlJRVpmVTJOb2JHbGpheWdnWmpBc0lHWTVNQ3dnWkc5MFZrZ2dLVHNLQ1NOcFptUmxaaUJWVTBWZlNWSkpSRVZUUTBWT1EwVUtDUWxHSUQwZ2JXbDRLQ0JHTENCdFlYUmxjbWxoYkM1cGNtbGtaWE5qWlc1alpVWnlaWE51Wld3c0lHMWhkR1Z5YVdGc0xtbHlhV1JsYzJObGJtTmxJQ2s3Q2dralpXNWthV1lLQ1NOcFptUmxaaUJWVTBWZlFVNUpVMDlVVWs5UVdRb0pDV1pzYjJGMElHUnZkRlJNSUQwZ1pHOTBLQ0J0WVhSbGNtbGhiQzVoYm1semIzUnliM0I1VkN3Z2JHbG5hSFJFYVhJZ0tUc0tDUWxtYkc5aGRDQmtiM1JVVmlBOUlHUnZkQ2dnYldGMFpYSnBZV3d1WVc1cGMyOTBjbTl3ZVZRc0lIWnBaWGRFYVhJZ0tUc0tDUWxtYkc5aGRDQmtiM1JVU0NBOUlHUnZkQ2dnYldGMFpYSnBZV3d1WVc1cGMyOTBjbTl3ZVZRc0lHaGhiR1pFYVhJZ0tUc0tDUWxtYkc5aGRDQmtiM1JDVENBOUlHUnZkQ2dnYldGMFpYSnBZV3d1WVc1cGMyOTBjbTl3ZVVJc0lHeHBaMmgwUkdseUlDazdDZ2tKWm14dllYUWdaRzkwUWxZZ1BTQmtiM1FvSUcxaGRHVnlhV0ZzTG1GdWFYTnZkSEp2Y0hsQ0xDQjJhV1YzUkdseUlDazdDZ2tKWm14dllYUWdaRzkwUWtnZ1BTQmtiM1FvSUcxaGRHVnlhV0ZzTG1GdWFYTnZkSEp2Y0hsQ0xDQm9ZV3htUkdseUlDazdDZ2tKWm14dllYUWdWaUE5SUZaZlIwZFlYMU50YVhSb1EyOXljbVZzWVhSbFpGOUJibWx6YjNSeWIzQnBZeWdnYldGMFpYSnBZV3d1WVd4d2FHRlVMQ0JoYkhCb1lTd2daRzkwVkZZc0lHUnZkRUpXTENCa2IzUlVUQ3dnWkc5MFFrd3NJR1J2ZEU1V0xDQmtiM1JPVENBcE93b0pDV1pzYjJGMElFUWdQU0JFWDBkSFdGOUJibWx6YjNSeWIzQnBZeWdnYldGMFpYSnBZV3d1WVd4d2FHRlVMQ0JoYkhCb1lTd2daRzkwVGtnc0lHUnZkRlJJTENCa2IzUkNTQ0FwT3dvSkkyVnNjMlVLQ1FsbWJHOWhkQ0JXSUQwZ1ZsOUhSMWhmVTIxcGRHaERiM0p5Wld4aGRHVmtLQ0JoYkhCb1lTd2daRzkwVGt3c0lHUnZkRTVXSUNrN0Nna0pabXh2WVhRZ1JDQTlJRVJmUjBkWUtDQmhiSEJvWVN3Z1pHOTBUa2dnS1RzS0NTTmxibVJwWmdvSmNtVjBkWEp1SUVZZ0tpQW9JRllnS2lCRUlDazdDbjBLZG1Wak1pQk1WRU5mVlhZb0lHTnZibk4wSUdsdUlIWmxZek1nVGl3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJXTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J5YjNWbmFHNWxjM01nS1NCN0NnbGpiMjV6ZENCbWJHOWhkQ0JNVlZSZlUwbGFSU0E5SURZMExqQTdDZ2xqYjI1emRDQm1iRzloZENCTVZWUmZVME5CVEVVZ1BTQW9JRXhWVkY5VFNWcEZJQzBnTVM0d0lDa2dMeUJNVlZSZlUwbGFSVHNLQ1dOdmJuTjBJR1pzYjJGMElFeFZWRjlDU1VGVElEMGdNQzQxSUM4Z1RGVlVYMU5KV2tVN0NnbG1iRzloZENCa2IzUk9WaUE5SUhOaGRIVnlZWFJsS0NCa2IzUW9JRTRzSUZZZ0tTQXBPd29KZG1Wak1pQjFkaUE5SUhabFl6SW9JSEp2ZFdkb2JtVnpjeXdnYzNGeWRDZ2dNUzR3SUMwZ1pHOTBUbFlnS1NBcE93b0pkWFlnUFNCMWRpQXFJRXhWVkY5VFEwRk1SU0FySUV4VlZGOUNTVUZUT3dvSmNtVjBkWEp1SUhWMk93cDlDbVpzYjJGMElFeFVRMTlEYkdsd2NHVmtVM0JvWlhKbFJtOXliVVpoWTNSdmNpZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCbUlDa2dld29KWm14dllYUWdiQ0E5SUd4bGJtZDBhQ2dnWmlBcE93b0pjbVYwZFhKdUlHMWhlQ2dnS0NCc0lDb2diQ0FySUdZdWVpQXBJQzhnS0NCc0lDc2dNUzR3SUNrc0lEQXVNQ0FwT3dwOUNuWmxZek1nVEZSRFgwVmtaMlZXWldOMGIzSkdiM0p0Um1GamRHOXlLQ0JqYjI1emRDQnBiaUIyWldNeklIWXhMQ0JqYjI1emRDQnBiaUIyWldNeklIWXlJQ2tnZXdvSlpteHZZWFFnZUNBOUlHUnZkQ2dnZGpFc0lIWXlJQ2s3Q2dsbWJHOWhkQ0I1SUQwZ1lXSnpLQ0I0SUNrN0NnbG1iRzloZENCaElEMGdNQzQ0TlRRek9UZzFJQ3NnS0NBd0xqUTVOalV4TlRVZ0t5QXdMakF4TkRVeU1EWWdLaUI1SUNrZ0tpQjVPd29KWm14dllYUWdZaUE5SURNdU5ERTNOVGswTUNBcklDZ2dOQzR4TmpFMk56STBJQ3NnZVNBcElDb2dlVHNLQ1dac2IyRjBJSFlnUFNCaElDOGdZanNLQ1dac2IyRjBJSFJvWlhSaFgzTnBiblJvWlhSaElEMGdLQ0I0SUQ0Z01DNHdJQ2tnUHlCMklEb2dNQzQxSUNvZ2FXNTJaWEp6WlhOeGNuUW9JRzFoZUNnZ01TNHdJQzBnZUNBcUlIZ3NJREZsTFRjZ0tTQXBJQzBnZGpzS0NYSmxkSFZ5YmlCamNtOXpjeWdnZGpFc0lIWXlJQ2tnS2lCMGFHVjBZVjl6YVc1MGFHVjBZVHNLZlFwMlpXTXpJRXhVUTE5RmRtRnNkV0YwWlNnZ1kyOXVjM1FnYVc0Z2RtVmpNeUJPTENCamIyNXpkQ0JwYmlCMlpXTXpJRllzSUdOdmJuTjBJR2x1SUhabFl6TWdVQ3dnWTI5dWMzUWdhVzRnYldGME15QnRTVzUyTENCamIyNXpkQ0JwYmlCMlpXTXpJSEpsWTNSRGIyOXlaSE5iSURRZ1hTQXBJSHNLQ1habFl6TWdkakVnUFNCeVpXTjBRMjl2Y21Seld5QXhJRjBnTFNCeVpXTjBRMjl2Y21Seld5QXdJRjA3Q2dsMlpXTXpJSFl5SUQwZ2NtVmpkRU52YjNKa2Mxc2dNeUJkSUMwZ2NtVmpkRU52YjNKa2Mxc2dNQ0JkT3dvSmRtVmpNeUJzYVdkb2RFNXZjbTFoYkNBOUlHTnliM056S0NCMk1Td2dkaklnS1RzS0NXbG1LQ0JrYjNRb0lHeHBaMmgwVG05eWJXRnNMQ0JRSUMwZ2NtVmpkRU52YjNKa2Mxc2dNQ0JkSUNrZ1BDQXdMakFnS1NCeVpYUjFjbTRnZG1Wak15Z2dNQzR3SUNrN0NnbDJaV016SUZReExDQlVNanNLQ1ZReElEMGdibTl5YldGc2FYcGxLQ0JXSUMwZ1RpQXFJR1J2ZENnZ1Zpd2dUaUFwSUNrN0NnbFVNaUE5SUMwZ1kzSnZjM01vSUU0c0lGUXhJQ2s3Q2dsdFlYUXpJRzFoZENBOUlHMUpibllnS2lCMGNtRnVjM0J2YzJWTllYUXpLQ0J0WVhRektDQlVNU3dnVkRJc0lFNGdLU0FwT3dvSmRtVmpNeUJqYjI5eVpITmJJRFFnWFRzS0NXTnZiM0prYzFzZ01DQmRJRDBnYldGMElDb2dLQ0J5WldOMFEyOXZjbVJ6V3lBd0lGMGdMU0JRSUNrN0NnbGpiMjl5WkhOYklERWdYU0E5SUcxaGRDQXFJQ2dnY21WamRFTnZiM0prYzFzZ01TQmRJQzBnVUNBcE93b0pZMjl2Y21Seld5QXlJRjBnUFNCdFlYUWdLaUFvSUhKbFkzUkRiMjl5WkhOYklESWdYU0F0SUZBZ0tUc0tDV052YjNKa2Mxc2dNeUJkSUQwZ2JXRjBJQ29nS0NCeVpXTjBRMjl2Y21Seld5QXpJRjBnTFNCUUlDazdDZ2xqYjI5eVpITmJJREFnWFNBOUlHNXZjbTFoYkdsNlpTZ2dZMjl2Y21Seld5QXdJRjBnS1RzS0NXTnZiM0prYzFzZ01TQmRJRDBnYm05eWJXRnNhWHBsS0NCamIyOXlaSE5iSURFZ1hTQXBPd29KWTI5dmNtUnpXeUF5SUYwZ1BTQnViM0p0WVd4cGVtVW9JR052YjNKa2Mxc2dNaUJkSUNrN0NnbGpiMjl5WkhOYklETWdYU0E5SUc1dmNtMWhiR2w2WlNnZ1kyOXZjbVJ6V3lBeklGMGdLVHNLQ1habFl6TWdkbVZqZEc5eVJtOXliVVpoWTNSdmNpQTlJSFpsWXpNb0lEQXVNQ0FwT3dvSmRtVmpkRzl5Um05eWJVWmhZM1J2Y2lBclBTQk1WRU5mUldSblpWWmxZM1J2Y2tadmNtMUdZV04wYjNJb0lHTnZiM0prYzFzZ01DQmRMQ0JqYjI5eVpITmJJREVnWFNBcE93b0pkbVZqZEc5eVJtOXliVVpoWTNSdmNpQXJQU0JNVkVOZlJXUm5aVlpsWTNSdmNrWnZjbTFHWVdOMGIzSW9JR052YjNKa2Mxc2dNU0JkTENCamIyOXlaSE5iSURJZ1hTQXBPd29KZG1WamRHOXlSbTl5YlVaaFkzUnZjaUFyUFNCTVZFTmZSV1JuWlZabFkzUnZja1p2Y20xR1lXTjBiM0lvSUdOdmIzSmtjMXNnTWlCZExDQmpiMjl5WkhOYklETWdYU0FwT3dvSmRtVmpkRzl5Um05eWJVWmhZM1J2Y2lBclBTQk1WRU5mUldSblpWWmxZM1J2Y2tadmNtMUdZV04wYjNJb0lHTnZiM0prYzFzZ015QmRMQ0JqYjI5eVpITmJJREFnWFNBcE93b0pabXh2WVhRZ2NtVnpkV3gwSUQwZ1RGUkRYME5zYVhCd1pXUlRjR2hsY21WR2IzSnRSbUZqZEc5eUtDQjJaV04wYjNKR2IzSnRSbUZqZEc5eUlDazdDZ2x5WlhSMWNtNGdkbVZqTXlnZ2NtVnpkV3gwSUNrN0NuMEtJMmxtSUdSbFptbHVaV1FvSUZWVFJWOVRTRVZGVGlBcENtWnNiMkYwSUVSZlEyaGhjbXhwWlNnZ1pteHZZWFFnY205MVoyaHVaWE56TENCbWJHOWhkQ0JrYjNST1NDQXBJSHNLQ1dac2IyRjBJR0ZzY0doaElEMGdjRzkzTWlnZ2NtOTFaMmh1WlhOeklDazdDZ2xtYkc5aGRDQnBiblpCYkhCb1lTQTlJREV1TUNBdklHRnNjR2hoT3dvSlpteHZZWFFnWTI5ek1tZ2dQU0JrYjNST1NDQXFJR1J2ZEU1SU93b0pabXh2WVhRZ2MybHVNbWdnUFNCdFlYZ29JREV1TUNBdElHTnZjekpvTENBd0xqQXdOemd4TWpVZ0tUc0tDWEpsZEhWeWJpQW9JREl1TUNBcklHbHVka0ZzY0doaElDa2dLaUJ3YjNjb0lITnBiakpvTENCcGJuWkJiSEJvWVNBcUlEQXVOU0FwSUM4Z0tDQXlMakFnS2lCUVNTQXBPd3A5Q21ac2IyRjBJRlpmVG1WMVltVnNkQ2dnWm14dllYUWdaRzkwVGxZc0lHWnNiMkYwSUdSdmRFNU1JQ2tnZXdvSmNtVjBkWEp1SUhOaGRIVnlZWFJsS0NBeExqQWdMeUFvSURRdU1DQXFJQ2dnWkc5MFRrd2dLeUJrYjNST1ZpQXRJR1J2ZEU1TUlDb2daRzkwVGxZZ0tTQXBJQ2s3Q24wS2RtVmpNeUJDVWtSR1gxTm9aV1Z1S0NCamIyNXpkQ0JwYmlCMlpXTXpJR3hwWjJoMFJHbHlMQ0JqYjI1emRDQnBiaUIyWldNeklIWnBaWGRFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nYm05eWJXRnNMQ0IyWldNeklITm9aV1Z1UTI5c2IzSXNJR052Ym5OMElHbHVJR1pzYjJGMElITm9aV1Z1VW05MVoyaHVaWE56SUNrZ2V3b0pkbVZqTXlCb1lXeG1SR2x5SUQwZ2JtOXliV0ZzYVhwbEtDQnNhV2RvZEVScGNpQXJJSFpwWlhkRWFYSWdLVHNLQ1dac2IyRjBJR1J2ZEU1TUlEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ2JtOXliV0ZzTENCc2FXZG9kRVJwY2lBcElDazdDZ2xtYkc5aGRDQmtiM1JPVmlBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUc1dmNtMWhiQ3dnZG1sbGQwUnBjaUFwSUNrN0NnbG1iRzloZENCa2IzUk9TQ0E5SUhOaGRIVnlZWFJsS0NCa2IzUW9JRzV2Y20xaGJDd2dhR0ZzWmtScGNpQXBJQ2s3Q2dsbWJHOWhkQ0JFSUQwZ1JGOURhR0Z5YkdsbEtDQnphR1ZsYmxKdmRXZG9ibVZ6Y3l3Z1pHOTBUa2dnS1RzS0NXWnNiMkYwSUZZZ1BTQldYMDVsZFdKbGJIUW9JR1J2ZEU1V0xDQmtiM1JPVENBcE93b0pjbVYwZFhKdUlITm9aV1Z1UTI5c2IzSWdLaUFvSUVRZ0tpQldJQ2s3Q24wS0kyVnVaR2xtQ21ac2IyRjBJRWxDVEZOb1pXVnVRbEpFUmlnZ1kyOXVjM1FnYVc0Z2RtVmpNeUJ1YjNKdFlXd3NJR052Ym5OMElHbHVJSFpsWXpNZ2RtbGxkMFJwY2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnY205MVoyaHVaWE56SUNrZ2V3b0pabXh2WVhRZ1pHOTBUbFlnUFNCellYUjFjbUYwWlNnZ1pHOTBLQ0J1YjNKdFlXd3NJSFpwWlhkRWFYSWdLU0FwT3dvSlpteHZZWFFnY2pJZ1BTQnliM1ZuYUc1bGMzTWdLaUJ5YjNWbmFHNWxjM003Q2dsbWJHOWhkQ0JoSUQwZ2NtOTFaMmh1WlhOeklEd2dNQzR5TlNBL0lDMHpNemt1TWlBcUlISXlJQ3NnTVRZeExqUWdLaUJ5YjNWbmFHNWxjM01nTFNBeU5TNDVJRG9nTFRndU5EZ2dLaUJ5TWlBcklERTBMak1nS2lCeWIzVm5hRzVsYzNNZ0xTQTVMamsxT3dvSlpteHZZWFFnWWlBOUlISnZkV2RvYm1WemN5QThJREF1TWpVZ1B5QTBOQzR3SUNvZ2NqSWdMU0F5TXk0M0lDb2djbTkxWjJodVpYTnpJQ3NnTXk0eU5pQTZJREV1T1RjZ0tpQnlNaUF0SURNdU1qY2dLaUJ5YjNWbmFHNWxjM01nS3lBd0xqY3lPd29KWm14dllYUWdSRWNnUFNCbGVIQW9JR0VnS2lCa2IzUk9WaUFySUdJZ0tTQXJJQ2dnY205MVoyaHVaWE56SUR3Z01DNHlOU0EvSURBdU1DQTZJREF1TVNBcUlDZ2djbTkxWjJodVpYTnpJQzBnTUM0eU5TQXBJQ2s3Q2dseVpYUjFjbTRnYzJGMGRYSmhkR1VvSUVSSElDb2dVa1ZEU1ZCU1QwTkJURjlRU1NBcE93cDlDblpsWXpJZ1JFWkhRWEJ3Y205NEtDQmpiMjV6ZENCcGJpQjJaV016SUc1dmNtMWhiQ3dnWTI5dWMzUWdhVzRnZG1Wak15QjJhV1YzUkdseUxDQmpiMjV6ZENCcGJpQm1iRzloZENCeWIzVm5hRzVsYzNNZ0tTQjdDZ2xtYkc5aGRDQmtiM1JPVmlBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUc1dmNtMWhiQ3dnZG1sbGQwUnBjaUFwSUNrN0NnbGpiMjV6ZENCMlpXTTBJR013SUQwZ2RtVmpOQ2dnTFNBeExDQXRJREF1TURJM05Td2dMU0F3TGpVM01pd2dNQzR3TWpJZ0tUc0tDV052Ym5OMElIWmxZelFnWXpFZ1BTQjJaV00wS0NBeExDQXdMakEwTWpVc0lERXVNRFFzSUMwZ01DNHdOQ0FwT3dvSmRtVmpOQ0J5SUQwZ2NtOTFaMmh1WlhOeklDb2dZekFnS3lCak1Uc0tDV1pzYjJGMElHRXdNRFFnUFNCdGFXNG9JSEl1ZUNBcUlISXVlQ3dnWlhod01pZ2dMU0E1TGpJNElDb2daRzkwVGxZZ0tTQXBJQ29nY2k1NElDc2djaTU1T3dvSmRtVmpNaUJtWVdJZ1BTQjJaV015S0NBdElERXVNRFFzSURFdU1EUWdLU0FxSUdFd01EUWdLeUJ5TG5wM093b0pjbVYwZFhKdUlHWmhZanNLZlFwMlpXTXpJRVZ1ZG1seWIyNXRaVzUwUWxKRVJpZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCdWIzSnRZV3dzSUdOdmJuTjBJR2x1SUhabFl6TWdkbWxsZDBScGNpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCemNHVmpkV3hoY2tOdmJHOXlMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnpjR1ZqZFd4aGNrWTVNQ3dnWTI5dWMzUWdhVzRnWm14dllYUWdjbTkxWjJodVpYTnpJQ2tnZXdvSmRtVmpNaUJtWVdJZ1BTQkVSa2RCY0hCeWIzZ29JRzV2Y20xaGJDd2dkbWxsZDBScGNpd2djbTkxWjJodVpYTnpJQ2s3Q2dseVpYUjFjbTRnYzNCbFkzVnNZWEpEYjJ4dmNpQXFJR1poWWk1NElDc2djM0JsWTNWc1lYSkdPVEFnS2lCbVlXSXVlVHNLZlFvamFXWmtaV1lnVlZORlgwbFNTVVJGVTBORlRrTkZDblp2YVdRZ1kyOXRjSFYwWlUxMWJIUnBjMk5oZEhSbGNtbHVaMGx5YVdSbGMyTmxibU5sS0NCamIyNXpkQ0JwYmlCMlpXTXpJRzV2Y20xaGJDd2dZMjl1YzNRZ2FXNGdkbVZqTXlCMmFXVjNSR2x5TENCamIyNXpkQ0JwYmlCMlpXTXpJSE53WldOMWJHRnlRMjlzYjNJc0lHTnZibk4wSUdsdUlHWnNiMkYwSUhOd1pXTjFiR0Z5Umprd0xDQmpiMjV6ZENCcGJpQm1iRzloZENCcGNtbGtaWE5qWlc1alpTd2dZMjl1YzNRZ2FXNGdkbVZqTXlCcGNtbGtaWE5qWlc1alpVWXdMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnliM1ZuYUc1bGMzTXNJR2x1YjNWMElIWmxZek1nYzJsdVoyeGxVMk5oZEhSbGNpd2dhVzV2ZFhRZ2RtVmpNeUJ0ZFd4MGFWTmpZWFIwWlhJZ0tTQjdDaU5sYkhObENuWnZhV1FnWTI5dGNIVjBaVTExYkhScGMyTmhkSFJsY21sdVp5Z2dZMjl1YzNRZ2FXNGdkbVZqTXlCdWIzSnRZV3dzSUdOdmJuTjBJR2x1SUhabFl6TWdkbWxsZDBScGNpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCemNHVmpkV3hoY2tOdmJHOXlMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnpjR1ZqZFd4aGNrWTVNQ3dnWTI5dWMzUWdhVzRnWm14dllYUWdjbTkxWjJodVpYTnpMQ0JwYm05MWRDQjJaV016SUhOcGJtZHNaVk5qWVhSMFpYSXNJR2x1YjNWMElIWmxZek1nYlhWc2RHbFRZMkYwZEdWeUlDa2dld29qWlc1a2FXWUtDWFpsWXpJZ1ptRmlJRDBnUkVaSFFYQndjbTk0S0NCdWIzSnRZV3dzSUhacFpYZEVhWElzSUhKdmRXZG9ibVZ6Y3lBcE93b0pJMmxtWkdWbUlGVlRSVjlKVWtsRVJWTkRSVTVEUlFvSkNYWmxZek1nUm5JZ1BTQnRhWGdvSUhOd1pXTjFiR0Z5UTI5c2IzSXNJR2x5YVdSbGMyTmxibU5sUmpBc0lHbHlhV1JsYzJObGJtTmxJQ2s3Q2dralpXeHpaUW9KQ1habFl6TWdSbklnUFNCemNHVmpkV3hoY2tOdmJHOXlPd29KSTJWdVpHbG1DZ2wyWldNeklFWnpjMFZ6Y3lBOUlFWnlJQ29nWm1GaUxuZ2dLeUJ6Y0dWamRXeGhja1k1TUNBcUlHWmhZaTU1T3dvSlpteHZZWFFnUlhOeklEMGdabUZpTG5nZ0t5Qm1ZV0l1ZVRzS0NXWnNiMkYwSUVWdGN5QTlJREV1TUNBdElFVnpjenNLQ1habFl6TWdSbUYyWnlBOUlFWnlJQ3NnS0NBeExqQWdMU0JHY2lBcElDb2dNQzR3TkRjMk1UazdDWFpsWXpNZ1JtMXpJRDBnUm5OelJYTnpJQ29nUm1GMlp5QXZJQ2dnTVM0d0lDMGdSVzF6SUNvZ1JtRjJaeUFwT3dvSmMybHVaMnhsVTJOaGRIUmxjaUFyUFNCR2MzTkZjM003Q2dsdGRXeDBhVk5qWVhSMFpYSWdLejBnUm0xeklDb2dSVzF6T3dwOUNpTnBaaUJPVlUxZlVrVkRWRjlCVWtWQlgweEpSMGhVVXlBK0lEQUtDWFp2YVdRZ1VrVmZSR2x5WldOMFgxSmxZM1JCY21WaFgxQm9lWE5wWTJGc0tDQmpiMjV6ZENCcGJpQlNaV04wUVhKbFlVeHBaMmgwSUhKbFkzUkJjbVZoVEdsbmFIUXNJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sUWIzTnBkR2x2Yml3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVTV2Y20xaGJDd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVZacFpYZEVhWElzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubERiR1ZoY21OdllYUk9iM0p0WVd3c0lHTnZibk4wSUdsdUlGQm9lWE5wWTJGc1RXRjBaWEpwWVd3Z2JXRjBaWEpwWVd3c0lHbHViM1YwSUZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMElDa2dld29KQ1habFl6TWdibTl5YldGc0lEMGdaMlZ2YldWMGNubE9iM0p0WVd3N0Nna0pkbVZqTXlCMmFXVjNSR2x5SUQwZ1oyVnZiV1YwY25sV2FXVjNSR2x5T3dvSkNYWmxZek1nY0c5emFYUnBiMjRnUFNCblpXOXRaWFJ5ZVZCdmMybDBhVzl1T3dvSkNYWmxZek1nYkdsbmFIUlFiM01nUFNCeVpXTjBRWEpsWVV4cFoyaDBMbkJ2YzJsMGFXOXVPd29KQ1habFl6TWdhR0ZzWmxkcFpIUm9JRDBnY21WamRFRnlaV0ZNYVdkb2RDNW9ZV3htVjJsa2RHZzdDZ2tKZG1Wak15Qm9ZV3htU0dWcFoyaDBJRDBnY21WamRFRnlaV0ZNYVdkb2RDNW9ZV3htU0dWcFoyaDBPd29KQ1habFl6TWdiR2xuYUhSRGIyeHZjaUE5SUhKbFkzUkJjbVZoVEdsbmFIUXVZMjlzYjNJN0Nna0pabXh2WVhRZ2NtOTFaMmh1WlhOeklEMGdiV0YwWlhKcFlXd3VjbTkxWjJodVpYTnpPd29KQ1habFl6TWdjbVZqZEVOdmIzSmtjMXNnTkNCZE93b0pDWEpsWTNSRGIyOXlaSE5iSURBZ1hTQTlJR3hwWjJoMFVHOXpJQ3NnYUdGc1psZHBaSFJvSUMwZ2FHRnNaa2hsYVdkb2REc0pDWEpsWTNSRGIyOXlaSE5iSURFZ1hTQTlJR3hwWjJoMFVHOXpJQzBnYUdGc1psZHBaSFJvSUMwZ2FHRnNaa2hsYVdkb2REc0tDUWx5WldOMFEyOXZjbVJ6V3lBeUlGMGdQU0JzYVdkb2RGQnZjeUF0SUdoaGJHWlhhV1IwYUNBcklHaGhiR1pJWldsbmFIUTdDZ2tKY21WamRFTnZiM0prYzFzZ015QmRJRDBnYkdsbmFIUlFiM01nS3lCb1lXeG1WMmxrZEdnZ0t5Qm9ZV3htU0dWcFoyaDBPd29KQ1habFl6SWdkWFlnUFNCTVZFTmZWWFlvSUc1dmNtMWhiQ3dnZG1sbGQwUnBjaXdnY205MVoyaHVaWE56SUNrN0Nna0pkbVZqTkNCME1TQTlJSFJsZUhSMWNtVXlSQ2dnYkhSalh6RXNJSFYySUNrN0Nna0pkbVZqTkNCME1pQTlJSFJsZUhSMWNtVXlSQ2dnYkhSalh6SXNJSFYySUNrN0Nna0piV0YwTXlCdFNXNTJJRDBnYldGME15Z0tDUWtKZG1Wak15Z2dkREV1ZUN3Z01Dd2dkREV1ZVNBcExBb0pDUWwyWldNektDQWdJQ0F3TENBeExDQWdJQ0F3SUNrc0Nna0pDWFpsWXpNb0lIUXhMbm9zSURBc0lIUXhMbmNnS1FvSkNTazdDZ2tKZG1Wak15Qm1jbVZ6Ym1Wc0lEMGdLQ0J0WVhSbGNtbGhiQzV6Y0dWamRXeGhja052Ykc5eUlDb2dkREl1ZUNBcklDZ2dkbVZqTXlnZ01TNHdJQ2tnTFNCdFlYUmxjbWxoYkM1emNHVmpkV3hoY2tOdmJHOXlJQ2tnS2lCME1pNTVJQ2s3Q2drSmNtVm1iR1ZqZEdWa1RHbG5hSFF1WkdseVpXTjBVM0JsWTNWc1lYSWdLejBnYkdsbmFIUkRiMnh2Y2lBcUlHWnlaWE51Wld3Z0tpQk1WRU5mUlhaaGJIVmhkR1VvSUc1dmNtMWhiQ3dnZG1sbGQwUnBjaXdnY0c5emFYUnBiMjRzSUcxSmJuWXNJSEpsWTNSRGIyOXlaSE1nS1RzS0NRbHlaV1pzWldOMFpXUk1hV2RvZEM1a2FYSmxZM1JFYVdabWRYTmxJQ3M5SUd4cFoyaDBRMjlzYjNJZ0tpQnRZWFJsY21saGJDNWthV1ptZFhObFEyOXNiM0lnS2lCTVZFTmZSWFpoYkhWaGRHVW9JRzV2Y20xaGJDd2dkbWxsZDBScGNpd2djRzl6YVhScGIyNHNJRzFoZERNb0lERXVNQ0FwTENCeVpXTjBRMjl2Y21SeklDazdDZ2w5Q2lObGJtUnBaZ3AyYjJsa0lGSkZYMFJwY21WamRGOVFhSGx6YVdOaGJDZ2dZMjl1YzNRZ2FXNGdTVzVqYVdSbGJuUk1hV2RvZENCa2FYSmxZM1JNYVdkb2RDd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVZCdmMybDBhVzl1TENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVUbTl5YldGc0xDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1Vm1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVVTnNaV0Z5WTI5aGRFNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z1VHaDVjMmxqWVd4TllYUmxjbWxoYkNCdFlYUmxjbWxoYkN3Z2FXNXZkWFFnVW1WbWJHVmpkR1ZrVEdsbmFIUWdjbVZtYkdWamRHVmtUR2xuYUhRZ0tTQjdDZ2xtYkc5aGRDQmtiM1JPVENBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JrYVhKbFkzUk1hV2RvZEM1a2FYSmxZM1JwYjI0Z0tTQXBPd29KZG1Wak15QnBjbkpoWkdsaGJtTmxJRDBnWkc5MFRrd2dLaUJrYVhKbFkzUk1hV2RvZEM1amIyeHZjanNLQ1NOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVUNna0pabXh2WVhRZ1pHOTBUa3hqWXlBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUdkbGIyMWxkSEo1UTJ4bFlYSmpiMkYwVG05eWJXRnNMQ0JrYVhKbFkzUk1hV2RvZEM1a2FYSmxZM1JwYjI0Z0tTQXBPd29KQ1habFl6TWdZMk5KY25KaFpHbGhibU5sSUQwZ1pHOTBUa3hqWXlBcUlHUnBjbVZqZEV4cFoyaDBMbU52Ykc5eU93b0pDV05zWldGeVkyOWhkRk53WldOMWJHRnlJQ3M5SUdOalNYSnlZV1JwWVc1alpTQXFJRUpTUkVaZlIwZFlYME5zWldGeVkyOWhkQ2dnWkdseVpXTjBUR2xuYUhRdVpHbHlaV04wYVc5dUxDQm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHZGxiMjFsZEhKNVEyeGxZWEpqYjJGMFRtOXliV0ZzTENCdFlYUmxjbWxoYkNBcE93b0pJMlZ1WkdsbUNna2phV1prWldZZ1ZWTkZYMU5JUlVWT0Nna0pjMmhsWlc1VGNHVmpkV3hoY2lBclBTQnBjbkpoWkdsaGJtTmxJQ29nUWxKRVJsOVRhR1ZsYmlnZ1pHbHlaV04wVEdsbmFIUXVaR2x5WldOMGFXOXVMQ0JuWlc5dFpYUnllVlpwWlhkRWFYSXNJR2RsYjIxbGRISjVUbTl5YldGc0xDQnRZWFJsY21saGJDNXphR1ZsYmtOdmJHOXlMQ0J0WVhSbGNtbGhiQzV6YUdWbGJsSnZkV2RvYm1WemN5QXBPd29KSTJWdVpHbG1DZ2x5Wldac1pXTjBaV1JNYVdkb2RDNWthWEpsWTNSVGNHVmpkV3hoY2lBclBTQnBjbkpoWkdsaGJtTmxJQ29nUWxKRVJsOUhSMWdvSUdScGNtVmpkRXhwWjJoMExtUnBjbVZqZEdsdmJpd2daMlZ2YldWMGNubFdhV1YzUkdseUxDQm5aVzl0WlhSeWVVNXZjbTFoYkN3Z2JXRjBaWEpwWVd3Z0tUc0tDWEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEVScFptWjFjMlVnS3owZ2FYSnlZV1JwWVc1alpTQXFJRUpTUkVaZlRHRnRZbVZ5ZENnZ2JXRjBaWEpwWVd3dVpHbG1ablZ6WlVOdmJHOXlJQ2s3Q24wS2RtOXBaQ0JTUlY5SmJtUnBjbVZqZEVScFptWjFjMlZmVUdoNWMybGpZV3dvSUdOdmJuTjBJR2x1SUhabFl6TWdhWEp5WVdScFlXNWpaU3dnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVWQnZjMmwwYVc5dUxDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVZtbGxkMFJwY2l3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVU5zWldGeVkyOWhkRTV2Y20xaGJDd2dZMjl1YzNRZ2FXNGdVR2g1YzJsallXeE5ZWFJsY21saGJDQnRZWFJsY21saGJDd2dhVzV2ZFhRZ1VtVm1iR1ZqZEdWa1RHbG5hSFFnY21WbWJHVmpkR1ZrVEdsbmFIUWdLU0I3Q2dseVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRVJwWm1aMWMyVWdLejBnYVhKeVlXUnBZVzVqWlNBcUlFSlNSRVpmVEdGdFltVnlkQ2dnYldGMFpYSnBZV3d1WkdsbVpuVnpaVU52Ykc5eUlDazdDbjBLZG05cFpDQlNSVjlKYm1ScGNtVmpkRk53WldOMWJHRnlYMUJvZVhOcFkyRnNLQ0JqYjI1emRDQnBiaUIyWldNeklISmhaR2xoYm1ObExDQmpiMjV6ZENCcGJpQjJaV016SUdseWNtRmthV0Z1WTJVc0lHTnZibk4wSUdsdUlIWmxZek1nWTJ4bFlYSmpiMkYwVW1Ga2FXRnVZMlVzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubFFiM05wZEdsdmJpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVU1dmNtMWhiQ3dnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxEYkdWaGNtTnZZWFJPYjNKdFlXd3NJR052Ym5OMElHbHVJRkJvZVhOcFkyRnNUV0YwWlhKcFlXd2diV0YwWlhKcFlXd3NJR2x1YjNWMElGSmxabXhsWTNSbFpFeHBaMmgwSUhKbFpteGxZM1JsWkV4cFoyaDBLU0I3Q2dramFXWmtaV1lnVlZORlgwTk1SVUZTUTA5QlZBb0pDV05zWldGeVkyOWhkRk53WldOMWJHRnlJQ3M5SUdOc1pXRnlZMjloZEZKaFpHbGhibU5sSUNvZ1JXNTJhWEp2Ym0xbGJuUkNVa1JHS0NCblpXOXRaWFJ5ZVVOc1pXRnlZMjloZEU1dmNtMWhiQ3dnWjJWdmJXVjBjbmxXYVdWM1JHbHlMQ0J0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJHTUN3Z2JXRjBaWEpwWVd3dVkyeGxZWEpqYjJGMFJqa3dMQ0J0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nS1RzS0NTTmxibVJwWmdvSkkybG1aR1ZtSUZWVFJWOVRTRVZGVGdvSkNYTm9aV1Z1VTNCbFkzVnNZWElnS3owZ2FYSnlZV1JwWVc1alpTQXFJRzFoZEdWeWFXRnNMbk5vWldWdVEyOXNiM0lnS2lCSlFreFRhR1ZsYmtKU1JFWW9JR2RsYjIxbGRISjVUbTl5YldGc0xDQm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHMWhkR1Z5YVdGc0xuTm9aV1Z1VW05MVoyaHVaWE56SUNrN0Nna2paVzVrYVdZS0NYWmxZek1nYzJsdVoyeGxVMk5oZEhSbGNtbHVaeUE5SUhabFl6TW9JREF1TUNBcE93b0pkbVZqTXlCdGRXeDBhVk5qWVhSMFpYSnBibWNnUFNCMlpXTXpLQ0F3TGpBZ0tUc0tDWFpsWXpNZ1kyOXphVzVsVjJWcFoyaDBaV1JKY25KaFpHbGhibU5sSUQwZ2FYSnlZV1JwWVc1alpTQXFJRkpGUTBsUVVrOURRVXhmVUVrN0Nna2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GQ2drSlkyOXRjSFYwWlUxMWJIUnBjMk5oZEhSbGNtbHVaMGx5YVdSbGMyTmxibU5sS0NCblpXOXRaWFJ5ZVU1dmNtMWhiQ3dnWjJWdmJXVjBjbmxXYVdWM1JHbHlMQ0J0WVhSbGNtbGhiQzV6Y0dWamRXeGhja052Ykc5eUxDQnRZWFJsY21saGJDNXpjR1ZqZFd4aGNrWTVNQ3dnYldGMFpYSnBZV3d1YVhKcFpHVnpZMlZ1WTJVc0lHMWhkR1Z5YVdGc0xtbHlhV1JsYzJObGJtTmxSbkpsYzI1bGJDd2diV0YwWlhKcFlXd3VjbTkxWjJodVpYTnpMQ0J6YVc1bmJHVlRZMkYwZEdWeWFXNW5MQ0J0ZFd4MGFWTmpZWFIwWlhKcGJtY2dLVHNLQ1NObGJITmxDZ2tKWTI5dGNIVjBaVTExYkhScGMyTmhkSFJsY21sdVp5Z2daMlZ2YldWMGNubE9iM0p0WVd3c0lHZGxiMjFsZEhKNVZtbGxkMFJwY2l3Z2JXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKRGIyeHZjaXdnYldGMFpYSnBZV3d1YzNCbFkzVnNZWEpHT1RBc0lHMWhkR1Z5YVdGc0xuSnZkV2RvYm1WemN5d2djMmx1WjJ4bFUyTmhkSFJsY21sdVp5d2diWFZzZEdsVFkyRjBkR1Z5YVc1bklDazdDZ2tqWlc1a2FXWUtDWFpsWXpNZ2RHOTBZV3hUWTJGMGRHVnlhVzVuSUQwZ2MybHVaMnhsVTJOaGRIUmxjbWx1WnlBcklHMTFiSFJwVTJOaGRIUmxjbWx1WnpzS0NYWmxZek1nWkdsbVpuVnpaU0E5SUcxaGRHVnlhV0ZzTG1ScFptWjFjMlZEYjJ4dmNpQXFJQ2dnTVM0d0lDMGdiV0Y0S0NCdFlYZ29JSFJ2ZEdGc1UyTmhkSFJsY21sdVp5NXlMQ0IwYjNSaGJGTmpZWFIwWlhKcGJtY3VaeUFwTENCMGIzUmhiRk5qWVhSMFpYSnBibWN1WWlBcElDazdDZ2x5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRGTndaV04xYkdGeUlDczlJSEpoWkdsaGJtTmxJQ29nYzJsdVoyeGxVMk5oZEhSbGNtbHVaenNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBVM0JsWTNWc1lYSWdLejBnYlhWc2RHbFRZMkYwZEdWeWFXNW5JQ29nWTI5emFXNWxWMlZwWjJoMFpXUkpjbkpoWkdsaGJtTmxPd29KY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDczlJR1JwWm1aMWMyVWdLaUJqYjNOcGJtVlhaV2xuYUhSbFpFbHljbUZrYVdGdVkyVTdDbjBLSTJSbFptbHVaU0JTUlY5RWFYSmxZM1FKQ1FrSlVrVmZSR2x5WldOMFgxQm9lWE5wWTJGc0NpTmtaV1pwYm1VZ1VrVmZSR2x5WldOMFgxSmxZM1JCY21WaENRbFNSVjlFYVhKbFkzUmZVbVZqZEVGeVpXRmZVR2g1YzJsallXd0tJMlJsWm1sdVpTQlNSVjlKYm1ScGNtVmpkRVJwWm1aMWMyVUpDVkpGWDBsdVpHbHlaV04wUkdsbVpuVnpaVjlRYUhsemFXTmhiQW9qWkdWbWFXNWxJRkpGWDBsdVpHbHlaV04wVTNCbFkzVnNZWElKQ1ZKRlgwbHVaR2x5WldOMFUzQmxZM1ZzWVhKZlVHaDVjMmxqWVd3S1pteHZZWFFnWTI5dGNIVjBaVk53WldOMWJHRnlUMk5qYkhWemFXOXVLQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmtiM1JPVml3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWVcxaWFXVnVkRTlqWTJ4MWMybHZiaXdnWTI5dWMzUWdhVzRnWm14dllYUWdjbTkxWjJodVpYTnpJQ2tnZXdvSmNtVjBkWEp1SUhOaGRIVnlZWFJsS0NCd2IzY29JR1J2ZEU1V0lDc2dZVzFpYVdWdWRFOWpZMngxYzJsdmJpd2daWGh3TWlnZ0xTQXhOaTR3SUNvZ2NtOTFaMmh1WlhOeklDMGdNUzR3SUNrZ0tTQXRJREV1TUNBcklHRnRZbWxsYm5SUFkyTnNkWE5wYjI0Z0tUc0tmV0FzSUZOdElEMGdZQXAyWldNeklHZGxiMjFsZEhKNVVHOXphWFJwYjI0Z1BTQXRJSFpXYVdWM1VHOXphWFJwYjI0N0NuWmxZek1nWjJWdmJXVjBjbmxPYjNKdFlXd2dQU0J1YjNKdFlXdzdDblpsWXpNZ1oyVnZiV1YwY25sV2FXVjNSR2x5SUQwZ0tDQnBjMDl5ZEdodlozSmhjR2hwWXlBcElEOGdkbVZqTXlnZ01Dd2dNQ3dnTVNBcElEb2dibTl5YldGc2FYcGxLQ0IyVm1sbGQxQnZjMmwwYVc5dUlDazdDblpsWXpNZ1oyVnZiV1YwY25sRGJHVmhjbU52WVhST2IzSnRZV3c3Q2lOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVUNnbG5aVzl0WlhSeWVVTnNaV0Z5WTI5aGRFNXZjbTFoYkNBOUlHTnNaV0Z5WTI5aGRFNXZjbTFoYkRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlNWSkpSRVZUUTBWT1EwVUtDV1pzYjJGMElHUnZkRTVXYVNBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUc1dmNtMWhiQ3dnWjJWdmJXVjBjbmxXYVdWM1JHbHlJQ2tnS1RzS0NXbG1JQ2dnYldGMFpYSnBZV3d1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNNZ1BUMGdNQzR3SUNrZ2V3b0pDVzFoZEdWeWFXRnNMbWx5YVdSbGMyTmxibU5sSUQwZ01DNHdPd29KZlNCbGJITmxJSHNLQ1FsdFlYUmxjbWxoYkM1cGNtbGtaWE5qWlc1alpTQTlJSE5oZEhWeVlYUmxLQ0J0WVhSbGNtbGhiQzVwY21sa1pYTmpaVzVqWlNBcE93b0pmUW9KYVdZZ0tDQnRZWFJsY21saGJDNXBjbWxrWlhOalpXNWpaU0ErSURBdU1DQXBJSHNLQ1FsdFlYUmxjbWxoYkM1cGNtbGtaWE5qWlc1alpVWnlaWE51Wld3Z1BTQmxkbUZzU1hKcFpHVnpZMlZ1WTJVb0lERXVNQ3dnYldGMFpYSnBZV3d1YVhKcFpHVnpZMlZ1WTJWSlQxSXNJR1J2ZEU1V2FTd2diV0YwWlhKcFlXd3VhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM01zSUcxaGRHVnlhV0ZzTG5Od1pXTjFiR0Z5UTI5c2IzSWdLVHNLQ1FsdFlYUmxjbWxoYkM1cGNtbGtaWE5qWlc1alpVWXdJRDBnVTJOb2JHbGphMTkwYjE5R01DZ2diV0YwWlhKcFlXd3VhWEpwWkdWelkyVnVZMlZHY21WemJtVnNMQ0F4TGpBc0lHUnZkRTVXYVNBcE93b0pmUW9qWlc1a2FXWUtTVzVqYVdSbGJuUk1hV2RvZENCa2FYSmxZM1JNYVdkb2REc0tJMmxtSUNnZ1RsVk5YMUJQU1U1VVgweEpSMGhVVXlBK0lEQWdLU0FtSmlCa1pXWnBibVZrS0NCU1JWOUVhWEpsWTNRZ0tRb0pVRzlwYm5STWFXZG9kQ0J3YjJsdWRFeHBaMmgwT3dvSkkybG1JR1JsWm1sdVpXUW9JRlZUUlY5VFNFRkVUMWROUVZBZ0tTQW1KaUJPVlUxZlVFOUpUbFJmVEVsSFNGUmZVMGhCUkU5WFV5QStJREFLQ1ZCdmFXNTBUR2xuYUhSVGFHRmtiM2NnY0c5cGJuUk1hV2RvZEZOb1lXUnZkenNLQ1NObGJtUnBaZ29KSTNCeVlXZHRZU0IxYm5KdmJHeGZiRzl2Y0Y5emRHRnlkQW9KWm05eUlDZ2dhVzUwSUdrZ1BTQXdPeUJwSUR3Z1RsVk5YMUJQU1U1VVgweEpSMGhVVXpzZ2FTQXJLeUFwSUhzS0NRbHdiMmx1ZEV4cFoyaDBJRDBnY0c5cGJuUk1hV2RvZEhOYklHa2dYVHNLQ1FsblpYUlFiMmx1ZEV4cFoyaDBTVzVtYnlnZ2NHOXBiblJNYVdkb2RDd2daMlZ2YldWMGNubFFiM05wZEdsdmJpd2daR2x5WldOMFRHbG5hSFFnS1RzS0NRa2phV1lnWkdWbWFXNWxaQ2dnVlZORlgxTklRVVJQVjAxQlVDQXBJQ1ltSUNnZ1ZVNVNUMHhNUlVSZlRFOVBVRjlKVGtSRldDQThJRTVWVFY5UVQwbE9WRjlNU1VkSVZGOVRTRUZFVDFkVElDa0tDUWx3YjJsdWRFeHBaMmgwVTJoaFpHOTNJRDBnY0c5cGJuUk1hV2RvZEZOb1lXUnZkM05iSUdrZ1hUc0tDUWxrYVhKbFkzUk1hV2RvZEM1amIyeHZjaUFxUFNBb0lHUnBjbVZqZEV4cFoyaDBMblpwYzJsaWJHVWdKaVlnY21WalpXbDJaVk5vWVdSdmR5QXBJRDhnWjJWMFVHOXBiblJUYUdGa2IzY29JSEJ2YVc1MFUyaGhaRzkzVFdGd1d5QnBJRjBzSUhCdmFXNTBUR2xuYUhSVGFHRmtiM2N1YzJoaFpHOTNUV0Z3VTJsNlpTd2djRzlwYm5STWFXZG9kRk5vWVdSdmR5NXphR0ZrYjNkQ2FXRnpMQ0J3YjJsdWRFeHBaMmgwVTJoaFpHOTNMbk5vWVdSdmQxSmhaR2wxY3l3Z2RsQnZhVzUwVTJoaFpHOTNRMjl2Y21SYklHa2dYU3dnY0c5cGJuUk1hV2RvZEZOb1lXUnZkeTV6YUdGa2IzZERZVzFsY21GT1pXRnlMQ0J3YjJsdWRFeHBaMmgwVTJoaFpHOTNMbk5vWVdSdmQwTmhiV1Z5WVVaaGNpQXBJRG9nTVM0d093b0pDU05sYm1ScFpnb0pDVkpGWDBScGNtVmpkQ2dnWkdseVpXTjBUR2xuYUhRc0lHZGxiMjFsZEhKNVVHOXphWFJwYjI0c0lHZGxiMjFsZEhKNVRtOXliV0ZzTENCblpXOXRaWFJ5ZVZacFpYZEVhWElzSUdkbGIyMWxkSEo1UTJ4bFlYSmpiMkYwVG05eWJXRnNMQ0J0WVhSbGNtbGhiQ3dnY21WbWJHVmpkR1ZrVEdsbmFIUWdLVHNLQ1gwS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZaVzVrQ2lObGJtUnBaZ29qYVdZZ0tDQk9WVTFmVTFCUFZGOU1TVWRJVkZNZ1BpQXdJQ2tnSmlZZ1pHVm1hVzVsWkNnZ1VrVmZSR2x5WldOMElDa0tDVk53YjNSTWFXZG9kQ0J6Y0c5MFRHbG5hSFE3Q2dsMlpXTTBJSE53YjNSRGIyeHZjanNLQ1habFl6TWdjM0J2ZEV4cFoyaDBRMjl2Y21RN0NnbGliMjlzSUdsdVUzQnZkRXhwWjJoMFRXRndPd29KSTJsbUlHUmxabWx1WldRb0lGVlRSVjlUU0VGRVQxZE5RVkFnS1NBbUppQk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pVM0J2ZEV4cFoyaDBVMmhoWkc5M0lITndiM1JNYVdkb2RGTm9ZV1J2ZHpzS0NTTmxibVJwWmdvSkkzQnlZV2R0WVNCMWJuSnZiR3hmYkc5dmNGOXpkR0Z5ZEFvSlptOXlJQ2dnYVc1MElHa2dQU0F3T3lCcElEd2dUbFZOWDFOUVQxUmZURWxIU0ZSVE95QnBJQ3NySUNrZ2V3b0pDWE53YjNSTWFXZG9kQ0E5SUhOd2IzUk1hV2RvZEhOYklHa2dYVHNLQ1FsblpYUlRjRzkwVEdsbmFIUkpibVp2S0NCemNHOTBUR2xuYUhRc0lHZGxiMjFsZEhKNVVHOXphWFJwYjI0c0lHUnBjbVZqZEV4cFoyaDBJQ2s3Q2drSkkybG1JQ2dnVlU1U1QweE1SVVJmVEU5UFVGOUpUa1JGV0NBOElFNVZUVjlUVUU5VVgweEpSMGhVWDFOSVFVUlBWMU5mVjBsVVNGOU5RVkJUSUNrS0NRa2paR1ZtYVc1bElGTlFUMVJmVEVsSFNGUmZUVUZRWDBsT1JFVllJRlZPVWs5TVRFVkVYMHhQVDFCZlNVNUVSVmdLQ1FralpXeHBaaUFvSUZWT1VrOU1URVZFWDB4UFQxQmZTVTVFUlZnZ1BDQk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUNrS0NRa2paR1ZtYVc1bElGTlFUMVJmVEVsSFNGUmZUVUZRWDBsT1JFVllJRTVWVFY5VFVFOVVYMHhKUjBoVVgwMUJVRk1LQ1FralpXeHpaUW9KQ1NOa1pXWnBibVVnVTFCUFZGOU1TVWRJVkY5TlFWQmZTVTVFUlZnZ0tDQlZUbEpQVEV4RlJGOU1UMDlRWDBsT1JFVllJQzBnVGxWTlgxTlFUMVJmVEVsSFNGUmZVMGhCUkU5WFV5QXJJRTVWVFY5VFVFOVVYMHhKUjBoVVgxTklRVVJQVjFOZlYwbFVTRjlOUVZCVElDa0tDUWtqWlc1a2FXWUtDUWtqYVdZZ0tDQlRVRTlVWDB4SlIwaFVYMDFCVUY5SlRrUkZXQ0E4SUU1VlRWOVRVRTlVWDB4SlIwaFVYMDFCVUZNZ0tRb0pDUWx6Y0c5MFRHbG5hSFJEYjI5eVpDQTlJSFpUY0c5MFRHbG5hSFJEYjI5eVpGc2dhU0JkTG5oNWVpQXZJSFpUY0c5MFRHbG5hSFJEYjI5eVpGc2dhU0JkTG5jN0Nna0pDV2x1VTNCdmRFeHBaMmgwVFdGd0lEMGdZV3hzS0NCc1pYTnpWR2hoYmlnZ1lXSnpLQ0J6Y0c5MFRHbG5hSFJEYjI5eVpDQXFJREl1SUMwZ01TNGdLU3dnZG1Wak15Z2dNUzR3SUNrZ0tTQXBPd29KQ1FsemNHOTBRMjlzYjNJZ1BTQjBaWGgwZFhKbE1rUW9JSE53YjNSTWFXZG9kRTFoY0ZzZ1UxQlBWRjlNU1VkSVZGOU5RVkJmU1U1RVJWZ2dYU3dnYzNCdmRFeHBaMmgwUTI5dmNtUXVlSGtnS1RzS0NRa0paR2x5WldOMFRHbG5hSFF1WTI5c2IzSWdQU0JwYmxOd2IzUk1hV2RvZEUxaGNDQS9JR1JwY21WamRFeHBaMmgwTG1OdmJHOXlJQ29nYzNCdmRFTnZiRzl5TG5KbllpQTZJR1JwY21WamRFeHBaMmgwTG1OdmJHOXlPd29KQ1NObGJtUnBaZ29KQ1NOMWJtUmxaaUJUVUU5VVgweEpSMGhVWDAxQlVGOUpUa1JGV0FvSkNTTnBaaUJrWldacGJtVmtLQ0JWVTBWZlUwaEJSRTlYVFVGUUlDa2dKaVlnS0NCVlRsSlBURXhGUkY5TVQwOVFYMGxPUkVWWUlEd2dUbFZOWDFOUVQxUmZURWxIU0ZSZlUwaEJSRTlYVXlBcENna0pjM0J2ZEV4cFoyaDBVMmhoWkc5M0lEMGdjM0J2ZEV4cFoyaDBVMmhoWkc5M2Mxc2dhU0JkT3dvSkNXUnBjbVZqZEV4cFoyaDBMbU52Ykc5eUlDbzlJQ2dnWkdseVpXTjBUR2xuYUhRdWRtbHphV0pzWlNBbUppQnlaV05sYVhabFUyaGhaRzkzSUNrZ1B5Qm5aWFJUYUdGa2IzY29JSE53YjNSVGFHRmtiM2ROWVhCYklHa2dYU3dnYzNCdmRFeHBaMmgwVTJoaFpHOTNMbk5vWVdSdmQwMWhjRk5wZW1Vc0lITndiM1JNYVdkb2RGTm9ZV1J2ZHk1emFHRmtiM2RDYVdGekxDQnpjRzkwVEdsbmFIUlRhR0ZrYjNjdWMyaGhaRzkzVW1Ga2FYVnpMQ0IyVTNCdmRFeHBaMmgwUTI5dmNtUmJJR2tnWFNBcElEb2dNUzR3T3dvSkNTTmxibVJwWmdvSkNWSkZYMFJwY21WamRDZ2daR2x5WldOMFRHbG5hSFFzSUdkbGIyMWxkSEo1VUc5emFYUnBiMjRzSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JuWlc5dFpYUnllVlpwWlhkRWFYSXNJR2RsYjIxbGRISjVRMnhsWVhKamIyRjBUbTl5YldGc0xDQnRZWFJsY21saGJDd2djbVZtYkdWamRHVmtUR2xuYUhRZ0tUc0tDWDBLQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZlpXNWtDaU5sYm1ScFpnb2phV1lnS0NCT1ZVMWZSRWxTWDB4SlIwaFVVeUErSURBZ0tTQW1KaUJrWldacGJtVmtLQ0JTUlY5RWFYSmxZM1FnS1FvSlJHbHlaV04wYVc5dVlXeE1hV2RvZENCa2FYSmxZM1JwYjI1aGJFeHBaMmgwT3dvSkkybG1JR1JsWm1sdVpXUW9JRlZUUlY5VFNFRkVUMWROUVZBZ0tTQW1KaUJPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNZ1BpQXdDZ2xFYVhKbFkzUnBiMjVoYkV4cFoyaDBVMmhoWkc5M0lHUnBjbVZqZEdsdmJtRnNUR2xuYUhSVGFHRmtiM2M3Q2dralpXNWthV1lLQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZmMzUmhjblFLQ1dadmNpQW9JR2x1ZENCcElEMGdNRHNnYVNBOElFNVZUVjlFU1ZKZlRFbEhTRlJUT3lCcElDc3JJQ2tnZXdvSkNXUnBjbVZqZEdsdmJtRnNUR2xuYUhRZ1BTQmthWEpsWTNScGIyNWhiRXhwWjJoMGMxc2dhU0JkT3dvSkNXZGxkRVJwY21WamRHbHZibUZzVEdsbmFIUkpibVp2S0NCa2FYSmxZM1JwYjI1aGJFeHBaMmgwTENCa2FYSmxZM1JNYVdkb2RDQXBPd29KQ1NOcFppQmtaV1pwYm1Wa0tDQlZVMFZmVTBoQlJFOVhUVUZRSUNrZ0ppWWdLQ0JWVGxKUFRFeEZSRjlNVDA5UVgwbE9SRVZZSUR3Z1RsVk5YMFJKVWw5TVNVZElWRjlUU0VGRVQxZFRJQ2tLQ1Fsa2FYSmxZM1JwYjI1aGJFeHBaMmgwVTJoaFpHOTNJRDBnWkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmQzTmJJR2tnWFRzS0NRbGthWEpsWTNSTWFXZG9kQzVqYjJ4dmNpQXFQU0FvSUdScGNtVmpkRXhwWjJoMExuWnBjMmxpYkdVZ0ppWWdjbVZqWldsMlpWTm9ZV1J2ZHlBcElEOGdaMlYwVTJoaFpHOTNLQ0JrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoY0ZzZ2FTQmRMQ0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBVMmhoWkc5M0xuTm9ZV1J2ZDAxaGNGTnBlbVVzSUdScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzY3VjMmhoWkc5M1FtbGhjeXdnWkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmR5NXphR0ZrYjNkU1lXUnBkWE1zSUhaRWFYSmxZM1JwYjI1aGJGTm9ZV1J2ZDBOdmIzSmtXeUJwSUYwZ0tTQTZJREV1TURzS0NRa2paVzVrYVdZS0NRbFNSVjlFYVhKbFkzUW9JR1JwY21WamRFeHBaMmgwTENCblpXOXRaWFJ5ZVZCdmMybDBhVzl1TENCblpXOXRaWFJ5ZVU1dmNtMWhiQ3dnWjJWdmJXVjBjbmxXYVdWM1JHbHlMQ0JuWlc5dFpYUnllVU5zWldGeVkyOWhkRTV2Y20xaGJDd2diV0YwWlhKcFlXd3NJSEpsWm14bFkzUmxaRXhwWjJoMElDazdDZ2w5Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gyVnVaQW9qWlc1a2FXWUtJMmxtSUNnZ1RsVk5YMUpGUTFSZlFWSkZRVjlNU1VkSVZGTWdQaUF3SUNrZ0ppWWdaR1ZtYVc1bFpDZ2dVa1ZmUkdseVpXTjBYMUpsWTNSQmNtVmhJQ2tLQ1ZKbFkzUkJjbVZoVEdsbmFIUWdjbVZqZEVGeVpXRk1hV2RvZERzS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZjM1JoY25RS0NXWnZjaUFvSUdsdWRDQnBJRDBnTURzZ2FTQThJRTVWVFY5U1JVTlVYMEZTUlVGZlRFbEhTRlJUT3lCcElDc3JJQ2tnZXdvSkNYSmxZM1JCY21WaFRHbG5hSFFnUFNCeVpXTjBRWEpsWVV4cFoyaDBjMXNnYVNCZE93b0pDVkpGWDBScGNtVmpkRjlTWldOMFFYSmxZU2dnY21WamRFRnlaV0ZNYVdkb2RDd2daMlZ2YldWMGNubFFiM05wZEdsdmJpd2daMlZ2YldWMGNubE9iM0p0WVd3c0lHZGxiMjFsZEhKNVZtbGxkMFJwY2l3Z1oyVnZiV1YwY25sRGJHVmhjbU52WVhST2IzSnRZV3dzSUcxaGRHVnlhV0ZzTENCeVpXWnNaV04wWldSTWFXZG9kQ0FwT3dvSmZRb0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjlsYm1RS0kyVnVaR2xtQ2lOcFppQmtaV1pwYm1Wa0tDQlNSVjlKYm1ScGNtVmpkRVJwWm1aMWMyVWdLUW9KZG1Wak15QnBZbXhKY25KaFpHbGhibU5sSUQwZ2RtVmpNeWdnTUM0d0lDazdDZ2wyWldNeklHbHljbUZrYVdGdVkyVWdQU0JuWlhSQmJXSnBaVzUwVEdsbmFIUkpjbkpoWkdsaGJtTmxLQ0JoYldKcFpXNTBUR2xuYUhSRGIyeHZjaUFwT3dvSkkybG1JR1JsWm1sdVpXUW9JRlZUUlY5TVNVZElWRjlRVWs5Q1JWTWdLUW9KQ1dseWNtRmthV0Z1WTJVZ0t6MGdaMlYwVEdsbmFIUlFjbTlpWlVseWNtRmthV0Z1WTJVb0lHeHBaMmgwVUhKdlltVXNJR2RsYjIxbGRISjVUbTl5YldGc0lDazdDZ2tqWlc1a2FXWUtDU05wWmlBb0lFNVZUVjlJUlUxSlgweEpSMGhVVXlBK0lEQWdLUW9KQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZmMzUmhjblFLQ1FsbWIzSWdLQ0JwYm5RZ2FTQTlJREE3SUdrZ1BDQk9WVTFmU0VWTlNWOU1TVWRJVkZNN0lHa2dLeXNnS1NCN0Nna0pDV2x5Y21Ga2FXRnVZMlVnS3owZ1oyVjBTR1Z0YVhOd2FHVnlaVXhwWjJoMFNYSnlZV1JwWVc1alpTZ2dhR1Z0YVhOd2FHVnlaVXhwWjJoMGMxc2dhU0JkTENCblpXOXRaWFJ5ZVU1dmNtMWhiQ0FwT3dvSkNYMEtDUWtqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDJWdVpBb0pJMlZ1WkdsbUNpTmxibVJwWmdvamFXWWdaR1ZtYVc1bFpDZ2dVa1ZmU1c1a2FYSmxZM1JUY0dWamRXeGhjaUFwQ2dsMlpXTXpJSEpoWkdsaGJtTmxJRDBnZG1Wak15Z2dNQzR3SUNrN0NnbDJaV016SUdOc1pXRnlZMjloZEZKaFpHbGhibU5sSUQwZ2RtVmpNeWdnTUM0d0lDazdDaU5sYm1ScFptQXNJR0p0SUQwZ1lDTnBaaUJrWldacGJtVmtLQ0JTUlY5SmJtUnBjbVZqZEVScFptWjFjMlVnS1FvSkkybG1aR1ZtSUZWVFJWOU1TVWRJVkUxQlVBb0pDWFpsWXpRZ2JHbG5hSFJOWVhCVVpYaGxiQ0E5SUhSbGVIUjFjbVV5UkNnZ2JHbG5hSFJOWVhBc0lIWk1hV2RvZEUxaGNGVjJJQ2s3Q2drSmRtVmpNeUJzYVdkb2RFMWhjRWx5Y21Ga2FXRnVZMlVnUFNCc2FXZG9kRTFoY0ZSbGVHVnNMbkpuWWlBcUlHeHBaMmgwVFdGd1NXNTBaVzV6YVhSNU93b0pDV2x5Y21Ga2FXRnVZMlVnS3owZ2JHbG5hSFJOWVhCSmNuSmhaR2xoYm1ObE93b0pJMlZ1WkdsbUNna2phV1lnWkdWbWFXNWxaQ2dnVlZORlgwVk9WazFCVUNBcElDWW1JR1JsWm1sdVpXUW9JRk5VUVU1RVFWSkVJQ2tnSmlZZ1pHVm1hVzVsWkNnZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlY5VlZpQXBDZ2tKYVdKc1NYSnlZV1JwWVc1alpTQXJQU0JuWlhSSlFreEpjbkpoWkdsaGJtTmxLQ0JuWlc5dFpYUnllVTV2Y20xaGJDQXBPd29KSTJWdVpHbG1DaU5sYm1ScFpnb2phV1lnWkdWbWFXNWxaQ2dnVlZORlgwVk9WazFCVUNBcElDWW1JR1JsWm1sdVpXUW9JRkpGWDBsdVpHbHlaV04wVTNCbFkzVnNZWElnS1FvSkkybG1aR1ZtSUZWVFJWOUJUa2xUVDFSU1QxQlpDZ2tKY21Ga2FXRnVZMlVnS3owZ1oyVjBTVUpNUVc1cGMyOTBjbTl3ZVZKaFpHbGhibU5sS0NCblpXOXRaWFJ5ZVZacFpYZEVhWElzSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0J0WVhSbGNtbGhiQzV5YjNWbmFHNWxjM01zSUcxaGRHVnlhV0ZzTG1GdWFYTnZkSEp2Y0hsQ0xDQnRZWFJsY21saGJDNWhibWx6YjNSeWIzQjVJQ2s3Q2dralpXeHpaUW9KQ1hKaFpHbGhibU5sSUNzOUlHZGxkRWxDVEZKaFpHbGhibU5sS0NCblpXOXRaWFJ5ZVZacFpYZEVhWElzSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0J0WVhSbGNtbGhiQzV5YjNWbmFHNWxjM01nS1RzS0NTTmxibVJwWmdvSkkybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUUtDUWxqYkdWaGNtTnZZWFJTWVdScFlXNWpaU0FyUFNCblpYUkpRa3hTWVdScFlXNWpaU2dnWjJWdmJXVjBjbmxXYVdWM1JHbHlMQ0JuWlc5dFpYUnllVU5zWldGeVkyOWhkRTV2Y20xaGJDd2diV0YwWlhKcFlXd3VZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpJQ2s3Q2dralpXNWthV1lLSTJWdVpHbG1ZQ3dnUlcwZ1BTQmdJMmxtSUdSbFptbHVaV1FvSUZKRlgwbHVaR2x5WldOMFJHbG1ablZ6WlNBcENnbFNSVjlKYm1ScGNtVmpkRVJwWm1aMWMyVW9JR2x5Y21Ga2FXRnVZMlVzSUdkbGIyMWxkSEo1VUc5emFYUnBiMjRzSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JuWlc5dFpYUnllVlpwWlhkRWFYSXNJR2RsYjIxbGRISjVRMnhsWVhKamIyRjBUbTl5YldGc0xDQnRZWFJsY21saGJDd2djbVZtYkdWamRHVmtUR2xuYUhRZ0tUc0tJMlZ1WkdsbUNpTnBaaUJrWldacGJtVmtLQ0JTUlY5SmJtUnBjbVZqZEZOd1pXTjFiR0Z5SUNrS0NWSkZYMGx1WkdseVpXTjBVM0JsWTNWc1lYSW9JSEpoWkdsaGJtTmxMQ0JwWW14SmNuSmhaR2xoYm1ObExDQmpiR1ZoY21OdllYUlNZV1JwWVc1alpTd2daMlZ2YldWMGNubFFiM05wZEdsdmJpd2daMlZ2YldWMGNubE9iM0p0WVd3c0lHZGxiMjFsZEhKNVZtbGxkMFJwY2l3Z1oyVnZiV1YwY25sRGJHVmhjbU52WVhST2IzSnRZV3dzSUcxaGRHVnlhV0ZzTENCeVpXWnNaV04wWldSTWFXZG9kQ0FwT3dvalpXNWthV1pnTENCVWJTQTlJR0FqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMHhQUjBSRlVGUklRbFZHSUNrZ0ppWWdaR1ZtYVc1bFpDZ2dWVk5GWDB4UFIwUkZVRlJJUWxWR1gwVllWQ0FwQ2dsbmJGOUdjbUZuUkdWd2RHaEZXRlFnUFNCMlNYTlFaWEp6Y0dWamRHbDJaU0E5UFNBd0xqQWdQeUJuYkY5R2NtRm5RMjl2Y21RdWVpQTZJR3h2WnpJb0lIWkdjbUZuUkdWd2RHZ2dLU0FxSUd4dlowUmxjSFJvUW5WbVJrTWdLaUF3TGpVN0NpTmxibVJwWm1Bc0lIZHRJRDBnWUNOcFppQmtaV1pwYm1Wa0tDQlZVMFZmVEU5SFJFVlFWRWhDVlVZZ0tTQW1KaUJrWldacGJtVmtLQ0JWVTBWZlRFOUhSRVZRVkVoQ1ZVWmZSVmhVSUNrS0NYVnVhV1p2Y20wZ1pteHZZWFFnYkc5blJHVndkR2hDZFdaR1F6c0tDWFpoY25scGJtY2dabXh2WVhRZ2RrWnlZV2RFWlhCMGFEc0tDWFpoY25scGJtY2dabXh2WVhRZ2RrbHpVR1Z5YzNCbFkzUnBkbVU3Q2lObGJtUnBabUFzSUVGdElEMGdZQ05wWm1SbFppQlZVMFZmVEU5SFJFVlFWRWhDVlVZS0NTTnBabVJsWmlCVlUwVmZURTlIUkVWUVZFaENWVVpmUlZoVUNna0pkbUZ5ZVdsdVp5Qm1iRzloZENCMlJuSmhaMFJsY0hSb093b0pDWFpoY25scGJtY2dabXh2WVhRZ2RrbHpVR1Z5YzNCbFkzUnBkbVU3Q2dralpXeHpaUW9KQ1hWdWFXWnZjbTBnWm14dllYUWdiRzluUkdWd2RHaENkV1pHUXpzS0NTTmxibVJwWmdvalpXNWthV1pnTENCU2JTQTlJR0FqYVdaa1pXWWdWVk5GWDB4UFIwUkZVRlJJUWxWR0Nna2phV1prWldZZ1ZWTkZYMHhQUjBSRlVGUklRbFZHWDBWWVZBb0pDWFpHY21GblJHVndkR2dnUFNBeExqQWdLeUJuYkY5UWIzTnBkR2x2Ymk1M093b0pDWFpKYzFCbGNuTndaV04wYVhabElEMGdabXh2WVhRb0lHbHpVR1Z5YzNCbFkzUnBkbVZOWVhSeWFYZ29JSEJ5YjJwbFkzUnBiMjVOWVhSeWFYZ2dLU0FwT3dvSkkyVnNjMlVLQ1FscFppQW9JR2x6VUdWeWMzQmxZM1JwZG1WTllYUnlhWGdvSUhCeWIycGxZM1JwYjI1TllYUnlhWGdnS1NBcElIc0tDUWtKWjJ4ZlVHOXphWFJwYjI0dWVpQTlJR3h2WnpJb0lHMWhlQ2dnUlZCVFNVeFBUaXdnWjJ4ZlVHOXphWFJwYjI0dWR5QXJJREV1TUNBcElDa2dLaUJzYjJkRVpYQjBhRUoxWmtaRElDMGdNUzR3T3dvSkNRbG5iRjlRYjNOcGRHbHZiaTU2SUNvOUlHZHNYMUJ2YzJsMGFXOXVMbmM3Q2drSmZRb0pJMlZ1WkdsbUNpTmxibVJwWm1Bc0lFTnRJRDBnWUNOcFptUmxaaUJWVTBWZlRVRlFDZ2wyWldNMElITmhiWEJzWldSRWFXWm1kWE5sUTI5c2IzSWdQU0IwWlhoMGRYSmxNa1FvSUcxaGNDd2dkazFoY0ZWMklDazdDZ2tqYVdaa1pXWWdSRVZEVDBSRlgxWkpSRVZQWDFSRldGUlZVa1VLQ1FsellXMXdiR1ZrUkdsbVpuVnpaVU52Ykc5eUlEMGdkbVZqTkNnZ2JXbDRLQ0J3YjNjb0lITmhiWEJzWldSRWFXWm1kWE5sUTI5c2IzSXVjbWRpSUNvZ01DNDVORGM0TmpjeU9UZzJJQ3NnZG1Wak15Z2dNQzR3TlRJeE16STNNREUwSUNrc0lIWmxZek1vSURJdU5DQXBJQ2tzSUhOaGJYQnNaV1JFYVdabWRYTmxRMjlzYjNJdWNtZGlJQ29nTUM0d056Y3pPVGt6T0RBNExDQjJaV016S0NCc1pYTnpWR2hoYmtWeGRXRnNLQ0J6WVcxd2JHVmtSR2xtWm5WelpVTnZiRzl5TG5Kbllpd2dkbVZqTXlnZ01DNHdOREEwTlNBcElDa2dLU0FwTENCellXMXdiR1ZrUkdsbVpuVnpaVU52Ykc5eUxuY2dLVHNLQ1FvSkkyVnVaR2xtQ2dsa2FXWm1kWE5sUTI5c2IzSWdLajBnYzJGdGNHeGxaRVJwWm1aMWMyVkRiMnh2Y2pzS0kyVnVaR2xtWUN3Z1VHMGdQU0JnSTJsbVpHVm1JRlZUUlY5TlFWQUtDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJRzFoY0RzS0kyVnVaR2xtWUN3Z1RHMGdQU0JnSTJsbUlHUmxabWx1WldRb0lGVlRSVjlOUVZBZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlFVeFFTRUZOUVZBZ0tRb0pJMmxtSUdSbFptbHVaV1FvSUZWVFJWOVFUMGxPVkZOZlZWWWdLUW9KQ1habFl6SWdkWFlnUFNCMlZYWTdDZ2tqWld4elpRb0pDWFpsWXpJZ2RYWWdQU0FvSUhWMlZISmhibk5tYjNKdElDb2dkbVZqTXlnZ1oyeGZVRzlwYm5SRGIyOXlaQzU0TENBeExqQWdMU0JuYkY5UWIybHVkRU52YjNKa0xua3NJREVnS1NBcExuaDVPd29KSTJWdVpHbG1DaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMDFCVUFvSlpHbG1ablZ6WlVOdmJHOXlJQ285SUhSbGVIUjFjbVV5UkNnZ2JXRndMQ0IxZGlBcE93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOUJURkJJUVUxQlVBb0paR2xtWm5WelpVTnZiRzl5TG1FZ0tqMGdkR1Y0ZEhWeVpUSkVLQ0JoYkhCb1lVMWhjQ3dnZFhZZ0tTNW5Pd29qWlc1a2FXWmdMQ0JKYlNBOUlHQWphV1lnWkdWbWFXNWxaQ2dnVlZORlgxQlBTVTVVVTE5VlZpQXBDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RsVjJPd29qWld4elpRb0pJMmxtSUdSbFptbHVaV1FvSUZWVFJWOU5RVkFnS1NCOGZDQmtaV1pwYm1Wa0tDQlZVMFZmUVV4UVNFRk5RVkFnS1FvSkNYVnVhV1p2Y20wZ2JXRjBNeUIxZGxSeVlXNXpabTl5YlRzS0NTTmxibVJwWmdvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5TlFWQUtDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJRzFoY0RzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVeFFTRUZOUVZBS0NYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlHRnNjR2hoVFdGd093b2paVzVrYVdaZ0xDQlZiU0E5SUdCbWJHOWhkQ0J0WlhSaGJHNWxjM05HWVdOMGIzSWdQU0J0WlhSaGJHNWxjM003Q2lOcFptUmxaaUJWVTBWZlRVVlVRVXhPUlZOVFRVRlFDZ2wyWldNMElIUmxlR1ZzVFdWMFlXeHVaWE56SUQwZ2RHVjRkSFZ5WlRKRUtDQnRaWFJoYkc1bGMzTk5ZWEFzSUhaTlpYUmhiRzVsYzNOTllYQlZkaUFwT3dvSmJXVjBZV3h1WlhOelJtRmpkRzl5SUNvOUlIUmxlR1ZzVFdWMFlXeHVaWE56TG1JN0NpTmxibVJwWm1Bc0lFUnRJRDBnWUNOcFptUmxaaUJWVTBWZlRVVlVRVXhPUlZOVFRVRlFDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0J0WlhSaGJHNWxjM05OWVhBN0NpTmxibVJwWm1Bc0lFNXRJRDBnWUNOcFppQmtaV1pwYm1Wa0tDQlZVMFZmVFU5U1VFaERUMHhQVWxNZ0tTQW1KaUJrWldacGJtVmtLQ0JOVDFKUVNGUkJVa2RGVkZOZlZFVllWRlZTUlNBcENnbDJRMjlzYjNJZ0tqMGdiVzl5Y0doVVlYSm5aWFJDWVhObFNXNW1iSFZsYm1ObE93b0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVFU5U1VFaFVRVkpIUlZSVFgwTlBWVTVVT3lCcElDc3JJQ2tnZXdvSkNTTnBaaUJrWldacGJtVmtLQ0JWVTBWZlEwOU1UMUpmUVV4UVNFRWdLUW9KQ1FscFppQW9JRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ2FTQmRJQ0U5SURBdU1DQXBJSFpEYjJ4dmNpQXJQU0JuWlhSTmIzSndhQ2dnWjJ4ZlZtVnlkR1Y0U1VRc0lHa3NJRElnS1NBcUlHMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjMXNnYVNCZE93b0pDU05sYkdsbUlHUmxabWx1WldRb0lGVlRSVjlEVDB4UFVpQXBDZ2tKQ1dsbUlDZ2diVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6V3lCcElGMGdJVDBnTUM0d0lDa2dka052Ykc5eUlDczlJR2RsZEUxdmNuQm9LQ0JuYkY5V1pYSjBaWGhKUkN3Z2FTd2dNaUFwTG5KbllpQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ2FTQmRPd29KQ1NObGJtUnBaZ29KZlFvalpXNWthV1pnTENCUGJTQTlJR0FqYVdaa1pXWWdWVk5GWDAxUFVsQklUazlTVFVGTVV3b0piMkpxWldOMFRtOXliV0ZzSUNvOUlHMXZjbkJvVkdGeVoyVjBRbUZ6WlVsdVpteDFaVzVqWlRzS0NTTnBabVJsWmlCTlQxSlFTRlJCVWtkRlZGTmZWRVZZVkZWU1JRb0pDV1p2Y2lBb0lHbHVkQ0JwSUQwZ01Ec2dhU0E4SUUxUFVsQklWRUZTUjBWVVUxOURUMVZPVkRzZ2FTQXJLeUFwSUhzS0NRa0phV1lnS0NCdGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTmJJR2tnWFNBaFBTQXdMakFnS1NCdlltcGxZM1JPYjNKdFlXd2dLejBnWjJWMFRXOXljR2dvSUdkc1gxWmxjblJsZUVsRUxDQnBMQ0F4SUNrdWVIbDZJQ29nYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeld5QnBJRjA3Q2drSmZRb0pJMlZzYzJVS0NRbHZZbXBsWTNST2IzSnRZV3dnS3owZ2JXOXljR2hPYjNKdFlXd3dJQ29nYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeld5QXdJRjA3Q2drSmIySnFaV04wVG05eWJXRnNJQ3M5SUcxdmNuQm9UbTl5YldGc01TQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ01TQmRPd29KQ1c5aWFtVmpkRTV2Y20xaGJDQXJQU0J0YjNKd2FFNXZjbTFoYkRJZ0tpQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSURJZ1hUc0tDUWx2WW1wbFkzUk9iM0p0WVd3Z0t6MGdiVzl5Y0doT2IzSnRZV3d6SUNvZ2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpXeUF6SUYwN0Nna2paVzVrYVdZS0kyVnVaR2xtWUN3Z1JtMGdQU0JnSTJsbVpHVm1JRlZUUlY5TlQxSlFTRlJCVWtkRlZGTUtDWFZ1YVdadmNtMGdabXh2WVhRZ2JXOXljR2hVWVhKblpYUkNZWE5sU1c1bWJIVmxibU5sT3dvSkkybG1aR1ZtSUUxUFVsQklWRUZTUjBWVVUxOVVSVmhVVlZKRkNna0pkVzVwWm05eWJTQm1iRzloZENCdGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTmJJRTFQVWxCSVZFRlNSMFZVVTE5RFQxVk9WQ0JkT3dvSkNYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRVFYSnlZWGtnYlc5eWNHaFVZWEpuWlhSelZHVjRkSFZ5WlRzS0NRbDFibWxtYjNKdElHbDJaV015SUcxdmNuQm9WR0Z5WjJWMGMxUmxlSFIxY21WVGFYcGxPd29KQ1habFl6UWdaMlYwVFc5eWNHZ29JR052Ym5OMElHbHVJR2x1ZENCMlpYSjBaWGhKYm1SbGVDd2dZMjl1YzNRZ2FXNGdhVzUwSUcxdmNuQm9WR0Z5WjJWMFNXNWtaWGdzSUdOdmJuTjBJR2x1SUdsdWRDQnZabVp6WlhRZ0tTQjdDZ2tKQ1dsdWRDQjBaWGhsYkVsdVpHVjRJRDBnZG1WeWRHVjRTVzVrWlhnZ0tpQk5UMUpRU0ZSQlVrZEZWRk5mVkVWWVZGVlNSVjlUVkZKSlJFVWdLeUJ2Wm1aelpYUTdDZ2tKQ1dsdWRDQjVJRDBnZEdWNFpXeEpibVJsZUNBdklHMXZjbkJvVkdGeVoyVjBjMVJsZUhSMWNtVlRhWHBsTG5nN0Nna0pDV2x1ZENCNElEMGdkR1Y0Wld4SmJtUmxlQ0F0SUhrZ0tpQnRiM0p3YUZSaGNtZGxkSE5VWlhoMGRYSmxVMmw2WlM1NE93b0pDUWxwZG1Wak15QnRiM0p3YUZWV0lEMGdhWFpsWXpNb0lIZ3NJSGtzSUcxdmNuQm9WR0Z5WjJWMFNXNWtaWGdnS1RzS0NRa0pjbVYwZFhKdUlIUmxlR1ZzUm1WMFkyZ29JRzF2Y25Cb1ZHRnlaMlYwYzFSbGVIUjFjbVVzSUcxdmNuQm9WVllzSURBZ0tUc0tDUWw5Q2dralpXeHpaUW9KQ1NOcFptNWtaV1lnVlZORlgwMVBVbEJJVGs5U1RVRk1Vd29KQ1FsMWJtbG1iM0p0SUdac2IyRjBJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ09DQmRPd29KQ1NObGJITmxDZ2tKQ1hWdWFXWnZjbTBnWm14dllYUWdiVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6V3lBMElGMDdDZ2tKSTJWdVpHbG1DZ2tqWlc1a2FXWUtJMlZ1WkdsbVlDd2dRbTBnUFNCZ0kybG1aR1ZtSUZWVFJWOU5UMUpRU0ZSQlVrZEZWRk1LQ1hSeVlXNXpabTl5YldWa0lDbzlJRzF2Y25Cb1ZHRnlaMlYwUW1GelpVbHVabXgxWlc1alpUc0tDU05wWm1SbFppQk5UMUpRU0ZSQlVrZEZWRk5mVkVWWVZGVlNSUW9KQ1dadmNpQW9JR2x1ZENCcElEMGdNRHNnYVNBOElFMVBVbEJJVkVGU1IwVlVVMTlEVDFWT1ZEc2dhU0FyS3lBcElIc0tDUWtKYVdZZ0tDQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSUdrZ1hTQWhQU0F3TGpBZ0tTQjBjbUZ1YzJadmNtMWxaQ0FyUFNCblpYUk5iM0p3YUNnZ1oyeGZWbVZ5ZEdWNFNVUXNJR2tzSURBZ0tTNTRlWG9nS2lCdGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTmJJR2tnWFRzS0NRbDlDZ2tqWld4elpRb0pDWFJ5WVc1elptOXliV1ZrSUNzOUlHMXZjbkJvVkdGeVoyVjBNQ0FxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dNQ0JkT3dvSkNYUnlZVzV6Wm05eWJXVmtJQ3M5SUcxdmNuQm9WR0Z5WjJWME1TQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ01TQmRPd29KQ1hSeVlXNXpabTl5YldWa0lDczlJRzF2Y25Cb1ZHRnlaMlYwTWlBcUlHMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjMXNnTWlCZE93b0pDWFJ5WVc1elptOXliV1ZrSUNzOUlHMXZjbkJvVkdGeVoyVjBNeUFxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dNeUJkT3dvSkNTTnBabTVrWldZZ1ZWTkZYMDFQVWxCSVRrOVNUVUZNVXdvSkNRbDBjbUZ1YzJadmNtMWxaQ0FyUFNCdGIzSndhRlJoY21kbGREUWdLaUJ0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhOYklEUWdYVHNLQ1FrSmRISmhibk5tYjNKdFpXUWdLejBnYlc5eWNHaFVZWEpuWlhRMUlDb2diVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6V3lBMUlGMDdDZ2tKQ1hSeVlXNXpabTl5YldWa0lDczlJRzF2Y25Cb1ZHRnlaMlYwTmlBcUlHMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjMXNnTmlCZE93b0pDUWwwY21GdWMyWnZjbTFsWkNBclBTQnRiM0p3YUZSaGNtZGxkRGNnS2lCdGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTmJJRGNnWFRzS0NRa2paVzVrYVdZS0NTTmxibVJwWmdvalpXNWthV1pnTENCNmJTQTlJR0JtYkc5aGRDQm1ZV05sUkdseVpXTjBhVzl1SUQwZ1oyeGZSbkp2Ym5SR1lXTnBibWNnUHlBeExqQWdPaUF0SURFdU1Ec0tJMmxtWkdWbUlFWk1RVlJmVTBoQlJFVkVDZ2wyWldNeklHWmtlQ0E5SUdSR1pIZ29JSFpXYVdWM1VHOXphWFJwYjI0Z0tUc0tDWFpsWXpNZ1ptUjVJRDBnWkVaa2VTZ2dkbFpwWlhkUWIzTnBkR2x2YmlBcE93b0pkbVZqTXlCdWIzSnRZV3dnUFNCdWIzSnRZV3hwZW1Vb0lHTnliM056S0NCbVpIZ3NJR1prZVNBcElDazdDaU5sYkhObENnbDJaV016SUc1dmNtMWhiQ0E5SUc1dmNtMWhiR2w2WlNnZ2RrNXZjbTFoYkNBcE93b0pJMmxtWkdWbUlFUlBWVUpNUlY5VFNVUkZSQW9KQ1c1dmNtMWhiQ0FxUFNCbVlXTmxSR2x5WldOMGFXOXVPd29KSTJWdVpHbG1DaU5sYm1ScFpnb2phV1lnWkdWbWFXNWxaQ2dnVlZORlgwNVBVazFCVEUxQlVGOVVRVTVIUlU1VVUxQkJRMFVnS1NCOGZDQmtaV1pwYm1Wa0tDQlZVMFZmUTB4RlFWSkRUMEZVWDA1UFVrMUJURTFCVUNBcElIeDhJR1JsWm1sdVpXUW9JRlZUUlY5QlRrbFRUMVJTVDFCWklDa0tDU05wWm1SbFppQlZVMFZmVkVGT1IwVk9WQW9KQ1cxaGRETWdkR0p1SUQwZ2JXRjBNeWdnYm05eWJXRnNhWHBsS0NCMlZHRnVaMlZ1ZENBcExDQnViM0p0WVd4cGVtVW9JSFpDYVhSaGJtZGxiblFnS1N3Z2JtOXliV0ZzSUNrN0Nna2paV3h6WlFvSkNXMWhkRE1nZEdKdUlEMGdaMlYwVkdGdVoyVnVkRVp5WVcxbEtDQXRJSFpXYVdWM1VHOXphWFJwYjI0c0lHNXZjbTFoYkN3S0NRa2phV1lnWkdWbWFXNWxaQ2dnVlZORlgwNVBVazFCVEUxQlVDQXBDZ2tKQ1haT2IzSnRZV3hOWVhCVmRnb0pDU05sYkdsbUlHUmxabWx1WldRb0lGVlRSVjlEVEVWQlVrTlBRVlJmVGs5U1RVRk1UVUZRSUNrS0NRa0pka05zWldGeVkyOWhkRTV2Y20xaGJFMWhjRlYyQ2drSkkyVnNjMlVLQ1FrSmRsVjJDZ2tKSTJWdVpHbG1DZ2tKS1RzS0NTTmxibVJwWmdvSkkybG1JR1JsWm1sdVpXUW9JRVJQVlVKTVJWOVRTVVJGUkNBcElDWW1JQ0VnWkdWbWFXNWxaQ2dnUmt4QlZGOVRTRUZFUlVRZ0tRb0pDWFJpYmxzd1hTQXFQU0JtWVdObFJHbHlaV04wYVc5dU93b0pDWFJpYmxzeFhTQXFQU0JtWVdObFJHbHlaV04wYVc5dU93b0pJMlZ1WkdsbUNpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwTk1SVUZTUTA5QlZGOU9UMUpOUVV4TlFWQUtDU05wWm1SbFppQlZVMFZmVkVGT1IwVk9WQW9KQ1cxaGRETWdkR0p1TWlBOUlHMWhkRE1vSUc1dmNtMWhiR2w2WlNnZ2RsUmhibWRsYm5RZ0tTd2dibTl5YldGc2FYcGxLQ0IyUW1sMFlXNW5aVzUwSUNrc0lHNXZjbTFoYkNBcE93b0pJMlZzYzJVS0NRbHRZWFF6SUhSaWJqSWdQU0JuWlhSVVlXNW5aVzUwUm5KaGJXVW9JQzBnZGxacFpYZFFiM05wZEdsdmJpd2dibTl5YldGc0xDQjJRMnhsWVhKamIyRjBUbTl5YldGc1RXRndWWFlnS1RzS0NTTmxibVJwWmdvSkkybG1JR1JsWm1sdVpXUW9JRVJQVlVKTVJWOVRTVVJGUkNBcElDWW1JQ0VnWkdWbWFXNWxaQ2dnUmt4QlZGOVRTRUZFUlVRZ0tRb0pDWFJpYmpKYk1GMGdLajBnWm1GalpVUnBjbVZqZEdsdmJqc0tDUWwwWW00eVd6RmRJQ285SUdaaFkyVkVhWEpsWTNScGIyNDdDZ2tqWlc1a2FXWUtJMlZ1WkdsbUNuWmxZek1nYm05dVVHVnlkSFZ5WW1Wa1RtOXliV0ZzSUQwZ2JtOXliV0ZzTzJBc0lGWnRJRDBnWUNOcFptUmxaaUJWVTBWZlRrOVNUVUZNVFVGUVgwOUNTa1ZEVkZOUVFVTkZDZ2x1YjNKdFlXd2dQU0IwWlhoMGRYSmxNa1FvSUc1dmNtMWhiRTFoY0N3Z2RrNXZjbTFoYkUxaGNGVjJJQ2t1ZUhsNklDb2dNaTR3SUMwZ01TNHdPd29KSTJsbVpHVm1JRVpNU1ZCZlUwbEVSVVFLQ1FsdWIzSnRZV3dnUFNBdElHNXZjbTFoYkRzS0NTTmxibVJwWmdvSkkybG1aR1ZtSUVSUFZVSk1SVjlUU1VSRlJBb0pDVzV2Y20xaGJDQTlJRzV2Y20xaGJDQXFJR1poWTJWRWFYSmxZM1JwYjI0N0Nna2paVzVrYVdZS0NXNXZjbTFoYkNBOUlHNXZjbTFoYkdsNlpTZ2dibTl5YldGc1RXRjBjbWw0SUNvZ2JtOXliV0ZzSUNrN0NpTmxiR2xtSUdSbFptbHVaV1FvSUZWVFJWOU9UMUpOUVV4TlFWQmZWRUZPUjBWT1ZGTlFRVU5GSUNrS0NYWmxZek1nYldGd1RpQTlJSFJsZUhSMWNtVXlSQ2dnYm05eWJXRnNUV0Z3TENCMlRtOXliV0ZzVFdGd1ZYWWdLUzU0ZVhvZ0tpQXlMakFnTFNBeExqQTdDZ2x0WVhCT0xuaDVJQ285SUc1dmNtMWhiRk5qWVd4bE93b0pibTl5YldGc0lEMGdibTl5YldGc2FYcGxLQ0IwWW00Z0tpQnRZWEJPSUNrN0NpTmxiR2xtSUdSbFptbHVaV1FvSUZWVFJWOUNWVTFRVFVGUUlDa0tDVzV2Y20xaGJDQTlJSEJsY25SMWNtSk9iM0p0WVd4QmNtSW9JQzBnZGxacFpYZFFiM05wZEdsdmJpd2dibTl5YldGc0xDQmtTR1I0ZVY5bWQyUW9LU3dnWm1GalpVUnBjbVZqZEdsdmJpQXBPd29qWlc1a2FXWmdMQ0JyYlNBOUlHQWphV1p1WkdWbUlFWk1RVlJmVTBoQlJFVkVDZ2wyWVhKNWFXNW5JSFpsWXpNZ2RrNXZjbTFoYkRzS0NTTnBabVJsWmlCVlUwVmZWRUZPUjBWT1ZBb0pDWFpoY25scGJtY2dkbVZqTXlCMlZHRnVaMlZ1ZERzS0NRbDJZWEo1YVc1bklIWmxZek1nZGtKcGRHRnVaMlZ1ZERzS0NTTmxibVJwWmdvalpXNWthV1pnTENCSWJTQTlJR0FqYVdadVpHVm1JRVpNUVZSZlUwaEJSRVZFQ2dsMllYSjVhVzVuSUhabFl6TWdkazV2Y20xaGJEc0tDU05wWm1SbFppQlZVMFZmVkVGT1IwVk9WQW9KQ1haaGNubHBibWNnZG1Wak15QjJWR0Z1WjJWdWREc0tDUWwyWVhKNWFXNW5JSFpsWXpNZ2RrSnBkR0Z1WjJWdWREc0tDU05sYm1ScFpnb2paVzVrYVdaZ0xDQkhiU0E5SUdBamFXWnVaR1ZtSUVaTVFWUmZVMGhCUkVWRUNnbDJUbTl5YldGc0lEMGdibTl5YldGc2FYcGxLQ0IwY21GdWMyWnZjbTFsWkU1dmNtMWhiQ0FwT3dvSkkybG1aR1ZtSUZWVFJWOVVRVTVIUlU1VUNna0pkbFJoYm1kbGJuUWdQU0J1YjNKdFlXeHBlbVVvSUhSeVlXNXpabTl5YldWa1ZHRnVaMlZ1ZENBcE93b0pDWFpDYVhSaGJtZGxiblFnUFNCdWIzSnRZV3hwZW1Vb0lHTnliM056S0NCMlRtOXliV0ZzTENCMlZHRnVaMlZ1ZENBcElDb2dkR0Z1WjJWdWRDNTNJQ2s3Q2dralpXNWthV1lLSTJWdVpHbG1ZQ3dnVjIwZ1BTQmdJMmxtWkdWbUlGVlRSVjlPVDFKTlFVeE5RVkFLQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUc1dmNtMWhiRTFoY0RzS0NYVnVhV1p2Y20wZ2RtVmpNaUJ1YjNKdFlXeFRZMkZzWlRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlRrOVNUVUZNVFVGUVgwOUNTa1ZEVkZOUVFVTkZDZ2wxYm1sbWIzSnRJRzFoZERNZ2JtOXliV0ZzVFdGMGNtbDRPd29qWlc1a2FXWUtJMmxtSUNFZ1pHVm1hVzVsWkNBb0lGVlRSVjlVUVU1SFJVNVVJQ2tnSmlZZ0tDQmtaV1pwYm1Wa0lDZ2dWVk5GWDA1UFVrMUJURTFCVUY5VVFVNUhSVTVVVTFCQlEwVWdLU0I4ZkNCa1pXWnBibVZrSUNnZ1ZWTkZYME5NUlVGU1EwOUJWRjlPVDFKTlFVeE5RVkFnS1NCOGZDQmtaV1pwYm1Wa0tDQlZVMFZmUVU1SlUwOVVVazlRV1NBcElDa0tDVzFoZERNZ1oyVjBWR0Z1WjJWdWRFWnlZVzFsS0NCMlpXTXpJR1Y1WlY5d2IzTXNJSFpsWXpNZ2MzVnlabDl1YjNKdExDQjJaV015SUhWMklDa2dld29KQ1habFl6TWdjVEFnUFNCa1JtUjRLQ0JsZVdWZmNHOXpMbmg1ZWlBcE93b0pDWFpsWXpNZ2NURWdQU0JrUm1SNUtDQmxlV1ZmY0c5ekxuaDVlaUFwT3dvSkNYWmxZeklnYzNRd0lEMGdaRVprZUNnZ2RYWXVjM1FnS1RzS0NRbDJaV015SUhOME1TQTlJR1JHWkhrb0lIVjJMbk4wSUNrN0Nna0pkbVZqTXlCT0lEMGdjM1Z5Wmw5dWIzSnRPd29KQ1habFl6TWdjVEZ3WlhKd0lEMGdZM0p2YzNNb0lIRXhMQ0JPSUNrN0Nna0pkbVZqTXlCeE1IQmxjbkFnUFNCamNtOXpjeWdnVGl3Z2NUQWdLVHNLQ1FsMlpXTXpJRlFnUFNCeE1YQmxjbkFnS2lCemREQXVlQ0FySUhFd2NHVnljQ0FxSUhOME1TNTRPd29KQ1habFl6TWdRaUE5SUhFeGNHVnljQ0FxSUhOME1DNTVJQ3NnY1RCd1pYSndJQ29nYzNReExuazdDZ2tKWm14dllYUWdaR1YwSUQwZ2JXRjRLQ0JrYjNRb0lGUXNJRlFnS1N3Z1pHOTBLQ0JDTENCQ0lDa2dLVHNLQ1FsbWJHOWhkQ0J6WTJGc1pTQTlJQ2dnWkdWMElEMDlJREF1TUNBcElEOGdNQzR3SURvZ2FXNTJaWEp6WlhOeGNuUW9JR1JsZENBcE93b0pDWEpsZEhWeWJpQnRZWFF6S0NCVUlDb2djMk5oYkdVc0lFSWdLaUJ6WTJGc1pTd2dUaUFwT3dvSmZRb2paVzVrYVdaZ0xDQlliU0E5SUdBamFXWmtaV1lnVlZORlgwTk1SVUZTUTA5QlZBb0pkbVZqTXlCamJHVmhjbU52WVhST2IzSnRZV3dnUFNCdWIyNVFaWEowZFhKaVpXUk9iM0p0WVd3N0NpTmxibVJwWm1Bc0lIRnRJRDBnWUNOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVVgwNVBVazFCVEUxQlVBb0pkbVZqTXlCamJHVmhjbU52WVhSTllYQk9JRDBnZEdWNGRIVnlaVEpFS0NCamJHVmhjbU52WVhST2IzSnRZV3hOWVhBc0lIWkRiR1ZoY21OdllYUk9iM0p0WVd4TllYQlZkaUFwTG5oNWVpQXFJREl1TUNBdElERXVNRHNLQ1dOc1pXRnlZMjloZEUxaGNFNHVlSGtnS2owZ1kyeGxZWEpqYjJGMFRtOXliV0ZzVTJOaGJHVTdDZ2xqYkdWaGNtTnZZWFJPYjNKdFlXd2dQU0J1YjNKdFlXeHBlbVVvSUhSaWJqSWdLaUJqYkdWaGNtTnZZWFJOWVhCT0lDazdDaU5sYm1ScFptQXNJRmx0SUQwZ1lDTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVUVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCamJHVmhjbU52WVhSTllYQTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWRjlPVDFKTlFVeE5RVkFLQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUdOc1pXRnlZMjloZEU1dmNtMWhiRTFoY0RzS0NYVnVhV1p2Y20wZ2RtVmpNaUJqYkdWaGNtTnZZWFJPYjNKdFlXeFRZMkZzWlRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVVgxSlBWVWRJVGtWVFUwMUJVQW9KZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnWTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd093b2paVzVrYVdaZ0xDQmFiU0E5SUdBamFXWmtaV1lnVlZORlgwbFNTVVJGVTBORlRrTkZUVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCcGNtbGtaWE5qWlc1alpVMWhjRHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmU1ZKSlJFVlRRMFZPUTBWZlZFaEpRMHRPUlZOVFRVRlFDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNEc0tJMlZ1WkdsbVlDd2dTbTBnUFNCZ0kybG1aR1ZtSUU5UVFWRlZSUXBrYVdabWRYTmxRMjlzYjNJdVlTQTlJREV1TURzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlZGSkJUbE5OU1ZOVFNVOU9DbVJwWm1aMWMyVkRiMnh2Y2k1aElDbzlJRzFoZEdWeWFXRnNMblJ5WVc1emJXbHpjMmx2YmtGc2NHaGhPd29qWlc1a2FXWUtaMnhmUm5KaFowTnZiRzl5SUQwZ2RtVmpOQ2dnYjNWMFoyOXBibWRNYVdkb2RDd2daR2xtWm5WelpVTnZiRzl5TG1FZ0tUdGdMQ0FrYlNBOUlHQjJaV016SUhCaFkydE9iM0p0WVd4VWIxSkhRaWdnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3Z0tTQjdDZ2x5WlhSMWNtNGdibTl5YldGc2FYcGxLQ0J1YjNKdFlXd2dLU0FxSURBdU5TQXJJREF1TlRzS2ZRcDJaV016SUhWdWNHRmphMUpIUWxSdlRtOXliV0ZzS0NCamIyNXpkQ0JwYmlCMlpXTXpJSEpuWWlBcElIc0tDWEpsZEhWeWJpQXlMakFnS2lCeVoySXVlSGw2SUMwZ01TNHdPd3A5Q21OdmJuTjBJR1pzYjJGMElGQmhZMnRWY0hOallXeGxJRDBnTWpVMkxpQXZJREkxTlM0N1kyOXVjM1FnWm14dllYUWdWVzV3WVdOclJHOTNibk5qWVd4bElEMGdNalUxTGlBdklESTFOaTQ3Q21OdmJuTjBJSFpsWXpNZ1VHRmphMFpoWTNSdmNuTWdQU0IyWldNektDQXlOVFl1SUNvZ01qVTJMaUFxSURJMU5pNHNJREkxTmk0Z0tpQXlOVFl1TENBeU5UWXVJQ2s3Q21OdmJuTjBJSFpsWXpRZ1ZXNXdZV05yUm1GamRHOXljeUE5SUZWdWNHRmphMFJ2ZDI1elkyRnNaU0F2SUhabFl6UW9JRkJoWTJ0R1lXTjBiM0p6TENBeExpQXBPd3BqYjI1emRDQm1iRzloZENCVGFHbG1kRkpwWjJoME9DQTlJREV1SUM4Z01qVTJManNLZG1Wak5DQndZV05yUkdWd2RHaFViMUpIUWtFb0lHTnZibk4wSUdsdUlHWnNiMkYwSUhZZ0tTQjdDZ2wyWldNMElISWdQU0IyWldNMEtDQm1jbUZqZENnZ2RpQXFJRkJoWTJ0R1lXTjBiM0p6SUNrc0lIWWdLVHNLQ1hJdWVYcDNJQzA5SUhJdWVIbDZJQ29nVTJocFpuUlNhV2RvZERnN0NYSmxkSFZ5YmlCeUlDb2dVR0ZqYTFWd2MyTmhiR1U3Q24wS1pteHZZWFFnZFc1d1lXTnJVa2RDUVZSdlJHVndkR2dvSUdOdmJuTjBJR2x1SUhabFl6UWdkaUFwSUhzS0NYSmxkSFZ5YmlCa2IzUW9JSFlzSUZWdWNHRmphMFpoWTNSdmNuTWdLVHNLZlFwMlpXTXlJSEJoWTJ0RVpYQjBhRlJ2VWtjb0lHbHVJR2hwWjJod0lHWnNiMkYwSUhZZ0tTQjdDZ2x5WlhSMWNtNGdjR0ZqYTBSbGNIUm9WRzlTUjBKQktDQjJJQ2t1ZVhnN0NuMEtabXh2WVhRZ2RXNXdZV05yVWtkVWIwUmxjSFJvS0NCamIyNXpkQ0JwYmlCb2FXZG9jQ0IyWldNeUlIWWdLU0I3Q2dseVpYUjFjbTRnZFc1d1lXTnJVa2RDUVZSdlJHVndkR2dvSUhabFl6UW9JSFl1ZUhrc0lEQXVNQ3dnTUM0d0lDa2dLVHNLZlFwMlpXTTBJSEJoWTJzeVNHRnNabFJ2VWtkQ1FTZ2dkbVZqTWlCMklDa2dld29KZG1Wak5DQnlJRDBnZG1Wak5DZ2dkaTU0TENCbWNtRmpkQ2dnZGk1NElDb2dNalUxTGpBZ0tTd2dkaTU1TENCbWNtRmpkQ2dnZGk1NUlDb2dNalUxTGpBZ0tTQXBPd29KY21WMGRYSnVJSFpsWXpRb0lISXVlQ0F0SUhJdWVTQXZJREkxTlM0d0xDQnlMbmtzSUhJdWVpQXRJSEl1ZHlBdklESTFOUzR3TENCeUxuY2dLVHNLZlFwMlpXTXlJSFZ1Y0dGamExSkhRa0ZVYnpKSVlXeG1LQ0IyWldNMElIWWdLU0I3Q2dseVpYUjFjbTRnZG1Wak1pZ2dkaTU0SUNzZ0tDQjJMbmtnTHlBeU5UVXVNQ0FwTENCMkxub2dLeUFvSUhZdWR5QXZJREkxTlM0d0lDa2dLVHNLZlFwbWJHOWhkQ0IyYVdWM1dsUnZUM0owYUc5bmNtRndhR2xqUkdWd2RHZ29JR052Ym5OMElHbHVJR1pzYjJGMElIWnBaWGRhTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J1WldGeUxDQmpiMjV6ZENCcGJpQm1iRzloZENCbVlYSWdLU0I3Q2dseVpYUjFjbTRnS0NCMmFXVjNXaUFySUc1bFlYSWdLU0F2SUNnZ2JtVmhjaUF0SUdaaGNpQXBPd3A5Q21ac2IyRjBJRzl5ZEdodlozSmhjR2hwWTBSbGNIUm9WRzlXYVdWM1dpZ2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1pHVndkR2dzSUdOdmJuTjBJR2x1SUdac2IyRjBJRzVsWVhJc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdaaGNpQXBJSHNLQ1hKbGRIVnliaUJrWlhCMGFDQXFJQ2dnYm1WaGNpQXRJR1poY2lBcElDMGdibVZoY2pzS2ZRcG1iRzloZENCMmFXVjNXbFJ2VUdWeWMzQmxZM1JwZG1WRVpYQjBhQ2dnWTI5dWMzUWdhVzRnWm14dllYUWdkbWxsZDFvc0lHTnZibk4wSUdsdUlHWnNiMkYwSUc1bFlYSXNJR052Ym5OMElHbHVJR1pzYjJGMElHWmhjaUFwSUhzS0NYSmxkSFZ5YmlBb0lDZ2dibVZoY2lBcklIWnBaWGRhSUNrZ0tpQm1ZWElnS1NBdklDZ2dLQ0JtWVhJZ0xTQnVaV0Z5SUNrZ0tpQjJhV1YzV2lBcE93cDlDbVpzYjJGMElIQmxjbk53WldOMGFYWmxSR1Z3ZEdoVWIxWnBaWGRhS0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrWlhCMGFDd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2JtVmhjaXdnWTI5dWMzUWdhVzRnWm14dllYUWdabUZ5SUNrZ2V3b0pjbVYwZFhKdUlDZ2dibVZoY2lBcUlHWmhjaUFwSUM4Z0tDQW9JR1poY2lBdElHNWxZWElnS1NBcUlHUmxjSFJvSUMwZ1ptRnlJQ2s3Q24xZ0xDQkxiU0E5SUdBamFXWmtaV1lnVUZKRlRWVk1WRWxRVEVsRlJGOUJURkJJUVFvSloyeGZSbkpoWjBOdmJHOXlMbkpuWWlBcVBTQm5iRjlHY21GblEyOXNiM0l1WVRzS0kyVnVaR2xtWUN3Z1VXMGdQU0JnZG1Wak5DQnRkbEJ2YzJsMGFXOXVJRDBnZG1Wak5DZ2dkSEpoYm5ObWIzSnRaV1FzSURFdU1DQXBPd29qYVdaa1pXWWdWVk5GWDBsT1UxUkJUa05KVGtjS0NXMTJVRzl6YVhScGIyNGdQU0JwYm5OMFlXNWpaVTFoZEhKcGVDQXFJRzEyVUc5emFYUnBiMjQ3Q2lObGJtUnBaZ3B0ZGxCdmMybDBhVzl1SUQwZ2JXOWtaV3hXYVdWM1RXRjBjbWw0SUNvZ2JYWlFiM05wZEdsdmJqc0taMnhmVUc5emFYUnBiMjRnUFNCd2NtOXFaV04wYVc5dVRXRjBjbWw0SUNvZ2JYWlFiM05wZEdsdmJqdGdMQ0JxYlNBOUlHQWphV1prWldZZ1JFbFVTRVZTU1U1SENnbG5iRjlHY21GblEyOXNiM0l1Y21kaUlEMGdaR2wwYUdWeWFXNW5LQ0JuYkY5R2NtRm5RMjlzYjNJdWNtZGlJQ2s3Q2lObGJtUnBabUFzSUdWbklEMGdZQ05wWm1SbFppQkVTVlJJUlZKSlRrY0tDWFpsWXpNZ1pHbDBhR1Z5YVc1bktDQjJaV016SUdOdmJHOXlJQ2tnZXdvSkNXWnNiMkYwSUdkeWFXUmZjRzl6YVhScGIyNGdQU0J5WVc1a0tDQm5iRjlHY21GblEyOXZjbVF1ZUhrZ0tUc0tDUWwyWldNeklHUnBkR2hsY2w5emFHbG1kRjlTUjBJZ1BTQjJaV016S0NBd0xqSTFJQzhnTWpVMUxqQXNJQzB3TGpJMUlDOGdNalUxTGpBc0lEQXVNalVnTHlBeU5UVXVNQ0FwT3dvSkNXUnBkR2hsY2w5emFHbG1kRjlTUjBJZ1BTQnRhWGdvSURJdU1DQXFJR1JwZEdobGNsOXphR2xtZEY5U1IwSXNJQzB5TGpBZ0tpQmthWFJvWlhKZmMyaHBablJmVWtkQ0xDQm5jbWxrWDNCdmMybDBhVzl1SUNrN0Nna0pjbVYwZFhKdUlHTnZiRzl5SUNzZ1pHbDBhR1Z5WDNOb2FXWjBYMUpIUWpzS0NYMEtJMlZ1WkdsbVlDd2dkR2NnUFNCZ1pteHZZWFFnY205MVoyaHVaWE56Um1GamRHOXlJRDBnY205MVoyaHVaWE56T3dvamFXWmtaV1lnVlZORlgxSlBWVWRJVGtWVFUwMUJVQW9KZG1Wak5DQjBaWGhsYkZKdmRXZG9ibVZ6Y3lBOUlIUmxlSFIxY21VeVJDZ2djbTkxWjJodVpYTnpUV0Z3TENCMlVtOTFaMmh1WlhOelRXRndWWFlnS1RzS0NYSnZkV2RvYm1WemMwWmhZM1J2Y2lBcVBTQjBaWGhsYkZKdmRXZG9ibVZ6Y3k1bk93b2paVzVrYVdaZ0xDQnVaeUE5SUdBamFXWmtaV1lnVlZORlgxSlBWVWRJVGtWVFUwMUJVQW9KZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnY205MVoyaHVaWE56VFdGd093b2paVzVrYVdaZ0xDQnBaeUE5SUdBamFXWWdUbFZOWDFOUVQxUmZURWxIU0ZSZlEwOVBVa1JUSUQ0Z01Bb0pkbUZ5ZVdsdVp5QjJaV00wSUhaVGNHOTBUR2xuYUhSRGIyOXlaRnNnVGxWTlgxTlFUMVJmVEVsSFNGUmZRMDlQVWtSVElGMDdDaU5sYm1ScFpnb2phV1lnVGxWTlgxTlFUMVJmVEVsSFNGUmZUVUZRVXlBK0lEQUtDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSE53YjNSTWFXZG9kRTFoY0ZzZ1RsVk5YMU5RVDFSZlRFbEhTRlJmVFVGUVV5QmRPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUU0VGRVQxZE5RVkFLQ1NOcFppQk9WVTFmUkVsU1gweEpSMGhVWDFOSVFVUlBWMU1nUGlBd0Nna0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdaR2x5WldOMGFXOXVZV3hUYUdGa2IzZE5ZWEJiSUU1VlRWOUVTVkpmVEVsSFNGUmZVMGhCUkU5WFV5QmRPd29KQ1haaGNubHBibWNnZG1Wak5DQjJSR2x5WldOMGFXOXVZV3hUYUdGa2IzZERiMjl5WkZzZ1RsVk5YMFJKVWw5TVNVZElWRjlUU0VGRVQxZFRJRjA3Q2drSmMzUnlkV04wSUVScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzY2dld29KQ1FsbWJHOWhkQ0J6YUdGa2IzZENhV0Z6T3dvSkNRbG1iRzloZENCemFHRmtiM2RPYjNKdFlXeENhV0Z6T3dvSkNRbG1iRzloZENCemFHRmtiM2RTWVdScGRYTTdDZ2tKQ1habFl6SWdjMmhoWkc5M1RXRndVMmw2WlRzS0NRbDlPd29KQ1hWdWFXWnZjbTBnUkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmR5QmthWEpsWTNScGIyNWhiRXhwWjJoMFUyaGhaRzkzYzFzZ1RsVk5YMFJKVWw5TVNVZElWRjlUU0VGRVQxZFRJRjA3Q2dralpXNWthV1lLQ1NOcFppQk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSE53YjNSVGFHRmtiM2ROWVhCYklFNVZUVjlUVUU5VVgweEpSMGhVWDFOSVFVUlBWMU1nWFRzS0NRbHpkSEoxWTNRZ1UzQnZkRXhwWjJoMFUyaGhaRzkzSUhzS0NRa0pabXh2WVhRZ2MyaGhaRzkzUW1saGN6c0tDUWtKWm14dllYUWdjMmhoWkc5M1RtOXliV0ZzUW1saGN6c0tDUWtKWm14dllYUWdjMmhoWkc5M1VtRmthWFZ6T3dvSkNRbDJaV015SUhOb1lXUnZkMDFoY0ZOcGVtVTdDZ2tKZlRzS0NRbDFibWxtYjNKdElGTndiM1JNYVdkb2RGTm9ZV1J2ZHlCemNHOTBUR2xuYUhSVGFHRmtiM2R6V3lCT1ZVMWZVMUJQVkY5TVNVZElWRjlUU0VGRVQxZFRJRjA3Q2dralpXNWthV1lLQ1NOcFppQk9WVTFmVUU5SlRsUmZURWxIU0ZSZlUwaEJSRTlYVXlBK0lEQUtDUWwxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0J3YjJsdWRGTm9ZV1J2ZDAxaGNGc2dUbFZOWDFCUFNVNVVYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDUWwyWVhKNWFXNW5JSFpsWXpRZ2RsQnZhVzUwVTJoaFpHOTNRMjl2Y21SYklFNVZUVjlRVDBsT1ZGOU1TVWRJVkY5VFNFRkVUMWRUSUYwN0Nna0pjM1J5ZFdOMElGQnZhVzUwVEdsbmFIUlRhR0ZrYjNjZ2V3b0pDUWxtYkc5aGRDQnphR0ZrYjNkQ2FXRnpPd29KQ1FsbWJHOWhkQ0J6YUdGa2IzZE9iM0p0WVd4Q2FXRnpPd29KQ1FsbWJHOWhkQ0J6YUdGa2IzZFNZV1JwZFhNN0Nna0pDWFpsWXpJZ2MyaGhaRzkzVFdGd1UybDZaVHNLQ1FrSlpteHZZWFFnYzJoaFpHOTNRMkZ0WlhKaFRtVmhjanNLQ1FrSlpteHZZWFFnYzJoaFpHOTNRMkZ0WlhKaFJtRnlPd29KQ1gwN0Nna0pkVzVwWm05eWJTQlFiMmx1ZEV4cFoyaDBVMmhoWkc5M0lIQnZhVzUwVEdsbmFIUlRhR0ZrYjNkeld5Qk9WVTFmVUU5SlRsUmZURWxIU0ZSZlUwaEJSRTlYVXlCZE93b0pJMlZ1WkdsbUNnbG1iRzloZENCMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCellXMXdiR1Z5TWtRZ1pHVndkR2h6TENCMlpXTXlJSFYyTENCbWJHOWhkQ0JqYjIxd1lYSmxJQ2tnZXdvSkNYSmxkSFZ5YmlCemRHVndLQ0JqYjIxd1lYSmxMQ0IxYm5CaFkydFNSMEpCVkc5RVpYQjBhQ2dnZEdWNGRIVnlaVEpFS0NCa1pYQjBhSE1zSUhWMklDa2dLU0FwT3dvSmZRb0pkbVZqTWlCMFpYaDBkWEpsTWtSRWFYTjBjbWxpZFhScGIyNG9JSE5oYlhCc1pYSXlSQ0J6YUdGa2IzY3NJSFpsWXpJZ2RYWWdLU0I3Q2drSmNtVjBkWEp1SUhWdWNHRmphMUpIUWtGVWJ6SklZV3htS0NCMFpYaDBkWEpsTWtRb0lITm9ZV1J2ZHl3Z2RYWWdLU0FwT3dvSmZRb0pabXh2WVhRZ1ZsTk5VMmhoWkc5M0lDaHpZVzF3YkdWeU1rUWdjMmhoWkc5M0xDQjJaV015SUhWMkxDQm1iRzloZENCamIyMXdZWEpsSUNsN0Nna0pabXh2WVhRZ2IyTmpiSFZ6YVc5dUlEMGdNUzR3T3dvSkNYWmxZeklnWkdsemRISnBZblYwYVc5dUlEMGdkR1Y0ZEhWeVpUSkVSR2x6ZEhKcFluVjBhVzl1S0NCemFHRmtiM2NzSUhWMklDazdDZ2tKWm14dllYUWdhR0Z5WkY5emFHRmtiM2NnUFNCemRHVndLQ0JqYjIxd1lYSmxJQ3dnWkdsemRISnBZblYwYVc5dUxuZ2dLVHNLQ1FscFppQW9hR0Z5WkY5emFHRmtiM2NnSVQwZ01TNHdJQ2tnZXdvSkNRbG1iRzloZENCa2FYTjBZVzVqWlNBOUlHTnZiWEJoY21VZ0xTQmthWE4wY21saWRYUnBiMjR1ZUNBN0Nna0pDV1pzYjJGMElIWmhjbWxoYm1ObElEMGdiV0Y0S0NBd0xqQXdNREF3TENCa2FYTjBjbWxpZFhScGIyNHVlU0FxSUdScGMzUnlhV0oxZEdsdmJpNTVJQ2s3Q2drSkNXWnNiMkYwSUhOdlpuUnVaWE56WDNCeWIySmhZbWxzYVhSNUlEMGdkbUZ5YVdGdVkyVWdMeUFvZG1GeWFXRnVZMlVnS3lCa2FYTjBZVzVqWlNBcUlHUnBjM1JoYm1ObElDazdDUWtKYzI5bWRHNWxjM05mY0hKdlltRmlhV3hwZEhrZ1BTQmpiR0Z0Y0NnZ0tDQnpiMlowYm1WemMxOXdjbTlpWVdKcGJHbDBlU0F0SURBdU15QXBJQzhnS0NBd0xqazFJQzBnTUM0eklDa3NJREF1TUN3Z01TNHdJQ2s3Q1FrSmIyTmpiSFZ6YVc5dUlEMGdZMnhoYlhBb0lHMWhlQ2dnYUdGeVpGOXphR0ZrYjNjc0lITnZablJ1WlhOelgzQnliMkpoWW1sc2FYUjVJQ2tzSURBdU1Dd2dNUzR3SUNrN0Nna0pmUW9KQ1hKbGRIVnliaUJ2WTJOc2RYTnBiMjQ3Q2dsOUNnbG1iRzloZENCblpYUlRhR0ZrYjNjb0lITmhiWEJzWlhJeVJDQnphR0ZrYjNkTllYQXNJSFpsWXpJZ2MyaGhaRzkzVFdGd1UybDZaU3dnWm14dllYUWdjMmhoWkc5M1FtbGhjeXdnWm14dllYUWdjMmhoWkc5M1VtRmthWFZ6TENCMlpXTTBJSE5vWVdSdmQwTnZiM0prSUNrZ2V3b0pDV1pzYjJGMElITm9ZV1J2ZHlBOUlERXVNRHNLQ1FsemFHRmtiM2REYjI5eVpDNTRlWG9nTHowZ2MyaGhaRzkzUTI5dmNtUXVkenNLQ1FsemFHRmtiM2REYjI5eVpDNTZJQ3M5SUhOb1lXUnZkMEpwWVhNN0Nna0pZbTl2YkNCcGJrWnlkWE4wZFcwZ1BTQnphR0ZrYjNkRGIyOXlaQzU0SUQ0OUlEQXVNQ0FtSmlCemFHRmtiM2REYjI5eVpDNTRJRHc5SURFdU1DQW1KaUJ6YUdGa2IzZERiMjl5WkM1NUlENDlJREF1TUNBbUppQnphR0ZrYjNkRGIyOXlaQzU1SUR3OUlERXVNRHNLQ1FsaWIyOXNJR1p5ZFhOMGRXMVVaWE4wSUQwZ2FXNUdjblZ6ZEhWdElDWW1JSE5vWVdSdmQwTnZiM0prTG5vZ1BEMGdNUzR3T3dvSkNXbG1JQ2dnWm5KMWMzUjFiVlJsYzNRZ0tTQjdDZ2tKSTJsbUlHUmxabWx1WldRb0lGTklRVVJQVjAxQlVGOVVXVkJGWDFCRFJpQXBDZ2tKQ1habFl6SWdkR1Y0Wld4VGFYcGxJRDBnZG1Wak1pZ2dNUzR3SUNrZ0x5QnphR0ZrYjNkTllYQlRhWHBsT3dvSkNRbG1iRzloZENCa2VEQWdQU0F0SUhSbGVHVnNVMmw2WlM1NElDb2djMmhoWkc5M1VtRmthWFZ6T3dvSkNRbG1iRzloZENCa2VUQWdQU0F0SUhSbGVHVnNVMmw2WlM1NUlDb2djMmhoWkc5M1VtRmthWFZ6T3dvSkNRbG1iRzloZENCa2VERWdQU0FySUhSbGVHVnNVMmw2WlM1NElDb2djMmhoWkc5M1VtRmthWFZ6T3dvSkNRbG1iRzloZENCa2VURWdQU0FySUhSbGVHVnNVMmw2WlM1NUlDb2djMmhoWkc5M1VtRmthWFZ6T3dvSkNRbG1iRzloZENCa2VESWdQU0JrZURBZ0x5QXlMakE3Q2drSkNXWnNiMkYwSUdSNU1pQTlJR1I1TUNBdklESXVNRHNLQ1FrSlpteHZZWFFnWkhneklEMGdaSGd4SUM4Z01pNHdPd29KQ1FsbWJHOWhkQ0JrZVRNZ1BTQmtlVEVnTHlBeUxqQTdDZ2tKQ1hOb1lXUnZkeUE5SUNnS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnYzJoaFpHOTNRMjl2Y21RdWVIa2dLeUIyWldNeUtDQmtlREFzSUdSNU1DQXBMQ0J6YUdGa2IzZERiMjl5WkM1NklDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVNBcklIWmxZeklvSURBdU1Dd2daSGt3SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1NBckNna0pDUWwwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhOb1lXUnZkME52YjNKa0xuaDVJQ3NnZG1Wak1pZ2daSGd4TENCa2VUQWdLU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2djMmhoWkc5M1EyOXZjbVF1ZUhrZ0t5QjJaV015S0NCa2VESXNJR1I1TWlBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCemFHRmtiM2REYjI5eVpDNTRlU0FySUhabFl6SW9JREF1TUN3Z1pIa3lJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU0FyQ2drSkNRbDBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSE5vWVdSdmQwTnZiM0prTG5oNUlDc2dkbVZqTWlnZ1pIZ3pMQ0JrZVRJZ0tTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2MyaGhaRzkzUTI5dmNtUXVlSGtnS3lCMlpXTXlLQ0JrZURBc0lEQXVNQ0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0J6YUdGa2IzZERiMjl5WkM1NGVTQXJJSFpsWXpJb0lHUjRNaXdnTUM0d0lDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTQXJDZ2tKQ1FsMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lITm9ZV1J2ZDBOdmIzSmtMbmg1TENCemFHRmtiM2REYjI5eVpDNTZJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0J6YUdGa2IzZERiMjl5WkM1NGVTQXJJSFpsWXpJb0lHUjRNeXdnTUM0d0lDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTQXJDZ2tKQ1FsMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lITm9ZV1J2ZDBOdmIzSmtMbmg1SUNzZ2RtVmpNaWdnWkhneExDQXdMakFnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnYzJoaFpHOTNRMjl2Y21RdWVIa2dLeUIyWldNeUtDQmtlRElzSUdSNU15QXBMQ0J6YUdGa2IzZERiMjl5WkM1NklDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVNBcklIWmxZeklvSURBdU1Dd2daSGt6SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1NBckNna0pDUWwwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhOb1lXUnZkME52YjNKa0xuaDVJQ3NnZG1Wak1pZ2daSGd6TENCa2VUTWdLU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2djMmhoWkc5M1EyOXZjbVF1ZUhrZ0t5QjJaV015S0NCa2VEQXNJR1I1TVNBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCemFHRmtiM2REYjI5eVpDNTRlU0FySUhabFl6SW9JREF1TUN3Z1pIa3hJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU0FyQ2drSkNRbDBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSE5vWVdSdmQwTnZiM0prTG5oNUlDc2dkbVZqTWlnZ1pIZ3hMQ0JrZVRFZ0tTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcENna0pDU2tnS2lBb0lERXVNQ0F2SURFM0xqQWdLVHNLQ1FralpXeHBaaUJrWldacGJtVmtLQ0JUU0VGRVQxZE5RVkJmVkZsUVJWOVFRMFpmVTA5R1ZDQXBDZ2tKQ1habFl6SWdkR1Y0Wld4VGFYcGxJRDBnZG1Wak1pZ2dNUzR3SUNrZ0x5QnphR0ZrYjNkTllYQlRhWHBsT3dvSkNRbG1iRzloZENCa2VDQTlJSFJsZUdWc1UybDZaUzU0T3dvSkNRbG1iRzloZENCa2VTQTlJSFJsZUdWc1UybDZaUzU1T3dvSkNRbDJaV015SUhWMklEMGdjMmhoWkc5M1EyOXZjbVF1ZUhrN0Nna0pDWFpsWXpJZ1ppQTlJR1p5WVdOMEtDQjFkaUFxSUhOb1lXUnZkMDFoY0ZOcGVtVWdLeUF3TGpVZ0tUc0tDUWtKZFhZZ0xUMGdaaUFxSUhSbGVHVnNVMmw2WlRzS0NRa0pjMmhoWkc5M0lEMGdLQW9KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaXdnYzJoaFpHOTNRMjl2Y21RdWVpQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2dkWFlnS3lCMlpXTXlLQ0JrZUN3Z01DNHdJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU0FyQ2drSkNRbDBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSFYySUNzZ2RtVmpNaWdnTUM0d0xDQmtlU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0IxZGlBcklIUmxlR1ZzVTJsNlpTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcElDc0tDUWtKQ1cxcGVDZ2dkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0IxZGlBcklIWmxZeklvSUMxa2VDd2dNQzR3SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1N3S0NRa0pDUWtnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lESXVNQ0FxSUdSNExDQXdMakFnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwTEFvSkNRa0pDU0JtTG5nZ0tTQXJDZ2tKQ1FsdGFYZ29JSFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnZFhZZ0t5QjJaV015S0NBdFpIZ3NJR1I1SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1N3S0NRa0pDUWtnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lESXVNQ0FxSUdSNExDQmtlU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tzQ2drSkNRa0pJR1l1ZUNBcElDc0tDUWtKQ1cxcGVDZ2dkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0IxZGlBcklIWmxZeklvSURBdU1Dd2dMV1I1SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1N3S0NRa0pDUWtnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lEQXVNQ3dnTWk0d0lDb2daSGtnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwTEFvSkNRa0pDU0JtTG5rZ0tTQXJDZ2tKQ1FsdGFYZ29JSFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnZFhZZ0t5QjJaV015S0NCa2VDd2dMV1I1SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1N3S0NRa0pDUWtnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lHUjRMQ0F5TGpBZ0tpQmtlU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tzQ2drSkNRa0pJR1l1ZVNBcElDc0tDUWtKQ1cxcGVDZ2diV2w0S0NCMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lIVjJJQ3NnZG1Wak1pZ2dMV1I0TENBdFpIa2dLU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBMQW9KQ1FrSkNRa2dJSFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnZFhZZ0t5QjJaV015S0NBeUxqQWdLaUJrZUN3Z0xXUjVJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU3dLQ1FrSkNRa0pJQ0JtTG5nZ0tTd0tDUWtKQ1FrZ2JXbDRLQ0IwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhWMklDc2dkbVZqTWlnZ0xXUjRMQ0F5TGpBZ0tpQmtlU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tzQ2drSkNRa0pDU0FnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lESXVNQ0FxSUdSNExDQXlMakFnS2lCa2VTQXBMQ0J6YUdGa2IzZERiMjl5WkM1NklDa3NDZ2tKQ1FrSkNTQWdaaTU0SUNrc0Nna0pDUWtKSUdZdWVTQXBDZ2tKQ1NrZ0tpQW9JREV1TUNBdklEa3VNQ0FwT3dvSkNTTmxiR2xtSUdSbFptbHVaV1FvSUZOSVFVUlBWMDFCVUY5VVdWQkZYMVpUVFNBcENna0pDWE5vWVdSdmR5QTlJRlpUVFZOb1lXUnZkeWdnYzJoaFpHOTNUV0Z3TENCemFHRmtiM2REYjI5eVpDNTRlU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBPd29KQ1NObGJITmxDZ2tKQ1hOb1lXUnZkeUE5SUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2MyaGhaRzkzUTI5dmNtUXVlSGtzSUhOb1lXUnZkME52YjNKa0xub2dLVHNLQ1FralpXNWthV1lLQ1FsOUNna0pjbVYwZFhKdUlITm9ZV1J2ZHpzS0NYMEtDWFpsWXpJZ1kzVmlaVlJ2VlZZb0lIWmxZek1nZGl3Z1pteHZZWFFnZEdWNFpXeFRhWHBsV1NBcElIc0tDUWwyWldNeklHRmljMVlnUFNCaFluTW9JSFlnS1RzS0NRbG1iRzloZENCelkyRnNaVlJ2UTNWaVpTQTlJREV1TUNBdklHMWhlQ2dnWVdKelZpNTRMQ0J0WVhnb0lHRmljMVl1ZVN3Z1lXSnpWaTU2SUNrZ0tUc0tDUWxoWW5OV0lDbzlJSE5qWVd4bFZHOURkV0psT3dvSkNYWWdLajBnYzJOaGJHVlViME4xWW1VZ0tpQW9JREV1TUNBdElESXVNQ0FxSUhSbGVHVnNVMmw2WlZrZ0tUc0tDUWwyWldNeUlIQnNZVzVoY2lBOUlIWXVlSGs3Q2drSlpteHZZWFFnWVd4dGIzTjBRVlJsZUdWc0lEMGdNUzQxSUNvZ2RHVjRaV3hUYVhwbFdUc0tDUWxtYkc5aGRDQmhiRzF2YzNSUGJtVWdQU0F4TGpBZ0xTQmhiRzF2YzNSQlZHVjRaV3c3Q2drSmFXWWdLQ0JoWW5OV0xub2dQajBnWVd4dGIzTjBUMjVsSUNrZ2V3b0pDUWxwWmlBb0lIWXVlaUErSURBdU1DQXBDZ2tKQ1Fsd2JHRnVZWEl1ZUNBOUlEUXVNQ0F0SUhZdWVEc0tDUWw5SUdWc2MyVWdhV1lnS0NCaFluTldMbmdnUGowZ1lXeHRiM04wVDI1bElDa2dld29KQ1FsbWJHOWhkQ0J6YVdkdVdDQTlJSE5wWjI0b0lIWXVlQ0FwT3dvSkNRbHdiR0Z1WVhJdWVDQTlJSFl1ZWlBcUlITnBaMjVZSUNzZ01pNHdJQ29nYzJsbmJsZzdDZ2tKZlNCbGJITmxJR2xtSUNnZ1lXSnpWaTU1SUQ0OUlHRnNiVzl6ZEU5dVpTQXBJSHNLQ1FrSlpteHZZWFFnYzJsbmJsa2dQU0J6YVdkdUtDQjJMbmtnS1RzS0NRa0pjR3hoYm1GeUxuZ2dQU0IyTG5nZ0t5QXlMakFnS2lCemFXZHVXU0FySURJdU1Ec0tDUWtKY0d4aGJtRnlMbmtnUFNCMkxub2dLaUJ6YVdkdVdTQXRJREl1TURzS0NRbDlDZ2tKY21WMGRYSnVJSFpsWXpJb0lEQXVNVEkxTENBd0xqSTFJQ2tnS2lCd2JHRnVZWElnS3lCMlpXTXlLQ0F3TGpNM05Td2dNQzQzTlNBcE93b0pmUW9KWm14dllYUWdaMlYwVUc5cGJuUlRhR0ZrYjNjb0lITmhiWEJzWlhJeVJDQnphR0ZrYjNkTllYQXNJSFpsWXpJZ2MyaGhaRzkzVFdGd1UybDZaU3dnWm14dllYUWdjMmhoWkc5M1FtbGhjeXdnWm14dllYUWdjMmhoWkc5M1VtRmthWFZ6TENCMlpXTTBJSE5vWVdSdmQwTnZiM0prTENCbWJHOWhkQ0J6YUdGa2IzZERZVzFsY21GT1pXRnlMQ0JtYkc5aGRDQnphR0ZrYjNkRFlXMWxjbUZHWVhJZ0tTQjdDZ2tKZG1Wak1pQjBaWGhsYkZOcGVtVWdQU0IyWldNeUtDQXhMakFnS1NBdklDZ2djMmhoWkc5M1RXRndVMmw2WlNBcUlIWmxZeklvSURRdU1Dd2dNaTR3SUNrZ0tUc0tDUWwyWldNeklHeHBaMmgwVkc5UWIzTnBkR2x2YmlBOUlITm9ZV1J2ZDBOdmIzSmtMbmg1ZWpzS0NRbG1iRzloZENCa2NDQTlJQ2dnYkdWdVozUm9LQ0JzYVdkb2RGUnZVRzl6YVhScGIyNGdLU0F0SUhOb1lXUnZkME5oYldWeVlVNWxZWElnS1NBdklDZ2djMmhoWkc5M1EyRnRaWEpoUm1GeUlDMGdjMmhoWkc5M1EyRnRaWEpoVG1WaGNpQXBPd2tKWkhBZ0t6MGdjMmhoWkc5M1FtbGhjenNLQ1FsMlpXTXpJR0prTTBRZ1BTQnViM0p0WVd4cGVtVW9JR3hwWjJoMFZHOVFiM05wZEdsdmJpQXBPd29KQ1NOcFppQmtaV1pwYm1Wa0tDQlRTRUZFVDFkTlFWQmZWRmxRUlY5UVEwWWdLU0I4ZkNCa1pXWnBibVZrS0NCVFNFRkVUMWROUVZCZlZGbFFSVjlRUTBaZlUwOUdWQ0FwSUh4OElHUmxabWx1WldRb0lGTklRVVJQVjAxQlVGOVVXVkJGWDFaVFRTQXBDZ2tKQ1habFl6SWdiMlptYzJWMElEMGdkbVZqTWlnZ0xTQXhMQ0F4SUNrZ0tpQnphR0ZrYjNkU1lXUnBkWE1nS2lCMFpYaGxiRk5wZW1VdWVUc0tDUWtKY21WMGRYSnVJQ2dLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2dZM1ZpWlZSdlZWWW9JR0prTTBRZ0t5QnZabVp6WlhRdWVIbDVMQ0IwWlhobGJGTnBlbVV1ZVNBcExDQmtjQ0FwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnWTNWaVpWUnZWVllvSUdKa00wUWdLeUJ2Wm1aelpYUXVlWGw1TENCMFpYaGxiRk5wZW1VdWVTQXBMQ0JrY0NBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z1kzVmlaVlJ2VlZZb0lHSmtNMFFnS3lCdlptWnpaWFF1ZUhsNExDQjBaWGhsYkZOcGVtVXVlU0FwTENCa2NDQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2dZM1ZpWlZSdlZWWW9JR0prTTBRZ0t5QnZabVp6WlhRdWVYbDRMQ0IwWlhobGJGTnBlbVV1ZVNBcExDQmtjQ0FwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnWTNWaVpWUnZWVllvSUdKa00wUXNJSFJsZUdWc1UybDZaUzU1SUNrc0lHUndJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0JqZFdKbFZHOVZWaWdnWW1RelJDQXJJRzltWm5ObGRDNTRlSGtzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCamRXSmxWRzlWVmlnZ1ltUXpSQ0FySUc5bVpuTmxkQzU1ZUhrc0lIUmxlR1ZzVTJsNlpTNTVJQ2tzSUdSd0lDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQmpkV0psVkc5VlZpZ2dZbVF6UkNBcklHOW1abk5sZEM1NGVIZ3NJSFJsZUdWc1UybDZaUzU1SUNrc0lHUndJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0JqZFdKbFZHOVZWaWdnWW1RelJDQXJJRzltWm5ObGRDNTVlSGdzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrS0NRa0pLU0FxSUNnZ01TNHdJQzhnT1M0d0lDazdDZ2tKSTJWc2MyVUtDUWtKY21WMGRYSnVJSFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnWTNWaVpWUnZWVllvSUdKa00wUXNJSFJsZUdWc1UybDZaUzU1SUNrc0lHUndJQ2s3Q2drSkkyVnVaR2xtQ2dsOUNpTmxibVJwWm1Bc0lITm5JRDBnWUNOcFppQk9WVTFmVTFCUFZGOU1TVWRJVkY5RFQwOVNSRk1nUGlBd0NnbDFibWxtYjNKdElHMWhkRFFnYzNCdmRFeHBaMmgwVFdGMGNtbDRXeUJPVlUxZlUxQlBWRjlNU1VkSVZGOURUMDlTUkZNZ1hUc0tDWFpoY25scGJtY2dkbVZqTkNCMlUzQnZkRXhwWjJoMFEyOXZjbVJiSUU1VlRWOVRVRTlVWDB4SlIwaFVYME5QVDFKRVV5QmRPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUU0VGRVQxZE5RVkFLQ1NOcFppQk9WVTFmUkVsU1gweEpSMGhVWDFOSVFVUlBWMU1nUGlBd0Nna0pkVzVwWm05eWJTQnRZWFEwSUdScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVFdGMGNtbDRXeUJPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDUWwyWVhKNWFXNW5JSFpsWXpRZ2RrUnBjbVZqZEdsdmJtRnNVMmhoWkc5M1EyOXZjbVJiSUU1VlRWOUVTVkpmVEVsSFNGUmZVMGhCUkU5WFV5QmRPd29KQ1hOMGNuVmpkQ0JFYVhKbFkzUnBiMjVoYkV4cFoyaDBVMmhoWkc5M0lIc0tDUWtKWm14dllYUWdjMmhoWkc5M1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNUbTl5YldGc1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNVbUZrYVhWek93b0pDUWwyWldNeUlITm9ZV1J2ZDAxaGNGTnBlbVU3Q2drSmZUc0tDUWwxYm1sbWIzSnRJRVJwY21WamRHbHZibUZzVEdsbmFIUlRhR0ZrYjNjZ1pHbHlaV04wYVc5dVlXeE1hV2RvZEZOb1lXUnZkM05iSUU1VlRWOUVTVkpmVEVsSFNGUmZVMGhCUkU5WFV5QmRPd29KSTJWdVpHbG1DZ2tqYVdZZ1RsVk5YMU5RVDFSZlRFbEhTRlJmVTBoQlJFOVhVeUErSURBS0NRbHpkSEoxWTNRZ1UzQnZkRXhwWjJoMFUyaGhaRzkzSUhzS0NRa0pabXh2WVhRZ2MyaGhaRzkzUW1saGN6c0tDUWtKWm14dllYUWdjMmhoWkc5M1RtOXliV0ZzUW1saGN6c0tDUWtKWm14dllYUWdjMmhoWkc5M1VtRmthWFZ6T3dvSkNRbDJaV015SUhOb1lXUnZkMDFoY0ZOcGVtVTdDZ2tKZlRzS0NRbDFibWxtYjNKdElGTndiM1JNYVdkb2RGTm9ZV1J2ZHlCemNHOTBUR2xuYUhSVGFHRmtiM2R6V3lCT1ZVMWZVMUJQVkY5TVNVZElWRjlUU0VGRVQxZFRJRjA3Q2dralpXNWthV1lLQ1NOcFppQk9WVTFmVUU5SlRsUmZURWxIU0ZSZlUwaEJSRTlYVXlBK0lEQUtDUWwxYm1sbWIzSnRJRzFoZERRZ2NHOXBiblJUYUdGa2IzZE5ZWFJ5YVhoYklFNVZUVjlRVDBsT1ZGOU1TVWRJVkY5VFNFRkVUMWRUSUYwN0Nna0pkbUZ5ZVdsdVp5QjJaV00wSUhaUWIybHVkRk5vWVdSdmQwTnZiM0prV3lCT1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVeUJkT3dvSkNYTjBjblZqZENCUWIybHVkRXhwWjJoMFUyaGhaRzkzSUhzS0NRa0pabXh2WVhRZ2MyaGhaRzkzUW1saGN6c0tDUWtKWm14dllYUWdjMmhoWkc5M1RtOXliV0ZzUW1saGN6c0tDUWtKWm14dllYUWdjMmhoWkc5M1VtRmthWFZ6T3dvSkNRbDJaV015SUhOb1lXUnZkMDFoY0ZOcGVtVTdDZ2tKQ1dac2IyRjBJSE5vWVdSdmQwTmhiV1Z5WVU1bFlYSTdDZ2tKQ1dac2IyRjBJSE5vWVdSdmQwTmhiV1Z5WVVaaGNqc0tDUWw5T3dvSkNYVnVhV1p2Y20wZ1VHOXBiblJNYVdkb2RGTm9ZV1J2ZHlCd2IybHVkRXhwWjJoMFUyaGhaRzkzYzFzZ1RsVk5YMUJQU1U1VVgweEpSMGhVWDFOSVFVUlBWMU1nWFRzS0NTTmxibVJwWmdvalpXNWthV1pnTENCeVp5QTlJR0FqYVdZZ0tDQmtaV1pwYm1Wa0tDQlZVMFZmVTBoQlJFOVhUVUZRSUNrZ0ppWWdLQ0JPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNZ1BpQXdJSHg4SUU1VlRWOVFUMGxPVkY5TVNVZElWRjlUU0VGRVQxZFRJRDRnTUNBcElDa2dmSHdnS0NCT1ZVMWZVMUJQVkY5TVNVZElWRjlEVDA5U1JGTWdQaUF3SUNrS0NYWmxZek1nYzJoaFpHOTNWMjl5YkdST2IzSnRZV3dnUFNCcGJuWmxjbk5sVkhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0NCMGNtRnVjMlp2Y20xbFpFNXZjbTFoYkN3Z2RtbGxkMDFoZEhKcGVDQXBPd29KZG1Wak5DQnphR0ZrYjNkWGIzSnNaRkJ2YzJsMGFXOXVPd29qWlc1a2FXWUtJMmxtSUdSbFptbHVaV1FvSUZWVFJWOVRTRUZFVDFkTlFWQWdLUW9KSTJsbUlFNVZUVjlFU1ZKZlRFbEhTRlJmVTBoQlJFOVhVeUErSURBS0NRa2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYM04wWVhKMENna0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVGxWTlgwUkpVbDlNU1VkSVZGOVRTRUZFVDFkVE95QnBJQ3NySUNrZ2V3b0pDUWx6YUdGa2IzZFhiM0pzWkZCdmMybDBhVzl1SUQwZ2QyOXliR1JRYjNOcGRHbHZiaUFySUhabFl6UW9JSE5vWVdSdmQxZHZjbXhrVG05eWJXRnNJQ29nWkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmQzTmJJR2tnWFM1emFHRmtiM2RPYjNKdFlXeENhV0Z6TENBd0lDazdDZ2tKQ1haRWFYSmxZM1JwYjI1aGJGTm9ZV1J2ZDBOdmIzSmtXeUJwSUYwZ1BTQmthWEpsWTNScGIyNWhiRk5vWVdSdmQwMWhkSEpwZUZzZ2FTQmRJQ29nYzJoaFpHOTNWMjl5YkdSUWIzTnBkR2x2YmpzS0NRbDlDZ2tKSTNCeVlXZHRZU0IxYm5KdmJHeGZiRzl2Y0Y5bGJtUUtDU05sYm1ScFpnb0pJMmxtSUU1VlRWOVFUMGxPVkY5TVNVZElWRjlUU0VGRVQxZFRJRDRnTUFvSkNTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZjM1JoY25RS0NRbG1iM0lnS0NCcGJuUWdhU0E5SURBN0lHa2dQQ0JPVlUxZlVFOUpUbFJmVEVsSFNGUmZVMGhCUkU5WFV6c2dhU0FyS3lBcElIc0tDUWtKYzJoaFpHOTNWMjl5YkdSUWIzTnBkR2x2YmlBOUlIZHZjbXhrVUc5emFYUnBiMjRnS3lCMlpXTTBLQ0J6YUdGa2IzZFhiM0pzWkU1dmNtMWhiQ0FxSUhCdmFXNTBUR2xuYUhSVGFHRmtiM2R6V3lCcElGMHVjMmhoWkc5M1RtOXliV0ZzUW1saGN5d2dNQ0FwT3dvSkNRbDJVRzlwYm5SVGFHRmtiM2REYjI5eVpGc2dhU0JkSUQwZ2NHOXBiblJUYUdGa2IzZE5ZWFJ5YVhoYklHa2dYU0FxSUhOb1lXUnZkMWR2Y214a1VHOXphWFJwYjI0N0Nna0pmUW9KQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZlpXNWtDZ2tqWlc1a2FXWUtJMlZ1WkdsbUNpTnBaaUJPVlUxZlUxQlBWRjlNU1VkSVZGOURUMDlTUkZNZ1BpQXdDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2xtYjNJZ0tDQnBiblFnYVNBOUlEQTdJR2tnUENCT1ZVMWZVMUJQVkY5TVNVZElWRjlEVDA5U1JGTTdJR2tnS3lzZ0tTQjdDZ2tKYzJoaFpHOTNWMjl5YkdSUWIzTnBkR2x2YmlBOUlIZHZjbXhrVUc5emFYUnBiMjQ3Q2drSkkybG1JQ2dnWkdWbWFXNWxaQ2dnVlZORlgxTklRVVJQVjAxQlVDQXBJQ1ltSUZWT1VrOU1URVZFWDB4UFQxQmZTVTVFUlZnZ1BDQk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUNrS0NRa0pjMmhoWkc5M1YyOXliR1JRYjNOcGRHbHZiaTU0ZVhvZ0t6MGdjMmhoWkc5M1YyOXliR1JPYjNKdFlXd2dLaUJ6Y0c5MFRHbG5hSFJUYUdGa2IzZHpXeUJwSUYwdWMyaGhaRzkzVG05eWJXRnNRbWxoY3pzS0NRa2paVzVrYVdZS0NRbDJVM0J2ZEV4cFoyaDBRMjl2Y21SYklHa2dYU0E5SUhOd2IzUk1hV2RvZEUxaGRISnBlRnNnYVNCZElDb2djMmhoWkc5M1YyOXliR1JRYjNOcGRHbHZianNLQ1gwS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZaVzVrQ2lObGJtUnBabUFzSUdGbklEMGdZR1pzYjJGMElHZGxkRk5vWVdSdmQwMWhjMnNvS1NCN0NnbG1iRzloZENCemFHRmtiM2NnUFNBeExqQTdDZ2tqYVdaa1pXWWdWVk5GWDFOSVFVUlBWMDFCVUFvSkkybG1JRTVWVFY5RVNWSmZURWxIU0ZSZlUwaEJSRTlYVXlBK0lEQUtDVVJwY21WamRHbHZibUZzVEdsbmFIUlRhR0ZrYjNjZ1pHbHlaV04wYVc5dVlXeE1hV2RvZERzS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZjM1JoY25RS0NXWnZjaUFvSUdsdWRDQnBJRDBnTURzZ2FTQThJRTVWVFY5RVNWSmZURWxIU0ZSZlUwaEJSRTlYVXpzZ2FTQXJLeUFwSUhzS0NRbGthWEpsWTNScGIyNWhiRXhwWjJoMElEMGdaR2x5WldOMGFXOXVZV3hNYVdkb2RGTm9ZV1J2ZDNOYklHa2dYVHNLQ1FsemFHRmtiM2NnS2owZ2NtVmpaV2wyWlZOb1lXUnZkeUEvSUdkbGRGTm9ZV1J2ZHlnZ1pHbHlaV04wYVc5dVlXeFRhR0ZrYjNkTllYQmJJR2tnWFN3Z1pHbHlaV04wYVc5dVlXeE1hV2RvZEM1emFHRmtiM2ROWVhCVGFYcGxMQ0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBMbk5vWVdSdmQwSnBZWE1zSUdScGNtVmpkR2x2Ym1Gc1RHbG5hSFF1YzJoaFpHOTNVbUZrYVhWekxDQjJSR2x5WldOMGFXOXVZV3hUYUdGa2IzZERiMjl5WkZzZ2FTQmRJQ2tnT2lBeExqQTdDZ2w5Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gyVnVaQW9KSTJWdVpHbG1DZ2tqYVdZZ1RsVk5YMU5RVDFSZlRFbEhTRlJmVTBoQlJFOVhVeUErSURBS0NWTndiM1JNYVdkb2RGTm9ZV1J2ZHlCemNHOTBUR2xuYUhRN0Nna2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYM04wWVhKMENnbG1iM0lnS0NCcGJuUWdhU0E5SURBN0lHa2dQQ0JPVlUxZlUxQlBWRjlNU1VkSVZGOVRTRUZFVDFkVE95QnBJQ3NySUNrZ2V3b0pDWE53YjNSTWFXZG9kQ0E5SUhOd2IzUk1hV2RvZEZOb1lXUnZkM05iSUdrZ1hUc0tDUWx6YUdGa2IzY2dLajBnY21WalpXbDJaVk5vWVdSdmR5QS9JR2RsZEZOb1lXUnZkeWdnYzNCdmRGTm9ZV1J2ZDAxaGNGc2dhU0JkTENCemNHOTBUR2xuYUhRdWMyaGhaRzkzVFdGd1UybDZaU3dnYzNCdmRFeHBaMmgwTG5Ob1lXUnZkMEpwWVhNc0lITndiM1JNYVdkb2RDNXphR0ZrYjNkU1lXUnBkWE1zSUhaVGNHOTBUR2xuYUhSRGIyOXlaRnNnYVNCZElDa2dPaUF4TGpBN0NnbDlDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDJWdVpBb0pJMlZ1WkdsbUNna2phV1lnVGxWTlgxQlBTVTVVWDB4SlIwaFVYMU5JUVVSUFYxTWdQaUF3Q2dsUWIybHVkRXhwWjJoMFUyaGhaRzkzSUhCdmFXNTBUR2xuYUhRN0Nna2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYM04wWVhKMENnbG1iM0lnS0NCcGJuUWdhU0E5SURBN0lHa2dQQ0JPVlUxZlVFOUpUbFJmVEVsSFNGUmZVMGhCUkU5WFV6c2dhU0FyS3lBcElIc0tDUWx3YjJsdWRFeHBaMmgwSUQwZ2NHOXBiblJNYVdkb2RGTm9ZV1J2ZDNOYklHa2dYVHNLQ1FsemFHRmtiM2NnS2owZ2NtVmpaV2wyWlZOb1lXUnZkeUEvSUdkbGRGQnZhVzUwVTJoaFpHOTNLQ0J3YjJsdWRGTm9ZV1J2ZDAxaGNGc2dhU0JkTENCd2IybHVkRXhwWjJoMExuTm9ZV1J2ZDAxaGNGTnBlbVVzSUhCdmFXNTBUR2xuYUhRdWMyaGhaRzkzUW1saGN5d2djRzlwYm5STWFXZG9kQzV6YUdGa2IzZFNZV1JwZFhNc0lIWlFiMmx1ZEZOb1lXUnZkME52YjNKa1d5QnBJRjBzSUhCdmFXNTBUR2xuYUhRdWMyaGhaRzkzUTJGdFpYSmhUbVZoY2l3Z2NHOXBiblJNYVdkb2RDNXphR0ZrYjNkRFlXMWxjbUZHWVhJZ0tTQTZJREV1TURzS0NYMEtDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmWlc1a0Nna2paVzVrYVdZS0NTTmxibVJwWmdvSmNtVjBkWEp1SUhOb1lXUnZkenNLZldBc0lHOW5JRDBnWUNOcFptUmxaaUJWVTBWZlUwdEpUazVKVGtjS0NXMWhkRFFnWW05dVpVMWhkRmdnUFNCblpYUkNiMjVsVFdGMGNtbDRLQ0J6YTJsdVNXNWtaWGd1ZUNBcE93b0piV0YwTkNCaWIyNWxUV0YwV1NBOUlHZGxkRUp2Ym1WTllYUnlhWGdvSUhOcmFXNUpibVJsZUM1NUlDazdDZ2x0WVhRMElHSnZibVZOWVhSYUlEMGdaMlYwUW05dVpVMWhkSEpwZUNnZ2MydHBia2x1WkdWNExub2dLVHNLQ1cxaGREUWdZbTl1WlUxaGRGY2dQU0JuWlhSQ2IyNWxUV0YwY21sNEtDQnphMmx1U1c1a1pYZ3VkeUFwT3dvalpXNWthV1pnTENCalp5QTlJR0FqYVdaa1pXWWdWVk5GWDFOTFNVNU9TVTVIQ2dsMWJtbG1iM0p0SUcxaGREUWdZbWx1WkUxaGRISnBlRHNLQ1hWdWFXWnZjbTBnYldGME5DQmlhVzVrVFdGMGNtbDRTVzUyWlhKelpUc0tDWFZ1YVdadmNtMGdhR2xuYUhBZ2MyRnRjR3hsY2pKRUlHSnZibVZVWlhoMGRYSmxPd29KZFc1cFptOXliU0JwYm5RZ1ltOXVaVlJsZUhSMWNtVlRhWHBsT3dvSmJXRjBOQ0JuWlhSQ2IyNWxUV0YwY21sNEtDQmpiMjV6ZENCcGJpQm1iRzloZENCcElDa2dld29KQ1dac2IyRjBJR29nUFNCcElDb2dOQzR3T3dvSkNXWnNiMkYwSUhnZ1BTQnRiMlFvSUdvc0lHWnNiMkYwS0NCaWIyNWxWR1Y0ZEhWeVpWTnBlbVVnS1NBcE93b0pDV1pzYjJGMElIa2dQU0JtYkc5dmNpZ2dhaUF2SUdac2IyRjBLQ0JpYjI1bFZHVjRkSFZ5WlZOcGVtVWdLU0FwT3dvSkNXWnNiMkYwSUdSNElEMGdNUzR3SUM4Z1pteHZZWFFvSUdKdmJtVlVaWGgwZFhKbFUybDZaU0FwT3dvSkNXWnNiMkYwSUdSNUlEMGdNUzR3SUM4Z1pteHZZWFFvSUdKdmJtVlVaWGgwZFhKbFUybDZaU0FwT3dvSkNYa2dQU0JrZVNBcUlDZ2dlU0FySURBdU5TQXBPd29KQ1habFl6UWdkakVnUFNCMFpYaDBkWEpsTWtRb0lHSnZibVZVWlhoMGRYSmxMQ0IyWldNeUtDQmtlQ0FxSUNnZ2VDQXJJREF1TlNBcExDQjVJQ2tnS1RzS0NRbDJaV00wSUhZeUlEMGdkR1Y0ZEhWeVpUSkVLQ0JpYjI1bFZHVjRkSFZ5WlN3Z2RtVmpNaWdnWkhnZ0tpQW9JSGdnS3lBeExqVWdLU3dnZVNBcElDazdDZ2tKZG1Wak5DQjJNeUE5SUhSbGVIUjFjbVV5UkNnZ1ltOXVaVlJsZUhSMWNtVXNJSFpsWXpJb0lHUjRJQ29nS0NCNElDc2dNaTQxSUNrc0lIa2dLU0FwT3dvSkNYWmxZelFnZGpRZ1BTQjBaWGgwZFhKbE1rUW9JR0p2Ym1WVVpYaDBkWEpsTENCMlpXTXlLQ0JrZUNBcUlDZ2dlQ0FySURNdU5TQXBMQ0I1SUNrZ0tUc0tDUWx0WVhRMElHSnZibVVnUFNCdFlYUTBLQ0IyTVN3Z2RqSXNJSFl6TENCMk5DQXBPd29KQ1hKbGRIVnliaUJpYjI1bE93b0pmUW9qWlc1a2FXWmdMQ0JzWnlBOUlHQWphV1prWldZZ1ZWTkZYMU5MU1U1T1NVNUhDZ2wyWldNMElITnJhVzVXWlhKMFpYZ2dQU0JpYVc1a1RXRjBjbWw0SUNvZ2RtVmpOQ2dnZEhKaGJuTm1iM0p0WldRc0lERXVNQ0FwT3dvSmRtVmpOQ0J6YTJsdWJtVmtJRDBnZG1Wak5DZ2dNQzR3SUNrN0NnbHphMmx1Ym1Wa0lDczlJR0p2Ym1WTllYUllJQ29nYzJ0cGJsWmxjblJsZUNBcUlITnJhVzVYWldsbmFIUXVlRHNLQ1hOcmFXNXVaV1FnS3owZ1ltOXVaVTFoZEZrZ0tpQnphMmx1Vm1WeWRHVjRJQ29nYzJ0cGJsZGxhV2RvZEM1NU93b0pjMnRwYm01bFpDQXJQU0JpYjI1bFRXRjBXaUFxSUhOcmFXNVdaWEowWlhnZ0tpQnphMmx1VjJWcFoyaDBMbm83Q2dsemEybHVibVZrSUNzOUlHSnZibVZOWVhSWElDb2djMnRwYmxabGNuUmxlQ0FxSUhOcmFXNVhaV2xuYUhRdWR6c0tDWFJ5WVc1elptOXliV1ZrSUQwZ0tDQmlhVzVrVFdGMGNtbDRTVzUyWlhKelpTQXFJSE5yYVc1dVpXUWdLUzU0ZVhvN0NpTmxibVJwWm1Bc0lHaG5JRDBnWUNOcFptUmxaaUJWVTBWZlUwdEpUazVKVGtjS0NXMWhkRFFnYzJ0cGJrMWhkSEpwZUNBOUlHMWhkRFFvSURBdU1DQXBPd29KYzJ0cGJrMWhkSEpwZUNBclBTQnphMmx1VjJWcFoyaDBMbmdnS2lCaWIyNWxUV0YwV0RzS0NYTnJhVzVOWVhSeWFYZ2dLejBnYzJ0cGJsZGxhV2RvZEM1NUlDb2dZbTl1WlUxaGRGazdDZ2x6YTJsdVRXRjBjbWw0SUNzOUlITnJhVzVYWldsbmFIUXVlaUFxSUdKdmJtVk5ZWFJhT3dvSmMydHBiazFoZEhKcGVDQXJQU0J6YTJsdVYyVnBaMmgwTG5jZ0tpQmliMjVsVFdGMFZ6c0tDWE5yYVc1TllYUnlhWGdnUFNCaWFXNWtUV0YwY21sNFNXNTJaWEp6WlNBcUlITnJhVzVOWVhSeWFYZ2dLaUJpYVc1a1RXRjBjbWw0T3dvSmIySnFaV04wVG05eWJXRnNJRDBnZG1Wak5DZ2djMnRwYmsxaGRISnBlQ0FxSUhabFl6UW9JRzlpYW1WamRFNXZjbTFoYkN3Z01DNHdJQ2tnS1M1NGVYbzdDZ2tqYVdaa1pXWWdWVk5GWDFSQlRrZEZUbFFLQ1FsdlltcGxZM1JVWVc1blpXNTBJRDBnZG1Wak5DZ2djMnRwYmsxaGRISnBlQ0FxSUhabFl6UW9JRzlpYW1WamRGUmhibWRsYm5Rc0lEQXVNQ0FwSUNrdWVIbDZPd29KSTJWdVpHbG1DaU5sYm1ScFptQXNJSFZuSUQwZ1lHWnNiMkYwSUhOd1pXTjFiR0Z5VTNSeVpXNW5kR2c3Q2lOcFptUmxaaUJWVTBWZlUxQkZRMVZNUVZKTlFWQUtDWFpsWXpRZ2RHVjRaV3hUY0dWamRXeGhjaUE5SUhSbGVIUjFjbVV5UkNnZ2MzQmxZM1ZzWVhKTllYQXNJSFpUY0dWamRXeGhjazFoY0ZWMklDazdDZ2x6Y0dWamRXeGhjbE4wY21WdVozUm9JRDBnZEdWNFpXeFRjR1ZqZFd4aGNpNXlPd29qWld4elpRb0pjM0JsWTNWc1lYSlRkSEpsYm1kMGFDQTlJREV1TURzS0kyVnVaR2xtWUN3Z1pHY2dQU0JnSTJsbVpHVm1JRlZUUlY5VFVFVkRWVXhCVWsxQlVBb0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdjM0JsWTNWc1lYSk5ZWEE3Q2lObGJtUnBabUFzSUdabklEMGdZQ05wWmlCa1pXWnBibVZrS0NCVVQwNUZYMDFCVUZCSlRrY2dLUW9KWjJ4ZlJuSmhaME52Ykc5eUxuSm5ZaUE5SUhSdmJtVk5ZWEJ3YVc1bktDQm5iRjlHY21GblEyOXNiM0l1Y21kaUlDazdDaU5sYm1ScFptQXNJSEJuSUQwZ1lDTnBabTVrWldZZ2MyRjBkWEpoZEdVS0kyUmxabWx1WlNCellYUjFjbUYwWlNnZ1lTQXBJR05zWVcxd0tDQmhMQ0F3TGpBc0lERXVNQ0FwQ2lObGJtUnBaZ3AxYm1sbWIzSnRJR1pzYjJGMElIUnZibVZOWVhCd2FXNW5SWGh3YjNOMWNtVTdDblpsWXpNZ1RHbHVaV0Z5Vkc5dVpVMWhjSEJwYm1jb0lIWmxZek1nWTI5c2IzSWdLU0I3Q2dseVpYUjFjbTRnYzJGMGRYSmhkR1VvSUhSdmJtVk5ZWEJ3YVc1blJYaHdiM04xY21VZ0tpQmpiMnh2Y2lBcE93cDlDblpsWXpNZ1VtVnBibWhoY21SVWIyNWxUV0Z3Y0dsdVp5Z2dkbVZqTXlCamIyeHZjaUFwSUhzS0NXTnZiRzl5SUNvOUlIUnZibVZOWVhCd2FXNW5SWGh3YjNOMWNtVTdDZ2x5WlhSMWNtNGdjMkYwZFhKaGRHVW9JR052Ykc5eUlDOGdLQ0IyWldNektDQXhMakFnS1NBcklHTnZiRzl5SUNrZ0tUc0tmUXAyWldNeklFOXdkR2x0YVhwbFpFTnBibVZ2YmxSdmJtVk5ZWEJ3YVc1bktDQjJaV016SUdOdmJHOXlJQ2tnZXdvSlkyOXNiM0lnS2owZ2RHOXVaVTFoY0hCcGJtZEZlSEJ2YzNWeVpUc0tDV052Ykc5eUlEMGdiV0Y0S0NCMlpXTXpLQ0F3TGpBZ0tTd2dZMjlzYjNJZ0xTQXdMakF3TkNBcE93b0pjbVYwZFhKdUlIQnZkeWdnS0NCamIyeHZjaUFxSUNnZ05pNHlJQ29nWTI5c2IzSWdLeUF3TGpVZ0tTQXBJQzhnS0NCamIyeHZjaUFxSUNnZ05pNHlJQ29nWTI5c2IzSWdLeUF4TGpjZ0tTQXJJREF1TURZZ0tTd2dkbVZqTXlnZ01pNHlJQ2tnS1RzS2ZRcDJaV016SUZKU1ZFRnVaRTlFVkVacGRDZ2dkbVZqTXlCMklDa2dld29KZG1Wak15QmhJRDBnZGlBcUlDZ2dkaUFySURBdU1ESTBOVGM0TmlBcElDMGdNQzR3TURBd09UQTFNemM3Q2dsMlpXTXpJR0lnUFNCMklDb2dLQ0F3TGprNE16Y3lPU0FxSUhZZ0t5QXdMalF6TWprMU1UQWdLU0FySURBdU1qTTRNRGd4T3dvSmNtVjBkWEp1SUdFZ0x5QmlPd3A5Q25abFl6TWdRVU5GVTBacGJHMXBZMVJ2Ym1WTllYQndhVzVuS0NCMlpXTXpJR052Ykc5eUlDa2dld29KWTI5dWMzUWdiV0YwTXlCQlEwVlRTVzV3ZFhSTllYUWdQU0J0WVhRektBb0pDWFpsWXpNb0lEQXVOVGszTVRrc0lEQXVNRGMyTURBc0lEQXVNREk0TkRBZ0tTd0pDWFpsWXpNb0lEQXVNelUwTlRnc0lEQXVPVEE0TXpRc0lEQXVNVE16T0RNZ0tTd0tDUWwyWldNektDQXdMakEwT0RJekxDQXdMakF4TlRZMkxDQXdMamd6TnpjM0lDa0tDU2s3Q2dsamIyNXpkQ0J0WVhReklFRkRSVk5QZFhSd2RYUk5ZWFFnUFNCdFlYUXpLQW9KQ1habFl6TW9JQ0F4TGpZd05EYzFMQ0F0TUM0eE1ESXdPQ3dnTFRBdU1EQXpNamNnS1N3SkNYWmxZek1vSUMwd0xqVXpNVEE0TENBZ01TNHhNRGd4TXl3Z0xUQXVNRGN5TnpZZ0tTd0tDUWwyWldNektDQXRNQzR3TnpNMk55d2dMVEF1TURBMk1EVXNJQ0F4TGpBM05qQXlJQ2tLQ1NrN0NnbGpiMnh2Y2lBcVBTQjBiMjVsVFdGd2NHbHVaMFY0Y0c5emRYSmxJQzhnTUM0Mk93b0pZMjlzYjNJZ1BTQkJRMFZUU1c1d2RYUk5ZWFFnS2lCamIyeHZjanNLQ1dOdmJHOXlJRDBnVWxKVVFXNWtUMFJVUm1sMEtDQmpiMnh2Y2lBcE93b0pZMjlzYjNJZ1BTQkJRMFZUVDNWMGNIVjBUV0YwSUNvZ1kyOXNiM0k3Q2dseVpYUjFjbTRnYzJGMGRYSmhkR1VvSUdOdmJHOXlJQ2s3Q24wS2RtVmpNeUJEZFhOMGIyMVViMjVsVFdGd2NHbHVaeWdnZG1Wak15QmpiMnh2Y2lBcElIc2djbVYwZFhKdUlHTnZiRzl5T3lCOVlDd2diV2NnUFNCZ0kybG1aR1ZtSUZWVFJWOVVVa0ZPVTAxSlUxTkpUMDRLQ1cxaGRHVnlhV0ZzTG5SeVlXNXpiV2x6YzJsdmJpQTlJSFJ5WVc1emJXbHpjMmx2YmpzS0NXMWhkR1Z5YVdGc0xuUnlZVzV6YldsemMybHZia0ZzY0doaElEMGdNUzR3T3dvSmJXRjBaWEpwWVd3dWRHaHBZMnR1WlhOeklEMGdkR2hwWTJ0dVpYTnpPd29KYldGMFpYSnBZV3d1WVhSMFpXNTFZWFJwYjI1RWFYTjBZVzVqWlNBOUlHRjBkR1Z1ZFdGMGFXOXVSR2x6ZEdGdVkyVTdDZ2x0WVhSbGNtbGhiQzVoZEhSbGJuVmhkR2x2YmtOdmJHOXlJRDBnWVhSMFpXNTFZWFJwYjI1RGIyeHZjanNLQ1NOcFptUmxaaUJWVTBWZlZGSkJUbE5OU1ZOVFNVOU9UVUZRQ2drSmJXRjBaWEpwWVd3dWRISmhibk50YVhOemFXOXVJQ285SUhSbGVIUjFjbVV5UkNnZ2RISmhibk50YVhOemFXOXVUV0Z3TENCMlZISmhibk50YVhOemFXOXVUV0Z3VlhZZ0tTNXlPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDFSSVNVTkxUa1ZUVTAxQlVBb0pDVzFoZEdWeWFXRnNMblJvYVdOcmJtVnpjeUFxUFNCMFpYaDBkWEpsTWtRb0lIUm9hV05yYm1WemMwMWhjQ3dnZGxSb2FXTnJibVZ6YzAxaGNGVjJJQ2t1WnpzS0NTTmxibVJwWmdvSmRtVmpNeUJ3YjNNZ1BTQjJWMjl5YkdSUWIzTnBkR2x2YmpzS0NYWmxZek1nZGlBOUlHNXZjbTFoYkdsNlpTZ2dZMkZ0WlhKaFVHOXphWFJwYjI0Z0xTQndiM01nS1RzS0NYWmxZek1nYmlBOUlHbHVkbVZ5YzJWVWNtRnVjMlp2Y20xRWFYSmxZM1JwYjI0b0lHNXZjbTFoYkN3Z2RtbGxkMDFoZEhKcGVDQXBPd29KZG1Wak5DQjBjbUZ1YzIxcGRIUmxaQ0E5SUdkbGRFbENURlp2YkhWdFpWSmxabkpoWTNScGIyNG9DZ2tKYml3Z2Rpd2diV0YwWlhKcFlXd3VjbTkxWjJodVpYTnpMQ0J0WVhSbGNtbGhiQzVrYVdabWRYTmxRMjlzYjNJc0lHMWhkR1Z5YVdGc0xuTndaV04xYkdGeVEyOXNiM0lzSUcxaGRHVnlhV0ZzTG5Od1pXTjFiR0Z5Umprd0xBb0pDWEJ2Y3l3Z2JXOWtaV3hOWVhSeWFYZ3NJSFpwWlhkTllYUnlhWGdzSUhCeWIycGxZM1JwYjI1TllYUnlhWGdzSUcxaGRHVnlhV0ZzTG1sdmNpd2diV0YwWlhKcFlXd3VkR2hwWTJ0dVpYTnpMQW9KQ1cxaGRHVnlhV0ZzTG1GMGRHVnVkV0YwYVc5dVEyOXNiM0lzSUcxaGRHVnlhV0ZzTG1GMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVZ0tUc0tDVzFoZEdWeWFXRnNMblJ5WVc1emJXbHpjMmx2YmtGc2NHaGhJRDBnYldsNEtDQnRZWFJsY21saGJDNTBjbUZ1YzIxcGMzTnBiMjVCYkhCb1lTd2dkSEpoYm5OdGFYUjBaV1F1WVN3Z2JXRjBaWEpwWVd3dWRISmhibk50YVhOemFXOXVJQ2s3Q2dsMGIzUmhiRVJwWm1aMWMyVWdQU0J0YVhnb0lIUnZkR0ZzUkdsbVpuVnpaU3dnZEhKaGJuTnRhWFIwWldRdWNtZGlMQ0J0WVhSbGNtbGhiQzUwY21GdWMyMXBjM05wYjI0Z0tUc0tJMlZ1WkdsbVlDd2daMmNnUFNCZ0kybG1aR1ZtSUZWVFJWOVVVa0ZPVTAxSlUxTkpUMDRLQ1hWdWFXWnZjbTBnWm14dllYUWdkSEpoYm5OdGFYTnphVzl1T3dvSmRXNXBabTl5YlNCbWJHOWhkQ0IwYUdsamEyNWxjM003Q2dsMWJtbG1iM0p0SUdac2IyRjBJR0YwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlU3Q2dsMWJtbG1iM0p0SUhabFl6TWdZWFIwWlc1MVlYUnBiMjVEYjJ4dmNqc0tDU05wWm1SbFppQlZVMFZmVkZKQlRsTk5TVk5UU1U5T1RVRlFDZ2tKZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnZEhKaGJuTnRhWE56YVc5dVRXRndPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDFSSVNVTkxUa1ZUVTAxQlVBb0pDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSFJvYVdOcmJtVnpjMDFoY0RzS0NTTmxibVJwWmdvSmRXNXBabTl5YlNCMlpXTXlJSFJ5WVc1emJXbHpjMmx2YmxOaGJYQnNaWEpUYVhwbE93b0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdkSEpoYm5OdGFYTnphVzl1VTJGdGNHeGxjazFoY0RzS0NYVnVhV1p2Y20wZ2JXRjBOQ0J0YjJSbGJFMWhkSEpwZURzS0NYVnVhV1p2Y20wZ2JXRjBOQ0J3Y205cVpXTjBhVzl1VFdGMGNtbDRPd29KZG1GeWVXbHVaeUIyWldNeklIWlhiM0pzWkZCdmMybDBhVzl1T3dvSlpteHZZWFFnZHpBb0lHWnNiMkYwSUdFZ0tTQjdDZ2tKY21WMGRYSnVJQ2dnTVM0d0lDOGdOaTR3SUNrZ0tpQW9JR0VnS2lBb0lHRWdLaUFvSUMwZ1lTQXJJRE11TUNBcElDMGdNeTR3SUNrZ0t5QXhMakFnS1RzS0NYMEtDV1pzYjJGMElIY3hLQ0JtYkc5aGRDQmhJQ2tnZXdvSkNYSmxkSFZ5YmlBb0lERXVNQ0F2SURZdU1DQXBJQ29nS0NCaElDb2dJR0VnS2lBb0lETXVNQ0FxSUdFZ0xTQTJMakFnS1NBcklEUXVNQ0FwT3dvSmZRb0pabXh2WVhRZ2R6SW9JR1pzYjJGMElHRWdLWHNLQ1FseVpYUjFjbTRnS0NBeExqQWdMeUEyTGpBZ0tTQXFJQ2dnWVNBcUlDZ2dZU0FxSUNnZ0xTQXpMakFnS2lCaElDc2dNeTR3SUNrZ0t5QXpMakFnS1NBcklERXVNQ0FwT3dvSmZRb0pabXh2WVhRZ2R6TW9JR1pzYjJGMElHRWdLU0I3Q2drSmNtVjBkWEp1SUNnZ01TNHdJQzhnTmk0d0lDa2dLaUFvSUdFZ0tpQmhJQ29nWVNBcE93b0pmUW9KWm14dllYUWdaekFvSUdac2IyRjBJR0VnS1NCN0Nna0pjbVYwZFhKdUlIY3dLQ0JoSUNrZ0t5QjNNU2dnWVNBcE93b0pmUW9KWm14dllYUWdaekVvSUdac2IyRjBJR0VnS1NCN0Nna0pjbVYwZFhKdUlIY3lLQ0JoSUNrZ0t5QjNNeWdnWVNBcE93b0pmUW9KWm14dllYUWdhREFvSUdac2IyRjBJR0VnS1NCN0Nna0pjbVYwZFhKdUlDMGdNUzR3SUNzZ2R6RW9JR0VnS1NBdklDZ2dkekFvSUdFZ0tTQXJJSGN4S0NCaElDa2dLVHNLQ1gwS0NXWnNiMkYwSUdneEtDQm1iRzloZENCaElDa2dld29KQ1hKbGRIVnliaUF4TGpBZ0t5QjNNeWdnWVNBcElDOGdLQ0IzTWlnZ1lTQXBJQ3NnZHpNb0lHRWdLU0FwT3dvSmZRb0pkbVZqTkNCaWFXTjFZbWxqS0NCellXMXdiR1Z5TWtRZ2RHVjRMQ0IyWldNeUlIVjJMQ0IyWldNMElIUmxlR1ZzVTJsNlpTd2dabXh2WVhRZ2JHOWtJQ2tnZXdvSkNYVjJJRDBnZFhZZ0tpQjBaWGhsYkZOcGVtVXVlbmNnS3lBd0xqVTdDZ2tKZG1Wak1pQnBkWFlnUFNCbWJHOXZjaWdnZFhZZ0tUc0tDUWwyWldNeUlHWjFkaUE5SUdaeVlXTjBLQ0IxZGlBcE93b0pDV1pzYjJGMElHY3dlQ0E5SUdjd0tDQm1kWFl1ZUNBcE93b0pDV1pzYjJGMElHY3hlQ0E5SUdjeEtDQm1kWFl1ZUNBcE93b0pDV1pzYjJGMElHZ3dlQ0E5SUdnd0tDQm1kWFl1ZUNBcE93b0pDV1pzYjJGMElHZ3hlQ0E5SUdneEtDQm1kWFl1ZUNBcE93b0pDV1pzYjJGMElHZ3dlU0E5SUdnd0tDQm1kWFl1ZVNBcE93b0pDV1pzYjJGMElHZ3hlU0E5SUdneEtDQm1kWFl1ZVNBcE93b0pDWFpsWXpJZ2NEQWdQU0FvSUhabFl6SW9JR2wxZGk1NElDc2dhREI0TENCcGRYWXVlU0FySUdnd2VTQXBJQzBnTUM0MUlDa2dLaUIwWlhobGJGTnBlbVV1ZUhrN0Nna0pkbVZqTWlCd01TQTlJQ2dnZG1Wak1pZ2dhWFYyTG5nZ0t5Qm9NWGdzSUdsMWRpNTVJQ3NnYURCNUlDa2dMU0F3TGpVZ0tTQXFJSFJsZUdWc1UybDZaUzU0ZVRzS0NRbDJaV015SUhBeUlEMGdLQ0IyWldNeUtDQnBkWFl1ZUNBcklHZ3dlQ3dnYVhWMkxua2dLeUJvTVhrZ0tTQXRJREF1TlNBcElDb2dkR1Y0Wld4VGFYcGxMbmg1T3dvSkNYWmxZeklnY0RNZ1BTQW9JSFpsWXpJb0lHbDFkaTU0SUNzZ2FERjRMQ0JwZFhZdWVTQXJJR2d4ZVNBcElDMGdNQzQxSUNrZ0tpQjBaWGhsYkZOcGVtVXVlSGs3Q2drSmNtVjBkWEp1SUdjd0tDQm1kWFl1ZVNBcElDb2dLQ0JuTUhnZ0tpQjBaWGgwZFhKbFRHOWtLQ0IwWlhnc0lIQXdMQ0JzYjJRZ0tTQXJJR2N4ZUNBcUlIUmxlSFIxY21WTWIyUW9JSFJsZUN3Z2NERXNJR3h2WkNBcElDa2dLd29KQ1Fsbk1TZ2dablYyTG5rZ0tTQXFJQ2dnWnpCNElDb2dkR1Y0ZEhWeVpVeHZaQ2dnZEdWNExDQndNaXdnYkc5a0lDa2dLeUJuTVhnZ0tpQjBaWGgwZFhKbFRHOWtLQ0IwWlhnc0lIQXpMQ0JzYjJRZ0tTQXBPd29KZlFvSmRtVmpOQ0IwWlhoMGRYSmxRbWxqZFdKcFl5Z2djMkZ0Y0d4bGNqSkVJSE5oYlhCc1pYSXNJSFpsWXpJZ2RYWXNJR1pzYjJGMElHeHZaQ0FwSUhzS0NRbDJaV015SUdaTWIyUlRhWHBsSUQwZ2RtVmpNaWdnZEdWNGRIVnlaVk5wZW1Vb0lITmhiWEJzWlhJc0lHbHVkQ2dnYkc5a0lDa2dLU0FwT3dvSkNYWmxZeklnWTB4dlpGTnBlbVVnUFNCMlpXTXlLQ0IwWlhoMGRYSmxVMmw2WlNnZ2MyRnRjR3hsY2l3Z2FXNTBLQ0JzYjJRZ0t5QXhMakFnS1NBcElDazdDZ2tKZG1Wak1pQm1URzlrVTJsNlpVbHVkaUE5SURFdU1DQXZJR1pNYjJSVGFYcGxPd29KQ1habFl6SWdZMHh2WkZOcGVtVkpibllnUFNBeExqQWdMeUJqVEc5a1UybDZaVHNLQ1FsMlpXTTBJR1pUWVcxd2JHVWdQU0JpYVdOMVltbGpLQ0J6WVcxd2JHVnlMQ0IxZGl3Z2RtVmpOQ2dnWmt4dlpGTnBlbVZKYm5Zc0lHWk1iMlJUYVhwbElDa3NJR1pzYjI5eUtDQnNiMlFnS1NBcE93b0pDWFpsWXpRZ1kxTmhiWEJzWlNBOUlHSnBZM1ZpYVdNb0lITmhiWEJzWlhJc0lIVjJMQ0IyWldNMEtDQmpURzlrVTJsNlpVbHVkaXdnWTB4dlpGTnBlbVVnS1N3Z1kyVnBiQ2dnYkc5a0lDa2dLVHNLQ1FseVpYUjFjbTRnYldsNEtDQm1VMkZ0Y0d4bExDQmpVMkZ0Y0d4bExDQm1jbUZqZENnZ2JHOWtJQ2tnS1RzS0NYMEtDWFpsWXpNZ1oyVjBWbTlzZFcxbFZISmhibk50YVhOemFXOXVVbUY1S0NCamIyNXpkQ0JwYmlCMlpXTXpJRzRzSUdOdmJuTjBJR2x1SUhabFl6TWdkaXdnWTI5dWMzUWdhVzRnWm14dllYUWdkR2hwWTJ0dVpYTnpMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnBiM0lzSUdOdmJuTjBJR2x1SUcxaGREUWdiVzlrWld4TllYUnlhWGdnS1NCN0Nna0pkbVZqTXlCeVpXWnlZV04wYVc5dVZtVmpkRzl5SUQwZ2NtVm1jbUZqZENnZ0xTQjJMQ0J1YjNKdFlXeHBlbVVvSUc0Z0tTd2dNUzR3SUM4Z2FXOXlJQ2s3Q2drSmRtVmpNeUJ0YjJSbGJGTmpZV3hsT3dvSkNXMXZaR1ZzVTJOaGJHVXVlQ0E5SUd4bGJtZDBhQ2dnZG1Wak15Z2diVzlrWld4TllYUnlhWGhiSURBZ1hTNTRlWG9nS1NBcE93b0pDVzF2WkdWc1UyTmhiR1V1ZVNBOUlHeGxibWQwYUNnZ2RtVmpNeWdnYlc5a1pXeE5ZWFJ5YVhoYklERWdYUzU0ZVhvZ0tTQXBPd29KQ1cxdlpHVnNVMk5oYkdVdWVpQTlJR3hsYm1kMGFDZ2dkbVZqTXlnZ2JXOWtaV3hOWVhSeWFYaGJJRElnWFM1NGVYb2dLU0FwT3dvSkNYSmxkSFZ5YmlCdWIzSnRZV3hwZW1Vb0lISmxabkpoWTNScGIyNVdaV04wYjNJZ0tTQXFJSFJvYVdOcmJtVnpjeUFxSUcxdlpHVnNVMk5oYkdVN0NnbDlDZ2xtYkc5aGRDQmhjSEJzZVVsdmNsUnZVbTkxWjJodVpYTnpLQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnliM1ZuYUc1bGMzTXNJR052Ym5OMElHbHVJR1pzYjJGMElHbHZjaUFwSUhzS0NRbHlaWFIxY200Z2NtOTFaMmh1WlhOeklDb2dZMnhoYlhBb0lHbHZjaUFxSURJdU1DQXRJREl1TUN3Z01DNHdMQ0F4TGpBZ0tUc0tDWDBLQ1habFl6UWdaMlYwVkhKaGJuTnRhWE56YVc5dVUyRnRjR3hsS0NCamIyNXpkQ0JwYmlCMlpXTXlJR1p5WVdkRGIyOXlaQ3dnWTI5dWMzUWdhVzRnWm14dllYUWdjbTkxWjJodVpYTnpMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnBiM0lnS1NCN0Nna0pabXh2WVhRZ2JHOWtJRDBnYkc5bk1pZ2dkSEpoYm5OdGFYTnphVzl1VTJGdGNHeGxjbE5wZW1VdWVDQXBJQ29nWVhCd2JIbEpiM0pVYjFKdmRXZG9ibVZ6Y3lnZ2NtOTFaMmh1WlhOekxDQnBiM0lnS1RzS0NRbHlaWFIxY200Z2RHVjRkSFZ5WlVKcFkzVmlhV01vSUhSeVlXNXpiV2x6YzJsdmJsTmhiWEJzWlhKTllYQXNJR1p5WVdkRGIyOXlaQzU0ZVN3Z2JHOWtJQ2s3Q2dsOUNnbDJaV016SUhadmJIVnRaVUYwZEdWdWRXRjBhVzl1S0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0IwY21GdWMyMXBjM05wYjI1RWFYTjBZVzVqWlN3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJoZEhSbGJuVmhkR2x2YmtOdmJHOXlMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmhkSFJsYm5WaGRHbHZia1JwYzNSaGJtTmxJQ2tnZXdvSkNXbG1JQ2dnYVhOcGJtWW9JR0YwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlVnS1NBcElIc0tDUWtKY21WMGRYSnVJSFpsWXpNb0lERXVNQ0FwT3dvSkNYMGdaV3h6WlNCN0Nna0pDWFpsWXpNZ1lYUjBaVzUxWVhScGIyNURiMlZtWm1samFXVnVkQ0E5SUMxc2IyY29JR0YwZEdWdWRXRjBhVzl1UTI5c2IzSWdLU0F2SUdGMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVN0Nna0pDWFpsWXpNZ2RISmhibk50YVhSMFlXNWpaU0E5SUdWNGNDZ2dMU0JoZEhSbGJuVmhkR2x2YmtOdlpXWm1hV05wWlc1MElDb2dkSEpoYm5OdGFYTnphVzl1UkdsemRHRnVZMlVnS1RzSkNRbHlaWFIxY200Z2RISmhibk50YVhSMFlXNWpaVHNLQ1FsOUNnbDlDZ2wyWldNMElHZGxkRWxDVEZadmJIVnRaVkpsWm5KaFkzUnBiMjRvSUdOdmJuTjBJR2x1SUhabFl6TWdiaXdnWTI5dWMzUWdhVzRnZG1Wak15QjJMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnliM1ZuYUc1bGMzTXNJR052Ym5OMElHbHVJSFpsWXpNZ1pHbG1ablZ6WlVOdmJHOXlMQW9KQ1dOdmJuTjBJR2x1SUhabFl6TWdjM0JsWTNWc1lYSkRiMnh2Y2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnYzNCbFkzVnNZWEpHT1RBc0lHTnZibk4wSUdsdUlIWmxZek1nY0c5emFYUnBiMjRzSUdOdmJuTjBJR2x1SUcxaGREUWdiVzlrWld4TllYUnlhWGdzQ2drSlkyOXVjM1FnYVc0Z2JXRjBOQ0IyYVdWM1RXRjBjbWw0TENCamIyNXpkQ0JwYmlCdFlYUTBJSEJ5YjJwTllYUnlhWGdzSUdOdmJuTjBJR2x1SUdac2IyRjBJR2x2Y2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnZEdocFkydHVaWE56TEFvSkNXTnZibk4wSUdsdUlIWmxZek1nWVhSMFpXNTFZWFJwYjI1RGIyeHZjaXdnWTI5dWMzUWdhVzRnWm14dllYUWdZWFIwWlc1MVlYUnBiMjVFYVhOMFlXNWpaU0FwSUhzS0NRbDJaV016SUhSeVlXNXpiV2x6YzJsdmJsSmhlU0E5SUdkbGRGWnZiSFZ0WlZSeVlXNXpiV2x6YzJsdmJsSmhlU2dnYml3Z2Rpd2dkR2hwWTJ0dVpYTnpMQ0JwYjNJc0lHMXZaR1ZzVFdGMGNtbDRJQ2s3Q2drSmRtVmpNeUJ5WldaeVlXTjBaV1JTWVhsRmVHbDBJRDBnY0c5emFYUnBiMjRnS3lCMGNtRnVjMjFwYzNOcGIyNVNZWGs3Q2drSmRtVmpOQ0J1WkdOUWIzTWdQU0J3Y205cVRXRjBjbWw0SUNvZ2RtbGxkMDFoZEhKcGVDQXFJSFpsWXpRb0lISmxabkpoWTNSbFpGSmhlVVY0YVhRc0lERXVNQ0FwT3dvSkNYWmxZeklnY21WbWNtRmpkR2x2YmtOdmIzSmtjeUE5SUc1a1kxQnZjeTU0ZVNBdklHNWtZMUJ2Y3k1M093b0pDWEpsWm5KaFkzUnBiMjVEYjI5eVpITWdLejBnTVM0d093b0pDWEpsWm5KaFkzUnBiMjVEYjI5eVpITWdMejBnTWk0d093b0pDWFpsWXpRZ2RISmhibk50YVhSMFpXUk1hV2RvZENBOUlHZGxkRlJ5WVc1emJXbHpjMmx2YmxOaGJYQnNaU2dnY21WbWNtRmpkR2x2YmtOdmIzSmtjeXdnY205MVoyaHVaWE56TENCcGIzSWdLVHNLQ1FsMlpXTXpJSFJ5WVc1emJXbDBkR0Z1WTJVZ1BTQmthV1ptZFhObFEyOXNiM0lnS2lCMmIyeDFiV1ZCZEhSbGJuVmhkR2x2YmlnZ2JHVnVaM1JvS0NCMGNtRnVjMjFwYzNOcGIyNVNZWGtnS1N3Z1lYUjBaVzUxWVhScGIyNURiMnh2Y2l3Z1lYUjBaVzUxWVhScGIyNUVhWE4wWVc1alpTQXBPd29KQ1habFl6TWdZWFIwWlc1MVlYUmxaRU52Ykc5eUlEMGdkSEpoYm5OdGFYUjBZVzVqWlNBcUlIUnlZVzV6YldsMGRHVmtUR2xuYUhRdWNtZGlPd29KQ1habFl6TWdSaUE5SUVWdWRtbHliMjV0Wlc1MFFsSkVSaWdnYml3Z2Rpd2djM0JsWTNWc1lYSkRiMnh2Y2l3Z2MzQmxZM1ZzWVhKR09UQXNJSEp2ZFdkb2JtVnpjeUFwT3dvSkNXWnNiMkYwSUhSeVlXNXpiV2wwZEdGdVkyVkdZV04wYjNJZ1BTQW9JSFJ5WVc1emJXbDBkR0Z1WTJVdWNpQXJJSFJ5WVc1emJXbDBkR0Z1WTJVdVp5QXJJSFJ5WVc1emJXbDBkR0Z1WTJVdVlpQXBJQzhnTXk0d093b0pDWEpsZEhWeWJpQjJaV00wS0NBb0lERXVNQ0F0SUVZZ0tTQXFJR0YwZEdWdWRXRjBaV1JEYjJ4dmNpd2dNUzR3SUMwZ0tDQXhMakFnTFNCMGNtRnVjMjFwZEhSbFpFeHBaMmgwTG1FZ0tTQXFJSFJ5WVc1emJXbDBkR0Z1WTJWR1lXTjBiM0lnS1RzS0NYMEtJMlZ1WkdsbVlDd2dYMmNnUFNCZ0kybG1JR1JsWm1sdVpXUW9JRlZUUlY5VlZpQXBJSHg4SUdSbFptbHVaV1FvSUZWVFJWOUJUa2xUVDFSU1QxQlpJQ2tLQ1haaGNubHBibWNnZG1Wak1pQjJWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDAxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUVV4UVNFRk5RVkFLQ1haaGNubHBibWNnZG1Wak1pQjJRV3h3YUdGTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVEVsSFNGUk5RVkFLQ1haaGNubHBibWNnZG1Wak1pQjJUR2xuYUhSTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUVU5TlFWQUtDWFpoY25scGJtY2dkbVZqTWlCMlFXOU5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFsVk5VRTFCVUFvSmRtRnllV2x1WnlCMlpXTXlJSFpDZFcxd1RXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDA1UFVrMUJURTFCVUFvSmRtRnllV2x1WnlCMlpXTXlJSFpPYjNKdFlXeE5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlJVMUpVMU5KVmtWTlFWQUtDWFpoY25scGJtY2dkbVZqTWlCMlJXMXBjM05wZG1WTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVFVWVVFVeE9SVk5UVFVGUUNnbDJZWEo1YVc1bklIWmxZeklnZGsxbGRHRnNibVZ6YzAxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlTVDFWSFNFNUZVMU5OUVZBS0NYWmhjbmxwYm1jZ2RtVmpNaUIyVW05MVoyaHVaWE56VFdGd1ZYWTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMEZPU1ZOUFZGSlBVRmxOUVZBS0NYWmhjbmxwYm1jZ2RtVmpNaUIyUVc1cGMyOTBjbTl3ZVUxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlEVEVWQlVrTlBRVlJOUVZBS0NYWmhjbmxwYm1jZ2RtVmpNaUIyUTJ4bFlYSmpiMkYwVFdGd1ZYWTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWRjlPVDFKTlFVeE5RVkFLQ1haaGNubHBibWNnZG1Wak1pQjJRMnhsWVhKamIyRjBUbTl5YldGc1RXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBOTVJVRlNRMDlCVkY5U1QxVkhTRTVGVTFOTlFWQUtDWFpoY25scGJtY2dkbVZqTWlCMlEyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBsU1NVUkZVME5GVGtORlRVRlFDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RrbHlhV1JsYzJObGJtTmxUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwbFNTVVJGVTBORlRrTkZYMVJJU1VOTFRrVlRVMDFCVUFvSmRtRnllV2x1WnlCMlpXTXlJSFpKY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUU0VWRlRsOURUMHhQVWsxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaVGFHVmxia052Ykc5eVRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDFOSVJVVk9YMUpQVlVkSVRrVlRVMDFCVUFvSmRtRnllV2x1WnlCMlpXTXlJSFpUYUdWbGJsSnZkV2RvYm1WemMwMWhjRlYyT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFVFVkRWVXhCVWsxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaVGNHVmpkV3hoY2sxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUVUVWRFZVeEJVbDlEVDB4UFVrMUJVQW9KZG1GeWVXbHVaeUIyWldNeUlIWlRjR1ZqZFd4aGNrTnZiRzl5VFdGd1ZYWTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMU5RUlVOVlRFRlNYMGxPVkVWT1UwbFVXVTFCVUFvSmRtRnllV2x1WnlCMlpXTXlJSFpUY0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0ZWMk93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVVVa0ZPVTAxSlUxTkpUMDVOUVZBS0NYVnVhV1p2Y20wZ2JXRjBNeUIwY21GdWMyMXBjM05wYjI1TllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RsUnlZVzV6YldsemMybHZiazFoY0ZWMk93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVVTRWxEUzA1RlUxTk5RVkFLQ1hWdWFXWnZjbTBnYldGME15QjBhR2xqYTI1bGMzTk5ZWEJVY21GdWMyWnZjbTA3Q2dsMllYSjVhVzVuSUhabFl6SWdkbFJvYVdOcmJtVnpjMDFoY0ZWMk93b2paVzVrYVdaZ0xDQjRaeUE5SUdBamFXWWdaR1ZtYVc1bFpDZ2dWVk5GWDFWV0lDa2dmSHdnWkdWbWFXNWxaQ2dnVlZORlgwRk9TVk5QVkZKUFVGa2dLUW9KZG1GeWVXbHVaeUIyWldNeUlIWlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVFVGUUNnbDFibWxtYjNKdElHMWhkRE1nYldGd1ZISmhibk5tYjNKdE93b0pkbUZ5ZVdsdVp5QjJaV015SUhaTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUVV4UVNFRk5RVkFLQ1hWdWFXWnZjbTBnYldGME15QmhiSEJvWVUxaGNGUnlZVzV6Wm05eWJUc0tDWFpoY25scGJtY2dkbVZqTWlCMlFXeHdhR0ZOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZURWxIU0ZSTlFWQUtDWFZ1YVdadmNtMGdiV0YwTXlCc2FXZG9kRTFoY0ZSeVlXNXpabTl5YlRzS0NYWmhjbmxwYm1jZ2RtVmpNaUIyVEdsbmFIUk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVOU5RVkFLQ1hWdWFXWnZjbTBnYldGME15QmhiMDFoY0ZSeVlXNXpabTl5YlRzS0NYWmhjbmxwYm1jZ2RtVmpNaUIyUVc5TllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUWxWTlVFMUJVQW9KZFc1cFptOXliU0J0WVhReklHSjFiWEJOWVhCVWNtRnVjMlp2Y20wN0NnbDJZWEo1YVc1bklIWmxZeklnZGtKMWJYQk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlRrOVNUVUZNVFVGUUNnbDFibWxtYjNKdElHMWhkRE1nYm05eWJXRnNUV0Z3VkhKaGJuTm1iM0p0T3dvSmRtRnllV2x1WnlCMlpXTXlJSFpPYjNKdFlXeE5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlJFbFRVRXhCUTBWTlJVNVVUVUZRQ2dsMWJtbG1iM0p0SUcxaGRETWdaR2x6Y0d4aFkyVnRaVzUwVFdGd1ZISmhibk5tYjNKdE93b0pkbUZ5ZVdsdVp5QjJaV015SUhaRWFYTndiR0ZqWlcxbGJuUk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlJVMUpVMU5KVmtWTlFWQUtDWFZ1YVdadmNtMGdiV0YwTXlCbGJXbHpjMmwyWlUxaGNGUnlZVzV6Wm05eWJUc0tDWFpoY25scGJtY2dkbVZqTWlCMlJXMXBjM05wZG1WTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVFVWVVFVeE9SVk5UVFVGUUNnbDFibWxtYjNKdElHMWhkRE1nYldWMFlXeHVaWE56VFdGd1ZISmhibk5tYjNKdE93b0pkbUZ5ZVdsdVp5QjJaV015SUhaTlpYUmhiRzVsYzNOTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVWs5VlIwaE9SVk5UVFVGUUNnbDFibWxtYjNKdElHMWhkRE1nY205MVoyaHVaWE56VFdGd1ZISmhibk5tYjNKdE93b0pkbUZ5ZVdsdVp5QjJaV015SUhaU2IzVm5hRzVsYzNOTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUVU1SlUwOVVVazlRV1UxQlVBb0pkVzVwWm05eWJTQnRZWFF6SUdGdWFYTnZkSEp2Y0hsTllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RrRnVhWE52ZEhKdmNIbE5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVVRVRlFDZ2wxYm1sbWIzSnRJRzFoZERNZ1kyeGxZWEpqYjJGMFRXRndWSEpoYm5ObWIzSnRPd29KZG1GeWVXbHVaeUIyWldNeUlIWkRiR1ZoY21OdllYUk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVVgwNVBVazFCVEUxQlVBb0pkVzVwWm05eWJTQnRZWFF6SUdOc1pXRnlZMjloZEU1dmNtMWhiRTFoY0ZSeVlXNXpabTl5YlRzS0NYWmhjbmxwYm1jZ2RtVmpNaUIyUTJ4bFlYSmpiMkYwVG05eWJXRnNUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwTk1SVUZTUTA5QlZGOVNUMVZIU0U1RlUxTk5RVkFLQ1hWdWFXWnZjbTBnYldGME15QmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTk5ZWEJVY21GdWMyWnZjbTA3Q2dsMllYSjVhVzVuSUhabFl6SWdka05zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0ZWMk93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRTRVZGVGw5RFQweFBVazFCVUFvSmRXNXBabTl5YlNCdFlYUXpJSE5vWldWdVEyOXNiM0pOWVhCVWNtRnVjMlp2Y20wN0NnbDJZWEo1YVc1bklIWmxZeklnZGxOb1pXVnVRMjlzYjNKTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVTBoRlJVNWZVazlWUjBoT1JWTlRUVUZRQ2dsMWJtbG1iM0p0SUcxaGRETWdjMmhsWlc1U2IzVm5hRzVsYzNOTllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RsTm9aV1Z1VW05MVoyaHVaWE56VFdGd1ZYWTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GVFVGUUNnbDFibWxtYjNKdElHMWhkRE1nYVhKcFpHVnpZMlZ1WTJWTllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RrbHlhV1JsYzJObGJtTmxUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwbFNTVVJGVTBORlRrTkZYMVJJU1VOTFRrVlRVMDFCVUFvSmRXNXBabTl5YlNCdFlYUXpJR2x5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdGd1ZISmhibk5tYjNKdE93b0pkbUZ5ZVdsdVp5QjJaV015SUhaSmNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjRlYyT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFVFVkRWVXhCVWsxQlVBb0pkVzVwWm05eWJTQnRZWFF6SUhOd1pXTjFiR0Z5VFdGd1ZISmhibk5tYjNKdE93b0pkbUZ5ZVdsdVp5QjJaV015SUhaVGNHVmpkV3hoY2sxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUVUVWRFZVeEJVbDlEVDB4UFVrMUJVQW9KZFc1cFptOXliU0J0WVhReklITndaV04xYkdGeVEyOXNiM0pOWVhCVWNtRnVjMlp2Y20wN0NnbDJZWEo1YVc1bklIWmxZeklnZGxOd1pXTjFiR0Z5UTI5c2IzSk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlUxQkZRMVZNUVZKZlNVNVVSVTVUU1ZSWlRVRlFDZ2wxYm1sbWIzSnRJRzFoZERNZ2MzQmxZM1ZzWVhKSmJuUmxibk5wZEhsTllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RsTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDFSU1FVNVRUVWxUVTBsUFRrMUJVQW9KZFc1cFptOXliU0J0WVhReklIUnlZVzV6YldsemMybHZiazFoY0ZSeVlXNXpabTl5YlRzS0NYWmhjbmxwYm1jZ2RtVmpNaUIyVkhKaGJuTnRhWE56YVc5dVRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDFSSVNVTkxUa1ZUVTAxQlVBb0pkVzVwWm05eWJTQnRZWFF6SUhSb2FXTnJibVZ6YzAxaGNGUnlZVzV6Wm05eWJUc0tDWFpoY25scGJtY2dkbVZqTWlCMlZHaHBZMnR1WlhOelRXRndWWFk3Q2lObGJtUnBabUFzSUhabklEMGdZQ05wWmlCa1pXWnBibVZrS0NCVlUwVmZWVllnS1NCOGZDQmtaV1pwYm1Wa0tDQlZVMFZmUVU1SlUwOVVVazlRV1NBcENnbDJWWFlnUFNCMlpXTXpLQ0IxZGl3Z01TQXBMbmg1T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5TlFWQUtDWFpOWVhCVmRpQTlJQ2dnYldGd1ZISmhibk5tYjNKdElDb2dkbVZqTXlnZ1RVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVeFFTRUZOUVZBS0NYWkJiSEJvWVUxaGNGVjJJRDBnS0NCaGJIQm9ZVTFoY0ZSeVlXNXpabTl5YlNBcUlIWmxZek1vSUVGTVVFaEJUVUZRWDFWV0xDQXhJQ2tnS1M1NGVUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZURWxIU0ZSTlFWQUtDWFpNYVdkb2RFMWhjRlYySUQwZ0tDQnNhV2RvZEUxaGNGUnlZVzV6Wm05eWJTQXFJSFpsWXpNb0lFeEpSMGhVVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUVU5TlFWQUtDWFpCYjAxaGNGVjJJRDBnS0NCaGIwMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRUZQVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUWxWTlVFMUJVQW9KZGtKMWJYQk5ZWEJWZGlBOUlDZ2dZblZ0Y0UxaGNGUnlZVzV6Wm05eWJTQXFJSFpsWXpNb0lFSlZUVkJOUVZCZlZWWXNJREVnS1NBcExuaDVPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlPVDFKTlFVeE5RVkFLQ1haT2IzSnRZV3hOWVhCVmRpQTlJQ2dnYm05eWJXRnNUV0Z3VkhKaGJuTm1iM0p0SUNvZ2RtVmpNeWdnVGs5U1RVRk1UVUZRWDFWV0xDQXhJQ2tnS1M1NGVUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZSRWxUVUV4QlEwVk5SVTVVVFVGUUNnbDJSR2x6Y0d4aFkyVnRaVzUwVFdGd1ZYWWdQU0FvSUdScGMzQnNZV05sYldWdWRFMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRVJKVTFCTVFVTkZUVVZPVkUxQlVGOVZWaXdnTVNBcElDa3VlSGs3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBWTlNWTlRTVlpGVFVGUUNnbDJSVzFwYzNOcGRtVk5ZWEJWZGlBOUlDZ2daVzFwYzNOcGRtVk5ZWEJVY21GdWMyWnZjbTBnS2lCMlpXTXpLQ0JGVFVsVFUwbFdSVTFCVUY5VlZpd2dNU0FwSUNrdWVIazdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMDFGVkVGTVRrVlRVMDFCVUFvSmRrMWxkR0ZzYm1WemMwMWhjRlYySUQwZ0tDQnRaWFJoYkc1bGMzTk5ZWEJVY21GdWMyWnZjbTBnS2lCMlpXTXpLQ0JOUlZSQlRFNUZVMU5OUVZCZlZWWXNJREVnS1NBcExuaDVPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlTVDFWSFNFNUZVMU5OUVZBS0NYWlNiM1ZuYUc1bGMzTk5ZWEJWZGlBOUlDZ2djbTkxWjJodVpYTnpUV0Z3VkhKaGJuTm1iM0p0SUNvZ2RtVmpNeWdnVWs5VlIwaE9SVk5UVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUVU1SlUwOVVVazlRV1UxQlVBb0pka0Z1YVhOdmRISnZjSGxOWVhCVmRpQTlJQ2dnWVc1cGMyOTBjbTl3ZVUxaGNGUnlZVzV6Wm05eWJTQXFJSFpsWXpNb0lFRk9TVk5QVkZKUFVGbE5RVkJmVlZZc0lERWdLU0FwTG5oNU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUk5RVkFLQ1haRGJHVmhjbU52WVhSTllYQlZkaUE5SUNnZ1kyeGxZWEpqYjJGMFRXRndWSEpoYm5ObWIzSnRJQ29nZG1Wak15Z2dRMHhGUVZKRFQwRlVUVUZRWDFWV0xDQXhJQ2tnS1M1NGVUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVYMDVQVWsxQlRFMUJVQW9KZGtOc1pXRnlZMjloZEU1dmNtMWhiRTFoY0ZWMklEMGdLQ0JqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEJVY21GdWMyWnZjbTBnS2lCMlpXTXpLQ0JEVEVWQlVrTlBRVlJmVGs5U1RVRk1UVUZRWDFWV0xDQXhJQ2tnS1M1NGVUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVYMUpQVlVkSVRrVlRVMDFCVUFvSmRrTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjRlYySUQwZ0tDQmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTk5ZWEJVY21GdWMyWnZjbTBnS2lCMlpXTXpLQ0JEVEVWQlVrTlBRVlJmVWs5VlIwaE9SVk5UVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmU1ZKSlJFVlRRMFZPUTBWTlFWQUtDWFpKY21sa1pYTmpaVzVqWlUxaGNGVjJJRDBnS0NCcGNtbGtaWE5qWlc1alpVMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRWxTU1VSRlUwTkZUa05GVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmU1ZKSlJFVlRRMFZPUTBWZlZFaEpRMHRPUlZOVFRVRlFDZ2wyU1hKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYQlZkaUE5SUNnZ2FYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEJVY21GdWMyWnZjbTBnS2lCMlpXTXpLQ0JKVWtsRVJWTkRSVTVEUlY5VVNFbERTMDVGVTFOTlFWQmZWVllzSURFZ0tTQXBMbmg1T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFNFVkZUbDlEVDB4UFVrMUJVQW9KZGxOb1pXVnVRMjlzYjNKTllYQlZkaUE5SUNnZ2MyaGxaVzVEYjJ4dmNrMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRk5JUlVWT1gwTlBURTlTVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVTBoRlJVNWZVazlWUjBoT1JWTlRUVUZRQ2dsMlUyaGxaVzVTYjNWbmFHNWxjM05OWVhCVmRpQTlJQ2dnYzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEJVY21GdWMyWnZjbTBnS2lCMlpXTXpLQ0JUU0VWRlRsOVNUMVZIU0U1RlUxTk5RVkJmVlZZc0lERWdLU0FwTG5oNU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVrMUJVQW9KZGxOd1pXTjFiR0Z5VFdGd1ZYWWdQU0FvSUhOd1pXTjFiR0Z5VFdGd1ZISmhibk5tYjNKdElDb2dkbVZqTXlnZ1UxQkZRMVZNUVZKTlFWQmZWVllzSURFZ0tTQXBMbmg1T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFVFVkRWVXhCVWw5RFQweFBVazFCVUFvSmRsTndaV04xYkdGeVEyOXNiM0pOWVhCVmRpQTlJQ2dnYzNCbFkzVnNZWEpEYjJ4dmNrMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRk5RUlVOVlRFRlNYME5QVEU5U1RVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlUxQkZRMVZNUVZKZlNVNVVSVTVUU1ZSWlRVRlFDZ2wyVTNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhCVmRpQTlJQ2dnYzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhCVWNtRnVjMlp2Y20wZ0tpQjJaV016S0NCVFVFVkRWVXhCVWw5SlRsUkZUbE5KVkZsTlFWQmZWVllzSURFZ0tTQXBMbmg1T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VVVrRk9VMDFKVTFOSlQwNU5RVkFLQ1haVWNtRnVjMjFwYzNOcGIyNU5ZWEJWZGlBOUlDZ2dkSEpoYm5OdGFYTnphVzl1VFdGd1ZISmhibk5tYjNKdElDb2dkbVZqTXlnZ1ZGSkJUbE5OU1ZOVFNVOU9UVUZRWDFWV0xDQXhJQ2tnS1M1NGVUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZWRWhKUTB0T1JWTlRUVUZRQ2dsMlZHaHBZMnR1WlhOelRXRndWWFlnUFNBb0lIUm9hV05yYm1WemMwMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRlJJU1VOTFRrVlRVMDFCVUY5VlZpd2dNU0FwSUNrdWVIazdDaU5sYm1ScFptQXNJSGxuSUQwZ1lDTnBaaUJrWldacGJtVmtLQ0JWVTBWZlJVNVdUVUZRSUNrZ2ZId2daR1ZtYVc1bFpDZ2dSRWxUVkVGT1EwVWdLU0I4ZkNCa1pXWnBibVZrSUNnZ1ZWTkZYMU5JUVVSUFYwMUJVQ0FwSUh4OElHUmxabWx1WldRZ0tDQlZVMFZmVkZKQlRsTk5TVk5UU1U5T0lDa2dmSHdnVGxWTlgxTlFUMVJmVEVsSFNGUmZRMDlQVWtSVElENGdNQW9KZG1Wak5DQjNiM0pzWkZCdmMybDBhVzl1SUQwZ2RtVmpOQ2dnZEhKaGJuTm1iM0p0WldRc0lERXVNQ0FwT3dvSkkybG1aR1ZtSUZWVFJWOUpUbE5VUVU1RFNVNUhDZ2tKZDI5eWJHUlFiM05wZEdsdmJpQTlJR2x1YzNSaGJtTmxUV0YwY21sNElDb2dkMjl5YkdSUWIzTnBkR2x2YmpzS0NTTmxibVJwWmdvSmQyOXliR1JRYjNOcGRHbHZiaUE5SUcxdlpHVnNUV0YwY21sNElDb2dkMjl5YkdSUWIzTnBkR2x2YmpzS0kyVnVaR2xtWUN3Z1RXY2dQU0JnZG1GeWVXbHVaeUIyWldNeUlIWlZkanNLZFc1cFptOXliU0J0WVhReklIVjJWSEpoYm5ObWIzSnRPd3AyYjJsa0lHMWhhVzRvS1NCN0NnbDJWWFlnUFNBb0lIVjJWSEpoYm5ObWIzSnRJQ29nZG1Wak15Z2dkWFlzSURFZ0tTQXBMbmg1T3dvSloyeGZVRzl6YVhScGIyNGdQU0IyWldNMEtDQndiM05wZEdsdmJpNTRlU3dnTVM0d0xDQXhMakFnS1RzS2ZXQXNJRk5uSUQwZ1lIVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlIUXlSRHNLZFc1cFptOXliU0JtYkc5aGRDQmlZV05yWjNKdmRXNWtTVzUwWlc1emFYUjVPd3AyWVhKNWFXNW5JSFpsWXpJZ2RsVjJPd3AyYjJsa0lHMWhhVzRvS1NCN0NnbDJaV00wSUhSbGVFTnZiRzl5SUQwZ2RHVjRkSFZ5WlRKRUtDQjBNa1FzSUhaVmRpQXBPd29KSTJsbVpHVm1JRVJGUTA5RVJWOVdTVVJGVDE5VVJWaFVWVkpGQ2drSmRHVjRRMjlzYjNJZ1BTQjJaV00wS0NCdGFYZ29JSEJ2ZHlnZ2RHVjRRMjlzYjNJdWNtZGlJQ29nTUM0NU5EYzROamN5T1RnMklDc2dkbVZqTXlnZ01DNHdOVEl4TXpJM01ERTBJQ2tzSUhabFl6TW9JREl1TkNBcElDa3NJSFJsZUVOdmJHOXlMbkpuWWlBcUlEQXVNRGMzTXprNU16Z3dPQ3dnZG1Wak15Z2diR1Z6YzFSb1lXNUZjWFZoYkNnZ2RHVjRRMjlzYjNJdWNtZGlMQ0IyWldNektDQXdMakEwTURRMUlDa2dLU0FwSUNrc0lIUmxlRU52Ykc5eUxuY2dLVHNLQ1NObGJtUnBaZ29KZEdWNFEyOXNiM0l1Y21kaUlDbzlJR0poWTJ0bmNtOTFibVJKYm5SbGJuTnBkSGs3Q2dsbmJGOUdjbUZuUTI5c2IzSWdQU0IwWlhoRGIyeHZjanNLQ1NOcGJtTnNkV1JsSUR4MGIyNWxiV0Z3Y0dsdVoxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNuTndZV05sWDJaeVlXZHRaVzUwUGdwOVlDd2dZbWNnUFNCZ2RtRnllV2x1WnlCMlpXTXpJSFpYYjNKc1pFUnBjbVZqZEdsdmJqc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtkbTlwWkNCdFlXbHVLQ2tnZXdvSmRsZHZjbXhrUkdseVpXTjBhVzl1SUQwZ2RISmhibk5tYjNKdFJHbHlaV04wYVc5dUtDQndiM05wZEdsdmJpd2diVzlrWld4TllYUnlhWGdnS1RzS0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGNISnZhbVZqZEY5MlpYSjBaWGcrQ2dsbmJGOVFiM05wZEdsdmJpNTZJRDBnWjJ4ZlVHOXphWFJwYjI0dWR6c0tmV0FzSUVWbklEMGdZQ05wWm1SbFppQkZUbFpOUVZCZlZGbFFSVjlEVlVKRkNnbDFibWxtYjNKdElITmhiWEJzWlhKRGRXSmxJR1Z1ZGsxaGNEc0tJMlZzYVdZZ1pHVm1hVzVsWkNnZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlY5VlZpQXBDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JsYm5aTllYQTdDaU5sYm1ScFpncDFibWxtYjNKdElHWnNiMkYwSUdac2FYQkZiblpOWVhBN0NuVnVhV1p2Y20wZ1pteHZZWFFnWW1GamEyZHliM1Z1WkVKc2RYSnlhVzVsYzNNN0NuVnVhV1p2Y20wZ1pteHZZWFFnWW1GamEyZHliM1Z1WkVsdWRHVnVjMmwwZVRzS2RtRnllV2x1WnlCMlpXTXpJSFpYYjNKc1pFUnBjbVZqZEdsdmJqc0tJMmx1WTJ4MVpHVWdQR04xWW1WZmRYWmZjbVZtYkdWamRHbHZibDltY21GbmJXVnVkRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmxtWkdWbUlFVk9WazFCVUY5VVdWQkZYME5WUWtVS0NRbDJaV00wSUhSbGVFTnZiRzl5SUQwZ2RHVjRkSFZ5WlVOMVltVW9JR1Z1ZGsxaGNDd2dkbVZqTXlnZ1pteHBjRVZ1ZGsxaGNDQXFJSFpYYjNKc1pFUnBjbVZqZEdsdmJpNTRMQ0IyVjI5eWJHUkVhWEpsWTNScGIyNHVlWG9nS1NBcE93b0pJMlZzYVdZZ1pHVm1hVzVsWkNnZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlY5VlZpQXBDZ2tKZG1Wak5DQjBaWGhEYjJ4dmNpQTlJSFJsZUhSMWNtVkRkV0psVlZZb0lHVnVkazFoY0N3Z2RsZHZjbXhrUkdseVpXTjBhVzl1TENCaVlXTnJaM0p2ZFc1a1FteDFjbkpwYm1WemN5QXBPd29KSTJWc2MyVUtDUWwyWldNMElIUmxlRU52Ykc5eUlEMGdkbVZqTkNnZ01DNHdMQ0F3TGpBc0lEQXVNQ3dnTVM0d0lDazdDZ2tqWlc1a2FXWUtDWFJsZUVOdmJHOXlMbkpuWWlBcVBTQmlZV05yWjNKdmRXNWtTVzUwWlc1emFYUjVPd29KWjJ4ZlJuSmhaME52Ykc5eUlEMGdkR1Y0UTI5c2IzSTdDZ2tqYVc1amJIVmtaU0E4ZEc5dVpXMWhjSEJwYm1kZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZMjlzYjNKemNHRmpaVjltY21GbmJXVnVkRDRLZldBc0lGUm5JRDBnWUhaaGNubHBibWNnZG1Wak15QjJWMjl5YkdSRWFYSmxZM1JwYjI0N0NpTnBibU5zZFdSbElEeGpiMjF0YjI0K0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1haWGIzSnNaRVJwY21WamRHbHZiaUE5SUhSeVlXNXpabTl5YlVScGNtVmpkR2x2YmlnZ2NHOXphWFJwYjI0c0lHMXZaR1ZzVFdGMGNtbDRJQ2s3Q2dramFXNWpiSFZrWlNBOFltVm5hVzVmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhCeWIycGxZM1JmZG1WeWRHVjRQZ29KWjJ4ZlVHOXphWFJwYjI0dWVpQTlJR2RzWDFCdmMybDBhVzl1TG5jN0NuMWdMQ0IzWnlBOUlHQjFibWxtYjNKdElITmhiWEJzWlhKRGRXSmxJSFJEZFdKbE93cDFibWxtYjNKdElHWnNiMkYwSUhSR2JHbHdPd3AxYm1sbWIzSnRJR1pzYjJGMElHOXdZV05wZEhrN0NuWmhjbmxwYm1jZ2RtVmpNeUIyVjI5eWJHUkVhWEpsWTNScGIyNDdDblp2YVdRZ2JXRnBiaWdwSUhzS0NYWmxZelFnZEdWNFEyOXNiM0lnUFNCMFpYaDBkWEpsUTNWaVpTZ2dkRU4xWW1Vc0lIWmxZek1vSUhSR2JHbHdJQ29nZGxkdmNteGtSR2x5WldOMGFXOXVMbmdzSUhaWGIzSnNaRVJwY21WamRHbHZiaTU1ZWlBcElDazdDZ2xuYkY5R2NtRm5RMjlzYjNJZ1BTQjBaWGhEYjJ4dmNqc0tDV2RzWDBaeVlXZERiMnh2Y2k1aElDbzlJRzl3WVdOcGRIazdDZ2tqYVc1amJIVmtaU0E4ZEc5dVpXMWhjSEJwYm1kZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZMjlzYjNKemNHRmpaVjltY21GbmJXVnVkRDRLZldBc0lFRm5JRDBnWUNOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4MWRsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdScGMzQnNZV05sYldWdWRHMWhjRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGMydHBibTVwYm1kZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOXdZWEp6WDNabGNuUmxlRDRLZG1GeWVXbHVaeUIyWldNeUlIWklhV2RvVUhKbFkybHphVzl1V2xjN0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4MWRsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm1KaGMyVmZkbVZ5ZEdWNFBnb0pJMmxtWkdWbUlGVlRSVjlFU1ZOUVRFRkRSVTFGVGxSTlFWQUtDUWtqYVc1amJIVmtaU0E4WW1WbmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkNTTnBibU5zZFdSbElEeHRiM0p3YUc1dmNtMWhiRjkyWlhKMFpYZytDZ2tKSTJsdVkyeDFaR1VnUEhOcmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkyVnVaR2xtQ2dramFXNWpiSFZrWlNBOFltVm5hVzVmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1Ym1sdVoxOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThaR2x6Y0d4aFkyVnRaVzUwYldGd1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHdjbTlxWldOMFgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM1psY25SbGVENEtDWFpJYVdkb1VISmxZMmx6YVc5dVdsY2dQU0JuYkY5UWIzTnBkR2x2Ymk1NmR6c0tmV0FzSUZKbklEMGdZQ05wWmlCRVJWQlVTRjlRUVVOTFNVNUhJRDA5SURNeU1EQUtDWFZ1YVdadmNtMGdabXh2WVhRZ2IzQmhZMmwwZVRzS0kyVnVaR2xtQ2lOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4d1lXTnJhVzVuUGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZabkpoWjIxbGJuUStDblpoY25scGJtY2dkbVZqTWlCMlNHbG5hRkJ5WldOcGMybHZibHBYT3dwMmIybGtJRzFoYVc0b0tTQjdDZ2tqYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYMlp5WVdkdFpXNTBQZ29KZG1Wak5DQmthV1ptZFhObFEyOXNiM0lnUFNCMlpXTTBLQ0F4TGpBZ0tUc0tDU05wWmlCRVJWQlVTRjlRUVVOTFNVNUhJRDA5SURNeU1EQUtDUWxrYVdabWRYTmxRMjlzYjNJdVlTQTlJRzl3WVdOcGRIazdDZ2tqWlc1a2FXWUtDU05wYm1Oc2RXUmxJRHh0WVhCZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGdFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WVd4d2FHRjBaWE4wWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHRnNjR2hoYUdGemFGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5bWNtRm5iV1Z1ZEQ0S0NXWnNiMkYwSUdaeVlXZERiMjl5WkZvZ1BTQXdMalVnS2lCMlNHbG5hRkJ5WldOcGMybHZibHBYV3pCZElDOGdka2hwWjJoUWNtVmphWE5wYjI1YVYxc3hYU0FySURBdU5Uc0tDU05wWmlCRVJWQlVTRjlRUVVOTFNVNUhJRDA5SURNeU1EQUtDUWxuYkY5R2NtRm5RMjlzYjNJZ1BTQjJaV00wS0NCMlpXTXpLQ0F4TGpBZ0xTQm1jbUZuUTI5dmNtUmFJQ2tzSUc5d1lXTnBkSGtnS1RzS0NTTmxiR2xtSUVSRlVGUklYMUJCUTB0SlRrY2dQVDBnTXpJd01Rb0pDV2RzWDBaeVlXZERiMnh2Y2lBOUlIQmhZMnRFWlhCMGFGUnZVa2RDUVNnZ1puSmhaME52YjNKa1dpQXBPd29KSTJWdVpHbG1DbjFnTENCRFp5QTlJR0FqWkdWbWFXNWxJRVJKVTFSQlRrTkZDblpoY25scGJtY2dkbVZqTXlCMlYyOXliR1JRYjNOcGRHbHZianNLSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLSTJsdVkyeDFaR1VnUEhWMlgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4WkdsemNHeGhZMlZ0Wlc1MGJXRndYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4emEybHVibWx1WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOXdZWEp6WDNabGNuUmxlRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQSFYyWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emEybHVZbUZ6WlY5MlpYSjBaWGcrQ2dramFXWmtaV1lnVlZORlgwUkpVMUJNUVVORlRVVk9WRTFCVUFvSkNTTnBibU5zZFdSbElEeGlaV2RwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tKSTJsdVkyeDFaR1VnUEcxdmNuQm9ibTl5YldGc1gzWmxjblJsZUQ0S0NRa2phVzVqYkhWa1pTQThjMnRwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqWlc1a2FXWUtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhCeWIycGxZM1JmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhkdmNteGtjRzl6WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KZGxkdmNteGtVRzl6YVhScGIyNGdQU0IzYjNKc1pGQnZjMmwwYVc5dUxuaDVlanNLZldBc0lGQm5JRDBnWUNOa1pXWnBibVVnUkVsVFZFRk9RMFVLZFc1cFptOXliU0IyWldNeklISmxabVZ5Wlc1alpWQnZjMmwwYVc5dU93cDFibWxtYjNKdElHWnNiMkYwSUc1bFlYSkVhWE4wWVc1alpUc0tkVzVwWm05eWJTQm1iRzloZENCbVlYSkVhWE4wWVc1alpUc0tkbUZ5ZVdsdVp5QjJaV016SUhaWGIzSnNaRkJ2YzJsMGFXOXVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4Y0dGamEybHVaejRLSTJsdVkyeDFaR1VnUEhWMlgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdGc2NHaGhhR0Z6YUY5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZlpuSmhaMjFsYm5RK0NuWnZhV1FnYldGcGJpQW9LU0I3Q2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDJaeVlXZHRaVzUwUGdvSmRtVmpOQ0JrYVdabWRYTmxRMjlzYjNJZ1BTQjJaV00wS0NBeExqQWdLVHNLQ1NOcGJtTnNkV1JsSUR4dFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WVd4d2FHRnRZWEJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR0ZzY0doaGFHRnphRjltY21GbmJXVnVkRDRLQ1dac2IyRjBJR1JwYzNRZ1BTQnNaVzVuZEdnb0lIWlhiM0pzWkZCdmMybDBhVzl1SUMwZ2NtVm1aWEpsYm1ObFVHOXphWFJwYjI0Z0tUc0tDV1JwYzNRZ1BTQW9JR1JwYzNRZ0xTQnVaV0Z5UkdsemRHRnVZMlVnS1NBdklDZ2dabUZ5UkdsemRHRnVZMlVnTFNCdVpXRnlSR2x6ZEdGdVkyVWdLVHNLQ1dScGMzUWdQU0J6WVhSMWNtRjBaU2dnWkdsemRDQXBPd29KWjJ4ZlJuSmhaME52Ykc5eUlEMGdjR0ZqYTBSbGNIUm9WRzlTUjBKQktDQmthWE4wSUNrN0NuMWdMQ0JNWnlBOUlHQjJZWEo1YVc1bklIWmxZek1nZGxkdmNteGtSR2x5WldOMGFXOXVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ3AyYjJsa0lHMWhhVzRvS1NCN0NnbDJWMjl5YkdSRWFYSmxZM1JwYjI0Z1BTQjBjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JSEJ2YzJsMGFXOXVMQ0J0YjJSbGJFMWhkSEpwZUNBcE93b0pJMmx1WTJ4MVpHVWdQR0psWjJsdVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHdjbTlxWldOMFgzWmxjblJsZUQ0S2ZXQXNJRWxuSUQwZ1lIVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlIUkZjWFZwY21WamREc0tkbUZ5ZVdsdVp5QjJaV016SUhaWGIzSnNaRVJwY21WamRHbHZianNLSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLZG05cFpDQnRZV2x1S0NrZ2V3b0pkbVZqTXlCa2FYSmxZM1JwYjI0Z1BTQnViM0p0WVd4cGVtVW9JSFpYYjNKc1pFUnBjbVZqZEdsdmJpQXBPd29KZG1Wak1pQnpZVzF3YkdWVlZpQTlJR1Z4ZFdseVpXTjBWWFlvSUdScGNtVmpkR2x2YmlBcE93b0paMnhmUm5KaFowTnZiRzl5SUQwZ2RHVjRkSFZ5WlRKRUtDQjBSWEYxYVhKbFkzUXNJSE5oYlhCc1pWVldJQ2s3Q2dramFXNWpiSFZrWlNBOGRHOXVaVzFoY0hCcGJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSnpjR0ZqWlY5bWNtRm5iV1Z1ZEQ0S2ZXQXNJRlZuSUQwZ1lIVnVhV1p2Y20wZ1pteHZZWFFnYzJOaGJHVTdDbUYwZEhKcFluVjBaU0JtYkc5aGRDQnNhVzVsUkdsemRHRnVZMlU3Q25aaGNubHBibWNnWm14dllYUWdka3hwYm1WRWFYTjBZVzVqWlRzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFkyOXNiM0pmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeG1iMmRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHRiM0p3YUhSaGNtZGxkRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZkbVZ5ZEdWNFBncDJiMmxrSUcxaGFXNG9LU0I3Q2dsMlRHbHVaVVJwYzNSaGJtTmxJRDBnYzJOaGJHVWdLaUJzYVc1bFJHbHpkR0Z1WTJVN0Nna2phVzVqYkhWa1pTQThkWFpmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXlYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh0YjNKd2FHTnZiRzl5WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4aVpXZHBibDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaDBZWEpuWlhSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIQnliMnBsWTNSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5MlpYSjBaWGcrQ24xZ0xDQkVaeUE5SUdCMWJtbG1iM0p0SUhabFl6TWdaR2xtWm5WelpUc0tkVzVwWm05eWJTQm1iRzloZENCdmNHRmphWFI1T3dwMWJtbG1iM0p0SUdac2IyRjBJR1JoYzJoVGFYcGxPd3AxYm1sbWIzSnRJR1pzYjJGMElIUnZkR0ZzVTJsNlpUc0tkbUZ5ZVdsdVp5Qm1iRzloZENCMlRHbHVaVVJwYzNSaGJtTmxPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgyWnlZV2R0Wlc1MFBncDJiMmxrSUcxaGFXNG9LU0I3Q2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDJaeVlXZHRaVzUwUGdvSmFXWWdLQ0J0YjJRb0lIWk1hVzVsUkdsemRHRnVZMlVzSUhSdmRHRnNVMmw2WlNBcElENGdaR0Z6YUZOcGVtVWdLU0I3Q2drSlpHbHpZMkZ5WkRzS0NYMEtDWFpsWXpNZ2IzVjBaMjlwYm1kTWFXZG9kQ0E5SUhabFl6TW9JREF1TUNBcE93b0pkbVZqTkNCa2FXWm1kWE5sUTI5c2IzSWdQU0IyWldNMEtDQmthV1ptZFhObExDQnZjR0ZqYVhSNUlDazdDZ2tqYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5WDJaeVlXZHRaVzUwUGdvSmIzVjBaMjlwYm1kTWFXZG9kQ0E5SUdScFptWjFjMlZEYjJ4dmNpNXlaMkk3Q2dramFXNWpiSFZrWlNBOGIzQmhjWFZsWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIUnZibVZ0WVhCd2FXNW5YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXljM0JoWTJWZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThabTluWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIQnlaVzExYkhScGNHeHBaV1JmWVd4d2FHRmZabkpoWjIxbGJuUStDbjFnTENCT1p5QTlJR0FqYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4ZFhaZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhsYm5adFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4amIyeHZjbDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHWnZaMTl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGMydHBibTVwYm1kZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOXdZWEp6WDNabGNuUmxlRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQSFYyWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXWWdaR1ZtYVc1bFpDQW9JRlZUUlY5RlRsWk5RVkFnS1NCOGZDQmtaV1pwYm1Wa0lDZ2dWVk5GWDFOTFNVNU9TVTVISUNrS0NRa2phVzVqYkhWa1pTQThZbVZuYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KQ1NOcGJtTnNkV1JsSUR4dGIzSndhRzV2Y20xaGJGOTJaWEowWlhnK0Nna0pJMmx1WTJ4MVpHVWdQSE5yYVc1aVlYTmxYM1psY25SbGVENEtDUWtqYVc1amJIVmtaU0E4YzJ0cGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2drSkkybHVZMngxWkdVZ1BHUmxabUYxYkhSdWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJWdVpHbG1DZ2tqYVc1amJIVmtaU0E4WW1WbmFXNWZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzF2Y25Cb2RHRnlaMlYwWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emEybHVibWx1WjE5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGNISnZhbVZqZEY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThkMjl5YkdSd2IzTmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1Z1ZG0xaGNGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThabTluWDNabGNuUmxlRDRLZldBc0lFOW5JRDBnWUhWdWFXWnZjbTBnZG1Wak15QmthV1ptZFhObE93cDFibWxtYjNKdElHWnNiMkYwSUc5d1lXTnBkSGs3Q2lOcFptNWtaV1lnUmt4QlZGOVRTRUZFUlVRS0NYWmhjbmxwYm1jZ2RtVmpNeUIyVG05eWJXRnNPd29qWlc1a2FXWUtJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQR1JwZEdobGNtbHVaMTl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMjlzYjNKZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhWMlgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdGc2NHaGhhR0Z6YUY5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVc5dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHBaMmgwYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4bGJuWnRZWEJmWTI5dGJXOXVYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGxiblp0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGMzQmxZM1ZzWVhKdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTltY21GbmJXVnVkRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOW1jbUZuYldWdWRENEtDWFpsWXpRZ1pHbG1ablZ6WlVOdmJHOXlJRDBnZG1Wak5DZ2daR2xtWm5WelpTd2diM0JoWTJsMGVTQXBPd29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSE53WldOMWJHRnliV0Z3WDJaeVlXZHRaVzUwUGdvSlVtVm1iR1ZqZEdWa1RHbG5hSFFnY21WbWJHVmpkR1ZrVEdsbmFIUWdQU0JTWldac1pXTjBaV1JNYVdkb2RDZ2dkbVZqTXlnZ01DNHdJQ2tzSUhabFl6TW9JREF1TUNBcExDQjJaV016S0NBd0xqQWdLU3dnZG1Wak15Z2dNQzR3SUNrZ0tUc0tDU05wWm1SbFppQlZVMFZmVEVsSFNGUk5RVkFLQ1FsMlpXTTBJR3hwWjJoMFRXRndWR1Y0Wld3Z1BTQjBaWGgwZFhKbE1rUW9JR3hwWjJoMFRXRndMQ0IyVEdsbmFIUk5ZWEJWZGlBcE93b0pDWEpsWm14bFkzUmxaRXhwWjJoMExtbHVaR2x5WldOMFJHbG1ablZ6WlNBclBTQnNhV2RvZEUxaGNGUmxlR1ZzTG5KbllpQXFJR3hwWjJoMFRXRndTVzUwWlc1emFYUjVJQ29nVWtWRFNWQlNUME5CVEY5UVNUc0tDU05sYkhObENna0pjbVZtYkdWamRHVmtUR2xuYUhRdWFXNWthWEpsWTNSRWFXWm1kWE5sSUNzOUlIWmxZek1vSURFdU1DQXBPd29KSTJWdVpHbG1DZ2tqYVc1amJIVmtaU0E4WVc5dFlYQmZabkpoWjIxbGJuUStDZ2x5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRFUnBabVoxYzJVZ0tqMGdaR2xtWm5WelpVTnZiRzl5TG5Kbllqc0tDWFpsWXpNZ2IzVjBaMjlwYm1kTWFXZG9kQ0E5SUhKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpUc0tDU05wYm1Oc2RXUmxJRHhsYm5adFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4YjNCaGNYVmxYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhSdmJtVnRZWEJ3YVc1blgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eWMzQmhZMlZmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFptOW5YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhCeVpXMTFiSFJwY0d4cFpXUmZZV3h3YUdGZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThaR2wwYUdWeWFXNW5YMlp5WVdkdFpXNTBQZ3A5WUN3Z1JtY2dQU0JnSTJSbFptbHVaU0JNUVUxQ1JWSlVDblpoY25scGJtY2dkbVZqTXlCMlZtbGxkMUJ2YzJsMGFXOXVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4ZFhaZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bGJuWnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2hqYjJ4dmNsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZbVZuYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEcxdmNuQm9ibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1WW1GelpWOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdWbVlYVnNkRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KZGxacFpYZFFiM05wZEdsdmJpQTlJQzBnYlhaUWIzTnBkR2x2Ymk1NGVYbzdDZ2tqYVc1amJIVmtaU0E4ZDI5eWJHUndiM05mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJoaFpHOTNiV0Z3WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4bWIyZGZkbVZ5ZEdWNFBncDlZQ3dnUW1jZ1BTQmdJMlJsWm1sdVpTQk1RVTFDUlZKVUNuVnVhV1p2Y20wZ2RtVmpNeUJrYVdabWRYTmxPd3AxYm1sbWIzSnRJSFpsWXpNZ1pXMXBjM05wZG1VN0NuVnVhV1p2Y20wZ1pteHZZWFFnYjNCaFkybDBlVHNLSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLSTJsdVkyeDFaR1VnUEhCaFkydHBibWMrQ2lOcGJtTnNkV1JsSUR4a2FYUm9aWEpwYm1kZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdOdmJHOXlYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeDFkbDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGMFpYTjBYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVdoaGMyaGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnZiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYVdkb2RHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThaVzFwYzNOcGRtVnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1Z1ZG0xaGNGOWpiMjF0YjI1ZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThabTluWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhpYzJSbWN6NEtJMmx1WTJ4MVpHVWdQR3hwWjJoMGMxOXdZWEp6WDJKbFoybHVQZ29qYVc1amJIVmtaU0E4Ym05eWJXRnNYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNhV2RvZEhOZmJHRnRZbVZ5ZEY5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YzJoaFpHOTNiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhpZFcxd2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHViM0p0WVd4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BITndaV04xYkdGeWJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblErQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZabkpoWjIxbGJuUStDZ2wyWldNMElHUnBabVoxYzJWRGIyeHZjaUE5SUhabFl6UW9JR1JwWm1aMWMyVXNJRzl3WVdOcGRIa2dLVHNLQ1ZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMElEMGdVbVZtYkdWamRHVmtUR2xuYUhRb0lIWmxZek1vSURBdU1DQXBMQ0IyWldNektDQXdMakFnS1N3Z2RtVmpNeWdnTUM0d0lDa3NJSFpsWXpNb0lEQXVNQ0FwSUNrN0NnbDJaV016SUhSdmRHRnNSVzFwYzNOcGRtVlNZV1JwWVc1alpTQTlJR1Z0YVhOemFYWmxPd29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSE53WldOMWJHRnliV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHNXZjbTFoYkY5bWNtRm5iV1Z1ZEY5aVpXZHBiajRLQ1NOcGJtTnNkV1JsSUR4dWIzSnRZV3hmWm5KaFoyMWxiblJmYldGd2N6NEtDU05wYm1Oc2RXUmxJRHhsYldsemMybDJaVzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHNhV2RvZEhOZmJHRnRZbVZ5ZEY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHNhV2RvZEhOZlpuSmhaMjFsYm5SZlltVm5hVzQrQ2dramFXNWpiSFZrWlNBOGJHbG5hSFJ6WDJaeVlXZHRaVzUwWDIxaGNITStDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYMlp5WVdkdFpXNTBYMlZ1WkQ0S0NTTnBibU5zZFdSbElEeGhiMjFoY0Y5bWNtRm5iV1Z1ZEQ0S0NYWmxZek1nYjNWMFoyOXBibWRNYVdkb2RDQTlJSEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEVScFptWjFjMlVnS3lCeVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRVJwWm1aMWMyVWdLeUIwYjNSaGJFVnRhWE56YVhabFVtRmthV0Z1WTJVN0Nna2phVzVqYkhWa1pTQThaVzUyYldGd1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzl3WVhGMVpWOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHgwYjI1bGJXRndjR2x1WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y25Od1lXTmxYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdadloxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh3Y21WdGRXeDBhWEJzYVdWa1gyRnNjR2hoWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHUnBkR2hsY21sdVoxOW1jbUZuYldWdWRENEtmV0FzSUhwbklEMGdZQ05rWldacGJtVWdUVUZVUTBGUUNuWmhjbmxwYm1jZ2RtVmpNeUIyVm1sbGQxQnZjMmwwYVc5dU93b2phVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1JwYzNCc1lXTmxiV1Z1ZEcxaGNGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGMydHBibTVwYm1kZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOXdZWEp6WDNabGNuUmxlRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQSFYyWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFltVm5hVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzF2Y25Cb2JtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emEybHVZbUZ6WlY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGMydHBibTV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThaR1ZtWVhWc2RHNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4aVpXZHBibDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaDBZWEpuWlhSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITnJhVzV1YVc1blgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGthWE53YkdGalpXMWxiblJ0WVhCZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIQnliMnBsWTNSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5MlpYSjBaWGcrQ2dsMlZtbGxkMUJ2YzJsMGFXOXVJRDBnTFNCdGRsQnZjMmwwYVc5dUxuaDVlanNLZldBc0lGWm5JRDBnWUNOa1pXWnBibVVnVFVGVVEwRlFDblZ1YVdadmNtMGdkbVZqTXlCa2FXWm1kWE5sT3dwMWJtbG1iM0p0SUdac2IyRjBJRzl3WVdOcGRIazdDblZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJRzFoZEdOaGNEc0tkbUZ5ZVdsdVp5QjJaV016SUhaV2FXVjNVRzl6YVhScGIyNDdDaU5wYm1Oc2RXUmxJRHhqYjIxdGIyNCtDaU5wYm1Oc2RXUmxJRHhrYVhSb1pYSnBibWRmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR052Ykc5eVgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4MWRsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZV2hoYzJoZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJtOXliV0ZzWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhpZFcxd2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHViM0p0WVd4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTltY21GbmJXVnVkRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOW1jbUZuYldWdWRENEtDWFpsWXpRZ1pHbG1ablZ6WlVOdmJHOXlJRDBnZG1Wak5DZ2daR2xtWm5WelpTd2diM0JoWTJsMGVTQXBPd29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOW1jbUZuYldWdWRGOWlaV2RwYmo0S0NTTnBibU5zZFdSbElEeHViM0p0WVd4ZlpuSmhaMjFsYm5SZmJXRndjejRLQ1habFl6TWdkbWxsZDBScGNpQTlJRzV2Y20xaGJHbDZaU2dnZGxacFpYZFFiM05wZEdsdmJpQXBPd29KZG1Wak15QjRJRDBnYm05eWJXRnNhWHBsS0NCMlpXTXpLQ0IyYVdWM1JHbHlMbm9zSURBdU1Dd2dMU0IyYVdWM1JHbHlMbmdnS1NBcE93b0pkbVZqTXlCNUlEMGdZM0p2YzNNb0lIWnBaWGRFYVhJc0lIZ2dLVHNLQ1habFl6SWdkWFlnUFNCMlpXTXlLQ0JrYjNRb0lIZ3NJRzV2Y20xaGJDQXBMQ0JrYjNRb0lIa3NJRzV2Y20xaGJDQXBJQ2tnS2lBd0xqUTVOU0FySURBdU5Uc0tDU05wWm1SbFppQlZVMFZmVFVGVVEwRlFDZ2tKZG1Wak5DQnRZWFJqWVhCRGIyeHZjaUE5SUhSbGVIUjFjbVV5UkNnZ2JXRjBZMkZ3TENCMWRpQXBPd29KSTJWc2MyVUtDUWwyWldNMElHMWhkR05oY0VOdmJHOXlJRDBnZG1Wak5DZ2dkbVZqTXlnZ2JXbDRLQ0F3TGpJc0lEQXVPQ3dnZFhZdWVTQXBJQ2tzSURFdU1DQXBPd29KSTJWdVpHbG1DZ2wyWldNeklHOTFkR2R2YVc1blRHbG5hSFFnUFNCa2FXWm1kWE5sUTI5c2IzSXVjbWRpSUNvZ2JXRjBZMkZ3UTI5c2IzSXVjbWRpT3dvSkkybHVZMngxWkdVZ1BHOXdZWEYxWlY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeDBiMjVsYldGd2NHbHVaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbk53WVdObFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHdjbVZ0ZFd4MGFYQnNhV1ZrWDJGc2NHaGhYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdScGRHaGxjbWx1WjE5bWNtRm5iV1Z1ZEQ0S2ZXQXNJR3RuSUQwZ1lDTmtaV1pwYm1VZ1RrOVNUVUZNQ2lOcFppQmtaV1pwYm1Wa0tDQkdURUZVWDFOSVFVUkZSQ0FwSUh4OElHUmxabWx1WldRb0lGVlRSVjlDVlUxUVRVRlFJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMDVQVWsxQlRFMUJVRjlVUVU1SFJVNVVVMUJCUTBVZ0tRb0pkbUZ5ZVdsdVp5QjJaV016SUhaV2FXVjNVRzl6YVhScGIyNDdDaU5sYm1ScFpnb2phVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGthWE53YkdGalpXMWxiblJ0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh1YjNKdFlXeGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTkyWlhKMFpYZytDblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBibU5zZFdSbElEeDFkbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WW1WbmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvYm05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdVltRnpaVjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFpHVm1ZWFZzZEc1dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ym05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhCeWIycGxZM1JmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmRtVnlkR1Y0UGdvamFXWWdaR1ZtYVc1bFpDZ2dSa3hCVkY5VFNFRkVSVVFnS1NCOGZDQmtaV1pwYm1Wa0tDQlZVMFZmUWxWTlVFMUJVQ0FwSUh4OElHUmxabWx1WldRb0lGVlRSVjlPVDFKTlFVeE5RVkJmVkVGT1IwVk9WRk5RUVVORklDa0tDWFpXYVdWM1VHOXphWFJwYjI0Z1BTQXRJRzEyVUc5emFYUnBiMjR1ZUhsNk93b2paVzVrYVdZS2ZXQXNJRWhuSUQwZ1lDTmtaV1pwYm1VZ1RrOVNUVUZNQ25WdWFXWnZjbTBnWm14dllYUWdiM0JoWTJsMGVUc0tJMmxtSUdSbFptbHVaV1FvSUVaTVFWUmZVMGhCUkVWRUlDa2dmSHdnWkdWbWFXNWxaQ2dnVlZORlgwSlZUVkJOUVZBZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlRrOVNUVUZNVFVGUVgxUkJUa2RGVGxSVFVFRkRSU0FwQ2dsMllYSjVhVzVuSUhabFl6TWdkbFpwWlhkUWIzTnBkR2x2YmpzS0kyVnVaR2xtQ2lOcGJtTnNkV1JsSUR4d1lXTnJhVzVuUGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHNXZjbTFoYkY5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WW5WdGNHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThibTl5YldGc2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblErQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThibTl5YldGc1gyWnlZV2R0Wlc1MFgySmxaMmx1UGdvSkkybHVZMngxWkdVZ1BHNXZjbTFoYkY5bWNtRm5iV1Z1ZEY5dFlYQnpQZ29KWjJ4ZlJuSmhaME52Ykc5eUlEMGdkbVZqTkNnZ2NHRmphMDV2Y20xaGJGUnZVa2RDS0NCdWIzSnRZV3dnS1N3Z2IzQmhZMmwwZVNBcE93b0pJMmxtWkdWbUlFOVFRVkZWUlFvSkNXZHNYMFp5WVdkRGIyeHZjaTVoSUQwZ01TNHdPd29KSTJWdVpHbG1DbjFnTENCSFp5QTlJR0FqWkdWbWFXNWxJRkJJVDA1SENuWmhjbmxwYm1jZ2RtVmpNeUIyVm1sbGQxQnZjMmwwYVc5dU93b2phVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGthWE53YkdGalpXMWxiblJ0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhsYm5adFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4amIyeHZjbDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHWnZaMTl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHNXZjbTFoYkY5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzF2Y25Cb2RHRnlaMlYwWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThjMnRwYm01cGJtZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4emFHRmtiM2R0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOXdZWEp6WDNabGNuUmxlRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQSFYyWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFltVm5hVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzF2Y25Cb2JtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emEybHVZbUZ6WlY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGMydHBibTV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThaR1ZtWVhWc2RHNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4aVpXZHBibDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaDBZWEpuWlhSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITnJhVzV1YVc1blgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGthWE53YkdGalpXMWxiblJ0WVhCZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIQnliMnBsWTNSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZkbVZ5ZEdWNFBnb0pkbFpwWlhkUWIzTnBkR2x2YmlBOUlDMGdiWFpRYjNOcGRHbHZiaTU0ZVhvN0Nna2phVzVqYkhWa1pTQThkMjl5YkdSd2IzTmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1Z1ZG0xaGNGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMmhoWkc5M2JXRndYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhtYjJkZmRtVnlkR1Y0UGdwOVlDd2dWMmNnUFNCZ0kyUmxabWx1WlNCUVNFOU9Sd3AxYm1sbWIzSnRJSFpsWXpNZ1pHbG1ablZ6WlRzS2RXNXBabTl5YlNCMlpXTXpJR1Z0YVhOemFYWmxPd3AxYm1sbWIzSnRJSFpsWXpNZ2MzQmxZM1ZzWVhJN0NuVnVhV1p2Y20wZ1pteHZZWFFnYzJocGJtbHVaWE56T3dwMWJtbG1iM0p0SUdac2IyRjBJRzl3WVdOcGRIazdDaU5wYm1Oc2RXUmxJRHhqYjIxdGIyNCtDaU5wYm1Oc2RXUmxJRHh3WVdOcmFXNW5QZ29qYVc1amJIVmtaU0E4WkdsMGFHVnlhVzVuWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhqYjJ4dmNsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGIyMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiR2xuYUhSdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHVnRhWE56YVhabGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGxiblp0WVhCZlkyOXRiVzl1WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhsYm5adFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHWnZaMTl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZbk5rWm5NK0NpTnBibU5zZFdSbElEeHNhV2RvZEhOZmNHRnljMTlpWldkcGJqNEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJHbG5hSFJ6WDNCb2IyNW5YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHSjFiWEJ0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEc1dmNtMWhiRzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YzNCbFkzVnNZWEp0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mY0dGeWMxOW1jbUZuYldWdWRENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5bWNtRm5iV1Z1ZEQ0S0NYWmxZelFnWkdsbVpuVnpaVU52Ykc5eUlEMGdkbVZqTkNnZ1pHbG1ablZ6WlN3Z2IzQmhZMmwwZVNBcE93b0pVbVZtYkdWamRHVmtUR2xuYUhRZ2NtVm1iR1ZqZEdWa1RHbG5hSFFnUFNCU1pXWnNaV04wWldSTWFXZG9kQ2dnZG1Wak15Z2dNQzR3SUNrc0lIWmxZek1vSURBdU1DQXBMQ0IyWldNektDQXdMakFnS1N3Z2RtVmpNeWdnTUM0d0lDa2dLVHNLQ1habFl6TWdkRzkwWVd4RmJXbHpjMmwyWlZKaFpHbGhibU5sSUQwZ1pXMXBjM05wZG1VN0Nna2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXlYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdGc2NHaGhiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXaGhjMmhmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGMzQmxZM1ZzWVhKdFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Ym05eWJXRnNYMlp5WVdkdFpXNTBYMkpsWjJsdVBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOW1jbUZuYldWdWRGOXRZWEJ6UGdvSkkybHVZMngxWkdVZ1BHVnRhWE56YVhabGJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEd4cFoyaDBjMTl3YUc5dVoxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhzYVdkb2RITmZabkpoWjIxbGJuUmZZbVZuYVc0K0Nna2phVzVqYkhWa1pTQThiR2xuYUhSelgyWnlZV2R0Wlc1MFgyMWhjSE0rQ2dramFXNWpiSFZrWlNBOGJHbG5hSFJ6WDJaeVlXZHRaVzUwWDJWdVpENEtDU05wYm1Oc2RXUmxJRHhoYjIxaGNGOW1jbUZuYldWdWRENEtDWFpsWXpNZ2IzVjBaMjlwYm1kTWFXZG9kQ0E5SUhKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRFUnBabVoxYzJVZ0t5QnlaV1pzWldOMFpXUk1hV2RvZEM1cGJtUnBjbVZqZEVScFptWjFjMlVnS3lCeVpXWnNaV04wWldSTWFXZG9kQzVrYVhKbFkzUlRjR1ZqZFd4aGNpQXJJSEpsWm14bFkzUmxaRXhwWjJoMExtbHVaR2x5WldOMFUzQmxZM1ZzWVhJZ0t5QjBiM1JoYkVWdGFYTnphWFpsVW1Ga2FXRnVZMlU3Q2dramFXNWpiSFZrWlNBOFpXNTJiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHOXdZWEYxWlY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeDBiMjVsYldGd2NHbHVaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbk53WVdObFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHdjbVZ0ZFd4MGFYQnNhV1ZrWDJGc2NHaGhYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdScGRHaGxjbWx1WjE5bWNtRm5iV1Z1ZEQ0S2ZXQXNJRmhuSUQwZ1lDTmtaV1pwYm1VZ1UxUkJUa1JCVWtRS2RtRnllV2x1WnlCMlpXTXpJSFpXYVdWM1VHOXphWFJwYjI0N0NpTnBabVJsWmlCVlUwVmZWRkpCVGxOTlNWTlRTVTlPQ2dsMllYSjVhVzVuSUhabFl6TWdkbGR2Y214a1VHOXphWFJwYjI0N0NpTmxibVJwWmdvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2hqYjJ4dmNsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZbVZuYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEcxdmNuQm9ibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1WW1GelpWOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdWbVlYVnNkRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KZGxacFpYZFFiM05wZEdsdmJpQTlJQzBnYlhaUWIzTnBkR2x2Ymk1NGVYbzdDZ2tqYVc1amJIVmtaU0E4ZDI5eWJHUndiM05mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOb1lXUnZkMjFoY0Y5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFptOW5YM1psY25SbGVENEtJMmxtWkdWbUlGVlRSVjlVVWtGT1UwMUpVMU5KVDA0S0NYWlhiM0pzWkZCdmMybDBhVzl1SUQwZ2QyOXliR1JRYjNOcGRHbHZiaTU0ZVhvN0NpTmxibVJwWmdwOVlDd2djV2NnUFNCZ0kyUmxabWx1WlNCVFZFRk9SRUZTUkFvamFXWmtaV1lnVUVoWlUwbERRVXdLQ1NOa1pXWnBibVVnU1U5U0Nna2paR1ZtYVc1bElGVlRSVjlUVUVWRFZVeEJVZ29qWlc1a2FXWUtkVzVwWm05eWJTQjJaV016SUdScFptWjFjMlU3Q25WdWFXWnZjbTBnZG1Wak15QmxiV2x6YzJsMlpUc0tkVzVwWm05eWJTQm1iRzloZENCeWIzVm5hRzVsYzNNN0NuVnVhV1p2Y20wZ1pteHZZWFFnYldWMFlXeHVaWE56T3dwMWJtbG1iM0p0SUdac2IyRjBJRzl3WVdOcGRIazdDaU5wWm1SbFppQkpUMUlLQ1hWdWFXWnZjbTBnWm14dllYUWdhVzl5T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFVFVkRWVXhCVWdvSmRXNXBabTl5YlNCbWJHOWhkQ0J6Y0dWamRXeGhja2x1ZEdWdWMybDBlVHNLQ1hWdWFXWnZjbTBnZG1Wak15QnpjR1ZqZFd4aGNrTnZiRzl5T3dvSkkybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVsOURUMHhQVWsxQlVBb0pDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSE53WldOMWJHRnlRMjlzYjNKTllYQTdDZ2tqWlc1a2FXWUtDU05wWm1SbFppQlZVMFZmVTFCRlExVk1RVkpmU1U1VVJVNVRTVlJaVFVGUUNna0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEE3Q2dralpXNWthV1lLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUTB4RlFWSkRUMEZVQ2dsMWJtbG1iM0p0SUdac2IyRjBJR05zWldGeVkyOWhkRHNLQ1hWdWFXWnZjbTBnWm14dllYUWdZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlKVWtsRVJWTkRSVTVEUlFvSmRXNXBabTl5YlNCbWJHOWhkQ0JwY21sa1pYTmpaVzVqWlRzS0NYVnVhV1p2Y20wZ1pteHZZWFFnYVhKcFpHVnpZMlZ1WTJWSlQxSTdDZ2wxYm1sbWIzSnRJR1pzYjJGMElHbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV2x1YVcxMWJUc0tDWFZ1YVdadmNtMGdabXh2WVhRZ2FYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWGhwYlhWdE93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRTRVZGVGdvSmRXNXBabTl5YlNCMlpXTXpJSE5vWldWdVEyOXNiM0k3Q2dsMWJtbG1iM0p0SUdac2IyRjBJSE5vWldWdVVtOTFaMmh1WlhOek93b0pJMmxtWkdWbUlGVlRSVjlUU0VWRlRsOURUMHhQVWsxQlVBb0pDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSE5vWldWdVEyOXNiM0pOWVhBN0Nna2paVzVrYVdZS0NTTnBabVJsWmlCVlUwVmZVMGhGUlU1ZlVrOVZSMGhPUlZOVFRVRlFDZ2tKZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnYzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEE3Q2dralpXNWthV1lLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUVU1SlUwOVVVazlRV1FvSmRXNXBabTl5YlNCMlpXTXlJR0Z1YVhOdmRISnZjSGxXWldOMGIzSTdDZ2tqYVdaa1pXWWdWVk5GWDBGT1NWTlBWRkpQVUZsTlFWQUtDUWwxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JoYm1semIzUnliM0I1VFdGd093b0pJMlZ1WkdsbUNpTmxibVJwWmdwMllYSjVhVzVuSUhabFl6TWdkbFpwWlhkUWIzTnBkR2x2YmpzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIQmhZMnRwYm1jK0NpTnBibU5zZFdSbElEeGthWFJvWlhKcGJtZGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHTnZiRzl5WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHgxZGw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVd4d2FHRjBaWE4wWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYkhCb1lXaGhjMmhmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0Z2YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4c2FXZG9kRzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WlcxcGMzTnBkbVZ0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdseWFXUmxjMk5sYm1ObFgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZM1ZpWlY5MWRsOXlaV1pzWldOMGFXOXVYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Wlc1MmJXRndYMk52YlcxdmJsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFpXNTJiV0Z3WDNCb2VYTnBZMkZzWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhtYjJkZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEd4cFoyaDBjMTl3WVhKelgySmxaMmx1UGdvamFXNWpiSFZrWlNBOGJtOXliV0ZzWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYVdkb2RITmZjR2g1YzJsallXeGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BIUnlZVzV6YldsemMybHZibDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThjMmhoWkc5M2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGlkVzF3YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4dWIzSnRZV3h0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdOc1pXRnlZMjloZEY5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YVhKcFpHVnpZMlZ1WTJWZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhKdmRXZG9ibVZ6YzIxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJXVjBZV3h1WlhOemJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblErQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZabkpoWjIxbGJuUStDZ2wyWldNMElHUnBabVoxYzJWRGIyeHZjaUE5SUhabFl6UW9JR1JwWm1aMWMyVXNJRzl3WVdOcGRIa2dLVHNLQ1ZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMElEMGdVbVZtYkdWamRHVmtUR2xuYUhRb0lIWmxZek1vSURBdU1DQXBMQ0IyWldNektDQXdMakFnS1N3Z2RtVmpNeWdnTUM0d0lDa3NJSFpsWXpNb0lEQXVNQ0FwSUNrN0NnbDJaV016SUhSdmRHRnNSVzFwYzNOcGRtVlNZV1JwWVc1alpTQTlJR1Z0YVhOemFYWmxPd29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSEp2ZFdkb2JtVnpjMjFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHRaWFJoYkc1bGMzTnRZWEJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGJtOXliV0ZzWDJaeVlXZHRaVzUwWDJKbFoybHVQZ29KSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjltY21GbmJXVnVkRjl0WVhCelBnb0pJMmx1WTJ4MVpHVWdQR05zWldGeVkyOWhkRjl1YjNKdFlXeGZabkpoWjIxbGJuUmZZbVZuYVc0K0Nna2phVzVqYkhWa1pTQThZMnhsWVhKamIyRjBYMjV2Y20xaGJGOW1jbUZuYldWdWRGOXRZWEJ6UGdvSkkybHVZMngxWkdVZ1BHVnRhWE56YVhabGJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEd4cFoyaDBjMTl3YUhsemFXTmhiRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4c2FXZG9kSE5mWm5KaFoyMWxiblJmWW1WbmFXNCtDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYMlp5WVdkdFpXNTBYMjFoY0hNK0Nna2phVzVqYkhWa1pTQThiR2xuYUhSelgyWnlZV2R0Wlc1MFgyVnVaRDRLQ1NOcGJtTnNkV1JsSUR4aGIyMWhjRjltY21GbmJXVnVkRDRLQ1habFl6TWdkRzkwWVd4RWFXWm1kWE5sSUQwZ2NtVm1iR1ZqZEdWa1RHbG5hSFF1WkdseVpXTjBSR2xtWm5WelpTQXJJSEpsWm14bFkzUmxaRXhwWjJoMExtbHVaR2x5WldOMFJHbG1ablZ6WlRzS0NYWmxZek1nZEc5MFlXeFRjR1ZqZFd4aGNpQTlJSEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEZOd1pXTjFiR0Z5SUNzZ2NtVm1iR1ZqZEdWa1RHbG5hSFF1YVc1a2FYSmxZM1JUY0dWamRXeGhjanNLQ1NOcGJtTnNkV1JsSUR4MGNtRnVjMjFwYzNOcGIyNWZabkpoWjIxbGJuUStDZ2wyWldNeklHOTFkR2R2YVc1blRHbG5hSFFnUFNCMGIzUmhiRVJwWm1aMWMyVWdLeUIwYjNSaGJGTndaV04xYkdGeUlDc2dkRzkwWVd4RmJXbHpjMmwyWlZKaFpHbGhibU5sT3dvSkkybG1aR1ZtSUZWVFJWOVRTRVZGVGdvSkNXWnNiMkYwSUhOb1pXVnVSVzVsY21kNVEyOXRjQ0E5SURFdU1DQXRJREF1TVRVM0lDb2diV0Y0TXlnZ2JXRjBaWEpwWVd3dWMyaGxaVzVEYjJ4dmNpQXBPd29KQ1c5MWRHZHZhVzVuVEdsbmFIUWdQU0J2ZFhSbmIybHVaMHhwWjJoMElDb2djMmhsWlc1RmJtVnlaM2xEYjIxd0lDc2djMmhsWlc1VGNHVmpkV3hoY2pzS0NTTmxibVJwWmdvSkkybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUUtDUWxtYkc5aGRDQmtiM1JPVm1OaklEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ1oyVnZiV1YwY25sRGJHVmhjbU52WVhST2IzSnRZV3dzSUdkbGIyMWxkSEo1Vm1sbGQwUnBjaUFwSUNrN0Nna0pkbVZqTXlCR1kyTWdQU0JHWDFOamFHeHBZMnNvSUcxaGRHVnlhV0ZzTG1Oc1pXRnlZMjloZEVZd0xDQnRZWFJsY21saGJDNWpiR1ZoY21OdllYUkdPVEFzSUdSdmRFNVdZMk1nS1RzS0NRbHZkWFJuYjJsdVoweHBaMmgwSUQwZ2IzVjBaMjlwYm1kTWFXZG9kQ0FxSUNnZ01TNHdJQzBnYldGMFpYSnBZV3d1WTJ4bFlYSmpiMkYwSUNvZ1JtTmpJQ2tnS3lCamJHVmhjbU52WVhSVGNHVmpkV3hoY2lBcUlHMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGREc0tDU05sYm1ScFpnb0pJMmx1WTJ4MVpHVWdQRzl3WVhGMVpWOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHgwYjI1bGJXRndjR2x1WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y25Od1lXTmxYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdadloxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh3Y21WdGRXeDBhWEJzYVdWa1gyRnNjR2hoWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHUnBkR2hsY21sdVoxOW1jbUZuYldWdWRENEtmV0FzSUZsbklEMGdZQ05rWldacGJtVWdWRTlQVGdwMllYSjVhVzVuSUhabFl6TWdkbFpwWlhkUWIzTnBkR2x2YmpzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFpHbHpjR3hoWTJWdFpXNTBiV0Z3WDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThZMjlzYjNKZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhtYjJkZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh1YjNKdFlXeGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThjMmhoWkc5M2JXRndYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mY0dGeWMxOTJaWEowWlhnK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4MWRsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZMjlzYjNKZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvWTI5c2IzSmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR0psWjJsdWJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4dGIzSndhRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm1KaGMyVmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdSbFptRjFiSFJ1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZbVZuYVc1ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdWJtbHVaMTkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdsemNHeGhZMlZ0Wlc1MGJXRndYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh3Y205cVpXTjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNabGNuUmxlRDRLQ1haV2FXVjNVRzl6YVhScGIyNGdQU0F0SUcxMlVHOXphWFJwYjI0dWVIbDZPd29KSTJsdVkyeDFaR1VnUEhkdmNteGtjRzl6WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emFHRmtiM2R0WVhCZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHWnZaMTkyWlhKMFpYZytDbjFnTENCYVp5QTlJR0FqWkdWbWFXNWxJRlJQVDA0S2RXNXBabTl5YlNCMlpXTXpJR1JwWm1aMWMyVTdDblZ1YVdadmNtMGdkbVZqTXlCbGJXbHpjMmwyWlRzS2RXNXBabTl5YlNCbWJHOWhkQ0J2Y0dGamFYUjVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4Y0dGamEybHVaejRLSTJsdVkyeDFaR1VnUEdScGRHaGxjbWx1WjE5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVhSbGMzUmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoYUdGemFGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXOXRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR3hwWjJoMGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGxiV2x6YzJsMlpXMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThaM0poWkdsbGJuUnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WW5Oa1puTStDaU5wYm1Oc2RXUmxJRHhzYVdkb2RITmZjR0Z5YzE5aVpXZHBiajRLSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiR2xuYUhSelgzUnZiMjVmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSE5vWVdSdmQyMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZblZ0Y0cxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJtOXliV0ZzYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZabkpoWjIxbGJuUStDblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZlpuSmhaMjFsYm5RK0NnbDJaV00wSUdScFptWjFjMlZEYjJ4dmNpQTlJSFpsWXpRb0lHUnBabVoxYzJVc0lHOXdZV05wZEhrZ0tUc0tDVkpsWm14bFkzUmxaRXhwWjJoMElISmxabXhsWTNSbFpFeHBaMmgwSUQwZ1VtVm1iR1ZqZEdWa1RHbG5hSFFvSUhabFl6TW9JREF1TUNBcExDQjJaV016S0NBd0xqQWdLU3dnZG1Wak15Z2dNQzR3SUNrc0lIWmxZek1vSURBdU1DQXBJQ2s3Q2dsMlpXTXpJSFJ2ZEdGc1JXMXBjM05wZG1WU1lXUnBZVzVqWlNBOUlHVnRhWE56YVhabE93b0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbDltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZVzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVhSbGMzUmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WVd4d2FHRm9ZWE5vWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHNXZjbTFoYkY5bWNtRm5iV1Z1ZEY5aVpXZHBiajRLQ1NOcGJtTnNkV1JsSUR4dWIzSnRZV3hmWm5KaFoyMWxiblJmYldGd2N6NEtDU05wYm1Oc2RXUmxJRHhsYldsemMybDJaVzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHNhV2RvZEhOZmRHOXZibDltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4c2FXZG9kSE5mWm5KaFoyMWxiblJmWW1WbmFXNCtDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYMlp5WVdkdFpXNTBYMjFoY0hNK0Nna2phVzVqYkhWa1pTQThiR2xuYUhSelgyWnlZV2R0Wlc1MFgyVnVaRDRLQ1NOcGJtTnNkV1JsSUR4aGIyMWhjRjltY21GbmJXVnVkRDRLQ1habFl6TWdiM1YwWjI5cGJtZE1hV2RvZENBOUlISmxabXhsWTNSbFpFeHBaMmgwTG1ScGNtVmpkRVJwWm1aMWMyVWdLeUJ5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRFUnBabVoxYzJVZ0t5QjBiM1JoYkVWdGFYTnphWFpsVW1Ga2FXRnVZMlU3Q2dramFXNWpiSFZrWlNBOGIzQmhjWFZsWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIUnZibVZ0WVhCd2FXNW5YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXljM0JoWTJWZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThabTluWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIQnlaVzExYkhScGNHeHBaV1JmWVd4d2FHRmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WkdsMGFHVnlhVzVuWDJaeVlXZHRaVzUwUGdwOVlDd2dTbWNnUFNCZ2RXNXBabTl5YlNCbWJHOWhkQ0J6YVhwbE93cDFibWxtYjNKdElHWnNiMkYwSUhOallXeGxPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZmRtVnlkR1Y0UGdvamFXWmtaV1lnVlZORlgxQlBTVTVVVTE5VlZnb0pkbUZ5ZVdsdVp5QjJaV015SUhaVmRqc0tDWFZ1YVdadmNtMGdiV0YwTXlCMWRsUnlZVzV6Wm05eWJUc0tJMlZ1WkdsbUNuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcFptUmxaaUJWVTBWZlVFOUpUbFJUWDFWV0Nna0pkbFYySUQwZ0tDQjFkbFJ5WVc1elptOXliU0FxSUhabFl6TW9JSFYyTENBeElDa2dLUzU0ZVRzS0NTTmxibVJwWmdvSkkybHVZMngxWkdVZ1BHTnZiRzl5WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4dGIzSndhR052Ykc5eVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0paMnhmVUc5cGJuUlRhWHBsSUQwZ2MybDZaVHNLQ1NOcFptUmxaaUJWVTBWZlUwbGFSVUZVVkVWT1ZVRlVTVTlPQ2drSlltOXZiQ0JwYzFCbGNuTndaV04wYVhabElEMGdhWE5RWlhKemNHVmpkR2wyWlUxaGRISnBlQ2dnY0hKdmFtVmpkR2x2YmsxaGRISnBlQ0FwT3dvSkNXbG1JQ2dnYVhOUVpYSnpjR1ZqZEdsMlpTQXBJR2RzWDFCdmFXNTBVMmw2WlNBcVBTQW9JSE5qWVd4bElDOGdMU0J0ZGxCdmMybDBhVzl1TG5vZ0tUc0tDU05sYm1ScFpnb0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhkdmNteGtjRzl6WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4bWIyZGZkbVZ5ZEdWNFBncDlZQ3dnSkdjZ1BTQmdkVzVwWm05eWJTQjJaV016SUdScFptWjFjMlU3Q25WdWFXWnZjbTBnWm14dllYUWdiM0JoWTJsMGVUc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQR052Ykc5eVgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4dFlYQmZjR0Z5ZEdsamJHVmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTltY21GbmJXVnVkRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOW1jbUZuYldWdWRENEtDWFpsWXpNZ2IzVjBaMjlwYm1kTWFXZG9kQ0E5SUhabFl6TW9JREF1TUNBcE93b0pkbVZqTkNCa2FXWm1kWE5sUTI5c2IzSWdQU0IyWldNMEtDQmthV1ptZFhObExDQnZjR0ZqYVhSNUlDazdDZ2tqYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThiV0Z3WDNCaGNuUnBZMnhsWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXaGhjMmhmWm5KaFoyMWxiblErQ2dsdmRYUm5iMmx1WjB4cFoyaDBJRDBnWkdsbVpuVnpaVU52Ykc5eUxuSm5ZanNLQ1NOcGJtTnNkV1JsSUR4dmNHRnhkV1ZmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGRHOXVaVzFoY0hCcGJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSnpjR0ZqWlY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeG1iMmRmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGNISmxiWFZzZEdsd2JHbGxaRjloYkhCb1lWOW1jbUZuYldWdWRENEtmV0FzSUV0bklEMGdZQ05wYm1Oc2RXUmxJRHhqYjIxdGIyNCtDaU5wYm1Oc2RXUmxJRHhtYjJkZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh0YjNKd2FIUmhjbWRsZEY5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4emFHRmtiM2R0WVhCZmNHRnljMTkyWlhKMFpYZytDblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBibU5zZFdSbElEeGlaV2RwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaHViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITnJhVzVpWVhObFgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1Ym05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhrWldaaGRXeDBibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh3Y205cVpXTjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGQyOXliR1J3YjNOZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITm9ZV1J2ZDIxaGNGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThabTluWDNabGNuUmxlRDRLZldBc0lGRm5JRDBnWUhWdWFXWnZjbTBnZG1Wak15QmpiMnh2Y2pzS2RXNXBabTl5YlNCbWJHOWhkQ0J2Y0dGamFYUjVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4Y0dGamEybHVaejRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFluTmtabk0rQ2lOcGJtTnNkV1JsSUR4c2FXZG9kSE5mY0dGeWMxOWlaV2RwYmo0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BITm9ZV1J2ZDIxaGMydGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgyWnlZV2R0Wlc1MFBnb0paMnhmUm5KaFowTnZiRzl5SUQwZ2RtVmpOQ2dnWTI5c2IzSXNJRzl3WVdOcGRIa2dLaUFvSURFdU1DQXRJR2RsZEZOb1lXUnZkMDFoYzJzb0tTQXBJQ2s3Q2dramFXNWpiSFZrWlNBOGRHOXVaVzFoY0hCcGJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSnpjR0ZqWlY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeG1iMmRmWm5KaFoyMWxiblErQ24xZ0xDQnFaeUE5SUdCMWJtbG1iM0p0SUdac2IyRjBJSEp2ZEdGMGFXOXVPd3AxYm1sbWIzSnRJSFpsWXpJZ1kyVnVkR1Z5T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NYWmxZelFnYlhaUWIzTnBkR2x2YmlBOUlHMXZaR1ZzVm1sbGQwMWhkSEpwZUNBcUlIWmxZelFvSURBdU1Dd2dNQzR3TENBd0xqQXNJREV1TUNBcE93b0pkbVZqTWlCelkyRnNaVHNLQ1hOallXeGxMbmdnUFNCc1pXNW5kR2dvSUhabFl6TW9JRzF2WkdWc1RXRjBjbWw0V3lBd0lGMHVlQ3dnYlc5a1pXeE5ZWFJ5YVhoYklEQWdYUzU1TENCdGIyUmxiRTFoZEhKcGVGc2dNQ0JkTG5vZ0tTQXBPd29KYzJOaGJHVXVlU0E5SUd4bGJtZDBhQ2dnZG1Wak15Z2diVzlrWld4TllYUnlhWGhiSURFZ1hTNTRMQ0J0YjJSbGJFMWhkSEpwZUZzZ01TQmRMbmtzSUcxdlpHVnNUV0YwY21sNFd5QXhJRjB1ZWlBcElDazdDZ2tqYVdadVpHVm1JRlZUUlY5VFNWcEZRVlJVUlU1VlFWUkpUMDRLQ1FsaWIyOXNJR2x6VUdWeWMzQmxZM1JwZG1VZ1BTQnBjMUJsY25Od1pXTjBhWFpsVFdGMGNtbDRLQ0J3Y205cVpXTjBhVzl1VFdGMGNtbDRJQ2s3Q2drSmFXWWdLQ0JwYzFCbGNuTndaV04wYVhabElDa2djMk5oYkdVZ0tqMGdMU0J0ZGxCdmMybDBhVzl1TG5vN0Nna2paVzVrYVdZS0NYWmxZeklnWVd4cFoyNWxaRkJ2YzJsMGFXOXVJRDBnS0NCd2IzTnBkR2x2Ymk1NGVTQXRJQ2dnWTJWdWRHVnlJQzBnZG1Wak1pZ2dNQzQxSUNrZ0tTQXBJQ29nYzJOaGJHVTdDZ2wyWldNeUlISnZkR0YwWldSUWIzTnBkR2x2YmpzS0NYSnZkR0YwWldSUWIzTnBkR2x2Ymk1NElEMGdZMjl6S0NCeWIzUmhkR2x2YmlBcElDb2dZV3hwWjI1bFpGQnZjMmwwYVc5dUxuZ2dMU0J6YVc0b0lISnZkR0YwYVc5dUlDa2dLaUJoYkdsbmJtVmtVRzl6YVhScGIyNHVlVHNLQ1hKdmRHRjBaV1JRYjNOcGRHbHZiaTU1SUQwZ2MybHVLQ0J5YjNSaGRHbHZiaUFwSUNvZ1lXeHBaMjVsWkZCdmMybDBhVzl1TG5nZ0t5QmpiM01vSUhKdmRHRjBhVzl1SUNrZ0tpQmhiR2xuYm1Wa1VHOXphWFJwYjI0dWVUc0tDVzEyVUc5emFYUnBiMjR1ZUhrZ0t6MGdjbTkwWVhSbFpGQnZjMmwwYVc5dU93b0paMnhmVUc5emFYUnBiMjRnUFNCd2NtOXFaV04wYVc5dVRXRjBjbWw0SUNvZ2JYWlFiM05wZEdsdmJqc0tDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4bWIyZGZkbVZ5ZEdWNFBncDlZQ3dnWlY4Z1BTQmdkVzVwWm05eWJTQjJaV016SUdScFptWjFjMlU3Q25WdWFXWnZjbTBnWm14dllYUWdiM0JoWTJsMGVUc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQSFYyWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdGc2NHaGhiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGFHRnphRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThabTluWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZlpuSmhaMjFsYm5RK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dsMlpXTXpJRzkxZEdkdmFXNW5UR2xuYUhRZ1BTQjJaV016S0NBd0xqQWdLVHNLQ1habFl6UWdaR2xtWm5WelpVTnZiRzl5SUQwZ2RtVmpOQ2dnWkdsbVpuVnpaU3dnYjNCaFkybDBlU0FwT3dvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YMlp5WVdkdFpXNTBQZ29KYjNWMFoyOXBibWRNYVdkb2RDQTlJR1JwWm1aMWMyVkRiMnh2Y2k1eVoySTdDZ2tqYVc1amJIVmtaU0E4YjNCaGNYVmxYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhSdmJtVnRZWEJ3YVc1blgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eWMzQmhZMlZmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFptOW5YMlp5WVdkdFpXNTBQZ3A5WUN3Z2EyVWdQU0I3Q2lBZ0lDQmhiSEJvWVdoaGMyaGZabkpoWjIxbGJuUTZJRVZ3TEFvZ0lDQWdZV3h3YUdGb1lYTm9YM0JoY25OZlpuSmhaMjFsYm5RNklGUndMQW9nSUNBZ1lXeHdhR0Z0WVhCZlpuSmhaMjFsYm5RNklIZHdMQW9nSUNBZ1lXeHdhR0Z0WVhCZmNHRnljMTltY21GbmJXVnVkRG9nUVhBc0NpQWdJQ0JoYkhCb1lYUmxjM1JmWm5KaFoyMWxiblE2SUZKd0xBb2dJQ0FnWVd4d2FHRjBaWE4wWDNCaGNuTmZabkpoWjIxbGJuUTZJRU53TEFvZ0lDQWdZVzl0WVhCZlpuSmhaMjFsYm5RNklGQndMQW9nSUNBZ1lXOXRZWEJmY0dGeWMxOW1jbUZuYldWdWREb2dUSEFzQ2lBZ0lDQmlaV2RwYmw5MlpYSjBaWGc2SUVsd0xBb2dJQ0FnWW1WbmFXNXViM0p0WVd4ZmRtVnlkR1Y0T2lCVmNDd0tJQ0FnSUdKelpHWnpPaUJFY0N3S0lDQWdJR2x5YVdSbGMyTmxibU5sWDJaeVlXZHRaVzUwT2lCT2NDd0tJQ0FnSUdKMWJYQnRZWEJmY0dGeWMxOW1jbUZuYldWdWREb2dUM0FzQ2lBZ0lDQmpiR2x3Y0dsdVoxOXdiR0Z1WlhOZlpuSmhaMjFsYm5RNklFWndMQW9nSUNBZ1kyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZabkpoWjIxbGJuUTZJRUp3TEFvZ0lDQWdZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mZG1WeWRHVjRPaUI2Y0N3S0lDQWdJR05zYVhCd2FXNW5YM0JzWVc1bGMxOTJaWEowWlhnNklGWndMQW9nSUNBZ1kyOXNiM0pmWm5KaFoyMWxiblE2SUd0d0xBb2dJQ0FnWTI5c2IzSmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1NIQXNDaUFnSUNCamIyeHZjbDl3WVhKelgzWmxjblJsZURvZ1IzQXNDaUFnSUNCamIyeHZjbDkyWlhKMFpYZzZJRmR3TEFvZ0lDQWdZMjl0Ylc5dU9pQlljQ3dLSUNBZ0lHTjFZbVZmZFhaZmNtVm1iR1ZqZEdsdmJsOW1jbUZuYldWdWREb2djWEFzQ2lBZ0lDQmtaV1poZFd4MGJtOXliV0ZzWDNabGNuUmxlRG9nV1hBc0NpQWdJQ0JrYVhOd2JHRmpaVzFsYm5SdFlYQmZjR0Z5YzE5MlpYSjBaWGc2SUZwd0xBb2dJQ0FnWkdsemNHeGhZMlZ0Wlc1MGJXRndYM1psY25SbGVEb2dTbkFzQ2lBZ0lDQmxiV2x6YzJsMlpXMWhjRjltY21GbmJXVnVkRG9nSkhBc0NpQWdJQ0JsYldsemMybDJaVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBPaUJMY0N3S0lDQWdJR052Ykc5eWMzQmhZMlZmWm5KaFoyMWxiblE2SUZGd0xBb2dJQ0FnWTI5c2IzSnpjR0ZqWlY5d1lYSnpYMlp5WVdkdFpXNTBPaUJxY0N3S0lDQWdJR1Z1ZG0xaGNGOW1jbUZuYldWdWREb2daVzBzQ2lBZ0lDQmxiblp0WVhCZlkyOXRiVzl1WDNCaGNuTmZabkpoWjIxbGJuUTZJSFJ0TEFvZ0lDQWdaVzUyYldGd1gzQmhjbk5mWm5KaFoyMWxiblE2SUc1dExBb2dJQ0FnWlc1MmJXRndYM0JoY25OZmRtVnlkR1Y0T2lCcGJTd0tJQ0FnSUdWdWRtMWhjRjl3YUhsemFXTmhiRjl3WVhKelgyWnlZV2R0Wlc1ME9pQnRiU3dLSUNBZ0lHVnVkbTFoY0Y5MlpYSjBaWGc2SUhOdExBb2dJQ0FnWm05blgzWmxjblJsZURvZ2NtMHNDaUFnSUNCbWIyZGZjR0Z5YzE5MlpYSjBaWGc2SUdGdExBb2dJQ0FnWm05blgyWnlZV2R0Wlc1ME9pQnZiU3dLSUNBZ0lHWnZaMTl3WVhKelgyWnlZV2R0Wlc1ME9pQmpiU3dLSUNBZ0lHZHlZV1JwWlc1MGJXRndYM0JoY25OZlpuSmhaMjFsYm5RNklHeHRMQW9nSUNBZ2JHbG5hSFJ0WVhCZlpuSmhaMjFsYm5RNklHaHRMQW9nSUNBZ2JHbG5hSFJ0WVhCZmNHRnljMTltY21GbmJXVnVkRG9nZFcwc0NpQWdJQ0JzYVdkb2RITmZiR0Z0WW1WeWRGOW1jbUZuYldWdWREb2daRzBzQ2lBZ0lDQnNhV2RvZEhOZmJHRnRZbVZ5ZEY5d1lYSnpYMlp5WVdkdFpXNTBPaUJtYlN3S0lDQWdJR3hwWjJoMGMxOXdZWEp6WDJKbFoybHVPaUJ3YlN3S0lDQWdJR3hwWjJoMGMxOTBiMjl1WDJaeVlXZHRaVzUwT2lCbmJTd0tJQ0FnSUd4cFoyaDBjMTkwYjI5dVgzQmhjbk5mWm5KaFoyMWxiblE2SUY5dExBb2dJQ0FnYkdsbmFIUnpYM0JvYjI1blgyWnlZV2R0Wlc1ME9pQjRiU3dLSUNBZ0lHeHBaMmgwYzE5d2FHOXVaMTl3WVhKelgyWnlZV2R0Wlc1ME9pQjJiU3dLSUNBZ0lHeHBaMmgwYzE5d2FIbHphV05oYkY5bWNtRm5iV1Z1ZERvZ2VXMHNDaUFnSUNCc2FXZG9kSE5mY0doNWMybGpZV3hmY0dGeWMxOW1jbUZuYldWdWREb2dUVzBzQ2lBZ0lDQnNhV2RvZEhOZlpuSmhaMjFsYm5SZlltVm5hVzQ2SUZOdExBb2dJQ0FnYkdsbmFIUnpYMlp5WVdkdFpXNTBYMjFoY0hNNklHSnRMQW9nSUNBZ2JHbG5hSFJ6WDJaeVlXZHRaVzUwWDJWdVpEb2dSVzBzQ2lBZ0lDQnNiMmRrWlhCMGFHSjFabDltY21GbmJXVnVkRG9nVkcwc0NpQWdJQ0JzYjJka1pYQjBhR0oxWmw5d1lYSnpYMlp5WVdkdFpXNTBPaUIzYlN3S0lDQWdJR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZkbVZ5ZEdWNE9pQkJiU3dLSUNBZ0lHeHZaMlJsY0hSb1luVm1YM1psY25SbGVEb2dVbTBzQ2lBZ0lDQnRZWEJmWm5KaFoyMWxiblE2SUVOdExBb2dJQ0FnYldGd1gzQmhjbk5mWm5KaFoyMWxiblE2SUZCdExBb2dJQ0FnYldGd1gzQmhjblJwWTJ4bFgyWnlZV2R0Wlc1ME9pQk1iU3dLSUNBZ0lHMWhjRjl3WVhKMGFXTnNaVjl3WVhKelgyWnlZV2R0Wlc1ME9pQkpiU3dLSUNBZ0lHMWxkR0ZzYm1WemMyMWhjRjltY21GbmJXVnVkRG9nVlcwc0NpQWdJQ0J0WlhSaGJHNWxjM050WVhCZmNHRnljMTltY21GbmJXVnVkRG9nUkcwc0NpQWdJQ0J0YjNKd2FHTnZiRzl5WDNabGNuUmxlRG9nVG0wc0NpQWdJQ0J0YjNKd2FHNXZjbTFoYkY5MlpYSjBaWGc2SUU5dExBb2dJQ0FnYlc5eWNHaDBZWEpuWlhSZmNHRnljMTkyWlhKMFpYZzZJRVp0TEFvZ0lDQWdiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRPaUJDYlN3S0lDQWdJRzV2Y20xaGJGOW1jbUZuYldWdWRGOWlaV2RwYmpvZ2VtMHNDaUFnSUNCdWIzSnRZV3hmWm5KaFoyMWxiblJmYldGd2N6b2dWbTBzQ2lBZ0lDQnViM0p0WVd4ZmNHRnljMTltY21GbmJXVnVkRG9nYTIwc0NpQWdJQ0J1YjNKdFlXeGZjR0Z5YzE5MlpYSjBaWGc2SUVodExBb2dJQ0FnYm05eWJXRnNYM1psY25SbGVEb2dSMjBzQ2lBZ0lDQnViM0p0WVd4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1YyMHNDaUFnSUNCamJHVmhjbU52WVhSZmJtOXliV0ZzWDJaeVlXZHRaVzUwWDJKbFoybHVPaUJZYlN3S0lDQWdJR05zWldGeVkyOWhkRjl1YjNKdFlXeGZabkpoWjIxbGJuUmZiV0Z3Y3pvZ2NXMHNDaUFnSUNCamJHVmhjbU52WVhSZmNHRnljMTltY21GbmJXVnVkRG9nV1cwc0NpQWdJQ0JwY21sa1pYTmpaVzVqWlY5d1lYSnpYMlp5WVdkdFpXNTBPaUJhYlN3S0lDQWdJRzl3WVhGMVpWOW1jbUZuYldWdWREb2dTbTBzQ2lBZ0lDQndZV05yYVc1bk9pQWtiU3dLSUNBZ0lIQnlaVzExYkhScGNHeHBaV1JmWVd4d2FHRmZabkpoWjIxbGJuUTZJRXR0TEFvZ0lDQWdjSEp2YW1WamRGOTJaWEowWlhnNklGRnRMQW9nSUNBZ1pHbDBhR1Z5YVc1blgyWnlZV2R0Wlc1ME9pQnFiU3dLSUNBZ0lHUnBkR2hsY21sdVoxOXdZWEp6WDJaeVlXZHRaVzUwT2lCbFp5d0tJQ0FnSUhKdmRXZG9ibVZ6YzIxaGNGOW1jbUZuYldWdWREb2dkR2NzQ2lBZ0lDQnliM1ZuYUc1bGMzTnRZWEJmY0dGeWMxOW1jbUZuYldWdWREb2dibWNzQ2lBZ0lDQnphR0ZrYjNkdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ2FXY3NDaUFnSUNCemFHRmtiM2R0WVhCZmNHRnljMTkyWlhKMFpYZzZJSE5uTEFvZ0lDQWdjMmhoWkc5M2JXRndYM1psY25SbGVEb2djbWNzQ2lBZ0lDQnphR0ZrYjNkdFlYTnJYM0JoY25OZlpuSmhaMjFsYm5RNklHRm5MQW9nSUNBZ2MydHBibUpoYzJWZmRtVnlkR1Y0T2lCdlp5d0tJQ0FnSUhOcmFXNXVhVzVuWDNCaGNuTmZkbVZ5ZEdWNE9pQmpaeXdLSUNBZ0lITnJhVzV1YVc1blgzWmxjblJsZURvZ2JHY3NDaUFnSUNCemEybHVibTl5YldGc1gzWmxjblJsZURvZ2FHY3NDaUFnSUNCemNHVmpkV3hoY20xaGNGOW1jbUZuYldWdWREb2dkV2NzQ2lBZ0lDQnpjR1ZqZFd4aGNtMWhjRjl3WVhKelgyWnlZV2R0Wlc1ME9pQmtaeXdLSUNBZ0lIUnZibVZ0WVhCd2FXNW5YMlp5WVdkdFpXNTBPaUJtWnl3S0lDQWdJSFJ2Ym1WdFlYQndhVzVuWDNCaGNuTmZabkpoWjIxbGJuUTZJSEJuTEFvZ0lDQWdkSEpoYm5OdGFYTnphVzl1WDJaeVlXZHRaVzUwT2lCdFp5d0tJQ0FnSUhSeVlXNXpiV2x6YzJsdmJsOXdZWEp6WDJaeVlXZHRaVzUwT2lCblp5d0tJQ0FnSUhWMlgzQmhjbk5mWm5KaFoyMWxiblE2SUY5bkxBb2dJQ0FnZFhaZmNHRnljMTkyWlhKMFpYZzZJSGhuTEFvZ0lDQWdkWFpmZG1WeWRHVjRPaUIyWnl3S0lDQWdJSGR2Y214a2NHOXpYM1psY25SbGVEb2dlV2NzQ2lBZ0lDQmlZV05yWjNKdmRXNWtYM1psY25RNklFMW5MQW9nSUNBZ1ltRmphMmR5YjNWdVpGOW1jbUZuT2lCVFp5d0tJQ0FnSUdKaFkydG5jbTkxYm1SRGRXSmxYM1psY25RNklHSm5MQW9nSUNBZ1ltRmphMmR5YjNWdVpFTjFZbVZmWm5KaFp6b2dSV2NzQ2lBZ0lDQmpkV0psWDNabGNuUTZJRlJuTEFvZ0lDQWdZM1ZpWlY5bWNtRm5PaUIzWnl3S0lDQWdJR1JsY0hSb1gzWmxjblE2SUVGbkxBb2dJQ0FnWkdWd2RHaGZabkpoWnpvZ1VtY3NDaUFnSUNCa2FYTjBZVzVqWlZKSFFrRmZkbVZ5ZERvZ1EyY3NDaUFnSUNCa2FYTjBZVzVqWlZKSFFrRmZabkpoWnpvZ1VHY3NDaUFnSUNCbGNYVnBjbVZqZEY5MlpYSjBPaUJNWnl3S0lDQWdJR1Z4ZFdseVpXTjBYMlp5WVdjNklFbG5MQW9nSUNBZ2JHbHVaV1JoYzJobFpGOTJaWEowT2lCVlp5d0tJQ0FnSUd4cGJtVmtZWE5vWldSZlpuSmhaem9nUkdjc0NpQWdJQ0J0WlhOb1ltRnphV05mZG1WeWREb2dUbWNzQ2lBZ0lDQnRaWE5vWW1GemFXTmZabkpoWnpvZ1QyY3NDaUFnSUNCdFpYTm9iR0Z0WW1WeWRGOTJaWEowT2lCR1p5d0tJQ0FnSUcxbGMyaHNZVzFpWlhKMFgyWnlZV2M2SUVKbkxBb2dJQ0FnYldWemFHMWhkR05oY0Y5MlpYSjBPaUI2Wnl3S0lDQWdJRzFsYzJodFlYUmpZWEJmWm5KaFp6b2dWbWNzQ2lBZ0lDQnRaWE5vYm05eWJXRnNYM1psY25RNklHdG5MQW9nSUNBZ2JXVnphRzV2Y20xaGJGOW1jbUZuT2lCSVp5d0tJQ0FnSUcxbGMyaHdhRzl1WjE5MlpYSjBPaUJIWnl3S0lDQWdJRzFsYzJod2FHOXVaMTltY21Gbk9pQlhaeXdLSUNBZ0lHMWxjMmh3YUhsemFXTmhiRjkyWlhKME9pQllaeXdLSUNBZ0lHMWxjMmh3YUhsemFXTmhiRjltY21Gbk9pQnhaeXdLSUNBZ0lHMWxjMmgwYjI5dVgzWmxjblE2SUZsbkxBb2dJQ0FnYldWemFIUnZiMjVmWm5KaFp6b2dXbWNzQ2lBZ0lDQndiMmx1ZEhOZmRtVnlkRG9nU21jc0NpQWdJQ0J3YjJsdWRITmZabkpoWnpvZ0pHY3NDaUFnSUNCemFHRmtiM2RmZG1WeWREb2dTMmNzQ2lBZ0lDQnphR0ZrYjNkZlpuSmhaem9nVVdjc0NpQWdJQ0J6Y0hKcGRHVmZkbVZ5ZERvZ2FtY3NDaUFnSUNCemNISnBkR1ZmWm5KaFp6b2daVjhLZlN3Z2JHVWdQU0I3Q2lBZ0lDQmpiMjF0YjI0NklIc0tJQ0FnSUNBZ0lDQmthV1ptZFhObE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ2NHVW9NVFkzTnpjeU1UVXBDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnRZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUcxaGNGUnlZVzV6Wm05eWJUb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lFaGxDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JoYkhCb1lVMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnWVd4d2FHRk5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJJWlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1lXeHdhR0ZVWlhOME9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lITndaV04xYkdGeWJXRndPaUI3Q2lBZ0lDQWdJQ0FnYzNCbFkzVnNZWEpOWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITndaV04xYkdGeVRXRndWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ1pXNTJiV0Z3T2lCN0NpQWdJQ0FnSUNBZ1pXNTJUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCbWJHbHdSVzUyVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF0TVFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2NtVm1iR1ZqZEdsMmFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnBiM0k2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERXVOUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnY21WbWNtRmpkR2x2YmxKaGRHbHZPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBdU9UZ0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnWVc5dFlYQTZJSHNLSUNBZ0lDQWdJQ0JoYjAxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdZVzlOWVhCSmJuUmxibk5wZEhrNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdGdlRXRndWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2JHbG5hSFJ0WVhBNklIc0tJQ0FnSUNBZ0lDQnNhV2RvZEUxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdiR2xuYUhSTllYQkpiblJsYm5OcGRIazZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHeHBaMmgwVFdGd1ZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnWW5WdGNHMWhjRG9nZXdvZ0lDQWdJQ0FnSUdKMWJYQk5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdKMWJYQk5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJJWlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1luVnRjRk5qWVd4bE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lHNXZjbTFoYkcxaGNEb2dld29nSUNBZ0lDQWdJRzV2Y20xaGJFMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYm05eWJXRnNUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHNXZjbTFoYkZOallXeGxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dXaWd4TENBeEtRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0JrYVhOd2JHRmpaVzFsYm5SdFlYQTZJSHNLSUNBZ0lDQWdJQ0JrYVhOd2JHRmpaVzFsYm5STllYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR1JwYzNCc1lXTmxiV1Z1ZEUxaGNGUnlZVzV6Wm05eWJUb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lFaGxDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JrYVhOd2JHRmpaVzFsYm5SVFkyRnNaVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Rb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdaR2x6Y0d4aFkyVnRaVzUwUW1saGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBzQ2lBZ0lDQmxiV2x6YzJsMlpXMWhjRG9nZXdvZ0lDQWdJQ0FnSUdWdGFYTnphWFpsVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQmxiV2x6YzJsMlpVMWhjRlJ5WVc1elptOXliVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJRWhsQ2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lHMWxkR0ZzYm1WemMyMWhjRG9nZXdvZ0lDQWdJQ0FnSUcxbGRHRnNibVZ6YzAxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdiV1YwWVd4dVpYTnpUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdjbTkxWjJodVpYTnpiV0Z3T2lCN0NpQWdJQ0FnSUNBZ2NtOTFaMmh1WlhOelRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J5YjNWbmFHNWxjM05OWVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCSVpRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0JuY21Ga2FXVnVkRzFoY0RvZ2V3b2dJQ0FnSUNBZ0lHZHlZV1JwWlc1MFRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZTd0tJQ0FnSUdadlp6b2dld29nSUNBZ0lDQWdJR1p2WjBSbGJuTnBkSGs2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklESTFaUzAxQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCbWIyZE9aV0Z5T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JtYjJkR1lYSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURKbE13b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdabTluUTI5c2IzSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QndaU2d4TmpjM056SXhOU2tLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2JHbG5hSFJ6T2lCN0NpQWdJQ0FnSUNBZ1lXMWlhV1Z1ZEV4cFoyaDBRMjlzYjNJNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCc2FXZG9kRkJ5YjJKbE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dVlXeE1hV2RvZEhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkTEFvZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjQ2SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUh0OUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzZHpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhTd0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaRzkzUW1saGN6b2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZE9iM0p0WVd4Q2FXRnpPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOb1lXUnZkMUpoWkdsMWN6b2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZE5ZWEJUYVhwbE9pQjdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNWhiRk5vWVdSdmQwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1cxMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR1JwY21WamRHbHZibUZzVTJoaFpHOTNUV0YwY21sNE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2MzQnZkRXhwWjJoMGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nVzEwc0NpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJqb2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOMFlXNWpaVG9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNWxRMjl6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmxiblZ0WW5KaFEyOXpPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFkyRjVPaUI3ZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6Y0c5MFRHbG5hSFJUYUdGa2IzZHpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhTd0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaRzkzUW1saGN6b2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZE9iM0p0WVd4Q2FXRnpPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOb1lXUnZkMUpoWkdsMWN6b2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZE5ZWEJUYVhwbE9pQjdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnpjRzkwVEdsbmFIUk5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklGdGRDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6Y0c5MFUyaGhaRzkzVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2MzQnZkRXhwWjJoMFRXRjBjbWw0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnY0c5cGJuUk1hV2RvZEhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkTEFvZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqb2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiam9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXTmhlVG9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBZVzVqWlRvZ2UzMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2NHOXBiblJNYVdkb2RGTm9ZV1J2ZDNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkTEFvZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZENhV0Z6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDA1dmNtMWhiRUpwWVhNNklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1VtRmthWFZ6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDAxaGNGTnBlbVU2SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaRzkzUTJGdFpYSmhUbVZoY2pvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkRFlXMWxjbUZHWVhJNklIdDlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIQnZhVzUwVTJoaFpHOTNUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnY0c5cGJuUlRhR0ZrYjNkTllYUnlhWGc2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklGdGRDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JvWlcxcGMzQm9aWEpsVEdsbmFIUnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhTd0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dU9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5yZVVOdmJHOXlPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkeWIzVnVaRU52Ykc5eU9pQjdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnlaV04wUVhKbFlVeHBaMmgwY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dXMTBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdobGFXZG9kRG9nZTMwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYkhSalh6RTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR3gwWTE4eU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJSEJ2YVc1MGN6b2dld29nSUNBZ0lDQWdJR1JwWm1aMWMyVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QndaU2d4TmpjM056SXhOU2tLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUc5d1lXTnBkSGs2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSE5wZW1VNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhOallXeGxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnRZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdGc2NHaGhUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCaGJIQm9ZVTFoY0ZSeVlXNXpabTl5YlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUVobENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQmhiSEJvWVZSbGMzUTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURBS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIVjJWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2MzQnlhWFJsT2lCN0NpQWdJQ0FnSUNBZ1pHbG1ablZ6WlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUhCbEtERTJOemMzTWpFMUtRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdiM0JoWTJsMGVUb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTVFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1kyVnVkR1Z5T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnV2lndU5Td2dMalVwQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCeWIzUmhkR2x2YmpvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYldGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnRZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJJWlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1lXeHdhR0ZOWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHRnNjR2hoVFdGd1ZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR0ZzY0doaFZHVnpkRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Bb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS2ZTd2dibTRnUFNCN0NpQWdJQ0JpWVhOcFl6b2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUJNZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1OdmJXMXZiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVjM0JsWTNWc1lYSnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbVZ1ZG0xaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVlXOXRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbXhwWjJoMGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNW1iMmNLSUNBZ0lDQWdJQ0JkS1N3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJR3RsTG0xbGMyaGlZWE5wWTE5MlpYSjBMQW9nSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnJaUzV0WlhOb1ltRnphV05mWm5KaFp3b2dJQ0FnZlN3S0lDQWdJR3hoYldKbGNuUTZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVEhRb1d3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1amIyMXRiMjRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbk53WldOMWJHRnliV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVsYm5adFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtRnZiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVzYVdkb2RHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVaVzFwYzNOcGRtVnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbUoxYlhCdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtNXZjbTFoYkcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVpHbHpjR3hoWTJWdFpXNTBiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVtYjJjc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG14cFoyaDBjeXdLSUNBZ0lDQWdJQ0FnSUNBZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXMXBjM05wZG1VNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUhCbEtEQXBDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCZEtTd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUd0bExtMWxjMmhzWVcxaVpYSjBYM1psY25Rc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUd0bExtMWxjMmhzWVcxaVpYSjBYMlp5WVdjS0lDQWdJSDBzQ2lBZ0lDQndhRzl1WnpvZ2V3b2dJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQk1kQ2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbU52YlcxdmJpd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdWMzQmxZM1ZzWVhKdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtVnVkbTFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WVc5dFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExteHBaMmgwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1bGJXbHpjMmwyWlcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVluVnRjRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1Ym05eWJXRnNiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVrYVhOd2JHRmpaVzFsYm5SdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtWnZaeXdLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXViR2xuYUhSekxBb2dJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYldsemMybDJaVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2djR1VvTUNrS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHVmpkV3hoY2pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnY0dVb01URXhPRFE0TVNrS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHbHVhVzVsYzNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNekFLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lGMHBMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ2EyVXViV1Z6YUhCb2IyNW5YM1psY25Rc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUd0bExtMWxjMmh3YUc5dVoxOW1jbUZuQ2lBZ0lDQjlMQW9nSUNBZ2MzUmhibVJoY21RNklIc0tJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2dUSFFvV3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVqYjIxdGIyNHNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtVnVkbTFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WVc5dFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExteHBaMmgwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1bGJXbHpjMmwyWlcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVluVnRjRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1Ym05eWJXRnNiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVrYVhOd2JHRmpaVzFsYm5SdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExuSnZkV2RvYm1WemMyMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXViV1YwWVd4dVpYTnpiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVtYjJjc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG14cFoyaDBjeXdLSUNBZ0lDQWdJQ0FnSUNBZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXMXBjM05wZG1VNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUhCbEtEQXBDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTkxWjJodVpYTnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYUmhiRzVsYzNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1ZGsxaGNFbHVkR1Z1YzJsMGVUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmRLU3dLSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklHdGxMbTFsYzJod2FIbHphV05oYkY5MlpYSjBMQW9nSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnJaUzV0WlhOb2NHaDVjMmxqWVd4ZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUhSdmIyNDZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVEhRb1d3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1amIyMXRiMjRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbUZ2YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1c2FXZG9kRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WlcxcGMzTnBkbVZ0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1KMWJYQnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbTV2Y20xaGJHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVaR2x6Y0d4aFkyVnRaVzUwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1bmNtRmthV1Z1ZEcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVptOW5MQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNXNhV2RvZEhNc0NpQWdJQ0FnSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z0YVhOemFYWmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QndaU2d3S1FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdYU2tzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQnJaUzV0WlhOb2RHOXZibDkyWlhKMExBb2dJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCclpTNXRaWE5vZEc5dmJsOW1jbUZuQ2lBZ0lDQjlMQW9nSUNBZ2JXRjBZMkZ3T2lCN0NpQWdJQ0FnSUNBZ2RXNXBabTl5YlhNNklFeDBLRnNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVZMjl0Ylc5dUxBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1aWRXMXdiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzV1YjNKdFlXeHRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbVJwYzNCc1lXTmxiV1Z1ZEcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVptOW5MQW9nSUNBZ0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmpZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1hTa3NDaUFnSUNBZ0lDQWdkbVZ5ZEdWNFUyaGhaR1Z5T2lCclpTNXRaWE5vYldGMFkyRndYM1psY25Rc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUd0bExtMWxjMmh0WVhSallYQmZabkpoWndvZ0lDQWdmU3dLSUNBZ0lIQnZhVzUwY3pvZ2V3b2dJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQk1kQ2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbkJ2YVc1MGN5d0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVptOW5DaUFnSUNBZ0lDQWdYU2tzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQnJaUzV3YjJsdWRITmZkbVZ5ZEN3S0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nYTJVdWNHOXBiblJ6WDJaeVlXY0tJQ0FnSUgwc0NpQWdJQ0JrWVhOb1pXUTZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVEhRb1d3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1amIyMXRiMjRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbVp2Wnl3S0lDQWdJQ0FnSUNBZ0lDQWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdVNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoYzJoVGFYcGxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzUmhiRk5wZW1VNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1hTa3NDaUFnSUNBZ0lDQWdkbVZ5ZEdWNFUyaGhaR1Z5T2lCclpTNXNhVzVsWkdGemFHVmtYM1psY25Rc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUd0bExteHBibVZrWVhOb1pXUmZabkpoWndvZ0lDQWdmU3dLSUNBZ0lHUmxjSFJvT2lCN0NpQWdJQ0FnSUNBZ2RXNXBabTl5YlhNNklFeDBLRnNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVZMjl0Ylc5dUxBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1a2FYTndiR0ZqWlcxbGJuUnRZWEFLSUNBZ0lDQWdJQ0JkS1N3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJR3RsTG1SbGNIUm9YM1psY25Rc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUd0bExtUmxjSFJvWDJaeVlXY0tJQ0FnSUgwc0NpQWdJQ0J1YjNKdFlXdzZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVEhRb1d3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1amIyMXRiMjRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbUoxYlhCdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtNXZjbTFoYkcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVpHbHpjR3hoWTJWdFpXNTBiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjR0ZqYVhSNU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lGMHBMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ2EyVXViV1Z6YUc1dmNtMWhiRjkyWlhKMExBb2dJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCclpTNXRaWE5vYm05eWJXRnNYMlp5WVdjS0lDQWdJSDBzQ2lBZ0lDQnpjSEpwZEdVNklIc0tJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2dUSFFvV3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzV6Y0hKcGRHVXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtWnZad29nSUNBZ0lDQWdJRjBwTEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2dhMlV1YzNCeWFYUmxYM1psY25Rc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUd0bExuTndjbWwwWlY5bWNtRm5DaUFnSUNCOUxBb2dJQ0FnWW1GamEyZHliM1Z1WkRvZ2V3b2dJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhWMlZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJRWhsQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhReVJEb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnWW1GamEyZHliM1Z1WkVsdWRHVnVjMmwwZVRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQnJaUzVpWVdOclozSnZkVzVrWDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklHdGxMbUpoWTJ0bmNtOTFibVJmWm5KaFp3b2dJQ0FnZlN3S0lDQWdJR0poWTJ0bmNtOTFibVJEZFdKbE9pQjdDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXNTJUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iR2x3Ulc1MlRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dMVEVLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnWW1GamEyZHliM1Z1WkVKc2RYSnlhVzVsYzNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBd0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHSmhZMnRuY205MWJtUkpiblJsYm5OcGRIazZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nYTJVdVltRmphMmR5YjNWdVpFTjFZbVZmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ2EyVXVZbUZqYTJkeWIzVnVaRU4xWW1WZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUdOMVltVTZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBRM1ZpWlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkRVpzYVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBdE1Rb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnZjR0ZqYVhSNU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Rb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJR3RsTG1OMVltVmZkbVZ5ZEN3S0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nYTJVdVkzVmlaVjltY21GbkNpQWdJQ0I5TEFvZ0lDQWdaWEYxYVhKbFkzUTZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBSWEYxYVhKbFkzUTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ2EyVXVaWEYxYVhKbFkzUmZkbVZ5ZEN3S0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nYTJVdVpYRjFhWEpsWTNSZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUdScGMzUmhibU5sVWtkQ1FUb2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUJNZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1OdmJXMXZiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVaR2x6Y0d4aFkyVnRaVzUwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldabGNtVnVZMlZRYjNOcGRHbHZiam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dRUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsWVhKRWFYTjBZVzVqWlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZ5UkdsemRHRnVZMlU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01XVXpDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCZEtTd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUd0bExtUnBjM1JoYm1ObFVrZENRVjkyWlhKMExBb2dJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCclpTNWthWE4wWVc1alpWSkhRa0ZmWm5KaFp3b2dJQ0FnZlN3S0lDQWdJSE5vWVdSdmR6b2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUJNZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR3hsTG14cFoyaDBjeXdLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVabTluTEFvZ0lDQWdJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnY0dVb01Da0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjR0ZqYVhSNU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lGMHBMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ2EyVXVjMmhoWkc5M1gzWmxjblFzQ2lBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJR3RsTG5Ob1lXUnZkMTltY21GbkNpQWdJQ0I5Q24wN0NtNXVMbkJvZVhOcFkyRnNJRDBnZXdvZ0lDQWdkVzVwWm05eWJYTTZJRXgwS0ZzS0lDQWdJQ0FnSUNCdWJpNXpkR0Z1WkdGeVpDNTFibWxtYjNKdGN5d0tJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlZMjloZERvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURBS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGMFRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbU52WVhSTllYQlVjbUZ1YzJadmNtMDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1U2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1dpZ3hMQ0F4S1FvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbU52WVhSU2IzVm5hRzVsYzNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBd0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUVobENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHbHlhV1JsYzJObGJtTmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0JwY21sa1pYTmpaVzVqWlUxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYVhKcFpHVnpZMlZ1WTJWTllYQlVjbUZ1YzJadmNtMDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYSnBaR1Z6WTJWdVkyVkpUMUk2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4TGpNS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5hVzVwYlhWdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01UQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR2x5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdGNGFXMTFiVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRFF3TUFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCcGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMmhsWlc0NklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBd0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1UTI5c2IzSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnY0dVb01Da0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMmhsWlc1RGIyeHZjazFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMmhsWlc1RGIyeHZjazFoY0ZSeVlXNXpabTl5YlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QklaUW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6YUdWbGJsSnZkV2RvYm1WemN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMmhsWlc1U2IzVm5hRzVsYzNOTllYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhOb1pXVnVVbTkxWjJodVpYTnpUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lFaGxDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1emJXbHpjMmx2YmpvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURBS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk50YVhOemFXOXVUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzIxcGMzTnBiMjVOWVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTnRhWE56YVc5dVUyRnRjR3hsY2xOcGVtVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnV2dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMjFwYzNOcGIyNVRZVzF3YkdWeVRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCMGFHbGphMjVsYzNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBd0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hV05yYm1WemMwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBZMnR1WlhOelRXRndWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUVobENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRjBkR1Z1ZFdGMGFXOXVSR2x6ZEdGdVkyVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR0YwZEdWdWRXRjBhVzl1UTI5c2IzSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnY0dVb01Da0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjM0JsWTNWc1lYSkRiMnh2Y2pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QndaU2d4TENBeExDQXhLUW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6Y0dWamRXeGhja052Ykc5eVRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCemNHVmpkV3hoY2tOdmJHOXlUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lFaGxDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE53WldOMWJHRnlTVzUwWlc1emFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNUW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdZVzVwYzI5MGNtOXdlVlpsWTNSdmNqb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJhQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdGdWFYTnZkSEp2Y0hsTllYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdGdWFYTnZkSEp2Y0hsTllYQlVjbUZ1YzJadmNtMDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lGMHBMQW9nSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUJyWlM1dFpYTm9jR2g1YzJsallXeGZkbVZ5ZEN3S0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnJaUzV0WlhOb2NHaDVjMmxqWVd4ZlpuSmhad3A5T3dwMllYSWdZM0lnUFNCN0NpQWdJQ0J5T2lBd0xBb2dJQ0FnWWpvZ01Dd0tJQ0FnSUdjNklEQUtmVHNLWm5WdVkzUnBiMjRnZEY4b2N6RXNJR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lHeGxkQ0J2SUQwZ2JtVjNJSEJsS0RBcExDQmpJRDBnY2lBOVBUMGdJVEFnUHlBd0lEb2dNU3dnYkN3Z2FDd2dkU0E5SUc1MWJHd3NJR1FnUFNBd0xDQm1JRDBnYm5Wc2JEc0tJQ0FnSUdaMWJtTjBhVzl1SUcwb1p5d2djQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnSVRFc0lIZ2dQU0J3TG1selUyTmxibVVnUFQwOUlDRXdJRDhnY0M1aVlXTnJaM0p2ZFc1a0lEb2diblZzYkRzS0lDQWdJQ0FnSUNCNElDWW1JSGd1YVhOVVpYaDBkWEpsSUNZbUlDaDRJRDBnS0hBdVltRmphMmR5YjNWdVpFSnNkWEp5YVc1bGMzTWdQaUF3SUQ4Z2RDQTZJR1VwTG1kbGRDaDRLU2tzSUhnZ1BUMDlJRzUxYkd3Z1B5QmZLRzhzSUdNcElEb2dlQ0FtSmlCNExtbHpRMjlzYjNJZ0ppWWdLRjhvZUN3Z01Ta3NJSFlnUFNBaE1DazdDaUFnSUNBZ0lDQWdiR1YwSUhrZ1BTQnpNUzU0Y2k1blpYUkZiblpwY205dWJXVnVkRUpzWlc1a1RXOWtaU2dwT3dvZ0lDQWdJQ0FnSUhrZ1BUMDlJQ0poWkdScGRHbDJaU0lnUHlCdUxtSjFabVpsY25NdVkyOXNiM0l1YzJWMFEyeGxZWElvTUN3Z01Dd2dNQ3dnTVN3Z1lTa2dPaUI1SUQwOVBTQWlZV3h3YUdFdFlteGxibVFpSUNZbUlHNHVZblZtWm1WeWN5NWpiMnh2Y2k1elpYUkRiR1ZoY2lnd0xDQXdMQ0F3TENBd0xDQmhLU3dnS0hNeExtRjFkRzlEYkdWaGNpQjhmQ0IyS1NBbUppQnpNUzVqYkdWaGNpaHpNUzVoZFhSdlEyeGxZWEpEYjJ4dmNpd2djekV1WVhWMGIwTnNaV0Z5UkdWd2RHZ3NJSE14TG1GMWRHOURiR1ZoY2xOMFpXNWphV3dwTENCNElDWW1JQ2g0TG1selEzVmlaVlJsZUhSMWNtVWdmSHdnZUM1dFlYQndhVzVuSUQwOVBTQldjeWtnUHlBb2FDQTlQVDBnZG05cFpDQXdJQ1ltSUNob0lEMGdibVYzSUUxMEtHNWxkeUJLYVNneExDQXhMQ0F4S1N3Z2JtVjNJR3AwS0hzS0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ0lrSmhZMnRuY205MWJtUkRkV0psVFdGMFpYSnBZV3dpTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2dKR2tvYm00dVltRmphMmR5YjNWdVpFTjFZbVV1ZFc1cFptOXliWE1wTEFvZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUc1dUxtSmhZMnRuY205MWJtUkRkV0psTG5abGNuUmxlRk5vWVdSbGNpd0tJQ0FnSUNBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJRzV1TG1KaFkydG5jbTkxYm1SRGRXSmxMbVp5WVdkdFpXNTBVMmhoWkdWeUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6YVdSbE9pQkdkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hVWlhOME9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hYY21sMFpUb2dJVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHWnZaem9nSVRFS0lDQWdJQ0FnSUNCOUtTa3NJR2d1WjJWdmJXVjBjbmt1WkdWc1pYUmxRWFIwY21saWRYUmxLQ0p1YjNKdFlXd2lLU3dnYUM1blpXOXRaWFJ5ZVM1a1pXeGxkR1ZCZEhSeWFXSjFkR1VvSW5WMklpa3NJR2d1YjI1Q1pXWnZjbVZTWlc1a1pYSWdQU0JtZFc1amRHbHZiaWhpTENCM0xDQlNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YldGMGNtbDRWMjl5YkdRdVkyOXdlVkJ2YzJsMGFXOXVLRkl1YldGMGNtbDRWMjl5YkdRcE93b2dJQ0FnSUNBZ0lIMHNJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNob0xtMWhkR1Z5YVdGc0xDQWlaVzUyVFdGd0lpd2dld29nSUNBZ0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRXNXBabTl5YlhNdVpXNTJUV0Z3TG5aaGJIVmxPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTa3NJR2t1ZFhCa1lYUmxLR2dwS1N3Z2FDNXRZWFJsY21saGJDNTFibWxtYjNKdGN5NWxiblpOWVhBdWRtRnNkV1VnUFNCNExDQm9MbTFoZEdWeWFXRnNMblZ1YVdadmNtMXpMbVpzYVhCRmJuWk5ZWEF1ZG1Gc2RXVWdQU0I0TG1selEzVmlaVlJsZUhSMWNtVWdKaVlnZUM1cGMxSmxibVJsY2xSaGNtZGxkRlJsZUhSMWNtVWdQVDA5SUNFeElEOGdMVEVnT2lBeExDQm9MbTFoZEdWeWFXRnNMblZ1YVdadmNtMXpMbUpoWTJ0bmNtOTFibVJDYkhWeWNtbHVaWE56TG5aaGJIVmxJRDBnY0M1aVlXTnJaM0p2ZFc1a1FteDFjbkpwYm1WemN5d2dhQzV0WVhSbGNtbGhiQzUxYm1sbWIzSnRjeTVpWVdOclozSnZkVzVrU1c1MFpXNXphWFI1TG5aaGJIVmxJRDBnY0M1aVlXTnJaM0p2ZFc1a1NXNTBaVzV6YVhSNUxDQm9MbTFoZEdWeWFXRnNMblJ2Ym1WTllYQndaV1FnUFNCUlpTNW5aWFJVY21GdWMyWmxjaWg0TG1OdmJHOXlVM0JoWTJVcElDRTlQU0J1ZEN3Z0tIVWdJVDA5SUhnZ2ZId2daQ0FoUFQwZ2VDNTJaWEp6YVc5dUlIeDhJR1lnSVQwOUlITXhMblJ2Ym1WTllYQndhVzVuS1NBbUppQW9hQzV0WVhSbGNtbGhiQzV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IxSUQwZ2VDd2daQ0E5SUhndWRtVnljMmx2Yml3Z1ppQTlJSE14TG5SdmJtVk5ZWEJ3YVc1bktTd2dhQzVzWVhsbGNuTXVaVzVoWW14bFFXeHNLQ2tzSUdjdWRXNXphR2xtZENob0xDQm9MbWRsYjIxbGRISjVMQ0JvTG0xaGRHVnlhV0ZzTENBd0xDQXdMQ0J1ZFd4c0tTa2dPaUI0SUNZbUlIZ3VhWE5VWlhoMGRYSmxJQ1ltSUNoc0lEMDlQU0IyYjJsa0lEQWdKaVlnS0d3Z1BTQnVaWGNnVFhRb2JtVjNJQ1J5S0RJc0lESXBMQ0J1WlhjZ2FuUW9ld29nSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFpUW1GamEyZHliM1Z1WkUxaGRHVnlhV0ZzSWl3S0lDQWdJQ0FnSUNBZ0lDQWdkVzVwWm05eWJYTTZJQ1JwS0c1dUxtSmhZMnRuY205MWJtUXVkVzVwWm05eWJYTXBMQW9nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJRzV1TG1KaFkydG5jbTkxYm1RdWRtVnlkR1Y0VTJoaFpHVnlMQW9nSUNBZ0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nYm00dVltRmphMmR5YjNWdVpDNW1jbUZuYldWdWRGTm9ZV1JsY2l3S0lDQWdJQ0FnSUNBZ0lDQWdjMmxrWlRvZ1FtNHNDaUFnSUNBZ0lDQWdJQ0FnSUdSbGNIUm9WR1Z6ZERvZ0lURXNDaUFnSUNBZ0lDQWdJQ0FnSUdSbGNIUm9WM0pwZEdVNklDRXhMQW9nSUNBZ0lDQWdJQ0FnSUNCbWIyYzZJQ0V4Q2lBZ0lDQWdJQ0FnZlNrcExDQnNMbWRsYjIxbGRISjVMbVJsYkdWMFpVRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpa3NJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoc0xtMWhkR1Z5YVdGc0xDQWliV0Z3SWl3Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZFc1cFptOXliWE11ZERKRUxuWmhiSFZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU2tzSUdrdWRYQmtZWFJsS0d3cEtTd2diQzV0WVhSbGNtbGhiQzUxYm1sbWIzSnRjeTUwTWtRdWRtRnNkV1VnUFNCNExDQnNMbTFoZEdWeWFXRnNMblZ1YVdadmNtMXpMbUpoWTJ0bmNtOTFibVJKYm5SbGJuTnBkSGt1ZG1Gc2RXVWdQU0J3TG1KaFkydG5jbTkxYm1SSmJuUmxibk5wZEhrc0lHd3ViV0YwWlhKcFlXd3VkRzl1WlUxaGNIQmxaQ0E5SUZGbExtZGxkRlJ5WVc1elptVnlLSGd1WTI5c2IzSlRjR0ZqWlNrZ0lUMDlJRzUwTENCNExtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BUMDlJQ0V3SUNZbUlIZ3VkWEJrWVhSbFRXRjBjbWw0S0Nrc0lHd3ViV0YwWlhKcFlXd3VkVzVwWm05eWJYTXVkWFpVY21GdWMyWnZjbTB1ZG1Gc2RXVXVZMjl3ZVNoNExtMWhkSEpwZUNrc0lDaDFJQ0U5UFNCNElIeDhJR1FnSVQwOUlIZ3VkbVZ5YzJsdmJpQjhmQ0JtSUNFOVBTQnpNUzUwYjI1bFRXRndjR2x1WnlrZ0ppWWdLR3d1YldGMFpYSnBZV3d1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNQ3dnZFNBOUlIZ3NJR1FnUFNCNExuWmxjbk5wYjI0c0lHWWdQU0J6TVM1MGIyNWxUV0Z3Y0dsdVp5a3NJR3d1YkdGNVpYSnpMbVZ1WVdKc1pVRnNiQ2dwTENCbkxuVnVjMmhwWm5Rb2JDd2diQzVuWlc5dFpYUnllU3dnYkM1dFlYUmxjbWxoYkN3Z01Dd2dNQ3dnYm5Wc2JDa3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWHlobkxDQndLU0I3Q2lBZ0lDQWdJQ0FnWnk1blpYUlNSMElvWTNJc0lHSmtLSE14S1Nrc0lHNHVZblZtWm1WeWN5NWpiMnh2Y2k1elpYUkRiR1ZoY2loamNpNXlMQ0JqY2k1bkxDQmpjaTVpTENCd0xDQmhLVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnWjJWMFEyeGxZWEpEYjJ4dmNqb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdk93b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjMlYwUTJ4bFlYSkRiMnh2Y2pvZ1puVnVZM1JwYjI0b1p5d2djQ0E5SURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYnk1elpYUW9aeWtzSUdNZ1BTQndMQ0JmS0c4c0lHTXBPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnWjJWMFEyeGxZWEpCYkhCb1lUb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCak93b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjMlYwUTJ4bFlYSkJiSEJvWVRvZ1puVnVZM1JwYjI0b1p5a2dld29nSUNBZ0lDQWdJQ0FnSUNCaklEMGdaeXdnWHlodkxDQmpLVHNLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhKbGJtUmxjam9nYlFvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCdVh5aHpNU3dnWlN3Z2RDd2diaWtnZXdvZ0lDQWdiR1YwSUdrZ1BTQnpNUzVuWlhSUVlYSmhiV1YwWlhJb2N6RXVUVUZZWDFaRlVsUkZXRjlCVkZSU1NVSlRLU3dnY2lBOUlHNHVhWE5YWldKSFRESWdQeUJ1ZFd4c0lEb2daUzVuWlhRb0lrOUZVMTkyWlhKMFpYaGZZWEp5WVhsZmIySnFaV04wSWlrc0lHRWdQU0J1TG1selYyVmlSMHd5SUh4OElISWdJVDA5SUc1MWJHd3NJRzhnUFNCN2ZTd2dZeUE5SUdjb2JuVnNiQ2tzSUd3Z1BTQmpMQ0JvSUQwZ0lURTdDaUFnSUNCbWRXNWpkR2x2YmlCMUtGVXNJSG9zSUhFc0lFZ3NJRzVsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRmNnUFNBaE1Uc0tJQ0FnSUNBZ0lDQnBaaUFvWVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1N5QTlJRjhvU0N3Z2NTd2dlaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHd2dJVDA5SUVzZ0ppWWdLR3dnUFNCTExDQm1LR3d1YjJKcVpXTjBLU2tzSUZjZ1BTQndLRlVzSUVnc0lIRXNJRzVsS1N3Z1Z5QW1KaUIyS0ZVc0lFZ3NJSEVzSUc1bEtUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1N5QTlJSG91ZDJseVpXWnlZVzFsSUQwOVBTQWhNRHNLSUNBZ0lDQWdJQ0FnSUNBZ0tHd3VaMlZ2YldWMGNua2dJVDA5SUVndWFXUWdmSHdnYkM1d2NtOW5jbUZ0SUNFOVBTQnhMbWxrSUh4OElHd3VkMmx5WldaeVlXMWxJQ0U5UFNCTEtTQW1KaUFvYkM1blpXOXRaWFJ5ZVNBOUlFZ3VhV1FzSUd3dWNISnZaM0poYlNBOUlIRXVhV1FzSUd3dWQybHlaV1p5WVcxbElEMGdTeXdnVnlBOUlDRXdLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYm1VZ0lUMDlJRzUxYkd3Z0ppWWdkQzUxY0dSaGRHVW9ibVVzSUhNeExrVk1SVTFGVGxSZlFWSlNRVmxmUWxWR1JrVlNLU3dnS0ZjZ2ZId2dhQ2tnSmlZZ0tHZ2dQU0FoTVN3Z1NTaFZMQ0I2TENCeExDQklLU3dnYm1VZ0lUMDlJRzUxYkd3Z0ppWWdjekV1WW1sdVpFSjFabVpsY2loek1TNUZURVZOUlU1VVgwRlNVa0ZaWDBKVlJrWkZVaXdnZEM1blpYUW9ibVVwTG1KMVptWmxjaWtwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1pDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTVwYzFkbFlrZE1NaUEvSUhNeExtTnlaV0YwWlZabGNuUmxlRUZ5Y21GNUtDa2dPaUJ5TG1OeVpXRjBaVlpsY25SbGVFRnljbUY1VDBWVEtDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJtS0ZVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpNXBjMWRsWWtkTU1pQS9JSE14TG1KcGJtUldaWEowWlhoQmNuSmhlU2hWS1NBNklISXVZbWx1WkZabGNuUmxlRUZ5Y21GNVQwVlRLRlVwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2JTaFZLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzR1YVhOWFpXSkhURElnUHlCek1TNWtaV3hsZEdWV1pYSjBaWGhCY25KaGVTaFZLU0E2SUhJdVpHVnNaWFJsVm1WeWRHVjRRWEp5WVhsUFJWTW9WU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCZktGVXNJSG9zSUhFcElIc0tJQ0FnSUNBZ0lDQnNaWFFnU0NBOUlIRXVkMmx5WldaeVlXMWxJRDA5UFNBaE1Dd2dibVVnUFNCdlcxVXVhV1JkT3dvZ0lDQWdJQ0FnSUc1bElEMDlQU0IyYjJsa0lEQWdKaVlnS0c1bElEMGdlMzBzSUc5YlZTNXBaRjBnUFNCdVpTazdDaUFnSUNBZ0lDQWdiR1YwSUZjZ1BTQnVaVnQ2TG1sa1hUc0tJQ0FnSUNBZ0lDQlhJRDA5UFNCMmIybGtJREFnSmlZZ0tGY2dQU0I3ZlN3Z2JtVmJlaTVwWkYwZ1BTQlhLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1N5QTlJRmRiU0YwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVzZ1BUMDlJSFp2YVdRZ01DQW1KaUFvU3lBOUlHY29aQ2dwS1N3Z1YxdElYU0E5SUVzcExDQkxPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWnloVktTQjdDaUFnSUNBZ0lDQWdiR1YwSUhvZ1BTQmJYU3dnY1NBOUlGdGRMQ0JJSUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVaU0E5SURBN0lHNWxJRHdnYVRzZ2JtVXJLeWw2VzI1bFhTQTlJREFzSUhGYmJtVmRJRDBnTUN3Z1NGdHVaVjBnUFNBd093b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ0lDQWdJR2RsYjIxbGRISjVPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lDQWdJQ0J3Y205bmNtRnRPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lDQWdJQ0IzYVhKbFpuSmhiV1U2SUNFeExBb2dJQ0FnSUNBZ0lDQWdJQ0J1WlhkQmRIUnlhV0oxZEdWek9pQjZMQW9nSUNBZ0lDQWdJQ0FnSUNCbGJtRmliR1ZrUVhSMGNtbGlkWFJsY3pvZ2NTd0tJQ0FnSUNBZ0lDQWdJQ0FnWVhSMGNtbGlkWFJsUkdsMmFYTnZjbk02SUVnc0NpQWdJQ0FnSUNBZ0lDQWdJRzlpYW1WamREb2dWU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lYUjBjbWxpZFhSbGN6b2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCdWRXeHNDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhBb1ZTd2dlaXdnY1N3Z1NDa2dld29nSUNBZ0lDQWdJR3hsZENCdVpTQTlJR3d1WVhSMGNtbGlkWFJsY3l3Z1Z5QTlJSG91WVhSMGNtbGlkWFJsY3l3Z1N5QTlJREFzSUVRZ1BTQnhMbWRsZEVGMGRISnBZblYwWlhNb0tUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFY2dhVzRnUkNscFppQW9SRnRIWFM1c2IyTmhkR2x2YmlBK1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtWlNBOUlHNWxXMGRkTENCZlpTQTlJRmRiUjEwN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlpTQTlQVDBnZG05cFpDQXdJQ1ltSUNoSElEMDlQU0FpYVc1emRHRnVZMlZOWVhSeWFYZ2lJQ1ltSUZVdWFXNXpkR0Z1WTJWTllYUnlhWGdnSmlZZ0tGOWxJRDBnVlM1cGJuTjBZVzVqWlUxaGRISnBlQ2tzSUVjZ1BUMDlJQ0pwYm5OMFlXNWpaVU52Ykc5eUlpQW1KaUJWTG1sdWMzUmhibU5sUTI5c2IzSWdKaVlnS0Y5bElEMGdWUzVwYm5OMFlXNWpaVU52Ykc5eUtTa3NJR1psSUQwOVBTQjJiMmxrSURBZ2ZId2dabVV1WVhSMGNtbGlkWFJsSUNFOVBTQmZaU0I4ZkNCZlpTQW1KaUJtWlM1a1lYUmhJQ0U5UFNCZlpTNWtZWFJoS1NCeVpYUjFjbTRnSVRBN0NpQWdJQ0FnSUNBZ0lDQWdJRXNyS3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd3dVlYUjBjbWxpZFhSbGMwNTFiU0FoUFQwZ1N5QjhmQ0JzTG1sdVpHVjRJQ0U5UFNCSU93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdkaWhWTENCNkxDQnhMQ0JJS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzVsSUQwZ2UzMHNJRmNnUFNCNkxtRjBkSEpwWW5WMFpYTXNJRXNnUFNBd0xDQkVJRDBnY1M1blpYUkJkSFJ5YVdKMWRHVnpLQ2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JISUdsdUlFUXBhV1lnS0VSYlIxMHViRzlqWVhScGIyNGdQajBnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptVWdQU0JYVzBkZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtWlNBOVBUMGdkbTlwWkNBd0lDWW1JQ2hISUQwOVBTQWlhVzV6ZEdGdVkyVk5ZWFJ5YVhnaUlDWW1JRlV1YVc1emRHRnVZMlZOWVhSeWFYZ2dKaVlnS0dabElEMGdWUzVwYm5OMFlXNWpaVTFoZEhKcGVDa3NJRWNnUFQwOUlDSnBibk4wWVc1alpVTnZiRzl5SWlBbUppQlZMbWx1YzNSaGJtTmxRMjlzYjNJZ0ppWWdLR1psSUQwZ1ZTNXBibk4wWVc1alpVTnZiRzl5S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCZlpTQTlJSHQ5T3dvZ0lDQWdJQ0FnSUNBZ0lDQmZaUzVoZEhSeWFXSjFkR1VnUFNCbVpTd2dabVVnSmlZZ1ptVXVaR0YwWVNBbUppQW9YMlV1WkdGMFlTQTlJR1psTG1SaGRHRXBMQ0J1WlZ0SFhTQTlJRjlsTENCTEt5czdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3d1WVhSMGNtbGlkWFJsY3lBOUlHNWxMQ0JzTG1GMGRISnBZblYwWlhOT2RXMGdQU0JMTENCc0xtbHVaR1Y0SUQwZ1NEc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJSGdvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRlVnUFNCc0xtNWxkMEYwZEhKcFluVjBaWE03Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0I2SUQwZ01Dd2djU0E5SUZVdWJHVnVaM1JvT3lCNklEd2djVHNnZWlzcktWVmJlbDBnUFNBd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdlU2hWS1NCN0NpQWdJQ0FnSUNBZ1lpaFZMQ0F3S1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHSW9WU3dnZWlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J4SUQwZ2JDNXVaWGRCZEhSeWFXSjFkR1Z6TENCSUlEMGdiQzVsYm1GaWJHVmtRWFIwY21saWRYUmxjeXdnYm1VZ1BTQnNMbUYwZEhKcFluVjBaVVJwZG1semIzSnpPd29nSUNBZ0lDQWdJSEZiVlYwZ1BTQXhMQ0JJVzFWZElEMDlQU0F3SUNZbUlDaHpNUzVsYm1GaWJHVldaWEowWlhoQmRIUnlhV0pCY25KaGVTaFZLU3dnU0Z0VlhTQTlJREVwTENCdVpWdFZYU0FoUFQwZ2VpQW1KaUFvS0c0dWFYTlhaV0pIVERJZ1B5QnpNU0E2SUdVdVoyVjBLQ0pCVGtkTVJWOXBibk4wWVc1alpXUmZZWEp5WVhseklpa3BXMjR1YVhOWFpXSkhURElnUHlBaWRtVnlkR1Y0UVhSMGNtbGlSR2wyYVhOdmNpSWdPaUFpZG1WeWRHVjRRWFIwY21saVJHbDJhWE52Y2tGT1IweEZJbDBvVlN3Z2Vpa3NJRzVsVzFWZElEMGdlaWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCM0tDa2dld29nSUNBZ0lDQWdJR3hsZENCVklEMGdiQzV1WlhkQmRIUnlhV0oxZEdWekxDQjZJRDBnYkM1bGJtRmliR1ZrUVhSMGNtbGlkWFJsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhFZ1BTQXdMQ0JJSUQwZ2VpNXNaVzVuZEdnN0lIRWdQQ0JJT3lCeEt5c3BlbHR4WFNBaFBUMGdWVnR4WFNBbUppQW9jekV1WkdsellXSnNaVlpsY25SbGVFRjBkSEpwWWtGeWNtRjVLSEVwTENCNlczRmRJRDBnTUNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlNLRlVzSUhvc0lIRXNJRWdzSUc1bExDQlhMQ0JMS1NCN0NpQWdJQ0FnSUNBZ1N5QTlQVDBnSVRBZ1B5QnpNUzUyWlhKMFpYaEJkSFJ5YVdKSlVHOXBiblJsY2loVkxDQjZMQ0J4TENCdVpTd2dWeWtnT2lCek1TNTJaWEowWlhoQmRIUnlhV0pRYjJsdWRHVnlLRlVzSUhvc0lIRXNJRWdzSUc1bExDQlhLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVrb1ZTd2dlaXdnY1N3Z1NDa2dld29nSUNBZ0lDQWdJR2xtSUNodUxtbHpWMlZpUjB3eUlEMDlQU0FoTVNBbUppQW9WUzVwYzBsdWMzUmhibU5sWkUxbGMyZ2dmSHdnU0M1cGMwbHVjM1JoYm1ObFpFSjFabVpsY2tkbGIyMWxkSEo1S1NBbUppQmxMbWRsZENnaVFVNUhURVZmYVc1emRHRnVZMlZrWDJGeWNtRjVjeUlwSUQwOVBTQnVkV3hzS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZUNncE93b2dJQ0FnSUNBZ0lHeGxkQ0J1WlNBOUlFZ3VZWFIwY21saWRYUmxjeXdnVnlBOUlIRXVaMlYwUVhSMGNtbGlkWFJsY3lncExDQkxJRDBnZWk1a1pXWmhkV3gwUVhSMGNtbGlkWFJsVm1Gc2RXVnpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdSQ0JwYmlCWEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFY2dQU0JYVzBSZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1J5NXNiMk5oZEdsdmJpQStQU0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhR1VnUFNCdVpWdEVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob1pTQTlQVDBnZG05cFpDQXdJQ1ltSUNoRUlEMDlQU0FpYVc1emRHRnVZMlZOWVhSeWFYZ2lJQ1ltSUZVdWFXNXpkR0Z1WTJWTllYUnlhWGdnSmlZZ0tHaGxJRDBnVlM1cGJuTjBZVzVqWlUxaGRISnBlQ2tzSUVRZ1BUMDlJQ0pwYm5OMFlXNWpaVU52Ykc5eUlpQW1KaUJWTG1sdWMzUmhibU5sUTI5c2IzSWdKaVlnS0dobElEMGdWUzVwYm5OMFlXNWpaVU52Ykc5eUtTa3NJR2hsSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptVWdQU0JvWlM1dWIzSnRZV3hwZW1Wa0xDQmZaU0E5SUdobExtbDBaVzFUYVhwbExDQjNaU0E5SUhRdVoyVjBLR2hsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZDJVZ1BUMDlJSFp2YVdRZ01Da2dZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFVmxJRDBnZDJVdVluVm1abVZ5TENCVVpTQTlJSGRsTG5SNWNHVXNJRmxsSUQwZ2QyVXVZbmwwWlhOUVpYSkZiR1Z0Wlc1MExDQnBkQ0E5SUc0dWFYTlhaV0pIVERJZ1BUMDlJQ0V3SUNZbUlDaFVaU0E5UFQwZ2N6RXVTVTVVSUh4OElGUmxJRDA5UFNCek1TNVZUbE5KUjA1RlJGOUpUbFFnZkh3Z2FHVXVaM0IxVkhsd1pTQTlQVDBnWkdRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob1pTNXBjMGx1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRFpTQTlJR2hsTG1SaGRHRXNJRXdnUFNCRFpTNXpkSEpwWkdVc0lHOWxJRDBnYUdVdWIyWm1jMlYwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1EyVXVhWE5KYm5OMFlXNWpaV1JKYm5SbGNteGxZWFpsWkVKMVptWmxjaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCWUlEMGdNRHNnV0NBOElFY3ViRzlqWVhScGIyNVRhWHBsT3lCWUt5c3BZaWhITG14dlkyRjBhVzl1SUNzZ1dDd2dRMlV1YldWemFGQmxja0YwZEhKcFluVjBaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVkxtbHpTVzV6ZEdGdVkyVmtUV1Z6YUNBaFBUMGdJVEFnSmlZZ1NDNWZiV0Y0U1c1emRHRnVZMlZEYjNWdWRDQTlQVDBnZG05cFpDQXdJQ1ltSUNoSUxsOXRZWGhKYm5OMFlXNWpaVU52ZFc1MElEMGdRMlV1YldWemFGQmxja0YwZEhKcFluVjBaU0FxSUVObExtTnZkVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR1p2Y2loc1pYUWdXQ0E5SURBN0lGZ2dQQ0JITG14dlkyRjBhVzl1VTJsNlpUc2dXQ3NyS1hrb1J5NXNiMk5oZEdsdmJpQXJJRmdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TVM1aWFXNWtRblZtWm1WeUtITXhMa0ZTVWtGWlgwSlZSa1pGVWl3Z1JXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGZ2dQU0F3T3lCWUlEd2dSeTVzYjJOaGRHbHZibE5wZW1VN0lGZ3JLeWxTS0VjdWJHOWpZWFJwYjI0Z0t5QllMQ0JmWlNBdklFY3ViRzlqWVhScGIyNVRhWHBsTENCVVpTd2dabVVzSUV3Z0tpQlpaU3dnS0c5bElDc2dYMlVnTHlCSExteHZZMkYwYVc5dVUybDZaU0FxSUZncElDb2dXV1VzSUdsMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUdVdWFYTkpibk4wWVc1alpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdRMlVnUFNBd095QkRaU0E4SUVjdWJHOWpZWFJwYjI1VGFYcGxPeUJEWlNzcktXSW9SeTVzYjJOaGRHbHZiaUFySUVObExDQm9aUzV0WlhOb1VHVnlRWFIwY21saWRYUmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZVdWFYTkpibk4wWVc1alpXUk5aWE5vSUNFOVBTQWhNQ0FtSmlCSUxsOXRZWGhKYm5OMFlXNWpaVU52ZFc1MElEMDlQU0IyYjJsa0lEQWdKaVlnS0VndVgyMWhlRWx1YzNSaGJtTmxRMjkxYm5RZ1BTQm9aUzV0WlhOb1VHVnlRWFIwY21saWRYUmxJQ29nYUdVdVkyOTFiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdabTl5S0d4bGRDQkRaU0E5SURBN0lFTmxJRHdnUnk1c2IyTmhkR2x2YmxOcGVtVTdJRU5sS3lzcGVTaEhMbXh2WTJGMGFXOXVJQ3NnUTJVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNWlhVzVrUW5WbVptVnlLSE14TGtGU1VrRlpYMEpWUmtaRlVpd2dSV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRU5sSUQwZ01Ec2dRMlVnUENCSExteHZZMkYwYVc5dVUybDZaVHNnUTJVckt5bFNLRWN1Ykc5allYUnBiMjRnS3lCRFpTd2dYMlVnTHlCSExteHZZMkYwYVc5dVUybDZaU3dnVkdVc0lHWmxMQ0JmWlNBcUlGbGxMQ0JmWlNBdklFY3ViRzlqWVhScGIyNVRhWHBsSUNvZ1EyVWdLaUJaWlN3Z2FYUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1N5QWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1psSUQwZ1MxdEVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abVVnSVQwOUlIWnZhV1FnTUNrZ2MzZHBkR05vS0dabExteGxibWQwYUNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNeExuWmxjblJsZUVGMGRISnBZakptZGloSExteHZZMkYwYVc5dUxDQm1aU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBek9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1ZG1WeWRHVjRRWFIwY21saU0yWjJLRWN1Ykc5allYUnBiMjRzSUdabEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNTJaWEowWlhoQmRIUnlhV0kwWm5Zb1J5NXNiMk5oZEdsdmJpd2dabVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TVM1MlpYSjBaWGhCZEhSeWFXSXhabllvUnk1c2IyTmhkR2x2Yml3Z1ptVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IzS0NrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQk5LQ2tnZXdvZ0lDQWdJQ0FnSUZrb0tUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGVWdhVzRnYnlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNklEMGdiMXRWWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnhJR2x1SUhvcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRWdnUFNCNlczRmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnVaU0JwYmlCSUtXMG9TRnR1WlYwdWIySnFaV04wS1N3Z1pHVnNaWFJsSUVoYmJtVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElIcGJjVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRzliVlYwN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdWQ2hWS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLRzliVlM1cFpGMGdQVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJR3hsZENCNklEMGdiMXRWTG1sa1hUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIRWdhVzRnZWlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSUlEMGdlbHR4WFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnVaU0JwYmlCSUtXMG9TRnR1WlYwdWIySnFaV04wS1N3Z1pHVnNaWFJsSUVoYmJtVmRPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnZWx0eFhUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaR1ZzWlhSbElHOWJWUzVwWkYwN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlBLRlVwSUhzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhvZ2FXNGdieWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J4SUQwZ2IxdDZYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEZiVlM1cFpGMGdQVDA5SUhadmFXUWdNQ2tnWTI5dWRHbHVkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JJSUQwZ2NWdFZMbWxrWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnVaU0JwYmlCSUtXMG9TRnR1WlYwdWIySnFaV04wS1N3Z1pHVnNaWFJsSUVoYmJtVmRPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnY1Z0VkxtbGtYVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCWktDa2dld29nSUNBZ0lDQWdJQ1FvS1N3Z2FDQTlJQ0V3TENCc0lDRTlQU0JqSUNZbUlDaHNJRDBnWXl3Z1ppaHNMbTlpYW1WamRDa3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnSkNncElIc0tJQ0FnSUNBZ0lDQmpMbWRsYjIxbGRISjVJRDBnYm5Wc2JDd2dZeTV3Y205bmNtRnRJRDBnYm5Wc2JDd2dZeTUzYVhKbFpuSmhiV1VnUFNBaE1Uc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdjMlYwZFhBNklIVXNDaUFnSUNBZ0lDQWdjbVZ6WlhRNklGa3NDaUFnSUNBZ0lDQWdjbVZ6WlhSRVpXWmhkV3gwVTNSaGRHVTZJQ1FzQ2lBZ0lDQWdJQ0FnWkdsemNHOXpaVG9nVFN3S0lDQWdJQ0FnSUNCeVpXeGxZWE5sVTNSaGRHVnpUMlpIWlc5dFpYUnllVG9nVkN3S0lDQWdJQ0FnSUNCeVpXeGxZWE5sVTNSaGRHVnpUMlpRY205bmNtRnRPaUJQTEFvZ0lDQWdJQ0FnSUdsdWFYUkJkSFJ5YVdKMWRHVnpPaUI0TEFvZ0lDQWdJQ0FnSUdWdVlXSnNaVUYwZEhKcFluVjBaVG9nZVN3S0lDQWdJQ0FnSUNCa2FYTmhZbXhsVlc1MWMyVmtRWFIwY21saWRYUmxjem9nZHdvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCcFh5aHpNU3dnWlN3Z2RDd2diaWtnZXdvZ0lDQWdiR1YwSUdrZ1BTQnVMbWx6VjJWaVIwd3lMQ0J5T3dvZ0lDQWdablZ1WTNScGIyNGdZU2hzS1NCN0NpQWdJQ0FnSUNBZ2NpQTlJR3c3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdktHd3NJR2dwSUhzS0lDQWdJQ0FnSUNCek1TNWtjbUYzUVhKeVlYbHpLSElzSUd3c0lHZ3BMQ0IwTG5Wd1pHRjBaU2hvTENCeUxDQXhLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdNb2JDd2dhQ3dnZFNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gxSUQwOVBTQXdLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdiR1YwSUdRc0lHWTdDaUFnSUNBZ0lDQWdhV1lnS0drcElHUWdQU0J6TVN3Z1ppQTlJQ0prY21GM1FYSnlZWGx6U1c1emRHRnVZMlZrSWpzS0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoa0lEMGdaUzVuWlhRb0lrRk9SMHhGWDJsdWMzUmhibU5sWkY5aGNuSmhlWE1pS1N3Z1ppQTlJQ0prY21GM1FYSnlZWGx6U1c1emRHRnVZMlZrUVU1SFRFVWlMQ0JrSUQwOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1RblZtWm1WeVVtVnVaR1Z5WlhJNklIVnphVzVuSUZSSVVrVkZMa2x1YzNSaGJtTmxaRUoxWm1abGNrZGxiMjFsZEhKNUlHSjFkQ0JvWVhKa2QyRnlaU0JrYjJWeklHNXZkQ0J6ZFhCd2IzSjBJR1Y0ZEdWdWMybHZiaUJCVGtkTVJWOXBibk4wWVc1alpXUmZZWEp5WVhsekxpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdSYlpsMG9jaXdnYkN3Z2FDd2dkU2tzSUhRdWRYQmtZWFJsS0dnc0lISXNJSFVwT3dvZ0lDQWdmUW9nSUNBZ2RHaHBjeTV6WlhSTmIyUmxJRDBnWVN3Z2RHaHBjeTV5Wlc1a1pYSWdQU0J2TENCMGFHbHpMbkpsYm1SbGNrbHVjM1JoYm1ObGN5QTlJR003Q24wS1puVnVZM1JwYjI0Z2MxOG9jekVzSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1T3dvZ0lDQWdablZ1WTNScGIyNGdhU2dwSUhzS0lDQWdJQ0FnSUNCcFppQW9iaUFoUFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnYmpzS0lDQWdJQ0FnSUNCcFppQW9aUzVvWVhNb0lrVllWRjkwWlhoMGRYSmxYMlpwYkhSbGNsOWhibWx6YjNSeWIzQnBZeUlwSUQwOVBTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVWlBOUlHVXVaMlYwS0NKRldGUmZkR1Y0ZEhWeVpWOW1hV3gwWlhKZllXNXBjMjkwY205d2FXTWlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpQTlJSE14TG1kbGRGQmhjbUZ0WlhSbGNpaFNMazFCV0Y5VVJWaFVWVkpGWDAxQldGOUJUa2xUVDFSU1QxQlpYMFZZVkNrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUc0Z1BTQXdPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnY2loU0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0ZJZ1BUMDlJQ0pvYVdkb2NDSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE14TG1kbGRGTm9ZV1JsY2xCeVpXTnBjMmx2YmtadmNtMWhkQ2h6TVM1V1JWSlVSVmhmVTBoQlJFVlNMQ0J6TVM1SVNVZElYMFpNVDBGVUtTNXdjbVZqYVhOcGIyNGdQaUF3SUNZbUlITXhMbWRsZEZOb1lXUmxjbEJ5WldOcGMybHZia1p2Y20xaGRDaHpNUzVHVWtGSFRVVk9WRjlUU0VGRVJWSXNJSE14TGtoSlIwaGZSa3hQUVZRcExuQnlaV05wYzJsdmJpQStJREFwSUhKbGRIVnliaUFpYUdsbmFIQWlPd29nSUNBZ0lDQWdJQ0FnSUNCU0lEMGdJbTFsWkdsMWJYQWlPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVaUE5UFQwZ0ltMWxaR2wxYlhBaUlDWW1JSE14TG1kbGRGTm9ZV1JsY2xCeVpXTnBjMmx2YmtadmNtMWhkQ2h6TVM1V1JWSlVSVmhmVTBoQlJFVlNMQ0J6TVM1TlJVUkpWVTFmUmt4UFFWUXBMbkJ5WldOcGMybHZiaUErSURBZ0ppWWdjekV1WjJWMFUyaGhaR1Z5VUhKbFkybHphVzl1Um05eWJXRjBLSE14TGtaU1FVZE5SVTVVWDFOSVFVUkZVaXdnY3pFdVRVVkVTVlZOWDBaTVQwRlVLUzV3Y21WamFYTnBiMjRnUGlBd0lEOGdJbTFsWkdsMWJYQWlJRG9nSW14dmQzQWlPd29nSUNBZ2ZRb2dJQ0FnYkdWMElHRWdQU0IwZVhCbGIyWWdWMlZpUjB3eVVtVnVaR1Z5YVc1blEyOXVkR1Y0ZENBOElDSjFJaUFtSmlCek1TNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbElEMDlQU0FpVjJWaVIwd3lVbVZ1WkdWeWFXNW5RMjl1ZEdWNGRDSXNJRzhnUFNCMExuQnlaV05wYzJsdmJpQWhQVDBnZG05cFpDQXdJRDhnZEM1d2NtVmphWE5wYjI0Z09pQWlhR2xuYUhBaUxDQmpJRDBnY2lodktUc0tJQ0FnSUdNZ0lUMDlJRzhnSmlZZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvaUxDQnZMQ0FpYm05MElITjFjSEJ2Y25SbFpDd2dkWE5wYm1jaUxDQmpMQ0FpYVc1emRHVmhaQzRpS1N3Z2J5QTlJR01wT3dvZ0lDQWdiR1YwSUd3Z1BTQmhJSHg4SUdVdWFHRnpLQ0pYUlVKSFRGOWtjbUYzWDJKMVptWmxjbk1pS1N3Z2FDQTlJSFF1Ykc5bllYSnBkR2h0YVdORVpYQjBhRUoxWm1abGNpQTlQVDBnSVRBc0lIVWdQU0J6TVM1blpYUlFZWEpoYldWMFpYSW9jekV1VFVGWVgxUkZXRlJWVWtWZlNVMUJSMFZmVlU1SlZGTXBMQ0JrSUQwZ2N6RXVaMlYwVUdGeVlXMWxkR1Z5S0hNeExrMUJXRjlXUlZKVVJWaGZWRVZZVkZWU1JWOUpUVUZIUlY5VlRrbFVVeWtzSUdZZ1BTQnpNUzVuWlhSUVlYSmhiV1YwWlhJb2N6RXVUVUZZWDFSRldGUlZVa1ZmVTBsYVJTa3NJRzBnUFNCek1TNW5aWFJRWVhKaGJXVjBaWElvY3pFdVRVRllYME5WUWtWZlRVRlFYMVJGV0ZSVlVrVmZVMGxhUlNrc0lGOGdQU0J6TVM1blpYUlFZWEpoYldWMFpYSW9jekV1VFVGWVgxWkZVbFJGV0Y5QlZGUlNTVUpUS1N3Z1p5QTlJSE14TG1kbGRGQmhjbUZ0WlhSbGNpaHpNUzVOUVZoZlZrVlNWRVZZWDFWT1NVWlBVazFmVmtWRFZFOVNVeWtzSUhBZ1BTQnpNUzVuWlhSUVlYSmhiV1YwWlhJb2N6RXVUVUZZWDFaQlVsbEpUa2RmVmtWRFZFOVNVeWtzSUhZZ1BTQnpNUzVuWlhSUVlYSmhiV1YwWlhJb2N6RXVUVUZZWDBaU1FVZE5SVTVVWDFWT1NVWlBVazFmVmtWRFZFOVNVeWtzSUhnZ1BTQmtJRDRnTUN3Z2VTQTlJR0VnZkh3Z1pTNW9ZWE1vSWs5RlUxOTBaWGgwZFhKbFgyWnNiMkYwSWlrc0lHSWdQU0I0SUNZbUlIa3NJSGNnUFNCaElEOGdjekV1WjJWMFVHRnlZVzFsZEdWeUtITXhMazFCV0Y5VFFVMVFURVZUS1NBNklEQTdDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUdselYyVmlSMHd5T2lCaExBb2dJQ0FnSUNBZ0lHUnlZWGRDZFdabVpYSnpPaUJzTEFvZ0lDQWdJQ0FnSUdkbGRFMWhlRUZ1YVhOdmRISnZjSGs2SUdrc0NpQWdJQ0FnSUNBZ1oyVjBUV0Y0VUhKbFkybHphVzl1T2lCeUxBb2dJQ0FnSUNBZ0lIQnlaV05wYzJsdmJqb2dieXdLSUNBZ0lDQWdJQ0JzYjJkaGNtbDBhRzFwWTBSbGNIUm9RblZtWm1WeU9pQm9MQW9nSUNBZ0lDQWdJRzFoZUZSbGVIUjFjbVZ6T2lCMUxBb2dJQ0FnSUNBZ0lHMWhlRlpsY25SbGVGUmxlSFIxY21Wek9pQmtMQW9nSUNBZ0lDQWdJRzFoZUZSbGVIUjFjbVZUYVhwbE9pQm1MQW9nSUNBZ0lDQWdJRzFoZUVOMVltVnRZWEJUYVhwbE9pQnRMQW9nSUNBZ0lDQWdJRzFoZUVGMGRISnBZblYwWlhNNklGOHNDaUFnSUNBZ0lDQWdiV0Y0Vm1WeWRHVjRWVzVwWm05eWJYTTZJR2NzQ2lBZ0lDQWdJQ0FnYldGNFZtRnllV2x1WjNNNklIQXNDaUFnSUNBZ0lDQWdiV0Y0Um5KaFoyMWxiblJWYm1sbWIzSnRjem9nZGl3S0lDQWdJQ0FnSUNCMlpYSjBaWGhVWlhoMGRYSmxjem9nZUN3S0lDQWdJQ0FnSUNCbWJHOWhkRVp5WVdkdFpXNTBWR1Y0ZEhWeVpYTTZJSGtzQ2lBZ0lDQWdJQ0FnWm14dllYUldaWEowWlhoVVpYaDBkWEpsY3pvZ1lpd0tJQ0FnSUNBZ0lDQnRZWGhUWVcxd2JHVnpPaUIzQ2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUhKZktITXhLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlIUm9hWE1zSUhRZ1BTQnVkV3hzTENCdUlEMGdNQ3dnYVNBOUlDRXhMQ0J5SUQwZ0lURXNJR0VnUFNCdVpYY2diVzRzSUc4Z1BTQnVaWGNnU0dVc0lHTWdQU0I3Q2lBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3c0NpQWdJQ0FnSUNBZ2JtVmxaSE5WY0dSaGRHVTZJQ0V4Q2lBZ0lDQjlPd29nSUNBZ2RHaHBjeTUxYm1sbWIzSnRJRDBnWXl3Z2RHaHBjeTV1ZFcxUWJHRnVaWE1nUFNBd0xDQjBhR2x6TG01MWJVbHVkR1Z5YzJWamRHbHZiaUE5SURBc0lIUm9hWE11YVc1cGRDQTlJR1oxYm1OMGFXOXVLSFVzSUdRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlIVXViR1Z1WjNSb0lDRTlQU0F3SUh4OElHUWdmSHdnYmlBaFBUMGdNQ0I4ZkNCcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcElEMGdaQ3dnYmlBOUlIVXViR1Z1WjNSb0xDQm1Pd29nSUNBZ2ZTd2dkR2hwY3k1aVpXZHBibE5vWVdSdmQzTWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCeUlEMGdJVEFzSUdnb2JuVnNiQ2s3Q2lBZ0lDQjlMQ0IwYUdsekxtVnVaRk5vWVdSdmQzTWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCeUlEMGdJVEU3Q2lBZ0lDQjlMQ0IwYUdsekxuTmxkRWRzYjJKaGJGTjBZWFJsSUQwZ1puVnVZM1JwYjI0b2RTd2daQ2tnZXdvZ0lDQWdJQ0FnSUhRZ1BTQm9LSFVzSUdRc0lEQXBPd29nSUNBZ2ZTd2dkR2hwY3k1elpYUlRkR0YwWlNBOUlHWjFibU4wYVc5dUtIVXNJR1FzSUdZcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYlNBOUlIVXVZMnhwY0hCcGJtZFFiR0Z1WlhNc0lGOGdQU0IxTG1Oc2FYQkpiblJsY25ObFkzUnBiMjRzSUdjZ1BTQjFMbU5zYVhCVGFHRmtiM2R6TENCd0lEMGdjekV1WjJWMEtIVXBPd29nSUNBZ0lDQWdJR2xtSUNnaGFTQjhmQ0J0SUQwOVBTQnVkV3hzSUh4OElHMHViR1Z1WjNSb0lEMDlQU0F3SUh4OElISWdKaVlnSVdjcElISWdQeUJvS0c1MWJHd3BJRG9nYkNncE93b2dJQ0FnSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZGlBOUlISWdQeUF3SURvZ2Jpd2dlQ0E5SUhZZ0tpQTBMQ0I1SUQwZ2NDNWpiR2x3Y0dsdVoxTjBZWFJsSUh4OElHNTFiR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTXVkbUZzZFdVZ1BTQjVMQ0I1SUQwZ2FDaHRMQ0JrTENCNExDQm1LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaUlEMGdNRHNnWWlBaFBUMGdlRHNnS3l0aUtYbGJZbDBnUFNCMFcySmRPd29nSUNBZ0lDQWdJQ0FnSUNCd0xtTnNhWEJ3YVc1blUzUmhkR1VnUFNCNUxDQjBhR2x6TG01MWJVbHVkR1Z5YzJWamRHbHZiaUE5SUY4Z1B5QjBhR2x6TG01MWJWQnNZVzVsY3lBNklEQXNJSFJvYVhNdWJuVnRVR3hoYm1WeklDczlJSFk3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmVHNLSUNBZ0lHWjFibU4wYVc5dUlHd29LU0I3Q2lBZ0lDQWdJQ0FnWXk1MllXeDFaU0FoUFQwZ2RDQW1KaUFvWXk1MllXeDFaU0E5SUhRc0lHTXVibVZsWkhOVmNHUmhkR1VnUFNCdUlENGdNQ2tzSUdVdWJuVnRVR3hoYm1WeklEMGdiaXdnWlM1dWRXMUpiblJsY25ObFkzUnBiMjRnUFNBd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhQ2gxTENCa0xDQm1MQ0J0S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCMUlDRTlQU0J1ZFd4c0lEOGdkUzVzWlc1bmRHZ2dPaUF3TENCbklEMGdiblZzYkRzS0lDQWdJQ0FnSUNCcFppQW9YeUFoUFQwZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9aeUE5SUdNdWRtRnNkV1VzSUcwZ0lUMDlJQ0V3SUh4OElHY2dQVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd0lEMGdaaUFySUY4Z0tpQTBMQ0IySUQwZ1pDNXRZWFJ5YVhoWGIzSnNaRWx1ZG1WeWMyVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbWRsZEU1dmNtMWhiRTFoZEhKcGVDaDJLU3dnS0djZ1BUMDlJRzUxYkd3Z2ZId2daeTVzWlc1bmRHZ2dQQ0J3S1NBbUppQW9aeUE5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvY0NrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCNElEMGdNQ3dnZVNBOUlHWTdJSGdnSVQwOUlGODdJQ3NyZUN3Z2VTQXJQU0EwS1dFdVkyOXdlU2gxVzNoZEtTNWhjSEJzZVUxaGRISnBlRFFvZGl3Z2J5a3NJR0V1Ym05eWJXRnNMblJ2UVhKeVlYa29aeXdnZVNrc0lHZGJlU0FySUROZElEMGdZUzVqYjI1emRHRnVkRHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JqTG5aaGJIVmxJRDBnWnl3Z1l5NXVaV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXVkVzFRYkdGdVpYTWdQU0JmTENCbExtNTFiVWx1ZEdWeWMyVmpkR2x2YmlBOUlEQXNJR2M3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnWVY4b2N6RXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ2JtVjNJRmRsWVd0TllYQTdDaUFnSUNCbWRXNWpkR2x2YmlCMEtHRXNJRzhwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYnlBOVBUMGdTWElnUHlCaExtMWhjSEJwYm1jZ1BTQjZiaUE2SUc4Z1BUMDlJRlZ5SUNZbUlDaGhMbTFoY0hCcGJtY2dQU0JqYVNrc0lHRTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ1S0dFcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWVNBbUppQmhMbWx6VkdWNGRIVnlaU0FtSmlCaExtbHpVbVZ1WkdWeVZHRnlaMlYwVkdWNGRIVnlaU0E5UFQwZ0lURXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCaExtMWhjSEJwYm1jN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodklEMDlQU0JKY2lCOGZDQnZJRDA5UFNCVmNpa2dhV1lnS0dVdWFHRnpLR0VwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUdVdVoyVjBLR0VwTG5SbGVIUjFjbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ2hqTENCaExtMWhjSEJwYm1jcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdNZ1BTQmhMbWx0WVdkbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR01nSmlZZ1l5NW9aV2xuYUhRZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdVpYY2dlRzhvWXk1b1pXbG5hSFFnTHlBeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiQzVtY205dFJYRjFhWEpsWTNSaGJtZDFiR0Z5VkdWNGRIVnlaU2h6TVN3Z1lTa3NJR1V1YzJWMEtHRXNJR3dwTENCaExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltUnBjM0J2YzJVaUxDQnBLU3dnZENoc0xuUmxlSFIxY21Vc0lHRXViV0Z3Y0dsdVp5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2NtVjBkWEp1SUc1MWJHdzdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnBLR0VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUdFdWRHRnlaMlYwT3dvZ0lDQWdJQ0FnSUc4dWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2laR2x6Y0c5elpTSXNJR2twT3dvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnWlM1blpYUW9ieWs3Q2lBZ0lDQWdJQ0FnWXlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hsTG1SbGJHVjBaU2h2S1N3Z1l5NWthWE53YjNObEtDa3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnY2lncElIc0tJQ0FnSUNBZ0lDQmxJRDBnYm1WM0lGZGxZV3ROWVhBN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lHZGxkRG9nYml3S0lDQWdJQ0FnSUNCa2FYTndiM05sT2lCeUNpQWdJQ0I5T3dwOUNuWmhjaUJNY3lBOUlHTnNZWE56SUdWNGRHVnVaSE1nUTNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJQzB4TENCMElEMGdNU3dnYmlBOUlERXNJR2tnUFNBdE1Td2djaUE5SUM0eExDQmhJRDBnTW1VektYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selQzSjBhRzluY21Gd2FHbGpRMkZ0WlhKaElEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRWlMQ0IwYUdsekxucHZiMjBnUFNBeExDQjBhR2x6TG5acFpYY2dQU0J1ZFd4c0xDQjBhR2x6TG14bFpuUWdQU0JsTENCMGFHbHpMbkpwWjJoMElEMGdkQ3dnZEdocGN5NTBiM0FnUFNCdUxDQjBhR2x6TG1KdmRIUnZiU0E5SUdrc0lIUm9hWE11Ym1WaGNpQTlJSElzSUhSb2FYTXVabUZ5SUQwZ1lTd2dkR2hwY3k1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRLQ2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxMQ0IwS1N3Z2RHaHBjeTVzWldaMElEMGdaUzVzWldaMExDQjBhR2x6TG5KcFoyaDBJRDBnWlM1eWFXZG9kQ3dnZEdocGN5NTBiM0FnUFNCbExuUnZjQ3dnZEdocGN5NWliM1IwYjIwZ1BTQmxMbUp2ZEhSdmJTd2dkR2hwY3k1dVpXRnlJRDBnWlM1dVpXRnlMQ0IwYUdsekxtWmhjaUE5SUdVdVptRnlMQ0IwYUdsekxucHZiMjBnUFNCbExucHZiMjBzSUhSb2FYTXVkbWxsZHlBOUlHVXVkbWxsZHlBOVBUMGdiblZzYkNBL0lHNTFiR3dnT2lCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExuWnBaWGNwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZtbGxkMDltWm5ObGRDaGxMQ0IwTENCdUxDQnBMQ0J5TENCaEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1MmFXVjNJRDA5UFNCdWRXeHNJQ1ltSUNoMGFHbHpMblpwWlhjZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdWdVlXSnNaV1E2SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JtZFd4c1YybGtkR2c2SURFc0NpQWdJQ0FnSUNBZ0lDQWdJR1oxYkd4SVpXbG5hSFE2SURFc0NpQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRGZzZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEZrNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUF4TEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklERUtJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NTJhV1YzTG1WdVlXSnNaV1FnUFNBaE1Dd2dkR2hwY3k1MmFXVjNMbVoxYkd4WGFXUjBhQ0E5SUdVc0lIUm9hWE11ZG1sbGR5NW1kV3hzU0dWcFoyaDBJRDBnZEN3Z2RHaHBjeTUyYVdWM0xtOW1abk5sZEZnZ1BTQnVMQ0IwYUdsekxuWnBaWGN1YjJabWMyVjBXU0E5SUdrc0lIUm9hWE11ZG1sbGR5NTNhV1IwYUNBOUlISXNJSFJvYVhNdWRtbGxkeTVvWldsbmFIUWdQU0JoTENCMGFHbHpMblZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tUc0tJQ0FnSUgwS0lDQWdJR05zWldGeVZtbGxkMDltWm5ObGRDZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuWnBaWGNnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11ZG1sbGR5NWxibUZpYkdWa0lEMGdJVEVwTENCMGFHbHpMblZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQW9kR2hwY3k1eWFXZG9kQ0F0SUhSb2FYTXViR1ZtZENrZ0x5QW9NaUFxSUhSb2FYTXVlbTl2YlNrc0lIUWdQU0FvZEdocGN5NTBiM0FnTFNCMGFHbHpMbUp2ZEhSdmJTa2dMeUFvTWlBcUlIUm9hWE11ZW05dmJTa3NJRzRnUFNBb2RHaHBjeTV5YVdkb2RDQXJJSFJvYVhNdWJHVm1kQ2tnTHlBeUxDQnBJRDBnS0hSb2FYTXVkRzl3SUNzZ2RHaHBjeTVpYjNSMGIyMHBJQzhnTWl3Z2NpQTlJRzRnTFNCbExDQmhJRDBnYmlBcklHVXNJRzhnUFNCcElDc2dkQ3dnWXlBOUlHa2dMU0IwT3dvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5acFpYY2dJVDA5SUc1MWJHd2dKaVlnZEdocGN5NTJhV1YzTG1WdVlXSnNaV1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQW9kR2hwY3k1eWFXZG9kQ0F0SUhSb2FYTXViR1ZtZENrZ0x5QjBhR2x6TG5acFpYY3VablZzYkZkcFpIUm9JQzhnZEdocGN5NTZiMjl0TENCb0lEMGdLSFJvYVhNdWRHOXdJQzBnZEdocGN5NWliM1IwYjIwcElDOGdkR2hwY3k1MmFXVjNMbVoxYkd4SVpXbG5hSFFnTHlCMGFHbHpMbnB2YjIwN0NpQWdJQ0FnSUNBZ0lDQWdJSElnS3owZ2JDQXFJSFJvYVhNdWRtbGxkeTV2Wm1aelpYUllMQ0JoSUQwZ2NpQXJJR3dnS2lCMGFHbHpMblpwWlhjdWQybGtkR2dzSUc4Z0xUMGdhQ0FxSUhSb2FYTXVkbWxsZHk1dlptWnpaWFJaTENCaklEMGdieUF0SUdnZ0tpQjBhR2x6TG5acFpYY3VhR1ZwWjJoME93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIycGxZM1JwYjI1TllYUnlhWGd1YldGclpVOXlkR2h2WjNKaGNHaHBZeWh5TENCaExDQnZMQ0JqTENCMGFHbHpMbTVsWVhJc0lIUm9hWE11Wm1GeUxDQjBhR2x6TG1OdmIzSmthVzVoZEdWVGVYTjBaVzBwTENCMGFHbHpMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYaEpiblpsY25ObExtTnZjSGtvZEdocGN5NXdjbTlxWldOMGFXOXVUV0YwY21sNEtTNXBiblpsY25Rb0tUc0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0J6ZFhCbGNpNTBiMHBUVDA0b1pTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUXViMkpxWldOMExucHZiMjBnUFNCMGFHbHpMbnB2YjIwc0lIUXViMkpxWldOMExteGxablFnUFNCMGFHbHpMbXhsWm5Rc0lIUXViMkpxWldOMExuSnBaMmgwSUQwZ2RHaHBjeTV5YVdkb2RDd2dkQzV2WW1wbFkzUXVkRzl3SUQwZ2RHaHBjeTUwYjNBc0lIUXViMkpxWldOMExtSnZkSFJ2YlNBOUlIUm9hWE11WW05MGRHOXRMQ0IwTG05aWFtVmpkQzV1WldGeUlEMGdkR2hwY3k1dVpXRnlMQ0IwTG05aWFtVmpkQzVtWVhJZ1BTQjBhR2x6TG1aaGNpd2dkR2hwY3k1MmFXVjNJQ0U5UFNCdWRXeHNJQ1ltSUNoMExtOWlhbVZqZEM1MmFXVjNJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnZEdocGN5NTJhV1YzS1Nrc0lIUTdDaUFnSUNCOUNuMHNJRWhwSUQwZ05Dd2dhR2dnUFNCYkNpQWdJQ0F1TVRJMUxBb2dJQ0FnTGpJeE5Td0tJQ0FnSUM0ek5Td0tJQ0FnSUM0ME5EWXNDaUFnSUNBdU5USTJMQW9nSUNBZ0xqVTRNZ3BkTENCbGFTQTlJREl3TENBa1lTQTlJRzVsZHlCTWN5d2dkV2dnUFNCdVpYY2djR1VzSUV0aElEMGdiblZzYkN3Z2FtNGdQU0FvTVNBcklFMWhkR2d1YzNGeWRDZzFLU2tnTHlBeUxDQk1hU0E5SURFZ0x5QnFiaXdnWkdnZ1BTQmJDaUFnSUNCdVpYY2dRU2d4TENBeExDQXhLU3dLSUNBZ0lHNWxkeUJCS0MweExDQXhMQ0F4S1N3S0lDQWdJRzVsZHlCQktERXNJREVzSUMweEtTd0tJQ0FnSUc1bGR5QkJLQzB4TENBeExDQXRNU2tzQ2lBZ0lDQnVaWGNnUVNnd0xDQnFiaXdnVEdrcExBb2dJQ0FnYm1WM0lFRW9NQ3dnYW00c0lDMU1hU2tzQ2lBZ0lDQnVaWGNnUVNoTWFTd2dNQ3dnYW00cExBb2dJQ0FnYm1WM0lFRW9MVXhwTENBd0xDQnFiaWtzQ2lBZ0lDQnVaWGNnUVNocWJpd2dUR2tzSURBcExBb2dJQ0FnYm1WM0lFRW9MV3B1TENCTWFTd2dNQ2tLWFN3Z1MzSWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0IwYUdsekxsOXlaVzVrWlhKbGNpQTlJR1VzSUhSb2FYTXVYM0JwYm1kUWIyNW5VbVZ1WkdWeVZHRnlaMlYwSUQwZ2JuVnNiQ3dnZEdocGN5NWZiRzlrVFdGNElEMGdNQ3dnZEdocGN5NWZZM1ZpWlZOcGVtVWdQU0F3TENCMGFHbHpMbDlzYjJSUWJHRnVaWE1nUFNCYlhTd2dkR2hwY3k1ZmMybDZaVXh2WkhNZ1BTQmJYU3dnZEdocGN5NWZjMmxuYldGeklEMGdXMTBzSUhSb2FYTXVYMkpzZFhKTllYUmxjbWxoYkNBOUlHNTFiR3dzSUhSb2FYTXVYMk4xWW1WdFlYQk5ZWFJsY21saGJDQTlJRzUxYkd3c0lIUm9hWE11WDJWeGRXbHlaV04wVFdGMFpYSnBZV3dnUFNCdWRXeHNMQ0IwYUdsekxsOWpiMjF3YVd4bFRXRjBaWEpwWVd3b2RHaHBjeTVmWW14MWNrMWhkR1Z5YVdGc0tUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxVFkyVnVaU2hsTENCMElEMGdNQ3dnYmlBOUlDNHhMQ0JwSUQwZ01UQXdLU0I3Q2lBZ0lDQWdJQ0FnUzJFZ1BTQjBhR2x6TGw5eVpXNWtaWEpsY2k1blpYUlNaVzVrWlhKVVlYSm5aWFFvS1N3Z2RHaHBjeTVmYzJWMFUybDZaU2d5TlRZcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeTVmWVd4c2IyTmhkR1ZVWVhKblpYUnpLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSEl1WkdWd2RHaENkV1ptWlhJZ1BTQWhNQ3dnZEdocGN5NWZjMk5sYm1WVWIwTjFZbVZWVmlobExDQnVMQ0JwTENCeUtTd2dkQ0ErSURBZ0ppWWdkR2hwY3k1ZllteDFjaWh5TENBd0xDQXdMQ0IwS1N3Z2RHaHBjeTVmWVhCd2JIbFFUVkpGVFNoeUtTd2dkR2hwY3k1ZlkyeGxZVzUxY0NoeUtTd2djanNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUZjWFZwY21WamRHRnVaM1ZzWVhJb1pTd2dkQ0E5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpuSnZiVlJsZUhSMWNtVW9aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0UTNWaVpXMWhjQ2hsTENCMElEMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDltY205dFZHVjRkSFZ5WlNobExDQjBLVHNLSUNBZ0lIMEtJQ0FnSUdOdmJYQnBiR1ZEZFdKbGJXRndVMmhoWkdWeUtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgyTjFZbVZ0WVhCTllYUmxjbWxoYkNBOVBUMGdiblZzYkNBbUppQW9kR2hwY3k1ZlkzVmlaVzFoY0UxaGRHVnlhV0ZzSUQwZ2JXZ29LU3dnZEdocGN5NWZZMjl0Y0dsc1pVMWhkR1Z5YVdGc0tIUm9hWE11WDJOMVltVnRZWEJOWVhSbGNtbGhiQ2twT3dvZ0lDQWdmUW9nSUNBZ1kyOXRjR2xzWlVWeGRXbHlaV04wWVc1bmRXeGhjbE5vWVdSbGNpZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxsOWxjWFZwY21WamRFMWhkR1Z5YVdGc0lEMDlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxsOWxjWFZwY21WamRFMWhkR1Z5YVdGc0lEMGdjR2dvS1N3Z2RHaHBjeTVmWTI5dGNHbHNaVTFoZEdWeWFXRnNLSFJvYVhNdVgyVnhkV2x5WldOMFRXRjBaWEpwWVd3cEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZaR2x6Y0c5elpTZ3BMQ0IwYUdsekxsOWpkV0psYldGd1RXRjBaWEpwWVd3Z0lUMDlJRzUxYkd3Z0ppWWdkR2hwY3k1ZlkzVmlaVzFoY0UxaGRHVnlhV0ZzTG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVmWlhGMWFYSmxZM1JOWVhSbGNtbGhiQ0FoUFQwZ2JuVnNiQ0FtSmlCMGFHbHpMbDlsY1hWcGNtVmpkRTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LVHNLSUNBZ0lIMEtJQ0FnSUY5elpYUlRhWHBsS0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyUk5ZWGdnUFNCTllYUm9MbVpzYjI5eUtFMWhkR2d1Ykc5bk1paGxLU2tzSUhSb2FYTXVYMk4xWW1WVGFYcGxJRDBnVFdGMGFDNXdiM2NvTWl3Z2RHaHBjeTVmYkc5a1RXRjRLVHNLSUNBZ0lIMEtJQ0FnSUY5a2FYTndiM05sS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WDJKc2RYSk5ZWFJsY21saGJDQWhQVDBnYm5Wc2JDQW1KaUIwYUdsekxsOWliSFZ5VFdGMFpYSnBZV3d1WkdsemNHOXpaU2dwTENCMGFHbHpMbDl3YVc1blVHOXVaMUpsYm1SbGNsUmhjbWRsZENBaFBUMGdiblZzYkNBbUppQjBhR2x6TGw5d2FXNW5VRzl1WjFKbGJtUmxjbFJoY21kbGRDNWthWE53YjNObEtDazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmxJRDBnTURzZ1pTQThJSFJvYVhNdVgyeHZaRkJzWVc1bGN5NXNaVzVuZEdnN0lHVXJLeWwwYUdsekxsOXNiMlJRYkdGdVpYTmJaVjB1WkdsemNHOXpaU2dwT3dvZ0lDQWdmUW9nSUNBZ1gyTnNaV0Z1ZFhBb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgzSmxibVJsY21WeUxuTmxkRkpsYm1SbGNsUmhjbWRsZENoTFlTa3NJR1V1YzJOcGMzTnZjbFJsYzNRZ1BTQWhNU3dnYkhJb1pTd2dNQ3dnTUN3Z1pTNTNhV1IwYUN3Z1pTNW9aV2xuYUhRcE93b2dJQ0FnZlFvZ0lDQWdYMlp5YjIxVVpYaDBkWEpsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JsTG0xaGNIQnBibWNnUFQwOUlIcHVJSHg4SUdVdWJXRndjR2x1WnlBOVBUMGdZMmtnUHlCMGFHbHpMbDl6WlhSVGFYcGxLR1V1YVcxaFoyVXViR1Z1WjNSb0lEMDlQU0F3SUQ4Z01UWWdPaUJsTG1sdFlXZGxXekJkTG5kcFpIUm9JSHg4SUdVdWFXMWhaMlZiTUYwdWFXMWhaMlV1ZDJsa2RHZ3BJRG9nZEdocGN5NWZjMlYwVTJsNlpTaGxMbWx0WVdkbExuZHBaSFJvSUM4Z05Da3NJRXRoSUQwZ2RHaHBjeTVmY21WdVpHVnlaWEl1WjJWMFVtVnVaR1Z5VkdGeVoyVjBLQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwSUh4OElIUm9hWE11WDJGc2JHOWpZWFJsVkdGeVoyVjBjeWdwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBaWGgwZFhKbFZHOURkV0psVlZZb1pTd2diaWtzSUhSb2FYTXVYMkZ3Y0d4NVVFMVNSVTBvYmlrc0lIUm9hWE11WDJOc1pXRnVkWEFvYmlrc0lHNDdDaUFnSUNCOUNpQWdJQ0JmWVd4c2IyTmhkR1ZVWVhKblpYUnpLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnTXlBcUlFMWhkR2d1YldGNEtIUm9hWE11WDJOMVltVlRhWHBsTENBeE1USXBMQ0IwSUQwZ05DQXFJSFJvYVhNdVgyTjFZbVZUYVhwbExDQnVJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnRZV2RHYVd4MFpYSTZJRzEwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnRhVzVHYVd4MFpYSTZJRzEwTEFvZ0lDQWdJQ0FnSUNBZ0lDQm5aVzVsY21GMFpVMXBjRzFoY0hNNklDRXhMQW9nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJVY3l3S0lDQWdJQ0FnSUNBZ0lDQWdabTl5YldGME9pQlhkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0pUY0dGalpUb2dUVzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvUW5WbVptVnlPaUFoTVFvZ0lDQWdJQ0FnSUgwc0lHa2dQU0JtYUNobExDQjBMQ0J1S1RzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmNHbHVaMUJ2Ym1kU1pXNWtaWEpVWVhKblpYUWdQVDA5SUc1MWJHd2dmSHdnZEdocGN5NWZjR2x1WjFCdmJtZFNaVzVrWlhKVVlYSm5aWFF1ZDJsa2RHZ2dJVDA5SUdVZ2ZId2dkR2hwY3k1ZmNHbHVaMUJ2Ym1kU1pXNWtaWEpVWVhKblpYUXVhR1ZwWjJoMElDRTlQU0IwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzQnBibWRRYjI1blVtVnVaR1Z5VkdGeVoyVjBJQ0U5UFNCdWRXeHNJQ1ltSUhSb2FYTXVYMlJwYzNCdmMyVW9LU3dnZEdocGN5NWZjR2x1WjFCdmJtZFNaVzVrWlhKVVlYSm5aWFFnUFNCbWFDaGxMQ0IwTENCdUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIc2dYMnh2WkUxaGVEb2djaUFnZlNBOUlIUm9hWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDaDdJSE5wZW1WTWIyUnpPaUIwYUdsekxsOXphWHBsVEc5a2N5QXNJR3h2WkZCc1lXNWxjem9nZEdocGN5NWZiRzlrVUd4aGJtVnpJQ3dnYzJsbmJXRnpPaUIwYUdsekxsOXphV2R0WVhNZ0lIMGdQU0J2WHloeUtTa3NJSFJvYVhNdVgySnNkWEpOWVhSbGNtbGhiQ0E5SUdOZktISXNJR1VzSUhRcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2FUc0tJQ0FnSUgwS0lDQWdJRjlqYjIxd2FXeGxUV0YwWlhKcFlXd29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnYm1WM0lFMTBLSFJvYVhNdVgyeHZaRkJzWVc1bGMxc3dYU3dnWlNrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdVpHVnlaWEl1WTI5dGNHbHNaU2gwTENBa1lTazdDaUFnSUNCOUNpQWdJQ0JmYzJObGJtVlViME4xWW1WVlZpaGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0J1WlhjZ2VYUW9PVEFzSURFc0lIUXNJRzRwTENCaklEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNUW9nSUNBZ0lDQWdJRjBzSUd3Z1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVLSUNBZ0lDQWdJQ0JkTENCb0lEMGdkR2hwY3k1ZmNtVnVaR1Z5WlhJc0lIVWdQU0JvTG1GMWRHOURiR1ZoY2l3Z1pDQTlJR2d1ZEc5dVpVMWhjSEJwYm1jN0NpQWdJQ0FnSUNBZ2FDNW5aWFJEYkdWaGNrTnZiRzl5S0hWb0tTd2dhQzUwYjI1bFRXRndjR2x1WnlBOUlFNXVMQ0JvTG1GMWRHOURiR1ZoY2lBOUlDRXhPd29nSUNBZ0lDQWdJR3hsZENCbUlEMGdibVYzSUZOdUtIc0tJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dJbEJOVWtWTkxrSmhZMnRuY205MWJtUWlMQW9nSUNBZ0lDQWdJQ0FnSUNCemFXUmxPaUJHZEN3S0lDQWdJQ0FnSUNBZ0lDQWdaR1Z3ZEdoWGNtbDBaVG9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1ZHVnpkRG9nSVRFS0lDQWdJQ0FnSUNCOUtTd2diU0E5SUc1bGR5Qk5kQ2h1WlhjZ1Nta3NJR1lwTENCZklEMGdJVEVzSUdjZ1BTQmxMbUpoWTJ0bmNtOTFibVE3Q2lBZ0lDQWdJQ0FnWnlBL0lHY3VhWE5EYjJ4dmNpQW1KaUFvWmk1amIyeHZjaTVqYjNCNUtHY3BMQ0JsTG1KaFkydG5jbTkxYm1RZ1BTQnVkV3hzTENCZklEMGdJVEFwSURvZ0tHWXVZMjlzYjNJdVkyOXdlU2gxYUNrc0lGOGdQU0FoTUNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCd0lEMGdNRHNnY0NBOElEWTdJSEFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMklEMGdjQ0FsSURNN0NpQWdJQ0FnSUNBZ0lDQWdJSFlnUFQwOUlEQWdQeUFvYnk1MWNDNXpaWFFvTUN3Z1kxdHdYU3dnTUNrc0lHOHViRzl2YTBGMEtHeGJjRjBzSURBc0lEQXBLU0E2SUhZZ1BUMDlJREVnUHlBb2J5NTFjQzV6WlhRb01Dd2dNQ3dnWTF0d1hTa3NJRzh1Ykc5dmEwRjBLREFzSUd4YmNGMHNJREFwS1NBNklDaHZMblZ3TG5ObGRDZ3dMQ0JqVzNCZExDQXdLU3dnYnk1c2IyOXJRWFFvTUN3Z01Dd2diRnR3WFNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VDQTlJSFJvYVhNdVgyTjFZbVZUYVhwbE93b2dJQ0FnSUNBZ0lDQWdJQ0JzY2locExDQjJJQ29nZUN3Z2NDQStJRElnUHlCNElEb2dNQ3dnZUN3Z2VDa3NJR2d1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLR2twTENCZklDWW1JR2d1Y21WdVpHVnlLRzBzSUc4cExDQm9MbkpsYm1SbGNpaGxMQ0J2S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JTNW5aVzl0WlhSeWVTNWthWE53YjNObEtDa3NJRzB1YldGMFpYSnBZV3d1WkdsemNHOXpaU2dwTENCb0xuUnZibVZOWVhCd2FXNW5JRDBnWkN3Z2FDNWhkWFJ2UTJ4bFlYSWdQU0IxTENCbExtSmhZMnRuY205MWJtUWdQU0JuT3dvZ0lDQWdmUW9nSUNBZ1gzUmxlSFIxY21WVWIwTjFZbVZWVmlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxsOXlaVzVrWlhKbGNpd2dhU0E5SUdVdWJXRndjR2x1WnlBOVBUMGdlbTRnZkh3Z1pTNXRZWEJ3YVc1bklEMDlQU0JqYVRzS0lDQWdJQ0FnSUNCcElEOGdLSFJvYVhNdVgyTjFZbVZ0WVhCTllYUmxjbWxoYkNBOVBUMGdiblZzYkNBbUppQW9kR2hwY3k1ZlkzVmlaVzFoY0UxaGRHVnlhV0ZzSUQwZ2JXZ29LU2tzSUhSb2FYTXVYMk4xWW1WdFlYQk5ZWFJsY21saGJDNTFibWxtYjNKdGN5NW1iR2x3Ulc1MlRXRndMblpoYkhWbElEMGdaUzVwYzFKbGJtUmxjbFJoY21kbGRGUmxlSFIxY21VZ1BUMDlJQ0V4SUQ4Z0xURWdPaUF4S1NBNklIUm9hWE11WDJWeGRXbHlaV04wVFdGMFpYSnBZV3dnUFQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WDJWeGRXbHlaV04wVFdGMFpYSnBZV3dnUFNCd2FDZ3BLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR2tnUHlCMGFHbHpMbDlqZFdKbGJXRndUV0YwWlhKcFlXd2dPaUIwYUdsekxsOWxjWFZwY21WamRFMWhkR1Z5YVdGc0xDQmhJRDBnYm1WM0lFMTBLSFJvYVhNdVgyeHZaRkJzWVc1bGMxc3dYU3dnY2lrc0lHOGdQU0J5TG5WdWFXWnZjbTF6T3dvZ0lDQWdJQ0FnSUc4dVpXNTJUV0Z3TG5aaGJIVmxJRDBnWlRzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUhSb2FYTXVYMk4xWW1WVGFYcGxPd29nSUNBZ0lDQWdJR3h5S0hRc0lEQXNJREFzSURNZ0tpQmpMQ0F5SUNvZ1l5a3NJRzR1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLSFFwTENCdUxuSmxibVJsY2loaExDQWtZU2s3Q2lBZ0lDQjlDaUFnSUNCZllYQndiSGxRVFZKRlRTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOXlaVzVrWlhKbGNpd2diaUE5SUhRdVlYVjBiME5zWldGeU93b2dJQ0FnSUNBZ0lIUXVZWFYwYjBOc1pXRnlJRDBnSVRFN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNVHNnYVNBOElIUm9hWE11WDJ4dlpGQnNZVzVsY3k1c1pXNW5kR2c3SUdrckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnVFdGMGFDNXpjWEowS0hSb2FYTXVYM05wWjIxaGMxdHBYU0FxSUhSb2FYTXVYM05wWjIxaGMxdHBYU0F0SUhSb2FYTXVYM05wWjIxaGMxdHBJQzBnTVYwZ0tpQjBhR2x6TGw5emFXZHRZWE5iYVNBdElERmRLU3dnWVNBOUlHUm9XeWhwSUMwZ01Ta2dKU0JrYUM1c1pXNW5kR2hkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aWJIVnlLR1VzSUdrZ0xTQXhMQ0JwTENCeUxDQmhLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEM1aGRYUnZRMnhsWVhJZ1BTQnVPd29nSUNBZ2ZRb2dJQ0FnWDJKc2RYSW9aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2RHaHBjeTVmY0dsdVoxQnZibWRTWlc1a1pYSlVZWEpuWlhRN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGc1prSnNkWElvWlN3Z1lTd2dkQ3dnYml3Z2FTd2dJbXhoZEdsMGRXUnBibUZzSWl3Z2Npa3NJSFJvYVhNdVgyaGhiR1pDYkhWeUtHRXNJR1VzSUc0c0lHNHNJR2tzSUNKc2IyNW5hWFIxWkdsdVlXd2lMQ0J5S1RzS0lDQWdJSDBLSUNBZ0lGOW9ZV3htUW14MWNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHTWdQU0IwYUdsekxsOXlaVzVrWlhKbGNpd2diQ0E5SUhSb2FYTXVYMkpzZFhKTllYUmxjbWxoYkRzS0lDQWdJQ0FnSUNCaElDRTlQU0FpYkdGMGFYUjFaR2x1WVd3aUlDWW1JR0VnSVQwOUlDSnNiMjVuYVhSMVpHbHVZV3dpSUNZbUlHTnZibk52YkdVdVpYSnliM0lvSW1Kc2RYSWdaR2x5WldOMGFXOXVJRzExYzNRZ1ltVWdaV2wwYUdWeUlHeGhkR2wwZFdScGJtRnNJRzl5SUd4dmJtZHBkSFZrYVc1aGJDRWlLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJRE1zSUhVZ1BTQnVaWGNnVFhRb2RHaHBjeTVmYkc5a1VHeGhibVZ6VzJsZExDQnNLU3dnWkNBOUlHd3VkVzVwWm05eWJYTXNJR1lnUFNCMGFHbHpMbDl6YVhwbFRHOWtjMXR1WFNBdElERXNJRzBnUFNCcGMwWnBibWwwWlNoeUtTQS9JRTFoZEdndVVFa2dMeUFvTWlBcUlHWXBJRG9nTWlBcUlFMWhkR2d1VUVrZ0x5QW9NaUFxSUdWcElDMGdNU2tzSUY4Z1BTQnlJQzhnYlN3Z1p5QTlJR2x6Um1sdWFYUmxLSElwSUQ4Z01TQXJJRTFoZEdndVpteHZiM0lvYUNBcUlGOHBJRG9nWldrN0NpQWdJQ0FnSUNBZ1p5QStJR1ZwSUNZbUlHTnZibk52YkdVdWQyRnliaWhnYzJsbmJXRlNZV1JwWVc1ekxDQWtlM0o5TENCcGN5QjBiMjhnYkdGeVoyVWdZVzVrSUhkcGJHd2dZMnhwY0N3Z1lYTWdhWFFnY21WeGRXVnpkR1ZrSUNSN1ozMGdjMkZ0Y0d4bGN5QjNhR1Z1SUhSb1pTQnRZWGhwYlhWdElHbHpJSE5sZENCMGJ5QWtlMlZwZldBcE93b2dJQ0FnSUNBZ0lHeGxkQ0J3SUQwZ1cxMHNJSFlnUFNBd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1VpQTlJREE3SUZJZ1BDQmxhVHNnS3l0U0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFa2dQU0JTSUM4Z1h5d2dUU0E5SUUxaGRHZ3VaWGh3S0MxSklDb2dTU0F2SURJcE93b2dJQ0FnSUNBZ0lDQWdJQ0J3TG5CMWMyZ29UU2tzSUZJZ1BUMDlJREFnUHlCMklDczlJRTBnT2lCU0lEd2daeUFtSmlBb2RpQXJQU0F5SUNvZ1RTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1p2Y2loc1pYUWdVaUE5SURBN0lGSWdQQ0J3TG14bGJtZDBhRHNnVWlzcktYQmJVbDBnUFNCd1cxSmRJQzhnZGpzS0lDQWdJQ0FnSUNCa0xtVnVkazFoY0M1MllXeDFaU0E5SUdVdWRHVjRkSFZ5WlN3Z1pDNXpZVzF3YkdWekxuWmhiSFZsSUQwZ1p5d2daQzUzWldsbmFIUnpMblpoYkhWbElEMGdjQ3dnWkM1c1lYUnBkSFZrYVc1aGJDNTJZV3gxWlNBOUlHRWdQVDA5SUNKc1lYUnBkSFZrYVc1aGJDSXNJRzhnSmlZZ0tHUXVjRzlzWlVGNGFYTXVkbUZzZFdVZ1BTQnZLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2V5QmZiRzlrVFdGNE9pQjRJQ0I5SUQwZ2RHaHBjenNLSUNBZ0lDQWdJQ0JrTG1SVWFHVjBZUzUyWVd4MVpTQTlJRzBzSUdRdWJXbHdTVzUwTG5aaGJIVmxJRDBnZUNBdElHNDdDaUFnSUNBZ0lDQWdiR1YwSUhrZ1BTQjBhR2x6TGw5emFYcGxURzlrYzF0cFhTd2dZaUE5SURNZ0tpQjVJQ29nS0drZ1BpQjRJQzBnU0drZ1B5QnBJQzBnZUNBcklFaHBJRG9nTUNrc0lIY2dQU0EwSUNvZ0tIUm9hWE11WDJOMVltVlRhWHBsSUMwZ2VTazdDaUFnSUNBZ0lDQWdiSElvZEN3Z1lpd2dkeXdnTXlBcUlIa3NJRElnS2lCNUtTd2dZeTV6WlhSU1pXNWtaWEpVWVhKblpYUW9kQ2tzSUdNdWNtVnVaR1Z5S0hVc0lDUmhLVHNLSUNBZ0lIMEtmVHNLWm5WdVkzUnBiMjRnYjE4b2N6RXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ1cxMHNJSFFnUFNCYlhTd2diaUE5SUZ0ZExDQnBJRDBnY3pFc0lISWdQU0J6TVNBdElFaHBJQ3NnTVNBcklHaG9MbXhsYm1kMGFEc0tJQ0FnSUdadmNpaHNaWFFnWVNBOUlEQTdJR0VnUENCeU95QmhLeXNwZXdvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnVFdGMGFDNXdiM2NvTWl3Z2FTazdDaUFnSUNBZ0lDQWdkQzV3ZFhOb0tHOHBPd29nSUNBZ0lDQWdJR3hsZENCaklEMGdNU0F2SUc4N0NpQWdJQ0FnSUNBZ1lTQStJSE14SUMwZ1NHa2dQeUJqSUQwZ2FHaGJZU0F0SUhNeElDc2dTR2tnTFNBeFhTQTZJR0VnUFQwOUlEQWdKaVlnS0dNZ1BTQXdLU3dnYmk1d2RYTm9LR01wT3dvZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnTVNBdklDaHZJQzBnTWlrc0lHZ2dQU0F0YkN3Z2RTQTlJREVnS3lCc0xDQmtJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQm9MQW9nSUNBZ0lDQWdJQ0FnSUNCb0xBb2dJQ0FnSUNBZ0lDQWdJQ0IxTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9MQW9nSUNBZ0lDQWdJQ0FnSUNCMUxBb2dJQ0FnSUNBZ0lDQWdJQ0IxTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9MQW9nSUNBZ0lDQWdJQ0FnSUNCb0xBb2dJQ0FnSUNBZ0lDQWdJQ0IxTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFMQW9nSUNBZ0lDQWdJQ0FnSUNCb0xBb2dJQ0FnSUNBZ0lDQWdJQ0IxQ2lBZ0lDQWdJQ0FnWFN3Z1ppQTlJRFlzSUcwZ1BTQTJMQ0JmSUQwZ015d2daeUE5SURJc0lIQWdQU0F4TENCMklEMGdibVYzSUVac2IyRjBNekpCY25KaGVTaGZJQ29nYlNBcUlHWXBMQ0I0SUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNobklDb2diU0FxSUdZcExDQjVJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2h3SUNvZ2JTQXFJR1lwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZHlBOUlEQTdJSGNnUENCbU95QjNLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVWlBOUlIY2dKU0F6SUNvZ01pQXZJRE1nTFNBeExDQkpJRDBnZHlBK0lESWdQeUF3SURvZ0xURXNJRTBnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCU0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1NTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNJQ3NnTWlBdklETXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkpMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRklnS3lBeUlDOGdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWtnS3lBeExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkpMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRklnS3lBeUlDOGdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWtnS3lBeExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkpJQ3NnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBS0lDQWdJQ0FnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RpNXpaWFFvVFN3Z1h5QXFJRzBnS2lCM0tTd2dlQzV6WlhRb1pDd2daeUFxSUcwZ0tpQjNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRlFnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2R5d0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIY3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkeXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGNLSUNBZ0lDQWdJQ0FnSUNBZ1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnZVM1elpYUW9WQ3dnY0NBcUlHMGdLaUIzS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJR0lnUFNCdVpYY2dSMlU3Q2lBZ0lDQWdJQ0FnWWk1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lHVjBLSFlzSUY4cEtTd2dZaTV6WlhSQmRIUnlhV0oxZEdVb0luVjJJaXdnYm1WM0lHVjBLSGdzSUdjcEtTd2dZaTV6WlhSQmRIUnlhV0oxZEdVb0ltWmhZMlZKYm1SbGVDSXNJRzVsZHlCbGRDaDVMQ0J3S1Nrc0lHVXVjSFZ6YUNoaUtTd2dhU0ErSUVocElDWW1JR2t0TFRzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ2JHOWtVR3hoYm1Wek9pQmxMQW9nSUNBZ0lDQWdJSE5wZW1WTWIyUnpPaUIwTEFvZ0lDQWdJQ0FnSUhOcFoyMWhjem9nYmdvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCbWFDaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCdVpYY2djWFFvY3pFc0lHVXNJSFFwT3dvZ0lDQWdjbVYwZFhKdUlHNHVkR1Y0ZEhWeVpTNXRZWEJ3YVc1bklEMGdWbk1zSUc0dWRHVjRkSFZ5WlM1dVlXMWxJRDBnSWxCTlVrVk5MbU4xWW1WVmRpSXNJRzR1YzJOcGMzTnZjbFJsYzNRZ1BTQWhNQ3dnYmpzS2ZRcG1kVzVqZEdsdmJpQnNjaWh6TVN3Z1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ2N6RXVkbWxsZDNCdmNuUXVjMlYwS0dVc0lIUXNJRzRzSUdrcExDQnpNUzV6WTJsemMyOXlMbk5sZENobExDQjBMQ0J1TENCcEtUc0tmUXBtZFc1amRHbHZiaUJqWHloek1Td2daU3dnZENrZ2V3b2dJQ0FnYkdWMElHNGdQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLR1ZwS1N3Z2FTQTlJRzVsZHlCQktEQXNJREVzSURBcE93b2dJQ0FnY21WMGRYSnVJRzVsZHlCcWRDaDdDaUFnSUNBZ0lDQWdibUZ0WlRvZ0lsTndhR1Z5YVdOaGJFZGhkWE56YVdGdVFteDFjaUlzQ2lBZ0lDQWdJQ0FnWkdWbWFXNWxjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQnVPaUJsYVN3S0lDQWdJQ0FnSUNBZ0lDQWdRMVZDUlZWV1gxUkZXRVZNWDFkSlJGUklPaUF4SUM4Z1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnUTFWQ1JWVldYMVJGV0VWTVgwaEZTVWRJVkRvZ01TQXZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lFTlZRa1ZWVmw5TlFWaGZUVWxRT2lCZ0pIdHpNWDB1TUdBS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUdWdWRrMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2MyRnRjR3hsY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2QyVnBaMmgwY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc0S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHRjBhWFIxWkdsdVlXdzZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQWhNUW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0JrVkdobGRHRTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJRzFwY0VsdWREb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklEQUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjRzlzWlVGNGFYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnBDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nV21Nb0tTd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1lBb0tDUWtKY0hKbFkybHphVzl1SUcxbFpHbDFiWEFnWm14dllYUTdDZ2tKQ1hCeVpXTnBjMmx2YmlCdFpXUnBkVzF3SUdsdWREc0tDZ2tKQ1haaGNubHBibWNnZG1Wak15QjJUM1YwY0hWMFJHbHlaV04wYVc5dU93b0tDUWtKZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnWlc1MlRXRndPd29KQ1FsMWJtbG1iM0p0SUdsdWRDQnpZVzF3YkdWek93b0pDUWwxYm1sbWIzSnRJR1pzYjJGMElIZGxhV2RvZEhOYklHNGdYVHNLQ1FrSmRXNXBabTl5YlNCaWIyOXNJR3hoZEdsMGRXUnBibUZzT3dvSkNRbDFibWxtYjNKdElHWnNiMkYwSUdSVWFHVjBZVHNLQ1FrSmRXNXBabTl5YlNCbWJHOWhkQ0J0YVhCSmJuUTdDZ2tKQ1hWdWFXWnZjbTBnZG1Wak15QndiMnhsUVhocGN6c0tDZ2tKQ1NOa1pXWnBibVVnUlU1V1RVRlFYMVJaVUVWZlExVkNSVjlWVmdvSkNRa2phVzVqYkhWa1pTQThZM1ZpWlY5MWRsOXlaV1pzWldOMGFXOXVYMlp5WVdkdFpXNTBQZ29LQ1FrSmRtVmpNeUJuWlhSVFlXMXdiR1VvSUdac2IyRjBJSFJvWlhSaExDQjJaV016SUdGNGFYTWdLU0I3Q2dvSkNRa0pabXh2WVhRZ1kyOXpWR2hsZEdFZ1BTQmpiM01vSUhSb1pYUmhJQ2s3Q2drSkNRa3ZMeUJTYjJSeWFXZDFaWE1uSUdGNGFYTXRZVzVuYkdVZ2NtOTBZWFJwYjI0S0NRa0pDWFpsWXpNZ2MyRnRjR3hsUkdseVpXTjBhVzl1SUQwZ2RrOTFkSEIxZEVScGNtVmpkR2x2YmlBcUlHTnZjMVJvWlhSaENna0pDUWtKS3lCamNtOXpjeWdnWVhocGN5d2dkazkxZEhCMWRFUnBjbVZqZEdsdmJpQXBJQ29nYzJsdUtDQjBhR1YwWVNBcENna0pDUWtKS3lCaGVHbHpJQ29nWkc5MEtDQmhlR2x6TENCMlQzVjBjSFYwUkdseVpXTjBhVzl1SUNrZ0tpQW9JREV1TUNBdElHTnZjMVJvWlhSaElDazdDZ29KQ1FrSmNtVjBkWEp1SUdKcGJHbHVaV0Z5UTNWaVpWVldLQ0JsYm5aTllYQXNJSE5oYlhCc1pVUnBjbVZqZEdsdmJpd2diV2x3U1c1MElDazdDZ29KQ1FsOUNnb0pDUWwyYjJsa0lHMWhhVzRvS1NCN0Nnb0pDUWtKZG1Wak15QmhlR2x6SUQwZ2JHRjBhWFIxWkdsdVlXd2dQeUJ3YjJ4bFFYaHBjeUE2SUdOeWIzTnpLQ0J3YjJ4bFFYaHBjeXdnZGs5MWRIQjFkRVJwY21WamRHbHZiaUFwT3dvS0NRa0pDV2xtSUNnZ1lXeHNLQ0JsY1hWaGJDZ2dZWGhwY3l3Z2RtVmpNeWdnTUM0d0lDa2dLU0FwSUNrZ2V3b0tDUWtKQ1FsaGVHbHpJRDBnZG1Wak15Z2dkazkxZEhCMWRFUnBjbVZqZEdsdmJpNTZMQ0F3TGpBc0lDMGdkazkxZEhCMWRFUnBjbVZqZEdsdmJpNTRJQ2s3Q2dvSkNRa0pmUW9LQ1FrSkNXRjRhWE1nUFNCdWIzSnRZV3hwZW1Vb0lHRjRhWE1nS1RzS0Nna0pDUWxuYkY5R2NtRm5RMjlzYjNJZ1BTQjJaV00wS0NBd0xqQXNJREF1TUN3Z01DNHdMQ0F4TGpBZ0tUc0tDUWtKQ1dkc1gwWnlZV2REYjJ4dmNpNXlaMklnS3owZ2QyVnBaMmgwYzFzZ01DQmRJQ29nWjJWMFUyRnRjR3hsS0NBd0xqQXNJR0Y0YVhNZ0tUc0tDZ2tKQ1FsbWIzSWdLQ0JwYm5RZ2FTQTlJREU3SUdrZ1BDQnVPeUJwS3lzZ0tTQjdDZ29KQ1FrSkNXbG1JQ2dnYVNBK1BTQnpZVzF3YkdWeklDa2dld29LQ1FrSkNRa0pZbkpsWVdzN0Nnb0pDUWtKQ1gwS0Nna0pDUWtKWm14dllYUWdkR2hsZEdFZ1BTQmtWR2hsZEdFZ0tpQm1iRzloZENnZ2FTQXBPd29KQ1FrSkNXZHNYMFp5WVdkRGIyeHZjaTV5WjJJZ0t6MGdkMlZwWjJoMGMxc2dhU0JkSUNvZ1oyVjBVMkZ0Y0d4bEtDQXRNUzR3SUNvZ2RHaGxkR0VzSUdGNGFYTWdLVHNLQ1FrSkNRbG5iRjlHY21GblEyOXNiM0l1Y21kaUlDczlJSGRsYVdkb2RITmJJR2tnWFNBcUlHZGxkRk5oYlhCc1pTZ2dkR2hsZEdFc0lHRjRhWE1nS1RzS0Nna0pDUWw5Q2dvSkNRbDlDZ2tKWUN3S0lDQWdJQ0FnSUNCaWJHVnVaR2x1WnpvZ1JHNHNDaUFnSUNBZ0lDQWdaR1Z3ZEdoVVpYTjBPaUFoTVN3S0lDQWdJQ0FnSUNCa1pYQjBhRmR5YVhSbE9pQWhNUW9nSUNBZ2ZTazdDbjBLWm5WdVkzUnBiMjRnY0dnb0tTQjdDaUFnSUNCeVpYUjFjbTRnYm1WM0lHcDBLSHNLSUNBZ0lDQWdJQ0J1WVcxbE9pQWlSWEYxYVhKbFkzUmhibWQxYkdGeVZHOURkV0psVlZZaUxBb2dJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUdWdWRrMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQmFZeWdwTEFvZ0lDQWdJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJnQ2dvSkNRbHdjbVZqYVhOcGIyNGdiV1ZrYVhWdGNDQm1iRzloZERzS0NRa0pjSEpsWTJsemFXOXVJRzFsWkdsMWJYQWdhVzUwT3dvS0NRa0pkbUZ5ZVdsdVp5QjJaV016SUhaUGRYUndkWFJFYVhKbFkzUnBiMjQ3Q2dvSkNRbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQmxiblpOWVhBN0Nnb0pDUWtqYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29LQ1FrSmRtOXBaQ0J0WVdsdUtDa2dld29LQ1FrSkNYWmxZek1nYjNWMGNIVjBSR2x5WldOMGFXOXVJRDBnYm05eWJXRnNhWHBsS0NCMlQzVjBjSFYwUkdseVpXTjBhVzl1SUNrN0Nna0pDUWwyWldNeUlIVjJJRDBnWlhGMWFYSmxZM1JWZGlnZ2IzVjBjSFYwUkdseVpXTjBhVzl1SUNrN0Nnb0pDUWtKWjJ4ZlJuSmhaME52Ykc5eUlEMGdkbVZqTkNnZ2RHVjRkSFZ5WlRKRUlDZ2daVzUyVFdGd0xDQjFkaUFwTG5Kbllpd2dNUzR3SUNrN0Nnb0pDUWw5Q2drSllDd0tJQ0FnSUNBZ0lDQmliR1Z1WkdsdVp6b2dSRzRzQ2lBZ0lDQWdJQ0FnWkdWd2RHaFVaWE4wT2lBaE1Td0tJQ0FnSUNBZ0lDQmtaWEIwYUZkeWFYUmxPaUFoTVFvZ0lDQWdmU2s3Q24wS1puVnVZM1JwYjI0Z2JXZ29LU0I3Q2lBZ0lDQnlaWFIxY200Z2JtVjNJR3AwS0hzS0lDQWdJQ0FnSUNCdVlXMWxPaUFpUTNWaVpXMWhjRlJ2UTNWaVpWVldJaXdLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQmxiblpOWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR1pzYVhCRmJuWk5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF0TVFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklGcGpLQ2tzQ2lBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJR0FLQ2drSkNYQnlaV05wYzJsdmJpQnRaV1JwZFcxd0lHWnNiMkYwT3dvSkNRbHdjbVZqYVhOcGIyNGdiV1ZrYVhWdGNDQnBiblE3Q2dvSkNRbDFibWxtYjNKdElHWnNiMkYwSUdac2FYQkZiblpOWVhBN0Nnb0pDUWwyWVhKNWFXNW5JSFpsWXpNZ2RrOTFkSEIxZEVScGNtVmpkR2x2YmpzS0Nna0pDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNrTjFZbVVnWlc1MlRXRndPd29LQ1FrSmRtOXBaQ0J0WVdsdUtDa2dld29LQ1FrSkNXZHNYMFp5WVdkRGIyeHZjaUE5SUhSbGVIUjFjbVZEZFdKbEtDQmxiblpOWVhBc0lIWmxZek1vSUdac2FYQkZiblpOWVhBZ0tpQjJUM1YwY0hWMFJHbHlaV04wYVc5dUxuZ3NJSFpQZFhSd2RYUkVhWEpsWTNScGIyNHVlWG9nS1NBcE93b0tDUWtKZlFvSkNXQXNDaUFnSUNBZ0lDQWdZbXhsYm1ScGJtYzZJRVJ1TEFvZ0lDQWdJQ0FnSUdSbGNIUm9WR1Z6ZERvZ0lURXNDaUFnSUNBZ0lDQWdaR1Z3ZEdoWGNtbDBaVG9nSVRFS0lDQWdJSDBwT3dwOUNtWjFibU4wYVc5dUlGcGpLQ2tnZXdvZ0lDQWdjbVYwZFhKdUlHQUtDZ2tKY0hKbFkybHphVzl1SUcxbFpHbDFiWEFnWm14dllYUTdDZ2tKY0hKbFkybHphVzl1SUcxbFpHbDFiWEFnYVc1ME93b0tDUWxoZEhSeWFXSjFkR1VnWm14dllYUWdabUZqWlVsdVpHVjRPd29LQ1FsMllYSjVhVzVuSUhabFl6TWdkazkxZEhCMWRFUnBjbVZqZEdsdmJqc0tDZ2tKTHk4Z1VrZ2dZMjl2Y21ScGJtRjBaU0J6ZVhOMFpXMDdJRkJOVWtWTklHWmhZMlV0YVc1a1pYaHBibWNnWTI5dWRtVnVkR2x2YmdvSkNYWmxZek1nWjJWMFJHbHlaV04wYVc5dUtDQjJaV015SUhWMkxDQm1iRzloZENCbVlXTmxJQ2tnZXdvS0NRa0pkWFlnUFNBeUxqQWdLaUIxZGlBdElERXVNRHNLQ2drSkNYWmxZek1nWkdseVpXTjBhVzl1SUQwZ2RtVmpNeWdnZFhZc0lERXVNQ0FwT3dvS0NRa0phV1lnS0NCbVlXTmxJRDA5SURBdU1DQXBJSHNLQ2drSkNRbGthWEpsWTNScGIyNGdQU0JrYVhKbFkzUnBiMjR1ZW5sNE95QXZMeUFvSURFc0lIWXNJSFVnS1NCd2IzTWdlQW9LQ1FrSmZTQmxiSE5sSUdsbUlDZ2dabUZqWlNBOVBTQXhMakFnS1NCN0Nnb0pDUWtKWkdseVpXTjBhVzl1SUQwZ1pHbHlaV04wYVc5dUxuaDZlVHNLQ1FrSkNXUnBjbVZqZEdsdmJpNTRlaUFxUFNBdE1TNHdPeUF2THlBb0lDMTFMQ0F4TENBdGRpQXBJSEJ2Y3lCNUNnb0pDUWw5SUdWc2MyVWdhV1lnS0NCbVlXTmxJRDA5SURJdU1DQXBJSHNLQ2drSkNRbGthWEpsWTNScGIyNHVlQ0FxUFNBdE1TNHdPeUF2THlBb0lDMTFMQ0IyTENBeElDa2djRzl6SUhvS0Nna0pDWDBnWld4elpTQnBaaUFvSUdaaFkyVWdQVDBnTXk0d0lDa2dld29LQ1FrSkNXUnBjbVZqZEdsdmJpQTlJR1JwY21WamRHbHZiaTU2ZVhnN0Nna0pDUWxrYVhKbFkzUnBiMjR1ZUhvZ0tqMGdMVEV1TURzZ0x5OGdLQ0F0TVN3Z2Rpd2dMWFVnS1NCdVpXY2dlQW9LQ1FrSmZTQmxiSE5sSUdsbUlDZ2dabUZqWlNBOVBTQTBMakFnS1NCN0Nnb0pDUWtKWkdseVpXTjBhVzl1SUQwZ1pHbHlaV04wYVc5dUxuaDZlVHNLQ1FrSkNXUnBjbVZqZEdsdmJpNTRlU0FxUFNBdE1TNHdPeUF2THlBb0lDMTFMQ0F0TVN3Z2RpQXBJRzVsWnlCNUNnb0pDUWw5SUdWc2MyVWdhV1lnS0NCbVlXTmxJRDA5SURVdU1DQXBJSHNLQ2drSkNRbGthWEpsWTNScGIyNHVlaUFxUFNBdE1TNHdPeUF2THlBb0lIVXNJSFlzSUMweElDa2dibVZuSUhvS0Nna0pDWDBLQ2drSkNYSmxkSFZ5YmlCa2FYSmxZM1JwYjI0N0Nnb0pDWDBLQ2drSmRtOXBaQ0J0WVdsdUtDa2dld29LQ1FrSmRrOTFkSEIxZEVScGNtVmpkR2x2YmlBOUlHZGxkRVJwY21WamRHbHZiaWdnZFhZc0lHWmhZMlZKYm1SbGVDQXBPd29KQ1FsbmJGOVFiM05wZEdsdmJpQTlJSFpsWXpRb0lIQnZjMmwwYVc5dUxDQXhMakFnS1RzS0Nna0pmUW9KWURzS2ZRcG1kVzVqZEdsdmJpQnNYeWh6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0J1WlhjZ1YyVmhhMDFoY0N3Z2RDQTlJRzUxYkd3N0NpQWdJQ0JtZFc1amRHbHZiaUJ1S0c4cElIc0tJQ0FnSUNBZ0lDQnBaaUFvYnlBbUppQnZMbWx6VkdWNGRIVnlaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHOHViV0Z3Y0dsdVp5d2diQ0E5SUdNZ1BUMDlJRWx5SUh4OElHTWdQVDA5SUZWeUxDQm9JRDBnWXlBOVBUMGdlbTRnZkh3Z1l5QTlQVDBnWTJrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc0lIeDhJR2dwSUdsbUlDaHZMbWx6VW1WdVpHVnlWR0Z5WjJWMFZHVjRkSFZ5WlNBbUppQnZMbTVsWldSelVFMVNSVTFWY0dSaGRHVWdQVDA5SUNFd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbTVsWldSelVFMVNSVTFWY0dSaGRHVWdQU0FoTVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnWlM1blpYUW9ieWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ0E5UFQwZ2JuVnNiQ0FtSmlBb2RDQTlJRzVsZHlCTGNpaHpNU2twTENCMUlEMGdiQ0EvSUhRdVpuSnZiVVZ4ZFdseVpXTjBZVzVuZFd4aGNpaHZMQ0IxS1NBNklIUXVabkp2YlVOMVltVnRZWEFvYnl3Z2RTa3NJR1V1YzJWMEtHOHNJSFVwTENCMUxuUmxlSFIxY21VN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlM1b1lYTW9ieWtwSUhKbGRIVnliaUJsTG1kbGRDaHZLUzUwWlhoMGRYSmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnYnk1cGJXRm5aVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iQ0FtSmlCMUlDWW1JSFV1YUdWcFoyaDBJRDRnTUNCOGZDQm9JQ1ltSUhVZ0ppWWdhU2gxS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMElEMDlQU0J1ZFd4c0lDWW1JQ2gwSUQwZ2JtVjNJRXR5S0hNeEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ2JDQS9JSFF1Wm5KdmJVVnhkV2x5WldOMFlXNW5kV3hoY2lodktTQTZJSFF1Wm5KdmJVTjFZbVZ0WVhBb2J5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbExuTmxkQ2h2TENCa0tTd2dieTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnY2lrc0lHUXVkR1Y0ZEhWeVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHODdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJwS0c4cElIc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlEQXNJR3dnUFNBMk93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FDQTlJREE3SUdnZ1BDQnNPeUJvS3lzcGIxdG9YU0FoUFQwZ2RtOXBaQ0F3SUNZbUlHTXJLenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZeUE5UFQwZ2JEc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJSElvYnlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2J5NTBZWEpuWlhRN0NpQWdJQ0FnSUNBZ1l5NXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnY2lrN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCbExtZGxkQ2hqS1RzS0lDQWdJQ0FnSUNCc0lDRTlQU0IyYjJsa0lEQWdKaVlnS0dVdVpHVnNaWFJsS0dNcExDQnNMbVJwYzNCdmMyVW9LU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCaEtDa2dld29nSUNBZ0lDQWdJR1VnUFNCdVpYY2dWMlZoYTAxaGNDd2dkQ0FoUFQwZ2JuVnNiQ0FtSmlBb2RDNWthWE53YjNObEtDa3NJSFFnUFNCdWRXeHNLVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQnVMQW9nSUNBZ0lDQWdJR1JwYzNCdmMyVTZJR0VLSUNBZ0lIMDdDbjBLWm5WdVkzUnBiMjRnYUY4b2N6RXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ2UzMDdDaUFnSUNCbWRXNWpkR2x2YmlCMEtHNHBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1pWdHVYU0FoUFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnWlZ0dVhUc0tJQ0FnSUNBZ0lDQnNaWFFnYVRzS0lDQWdJQ0FnSUNCemQybDBZMmdvYmlsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsZEZRa2RNWDJSbGNIUm9YM1JsZUhSMWNtVWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0E5SUhNeExtZGxkRVY0ZEdWdWMybHZiaWdpVjBWQ1IweGZaR1Z3ZEdoZmRHVjRkSFZ5WlNJcElIeDhJSE14TG1kbGRFVjRkR1Z1YzJsdmJpZ2lUVTlhWDFkRlFrZE1YMlJsY0hSb1gzUmxlSFIxY21VaUtTQjhmQ0J6TVM1blpYUkZlSFJsYm5OcGIyNG9JbGRGUWt0SlZGOVhSVUpIVEY5a1pYQjBhRjkwWlhoMGRYSmxJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlSVmhVWDNSbGVIUjFjbVZmWm1sc2RHVnlYMkZ1YVhOdmRISnZjR2xqSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1BTQnpNUzVuWlhSRmVIUmxibk5wYjI0b0lrVllWRjkwWlhoMGRYSmxYMlpwYkhSbGNsOWhibWx6YjNSeWIzQnBZeUlwSUh4OElITXhMbWRsZEVWNGRHVnVjMmx2YmlnaVRVOWFYMFZZVkY5MFpYaDBkWEpsWDJacGJIUmxjbDloYm1semIzUnliM0JwWXlJcElIeDhJSE14TG1kbGRFVjRkR1Z1YzJsdmJpZ2lWMFZDUzBsVVgwVllWRjkwWlhoMGRYSmxYMlpwYkhSbGNsOWhibWx6YjNSeWIzQnBZeUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOXpNM1JqSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1BTQnpNUzVuWlhSRmVIUmxibk5wYjI0b0lsZEZRa2RNWDJOdmJYQnlaWE56WldSZmRHVjRkSFZ5WlY5ek0zUmpJaWtnZkh3Z2N6RXVaMlYwUlhoMFpXNXphVzl1S0NKTlQxcGZWMFZDUjB4ZlkyOXRjSEpsYzNObFpGOTBaWGgwZFhKbFgzTXpkR01pS1NCOGZDQnpNUzVuWlhSRmVIUmxibk5wYjI0b0lsZEZRa3RKVkY5WFJVSkhURjlqYjIxd2NtVnpjMlZrWDNSbGVIUjFjbVZmY3pOMFl5SXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsZEZRa2RNWDJOdmJYQnlaWE56WldSZmRHVjRkSFZ5WlY5d2RuSjBZeUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwSUQwZ2N6RXVaMlYwUlhoMFpXNXphVzl1S0NKWFJVSkhURjlqYjIxd2NtVnpjMlZrWDNSbGVIUjFjbVZmY0haeWRHTWlLU0I4ZkNCek1TNW5aWFJGZUhSbGJuTnBiMjRvSWxkRlFrdEpWRjlYUlVKSFRGOWpiMjF3Y21WemMyVmtYM1JsZUhSMWNtVmZjSFp5ZEdNaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQTlJSE14TG1kbGRFVjRkR1Z1YzJsdmJpaHVLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZiYmwwZ1BTQnBMQ0JwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCb1lYTTZJR1oxYm1OMGFXOXVLRzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUW9iaWtnSVQwOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCcGJtbDBPaUJtZFc1amRHbHZiaWh1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRzR1YVhOWFpXSkhURElnUHlCMEtDSkZXRlJmWTI5c2IzSmZZblZtWm1WeVgyWnNiMkYwSWlrZ09pQW9kQ2dpVjBWQ1IweGZaR1Z3ZEdoZmRHVjRkSFZ5WlNJcExDQjBLQ0pQUlZOZmRHVjRkSFZ5WlY5bWJHOWhkQ0lwTENCMEtDSlBSVk5mZEdWNGRIVnlaVjlvWVd4bVgyWnNiMkYwSWlrc0lIUW9JazlGVTE5MFpYaDBkWEpsWDJoaGJHWmZabXh2WVhSZmJHbHVaV0Z5SWlrc0lIUW9JazlGVTE5emRHRnVaR0Z5WkY5a1pYSnBkbUYwYVhabGN5SXBMQ0IwS0NKUFJWTmZaV3hsYldWdWRGOXBibVJsZUY5MWFXNTBJaWtzSUhRb0lrOUZVMTkyWlhKMFpYaGZZWEp5WVhsZmIySnFaV04wSWlrc0lIUW9Ja0ZPUjB4RlgybHVjM1JoYm1ObFpGOWhjbkpoZVhNaUtTa3NJSFFvSWs5RlUxOTBaWGgwZFhKbFgyWnNiMkYwWDJ4cGJtVmhjaUlwTENCMEtDSkZXRlJmWTI5c2IzSmZZblZtWm1WeVgyaGhiR1pmWm14dllYUWlLU3dnZENnaVYwVkNSMHhmYlhWc2RHbHpZVzF3YkdWa1gzSmxibVJsY2w5MGIxOTBaWGgwZFhKbElpazdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtHNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMEtHNHBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVNBOVBUMGdiblZzYkNBbUppQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklDSWdLeUJ1SUNzZ0lpQmxlSFJsYm5OcGIyNGdibTkwSUhOMWNIQnZjblJsWkM0aUtTd2dhVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUhWZktITXhMQ0JsTENCMExDQnVLU0I3Q2lBZ0lDQnNaWFFnYVNBOUlIdDlMQ0J5SUQwZ2JtVjNJRmRsWVd0TllYQTdDaUFnSUNCbWRXNWpkR2x2YmlCaEtIVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJSFV1ZEdGeVoyVjBPd29nSUNBZ0lDQWdJR1F1YVc1a1pYZ2dJVDA5SUc1MWJHd2dKaVlnWlM1eVpXMXZkbVVvWkM1cGJtUmxlQ2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J0SUdsdUlHUXVZWFIwY21saWRYUmxjeWxsTG5KbGJXOTJaU2hrTG1GMGRISnBZblYwWlhOYmJWMHBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0JwYmlCa0xtMXZjbkJvUVhSMGNtbGlkWFJsY3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCZklEMGdaQzV0YjNKd2FFRjBkSEpwWW5WMFpYTmJiVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1p5QTlJREFzSUhBZ1BTQmZMbXhsYm1kMGFEc2daeUE4SUhBN0lHY3JLeWxsTG5KbGJXOTJaU2hmVzJkZEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z1lTa3NJR1JsYkdWMFpTQnBXMlF1YVdSZE93b2dJQ0FnSUNBZ0lHeGxkQ0JtSUQwZ2NpNW5aWFFvWkNrN0NpQWdJQ0FnSUNBZ1ppQW1KaUFvWlM1eVpXMXZkbVVvWmlrc0lISXVaR1ZzWlhSbEtHUXBLU3dnYmk1eVpXeGxZWE5sVTNSaGRHVnpUMlpIWlc5dFpYUnllU2hrS1N3Z1pDNXBjMGx1YzNSaGJtTmxaRUoxWm1abGNrZGxiMjFsZEhKNUlEMDlQU0FoTUNBbUppQmtaV3hsZEdVZ1pDNWZiV0Y0U1c1emRHRnVZMlZEYjNWdWRDd2dkQzV0WlcxdmNua3VaMlZ2YldWMGNtbGxjeTB0T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2J5aDFMQ0JrS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsYlpDNXBaRjBnUFQwOUlDRXdJSHg4SUNoa0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltUnBjM0J2YzJVaUxDQmhLU3dnYVZ0a0xtbGtYU0E5SUNFd0xDQjBMbTFsYlc5eWVTNW5aVzl0WlhSeWFXVnpLeXNwTENCa093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdZeWgxS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCMUxtRjBkSEpwWW5WMFpYTTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnRJR2x1SUdRcFpTNTFjR1JoZEdVb1pGdHRYU3dnY3pFdVFWSlNRVmxmUWxWR1JrVlNLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJSFV1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0JwYmlCbUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOGdQU0JtVzIxZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2NnUFNBd0xDQndJRDBnWHk1c1pXNW5kR2c3SUdjZ1BDQndPeUJuS3lzcFpTNTFjR1JoZEdVb1gxdG5YU3dnY3pFdVFWSlNRVmxmUWxWR1JrVlNLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCc0tIVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJRnRkTENCbUlEMGdkUzVwYm1SbGVDd2diU0E5SUhVdVlYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpd2dYeUE5SURBN0NpQWdJQ0FnSUNBZ2FXWWdLR1lnSVQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQm1MbUZ5Y21GNU93b2dJQ0FnSUNBZ0lDQWdJQ0JmSUQwZ1ppNTJaWEp6YVc5dU93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGdnUFNBd0xDQjVJRDBnZGk1c1pXNW5kR2c3SUhnZ1BDQjVPeUI0SUNzOUlETXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdJZ1BTQjJXM2dnS3lBd1hTd2dkeUE5SUhaYmVDQXJJREZkTENCU0lEMGdkbHQ0SUNzZ01sMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbkIxYzJnb1lpd2dkeXdnZHl3Z1Vpd2dVaXdnWWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0cwZ0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkaUE5SUcwdVlYSnlZWGs3Q2lBZ0lDQWdJQ0FnSUNBZ0lGOGdQU0J0TG5abGNuTnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VDQTlJREFzSUhrZ1BTQjJMbXhsYm1kMGFDQXZJRE1nTFNBeE95QjRJRHdnZVRzZ2VDQXJQU0F6S1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmlJRDBnZUNBcklEQXNJSGNnUFNCNElDc2dNU3dnVWlBOUlIZ2dLeUF5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkM1d2RYTm9LR0lzSUhjc0lIY3NJRklzSUZJc0lHSXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJRzVsZHlBb1RXUW9aQ2tnUHlCS2NpQTZJRnB5S1Noa0xDQXhLVHNLSUNBZ0lDQWdJQ0JuTG5abGNuTnBiMjRnUFNCZk93b2dJQ0FnSUNBZ0lHeGxkQ0J3SUQwZ2NpNW5aWFFvZFNrN0NpQWdJQ0FnSUNBZ2NDQW1KaUJsTG5KbGJXOTJaU2h3S1N3Z2NpNXpaWFFvZFN3Z1p5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJvS0hVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnWkNBOUlISXVaMlYwS0hVcE93b2dJQ0FnSUNBZ0lHbG1JQ2hrS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbUlEMGdkUzVwYm1SbGVEc0tJQ0FnSUNBZ0lDQWdJQ0FnWmlBaFBUMGdiblZzYkNBbUppQmtMblpsY25OcGIyNGdQQ0JtTG5abGNuTnBiMjRnSmlZZ2JDaDFLVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdiQ2gxS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY2k1blpYUW9kU2s3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUdkbGREb2dieXdLSUNBZ0lDQWdJQ0IxY0dSaGRHVTZJR01zQ2lBZ0lDQWdJQ0FnWjJWMFYybHlaV1p5WVcxbFFYUjBjbWxpZFhSbE9pQm9DaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJR1JmS0hNeExDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUc0dWFYTlhaV0pIVERJc0lISTdDaUFnSUNCbWRXNWpkR2x2YmlCaEtHUXBJSHNLSUNBZ0lDQWdJQ0J5SUQwZ1pEc0tJQ0FnSUgwS0lDQWdJR3hsZENCdkxDQmpPd29nSUNBZ1puVnVZM1JwYjI0Z2JDaGtLU0I3Q2lBZ0lDQWdJQ0FnYnlBOUlHUXVkSGx3WlN3Z1l5QTlJR1F1WW5sMFpYTlFaWEpGYkdWdFpXNTBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYUNoa0xDQm1LU0I3Q2lBZ0lDQWdJQ0FnY3pFdVpISmhkMFZzWlcxbGJuUnpLSElzSUdZc0lHOHNJR1FnS2lCaktTd2dkQzUxY0dSaGRHVW9aaXdnY2l3Z01TazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUIxS0dRc0lHWXNJRzBwSUhzS0lDQWdJQ0FnSUNCcFppQW9iU0E5UFQwZ01Da2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lHeGxkQ0JmTENCbk93b2dJQ0FnSUNBZ0lHbG1JQ2hwS1NCZklEMGdjekVzSUdjZ1BTQWlaSEpoZDBWc1pXMWxiblJ6U1c1emRHRnVZMlZrSWpzS0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoZklEMGdaUzVuWlhRb0lrRk9SMHhGWDJsdWMzUmhibU5sWkY5aGNuSmhlWE1pS1N3Z1p5QTlJQ0prY21GM1JXeGxiV1Z1ZEhOSmJuTjBZVzVqWldSQlRrZE1SU0lzSUY4Z1BUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVYyVmlSMHhKYm1SbGVHVmtRblZtWm1WeVVtVnVaR1Z5WlhJNklIVnphVzVuSUZSSVVrVkZMa2x1YzNSaGJtTmxaRUoxWm1abGNrZGxiMjFsZEhKNUlHSjFkQ0JvWVhKa2QyRnlaU0JrYjJWeklHNXZkQ0J6ZFhCd2IzSjBJR1Y0ZEdWdWMybHZiaUJCVGtkTVJWOXBibk4wWVc1alpXUmZZWEp5WVhsekxpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUY5YloxMG9jaXdnWml3Z2J5d2daQ0FxSUdNc0lHMHBMQ0IwTG5Wd1pHRjBaU2htTENCeUxDQnRLVHNLSUNBZ0lIMEtJQ0FnSUhSb2FYTXVjMlYwVFc5a1pTQTlJR0VzSUhSb2FYTXVjMlYwU1c1a1pYZ2dQU0JzTENCMGFHbHpMbkpsYm1SbGNpQTlJR2dzSUhSb2FYTXVjbVZ1WkdWeVNXNXpkR0Z1WTJWeklEMGdkVHNLZlFwbWRXNWpkR2x2YmlCbVh5aHpNU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQjdDaUFnSUNBZ0lDQWdaMlZ2YldWMGNtbGxjem9nTUN3S0lDQWdJQ0FnSUNCMFpYaDBkWEpsY3pvZ01Bb2dJQ0FnZlN3Z2RDQTlJSHNLSUNBZ0lDQWdJQ0JtY21GdFpUb2dNQ3dLSUNBZ0lDQWdJQ0JqWVd4c2N6b2dNQ3dLSUNBZ0lDQWdJQ0IwY21saGJtZHNaWE02SURBc0NpQWdJQ0FnSUNBZ2NHOXBiblJ6T2lBd0xBb2dJQ0FnSUNBZ0lHeHBibVZ6T2lBd0NpQWdJQ0I5T3dvZ0lDQWdablZ1WTNScGIyNGdiaWh5TENCaExDQnZLU0I3Q2lBZ0lDQWdJQ0FnYzNkcGRHTm9LSFF1WTJGc2JITXJLeXdnWVNsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2N6RXVWRkpKUVU1SFRFVlRPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQzUwY21saGJtZHNaWE1nS3owZ2J5QXFJQ2h5SUM4Z015azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCek1TNU1TVTVGVXpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRdWJHbHVaWE1nS3owZ2J5QXFJQ2h5SUM4Z01pazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCek1TNU1TVTVGWDFOVVVrbFFPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQzVzYVc1bGN5QXJQU0J2SUNvZ0tISWdMU0F4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJSE14TGt4SlRrVmZURTlQVURvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRdWJHbHVaWE1nS3owZ2J5QXFJSEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQnpNUzVRVDBsT1ZGTTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBMbkJ2YVc1MGN5QXJQU0J2SUNvZ2Nqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4SmJtWnZPaUJWYm10dWIzZHVJR1J5WVhjZ2JXOWtaVG9pTENCaEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHa29LU0I3Q2lBZ0lDQWdJQ0FnZEM1allXeHNjeUE5SURBc0lIUXVkSEpwWVc1bmJHVnpJRDBnTUN3Z2RDNXdiMmx1ZEhNZ1BTQXdMQ0IwTG14cGJtVnpJRDBnTURzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ2JXVnRiM0o1T2lCbExBb2dJQ0FnSUNBZ0lISmxibVJsY2pvZ2RDd0tJQ0FnSUNBZ0lDQndjbTluY21GdGN6b2diblZzYkN3S0lDQWdJQ0FnSUNCaGRYUnZVbVZ6WlhRNklDRXdMQW9nSUNBZ0lDQWdJSEpsYzJWME9pQnBMQW9nSUNBZ0lDQWdJSFZ3WkdGMFpUb2diZ29nSUNBZ2ZUc0tmUXBtZFc1amRHbHZiaUJ3WHloek1Td2daU2tnZXdvZ0lDQWdjbVYwZFhKdUlITXhXekJkSUMwZ1pWc3dYVHNLZlFwbWRXNWpkR2x2YmlCdFh5aHpNU3dnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJRTFoZEdndVlXSnpLR1ZiTVYwcElDMGdUV0YwYUM1aFluTW9jekZiTVYwcE93cDlDbVoxYm1OMGFXOXVJR2RmS0hNeExDQmxMQ0IwS1NCN0NpQWdJQ0JzWlhRZ2JpQTlJSHQ5TENCcElEMGdibVYzSUVac2IyRjBNekpCY25KaGVTZzRLU3dnY2lBOUlHNWxkeUJYWldGclRXRndMQ0JoSUQwZ2JtVjNJR3BsTENCdklEMGdXMTA3Q2lBZ0lDQm1iM0lvYkdWMElHd2dQU0F3T3lCc0lEd2dPRHNnYkNzcktXOWJiRjBnUFNCYkNpQWdJQ0FnSUNBZ2JDd0tJQ0FnSUNBZ0lDQXdDaUFnSUNCZE93b2dJQ0FnWm5WdVkzUnBiMjRnWXloc0xDQm9MQ0IxS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCc0xtMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjenNLSUNBZ0lDQWdJQ0JwWmlBb1pTNXBjMWRsWWtkTU1pQTlQVDBnSVRBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0JvTG0xdmNuQm9RWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaUI4ZkNCb0xtMXZjbkJvUVhSMGNtbGlkWFJsY3k1dWIzSnRZV3dnZkh3Z2FDNXRiM0p3YUVGMGRISnBZblYwWlhNdVkyOXNiM0lzSUcwZ1BTQm1JQ0U5UFNCMmIybGtJREFnUHlCbUxteGxibWQwYUNBNklEQXNJRjhnUFNCeUxtZGxkQ2hvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Y4Z1BUMDlJSFp2YVdRZ01DQjhmQ0JmTG1OdmRXNTBJQ0U5UFNCdEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZrdVpHbHpjRzl6WlNncExDQnlMbVJsYkdWMFpTaG9LU3dnYUM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dWU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWHlBaFBUMGdkbTlwWkNBd0lDWW1JRjh1ZEdWNGRIVnlaUzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJR2d1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVJQ0U5UFNCMmIybGtJREFzSUhnZ1BTQm9MbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXViM0p0WVd3Z0lUMDlJSFp2YVdRZ01Dd2dlU0E5SUdndWJXOXljR2hCZEhSeWFXSjFkR1Z6TG1OdmJHOXlJQ0U5UFNCMmIybGtJREFzSUdJZ1BTQm9MbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpQjhmQ0JiWFN3Z2R5QTlJR2d1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbTV2Y20xaGJDQjhmQ0JiWFN3Z1VpQTlJR2d1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbU52Ykc5eUlIeDhJRnRkTENCSklEMGdNRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFlnUFQwOUlDRXdJQ1ltSUNoSklEMGdNU2tzSUhnZ1BUMDlJQ0V3SUNZbUlDaEpJRDBnTWlrc0lIa2dQVDA5SUNFd0lDWW1JQ2hKSUQwZ015azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVFNBOUlHZ3VZWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaTVqYjNWdWRDQXFJRWtzSUZRZ1BTQXhPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUU0ErSUdVdWJXRjRWR1Y0ZEhWeVpWTnBlbVVnSmlZZ0tGUWdQU0JOWVhSb0xtTmxhV3dvVFNBdklHVXViV0Y0VkdWNGRIVnlaVk5wZW1VcExDQk5JRDBnWlM1dFlYaFVaWGgwZFhKbFUybDZaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1R5QTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29UU0FxSUZRZ0tpQTBJQ29nYlNrc0lGa2dQU0J1WlhjZ1FYTW9UeXdnVFN3Z1ZDd2diU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JaTG5SNWNHVWdQU0I0Yml3Z1dTNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJQ1FnUFNCSklDb2dORHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlaUE5SURBN0lIb2dQQ0J0T3lCNkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnhJRDBnWWx0NlhTd2dTQ0E5SUhkYmVsMHNJRzVsSUQwZ1VsdDZYU3dnVnlBOUlFMGdLaUJVSUNvZ05DQXFJSG83Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCTElEMGdNRHNnU3lBOElIRXVZMjkxYm5RN0lFc3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRUlEMGdTeUFxSUNRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZZ1BUMDlJQ0V3SUNZbUlDaGhMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvY1N3Z1N5a3NJRTliVnlBcklFUWdLeUF3WFNBOUlHRXVlQ3dnVDF0WElDc2dSQ0FySURGZElEMGdZUzU1TENCUFcxY2dLeUJFSUNzZ01sMGdQU0JoTG5vc0lFOWJWeUFySUVRZ0t5QXpYU0E5SURBcExDQjRJRDA5UFNBaE1DQW1KaUFvWVM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtFZ3NJRXNwTENCUFcxY2dLeUJFSUNzZ05GMGdQU0JoTG5nc0lFOWJWeUFySUVRZ0t5QTFYU0E5SUdFdWVTd2dUMXRYSUNzZ1JDQXJJRFpkSUQwZ1lTNTZMQ0JQVzFjZ0t5QkVJQ3NnTjEwZ1BTQXdLU3dnZVNBOVBUMGdJVEFnSmlZZ0tHRXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h1WlN3Z1N5a3NJRTliVnlBcklFUWdLeUE0WFNBOUlHRXVlQ3dnVDF0WElDc2dSQ0FySURsZElEMGdZUzU1TENCUFcxY2dLeUJFSUNzZ01UQmRJRDBnWVM1NkxDQlBXMWNnS3lCRUlDc2dNVEZkSUQwZ2JtVXVhWFJsYlZOcGVtVWdQVDA5SURRZ1B5QmhMbmNnT2lBeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052ZFc1ME9pQnRMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUjFjbVU2SUZrc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmw2WlRvZ2JtVjNJRm9vVFN3Z1ZDa0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJSEl1YzJWMEtHZ3NJRjhwTENCb0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltUnBjM0J2YzJVaUxDQlZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJREE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RpQTlJREE3SUhZZ1BDQmtMbXhsYm1kMGFEc2dkaXNyS1djZ0t6MGdaRnQyWFRzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhBZ1BTQm9MbTF2Y25Cb1ZHRnlaMlYwYzFKbGJHRjBhWFpsSUQ4Z01TQTZJREVnTFNCbk93b2dJQ0FnSUNBZ0lDQWdJQ0IxTG1kbGRGVnVhV1p2Y20xektDa3VjMlYwVm1Gc2RXVW9jekVzSUNKdGIzSndhRlJoY21kbGRFSmhjMlZKYm1ac2RXVnVZMlVpTENCd0tTd2dkUzVuWlhSVmJtbG1iM0p0Y3lncExuTmxkRlpoYkhWbEtITXhMQ0FpYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklpd2daQ2tzSUhVdVoyVjBWVzVwWm05eWJYTW9LUzV6WlhSV1lXeDFaU2h6TVN3Z0ltMXZjbkJvVkdGeVoyVjBjMVJsZUhSMWNtVWlMQ0JmTG5SbGVIUjFjbVVzSUhRcExDQjFMbWRsZEZWdWFXWnZjbTF6S0NrdWMyVjBWbUZzZFdVb2N6RXNJQ0p0YjNKd2FGUmhjbWRsZEhOVVpYaDBkWEpsVTJsNlpTSXNJRjh1YzJsNlpTazdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0JrSUQwOVBTQjJiMmxrSURBZ1B5QXdJRG9nWkM1c1pXNW5kR2dzSUcwZ1BTQnVXMmd1YVdSZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JTQTlQVDBnZG05cFpDQXdJSHg4SUcwdWJHVnVaM1JvSUNFOVBTQm1LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0SUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIZ2dQU0F3T3lCNElEd2daanNnZUNzcktXMWJlRjBnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JsdG9MbWxrWFNBOUlHMDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjRJRDBnTURzZ2VDQThJR1k3SUhnckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVNBOUlHMWJlRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1V3pCZElEMGdlQ3dnZVZzeFhTQTlJR1JiZUYwN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2JTNXpiM0owS0cxZktUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0I0SUQwZ01Ec2dlQ0E4SURnN0lIZ3JLeWw0SUR3Z1ppQW1KaUJ0VzNoZFd6RmRJRDhnS0c5YmVGMWJNRjBnUFNCdFczaGRXekJkTENCdlczaGRXekZkSUQwZ2JWdDRYVnN4WFNrZ09pQW9iMXQ0WFZzd1hTQTlJRTUxYldKbGNpNU5RVmhmVTBGR1JWOUpUbFJGUjBWU0xDQnZXM2hkV3pGZElEMGdNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHOHVjMjl5ZENod1h5azdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnYUM1dGIzSndhRUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjRzSUdjZ1BTQm9MbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXViM0p0WVd3c0lIQWdQU0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIZ2dQU0F3T3lCNElEd2dPRHNnZUNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I1SUQwZ2IxdDRYU3dnWWlBOUlIbGJNRjBzSUhjZ1BTQjVXekZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWWlBaFBUMGdUblZ0WW1WeUxrMUJXRjlUUVVaRlgwbE9WRVZIUlZJZ0ppWWdkeUEvSUNoZklDWW1JR2d1WjJWMFFYUjBjbWxpZFhSbEtDSnRiM0p3YUZSaGNtZGxkQ0lnS3lCNEtTQWhQVDBnWDF0aVhTQW1KaUJvTG5ObGRFRjBkSEpwWW5WMFpTZ2liVzl5Y0doVVlYSm5aWFFpSUNzZ2VDd2dYMXRpWFNrc0lHY2dKaVlnYUM1blpYUkJkSFJ5YVdKMWRHVW9JbTF2Y25Cb1RtOXliV0ZzSWlBcklIZ3BJQ0U5UFNCblcySmRJQ1ltSUdndWMyVjBRWFIwY21saWRYUmxLQ0p0YjNKd2FFNXZjbTFoYkNJZ0t5QjRMQ0JuVzJKZEtTd2dhVnQ0WFNBOUlIY3NJSEFnS3owZ2R5a2dPaUFvWHlBbUppQm9MbWhoYzBGMGRISnBZblYwWlNnaWJXOXljR2hVWVhKblpYUWlJQ3NnZUNrZ1BUMDlJQ0V3SUNZbUlHZ3VaR1ZzWlhSbFFYUjBjbWxpZFhSbEtDSnRiM0p3YUZSaGNtZGxkQ0lnS3lCNEtTd2daeUFtSmlCb0xtaGhjMEYwZEhKcFluVjBaU2dpYlc5eWNHaE9iM0p0WVd3aUlDc2dlQ2tnUFQwOUlDRXdJQ1ltSUdndVpHVnNaWFJsUVhSMGNtbGlkWFJsS0NKdGIzSndhRTV2Y20xaGJDSWdLeUI0S1N3Z2FWdDRYU0E5SURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2FDNXRiM0p3YUZSaGNtZGxkSE5TWld4aGRHbDJaU0EvSURFZ09pQXhJQzBnY0RzS0lDQWdJQ0FnSUNBZ0lDQWdkUzVuWlhSVmJtbG1iM0p0Y3lncExuTmxkRlpoYkhWbEtITXhMQ0FpYlc5eWNHaFVZWEpuWlhSQ1lYTmxTVzVtYkhWbGJtTmxJaXdnZGlrc0lIVXVaMlYwVlc1cFptOXliWE1vS1M1elpYUldZV3gxWlNoek1Td2dJbTF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sY3lJc0lHa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnZFhCa1lYUmxPaUJqQ2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUY5ZktITXhMQ0JsTENCMExDQnVLU0I3Q2lBZ0lDQnNaWFFnYVNBOUlHNWxkeUJYWldGclRXRndPd29nSUNBZ1puVnVZM1JwYjI0Z2NpaGpLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0J1TG5KbGJtUmxjaTVtY21GdFpTd2dhQ0E5SUdNdVoyVnZiV1YwY25rc0lIVWdQU0JsTG1kbGRDaGpMQ0JvS1RzS0lDQWdJQ0FnSUNCcFppQW9hUzVuWlhRb2RTa2dJVDA5SUd3Z0ppWWdLR1V1ZFhCa1lYUmxLSFVwTENCcExuTmxkQ2gxTENCc0tTa3NJR011YVhOSmJuTjBZVzVqWldSTlpYTm9JQ1ltSUNoakxtaGhjMFYyWlc1MFRHbHpkR1Z1WlhJb0ltUnBjM0J2YzJVaUxDQnZLU0E5UFQwZ0lURWdKaVlnWXk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z2J5a3NJR2t1WjJWMEtHTXBJQ0U5UFNCc0lDWW1JQ2gwTG5Wd1pHRjBaU2hqTG1sdWMzUmhibU5sVFdGMGNtbDRMQ0J6TVM1QlVsSkJXVjlDVlVaR1JWSXBMQ0JqTG1sdWMzUmhibU5sUTI5c2IzSWdJVDA5SUc1MWJHd2dKaVlnZEM1MWNHUmhkR1VvWXk1cGJuTjBZVzVqWlVOdmJHOXlMQ0J6TVM1QlVsSkJXVjlDVlVaR1JWSXBMQ0JwTG5ObGRDaGpMQ0JzS1NrcExDQmpMbWx6VTJ0cGJtNWxaRTFsYzJncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JqTG5OclpXeGxkRzl1T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBMbWRsZENoa0tTQWhQVDBnYkNBbUppQW9aQzUxY0dSaGRHVW9LU3dnYVM1elpYUW9aQ3dnYkNrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR0VvS1NCN0NpQWdJQ0FnSUNBZ2FTQTlJRzVsZHlCWFpXRnJUV0Z3T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2J5aGpLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0JqTG5SaGNtZGxkRHNLSUNBZ0lDQWdJQ0JzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ltUnBjM0J2YzJVaUxDQnZLU3dnZEM1eVpXMXZkbVVvYkM1cGJuTjBZVzVqWlUxaGRISnBlQ2tzSUd3dWFXNXpkR0Z1WTJWRGIyeHZjaUFoUFQwZ2JuVnNiQ0FtSmlCMExuSmxiVzkyWlNoc0xtbHVjM1JoYm1ObFEyOXNiM0lwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCMWNHUmhkR1U2SUhJc0NpQWdJQ0FnSUNBZ1pHbHpjRzl6WlRvZ1lRb2dJQ0FnZlRzS2ZRcDJZWElnVkdRZ1BTQnVaWGNnVTNRc0lIZGtJRDBnYm1WM0lFRnpMQ0JCWkNBOUlHNWxkeUJ4Y2l3Z1VtUWdQU0J1WlhjZ1Mya3NJR2RvSUQwZ1cxMHNJRjlvSUQwZ1cxMHNJSGhvSUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNneE5pa3NJSFpvSUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNnNUtTd2dlV2dnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0RRcE93cG1kVzVqZEdsdmJpQmhjeWh6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdiR1YwSUc0Z1BTQnpNVnN3WFRzS0lDQWdJR2xtSUNodUlEdzlJREFnZkh3Z2JpQStJREFwSUhKbGRIVnliaUJ6TVRzS0lDQWdJR3hsZENCcElEMGdaU0FxSUhRc0lISWdQU0JuYUZ0cFhUc0tJQ0FnSUdsbUlDaHlJRDA5UFNCMmIybGtJREFnSmlZZ0tISWdQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLR2twTENCbmFGdHBYU0E5SUhJcExDQmxJQ0U5UFNBd0tTQjdDaUFnSUNBZ0lDQWdiaTUwYjBGeWNtRjVLSElzSURBcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREVzSUc4Z1BTQXdPeUJoSUNFOVBTQmxPeUFySzJFcGJ5QXJQU0IwTENCek1WdGhYUzUwYjBGeWNtRjVLSElzSUc4cE93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlISTdDbjBLWm5WdVkzUnBiMjRnWjNRb2N6RXNJR1VwSUhzS0lDQWdJR2xtSUNoek1TNXNaVzVuZEdnZ0lUMDlJR1V1YkdWdVozUm9LU0J5WlhSMWNtNGdJVEU3Q2lBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdjekV1YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1dsbUlDaHpNVnQwWFNBaFBUMGdaVnQwWFNrZ2NtVjBkWEp1SUNFeE93b2dJQ0FnY21WMGRYSnVJQ0V3T3dwOUNtWjFibU4wYVc5dUlGOTBLSE14TENCbEtTQjdDaUFnSUNCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ1pTNXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3BjekZiZEYwZ1BTQmxXM1JkT3dwOUNtWjFibU4wYVc5dUlIbGhLSE14TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SUY5b1cyVmRPd29nSUNBZ2RDQTlQVDBnZG05cFpDQXdJQ1ltSUNoMElEMGdibVYzSUVsdWRETXlRWEp5WVhrb1pTa3NJRjlvVzJWZElEMGdkQ2s3Q2lBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlDRTlQU0JsT3lBcksyNHBkRnR1WFNBOUlITXhMbUZzYkc5allYUmxWR1Y0ZEhWeVpWVnVhWFFvS1RzS0lDQWdJSEpsZEhWeWJpQjBPd3A5Q21aMWJtTjBhVzl1SUhoZktITXhMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVkyRmphR1U3Q2lBZ0lDQjBXekJkSUNFOVBTQmxJQ1ltSUNoek1TNTFibWxtYjNKdE1XWW9kR2hwY3k1aFpHUnlMQ0JsS1N3Z2RGc3dYU0E5SUdVcE93cDlDbVoxYm1OMGFXOXVJSFpmS0hNeExDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJGamFHVTdDaUFnSUNCcFppQW9aUzU0SUNFOVBTQjJiMmxrSURBcElDaDBXekJkSUNFOVBTQmxMbmdnZkh3Z2RGc3hYU0FoUFQwZ1pTNTVLU0FtSmlBb2N6RXVkVzVwWm05eWJUSm1LSFJvYVhNdVlXUmtjaXdnWlM1NExDQmxMbmtwTENCMFd6QmRJRDBnWlM1NExDQjBXekZkSUQwZ1pTNTVLVHNLSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUdsbUlDaG5kQ2gwTENCbEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lITXhMblZ1YVdadmNtMHlabllvZEdocGN5NWhaR1J5TENCbEtTd2dYM1FvZEN3Z1pTazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdlVjhvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVqWVdOb1pUc0tJQ0FnSUdsbUlDaGxMbmdnSVQwOUlIWnZhV1FnTUNrZ0tIUmJNRjBnSVQwOUlHVXVlQ0I4ZkNCMFd6RmRJQ0U5UFNCbExua2dmSHdnZEZzeVhTQWhQVDBnWlM1NktTQW1KaUFvY3pFdWRXNXBabTl5YlRObUtIUm9hWE11WVdSa2Npd2daUzU0TENCbExua3NJR1V1ZWlrc0lIUmJNRjBnUFNCbExuZ3NJSFJiTVYwZ1BTQmxMbmtzSUhSYk1sMGdQU0JsTG5vcE93b2dJQ0FnWld4elpTQnBaaUFvWlM1eUlDRTlQU0IyYjJsa0lEQXBJQ2gwV3pCZElDRTlQU0JsTG5JZ2ZId2dkRnN4WFNBaFBUMGdaUzVuSUh4OElIUmJNbDBnSVQwOUlHVXVZaWtnSmlZZ0tITXhMblZ1YVdadmNtMHpaaWgwYUdsekxtRmtaSElzSUdVdWNpd2daUzVuTENCbExtSXBMQ0IwV3pCZElEMGdaUzV5TENCMFd6RmRJRDBnWlM1bkxDQjBXekpkSUQwZ1pTNWlLVHNLSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUdsbUlDaG5kQ2gwTENCbEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lITXhMblZ1YVdadmNtMHpabllvZEdocGN5NWhaR1J5TENCbEtTd2dYM1FvZEN3Z1pTazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdUVjhvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVqWVdOb1pUc0tJQ0FnSUdsbUlDaGxMbmdnSVQwOUlIWnZhV1FnTUNrZ0tIUmJNRjBnSVQwOUlHVXVlQ0I4ZkNCMFd6RmRJQ0U5UFNCbExua2dmSHdnZEZzeVhTQWhQVDBnWlM1NklIeDhJSFJiTTEwZ0lUMDlJR1V1ZHlrZ0ppWWdLSE14TG5WdWFXWnZjbTAwWmloMGFHbHpMbUZrWkhJc0lHVXVlQ3dnWlM1NUxDQmxMbm9zSUdVdWR5a3NJSFJiTUYwZ1BTQmxMbmdzSUhSYk1WMGdQU0JsTG5rc0lIUmJNbDBnUFNCbExub3NJSFJiTTEwZ1BTQmxMbmNwT3dvZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2FXWWdLR2QwS0hRc0lHVXBLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdjekV1ZFc1cFptOXliVFJtZGloMGFHbHpMbUZrWkhJc0lHVXBMQ0JmZENoMExDQmxLVHNLSUNBZ0lIMEtmUXBtZFc1amRHbHZiaUJUWHloek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaFkyaGxMQ0J1SUQwZ1pTNWxiR1Z0Wlc1MGN6c0tJQ0FnSUdsbUlDaHVJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCcFppQW9aM1FvZEN3Z1pTa3BJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQnpNUzUxYm1sbWIzSnRUV0YwY21sNE1tWjJLSFJvYVhNdVlXUmtjaXdnSVRFc0lHVXBMQ0JmZENoMExDQmxLVHNLSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2FXWWdLR2QwS0hRc0lHNHBLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdlV2d1YzJWMEtHNHBMQ0J6TVM1MWJtbG1iM0p0VFdGMGNtbDRNbVoyS0hSb2FYTXVZV1JrY2l3Z0lURXNJSGxvS1N3Z1gzUW9kQ3dnYmlrN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z1lsOG9jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWpZV05vWlN3Z2JpQTlJR1V1Wld4bGJXVnVkSE03Q2lBZ0lDQnBaaUFvYmlBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0dkMEtIUXNJR1VwS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnY3pFdWRXNXBabTl5YlUxaGRISnBlRE5tZGloMGFHbHpMbUZrWkhJc0lDRXhMQ0JsS1N3Z1gzUW9kQ3dnWlNrN0NpQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJR2xtSUNobmRDaDBMQ0J1S1NrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUhab0xuTmxkQ2h1S1N3Z2N6RXVkVzVwWm05eWJVMWhkSEpwZURObWRpaDBhR2x6TG1Ga1pISXNJQ0V4TENCMmFDa3NJRjkwS0hRc0lHNHBPd29nSUNBZ2ZRcDlDbVoxYm1OMGFXOXVJRVZmS0hNeExDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJGamFHVXNJRzRnUFNCbExtVnNaVzFsYm5Sek93b2dJQ0FnYVdZZ0tHNGdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaG5kQ2gwTENCbEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lITXhMblZ1YVdadmNtMU5ZWFJ5YVhnMFpuWW9kR2hwY3k1aFpHUnlMQ0FoTVN3Z1pTa3NJRjkwS0hRc0lHVXBPd29nSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCcFppQW9aM1FvZEN3Z2Jpa3BJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjRhQzV6WlhRb2Jpa3NJSE14TG5WdWFXWnZjbTFOWVhSeWFYZzBabllvZEdocGN5NWhaR1J5TENBaE1Td2dlR2dwTENCZmRDaDBMQ0J1S1RzS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCVVh5aHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0IwYUdsekxtTmhZMmhsT3dvZ0lDQWdkRnN3WFNBaFBUMGdaU0FtSmlBb2N6RXVkVzVwWm05eWJURnBLSFJvYVhNdVlXUmtjaXdnWlNrc0lIUmJNRjBnUFNCbEtUc0tmUXBtZFc1amRHbHZiaUIzWHloek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaFkyaGxPd29nSUNBZ2FXWWdLR1V1ZUNBaFBUMGdkbTlwWkNBd0tTQW9kRnN3WFNBaFBUMGdaUzU0SUh4OElIUmJNVjBnSVQwOUlHVXVlU2tnSmlZZ0tITXhMblZ1YVdadmNtMHlhU2gwYUdsekxtRmtaSElzSUdVdWVDd2daUzU1S1N3Z2RGc3dYU0E5SUdVdWVDd2dkRnN4WFNBOUlHVXVlU2s3Q2lBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNCcFppQW9aM1FvZEN3Z1pTa3BJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQnpNUzUxYm1sbWIzSnRNbWwyS0hSb2FYTXVZV1JrY2l3Z1pTa3NJRjkwS0hRc0lHVXBPd29nSUNBZ2ZRcDlDbVoxYm1OMGFXOXVJRUZmS0hNeExDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJGamFHVTdDaUFnSUNCcFppQW9aUzU0SUNFOVBTQjJiMmxrSURBcElDaDBXekJkSUNFOVBTQmxMbmdnZkh3Z2RGc3hYU0FoUFQwZ1pTNTVJSHg4SUhSYk1sMGdJVDA5SUdVdWVpa2dKaVlnS0hNeExuVnVhV1p2Y20wemFTaDBhR2x6TG1Ga1pISXNJR1V1ZUN3Z1pTNTVMQ0JsTG5vcExDQjBXekJkSUQwZ1pTNTRMQ0IwV3pGZElEMGdaUzU1TENCMFd6SmRJRDBnWlM1NktUc0tJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJR2xtSUNobmRDaDBMQ0JsS1NrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUhNeExuVnVhV1p2Y20wemFYWW9kR2hwY3k1aFpHUnlMQ0JsS1N3Z1gzUW9kQ3dnWlNrN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z1VsOG9jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWpZV05vWlRzS0lDQWdJR2xtSUNobExuZ2dJVDA5SUhadmFXUWdNQ2tnS0hSYk1GMGdJVDA5SUdVdWVDQjhmQ0IwV3pGZElDRTlQU0JsTG5rZ2ZId2dkRnN5WFNBaFBUMGdaUzU2SUh4OElIUmJNMTBnSVQwOUlHVXVkeWtnSmlZZ0tITXhMblZ1YVdadmNtMDBhU2gwYUdsekxtRmtaSElzSUdVdWVDd2daUzU1TENCbExub3NJR1V1ZHlrc0lIUmJNRjBnUFNCbExuZ3NJSFJiTVYwZ1BTQmxMbmtzSUhSYk1sMGdQU0JsTG5vc0lIUmJNMTBnUFNCbExuY3BPd29nSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHZDBLSFFzSUdVcEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2N6RXVkVzVwWm05eWJUUnBkaWgwYUdsekxtRmtaSElzSUdVcExDQmZkQ2gwTENCbEtUc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQkRYeWh6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5oWTJobE93b2dJQ0FnZEZzd1hTQWhQVDBnWlNBbUppQW9jekV1ZFc1cFptOXliVEYxYVNoMGFHbHpMbUZrWkhJc0lHVXBMQ0IwV3pCZElEMGdaU2s3Q24wS1puVnVZM1JwYjI0Z1VGOG9jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWpZV05vWlRzS0lDQWdJR2xtSUNobExuZ2dJVDA5SUhadmFXUWdNQ2tnS0hSYk1GMGdJVDA5SUdVdWVDQjhmQ0IwV3pGZElDRTlQU0JsTG5rcElDWW1JQ2h6TVM1MWJtbG1iM0p0TW5WcEtIUm9hWE11WVdSa2Npd2daUzU0TENCbExua3BMQ0IwV3pCZElEMGdaUzU0TENCMFd6RmRJRDBnWlM1NUtUc0tJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJR2xtSUNobmRDaDBMQ0JsS1NrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUhNeExuVnVhV1p2Y20weWRXbDJLSFJvYVhNdVlXUmtjaXdnWlNrc0lGOTBLSFFzSUdVcE93b2dJQ0FnZlFwOUNtWjFibU4wYVc5dUlFeGZLSE14TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZMkZqYUdVN0NpQWdJQ0JwWmlBb1pTNTRJQ0U5UFNCMmIybGtJREFwSUNoMFd6QmRJQ0U5UFNCbExuZ2dmSHdnZEZzeFhTQWhQVDBnWlM1NUlIeDhJSFJiTWwwZ0lUMDlJR1V1ZWlrZ0ppWWdLSE14TG5WdWFXWnZjbTB6ZFdrb2RHaHBjeTVoWkdSeUxDQmxMbmdzSUdVdWVTd2daUzU2S1N3Z2RGc3dYU0E5SUdVdWVDd2dkRnN4WFNBOUlHVXVlU3dnZEZzeVhTQTlJR1V1ZWlrN0NpQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQnBaaUFvWjNRb2RDd2daU2twSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0J6TVM1MWJtbG1iM0p0TTNWcGRpaDBhR2x6TG1Ga1pISXNJR1VwTENCZmRDaDBMQ0JsS1RzS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCSlh5aHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0IwYUdsekxtTmhZMmhsT3dvZ0lDQWdhV1lnS0dVdWVDQWhQVDBnZG05cFpDQXdLU0FvZEZzd1hTQWhQVDBnWlM1NElIeDhJSFJiTVYwZ0lUMDlJR1V1ZVNCOGZDQjBXekpkSUNFOVBTQmxMbm9nZkh3Z2RGc3pYU0FoUFQwZ1pTNTNLU0FtSmlBb2N6RXVkVzVwWm05eWJUUjFhU2gwYUdsekxtRmtaSElzSUdVdWVDd2daUzU1TENCbExub3NJR1V1ZHlrc0lIUmJNRjBnUFNCbExuZ3NJSFJiTVYwZ1BTQmxMbmtzSUhSYk1sMGdQU0JsTG5vc0lIUmJNMTBnUFNCbExuY3BPd29nSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHZDBLSFFzSUdVcEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2N6RXVkVzVwWm05eWJUUjFhWFlvZEdocGN5NWhaR1J5TENCbEtTd2dYM1FvZEN3Z1pTazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdWVjhvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1allXTm9aU3dnYVNBOUlIUXVZV3hzYjJOaGRHVlVaWGgwZFhKbFZXNXBkQ2dwT3dvZ0lDQWdibHN3WFNBaFBUMGdhU0FtSmlBb2N6RXVkVzVwWm05eWJURnBLSFJvYVhNdVlXUmtjaXdnYVNrc0lHNWJNRjBnUFNCcEtTd2dkQzV6WlhSVVpYaDBkWEpsTWtRb1pTQjhmQ0JVWkN3Z2FTazdDbjBLWm5WdVkzUnBiMjRnUkY4b2N6RXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWpZV05vWlN3Z2FTQTlJSFF1WVd4c2IyTmhkR1ZVWlhoMGRYSmxWVzVwZENncE93b2dJQ0FnYmxzd1hTQWhQVDBnYVNBbUppQW9jekV1ZFc1cFptOXliVEZwS0hSb2FYTXVZV1JrY2l3Z2FTa3NJRzViTUYwZ1BTQnBLU3dnZEM1elpYUlVaWGgwZFhKbE0wUW9aU0I4ZkNCQlpDd2dhU2s3Q24wS1puVnVZM1JwYjI0Z1RsOG9jekVzSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVqWVdOb1pTd2dhU0E5SUhRdVlXeHNiMk5oZEdWVVpYaDBkWEpsVlc1cGRDZ3BPd29nSUNBZ2Jsc3dYU0FoUFQwZ2FTQW1KaUFvY3pFdWRXNXBabTl5YlRGcEtIUm9hWE11WVdSa2Npd2dhU2tzSUc1Yk1GMGdQU0JwS1N3Z2RDNXpaWFJVWlhoMGRYSmxRM1ZpWlNobElIeDhJRkprTENCcEtUc0tmUXBtZFc1amRHbHZiaUJQWHloek1Td2daU3dnZENrZ2V3b2dJQ0FnYkdWMElHNGdQU0IwYUdsekxtTmhZMmhsTENCcElEMGdkQzVoYkd4dlkyRjBaVlJsZUhSMWNtVlZibWwwS0NrN0NpQWdJQ0J1V3pCZElDRTlQU0JwSUNZbUlDaHpNUzUxYm1sbWIzSnRNV2tvZEdocGN5NWhaR1J5TENCcEtTd2dibHN3WFNBOUlHa3BMQ0IwTG5ObGRGUmxlSFIxY21VeVJFRnljbUY1S0dVZ2ZId2dkMlFzSUdrcE93cDlDbVoxYm1OMGFXOXVJRVpmS0hNeEtTQjdDaUFnSUNCemQybDBZMmdvY3pFcGV3b2dJQ0FnSUNBZ0lHTmhjMlVnTlRFeU5qb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSGhmT3dvZ0lDQWdJQ0FnSUdOaGMyVWdNelUyTmpRNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJYenNLSUNBZ0lDQWdJQ0JqWVhObElETTFOalkxT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VWODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJOam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxZk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpVMk56UTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJUWHpzS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjMU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZbDg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkzTmpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFVmZPd29nSUNBZ0lDQWdJR05oYzJVZ05URXlORG9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN3T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ZGODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJOem9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN4T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2QxODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJPRG9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN5T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1FWODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJPVG9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN6T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VsODdDaUFnSUNBZ0lDQWdZMkZ6WlNBMU1USTFPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUTE4N0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpJNU5Eb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJmT3dvZ0lDQWdJQ0FnSUdOaGMyVWdNell5T1RVNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQk1YenNLSUNBZ0lDQWdJQ0JqWVhObElETTJNamsyT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1NWODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTNPRG9LSUNBZ0lDQWdJQ0JqWVhObElETTJNVGs0T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell5T1RnNkNpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpNd05qb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qZ3lPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVlY4N0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZM09Ub0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk1qazVPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXpNRGM2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCRVh6c0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qZ3dPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXpNREE2Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOak13T0RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTWprek9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUbDg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOakk0T1RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTXpBek9nb2dJQ0FnSUNBZ0lHTmhjMlVnTXpZek1URTZDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qSTVNam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5Zk93b2dJQ0FnZlFwOUNtWjFibU4wYVc5dUlFSmZLSE14TENCbEtTQjdDaUFnSUNCek1TNTFibWxtYjNKdE1XWjJLSFJvYVhNdVlXUmtjaXdnWlNrN0NuMEtablZ1WTNScGIyNGdlbDhvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ1lYTW9aU3dnZEdocGN5NXphWHBsTENBeUtUc0tJQ0FnSUhNeExuVnVhV1p2Y20weVpuWW9kR2hwY3k1aFpHUnlMQ0IwS1RzS2ZRcG1kVzVqZEdsdmJpQldYeWh6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCaGN5aGxMQ0IwYUdsekxuTnBlbVVzSURNcE93b2dJQ0FnY3pFdWRXNXBabTl5YlRObWRpaDBhR2x6TG1Ga1pISXNJSFFwT3dwOUNtWjFibU4wYVc5dUlHdGZLSE14TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SUdGektHVXNJSFJvYVhNdWMybDZaU3dnTkNrN0NpQWdJQ0J6TVM1MWJtbG1iM0p0TkdaMktIUm9hWE11WVdSa2Npd2dkQ2s3Q24wS1puVnVZM1JwYjI0Z1NGOG9jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnWVhNb1pTd2dkR2hwY3k1emFYcGxMQ0EwS1RzS0lDQWdJSE14TG5WdWFXWnZjbTFOWVhSeWFYZ3labllvZEdocGN5NWhaR1J5TENBaE1Td2dkQ2s3Q24wS1puVnVZM1JwYjI0Z1IxOG9jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnWVhNb1pTd2dkR2hwY3k1emFYcGxMQ0E1S1RzS0lDQWdJSE14TG5WdWFXWnZjbTFOWVhSeWFYZ3pabllvZEdocGN5NWhaR1J5TENBaE1Td2dkQ2s3Q24wS1puVnVZM1JwYjI0Z1YxOG9jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnWVhNb1pTd2dkR2hwY3k1emFYcGxMQ0F4TmlrN0NpQWdJQ0J6TVM1MWJtbG1iM0p0VFdGMGNtbDROR1oyS0hSb2FYTXVZV1JrY2l3Z0lURXNJSFFwT3dwOUNtWjFibU4wYVc5dUlGaGZLSE14TENCbEtTQjdDaUFnSUNCek1TNTFibWxtYjNKdE1XbDJLSFJvYVhNdVlXUmtjaXdnWlNrN0NuMEtablZ1WTNScGIyNGdjVjhvY3pFc0lHVXBJSHNLSUNBZ0lITXhMblZ1YVdadmNtMHlhWFlvZEdocGN5NWhaR1J5TENCbEtUc0tmUXBtZFc1amRHbHZiaUJaWHloek1Td2daU2tnZXdvZ0lDQWdjekV1ZFc1cFptOXliVE5wZGloMGFHbHpMbUZrWkhJc0lHVXBPd3A5Q21aMWJtTjBhVzl1SUZwZktITXhMQ0JsS1NCN0NpQWdJQ0J6TVM1MWJtbG1iM0p0TkdsMktIUm9hWE11WVdSa2Npd2daU2s3Q24wS1puVnVZM1JwYjI0Z1NsOG9jekVzSUdVcElIc0tJQ0FnSUhNeExuVnVhV1p2Y20weGRXbDJLSFJvYVhNdVlXUmtjaXdnWlNrN0NuMEtablZ1WTNScGIyNGdKRjhvY3pFc0lHVXBJSHNLSUNBZ0lITXhMblZ1YVdadmNtMHlkV2wyS0hSb2FYTXVZV1JrY2l3Z1pTazdDbjBLWm5WdVkzUnBiMjRnUzE4b2N6RXNJR1VwSUhzS0lDQWdJSE14TG5WdWFXWnZjbTB6ZFdsMktIUm9hWE11WVdSa2Npd2daU2s3Q24wS1puVnVZM1JwYjI0Z1VWOG9jekVzSUdVcElIc0tJQ0FnSUhNeExuVnVhV1p2Y20wMGRXbDJLSFJvYVhNdVlXUmtjaXdnWlNrN0NuMEtablZ1WTNScGIyNGdhbDhvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1allXTm9aU3dnYVNBOUlHVXViR1Z1WjNSb0xDQnlJRDBnZVdFb2RDd2dhU2s3Q2lBZ0lDQm5kQ2h1TENCeUtTQjhmQ0FvY3pFdWRXNXBabTl5YlRGcGRpaDBhR2x6TG1Ga1pISXNJSElwTENCZmRDaHVMQ0J5S1NrN0NpQWdJQ0JtYjNJb2JHVjBJR0VnUFNBd095QmhJQ0U5UFNCcE95QXJLMkVwZEM1elpYUlVaWGgwZFhKbE1rUW9aVnRoWFNCOGZDQlVaQ3dnY2x0aFhTazdDbjBLWm5WdVkzUnBiMjRnWlRBb2N6RXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWpZV05vWlN3Z2FTQTlJR1V1YkdWdVozUm9MQ0J5SUQwZ2VXRW9kQ3dnYVNrN0NpQWdJQ0JuZENodUxDQnlLU0I4ZkNBb2N6RXVkVzVwWm05eWJURnBkaWgwYUdsekxtRmtaSElzSUhJcExDQmZkQ2h1TENCeUtTazdDaUFnSUNCbWIzSW9iR1YwSUdFZ1BTQXdPeUJoSUNFOVBTQnBPeUFySzJFcGRDNXpaWFJVWlhoMGRYSmxNMFFvWlZ0aFhTQjhmQ0JCWkN3Z2NsdGhYU2s3Q24wS1puVnVZM1JwYjI0Z2REQW9jekVzSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVqWVdOb1pTd2dhU0E5SUdVdWJHVnVaM1JvTENCeUlEMGdlV0VvZEN3Z2FTazdDaUFnSUNCbmRDaHVMQ0J5S1NCOGZDQW9jekV1ZFc1cFptOXliVEZwZGloMGFHbHpMbUZrWkhJc0lISXBMQ0JmZENodUxDQnlLU2s3Q2lBZ0lDQm1iM0lvYkdWMElHRWdQU0F3T3lCaElDRTlQU0JwT3lBcksyRXBkQzV6WlhSVVpYaDBkWEpsUTNWaVpTaGxXMkZkSUh4OElGSmtMQ0J5VzJGZEtUc0tmUXBtZFc1amRHbHZiaUJ1TUNoek1Td2daU3dnZENrZ2V3b2dJQ0FnYkdWMElHNGdQU0IwYUdsekxtTmhZMmhsTENCcElEMGdaUzVzWlc1bmRHZ3NJSElnUFNCNVlTaDBMQ0JwS1RzS0lDQWdJR2QwS0c0c0lISXBJSHg4SUNoek1TNTFibWxtYjNKdE1XbDJLSFJvYVhNdVlXUmtjaXdnY2lrc0lGOTBLRzRzSUhJcEtUc0tJQ0FnSUdadmNpaHNaWFFnWVNBOUlEQTdJR0VnSVQwOUlHazdJQ3NyWVNsMExuTmxkRlJsZUhSMWNtVXlSRUZ5Y21GNUtHVmJZVjBnZkh3Z2QyUXNJSEpiWVYwcE93cDlDbVoxYm1OMGFXOXVJR2t3S0hNeEtTQjdDaUFnSUNCemQybDBZMmdvY3pFcGV3b2dJQ0FnSUNBZ0lHTmhjMlVnTlRFeU5qb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRUpmT3dvZ0lDQWdJQ0FnSUdOaGMyVWdNelUyTmpRNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjZYenNLSUNBZ0lDQWdJQ0JqWVhObElETTFOalkxT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ZsODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJOam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd0Zk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpVMk56UTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJJWHpzS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjMU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSMTg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkzTmpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGZGZPd29nSUNBZ0lDQWdJR05oYzJVZ05URXlORG9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN3T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1dGODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJOem9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN4T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NWODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJPRG9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN5T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1dWODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTJPVG9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamN6T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1dsODdDaUFnSUNBZ0lDQWdZMkZ6WlNBMU1USTFPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnU2w4N0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpJNU5Eb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ1JmT3dvZ0lDQWdJQ0FnSUdOaGMyVWdNell5T1RVNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkxYenNLSUNBZ0lDQWdJQ0JqWVhObElETTJNamsyT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VWODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTNPRG9LSUNBZ0lDQWdJQ0JqWVhObElETTJNVGs0T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell5T1RnNkNpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpNd05qb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qZ3lPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYWw4N0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZM09Ub0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk1qazVPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXpNRGM2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbE1Ec0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qZ3dPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXpNREE2Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOak13T0RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTWprek9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkREE3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOakk0T1RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTXpBek9nb2dJQ0FnSUNBZ0lHTmhjMlVnTXpZek1URTZDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qSTVNam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0d093b2dJQ0FnZlFwOUNuWmhjaUIyYnlBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVhV1FnUFNCbExDQjBhR2x6TG1Ga1pISWdQU0J1TENCMGFHbHpMbU5oWTJobElEMGdXMTBzSUhSb2FYTXVjMlYwVm1Gc2RXVWdQU0JHWHloMExuUjVjR1VwT3dvZ0lDQWdmUXA5TENCNWJ5QTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lIUm9hWE11YVdRZ1BTQmxMQ0IwYUdsekxtRmtaSElnUFNCdUxDQjBhR2x6TG1OaFkyaGxJRDBnVzEwc0lIUm9hWE11YzJsNlpTQTlJSFF1YzJsNlpTd2dkR2hwY3k1elpYUldZV3gxWlNBOUlHa3dLSFF1ZEhsd1pTazdDaUFnSUNCOUNuMHNJRTF2SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwWkNBOUlHVXNJSFJvYVhNdWMyVnhJRDBnVzEwc0lIUm9hWE11YldGd0lEMGdlMzA3Q2lBZ0lDQjlDaUFnSUNCelpYUldZV3gxWlNobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbk5sY1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhJZ1BTQXdMQ0JoSUQwZ2FTNXNaVzVuZEdnN0lISWdJVDA5SUdFN0lDc3JjaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2FWdHlYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2J5NXpaWFJXWVd4MVpTaGxMQ0IwVzI4dWFXUmRMQ0J1S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q24wc0lGRmhJRDBnTHloY2R5c3BLRnhkS1Q4b1hGdDhYQzRwUHk5bk93cG1kVzVqZEdsdmJpQk5hQ2h6TVN3Z1pTa2dld29nSUNBZ2N6RXVjMlZ4TG5CMWMyZ29aU2tzSUhNeExtMWhjRnRsTG1sa1hTQTlJR1U3Q24wS1puVnVZM1JwYjI0Z2N6QW9jekVzSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1SUQwZ2N6RXVibUZ0WlN3Z2FTQTlJRzR1YkdWdVozUm9Pd29nSUNBZ1ptOXlLRkZoTG14aGMzUkpibVJsZUNBOUlEQTdPeWw3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0JSWVM1bGVHVmpLRzRwTENCaElEMGdVV0V1YkdGemRFbHVaR1Y0TENCdklEMGdjbHN4WFN3Z1l5QTlJSEpiTWwwZ1BUMDlJQ0pkSWl3Z2JDQTlJSEpiTTEwN0NpQWdJQ0FnSUNBZ2FXWWdLR01nSmlZZ0tHOGdQU0J2SUh3Z01Da3NJR3dnUFQwOUlIWnZhV1FnTUNCOGZDQnNJRDA5UFNBaVd5SWdKaVlnWVNBcklESWdQVDA5SUdrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnVFdnb2RDd2diQ0E5UFQwZ2RtOXBaQ0F3SUQ4Z2JtVjNJSFp2S0c4c0lITXhMQ0JsS1NBNklHNWxkeUI1YnlodkxDQnpNU3dnWlNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJSFF1YldGd1cyOWRPd29nSUNBZ0lDQWdJQ0FnSUNCMUlEMDlQU0IyYjJsa0lEQWdKaVlnS0hVZ1BTQnVaWGNnVFc4b2J5a3NJRTFvS0hRc0lIVXBLU3dnZENBOUlIVTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRcDlDblpoY2lCeGFTQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ4SUQwZ1cxMHNJSFJvYVhNdWJXRndJRDBnZTMwN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCbExtZGxkRkJ5YjJkeVlXMVFZWEpoYldWMFpYSW9kQ3dnWlM1QlExUkpWa1ZmVlU1SlJrOVNUVk1wT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQTdJR2tnUENCdU95QXJLMmtwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHVXVaMlYwUVdOMGFYWmxWVzVwWm05eWJTaDBMQ0JwS1N3Z1lTQTlJR1V1WjJWMFZXNXBabTl5YlV4dlkyRjBhVzl1S0hRc0lISXVibUZ0WlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSE13S0hJc0lHRXNJSFJvYVhNcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSE5sZEZaaGJIVmxLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSb2FYTXViV0Z3VzNSZE93b2dJQ0FnSUNBZ0lISWdJVDA5SUhadmFXUWdNQ0FtSmlCeUxuTmxkRlpoYkhWbEtHVXNJRzRzSUdrcE93b2dJQ0FnZlFvZ0lDQWdjMlYwVDNCMGFXOXVZV3dvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEZ0dVhUc0tJQ0FnSUNBZ0lDQnBJQ0U5UFNCMmIybGtJREFnSmlZZ2RHaHBjeTV6WlhSV1lXeDFaU2hsTENCdUxDQnBLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUIxY0d4dllXUW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQXNJR0VnUFNCMExteGxibWQwYURzZ2NpQWhQVDBnWVRzZ0t5dHlLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCMFczSmRMQ0JqSUQwZ2JsdHZMbWxrWFRzS0lDQWdJQ0FnSUNBZ0lDQWdZeTV1WldWa2MxVndaR0YwWlNBaFBUMGdJVEVnSmlZZ2J5NXpaWFJXWVd4MVpTaGxMQ0JqTG5aaGJIVmxMQ0JwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ2MyVnhWMmwwYUZaaGJIVmxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0JsTG14bGJtZDBhRHNnYVNBaFBUMGdjanNnS3l0cEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0JsVzJsZE93b2dJQ0FnSUNBZ0lDQWdJQ0JoTG1sa0lHbHVJSFFnSmlZZ2JpNXdkWE5vS0dFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2Jqc0tJQ0FnSUgwS2ZUc0tablZ1WTNScGIyNGdVMmdvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdjekV1WTNKbFlYUmxVMmhoWkdWeUtHVXBPd29nSUNBZ2NtVjBkWEp1SUhNeExuTm9ZV1JsY2xOdmRYSmpaU2h1TENCMEtTd2djekV1WTI5dGNHbHNaVk5vWVdSbGNpaHVLU3dnYmpzS2ZRcDJZWElnY2pBZ1BTQXdPd3BtZFc1amRHbHZiaUJoTUNoek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQnpNUzV6Y0d4cGRDaGdDbUFwTENCdUlEMGdXMTBzSUdrZ1BTQk5ZWFJvTG0xaGVDaGxJQzBnTml3Z01Da3NJSElnUFNCTllYUm9MbTFwYmlobElDc2dOaXdnZEM1c1pXNW5kR2dwT3dvZ0lDQWdabTl5S0d4bGRDQmhJRDBnYVRzZ1lTQThJSEk3SUdFckt5bDdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQmhJQ3NnTVRzS0lDQWdJQ0FnSUNCdUxuQjFjMmdvWUNSN2J5QTlQVDBnWlNBL0lDSStJaUE2SUNJZ0luMGdKSHR2ZlRvZ0pIdDBXMkZkZldBcE93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlHNHVhbTlwYmloZ0NtQXBPd3A5Q21aMWJtTjBhVzl1SUc4d0tITXhLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlGRmxMbWRsZEZCeWFXMWhjbWxsY3loUlpTNTNiM0pyYVc1blEyOXNiM0pUY0dGalpTa3NJSFFnUFNCUlpTNW5aWFJRY21sdFlYSnBaWE1vY3pFcExDQnVPd29nSUNBZ2MzZHBkR05vS0dVZ1BUMDlJSFFnUHlCdUlEMGdJaUlnT2lCbElEMDlQU0JyY2lBbUppQjBJRDA5UFNCV2NpQS9JRzRnUFNBaVRHbHVaV0Z5UkdsemNHeGhlVkF6Vkc5TWFXNWxZWEpUVWtkQ0lpQTZJR1VnUFQwOUlGWnlJQ1ltSUhRZ1BUMDlJR3R5SUNZbUlDaHVJRDBnSWt4cGJtVmhjbE5TUjBKVWIweHBibVZoY2tScGMzQnNZWGxRTXlJcExDQnpNU2w3Q2lBZ0lDQWdJQ0FnWTJGelpTQk5iam9LSUNBZ0lDQWdJQ0JqWVhObElIWmhPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNKTWFXNWxZWEpVY21GdWMyWmxjazlGVkVZaUNpQWdJQ0FnSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnWTJGelpTQjJkRG9LSUNBZ0lDQWdJQ0JqWVhObElIRmpPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNKelVrZENWSEpoYm5ObVpYSlBSVlJHSWdvZ0lDQWdJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VSEp2WjNKaGJUb2dWVzV6ZFhCd2IzSjBaV1FnWTI5c2IzSWdjM0JoWTJVNklpd2djekVwTENCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lreHBibVZoY2xSeVlXNXpabVZ5VDBWVVJpSUtJQ0FnSUNBZ0lDQWdJQ0FnWFRzS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCaWFDaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCek1TNW5aWFJUYUdGa1pYSlFZWEpoYldWMFpYSW9aU3dnY3pFdVEwOU5VRWxNUlY5VFZFRlVWVk1wTENCcElEMGdjekV1WjJWMFUyaGhaR1Z5U1c1bWIweHZaeWhsS1M1MGNtbHRLQ2s3Q2lBZ0lDQnBaaUFvYmlBbUppQnBJRDA5UFNBaUlpa2djbVYwZFhKdUlDSWlPd29nSUNBZ2JHVjBJSElnUFNBdlJWSlNUMUk2SURBNktGeGtLeWt2TG1WNFpXTW9hU2s3Q2lBZ0lDQnBaaUFvY2lrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2NHRnljMlZKYm5Rb2Nsc3hYU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1ZEc5VmNIQmxja05oYzJVb0tTQXJJR0FLQ21BZ0t5QnBJQ3NnWUFvS1lDQXJJR0V3S0hNeExtZGxkRk5vWVdSbGNsTnZkWEpqWlNobEtTd2dZU2s3Q2lBZ0lDQjlJR1ZzYzJVZ2NtVjBkWEp1SUdrN0NuMEtablZ1WTNScGIyNGdZekFvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2J6QW9aU2s3Q2lBZ0lDQnlaWFIxY200Z1lIWmxZelFnSkh0ek1YMG9JSFpsWXpRZ2RtRnNkV1VnS1NCN0lISmxkSFZ5YmlBa2UzUmJNRjE5S0NBa2UzUmJNVjE5S0NCMllXeDFaU0FwSUNrN0lIMWdPd3A5Q21aMWJtTjBhVzl1SUd3d0tITXhMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2REc0tJQ0FnSUhOM2FYUmphQ2hsS1hzS0lDQWdJQ0FnSUNCallYTmxJR1JtT2dvZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnSWt4cGJtVmhjaUk3Q2lBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUdOaGMyVWdabVk2Q2lBZ0lDQWdJQ0FnSUNBZ0lIUWdQU0FpVW1WcGJtaGhjbVFpT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCallYTmxJSEJtT2dvZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnSWs5d2RHbHRhWHBsWkVOcGJtVnZiaUk3Q2lBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUdOaGMyVWdiV1k2Q2lBZ0lDQWdJQ0FnSUNBZ0lIUWdQU0FpUVVORlUwWnBiRzFwWXlJN0NpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lHTmhjMlVnWjJZNkNpQWdJQ0FnSUNBZ0lDQWdJSFFnUFNBaVEzVnpkRzl0SWpzS0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGQnliMmR5WVcwNklGVnVjM1Z3Y0c5eWRHVmtJSFJ2Ym1WTllYQndhVzVuT2lJc0lHVXBMQ0IwSUQwZ0lreHBibVZoY2lJN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z0luWmxZek1nSWlBcklITXhJQ3NnSWlnZ2RtVmpNeUJqYjJ4dmNpQXBJSHNnY21WMGRYSnVJQ0lnS3lCMElDc2dJbFJ2Ym1WTllYQndhVzVuS0NCamIyeHZjaUFwT3lCOUlqc0tmUXBtZFc1amRHbHZiaUJvTUNoek1Ta2dld29nSUNBZ2NtVjBkWEp1SUZzS0lDQWdJQ0FnSUNCek1TNWxlSFJsYm5OcGIyNUVaWEpwZG1GMGFYWmxjeUI4ZkNCek1TNWxiblpOWVhCRGRXSmxWVlpJWldsbmFIUWdmSHdnY3pFdVluVnRjRTFoY0NCOGZDQnpNUzV1YjNKdFlXeE5ZWEJVWVc1blpXNTBVM0JoWTJVZ2ZId2djekV1WTJ4bFlYSmpiMkYwVG05eWJXRnNUV0Z3SUh4OElITXhMbVpzWVhSVGFHRmthVzVuSUh4OElITXhMbk5vWVdSbGNrbEVJRDA5UFNBaWNHaDVjMmxqWVd3aUlEOGdJaU5sZUhSbGJuTnBiMjRnUjB4ZlQwVlRYM04wWVc1a1lYSmtYMlJsY21sMllYUnBkbVZ6SURvZ1pXNWhZbXhsSWlBNklDSWlMQW9nSUNBZ0lDQWdJQ2h6TVM1bGVIUmxibk5wYjI1R2NtRm5SR1Z3ZEdnZ2ZId2djekV1Ykc5bllYSnBkR2h0YVdORVpYQjBhRUoxWm1abGNpa2dKaVlnY3pFdWNtVnVaR1Z5WlhKRmVIUmxibk5wYjI1R2NtRm5SR1Z3ZEdnZ1B5QWlJMlY0ZEdWdWMybHZiaUJIVEY5RldGUmZabkpoWjE5a1pYQjBhQ0E2SUdWdVlXSnNaU0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQnpNUzVsZUhSbGJuTnBiMjVFY21GM1FuVm1abVZ5Y3lBbUppQnpNUzV5Wlc1a1pYSmxja1Y0ZEdWdWMybHZia1J5WVhkQ2RXWm1aWEp6SUQ4Z0lpTmxlSFJsYm5OcGIyNGdSMHhmUlZoVVgyUnlZWGRmWW5WbVptVnljeUE2SUhKbGNYVnBjbVVpSURvZ0lpSXNDaUFnSUNBZ0lDQWdLSE14TG1WNGRHVnVjMmx2YmxOb1lXUmxjbFJsZUhSMWNtVk1UMFFnZkh3Z2N6RXVaVzUyVFdGd0lIeDhJSE14TG5SeVlXNXpiV2x6YzJsdmJpa2dKaVlnY3pFdWNtVnVaR1Z5WlhKRmVIUmxibk5wYjI1VGFHRmtaWEpVWlhoMGRYSmxURzlrSUQ4Z0lpTmxlSFJsYm5OcGIyNGdSMHhmUlZoVVgzTm9ZV1JsY2w5MFpYaDBkWEpsWDJ4dlpDQTZJR1Z1WVdKc1pTSWdPaUFpSWdvZ0lDQWdYUzVtYVd4MFpYSW9kbk1wTG1wdmFXNG9ZQXBnS1RzS2ZRcG1kVzVqZEdsdmJpQjFNQ2h6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0JiWFRzS0lDQWdJR1p2Y2loc1pYUWdkQ0JwYmlCek1TbDdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQnpNVnQwWFRzS0lDQWdJQ0FnSUNCdUlDRTlQU0FoTVNBbUppQmxMbkIxYzJnb0lpTmtaV1pwYm1VZ0lpQXJJSFFnS3lBaUlDSWdLeUJ1S1RzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCbExtcHZhVzRvWUFwZ0tUc0tmUXBtZFc1amRHbHZiaUJrTUNoek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjdmU3dnYmlBOUlITXhMbWRsZEZCeWIyZHlZVzFRWVhKaGJXVjBaWElvWlN3Z2N6RXVRVU5VU1ZaRlgwRlVWRkpKUWxWVVJWTXBPd29nSUNBZ1ptOXlLR3hsZENCcElEMGdNRHNnYVNBOElHNDdJR2tyS3lsN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCek1TNW5aWFJCWTNScGRtVkJkSFJ5YVdJb1pTd2dhU2tzSUdFZ1BTQnlMbTVoYldVc0lHOGdQU0F4T3dvZ0lDQWdJQ0FnSUhJdWRIbHdaU0E5UFQwZ2N6RXVSa3hQUVZSZlRVRlVNaUFtSmlBb2J5QTlJRElwTENCeUxuUjVjR1VnUFQwOUlITXhMa1pNVDBGVVgwMUJWRE1nSmlZZ0tHOGdQU0F6S1N3Z2NpNTBlWEJsSUQwOVBTQnpNUzVHVEU5QlZGOU5RVlEwSUNZbUlDaHZJRDBnTkNrc0lIUmJZVjBnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklISXVkSGx3WlN3S0lDQWdJQ0FnSUNBZ0lDQWdiRzlqWVhScGIyNDZJSE14TG1kbGRFRjBkSEpwWWt4dlkyRjBhVzl1S0dVc0lHRXBMQW9nSUNBZ0lDQWdJQ0FnSUNCc2IyTmhkR2x2YmxOcGVtVTZJRzhLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhRN0NuMEtablZ1WTNScGIyNGdkbk1vY3pFcElIc0tJQ0FnSUhKbGRIVnliaUJ6TVNBaFBUMGdJaUk3Q24wS1puVnVZM1JwYjI0Z1JXZ29jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnWlM1dWRXMVRjRzkwVEdsbmFIUlRhR0ZrYjNkeklDc2daUzV1ZFcxVGNHOTBUR2xuYUhSTllYQnpJQzBnWlM1dWRXMVRjRzkwVEdsbmFIUlRhR0ZrYjNkelYybDBhRTFoY0hNN0NpQWdJQ0J5WlhSMWNtNGdjekV1Y21Wd2JHRmpaU2d2VGxWTlgwUkpVbDlNU1VkSVZGTXZaeXdnWlM1dWRXMUVhWEpNYVdkb2RITXBMbkpsY0d4aFkyVW9MMDVWVFY5VFVFOVVYMHhKUjBoVVV5OW5MQ0JsTG01MWJWTndiM1JNYVdkb2RITXBMbkpsY0d4aFkyVW9MMDVWVFY5VFVFOVVYMHhKUjBoVVgwMUJVRk12Wnl3Z1pTNXVkVzFUY0c5MFRHbG5hSFJOWVhCektTNXlaWEJzWVdObEtDOU9WVTFmVTFCUFZGOU1TVWRJVkY5RFQwOVNSRk12Wnl3Z2RDa3VjbVZ3YkdGalpTZ3ZUbFZOWDFKRlExUmZRVkpGUVY5TVNVZElWRk12Wnl3Z1pTNXVkVzFTWldOMFFYSmxZVXhwWjJoMGN5a3VjbVZ3YkdGalpTZ3ZUbFZOWDFCUFNVNVVYMHhKUjBoVVV5OW5MQ0JsTG01MWJWQnZhVzUwVEdsbmFIUnpLUzV5WlhCc1lXTmxLQzlPVlUxZlNFVk5TVjlNU1VkSVZGTXZaeXdnWlM1dWRXMUlaVzFwVEdsbmFIUnpLUzV5WlhCc1lXTmxLQzlPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNdlp5d2daUzV1ZFcxRWFYSk1hV2RvZEZOb1lXUnZkM01wTG5KbGNHeGhZMlVvTDA1VlRWOVRVRTlVWDB4SlIwaFVYMU5JUVVSUFYxTmZWMGxVU0Y5TlFWQlRMMmNzSUdVdWJuVnRVM0J2ZEV4cFoyaDBVMmhoWkc5M2MxZHBkR2hOWVhCektTNXlaWEJzWVdObEtDOU9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUTDJjc0lHVXViblZ0VTNCdmRFeHBaMmgwVTJoaFpHOTNjeWt1Y21Wd2JHRmpaU2d2VGxWTlgxQlBTVTVVWDB4SlIwaFVYMU5JUVVSUFYxTXZaeXdnWlM1dWRXMVFiMmx1ZEV4cFoyaDBVMmhoWkc5M2N5azdDbjBLWm5WdVkzUnBiMjRnVkdnb2N6RXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQnpNUzV5WlhCc1lXTmxLQzlPVlUxZlEweEpVRkJKVGtkZlVFeEJUa1ZUTDJjc0lHVXViblZ0UTJ4cGNIQnBibWRRYkdGdVpYTXBMbkpsY0d4aFkyVW9MMVZPU1U5T1gwTk1TVkJRU1U1SFgxQk1RVTVGVXk5bkxDQmxMbTUxYlVOc2FYQndhVzVuVUd4aGJtVnpJQzBnWlM1dWRXMURiR2x3U1c1MFpYSnpaV04wYVc5dUtUc0tmUXAyWVhJZ1pqQWdQU0F2WGxzZ1hIUmRLaU5wYm1Oc2RXUmxJQ3M4S0Z0Y2QxeGtMaTlkS3lrK0wyZHRPd3BtZFc1amRHbHZiaUJUYnloek1Ta2dld29nSUNBZ2NtVjBkWEp1SUhNeExuSmxjR3hoWTJVb1pqQXNJRzB3S1RzS2ZRcDJZWElnY0RBZ1BTQnVaWGNnVFdGd0tGc0tJQ0FnSUZzS0lDQWdJQ0FnSUNBaVpXNWpiMlJwYm1kelgyWnlZV2R0Wlc1MElpd0tJQ0FnSUNBZ0lDQWlZMjlzYjNKemNHRmpaVjltY21GbmJXVnVkQ0lLSUNBZ0lGMHNDaUFnSUNCYkNpQWdJQ0FnSUNBZ0ltVnVZMjlrYVc1bmMxOXdZWEp6WDJaeVlXZHRaVzUwSWl3S0lDQWdJQ0FnSUNBaVkyOXNiM0p6Y0dGalpWOXdZWEp6WDJaeVlXZHRaVzUwSWdvZ0lDQWdYU3dLSUNBZ0lGc0tJQ0FnSUNBZ0lDQWliM1YwY0hWMFgyWnlZV2R0Wlc1MElpd0tJQ0FnSUNBZ0lDQWliM0JoY1hWbFgyWnlZV2R0Wlc1MElnb2dJQ0FnWFFwZEtUc0tablZ1WTNScGIyNGdiVEFvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2EyVmJaVjA3Q2lBZ0lDQnBaaUFvZENBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQndNQzVuWlhRb1pTazdDaUFnSUNBZ0lDQWdhV1lnS0c0Z0lUMDlJSFp2YVdRZ01Da2dkQ0E5SUd0bFcyNWRMQ0JqYjI1emIyeGxMbmRoY200b0oxUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRk5vWVdSbGNpQmphSFZ1YXlBaUpYTWlJR2hoY3lCaVpXVnVJR1JsY0hKbFkyRjBaV1F1SUZWelpTQWlKWE1pSUdsdWMzUmxZV1F1Snl3Z1pTd2diaWs3Q2lBZ0lDQWdJQ0FnWld4elpTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0lrTmhiaUJ1YjNRZ2NtVnpiMngyWlNBamFXNWpiSFZrWlNBOElpQXJJR1VnS3lBaVBpSXBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJRk52S0hRcE93cDlDblpoY2lCbk1DQTlJQzhqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBYSE1yWm05eVhITXFYQ2hjY3lwcGJuUmNjeXRwWEhNcVBWeHpLaWhjWkNzcFhITXFPMXh6S21sY2N5bzhYSE1xS0Z4a0t5bGNjeW83WEhNcWFWeHpLbHdyWEN0Y2N5cGNLVnh6S25zb1cxeHpYRk5kS3o4cGZWeHpLeU53Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmWlc1a0wyYzdDbVoxYm1OMGFXOXVJSGRvS0hNeEtTQjdDaUFnSUNCeVpYUjFjbTRnY3pFdWNtVndiR0ZqWlNobk1Dd2dYekFwT3dwOUNtWjFibU4wYVc5dUlGOHdLSE14TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJQ0lpT3dvZ0lDQWdabTl5S0d4bGRDQnlJRDBnY0dGeWMyVkpiblFvWlNrN0lISWdQQ0J3WVhKelpVbHVkQ2gwS1RzZ2Npc3JLV2tnS3owZ2JpNXlaWEJzWVdObEtDOWNXMXh6S21sY2N5cGNYUzluTENBaVd5QWlJQ3NnY2lBcklDSWdYU0lwTG5KbGNHeGhZMlVvTDFWT1VrOU1URVZFWDB4UFQxQmZTVTVFUlZndlp5d2djaWs3Q2lBZ0lDQnlaWFIxY200Z2FUc0tmUXBtZFc1amRHbHZiaUJCYUNoek1Ta2dld29nSUNBZ2JHVjBJR1VnUFNBaWNISmxZMmx6YVc5dUlDSWdLeUJ6TVM1d2NtVmphWE5wYjI0Z0t5QmdJR1pzYjJGME93cHdjbVZqYVhOcGIyNGdZQ0FySUhNeExuQnlaV05wYzJsdmJpQXJJQ0lnYVc1ME95STdDaUFnSUNCeVpYUjFjbTRnY3pFdWNISmxZMmx6YVc5dUlEMDlQU0FpYUdsbmFIQWlJRDhnWlNBclBTQmdDaU5rWldacGJtVWdTRWxIU0Y5UVVrVkRTVk5KVDA1Z0lEb2djekV1Y0hKbFkybHphVzl1SUQwOVBTQWliV1ZrYVhWdGNDSWdQeUJsSUNzOUlHQUtJMlJsWm1sdVpTQk5SVVJKVlUxZlVGSkZRMGxUU1U5T1lDQTZJSE14TG5CeVpXTnBjMmx2YmlBOVBUMGdJbXh2ZDNBaUlDWW1JQ2hsSUNzOUlHQUtJMlJsWm1sdVpTQk1UMWRmVUZKRlEwbFRTVTlPWUNrc0lHVTdDbjBLWm5WdVkzUnBiMjRnZURBb2N6RXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ0lsTklRVVJQVjAxQlVGOVVXVkJGWDBKQlUwbERJanNLSUNBZ0lISmxkSFZ5YmlCek1TNXphR0ZrYjNkTllYQlVlWEJsSUQwOVBTQmpaQ0EvSUdVZ1BTQWlVMGhCUkU5WFRVRlFYMVJaVUVWZlVFTkdJaUE2SUhNeExuTm9ZV1J2ZDAxaGNGUjVjR1VnUFQwOUlFZGtJRDhnWlNBOUlDSlRTRUZFVDFkTlFWQmZWRmxRUlY5UVEwWmZVMDlHVkNJZ09pQnpNUzV6YUdGa2IzZE5ZWEJVZVhCbElEMDlQU0J3YmlBbUppQW9aU0E5SUNKVFNFRkVUMWROUVZCZlZGbFFSVjlXVTAwaUtTd2daVHNLZlFwbWRXNWpkR2x2YmlCMk1DaHpNU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQWlSVTVXVFVGUVgxUlpVRVZmUTFWQ1JTSTdDaUFnSUNCcFppQW9jekV1Wlc1MlRXRndLU0J6ZDJsMFkyZ29jekV1Wlc1MlRXRndUVzlrWlNsN0NpQWdJQ0FnSUNBZ1kyRnpaU0I2YmpvS0lDQWdJQ0FnSUNCallYTmxJR05wT2dvZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnSWtWT1ZrMUJVRjlVV1ZCRlgwTlZRa1VpT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCallYTmxJRlp6T2dvZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnSWtWT1ZrMUJVRjlVV1ZCRlgwTlZRa1ZmVlZZaU93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQmxPd3A5Q21aMWJtTjBhVzl1SUhrd0tITXhLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlDSkZUbFpOUVZCZlRVOUVSVjlTUlVaTVJVTlVTVTlPSWpzS0lDQWdJR2xtSUNoek1TNWxiblpOWVhBcElITjNhWFJqYUNoek1TNWxiblpOWVhCTmIyUmxLWHNLSUNBZ0lDQWdJQ0JqWVhObElHTnBPZ29nSUNBZ0lDQWdJQ0FnSUNCbElEMGdJa1ZPVmsxQlVGOU5UMFJGWDFKRlJsSkJRMVJKVDA0aU93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQmxPd3A5Q21aMWJtTjBhVzl1SUUwd0tITXhLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlDSkZUbFpOUVZCZlFreEZUa1JKVGtkZlRrOU9SU0k3Q2lBZ0lDQnBaaUFvY3pFdVpXNTJUV0Z3S1NCemQybDBZMmdvY3pFdVkyOXRZbWx1WlNsN0NpQWdJQ0FnSUNBZ1kyRnpaU0I0WVRvS0lDQWdJQ0FnSUNBZ0lDQWdaU0E5SUNKRlRsWk5RVkJmUWt4RlRrUkpUa2RmVFZWTVZFbFFURmtpT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCallYTmxJR2htT2dvZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnSWtWT1ZrMUJVRjlDVEVWT1JFbE9SMTlOU1ZnaU93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUhWbU9nb2dJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ0lrVk9WazFCVUY5Q1RFVk9SRWxPUjE5QlJFUWlPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJsT3dwOUNtWjFibU4wYVc5dUlGTXdLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJSE14TG1WdWRrMWhjRU4xWW1WVlZraGxhV2RvZERzS0lDQWdJR2xtSUNobElEMDlQU0J1ZFd4c0tTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lHeGxkQ0IwSUQwZ1RXRjBhQzVzYjJjeUtHVXBJQzBnTWl3Z2JpQTlJREVnTHlCbE93b2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0IwWlhobGJGZHBaSFJvT2lBeElDOGdLRE1nS2lCTllYUm9MbTFoZUNoTllYUm9MbkJ2ZHlneUxDQjBLU3dnTnlBcUlERTJLU2tzQ2lBZ0lDQWdJQ0FnZEdWNFpXeElaV2xuYUhRNklHNHNDaUFnSUNBZ0lDQWdiV0Y0VFdsd09pQjBDaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJR0l3S0hNeExDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUhNeExtZGxkRU52Ym5SbGVIUW9LU3dnY2lBOUlIUXVaR1ZtYVc1bGN5d2dZU0E5SUhRdWRtVnlkR1Y0VTJoaFpHVnlMQ0J2SUQwZ2RDNW1jbUZuYldWdWRGTm9ZV1JsY2l3Z1l5QTlJSGd3S0hRcExDQnNJRDBnZGpBb2RDa3NJR2dnUFNCNU1DaDBLU3dnZFNBOUlFMHdLSFFwTENCa0lEMGdVekFvZENrc0lHWWdQU0IwTG1selYyVmlSMHd5SUQ4Z0lpSWdPaUJvTUNoMEtTd2diU0E5SUhVd0tISXBMQ0JmSUQwZ2FTNWpjbVZoZEdWUWNtOW5jbUZ0S0Nrc0lHY3NJSEFzSUhZZ1BTQjBMbWRzYzJ4V1pYSnphVzl1SUQ4Z0lpTjJaWEp6YVc5dUlDSWdLeUIwTG1kc2MyeFdaWEp6YVc5dUlDc2dZQXBnSURvZ0lpSTdDaUFnSUNCMExtbHpVbUYzVTJoaFpHVnlUV0YwWlhKcFlXd2dQeUFvWnlBOUlGc0tJQ0FnSUNBZ0lDQWlJMlJsWm1sdVpTQlRTRUZFUlZKZlZGbFFSU0FpSUNzZ2RDNXphR0ZrWlhKVWVYQmxMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJRk5JUVVSRlVsOU9RVTFGSUNJZ0t5QjBMbk5vWVdSbGNrNWhiV1VzQ2lBZ0lDQWdJQ0FnYlFvZ0lDQWdYUzVtYVd4MFpYSW9kbk1wTG1wdmFXNG9ZQXBnS1N3Z1p5NXNaVzVuZEdnZ1BpQXdJQ1ltSUNobklDczlJR0FLWUNrc0lIQWdQU0JiQ2lBZ0lDQWdJQ0FnWml3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCVFNFRkVSVkpmVkZsUVJTQWlJQ3NnZEM1emFHRmtaWEpVZVhCbExBb2dJQ0FnSUNBZ0lDSWpaR1ZtYVc1bElGTklRVVJGVWw5T1FVMUZJQ0lnS3lCMExuTm9ZV1JsY2s1aGJXVXNDaUFnSUNBZ0lDQWdiUW9nSUNBZ1hTNW1hV3gwWlhJb2RuTXBMbXB2YVc0b1lBcGdLU3dnY0M1c1pXNW5kR2dnUGlBd0lDWW1JQ2h3SUNzOUlHQUtZQ2twSURvZ0tHY2dQU0JiQ2lBZ0lDQWdJQ0FnUVdnb2RDa3NDaUFnSUNBZ0lDQWdJaU5rWldacGJtVWdVMGhCUkVWU1gxUlpVRVVnSWlBcklIUXVjMmhoWkdWeVZIbHdaU3dLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0JUU0VGRVJWSmZUa0ZOUlNBaUlDc2dkQzV6YUdGa1pYSk9ZVzFsTEFvZ0lDQWdJQ0FnSUcwc0NpQWdJQ0FnSUNBZ2RDNXBibk4wWVc1amFXNW5JRDhnSWlOa1pXWnBibVVnVlZORlgwbE9VMVJCVGtOSlRrY2lJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXBibk4wWVc1amFXNW5RMjlzYjNJZ1B5QWlJMlJsWm1sdVpTQlZVMFZmU1U1VFZFRk9RMGxPUjE5RFQweFBVaUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblZ6WlVadlp5QW1KaUIwTG1adlp5QS9JQ0lqWkdWbWFXNWxJRlZUUlY5R1QwY2lJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTFjMlZHYjJjZ0ppWWdkQzVtYjJkRmVIQXlJRDhnSWlOa1pXWnBibVVnUms5SFgwVllVRElpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV0WVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpXNTJUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMFZPVmsxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtVnVkazFoY0NBL0lDSWpaR1ZtYVc1bElDSWdLeUJvSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVzYVdkb2RFMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOU1TVWRJVkUxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtRnZUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMEZQVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVluVnRjRTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlDVlUxUVRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVibTl5YldGc1RXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwNVBVazFCVEUxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtNXZjbTFoYkUxaGNFOWlhbVZqZEZOd1lXTmxJRDhnSWlOa1pXWnBibVVnVlZORlgwNVBVazFCVEUxQlVGOVBRa3BGUTFSVFVFRkRSU0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbTV2Y20xaGJFMWhjRlJoYm1kbGJuUlRjR0ZqWlNBL0lDSWpaR1ZtYVc1bElGVlRSVjlPVDFKTlFVeE5RVkJmVkVGT1IwVk9WRk5RUVVORklpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMFJKVTFCTVFVTkZUVVZPVkUxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtVnRhWE56YVhabFRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwVk5TVk5UU1ZaRlRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZVzVwYzI5MGNtOXdlU0EvSUNJalpHVm1hVzVsSUZWVFJWOUJUa2xUVDFSU1QxQlpJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZVzVwYzI5MGNtOXdlVTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlCVGtsVFQxUlNUMUJaVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVkyeGxZWEpqYjJGMFRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwTk1SVUZTUTA5QlZFMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlEVEVWQlVrTlBRVlJmVWs5VlIwaE9SVk5UVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVkyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDBOTVJVRlNRMDlCVkY5T1QxSk5RVXhOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1cGNtbGtaWE5qWlc1alpVMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOUpVa2xFUlZORFJVNURSVTFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwbFNTVVJGVTBORlRrTkZYMVJJU1VOTFRrVlRVMDFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Od1pXTjFiR0Z5VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDFOUVJVTlZURUZTVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlUVUVWRFZVeEJVbDlEVDB4UFVrMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMU5RUlVOVlRFRlNYMGxPVkVWT1UwbFVXVTFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5KdmRXZG9ibVZ6YzAxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5U1QxVkhTRTVGVTFOTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXRaWFJoYkc1bGMzTk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZUVVZVUVV4T1JWTlRUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1WVd4d2FHRk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZRVXhRU0VGTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWhiSEJvWVVoaGMyZ2dQeUFpSTJSbFptbHVaU0JWVTBWZlFVeFFTRUZJUVZOSUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRISmhibk50YVhOemFXOXVJRDhnSWlOa1pXWnBibVVnVlZORlgxUlNRVTVUVFVsVFUwbFBUaUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblJ5WVc1emJXbHpjMmx2YmsxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5VVVrRk9VMDFKVTFOSlQwNU5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUwYUdsamEyNWxjM05OWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVkVoSlEwdE9SVk5UVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWMyaGxaVzVEYjJ4dmNrMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVRTRVZGVGw5RFQweFBVazFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Ob1pXVnVVbTkxWjJodVpYTnpUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMU5JUlVWT1gxSlBWVWRJVGtWVFUwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbTFoY0ZWMklEOGdJaU5rWldacGJtVWdUVUZRWDFWV0lDSWdLeUIwTG0xaGNGVjJJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWhiSEJvWVUxaGNGVjJJRDhnSWlOa1pXWnBibVVnUVV4UVNFRk5RVkJmVlZZZ0lpQXJJSFF1WVd4d2FHRk5ZWEJWZGlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YkdsbmFIUk5ZWEJWZGlBL0lDSWpaR1ZtYVc1bElFeEpSMGhVVFVGUVgxVldJQ0lnS3lCMExteHBaMmgwVFdGd1ZYWWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtRnZUV0Z3VlhZZ1B5QWlJMlJsWm1sdVpTQkJUMDFCVUY5VlZpQWlJQ3NnZEM1aGIwMWhjRlYySURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVsYldsemMybDJaVTFoY0ZWMklEOGdJaU5rWldacGJtVWdSVTFKVTFOSlZrVk5RVkJmVlZZZ0lpQXJJSFF1WlcxcGMzTnBkbVZOWVhCVmRpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVluVnRjRTFoY0ZWMklEOGdJaU5rWldacGJtVWdRbFZOVUUxQlVGOVZWaUFpSUNzZ2RDNWlkVzF3VFdGd1ZYWWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtNXZjbTFoYkUxaGNGVjJJRDhnSWlOa1pXWnBibVVnVGs5U1RVRk1UVUZRWDFWV0lDSWdLeUIwTG01dmNtMWhiRTFoY0ZWMklEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1a2FYTndiR0ZqWlcxbGJuUk5ZWEJWZGlBL0lDSWpaR1ZtYVc1bElFUkpVMUJNUVVORlRVVk9WRTFCVUY5VlZpQWlJQ3NnZEM1a2FYTndiR0ZqWlcxbGJuUk5ZWEJWZGlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YldWMFlXeHVaWE56VFdGd1ZYWWdQeUFpSTJSbFptbHVaU0JOUlZSQlRFNUZVMU5OUVZCZlZWWWdJaUFySUhRdWJXVjBZV3h1WlhOelRXRndWWFlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbkp2ZFdkb2JtVnpjMDFoY0ZWMklEOGdJaU5rWldacGJtVWdVazlWUjBoT1JWTlRUVUZRWDFWV0lDSWdLeUIwTG5KdmRXZG9ibVZ6YzAxaGNGVjJJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWhibWx6YjNSeWIzQjVUV0Z3VlhZZ1B5QWlJMlJsWm1sdVpTQkJUa2xUVDFSU1QxQlpUVUZRWDFWV0lDSWdLeUIwTG1GdWFYTnZkSEp2Y0hsTllYQlZkaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZMnhsWVhKamIyRjBUV0Z3VlhZZ1B5QWlJMlJsWm1sdVpTQkRURVZCVWtOUFFWUk5RVkJmVlZZZ0lpQXJJSFF1WTJ4bFlYSmpiMkYwVFdGd1ZYWWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNGVjJJRDhnSWlOa1pXWnBibVVnUTB4RlFWSkRUMEZVWDA1UFVrMUJURTFCVUY5VlZpQWlJQ3NnZEM1amJHVmhjbU52WVhST2IzSnRZV3hOWVhCVmRpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndWWFlnUHlBaUkyUmxabWx1WlNCRFRFVkJVa05QUVZSZlVrOVZSMGhPUlZOVFRVRlFYMVZXSUNJZ0t5QjBMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0ZWMklEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1cGNtbGtaWE5qWlc1alpVMWhjRlYySUQ4Z0lpTmtaV1pwYm1VZ1NWSkpSRVZUUTBWT1EwVk5RVkJmVlZZZ0lpQXJJSFF1YVhKcFpHVnpZMlZ1WTJWTllYQlZkaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhCVmRpQS9JQ0lqWkdWbWFXNWxJRWxTU1VSRlUwTkZUa05GWDFSSVNVTkxUa1ZUVTAxQlVGOVZWaUFpSUNzZ2RDNXBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoY0ZWMklEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1emFHVmxia052Ykc5eVRXRndWWFlnUHlBaUkyUmxabWx1WlNCVFNFVkZUbDlEVDB4UFVrMUJVRjlWVmlBaUlDc2dkQzV6YUdWbGJrTnZiRzl5VFdGd1ZYWWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTm9aV1Z1VW05MVoyaHVaWE56VFdGd1ZYWWdQeUFpSTJSbFptbHVaU0JUU0VWRlRsOVNUMVZIU0U1RlUxTk5RVkJmVlZZZ0lpQXJJSFF1YzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEJWZGlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzNCbFkzVnNZWEpOWVhCVmRpQS9JQ0lqWkdWbWFXNWxJRk5RUlVOVlRFRlNUVUZRWDFWV0lDSWdLeUIwTG5Od1pXTjFiR0Z5VFdGd1ZYWWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTndaV04xYkdGeVEyOXNiM0pOWVhCVmRpQS9JQ0lqWkdWbWFXNWxJRk5RUlVOVlRFRlNYME5QVEU5U1RVRlFYMVZXSUNJZ0t5QjBMbk53WldOMWJHRnlRMjlzYjNKTllYQlZkaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEJWZGlBL0lDSWpaR1ZtYVc1bElGTlFSVU5WVEVGU1gwbE9WRVZPVTBsVVdVMUJVRjlWVmlBaUlDc2dkQzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0ZWMklEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MGNtRnVjMjFwYzNOcGIyNU5ZWEJWZGlBL0lDSWpaR1ZtYVc1bElGUlNRVTVUVFVsVFUwbFBUazFCVUY5VlZpQWlJQ3NnZEM1MGNtRnVjMjFwYzNOcGIyNU5ZWEJWZGlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1ZEdocFkydHVaWE56VFdGd1ZYWWdQeUFpSTJSbFptbHVaU0JVU0VsRFMwNUZVMU5OUVZCZlZWWWdJaUFySUhRdWRHaHBZMnR1WlhOelRXRndWWFlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblpsY25SbGVGUmhibWRsYm5SeklDWW1JSFF1Wm14aGRGTm9ZV1JwYm1jZ1BUMDlJQ0V4SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMVJCVGtkRlRsUWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTJaWEowWlhoRGIyeHZjbk1nUHlBaUkyUmxabWx1WlNCVlUwVmZRMDlNVDFJaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MlpYSjBaWGhCYkhCb1lYTWdQeUFpSTJSbFptbHVaU0JWVTBWZlEwOU1UMUpmUVV4UVNFRWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTJaWEowWlhoVmRqRnpJRDhnSWlOa1pXWnBibVVnVlZORlgxVldNU0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblpsY25SbGVGVjJNbk1nUHlBaUkyUmxabWx1WlNCVlUwVmZWVll5SWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1ZG1WeWRHVjRWWFl6Y3lBL0lDSWpaR1ZtYVc1bElGVlRSVjlWVmpNaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1d2IybHVkSE5WZG5NZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVUU5SlRsUlRYMVZXSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Wm14aGRGTm9ZV1JwYm1jZ1B5QWlJMlJsWm1sdVpTQkdURUZVWDFOSVFVUkZSQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbk5yYVc1dWFXNW5JRDhnSWlOa1pXWnBibVVnVlZORlgxTkxTVTVPU1U1SElpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXOXljR2hVWVhKblpYUnpJRDhnSWlOa1pXWnBibVVnVlZORlgwMVBVbEJJVkVGU1IwVlVVeUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbTF2Y25Cb1RtOXliV0ZzY3lBbUppQjBMbVpzWVhSVGFHRmthVzVuSUQwOVBTQWhNU0EvSUNJalpHVm1hVzVsSUZWVFJWOU5UMUpRU0U1UFVrMUJURk1pSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV0YjNKd2FFTnZiRzl5Y3lBbUppQjBMbWx6VjJWaVIwd3lJRDhnSWlOa1pXWnBibVVnVlZORlgwMVBVbEJJUTA5TVQxSlRJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViVzl5Y0doVVlYSm5aWFJ6UTI5MWJuUWdQaUF3SUNZbUlIUXVhWE5YWldKSFRESWdQeUFpSTJSbFptbHVaU0JOVDFKUVNGUkJVa2RGVkZOZlZFVllWRlZTUlNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG0xdmNuQm9WR0Z5WjJWMGMwTnZkVzUwSUQ0Z01DQW1KaUIwTG1selYyVmlSMHd5SUQ4Z0lpTmtaV1pwYm1VZ1RVOVNVRWhVUVZKSFJWUlRYMVJGV0ZSVlVrVmZVMVJTU1VSRklDSWdLeUIwTG0xdmNuQm9WR1Y0ZEhWeVpWTjBjbWxrWlNBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Ylc5eWNHaFVZWEpuWlhSelEyOTFiblFnUGlBd0lDWW1JSFF1YVhOWFpXSkhURElnUHlBaUkyUmxabWx1WlNCTlQxSlFTRlJCVWtkRlZGTmZRMDlWVGxRZ0lpQXJJSFF1Ylc5eWNHaFVZWEpuWlhSelEyOTFiblFnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVJ2ZFdKc1pWTnBaR1ZrSUQ4Z0lpTmtaV1pwYm1VZ1JFOVZRa3hGWDFOSlJFVkVJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVabXhwY0ZOcFpHVmtJRDhnSWlOa1pXWnBibVVnUmt4SlVGOVRTVVJGUkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Ob1lXUnZkMDFoY0VWdVlXSnNaV1FnUHlBaUkyUmxabWx1WlNCVlUwVmZVMGhCUkU5WFRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVjMmhoWkc5M1RXRndSVzVoWW14bFpDQS9JQ0lqWkdWbWFXNWxJQ0lnS3lCaklEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1emFYcGxRWFIwWlc1MVlYUnBiMjRnUHlBaUkyUmxabWx1WlNCVlUwVmZVMGxhUlVGVVZFVk9WVUZVU1U5T0lpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJuVnRUR2xuYUhSUWNtOWlaWE1nUGlBd0lEOGdJaU5rWldacGJtVWdWVk5GWDB4SlIwaFVYMUJTVDBKRlV5SWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuVnpaVXhsWjJGamVVeHBaMmgwY3lBL0lDSWpaR1ZtYVc1bElFeEZSMEZEV1Y5TVNVZElWRk1pSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVzYjJkaGNtbDBhRzFwWTBSbGNIUm9RblZtWm1WeUlEOGdJaU5rWldacGJtVWdWVk5GWDB4UFIwUkZVRlJJUWxWR0lpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJHOW5ZWEpwZEdodGFXTkVaWEIwYUVKMVptWmxjaUFtSmlCMExuSmxibVJsY21WeVJYaDBaVzV6YVc5dVJuSmhaMFJsY0hSb0lEOGdJaU5rWldacGJtVWdWVk5GWDB4UFIwUkZVRlJJUWxWR1gwVllWQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQWlkVzVwWm05eWJTQnRZWFEwSUcxdlpHVnNUV0YwY21sNE95SXNDaUFnSUNBZ0lDQWdJblZ1YVdadmNtMGdiV0YwTkNCdGIyUmxiRlpwWlhkTllYUnlhWGc3SWl3S0lDQWdJQ0FnSUNBaWRXNXBabTl5YlNCdFlYUTBJSEJ5YjJwbFkzUnBiMjVOWVhSeWFYZzdJaXdLSUNBZ0lDQWdJQ0FpZFc1cFptOXliU0J0WVhRMElIWnBaWGROWVhSeWFYZzdJaXdLSUNBZ0lDQWdJQ0FpZFc1cFptOXliU0J0WVhReklHNXZjbTFoYkUxaGRISnBlRHNpTEFvZ0lDQWdJQ0FnSUNKMWJtbG1iM0p0SUhabFl6TWdZMkZ0WlhKaFVHOXphWFJwYjI0N0lpd0tJQ0FnSUNBZ0lDQWlkVzVwWm05eWJTQmliMjlzSUdselQzSjBhRzluY21Gd2FHbGpPeUlzQ2lBZ0lDQWdJQ0FnSWlOcFptUmxaaUJWVTBWZlNVNVRWRUZPUTBsT1J5SXNDaUFnSUNBZ0lDQWdJZ2xoZEhSeWFXSjFkR1VnYldGME5DQnBibk4wWVc1alpVMWhkSEpwZURzaUxBb2dJQ0FnSUNBZ0lDSWpaVzVrYVdZaUxBb2dJQ0FnSUNBZ0lDSWphV1prWldZZ1ZWTkZYMGxPVTFSQlRrTkpUa2RmUTA5TVQxSWlMQW9nSUNBZ0lDQWdJQ0lKWVhSMGNtbGlkWFJsSUhabFl6TWdhVzV6ZEdGdVkyVkRiMnh2Y2pzaUxBb2dJQ0FnSUNBZ0lDSWpaVzVrYVdZaUxBb2dJQ0FnSUNBZ0lDSmhkSFJ5YVdKMWRHVWdkbVZqTXlCd2IzTnBkR2x2YmpzaUxBb2dJQ0FnSUNBZ0lDSmhkSFJ5YVdKMWRHVWdkbVZqTXlCdWIzSnRZV3c3SWl3S0lDQWdJQ0FnSUNBaVlYUjBjbWxpZFhSbElIWmxZeklnZFhZN0lpd0tJQ0FnSUNBZ0lDQWlJMmxtWkdWbUlGVlRSVjlWVmpFaUxBb2dJQ0FnSUNBZ0lDSUpZWFIwY21saWRYUmxJSFpsWXpJZ2RYWXhPeUlzQ2lBZ0lDQWdJQ0FnSWlObGJtUnBaaUlzQ2lBZ0lDQWdJQ0FnSWlOcFptUmxaaUJWVTBWZlZWWXlJaXdLSUNBZ0lDQWdJQ0FpQ1dGMGRISnBZblYwWlNCMlpXTXlJSFYyTWpzaUxBb2dJQ0FnSUNBZ0lDSWpaVzVrYVdZaUxBb2dJQ0FnSUNBZ0lDSWphV1prWldZZ1ZWTkZYMVZXTXlJc0NpQWdJQ0FnSUNBZ0lnbGhkSFJ5YVdKMWRHVWdkbVZqTWlCMWRqTTdJaXdLSUNBZ0lDQWdJQ0FpSTJWdVpHbG1JaXdLSUNBZ0lDQWdJQ0FpSTJsbVpHVm1JRlZUUlY5VVFVNUhSVTVVSWl3S0lDQWdJQ0FnSUNBaUNXRjBkSEpwWW5WMFpTQjJaV00wSUhSaGJtZGxiblE3SWl3S0lDQWdJQ0FnSUNBaUkyVnVaR2xtSWl3S0lDQWdJQ0FnSUNBaUkybG1JR1JsWm1sdVpXUW9JRlZUUlY5RFQweFBVbDlCVEZCSVFTQXBJaXdLSUNBZ0lDQWdJQ0FpQ1dGMGRISnBZblYwWlNCMlpXTTBJR052Ykc5eU95SXNDaUFnSUNBZ0lDQWdJaU5sYkdsbUlHUmxabWx1WldRb0lGVlRSVjlEVDB4UFVpQXBJaXdLSUNBZ0lDQWdJQ0FpQ1dGMGRISnBZblYwWlNCMlpXTXpJR052Ykc5eU95SXNDaUFnSUNBZ0lDQWdJaU5sYm1ScFppSXNDaUFnSUNBZ0lDQWdJaU5wWmlBb0lHUmxabWx1WldRb0lGVlRSVjlOVDFKUVNGUkJVa2RGVkZNZ0tTQW1KaUFoSUdSbFptbHVaV1FvSUUxUFVsQklWRUZTUjBWVVUxOVVSVmhVVlZKRklDa2dLU0lzQ2lBZ0lDQWdJQ0FnSWdsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FGUmhjbWRsZERBN0lpd0tJQ0FnSUNBZ0lDQWlDV0YwZEhKcFluVjBaU0IyWldNeklHMXZjbkJvVkdGeVoyVjBNVHNpTEFvZ0lDQWdJQ0FnSUNJSllYUjBjbWxpZFhSbElIWmxZek1nYlc5eWNHaFVZWEpuWlhReU95SXNDaUFnSUNBZ0lDQWdJZ2xoZEhSeWFXSjFkR1VnZG1Wak15QnRiM0p3YUZSaGNtZGxkRE03SWl3S0lDQWdJQ0FnSUNBaUNTTnBabVJsWmlCVlUwVmZUVTlTVUVoT1QxSk5RVXhUSWl3S0lDQWdJQ0FnSUNBaUNRbGhkSFJ5YVdKMWRHVWdkbVZqTXlCdGIzSndhRTV2Y20xaGJEQTdJaXdLSUNBZ0lDQWdJQ0FpQ1FsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FFNXZjbTFoYkRFN0lpd0tJQ0FnSUNBZ0lDQWlDUWxoZEhSeWFXSjFkR1VnZG1Wak15QnRiM0p3YUU1dmNtMWhiREk3SWl3S0lDQWdJQ0FnSUNBaUNRbGhkSFJ5YVdKMWRHVWdkbVZqTXlCdGIzSndhRTV2Y20xaGJETTdJaXdLSUNBZ0lDQWdJQ0FpQ1NObGJITmxJaXdLSUNBZ0lDQWdJQ0FpQ1FsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FGUmhjbWRsZERRN0lpd0tJQ0FnSUNBZ0lDQWlDUWxoZEhSeWFXSjFkR1VnZG1Wak15QnRiM0p3YUZSaGNtZGxkRFU3SWl3S0lDQWdJQ0FnSUNBaUNRbGhkSFJ5YVdKMWRHVWdkbVZqTXlCdGIzSndhRlJoY21kbGREWTdJaXdLSUNBZ0lDQWdJQ0FpQ1FsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FGUmhjbWRsZERjN0lpd0tJQ0FnSUNBZ0lDQWlDU05sYm1ScFppSXNDaUFnSUNBZ0lDQWdJaU5sYm1ScFppSXNDaUFnSUNBZ0lDQWdJaU5wWm1SbFppQlZVMFZmVTB0SlRrNUpUa2NpTEFvZ0lDQWdJQ0FnSUNJSllYUjBjbWxpZFhSbElIWmxZelFnYzJ0cGJrbHVaR1Y0T3lJc0NpQWdJQ0FnSUNBZ0lnbGhkSFJ5YVdKMWRHVWdkbVZqTkNCemEybHVWMlZwWjJoME95SXNDaUFnSUNBZ0lDQWdJaU5sYm1ScFppSXNDaUFnSUNBZ0lDQWdZQXBnQ2lBZ0lDQmRMbVpwYkhSbGNpaDJjeWt1YW05cGJpaGdDbUFwTENCd0lEMGdXd29nSUNBZ0lDQWdJR1lzQ2lBZ0lDQWdJQ0FnUVdnb2RDa3NDaUFnSUNBZ0lDQWdJaU5rWldacGJtVWdVMGhCUkVWU1gxUlpVRVVnSWlBcklIUXVjMmhoWkdWeVZIbHdaU3dLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0JUU0VGRVJWSmZUa0ZOUlNBaUlDc2dkQzV6YUdGa1pYSk9ZVzFsTEFvZ0lDQWdJQ0FnSUcwc0NpQWdJQ0FnSUNBZ2RDNTFjMlZHYjJjZ0ppWWdkQzVtYjJjZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUms5SElpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRYTmxSbTluSUNZbUlIUXVabTluUlhod01pQS9JQ0lqWkdWbWFXNWxJRVpQUjE5RldGQXlJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG0xaGRHTmhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOU5RVlJEUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1bGJuWk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZSVTVXVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpXNTJUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ0lpQXJJR3dnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVZ1ZGsxaGNDQS9JQ0lqWkdWbWFXNWxJQ0lnS3lCb0lEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1bGJuWk5ZWEFnUHlBaUkyUmxabWx1WlNBaUlDc2dkU0E2SUNJaUxBb2dJQ0FnSUNBZ0lHUWdQeUFpSTJSbFptbHVaU0JEVlVKRlZWWmZWRVZZUlV4ZlYwbEVWRWdnSWlBcklHUXVkR1Y0Wld4WGFXUjBhQ0E2SUNJaUxBb2dJQ0FnSUNBZ0lHUWdQeUFpSTJSbFptbHVaU0JEVlVKRlZWWmZWRVZZUlV4ZlNFVkpSMGhVSUNJZ0t5QmtMblJsZUdWc1NHVnBaMmgwSURvZ0lpSXNDaUFnSUNBZ0lDQWdaQ0EvSUNJalpHVm1hVzVsSUVOVlFrVlZWbDlOUVZoZlRVbFFJQ0lnS3lCa0xtMWhlRTFwY0NBcklDSXVNQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbXhwWjJoMFRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgweEpSMGhVVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVlXOU5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZRVTlOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1aWRXMXdUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMEpWVFZCTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXViM0p0WVd4TllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlRrOVNUVUZNVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJtOXliV0ZzVFdGd1QySnFaV04wVTNCaFkyVWdQeUFpSTJSbFptbHVaU0JWVTBWZlRrOVNUVUZNVFVGUVgwOUNTa1ZEVkZOUVFVTkZJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVibTl5YldGc1RXRndWR0Z1WjJWdWRGTndZV05sSUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDVQVWsxQlRFMUJVRjlVUVU1SFJVNVVVMUJCUTBVaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1bGJXbHpjMmwyWlUxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5RlRVbFRVMGxXUlUxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtRnVhWE52ZEhKdmNIa2dQeUFpSTJSbFptbHVaU0JWVTBWZlFVNUpVMDlVVWs5UVdTSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtRnVhWE52ZEhKdmNIbE5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZRVTVKVTA5VVVrOVFXVTFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1Oc1pXRnlZMjloZENBL0lDSWpaR1ZtYVc1bElGVlRSVjlEVEVWQlVrTlBRVlFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVqYkdWaGNtTnZZWFJOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUTB4RlFWSkRUMEZVVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwTk1SVUZTUTA5QlZGOVNUMVZIU0U1RlUxTk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZRMHhGUVZKRFQwRlVYMDVQVWsxQlRFMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbWx5YVdSbGMyTmxibU5sSUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMGxTU1VSRlUwTkZUa05GSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YVhKcFpHVnpZMlZ1WTJWTllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlNWSkpSRVZUUTBWT1EwVk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5SlVrbEVSVk5EUlU1RFJWOVVTRWxEUzA1RlUxTk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV6Y0dWamRXeGhjazFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlUVUVWRFZVeEJVazFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZVMUJGUTFWTVFWSmZRMDlNVDFKTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVVMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVRVRVZEVlV4QlVsOUpUbFJGVGxOSlZGbE5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV5YjNWbmFHNWxjM05OWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVWs5VlIwaE9SVk5UVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXVjBZV3h1WlhOelRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwMUZWRUZNVGtWVFUwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbUZzY0doaFRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwRk1VRWhCVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVlXeHdhR0ZVWlhOMElEOGdJaU5rWldacGJtVWdWVk5GWDBGTVVFaEJWRVZUVkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1Gc2NHaGhTR0Z6YUNBL0lDSWpaR1ZtYVc1bElGVlRSVjlCVEZCSVFVaEJVMGdpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV6YUdWbGJpQS9JQ0lqWkdWbWFXNWxJRlZUUlY5VFNFVkZUaUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbk5vWldWdVEyOXNiM0pOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBoRlJVNWZRMDlNVDFKTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXphR1ZsYmxKdmRXZG9ibVZ6YzAxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5VFNFVkZUbDlTVDFWSFNFNUZVMU5OUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MGNtRnVjMjFwYzNOcGIyNGdQeUFpSTJSbFptbHVaU0JWVTBWZlZGSkJUbE5OU1ZOVFNVOU9JaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVkSEpoYm5OdGFYTnphVzl1VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDFSU1FVNVRUVWxUVTBsUFRrMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblJvYVdOcmJtVnpjMDFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlVU0VsRFMwNUZVMU5OUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MlpYSjBaWGhVWVc1blpXNTBjeUFtSmlCMExtWnNZWFJUYUdGa2FXNW5JRDA5UFNBaE1TQS9JQ0lqWkdWbWFXNWxJRlZUUlY5VVFVNUhSVTVVSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1ZG1WeWRHVjRRMjlzYjNKeklIeDhJSFF1YVc1emRHRnVZMmx1WjBOdmJHOXlJRDhnSWlOa1pXWnBibVVnVlZORlgwTlBURTlTSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1ZG1WeWRHVjRRV3h3YUdGeklEOGdJaU5rWldacGJtVWdWVk5GWDBOUFRFOVNYMEZNVUVoQklpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRtVnlkR1Y0VlhZeGN5QS9JQ0lqWkdWbWFXNWxJRlZUUlY5VlZqRWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTJaWEowWlhoVmRqSnpJRDhnSWlOa1pXWnBibVVnVlZORlgxVldNaUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblpsY25SbGVGVjJNM01nUHlBaUkyUmxabWx1WlNCVlUwVmZWVll6SWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Y0c5cGJuUnpWWFp6SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMUJQU1U1VVUxOVZWaUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbWR5WVdScFpXNTBUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMGRTUVVSSlJVNVVUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Wm14aGRGTm9ZV1JwYm1jZ1B5QWlJMlJsWm1sdVpTQkdURUZVWDFOSVFVUkZSQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVJ2ZFdKc1pWTnBaR1ZrSUQ4Z0lpTmtaV1pwYm1VZ1JFOVZRa3hGWDFOSlJFVkVJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVabXhwY0ZOcFpHVmtJRDhnSWlOa1pXWnBibVVnUmt4SlVGOVRTVVJGUkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Ob1lXUnZkMDFoY0VWdVlXSnNaV1FnUHlBaUkyUmxabWx1WlNCVlUwVmZVMGhCUkU5WFRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVjMmhoWkc5M1RXRndSVzVoWW14bFpDQS9JQ0lqWkdWbWFXNWxJQ0lnS3lCaklEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1d2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFZ1B5QWlJMlJsWm1sdVpTQlFVa1ZOVlV4VVNWQk1TVVZFWDBGTVVFaEJJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViblZ0VEdsbmFIUlFjbTlpWlhNZ1BpQXdJRDhnSWlOa1pXWnBibVVnVlZORlgweEpSMGhVWDFCU1QwSkZVeUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblZ6WlV4bFoyRmplVXhwWjJoMGN5QS9JQ0lqWkdWbWFXNWxJRXhGUjBGRFdWOU1TVWRJVkZNaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1a1pXTnZaR1ZXYVdSbGIxUmxlSFIxY21VZ1B5QWlJMlJsWm1sdVpTQkVSVU5QUkVWZlZrbEVSVTlmVkVWWVZGVlNSU0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbXh2WjJGeWFYUm9iV2xqUkdWd2RHaENkV1ptWlhJZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVEU5SFJFVlFWRWhDVlVZaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1c2IyZGhjbWwwYUcxcFkwUmxjSFJvUW5WbVptVnlJQ1ltSUhRdWNtVnVaR1Z5WlhKRmVIUmxibk5wYjI1R2NtRm5SR1Z3ZEdnZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVEU5SFJFVlFWRWhDVlVaZlJWaFVJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lDSjFibWxtYjNKdElHMWhkRFFnZG1sbGQwMWhkSEpwZURzaUxBb2dJQ0FnSUNBZ0lDSjFibWxtYjNKdElIWmxZek1nWTJGdFpYSmhVRzl6YVhScGIyNDdJaXdLSUNBZ0lDQWdJQ0FpZFc1cFptOXliU0JpYjI5c0lHbHpUM0owYUc5bmNtRndhR2xqT3lJc0NpQWdJQ0FnSUNBZ2RDNTBiMjVsVFdGd2NHbHVaeUFoUFQwZ1RtNGdQeUFpSTJSbFptbHVaU0JVVDA1RlgwMUJVRkJKVGtjaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MGIyNWxUV0Z3Y0dsdVp5QWhQVDBnVG00Z1B5QnJaUzUwYjI1bGJXRndjR2x1WjE5d1lYSnpYMlp5WVdkdFpXNTBJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTBiMjVsVFdGd2NHbHVaeUFoUFQwZ1RtNGdQeUJzTUNnaWRHOXVaVTFoY0hCcGJtY2lMQ0IwTG5SdmJtVk5ZWEJ3YVc1bktTQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpHbDBhR1Z5YVc1bklEOGdJaU5rWldacGJtVWdSRWxVU0VWU1NVNUhJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViM0JoY1hWbElEOGdJaU5rWldacGJtVWdUMUJCVVZWRklpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUd0bExtTnZiRzl5YzNCaFkyVmZjR0Z5YzE5bWNtRm5iV1Z1ZEN3S0lDQWdJQ0FnSUNCak1DZ2liR2x1WldGeVZHOVBkWFJ3ZFhSVVpYaGxiQ0lzSUhRdWIzVjBjSFYwUTI5c2IzSlRjR0ZqWlNrc0NpQWdJQ0FnSUNBZ2RDNTFjMlZFWlhCMGFGQmhZMnRwYm1jZ1B5QWlJMlJsWm1sdVpTQkVSVkJVU0Y5UVFVTkxTVTVISUNJZ0t5QjBMbVJsY0hSb1VHRmphMmx1WnlBNklDSWlMQW9nSUNBZ0lDQWdJR0FLWUFvZ0lDQWdYUzVtYVd4MFpYSW9kbk1wTG1wdmFXNG9ZQXBnS1Nrc0lHRWdQU0JUYnloaEtTd2dZU0E5SUVWb0tHRXNJSFFwTENCaElEMGdWR2dvWVN3Z2RDa3NJRzhnUFNCVGJ5aHZLU3dnYnlBOUlFVm9LRzhzSUhRcExDQnZJRDBnVkdnb2J5d2dkQ2tzSUdFZ1BTQjNhQ2hoS1N3Z2J5QTlJSGRvS0c4cExDQjBMbWx6VjJWaVIwd3lJQ1ltSUhRdWFYTlNZWGRUYUdGa1pYSk5ZWFJsY21saGJDQWhQVDBnSVRBZ0ppWWdLSFlnUFNCZ0kzWmxjbk5wYjI0Z016QXdJR1Z6Q21Bc0lHY2dQU0JiQ2lBZ0lDQWdJQ0FnSW5CeVpXTnBjMmx2YmlCdFpXUnBkVzF3SUhOaGJYQnNaWEl5UkVGeWNtRjVPeUlzQ2lBZ0lDQWdJQ0FnSWlOa1pXWnBibVVnWVhSMGNtbGlkWFJsSUdsdUlpd0tJQ0FnSUNBZ0lDQWlJMlJsWm1sdVpTQjJZWEo1YVc1bklHOTFkQ0lzQ2lBZ0lDQWdJQ0FnSWlOa1pXWnBibVVnZEdWNGRIVnlaVEpFSUhSbGVIUjFjbVVpQ2lBZ0lDQmRMbXB2YVc0b1lBcGdLU0FySUdBS1lDQXJJR2NzSUhBZ1BTQmJDaUFnSUNBZ0lDQWdJaU5rWldacGJtVWdkbUZ5ZVdsdVp5QnBiaUlzQ2lBZ0lDQWdJQ0FnZEM1bmJITnNWbVZ5YzJsdmJpQTlQVDBnVDJ3Z1B5QWlJaUE2SUNKc1lYbHZkWFFvYkc5allYUnBiMjRnUFNBd0tTQnZkWFFnYUdsbmFIQWdkbVZqTkNCd1kxOW1jbUZuUTI5c2IzSTdJaXdLSUNBZ0lDQWdJQ0IwTG1kc2MyeFdaWEp6YVc5dUlEMDlQU0JQYkNBL0lDSWlJRG9nSWlOa1pXWnBibVVnWjJ4ZlJuSmhaME52Ykc5eUlIQmpYMlp5WVdkRGIyeHZjaUlzQ2lBZ0lDQWdJQ0FnSWlOa1pXWnBibVVnWjJ4ZlJuSmhaMFJsY0hSb1JWaFVJR2RzWDBaeVlXZEVaWEIwYUNJc0NpQWdJQ0FnSUNBZ0lpTmtaV1pwYm1VZ2RHVjRkSFZ5WlRKRUlIUmxlSFIxY21VaUxBb2dJQ0FnSUNBZ0lDSWpaR1ZtYVc1bElIUmxlSFIxY21WRGRXSmxJSFJsZUhSMWNtVWlMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJSFJsZUhSMWNtVXlSRkJ5YjJvZ2RHVjRkSFZ5WlZCeWIyb2lMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJSFJsZUhSMWNtVXlSRXh2WkVWWVZDQjBaWGgwZFhKbFRHOWtJaXdLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0IwWlhoMGRYSmxNa1JRY205cVRHOWtSVmhVSUhSbGVIUjFjbVZRY205cVRHOWtJaXdLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0IwWlhoMGRYSmxRM1ZpWlV4dlpFVllWQ0IwWlhoMGRYSmxURzlrSWl3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCMFpYaDBkWEpsTWtSSGNtRmtSVmhVSUhSbGVIUjFjbVZIY21Ga0lpd0tJQ0FnSUNBZ0lDQWlJMlJsWm1sdVpTQjBaWGgwZFhKbE1rUlFjbTlxUjNKaFpFVllWQ0IwWlhoMGRYSmxVSEp2YWtkeVlXUWlMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJSFJsZUhSMWNtVkRkV0psUjNKaFpFVllWQ0IwWlhoMGRYSmxSM0poWkNJS0lDQWdJRjB1YW05cGJpaGdDbUFwSUNzZ1lBcGdJQ3NnY0NrN0NpQWdJQ0JzWlhRZ2VDQTlJSFlnS3lCbklDc2dZU3dnZVNBOUlIWWdLeUJ3SUNzZ2J5d2dZaUE5SUZOb0tHa3NJR2t1VmtWU1ZFVllYMU5JUVVSRlVpd2dlQ2tzSUhjZ1BTQlRhQ2hwTENCcExrWlNRVWROUlU1VVgxTklRVVJGVWl3Z2VTazdDaUFnSUNCcFppQW9hUzVoZEhSaFkyaFRhR0ZrWlhJb1h5d2dZaWtzSUdrdVlYUjBZV05vVTJoaFpHVnlLRjhzSUhjcExDQjBMbWx1WkdWNE1FRjBkSEpwWW5WMFpVNWhiV1VnSVQwOUlIWnZhV1FnTUNBL0lHa3VZbWx1WkVGMGRISnBZa3h2WTJGMGFXOXVLRjhzSURBc0lIUXVhVzVrWlhnd1FYUjBjbWxpZFhSbFRtRnRaU2tnT2lCMExtMXZjbkJvVkdGeVoyVjBjeUE5UFQwZ0lUQWdKaVlnYVM1aWFXNWtRWFIwY21saVRHOWpZWFJwYjI0b1h5d2dNQ3dnSW5CdmMybDBhVzl1SWlrc0lHa3ViR2x1YTFCeWIyZHlZVzBvWHlrc0lITXhMbVJsWW5WbkxtTm9aV05yVTJoaFpHVnlSWEp5YjNKektTQjdDaUFnSUNBZ0lDQWdiR1YwSUUwZ1BTQnBMbWRsZEZCeWIyZHlZVzFKYm1adlRHOW5LRjhwTG5SeWFXMG9LU3dnVkNBOUlHa3VaMlYwVTJoaFpHVnlTVzVtYjB4dlp5aGlLUzUwY21sdEtDa3NJRThnUFNCcExtZGxkRk5vWVdSbGNrbHVabTlNYjJjb2R5a3VkSEpwYlNncExDQlpJRDBnSVRBc0lDUWdQU0FoTURzS0lDQWdJQ0FnSUNCcFppQW9hUzVuWlhSUWNtOW5jbUZ0VUdGeVlXMWxkR1Z5S0Y4c0lHa3VURWxPUzE5VFZFRlVWVk1wSUQwOVBTQWhNU2tnYVdZZ0tGa2dQU0FoTVN3Z2RIbHdaVzltSUhNeExtUmxZblZuTG05dVUyaGhaR1Z5UlhKeWIzSWdQVDBnSW1aMWJtTjBhVzl1SWlrZ2N6RXVaR1ZpZFdjdWIyNVRhR0ZrWlhKRmNuSnZjaWhwTENCZkxDQmlMQ0IzS1RzS0lDQWdJQ0FnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRlVnUFNCaWFDaHBMQ0JpTENBaWRtVnlkR1Y0SWlrc0lIb2dQU0JpYUNocExDQjNMQ0FpWm5KaFoyMWxiblFpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VjJWaVIweFFjbTluY21GdE9pQlRhR0ZrWlhJZ1JYSnliM0lnSWlBcklHa3VaMlYwUlhKeWIzSW9LU0FySUNJZ0xTQldRVXhKUkVGVVJWOVRWRUZVVlZNZ0lpQXJJR2t1WjJWMFVISnZaM0poYlZCaGNtRnRaWFJsY2loZkxDQnBMbFpCVEVsRVFWUkZYMU5VUVZSVlV5a2dLeUJnQ2dwUWNtOW5jbUZ0SUVsdVptOGdURzluT2lCZ0lDc2dUU0FySUdBS1lDQXJJRlVnS3lCZ0NtQWdLeUI2S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1pXeHpaU0JOSUNFOVBTQWlJaUEvSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhRY205bmNtRnRPaUJRY205bmNtRnRJRWx1Wm04Z1RHOW5PaUlzSUUwcElEb2dLRlFnUFQwOUlDSWlJSHg4SUU4Z1BUMDlJQ0lpS1NBbUppQW9KQ0E5SUNFeEtUc0tJQ0FnSUNBZ0lDQWtJQ1ltSUNoMGFHbHpMbVJwWVdkdWIzTjBhV056SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5ZFc1dVlXSnNaVG9nV1N3S0lDQWdJQ0FnSUNBZ0lDQWdjSEp2WjNKaGJVeHZaem9nVFN3S0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdWNFUyaGhaR1Z5T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyYzZJRlFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y21WbWFYZzZJR2NLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WnpvZ1R5d0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaV1pwZURvZ2NBb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0I5Q2lBZ0lDQnBMbVJsYkdWMFpWTm9ZV1JsY2loaUtTd2dhUzVrWld4bGRHVlRhR0ZrWlhJb2R5azdDaUFnSUNCc1pYUWdVanNLSUNBZ0lIUm9hWE11WjJWMFZXNXBabTl5YlhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVaUE5UFQwZ2RtOXBaQ0F3SUNZbUlDaFNJRDBnYm1WM0lIRnBLR2tzSUY4cEtTd2dVanNLSUNBZ0lIMDdDaUFnSUNCc1pYUWdTVHNLSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEVGMGRISnBZblYwWlhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdTU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaEpJRDBnWkRBb2FTd2dYeWtwTENCSk93b2dJQ0FnZlN3Z2RHaHBjeTVrWlhOMGNtOTVJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ2JpNXlaV3hsWVhObFUzUmhkR1Z6VDJaUWNtOW5jbUZ0S0hSb2FYTXBMQ0JwTG1SbGJHVjBaVkJ5YjJkeVlXMG9YeWtzSUhSb2FYTXVjSEp2WjNKaGJTQTlJSFp2YVdRZ01Ec0tJQ0FnSUgwc0lIUm9hWE11ZEhsd1pTQTlJSFF1YzJoaFpHVnlWSGx3WlN3Z2RHaHBjeTV1WVcxbElEMGdkQzV6YUdGa1pYSk9ZVzFsTENCMGFHbHpMbWxrSUQwZ2NqQXJLeXdnZEdocGN5NWpZV05vWlV0bGVTQTlJR1VzSUhSb2FYTXVkWE5sWkZScGJXVnpJRDBnTVN3Z2RHaHBjeTV3Y205bmNtRnRJRDBnWHl3Z2RHaHBjeTUyWlhKMFpYaFRhR0ZrWlhJZ1BTQmlMQ0IwYUdsekxtWnlZV2R0Wlc1MFUyaGhaR1Z5SUQwZ2R5d2dkR2hwY3pzS2ZRcDJZWElnUlRBZ1BTQXdMQ0JpYnlBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6YUdGa1pYSkRZV05vWlNBOUlHNWxkeUJOWVhBc0lIUm9hWE11YldGMFpYSnBZV3hEWVdOb1pTQTlJRzVsZHlCTllYQTdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1MlpYSjBaWGhUYUdGa1pYSXNJRzRnUFNCbExtWnlZV2R0Wlc1MFUyaGhaR1Z5TENCcElEMGdkR2hwY3k1ZloyVjBVMmhoWkdWeVUzUmhaMlVvZENrc0lISWdQU0IwYUdsekxsOW5aWFJUYUdGa1pYSlRkR0ZuWlNodUtTd2dZU0E5SUhSb2FYTXVYMmRsZEZOb1lXUmxja05oWTJobFJtOXlUV0YwWlhKcFlXd29aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR0V1YUdGektHa3BJRDA5UFNBaE1TQW1KaUFvWVM1aFpHUW9hU2tzSUdrdWRYTmxaRlJwYldWekt5c3BMQ0JoTG1oaGN5aHlLU0E5UFQwZ0lURWdKaVlnS0dFdVlXUmtLSElwTENCeUxuVnpaV1JVYVcxbGN5c3JLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEpsYlc5MlpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtMWhkR1Z5YVdGc1EyRmphR1V1WjJWMEtHVXBPd29nSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJRzRnYjJZZ2RDbHVMblZ6WldSVWFXMWxjeTB0TENCdUxuVnpaV1JVYVcxbGN5QTlQVDBnTUNBbUppQjBhR2x6TG5Ob1lXUmxja05oWTJobExtUmxiR1YwWlNodUxtTnZaR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMWhkR1Z5YVdGc1EyRmphR1V1WkdWc1pYUmxLR1VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZtVnlkR1Y0VTJoaFpHVnlTVVFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDluWlhSVGFHRmtaWEpUZEdGblpTaGxMblpsY25SbGVGTm9ZV1JsY2lrdWFXUTdDaUFnSUNCOUNpQWdJQ0JuWlhSR2NtRm5iV1Z1ZEZOb1lXUmxja2xFS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWjJWMFUyaGhaR1Z5VTNSaFoyVW9aUzVtY21GbmJXVnVkRk5vWVdSbGNpa3VhV1E3Q2lBZ0lDQjlDaUFnSUNCa2FYTndiM05sS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YzJoaFpHVnlRMkZqYUdVdVkyeGxZWElvS1N3Z2RHaHBjeTV0WVhSbGNtbGhiRU5oWTJobExtTnNaV0Z5S0NrN0NpQWdJQ0I5Q2lBZ0lDQmZaMlYwVTJoaFpHVnlRMkZqYUdWR2IzSk5ZWFJsY21saGJDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtMWhkR1Z5YVdGc1EyRmphR1VzSUc0Z1BTQjBMbWRsZENobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpQTlQVDBnZG05cFpDQXdJQ1ltSUNodUlEMGdibVYzSUZObGRDd2dkQzV6WlhRb1pTd2diaWtwTENCdU93b2dJQ0FnZlFvZ0lDQWdYMmRsZEZOb1lXUmxjbE4wWVdkbEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWMyaGhaR1Z5UTJGamFHVXNJRzRnUFNCMExtZGxkQ2hsS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmlBOVBUMGdkbTlwWkNBd0lDWW1JQ2h1SUQwZ2JtVjNJRVZ2S0dVcExDQjBMbk5sZENobExDQnVLU2tzSUc0N0NpQWdJQ0I5Q24wc0lFVnZJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXBaQ0E5SUVVd0t5c3NJSFJvYVhNdVkyOWtaU0E5SUdVc0lIUm9hWE11ZFhObFpGUnBiV1Z6SUQwZ01Ec0tJQ0FnSUgwS2ZUc0tablZ1WTNScGIyNGdWREFvY3pFc0lHVXNJSFFzSUc0c0lHa3NJSElzSUdFcElIc0tJQ0FnSUd4bGRDQnZJRDBnYm1WM0lGSnpMQ0JqSUQwZ2JtVjNJR0p2TENCc0lEMGdXMTBzSUdnZ1BTQnBMbWx6VjJWaVIwd3lMQ0IxSUQwZ2FTNXNiMmRoY21sMGFHMXBZMFJsY0hSb1FuVm1abVZ5TENCa0lEMGdhUzUyWlhKMFpYaFVaWGgwZFhKbGN5d2daaUE5SUdrdWNISmxZMmx6YVc5dUxDQnRJRDBnZXdvZ0lDQWdJQ0FnSUUxbGMyaEVaWEIwYUUxaGRHVnlhV0ZzT2lBaVpHVndkR2dpTEFvZ0lDQWdJQ0FnSUUxbGMyaEVhWE4wWVc1alpVMWhkR1Z5YVdGc09pQWlaR2x6ZEdGdVkyVlNSMEpCSWl3S0lDQWdJQ0FnSUNCTlpYTm9UbTl5YldGc1RXRjBaWEpwWVd3NklDSnViM0p0WVd3aUxBb2dJQ0FnSUNBZ0lFMWxjMmhDWVhOcFkwMWhkR1Z5YVdGc09pQWlZbUZ6YVdNaUxBb2dJQ0FnSUNBZ0lFMWxjMmhNWVcxaVpYSjBUV0YwWlhKcFlXdzZJQ0pzWVcxaVpYSjBJaXdLSUNBZ0lDQWdJQ0JOWlhOb1VHaHZibWROWVhSbGNtbGhiRG9nSW5Cb2IyNW5JaXdLSUNBZ0lDQWdJQ0JOWlhOb1ZHOXZiazFoZEdWeWFXRnNPaUFpZEc5dmJpSXNDaUFnSUNBZ0lDQWdUV1Z6YUZOMFlXNWtZWEprVFdGMFpYSnBZV3c2SUNKd2FIbHphV05oYkNJc0NpQWdJQ0FnSUNBZ1RXVnphRkJvZVhOcFkyRnNUV0YwWlhKcFlXdzZJQ0p3YUhsemFXTmhiQ0lzQ2lBZ0lDQWdJQ0FnVFdWemFFMWhkR05oY0UxaGRHVnlhV0ZzT2lBaWJXRjBZMkZ3SWl3S0lDQWdJQ0FnSUNCTWFXNWxRbUZ6YVdOTllYUmxjbWxoYkRvZ0ltSmhjMmxqSWl3S0lDQWdJQ0FnSUNCTWFXNWxSR0Z6YUdWa1RXRjBaWEpwWVd3NklDSmtZWE5vWldRaUxBb2dJQ0FnSUNBZ0lGQnZhVzUwYzAxaGRHVnlhV0ZzT2lBaWNHOXBiblJ6SWl3S0lDQWdJQ0FnSUNCVGFHRmtiM2ROWVhSbGNtbGhiRG9nSW5Ob1lXUnZkeUlzQ2lBZ0lDQWdJQ0FnVTNCeWFYUmxUV0YwWlhKcFlXdzZJQ0p6Y0hKcGRHVWlDaUFnSUNCOU93b2dJQ0FnWm5WdVkzUnBiMjRnWHloTktTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMGdQVDA5SURBZ1B5QWlkWFlpSURvZ1lIVjJKSHROZldBN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQm5LRTBzSUZRc0lFOHNJRmtzSUNRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnVlNBOUlGa3VabTluTENCNklEMGdKQzVuWlc5dFpYUnllU3dnY1NBOUlFMHVhWE5OWlhOb1UzUmhibVJoY21STllYUmxjbWxoYkNBL0lGa3VaVzUyYVhKdmJtMWxiblFnT2lCdWRXeHNMQ0JJSUQwZ0tFMHVhWE5OWlhOb1UzUmhibVJoY21STllYUmxjbWxoYkNBL0lIUWdPaUJsS1M1blpYUW9UUzVsYm5aTllYQWdmSHdnY1Nrc0lHNWxJRDBnU0NBbUppQklMbTFoY0hCcGJtY2dQVDA5SUZaeklEOGdTQzVwYldGblpTNW9aV2xuYUhRZ09pQnVkV3hzTENCWElEMGdiVnROTG5SNWNHVmRPd29nSUNBZ0lDQWdJRTB1Y0hKbFkybHphVzl1SUNFOVBTQnVkV3hzSUNZbUlDaG1JRDBnYVM1blpYUk5ZWGhRY21WamFYTnBiMjRvVFM1d2NtVmphWE5wYjI0cExDQm1JQ0U5UFNCTkxuQnlaV05wYzJsdmJpQW1KaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VSEp2WjNKaGJTNW5aWFJRWVhKaGJXVjBaWEp6T2lJc0lFMHVjSEpsWTJsemFXOXVMQ0FpYm05MElITjFjSEJ2Y25SbFpDd2dkWE5wYm1jaUxDQm1MQ0FpYVc1emRHVmhaQzRpS1NrN0NpQWdJQ0FnSUNBZ2JHVjBJRXNnUFNCNkxtMXZjbkJvUVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2YmlCOGZDQjZMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXViM0p0WVd3Z2ZId2dlaTV0YjNKd2FFRjBkSEpwWW5WMFpYTXVZMjlzYjNJc0lFUWdQU0JMSUNFOVBTQjJiMmxrSURBZ1B5QkxMbXhsYm1kMGFDQTZJREFzSUVjZ1BTQXdPd29nSUNBZ0lDQWdJSG91Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVJQ0U5UFNCMmIybGtJREFnSmlZZ0tFY2dQU0F4S1N3Z2VpNXRiM0p3YUVGMGRISnBZblYwWlhNdWJtOXliV0ZzSUNFOVBTQjJiMmxrSURBZ0ppWWdLRWNnUFNBeUtTd2dlaTV0YjNKd2FFRjBkSEpwWW5WMFpYTXVZMjlzYjNJZ0lUMDlJSFp2YVdRZ01DQW1KaUFvUnlBOUlETXBPd29nSUNBZ0lDQWdJR3hsZENCb1pTd2dabVVzSUY5bExDQjNaVHNLSUNBZ0lDQWdJQ0JwWmlBb1Z5a2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkSFFnUFNCdWJsdFhYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FHVWdQU0IwZEM1MlpYSjBaWGhUYUdGa1pYSXNJR1psSUQwZ2RIUXVabkpoWjIxbGJuUlRhR0ZrWlhJN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdobElEMGdUUzUyWlhKMFpYaFRhR0ZrWlhJc0lHWmxJRDBnVFM1bWNtRm5iV1Z1ZEZOb1lXUmxjaXdnWXk1MWNHUmhkR1VvVFNrc0lGOWxJRDBnWXk1blpYUldaWEowWlhoVGFHRmtaWEpKUkNoTktTd2dkMlVnUFNCakxtZGxkRVp5WVdkdFpXNTBVMmhoWkdWeVNVUW9UU2s3Q2lBZ0lDQWdJQ0FnYkdWMElFVmxJRDBnY3pFdVoyVjBVbVZ1WkdWeVZHRnlaMlYwS0Nrc0lGUmxJRDBnSkM1cGMwbHVjM1JoYm1ObFpFMWxjMmdnUFQwOUlDRXdMQ0JaWlNBOUlDRWhUUzV0WVhBc0lHbDBJRDBnSVNGTkxtMWhkR05oY0N3Z1EyVWdQU0FoSVVnc0lFd2dQU0FoSVUwdVlXOU5ZWEFzSUc5bElEMGdJU0ZOTG14cFoyaDBUV0Z3TENCWUlEMGdJU0ZOTG1KMWJYQk5ZWEFzSUdsbElEMGdJU0ZOTG01dmNtMWhiRTFoY0N3Z1NpQTlJQ0VoVFM1a2FYTndiR0ZqWlcxbGJuUk5ZWEFzSUZObElEMGdJU0ZOTG1WdGFYTnphWFpsVFdGd0xDQnRaU0E5SUNFaFRTNXRaWFJoYkc1bGMzTk5ZWEFzSUhsbElEMGdJU0ZOTG5KdmRXZG9ibVZ6YzAxaGNDd2dUbVVnUFNCTkxtRnVhWE52ZEhKdmNIa2dQaUF3TENCeFpTQTlJRTB1WTJ4bFlYSmpiMkYwSUQ0Z01Dd2djblFnUFNCTkxtbHlhV1JsYzJObGJtTmxJRDRnTUN3Z1F5QTlJRTB1YzJobFpXNGdQaUF3TENCVElEMGdUUzUwY21GdWMyMXBjM05wYjI0Z1BpQXdMQ0JDSUQwZ1RtVWdKaVlnSVNGTkxtRnVhWE52ZEhKdmNIbE5ZWEFzSUdWbElEMGdjV1VnSmlZZ0lTRk5MbU5zWldGeVkyOWhkRTFoY0N3Z2FpQTlJSEZsSUNZbUlDRWhUUzVqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEFzSUhSbElEMGdjV1VnSmlZZ0lTRk5MbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0N3Z1RXVWdQU0J5ZENBbUppQWhJVTB1YVhKcFpHVnpZMlZ1WTJWTllYQXNJSEpsSUQwZ2NuUWdKaVlnSVNGTkxtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV0Z3TENCa1pTQTlJRU1nSmlZZ0lTRk5Mbk5vWldWdVEyOXNiM0pOWVhBc0lFeGxJRDBnUXlBbUppQWhJVTB1YzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEFzSUZwbElEMGdJU0ZOTG5Od1pXTjFiR0Z5VFdGd0xDQnpaU0E5SUNFaFRTNXpjR1ZqZFd4aGNrTnZiRzl5VFdGd0xDQWtaU0E5SUNFaFRTNXpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVVMWhjQ3dnVDJVZ1BTQlRJQ1ltSUNFaFRTNTBjbUZ1YzIxcGMzTnBiMjVOWVhBc0lFbGxJRDBnVXlBbUppQWhJVTB1ZEdocFkydHVaWE56VFdGd0xDQlNaU0E5SUNFaFRTNW5jbUZrYVdWdWRFMWhjQ3dnVUNBOUlDRWhUUzVoYkhCb1lVMWhjQ3dnWTJVZ1BTQk5MbUZzY0doaFZHVnpkQ0ErSURBc0lHRmxJRDBnSVNGTkxtRnNjR2hoU0dGemFDd2daMlVnUFNBaElVMHVaWGgwWlc1emFXOXVjeXdnZFdVZ1BTQWhJWG91WVhSMGNtbGlkWFJsY3k1MWRqRXNJRkVnUFNBaElYb3VZWFIwY21saWRYUmxjeTUxZGpJc0lHSmxJRDBnSVNGNkxtRjBkSEpwWW5WMFpYTXVkWFl6TENCR1pTQTlJRTV1T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOTG5SdmJtVk5ZWEJ3WldRZ0ppWWdLRVZsSUQwOVBTQnVkV3hzSUh4OElFVmxMbWx6V0ZKU1pXNWtaWEpVWVhKblpYUWdQVDA5SUNFd0tTQW1KaUFvUm1VZ1BTQnpNUzUwYjI1bFRXRndjR2x1Wnlrc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVhOWFpXSkhUREk2SUdnc0NpQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSbGNrbEVPaUJYTEFvZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrWlhKVWVYQmxPaUJOTG5SNWNHVXNDaUFnSUNBZ0lDQWdJQ0FnSUhOb1lXUmxjazVoYldVNklFMHVibUZ0WlN3S0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdWNFUyaGhaR1Z5T2lCb1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJR1psTEFvZ0lDQWdJQ0FnSUNBZ0lDQmtaV1pwYm1Wek9pQk5MbVJsWm1sdVpYTXNDaUFnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVlpsY25SbGVGTm9ZV1JsY2tsRU9pQmZaU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kzVnpkRzl0Um5KaFoyMWxiblJUYUdGa1pYSkpSRG9nZDJVc0NpQWdJQ0FnSUNBZ0lDQWdJR2x6VW1GM1UyaGhaR1Z5VFdGMFpYSnBZV3c2SUUwdWFYTlNZWGRUYUdGa1pYSk5ZWFJsY21saGJDQTlQVDBnSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJR2RzYzJ4V1pYSnphVzl1T2lCTkxtZHNjMnhXWlhKemFXOXVMQW9nSUNBZ0lDQWdJQ0FnSUNCd2NtVmphWE5wYjI0NklHWXNDaUFnSUNBZ0lDQWdJQ0FnSUdsdWMzUmhibU5wYm1jNklGUmxMQW9nSUNBZ0lDQWdJQ0FnSUNCcGJuTjBZVzVqYVc1blEyOXNiM0k2SUZSbElDWW1JQ1F1YVc1emRHRnVZMlZEYjJ4dmNpQWhQVDBnYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNWd2NHOXlkSE5XWlhKMFpYaFVaWGgwZFhKbGN6b2daQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwUTI5c2IzSlRjR0ZqWlRvZ1JXVWdQVDA5SUc1MWJHd2dQeUJ6TVM1dmRYUndkWFJEYjJ4dmNsTndZV05sSURvZ1JXVXVhWE5ZVWxKbGJtUmxjbFJoY21kbGRDQTlQVDBnSVRBZ1B5QkZaUzUwWlhoMGRYSmxMbU52Ykc5eVUzQmhZMlVnT2lCTmJpd0tJQ0FnSUNBZ0lDQWdJQ0FnYldGd09pQlpaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMkZ3T2lCcGRDd0tJQ0FnSUNBZ0lDQWdJQ0FnWlc1MlRXRndPaUJEWlN3S0lDQWdJQ0FnSUNBZ0lDQWdaVzUyVFdGd1RXOWtaVG9nUTJVZ0ppWWdTQzV0WVhCd2FXNW5MQW9nSUNBZ0lDQWdJQ0FnSUNCbGJuWk5ZWEJEZFdKbFZWWklaV2xuYUhRNklHNWxMQW9nSUNBZ0lDQWdJQ0FnSUNCaGIwMWhjRG9nVEN3S0lDQWdJQ0FnSUNBZ0lDQWdiR2xuYUhSTllYQTZJRzlsTEFvZ0lDQWdJQ0FnSUNBZ0lDQmlkVzF3VFdGd09pQllMQW9nSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3hOWVhBNklHbGxMQW9nSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0ZqWlcxbGJuUk5ZWEE2SUdRZ0ppWWdTaXdLSUNBZ0lDQWdJQ0FnSUNBZ1pXMXBjM05wZG1WTllYQTZJRk5sTEFvZ0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4TllYQlBZbXBsWTNSVGNHRmpaVG9nYVdVZ0ppWWdUUzV1YjNKdFlXeE5ZWEJVZVhCbElEMDlQU0JNWml3S0lDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc1RXRndWR0Z1WjJWdWRGTndZV05sT2lCcFpTQW1KaUJOTG01dmNtMWhiRTFoY0ZSNWNHVWdQVDA5SUcxcExBb2dJQ0FnSUNBZ0lDQWdJQ0J0WlhSaGJHNWxjM05OWVhBNklHMWxMQW9nSUNBZ0lDQWdJQ0FnSUNCeWIzVm5hRzVsYzNOTllYQTZJSGxsTEFvZ0lDQWdJQ0FnSUNBZ0lDQmhibWx6YjNSeWIzQjVPaUJPWlN3S0lDQWdJQ0FnSUNBZ0lDQWdZVzVwYzI5MGNtOXdlVTFoY0RvZ1Fpd0tJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSmpiMkYwT2lCeFpTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSmpiMkYwVFdGd09pQmxaU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd09pQnFMQW9nSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQTZJSFJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBjbWxrWlhOalpXNWpaVG9nY25Rc0NpQWdJQ0FnSUNBZ0lDQWdJR2x5YVdSbGMyTmxibU5sVFdGd09pQk5aU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEE2SUhKbExBb2dJQ0FnSUNBZ0lDQWdJQ0J6YUdWbGJqb2dReXdLSUNBZ0lDQWdJQ0FnSUNBZ2MyaGxaVzVEYjJ4dmNrMWhjRG9nWkdVc0NpQWdJQ0FnSUNBZ0lDQWdJSE5vWldWdVVtOTFaMmh1WlhOelRXRndPaUJNWlN3S0lDQWdJQ0FnSUNBZ0lDQWdjM0JsWTNWc1lYSk5ZWEE2SUZwbExBb2dJQ0FnSUNBZ0lDQWdJQ0J6Y0dWamRXeGhja052Ykc5eVRXRndPaUJ6WlN3S0lDQWdJQ0FnSUNBZ0lDQWdjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEE2SUNSbExBb2dJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyMXBjM05wYjI0NklGTXNDaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpiV2x6YzJsdmJrMWhjRG9nVDJVc0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVdOcmJtVnpjMDFoY0RvZ1NXVXNDaUFnSUNBZ0lDQWdJQ0FnSUdkeVlXUnBaVzUwVFdGd09pQlNaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2IzQmhjWFZsT2lCTkxuUnlZVzV6Y0dGeVpXNTBJRDA5UFNBaE1TQW1KaUJOTG1Kc1pXNWthVzVuSUQwOVBTQlhhU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lXeHdhR0ZOWVhBNklGQXNDaUFnSUNBZ0lDQWdJQ0FnSUdGc2NHaGhWR1Z6ZERvZ1kyVXNDaUFnSUNBZ0lDQWdJQ0FnSUdGc2NHaGhTR0Z6YURvZ1lXVXNDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJXSnBibVU2SUUwdVkyOXRZbWx1WlN3S0lDQWdJQ0FnSUNBZ0lDQWdiV0Z3VlhZNklGbGxJQ1ltSUY4b1RTNXRZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnZUV0Z3VlhZNklFd2dKaVlnWHloTkxtRnZUV0Z3TG1Ob1lXNXVaV3dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnNhV2RvZEUxaGNGVjJPaUJ2WlNBbUppQmZLRTB1YkdsbmFIUk5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHSjFiWEJOWVhCVmRqb2dXQ0FtSmlCZktFMHVZblZ0Y0UxaGNDNWphR0Z1Ym1Wc0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNUV0Z3VlhZNklHbGxJQ1ltSUY4b1RTNXViM0p0WVd4TllYQXVZMmhoYm01bGJDa3NDaUFnSUNBZ0lDQWdJQ0FnSUdScGMzQnNZV05sYldWdWRFMWhjRlYyT2lCS0lDWW1JRjhvVFM1a2FYTndiR0ZqWlcxbGJuUk5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHVnRhWE56YVhabFRXRndWWFk2SUZObElDWW1JRjhvVFM1bGJXbHpjMmwyWlUxaGNDNWphR0Z1Ym1Wc0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnYldWMFlXeHVaWE56VFdGd1ZYWTZJRzFsSUNZbUlGOG9UUzV0WlhSaGJHNWxjM05OWVhBdVkyaGhibTVsYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJSEp2ZFdkb2JtVnpjMDFoY0ZWMk9pQjVaU0FtSmlCZktFMHVjbTkxWjJodVpYTnpUV0Z3TG1Ob1lXNXVaV3dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmhibWx6YjNSeWIzQjVUV0Z3VlhZNklFSWdKaVlnWHloTkxtRnVhWE52ZEhKdmNIbE5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5WTI5aGRFMWhjRlYyT2lCbFpTQW1KaUJmS0UwdVkyeGxZWEpqYjJGMFRXRndMbU5vWVc1dVpXd3BMQW9nSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbU52WVhST2IzSnRZV3hOWVhCVmRqb2dhaUFtSmlCZktFMHVZMnhsWVhKamIyRjBUbTl5YldGc1RXRndMbU5vWVc1dVpXd3BMQW9nSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQlZkam9nZEdVZ0ppWWdYeWhOTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDNWphR0Z1Ym1Wc0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnYVhKcFpHVnpZMlZ1WTJWTllYQlZkam9nVFdVZ0ppWWdYeWhOTG1seWFXUmxjMk5sYm1ObFRXRndMbU5vWVc1dVpXd3BMQW9nSUNBZ0lDQWdJQ0FnSUNCcGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjRlYyT2lCeVpTQW1KaUJmS0UwdWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1UTI5c2IzSk5ZWEJWZGpvZ1pHVWdKaVlnWHloTkxuTm9aV1Z1UTI5c2IzSk5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1VW05MVoyaHVaWE56VFdGd1ZYWTZJRXhsSUNZbUlGOG9UUzV6YUdWbGJsSnZkV2RvYm1WemMwMWhjQzVqYUdGdWJtVnNLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2MzQmxZM1ZzWVhKTllYQlZkam9nV21VZ0ppWWdYeWhOTG5Od1pXTjFiR0Z5VFdGd0xtTm9ZVzV1Wld3cExBb2dJQ0FnSUNBZ0lDQWdJQ0J6Y0dWamRXeGhja052Ykc5eVRXRndWWFk2SUhObElDWW1JRjhvVFM1emNHVmpkV3hoY2tOdmJHOXlUV0Z3TG1Ob1lXNXVaV3dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVVMWhjRlYyT2lBa1pTQW1KaUJmS0UwdWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhsTllYQXVZMmhoYm01bGJDa3NDaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpiV2x6YzJsdmJrMWhjRlYyT2lCUFpTQW1KaUJmS0UwdWRISmhibk50YVhOemFXOXVUV0Z3TG1Ob1lXNXVaV3dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2xqYTI1bGMzTk5ZWEJWZGpvZ1NXVWdKaVlnWHloTkxuUm9hV05yYm1WemMwMWhjQzVqYUdGdWJtVnNLU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lXeHdhR0ZOWVhCVmRqb2dVQ0FtSmlCZktFMHVZV3h3YUdGTllYQXVZMmhoYm01bGJDa3NDaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUmxlRlJoYm1kbGJuUnpPaUFoSVhvdVlYUjBjbWxpZFhSbGN5NTBZVzVuWlc1MElDWW1JQ2hwWlNCOGZDQk9aU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUVOdmJHOXljem9nVFM1MlpYSjBaWGhEYjJ4dmNuTXNDaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUmxlRUZzY0doaGN6b2dUUzUyWlhKMFpYaERiMnh2Y25NZ1BUMDlJQ0V3SUNZbUlDRWhlaTVoZEhSeWFXSjFkR1Z6TG1OdmJHOXlJQ1ltSUhvdVlYUjBjbWxpZFhSbGN5NWpiMnh2Y2k1cGRHVnRVMmw2WlNBOVBUMGdOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2RtVnlkR1Y0VlhZeGN6b2dkV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUZWMk1uTTZJRkVzQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUZWMk0zTTZJR0psTEFvZ0lDQWdJQ0FnSUNBZ0lDQndiMmx1ZEhOVmRuTTZJQ1F1YVhOUWIybHVkSE1nUFQwOUlDRXdJQ1ltSUNFaGVpNWhkSFJ5YVdKMWRHVnpMblYySUNZbUlDaFpaU0I4ZkNCUUtTd0tJQ0FnSUNBZ0lDQWdJQ0FnWm05bk9pQWhJVlVzQ2lBZ0lDQWdJQ0FnSUNBZ0lIVnpaVVp2WnpvZ1RTNW1iMmNnUFQwOUlDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNCbWIyZEZlSEF5T2lCVklDWW1JRlV1YVhOR2IyZEZlSEF5TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iR0YwVTJoaFpHbHVaem9nVFM1bWJHRjBVMmhoWkdsdVp5QTlQVDBnSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJSE5wZW1WQmRIUmxiblZoZEdsdmJqb2dUUzV6YVhwbFFYUjBaVzUxWVhScGIyNGdQVDA5SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzYjJkaGNtbDBhRzFwWTBSbGNIUm9RblZtWm1WeU9pQjFMQW9nSUNBZ0lDQWdJQ0FnSUNCemEybHVibWx1WnpvZ0pDNXBjMU5yYVc1dVpXUk5aWE5vSUQwOVBTQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXOXljR2hVWVhKblpYUnpPaUI2TG0xdmNuQm9RWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaUFoUFQwZ2RtOXBaQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnRiM0p3YUU1dmNtMWhiSE02SUhvdWJXOXljR2hCZEhSeWFXSjFkR1Z6TG01dmNtMWhiQ0FoUFQwZ2RtOXBaQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnRiM0p3YUVOdmJHOXljem9nZWk1dGIzSndhRUYwZEhKcFluVjBaWE11WTI5c2IzSWdJVDA5SUhadmFXUWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXOXljR2hVWVhKblpYUnpRMjkxYm5RNklFUXNDaUFnSUNBZ0lDQWdJQ0FnSUcxdmNuQm9WR1Y0ZEhWeVpWTjBjbWxrWlRvZ1J5d0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFJHbHlUR2xuYUhSek9pQlVMbVJwY21WamRHbHZibUZzTG14bGJtZDBhQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRVRzlwYm5STWFXZG9kSE02SUZRdWNHOXBiblF1YkdWdVozUm9MQW9nSUNBZ0lDQWdJQ0FnSUNCdWRXMVRjRzkwVEdsbmFIUnpPaUJVTG5Od2IzUXViR1Z1WjNSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0J1ZFcxVGNHOTBUR2xuYUhSTllYQnpPaUJVTG5Od2IzUk1hV2RvZEUxaGNDNXNaVzVuZEdnc0NpQWdJQ0FnSUNBZ0lDQWdJRzUxYlZKbFkzUkJjbVZoVEdsbmFIUnpPaUJVTG5KbFkzUkJjbVZoTG14bGJtZDBhQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRTR1Z0YVV4cFoyaDBjem9nVkM1b1pXMXBMbXhsYm1kMGFDd0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFJHbHlUR2xuYUhSVGFHRmtiM2R6T2lCVUxtUnBjbVZqZEdsdmJtRnNVMmhoWkc5M1RXRndMbXhsYm1kMGFDd0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFVHOXBiblJNYVdkb2RGTm9ZV1J2ZDNNNklGUXVjRzlwYm5SVGFHRmtiM2ROWVhBdWJHVnVaM1JvTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVkVzFUY0c5MFRHbG5hSFJUYUdGa2IzZHpPaUJVTG5Od2IzUlRhR0ZrYjNkTllYQXViR1Z1WjNSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0J1ZFcxVGNHOTBUR2xuYUhSVGFHRmtiM2R6VjJsMGFFMWhjSE02SUZRdWJuVnRVM0J2ZEV4cFoyaDBVMmhoWkc5M2MxZHBkR2hOWVhCekxBb2dJQ0FnSUNBZ0lDQWdJQ0J1ZFcxTWFXZG9kRkJ5YjJKbGN6b2dWQzV1ZFcxTWFXZG9kRkJ5YjJKbGN5d0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFEyeHBjSEJwYm1kUWJHRnVaWE02SUdFdWJuVnRVR3hoYm1WekxBb2dJQ0FnSUNBZ0lDQWdJQ0J1ZFcxRGJHbHdTVzUwWlhKelpXTjBhVzl1T2lCaExtNTFiVWx1ZEdWeWMyVmpkR2x2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdaR2wwYUdWeWFXNW5PaUJOTG1ScGRHaGxjbWx1Wnl3S0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1RXRndSVzVoWW14bFpEb2djekV1YzJoaFpHOTNUV0Z3TG1WdVlXSnNaV1FnSmlZZ1R5NXNaVzVuZEdnZ1BpQXdMQW9nSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2ROWVhCVWVYQmxPaUJ6TVM1emFHRmtiM2ROWVhBdWRIbHdaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHOXVaVTFoY0hCcGJtYzZJRVpsTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZNWldkaFkzbE1hV2RvZEhNNklITXhMbDkxYzJWTVpXZGhZM2xNYVdkb2RITXNDaUFnSUNBZ0lDQWdJQ0FnSUdSbFkyOWtaVlpwWkdWdlZHVjRkSFZ5WlRvZ1dXVWdKaVlnVFM1dFlYQXVhWE5XYVdSbGIxUmxlSFIxY21VZ1BUMDlJQ0V3SUNZbUlGRmxMbWRsZEZSeVlXNXpabVZ5S0UwdWJXRndMbU52Ykc5eVUzQmhZMlVwSUQwOVBTQnVkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISmxiWFZzZEdsd2JHbGxaRUZzY0doaE9pQk5MbkJ5WlcxMWJIUnBjR3hwWldSQmJIQm9ZU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHOTFZbXhsVTJsa1pXUTZJRTB1YzJsa1pTQTlQVDBnWjI0c0NpQWdJQ0FnSUNBZ0lDQWdJR1pzYVhCVGFXUmxaRG9nVFM1emFXUmxJRDA5UFNCR2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnZFhObFJHVndkR2hRWVdOcmFXNW5PaUJOTG1SbGNIUm9VR0ZqYTJsdVp5QStQU0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQmtaWEIwYUZCaFkydHBibWM2SUUwdVpHVndkR2hRWVdOcmFXNW5JSHg4SURBc0NpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE1FRjBkSEpwWW5WMFpVNWhiV1U2SUUwdWFXNWtaWGd3UVhSMGNtbGlkWFJsVG1GdFpTd0tJQ0FnSUNBZ0lDQWdJQ0FnWlhoMFpXNXphVzl1UkdWeWFYWmhkR2wyWlhNNklHZGxJQ1ltSUUwdVpYaDBaVzV6YVc5dWN5NWtaWEpwZG1GMGFYWmxjeUE5UFQwZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUdWNGRHVnVjMmx2YmtaeVlXZEVaWEIwYURvZ1oyVWdKaVlnVFM1bGVIUmxibk5wYjI1ekxtWnlZV2RFWlhCMGFDQTlQVDBnSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEdWdWMybHZia1J5WVhkQ2RXWm1aWEp6T2lCblpTQW1KaUJOTG1WNGRHVnVjMmx2Ym5NdVpISmhkMEoxWm1abGNuTWdQVDA5SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JsZUhSbGJuTnBiMjVUYUdGa1pYSlVaWGgwZFhKbFRFOUVPaUJuWlNBbUppQk5MbVY0ZEdWdWMybHZibk11YzJoaFpHVnlWR1Y0ZEhWeVpVeFBSQ0E5UFQwZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbVZ5UlhoMFpXNXphVzl1Um5KaFowUmxjSFJvT2lCb0lIeDhJRzR1YUdGektDSkZXRlJmWm5KaFoxOWtaWEIwYUNJcExBb2dJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSmxja1Y0ZEdWdWMybHZia1J5WVhkQ2RXWm1aWEp6T2lCb0lIeDhJRzR1YUdGektDSlhSVUpIVEY5a2NtRjNYMkoxWm1abGNuTWlLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5WlhKRmVIUmxibk5wYjI1VGFHRmtaWEpVWlhoMGRYSmxURzlrT2lCb0lIeDhJRzR1YUdGektDSkZXRlJmYzJoaFpHVnlYM1JsZUhSMWNtVmZiRzlrSWlrc0NpQWdJQ0FnSUNBZ0lDQWdJR04xYzNSdmJWQnliMmR5WVcxRFlXTm9aVXRsZVRvZ1RTNWpkWE4wYjIxUWNtOW5jbUZ0UTJGamFHVkxaWGtvS1FvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQndLRTBwSUhzS0lDQWdJQ0FnSUNCc1pYUWdWQ0E5SUZ0ZE93b2dJQ0FnSUNBZ0lHbG1JQ2hOTG5Ob1lXUmxja2xFSUQ4Z1ZDNXdkWE5vS0UwdWMyaGhaR1Z5U1VRcElEb2dLRlF1Y0hWemFDaE5MbU4xYzNSdmJWWmxjblJsZUZOb1lXUmxja2xFS1N3Z1ZDNXdkWE5vS0UwdVkzVnpkRzl0Um5KaFoyMWxiblJUYUdGa1pYSkpSQ2twTENCTkxtUmxabWx1WlhNZ0lUMDlJSFp2YVdRZ01Da2dabTl5S0d4bGRDQlBJR2x1SUUwdVpHVm1hVzVsY3lsVUxuQjFjMmdvVHlrc0lGUXVjSFZ6YUNoTkxtUmxabWx1WlhOYlQxMHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5MbWx6VW1GM1UyaGhaR1Z5VFdGMFpYSnBZV3dnUFQwOUlDRXhJQ1ltSUNoMktGUXNJRTBwTENCNEtGUXNJRTBwTENCVUxuQjFjMmdvY3pFdWIzVjBjSFYwUTI5c2IzSlRjR0ZqWlNrcExDQlVMbkIxYzJnb1RTNWpkWE4wYjIxUWNtOW5jbUZ0UTJGamFHVkxaWGtwTENCVUxtcHZhVzRvS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlIWW9UU3dnVkNrZ2V3b2dJQ0FnSUNBZ0lFMHVjSFZ6YUNoVUxuQnlaV05wYzJsdmJpa3NJRTB1Y0hWemFDaFVMbTkxZEhCMWRFTnZiRzl5VTNCaFkyVXBMQ0JOTG5CMWMyZ29WQzVsYm5aTllYQk5iMlJsS1N3Z1RTNXdkWE5vS0ZRdVpXNTJUV0Z3UTNWaVpWVldTR1ZwWjJoMEtTd2dUUzV3ZFhOb0tGUXViV0Z3VlhZcExDQk5MbkIxYzJnb1ZDNWhiSEJvWVUxaGNGVjJLU3dnVFM1d2RYTm9LRlF1YkdsbmFIUk5ZWEJWZGlrc0lFMHVjSFZ6YUNoVUxtRnZUV0Z3VlhZcExDQk5MbkIxYzJnb1ZDNWlkVzF3VFdGd1ZYWXBMQ0JOTG5CMWMyZ29WQzV1YjNKdFlXeE5ZWEJWZGlrc0lFMHVjSFZ6YUNoVUxtUnBjM0JzWVdObGJXVnVkRTFoY0ZWMktTd2dUUzV3ZFhOb0tGUXVaVzFwYzNOcGRtVk5ZWEJWZGlrc0lFMHVjSFZ6YUNoVUxtMWxkR0ZzYm1WemMwMWhjRlYyS1N3Z1RTNXdkWE5vS0ZRdWNtOTFaMmh1WlhOelRXRndWWFlwTENCTkxuQjFjMmdvVkM1aGJtbHpiM1J5YjNCNVRXRndWWFlwTENCTkxuQjFjMmdvVkM1amJHVmhjbU52WVhSTllYQlZkaWtzSUUwdWNIVnphQ2hVTG1Oc1pXRnlZMjloZEU1dmNtMWhiRTFoY0ZWMktTd2dUUzV3ZFhOb0tGUXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3VlhZcExDQk5MbkIxYzJnb1ZDNXBjbWxrWlhOalpXNWpaVTFoY0ZWMktTd2dUUzV3ZFhOb0tGUXVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhCVmRpa3NJRTB1Y0hWemFDaFVMbk5vWldWdVEyOXNiM0pOWVhCVmRpa3NJRTB1Y0hWemFDaFVMbk5vWldWdVVtOTFaMmh1WlhOelRXRndWWFlwTENCTkxuQjFjMmdvVkM1emNHVmpkV3hoY2sxaGNGVjJLU3dnVFM1d2RYTm9LRlF1YzNCbFkzVnNZWEpEYjJ4dmNrMWhjRlYyS1N3Z1RTNXdkWE5vS0ZRdWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhsTllYQlZkaWtzSUUwdWNIVnphQ2hVTG5SeVlXNXpiV2x6YzJsdmJrMWhjRlYyS1N3Z1RTNXdkWE5vS0ZRdWRHaHBZMnR1WlhOelRXRndWWFlwTENCTkxuQjFjMmdvVkM1amIyMWlhVzVsS1N3Z1RTNXdkWE5vS0ZRdVptOW5SWGh3TWlrc0lFMHVjSFZ6YUNoVUxuTnBlbVZCZEhSbGJuVmhkR2x2Ymlrc0lFMHVjSFZ6YUNoVUxtMXZjbkJvVkdGeVoyVjBjME52ZFc1MEtTd2dUUzV3ZFhOb0tGUXViVzl5Y0doQmRIUnlhV0oxZEdWRGIzVnVkQ2tzSUUwdWNIVnphQ2hVTG01MWJVUnBja3hwWjJoMGN5a3NJRTB1Y0hWemFDaFVMbTUxYlZCdmFXNTBUR2xuYUhSektTd2dUUzV3ZFhOb0tGUXViblZ0VTNCdmRFeHBaMmgwY3lrc0lFMHVjSFZ6YUNoVUxtNTFiVk53YjNSTWFXZG9kRTFoY0hNcExDQk5MbkIxYzJnb1ZDNXVkVzFJWlcxcFRHbG5hSFJ6S1N3Z1RTNXdkWE5vS0ZRdWJuVnRVbVZqZEVGeVpXRk1hV2RvZEhNcExDQk5MbkIxYzJnb1ZDNXVkVzFFYVhKTWFXZG9kRk5vWVdSdmQzTXBMQ0JOTG5CMWMyZ29WQzV1ZFcxUWIybHVkRXhwWjJoMFUyaGhaRzkzY3lrc0lFMHVjSFZ6YUNoVUxtNTFiVk53YjNSTWFXZG9kRk5vWVdSdmQzTXBMQ0JOTG5CMWMyZ29WQzV1ZFcxVGNHOTBUR2xuYUhSVGFHRmtiM2R6VjJsMGFFMWhjSE1wTENCTkxuQjFjMmdvVkM1dWRXMU1hV2RvZEZCeWIySmxjeWtzSUUwdWNIVnphQ2hVTG5Ob1lXUnZkMDFoY0ZSNWNHVXBMQ0JOTG5CMWMyZ29WQzUwYjI1bFRXRndjR2x1Wnlrc0lFMHVjSFZ6YUNoVUxtNTFiVU5zYVhCd2FXNW5VR3hoYm1WektTd2dUUzV3ZFhOb0tGUXViblZ0UTJ4cGNFbHVkR1Z5YzJWamRHbHZiaWtzSUUwdWNIVnphQ2hVTG1SbGNIUm9VR0ZqYTJsdVp5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUI0S0Uwc0lGUXBJSHNLSUNBZ0lDQWdJQ0J2TG1ScGMyRmliR1ZCYkd3b0tTd2dWQzVwYzFkbFlrZE1NaUFtSmlCdkxtVnVZV0pzWlNnd0tTd2dWQzV6ZFhCd2IzSjBjMVpsY25SbGVGUmxlSFIxY21WeklDWW1JRzh1Wlc1aFlteGxLREVwTENCVUxtbHVjM1JoYm1OcGJtY2dKaVlnYnk1bGJtRmliR1VvTWlrc0lGUXVhVzV6ZEdGdVkybHVaME52Ykc5eUlDWW1JRzh1Wlc1aFlteGxLRE1wTENCVUxtMWhkR05oY0NBbUppQnZMbVZ1WVdKc1pTZzBLU3dnVkM1bGJuWk5ZWEFnSmlZZ2J5NWxibUZpYkdVb05Ta3NJRlF1Ym05eWJXRnNUV0Z3VDJKcVpXTjBVM0JoWTJVZ0ppWWdieTVsYm1GaWJHVW9OaWtzSUZRdWJtOXliV0ZzVFdGd1ZHRnVaMlZ1ZEZOd1lXTmxJQ1ltSUc4dVpXNWhZbXhsS0RjcExDQlVMbU5zWldGeVkyOWhkQ0FtSmlCdkxtVnVZV0pzWlNnNEtTd2dWQzVwY21sa1pYTmpaVzVqWlNBbUppQnZMbVZ1WVdKc1pTZzVLU3dnVkM1aGJIQm9ZVlJsYzNRZ0ppWWdieTVsYm1GaWJHVW9NVEFwTENCVUxuWmxjblJsZUVOdmJHOXljeUFtSmlCdkxtVnVZV0pzWlNneE1Ta3NJRlF1ZG1WeWRHVjRRV3h3YUdGeklDWW1JRzh1Wlc1aFlteGxLREV5S1N3Z1ZDNTJaWEowWlhoVmRqRnpJQ1ltSUc4dVpXNWhZbXhsS0RFektTd2dWQzUyWlhKMFpYaFZkakp6SUNZbUlHOHVaVzVoWW14bEtERTBLU3dnVkM1MlpYSjBaWGhWZGpOeklDWW1JRzh1Wlc1aFlteGxLREUxS1N3Z1ZDNTJaWEowWlhoVVlXNW5aVzUwY3lBbUppQnZMbVZ1WVdKc1pTZ3hOaWtzSUZRdVlXNXBjMjkwY205d2VTQW1KaUJ2TG1WdVlXSnNaU2d4Tnlrc0lFMHVjSFZ6YUNodkxtMWhjMnNwTENCdkxtUnBjMkZpYkdWQmJHd29LU3dnVkM1bWIyY2dKaVlnYnk1bGJtRmliR1VvTUNrc0lGUXVkWE5sUm05bklDWW1JRzh1Wlc1aFlteGxLREVwTENCVUxtWnNZWFJUYUdGa2FXNW5JQ1ltSUc4dVpXNWhZbXhsS0RJcExDQlVMbXh2WjJGeWFYUm9iV2xqUkdWd2RHaENkV1ptWlhJZ0ppWWdieTVsYm1GaWJHVW9NeWtzSUZRdWMydHBibTVwYm1jZ0ppWWdieTVsYm1GaWJHVW9OQ2tzSUZRdWJXOXljR2hVWVhKblpYUnpJQ1ltSUc4dVpXNWhZbXhsS0RVcExDQlVMbTF2Y25Cb1RtOXliV0ZzY3lBbUppQnZMbVZ1WVdKc1pTZzJLU3dnVkM1dGIzSndhRU52Ykc5eWN5QW1KaUJ2TG1WdVlXSnNaU2czS1N3Z1ZDNXdjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWdKaVlnYnk1bGJtRmliR1VvT0Nrc0lGUXVjMmhoWkc5M1RXRndSVzVoWW14bFpDQW1KaUJ2TG1WdVlXSnNaU2c1S1N3Z1ZDNTFjMlZNWldkaFkzbE1hV2RvZEhNZ0ppWWdieTVsYm1GaWJHVW9NVEFwTENCVUxtUnZkV0pzWlZOcFpHVmtJQ1ltSUc4dVpXNWhZbXhsS0RFeEtTd2dWQzVtYkdsd1UybGtaV1FnSmlZZ2J5NWxibUZpYkdVb01USXBMQ0JVTG5WelpVUmxjSFJvVUdGamEybHVaeUFtSmlCdkxtVnVZV0pzWlNneE15a3NJRlF1WkdsMGFHVnlhVzVuSUNZbUlHOHVaVzVoWW14bEtERTBLU3dnVkM1MGNtRnVjMjFwYzNOcGIyNGdKaVlnYnk1bGJtRmliR1VvTVRVcExDQlVMbk5vWldWdUlDWW1JRzh1Wlc1aFlteGxLREUyS1N3Z1ZDNXZjR0Z4ZFdVZ0ppWWdieTVsYm1GaWJHVW9NVGNwTENCVUxuQnZhVzUwYzFWMmN5QW1KaUJ2TG1WdVlXSnNaU2d4T0Nrc0lGUXVaR1ZqYjJSbFZtbGtaVzlVWlhoMGRYSmxJQ1ltSUc4dVpXNWhZbXhsS0RFNUtTd2dUUzV3ZFhOb0tHOHViV0Z6YXlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjVLRTBwSUhzS0lDQWdJQ0FnSUNCc1pYUWdWQ0E5SUcxYlRTNTBlWEJsWFN3Z1R6c0tJQ0FnSUNBZ0lDQnBaaUFvVkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dTQTlJRzV1VzFSZE93b2dJQ0FnSUNBZ0lDQWdJQ0JQSUQwZ2VIQXVZMnh2Ym1Vb1dTNTFibWxtYjNKdGN5azdDaUFnSUNBZ0lDQWdmU0JsYkhObElFOGdQU0JOTG5WdWFXWnZjbTF6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJQT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1lpaE5MQ0JVS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRTg3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JaSUQwZ01Dd2dKQ0E5SUd3dWJHVnVaM1JvT3lCWklEd2dKRHNnV1NzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGVWdQU0JzVzFsZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ZTNWpZV05vWlV0bGVTQTlQVDBnVkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1R5QTlJRlVzSUNzclR5NTFjMlZrVkdsdFpYTTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUeUE5UFQwZ2RtOXBaQ0F3SUNZbUlDaFBJRDBnYm1WM0lHSXdLSE14TENCVUxDQk5MQ0J5S1N3Z2JDNXdkWE5vS0U4cEtTd2dUenNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhjb1RTa2dld29nSUNBZ0lDQWdJR2xtSUNndExVMHVkWE5sWkZScGJXVnpJRDA5UFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQlVJRDBnYkM1cGJtUmxlRTltS0UwcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzVzFSZElEMGdiRnRzTG14bGJtZDBhQ0F0SURGZExDQnNMbkJ2Y0NncExDQk5MbVJsYzNSeWIza29LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCU0tFMHBJSHNLSUNBZ0lDQWdJQ0JqTG5KbGJXOTJaU2hOS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFa29LU0I3Q2lBZ0lDQWdJQ0FnWXk1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lHZGxkRkJoY21GdFpYUmxjbk02SUdjc0NpQWdJQ0FnSUNBZ1oyVjBVSEp2WjNKaGJVTmhZMmhsUzJWNU9pQndMQW9nSUNBZ0lDQWdJR2RsZEZWdWFXWnZjbTF6T2lCNUxBb2dJQ0FnSUNBZ0lHRmpjWFZwY21WUWNtOW5jbUZ0T2lCaUxBb2dJQ0FnSUNBZ0lISmxiR1ZoYzJWUWNtOW5jbUZ0T2lCM0xBb2dJQ0FnSUNBZ0lISmxiR1ZoYzJWVGFHRmtaWEpEWVdOb1pUb2dVaXdLSUNBZ0lDQWdJQ0J3Y205bmNtRnRjem9nYkN3S0lDQWdJQ0FnSUNCa2FYTndiM05sT2lCSkNpQWdJQ0I5T3dwOUNtWjFibU4wYVc5dUlIY3dLQ2tnZXdvZ0lDQWdiR1YwSUhNeElEMGdibVYzSUZkbFlXdE5ZWEE3Q2lBZ0lDQm1kVzVqZEdsdmJpQmxLSElwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUhNeExtZGxkQ2h5S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVNBOVBUMGdkbTlwWkNBd0lDWW1JQ2hoSUQwZ2UzMHNJSE14TG5ObGRDaHlMQ0JoS1Nrc0lHRTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUIwS0hJcElIc0tJQ0FnSUNBZ0lDQnpNUzVrWld4bGRHVW9jaWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdUtISXNJR0VzSUc4cElIc0tJQ0FnSUNBZ0lDQnpNUzVuWlhRb2NpbGJZVjBnUFNCdk93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhU2dwSUhzS0lDQWdJQ0FnSUNCek1TQTlJRzVsZHlCWFpXRnJUV0Z3T3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCblpYUTZJR1VzQ2lBZ0lDQWdJQ0FnY21WdGIzWmxPaUIwTEFvZ0lDQWdJQ0FnSUhWd1pHRjBaVG9nYml3S0lDQWdJQ0FnSUNCa2FYTndiM05sT2lCcENpQWdJQ0I5T3dwOUNtWjFibU4wYVc5dUlFRXdLSE14TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnY3pFdVozSnZkWEJQY21SbGNpQWhQVDBnWlM1bmNtOTFjRTl5WkdWeUlEOGdjekV1WjNKdmRYQlBjbVJsY2lBdElHVXVaM0p2ZFhCUGNtUmxjaUE2SUhNeExuSmxibVJsY2s5eVpHVnlJQ0U5UFNCbExuSmxibVJsY2s5eVpHVnlJRDhnY3pFdWNtVnVaR1Z5VDNKa1pYSWdMU0JsTG5KbGJtUmxjazl5WkdWeUlEb2djekV1YldGMFpYSnBZV3d1YVdRZ0lUMDlJR1V1YldGMFpYSnBZV3d1YVdRZ1B5QnpNUzV0WVhSbGNtbGhiQzVwWkNBdElHVXViV0YwWlhKcFlXd3VhV1FnT2lCek1TNTZJQ0U5UFNCbExub2dQeUJ6TVM1NklDMGdaUzU2SURvZ2N6RXVhV1FnTFNCbExtbGtPd3A5Q21aMWJtTjBhVzl1SUZKb0tITXhMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdjekV1WjNKdmRYQlBjbVJsY2lBaFBUMGdaUzVuY205MWNFOXlaR1Z5SUQ4Z2N6RXVaM0p2ZFhCUGNtUmxjaUF0SUdVdVozSnZkWEJQY21SbGNpQTZJSE14TG5KbGJtUmxjazl5WkdWeUlDRTlQU0JsTG5KbGJtUmxjazl5WkdWeUlEOGdjekV1Y21WdVpHVnlUM0prWlhJZ0xTQmxMbkpsYm1SbGNrOXlaR1Z5SURvZ2N6RXVlaUFoUFQwZ1pTNTZJRDhnWlM1NklDMGdjekV1ZWlBNklITXhMbWxrSUMwZ1pTNXBaRHNLZlFwbWRXNWpkR2x2YmlCRGFDZ3BJSHNLSUNBZ0lHeGxkQ0J6TVNBOUlGdGRMQ0JsSUQwZ01Dd2dkQ0E5SUZ0ZExDQnVJRDBnVzEwc0lHa2dQU0JiWFRzS0lDQWdJR1oxYm1OMGFXOXVJSElvS1NCN0NpQWdJQ0FnSUNBZ1pTQTlJREFzSUhRdWJHVnVaM1JvSUQwZ01Dd2diaTVzWlc1bmRHZ2dQU0F3TENCcExteGxibWQwYUNBOUlEQTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJoS0hVc0lHUXNJR1lzSUcwc0lGOHNJR2NwSUhzS0lDQWdJQ0FnSUNCc1pYUWdjQ0E5SUhNeFcyVmRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQndJRDA5UFNCMmIybGtJREFnUHlBb2NDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJSFV1YVdRc0NpQWdJQ0FnSUNBZ0lDQWdJRzlpYW1WamREb2dkU3dLSUNBZ0lDQWdJQ0FnSUNBZ1oyVnZiV1YwY25rNklHUXNDaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzT2lCbUxBb2dJQ0FnSUNBZ0lDQWdJQ0JuY205MWNFOXlaR1Z5T2lCdExBb2dJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSlBjbVJsY2pvZ2RTNXlaVzVrWlhKUGNtUmxjaXdLSUNBZ0lDQWdJQ0FnSUNBZ2Vqb2dYeXdLSUNBZ0lDQWdJQ0FnSUNBZ1ozSnZkWEE2SUdjS0lDQWdJQ0FnSUNCOUxDQnpNVnRsWFNBOUlIQXBJRG9nS0hBdWFXUWdQU0IxTG1sa0xDQndMbTlpYW1WamRDQTlJSFVzSUhBdVoyVnZiV1YwY25rZ1BTQmtMQ0J3TG0xaGRHVnlhV0ZzSUQwZ1ppd2djQzVuY205MWNFOXlaR1Z5SUQwZ2JTd2djQzV5Wlc1a1pYSlBjbVJsY2lBOUlIVXVjbVZ1WkdWeVQzSmtaWElzSUhBdWVpQTlJRjhzSUhBdVozSnZkWEFnUFNCbktTd2daU3NyTENCd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdieWgxTENCa0xDQm1MQ0J0TENCZkxDQm5LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIQWdQU0JoS0hVc0lHUXNJR1lzSUcwc0lGOHNJR2NwT3dvZ0lDQWdJQ0FnSUdZdWRISmhibk50YVhOemFXOXVJRDRnTUNBL0lHNHVjSFZ6YUNod0tTQTZJR1l1ZEhKaGJuTndZWEpsYm5RZ1BUMDlJQ0V3SUQ4Z2FTNXdkWE5vS0hBcElEb2dkQzV3ZFhOb0tIQXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWXloMUxDQmtMQ0JtTENCdExDQmZMQ0JuS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSEFnUFNCaEtIVXNJR1FzSUdZc0lHMHNJRjhzSUdjcE93b2dJQ0FnSUNBZ0lHWXVkSEpoYm5OdGFYTnphVzl1SUQ0Z01DQS9JRzR1ZFc1emFHbG1kQ2h3S1NBNklHWXVkSEpoYm5Od1lYSmxiblFnUFQwOUlDRXdJRDhnYVM1MWJuTm9hV1owS0hBcElEb2dkQzUxYm5Ob2FXWjBLSEFwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2JDaDFMQ0JrS1NCN0NpQWdJQ0FnSUNBZ2RDNXNaVzVuZEdnZ1BpQXhJQ1ltSUhRdWMyOXlkQ2gxSUh4OElFRXdLU3dnYmk1c1pXNW5kR2dnUGlBeElDWW1JRzR1YzI5eWRDaGtJSHg4SUZKb0tTd2dhUzVzWlc1bmRHZ2dQaUF4SUNZbUlHa3VjMjl5ZENoa0lIeDhJRkpvS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHZ29LU0I3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IxSUQwZ1pTd2daQ0E5SUhNeExteGxibWQwYURzZ2RTQThJR1E3SUhVckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnY3pGYmRWMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1MbWxrSUQwOVBTQnVkV3hzS1NCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1ppNXBaQ0E5SUc1MWJHd3NJR1l1YjJKcVpXTjBJRDBnYm5Wc2JDd2daaTVuWlc5dFpYUnllU0E5SUc1MWJHd3NJR1l1YldGMFpYSnBZV3dnUFNCdWRXeHNMQ0JtTG1keWIzVndJRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJRzl3WVhGMVpUb2dkQ3dLSUNBZ0lDQWdJQ0IwY21GdWMyMXBjM05wZG1VNklHNHNDaUFnSUNBZ0lDQWdkSEpoYm5Od1lYSmxiblE2SUdrc0NpQWdJQ0FnSUNBZ2FXNXBkRG9nY2l3S0lDQWdJQ0FnSUNCd2RYTm9PaUJ2TEFvZ0lDQWdJQ0FnSUhWdWMyaHBablE2SUdNc0NpQWdJQ0FnSUNBZ1ptbHVhWE5vT2lCb0xBb2dJQ0FnSUNBZ0lITnZjblE2SUd3S0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z1VqQW9LU0I3Q2lBZ0lDQnNaWFFnY3pFZ1BTQnVaWGNnVjJWaGEwMWhjRHNLSUNBZ0lHWjFibU4wYVc5dUlHVW9iaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2N6RXVaMlYwS0c0cExDQmhPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnlJRDA5UFNCMmIybGtJREFnUHlBb1lTQTlJRzVsZHlCRGFDd2djekV1YzJWMEtHNHNJRnNLSUNBZ0lDQWdJQ0FnSUNBZ1lRb2dJQ0FnSUNBZ0lGMHBLU0E2SUdrZ1BqMGdjaTVzWlc1bmRHZ2dQeUFvWVNBOUlHNWxkeUJEYUN3Z2NpNXdkWE5vS0dFcEtTQTZJR0VnUFNCeVcybGRMQ0JoT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2RDZ3BJSHNLSUNBZ0lDQWdJQ0J6TVNBOUlHNWxkeUJYWldGclRXRndPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHVXNDaUFnSUNBZ0lDQWdaR2x6Y0c5elpUb2dkQW9nSUNBZ2ZUc0tmUXBtZFc1amRHbHZiaUJETUNncElIc0tJQ0FnSUd4bGRDQnpNU0E5SUh0OU93b2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE14VzJVdWFXUmRJQ0U5UFNCMmIybGtJREFwSUhKbGRIVnliaUJ6TVZ0bExtbGtYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNobExuUjVjR1VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlSR2x5WldOMGFXOXVZV3hNYVdkb2RDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dU9pQnVaWGNnUVN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJRzVsZHlCd1pRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlRjRzkwVEdsbmFIUWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQnVaWGNnUVN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhVzl1T2lCdVpYY2dRU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklHNWxkeUJ3WlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemRHRnVZMlU2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtVkRiM002SURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCbGJuVnRZbkpoUTI5ek9pQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV05oZVRvZ01Bb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlFiMmx1ZEV4cFoyaDBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM05wZEdsdmJqb2dibVYzSUVFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUJ1WlhjZ2NHVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM1JoYm1ObE9pQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV05oZVRvZ01Bb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSklaVzFwYzNCb1pYSmxUR2xuYUhRaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFFnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGNtVmpkR2x2YmpvZ2JtVjNJRUVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5yZVVOdmJHOXlPaUJ1WlhjZ2NHVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z1WkVOdmJHOXlPaUJ1WlhjZ2NHVUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlVbVZqZEVGeVpXRk1hV2RvZENJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQ0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJRzVsZHlCd1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklHNWxkeUJCTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVd4bVYybGtkR2c2SUc1bGR5QkJMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZV3htU0dWcFoyaDBPaUJ1WlhjZ1FRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE14VzJVdWFXUmRJRDBnZEN3Z2REc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJRkF3S0NrZ2V3b2dJQ0FnYkdWMElITXhJRDBnZTMwN0NpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0b1pTa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jekZiWlM1cFpGMGdJVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVJSE14VzJVdWFXUmRPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkRHNLSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0dVdWRIbHdaU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSkVhWEpsWTNScGIyNWhiRXhwWjJoMElqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RDYVdGek9pQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkT2IzSnRZV3hDYVdGek9pQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkU1lXUnBkWE02SURFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOb1lXUnZkMDFoY0ZOcGVtVTZJRzVsZHlCYUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsTndiM1JNYVdkb2RDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaRzkzUW1saGN6b2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1RtOXliV0ZzUW1saGN6b2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1VtRmthWFZ6T2lBeExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2ROWVhCVGFYcGxPaUJ1WlhjZ1dnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlFiMmx1ZEV4cFoyaDBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkQ2FXRnpPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZE9iM0p0WVd4Q2FXRnpPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZFNZV1JwZFhNNklERXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDAxaGNGTnBlbVU2SUc1bGR5QmFMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkRFlXMWxjbUZPWldGeU9pQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkRFlXMWxjbUZHWVhJNklERmxNd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhNeFcyVXVhV1JkSUQwZ2RDd2dkRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlPd3A5Q25aaGNpQk1NQ0E5SURBN0NtWjFibU4wYVc5dUlFa3dLSE14TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnS0dVdVkyRnpkRk5vWVdSdmR5QS9JRElnT2lBd0tTQXRJQ2h6TVM1allYTjBVMmhoWkc5M0lEOGdNaUE2SURBcElDc2dLR1V1YldGd0lEOGdNU0E2SURBcElDMGdLSE14TG0xaGNDQS9JREVnT2lBd0tUc0tmUXBtZFc1amRHbHZiaUJWTUNoek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQnVaWGNnUXpBc0lHNGdQU0JRTUNncExDQnBJRDBnZXdvZ0lDQWdJQ0FnSUhabGNuTnBiMjQ2SURBc0NpQWdJQ0FnSUNBZ2FHRnphRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNWhiRXhsYm1kMGFEb2dMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQnZhVzUwVEdWdVozUm9PaUF0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdjM0J2ZEV4bGJtZDBhRG9nTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJSEpsWTNSQmNtVmhUR1Z1WjNSb09pQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FHVnRhVXhsYm1kMGFEb2dMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNTFiVVJwY21WamRHbHZibUZzVTJoaFpHOTNjem9nTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJRzUxYlZCdmFXNTBVMmhoWkc5M2N6b2dMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNTFiVk53YjNSVGFHRmtiM2R6T2lBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFUzQnZkRTFoY0hNNklDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNCdWRXMU1hV2RvZEZCeWIySmxjem9nTFRFS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHRnRZbWxsYm5RNklGc0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Bb2dJQ0FnSUNBZ0lGMHNDaUFnSUNBZ0lDQWdjSEp2WW1VNklGdGRMQW9nSUNBZ0lDQWdJR1JwY21WamRHbHZibUZzT2lCYlhTd0tJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNWhiRk5vWVdSdmR6b2dXMTBzQ2lBZ0lDQWdJQ0FnWkdseVpXTjBhVzl1WVd4VGFHRmtiM2ROWVhBNklGdGRMQW9nSUNBZ0lDQWdJR1JwY21WamRHbHZibUZzVTJoaFpHOTNUV0YwY21sNE9pQmJYU3dLSUNBZ0lDQWdJQ0J6Y0c5ME9pQmJYU3dLSUNBZ0lDQWdJQ0J6Y0c5MFRHbG5hSFJOWVhBNklGdGRMQW9nSUNBZ0lDQWdJSE53YjNSVGFHRmtiM2M2SUZ0ZExBb2dJQ0FnSUNBZ0lITndiM1JUYUdGa2IzZE5ZWEE2SUZ0ZExBb2dJQ0FnSUNBZ0lITndiM1JNYVdkb2RFMWhkSEpwZURvZ1cxMHNDaUFnSUNBZ0lDQWdjbVZqZEVGeVpXRTZJRnRkTEFvZ0lDQWdJQ0FnSUhKbFkzUkJjbVZoVEZSRE1Ub2diblZzYkN3S0lDQWdJQ0FnSUNCeVpXTjBRWEpsWVV4VVF6STZJRzUxYkd3c0NpQWdJQ0FnSUNBZ2NHOXBiblE2SUZ0ZExBb2dJQ0FnSUNBZ0lIQnZhVzUwVTJoaFpHOTNPaUJiWFN3S0lDQWdJQ0FnSUNCd2IybHVkRk5vWVdSdmQwMWhjRG9nVzEwc0NpQWdJQ0FnSUNBZ2NHOXBiblJUYUdGa2IzZE5ZWFJ5YVhnNklGdGRMQW9nSUNBZ0lDQWdJR2hsYldrNklGdGRMQW9nSUNBZ0lDQWdJRzUxYlZOd2IzUk1hV2RvZEZOb1lXUnZkM05YYVhSb1RXRndjem9nTUN3S0lDQWdJQ0FnSUNCdWRXMU1hV2RvZEZCeWIySmxjem9nTUFvZ0lDQWdmVHNLSUNBZ0lHWnZjaWhzWlhRZ2FDQTlJREE3SUdnZ1BDQTVPeUJvS3lzcGFTNXdjbTlpWlM1d2RYTm9LRzVsZHlCQktUc0tJQ0FnSUd4bGRDQnlJRDBnYm1WM0lFRXNJR0VnUFNCdVpYY2dlbVVzSUc4Z1BTQnVaWGNnZW1VN0NpQWdJQ0JtZFc1amRHbHZiaUJqS0dnc0lIVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJREFzSUdZZ1BTQXdMQ0J0SUQwZ01Ec0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGa2dQU0F3T3lCWklEd2dPVHNnV1NzcktXa3VjSEp2WW1WYldWMHVjMlYwS0RBc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnTUN3Z1p5QTlJREFzSUhBZ1BTQXdMQ0IySUQwZ01Dd2dlQ0E5SURBc0lIa2dQU0F3TENCaUlEMGdNQ3dnZHlBOUlEQXNJRklnUFNBd0xDQkpJRDBnTUN3Z1RTQTlJREE3Q2lBZ0lDQWdJQ0FnYUM1emIzSjBLRWt3S1RzS0lDQWdJQ0FnSUNCc1pYUWdWQ0E5SUhVZ1BUMDlJQ0V3SUQ4Z1RXRjBhQzVRU1NBNklERTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQlpJRDBnTUN3Z0pDQTlJR2d1YkdWdVozUm9PeUJaSUR3Z0pEc2dXU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZVZ1BTQm9XMWxkTENCNklEMGdWUzVqYjJ4dmNpd2djU0E5SUZVdWFXNTBaVzV6YVhSNUxDQklJRDBnVlM1a2FYTjBZVzVqWlN3Z2JtVWdQU0JWTG5Ob1lXUnZkeUFtSmlCVkxuTm9ZV1J2ZHk1dFlYQWdQeUJWTG5Ob1lXUnZkeTV0WVhBdWRHVjRkSFZ5WlNBNklHNTFiR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hWTG1selFXMWlhV1Z1ZEV4cFoyaDBLU0JrSUNzOUlIb3VjaUFxSUhFZ0tpQlVMQ0JtSUNzOUlIb3VaeUFxSUhFZ0tpQlVMQ0J0SUNzOUlIb3VZaUFxSUhFZ0tpQlVPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoVkxtbHpUR2xuYUhSUWNtOWlaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JYSUQwZ01Ec2dWeUE4SURrN0lGY3JLeWxwTG5CeWIySmxXMWRkTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWhWTG5Ob0xtTnZaV1ptYVdOcFpXNTBjMXRYWFN3Z2NTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk5LeXM3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9WUzVwYzBScGNtVmpkR2x2Ym1Gc1RHbG5hSFFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlhJRDBnZEM1blpYUW9WU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1Z5NWpiMnh2Y2k1amIzQjVLRlV1WTI5c2IzSXBMbTExYkhScGNHeDVVMk5oYkdGeUtGVXVhVzUwWlc1emFYUjVJQ29nVkNrc0lGVXVZMkZ6ZEZOb1lXUnZkeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JMSUQwZ1ZTNXphR0ZrYjNjc0lFUWdQU0J1TG1kbGRDaFZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRUxuTm9ZV1J2ZDBKcFlYTWdQU0JMTG1KcFlYTXNJRVF1YzJoaFpHOTNUbTl5YldGc1FtbGhjeUE5SUVzdWJtOXliV0ZzUW1saGN5d2dSQzV6YUdGa2IzZFNZV1JwZFhNZ1BTQkxMbkpoWkdsMWN5d2dSQzV6YUdGa2IzZE5ZWEJUYVhwbElEMGdTeTV0WVhCVGFYcGxMQ0JwTG1ScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVzE5ZElEMGdSQ3dnYVM1a2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZDAxaGNGdGZYU0E5SUc1bExDQnBMbVJwY21WamRHbHZibUZzVTJoaFpHOTNUV0YwY21sNFcxOWRJRDBnVlM1emFHRmtiM2N1YldGMGNtbDRMQ0I1S3lzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExtUnBjbVZqZEdsdmJtRnNXMTlkSUQwZ1Z5d2dYeXNyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRlV1YVhOVGNHOTBUR2xuYUhRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JYSUQwZ2RDNW5aWFFvVlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWExuQnZjMmwwYVc5dUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWhWTG0xaGRISnBlRmR2Y214a0tTd2dWeTVqYjJ4dmNpNWpiM0I1S0hvcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0hFZ0tpQlVLU3dnVnk1a2FYTjBZVzVqWlNBOUlFZ3NJRmN1WTI5dVpVTnZjeUE5SUUxaGRHZ3VZMjl6S0ZVdVlXNW5iR1VwTENCWExuQmxiblZ0WW5KaFEyOXpJRDBnVFdGMGFDNWpiM01vVlM1aGJtZHNaU0FxSUNneElDMGdWUzV3Wlc1MWJXSnlZU2twTENCWExtUmxZMkY1SUQwZ1ZTNWtaV05oZVN3Z2FTNXpjRzkwVzNCZElEMGdWenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCTElEMGdWUzV6YUdGa2IzYzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVlM1dFlYQWdKaVlnS0drdWMzQnZkRXhwWjJoMFRXRndXMUpkSUQwZ1ZTNXRZWEFzSUZJckt5d2dTeTUxY0dSaGRHVk5ZWFJ5YVdObGN5aFZLU3dnVlM1allYTjBVMmhoWkc5M0lDWW1JRWtyS3lrc0lHa3VjM0J2ZEV4cFoyaDBUV0YwY21sNFczQmRJRDBnU3k1dFlYUnlhWGdzSUZVdVkyRnpkRk5vWVdSdmR5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkVJRDBnYmk1blpYUW9WU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JDNXphR0ZrYjNkQ2FXRnpJRDBnU3k1aWFXRnpMQ0JFTG5Ob1lXUnZkMDV2Y20xaGJFSnBZWE1nUFNCTExtNXZjbTFoYkVKcFlYTXNJRVF1YzJoaFpHOTNVbUZrYVhWeklEMGdTeTV5WVdScGRYTXNJRVF1YzJoaFpHOTNUV0Z3VTJsNlpTQTlJRXN1YldGd1UybDZaU3dnYVM1emNHOTBVMmhoWkc5M1czQmRJRDBnUkN3Z2FTNXpjRzkwVTJoaFpHOTNUV0Z3VzNCZElEMGdibVVzSUhjckt6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQXJLenNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaFZMbWx6VW1WamRFRnlaV0ZNYVdkb2RDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZjZ1BTQjBMbWRsZENoVktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGY3VZMjlzYjNJdVkyOXdlU2g2S1M1dGRXeDBhWEJzZVZOallXeGhjaWh4S1N3Z1Z5NW9ZV3htVjJsa2RHZ3VjMlYwS0ZVdWQybGtkR2dnS2lBdU5Td2dNQ3dnTUNrc0lGY3VhR0ZzWmtobGFXZG9kQzV6WlhRb01Dd2dWUzVvWldsbmFIUWdLaUF1TlN3Z01Da3NJR2t1Y21WamRFRnlaV0ZiZGwwZ1BTQlhMQ0IyS3lzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvVlM1cGMxQnZhVzUwVEdsbmFIUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWElEMGdkQzVuWlhRb1ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVnk1amIyeHZjaTVqYjNCNUtGVXVZMjlzYjNJcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0ZVdWFXNTBaVzV6YVhSNUlDb2dWQ2tzSUZjdVpHbHpkR0Z1WTJVZ1BTQlZMbVJwYzNSaGJtTmxMQ0JYTG1SbFkyRjVJRDBnVlM1a1pXTmhlU3dnVlM1allYTjBVMmhoWkc5M0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFc2dQU0JWTG5Ob1lXUnZkeXdnUkNBOUlHNHVaMlYwS0ZVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVF1YzJoaFpHOTNRbWxoY3lBOUlFc3VZbWxoY3l3Z1JDNXphR0ZrYjNkT2IzSnRZV3hDYVdGeklEMGdTeTV1YjNKdFlXeENhV0Z6TENCRUxuTm9ZV1J2ZDFKaFpHbDFjeUE5SUVzdWNtRmthWFZ6TENCRUxuTm9ZV1J2ZDAxaGNGTnBlbVVnUFNCTExtMWhjRk5wZW1Vc0lFUXVjMmhoWkc5M1EyRnRaWEpoVG1WaGNpQTlJRXN1WTJGdFpYSmhMbTVsWVhJc0lFUXVjMmhoWkc5M1EyRnRaWEpoUm1GeUlEMGdTeTVqWVcxbGNtRXVabUZ5TENCcExuQnZhVzUwVTJoaFpHOTNXMmRkSUQwZ1JDd2dhUzV3YjJsdWRGTm9ZV1J2ZDAxaGNGdG5YU0E5SUc1bExDQnBMbkJ2YVc1MFUyaGhaRzkzVFdGMGNtbDRXMmRkSUQwZ1ZTNXphR0ZrYjNjdWJXRjBjbWw0TENCaUt5czdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBMbkJ2YVc1MFcyZGRJRDBnVnl3Z1p5c3JPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGVXVhWE5JWlcxcGMzQm9aWEpsVEdsbmFIUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWElEMGdkQzVuWlhRb1ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlhMbk5yZVVOdmJHOXlMbU52Y0hrb1ZTNWpiMnh2Y2lrdWJYVnNkR2x3YkhsVFkyRnNZWElvY1NBcUlGUXBMQ0JYTG1keWIzVnVaRU52Ykc5eUxtTnZjSGtvVlM1bmNtOTFibVJEYjJ4dmNpa3ViWFZzZEdsd2JIbFRZMkZzWVhJb2NTQXFJRlFwTENCcExtaGxiV2xiZUYwZ1BTQlhMQ0I0S3lzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZGlBK0lEQWdKaVlnS0dVdWFYTlhaV0pIVERJZ2ZId2djekV1YUdGektDSlBSVk5mZEdWNGRIVnlaVjltYkc5aGRGOXNhVzVsWVhJaUtTQTlQVDBnSVRBZ1B5QW9hUzV5WldOMFFYSmxZVXhVUXpFZ1BTQnNaUzVNVkVOZlJreFBRVlJmTVN3Z2FTNXlaV04wUVhKbFlVeFVReklnUFNCc1pTNU1WRU5mUmt4UFFWUmZNaWtnT2lCek1TNW9ZWE1vSWs5RlUxOTBaWGgwZFhKbFgyaGhiR1pmWm14dllYUmZiR2x1WldGeUlpa2dQVDA5SUNFd0lEOGdLR2t1Y21WamRFRnlaV0ZNVkVNeElEMGdiR1V1VEZSRFgwaEJURVpmTVN3Z2FTNXlaV04wUVhKbFlVeFVReklnUFNCc1pTNU1WRU5mU0VGTVJsOHlLU0E2SUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZWdVlXSnNaU0IwYnlCMWMyVWdVbVZqZEVGeVpXRk1hV2RvZEM0Z1RXbHpjMmx1WnlCWFpXSkhUQ0JsZUhSbGJuTnBiMjV6TGlJcEtTd2dhUzVoYldKcFpXNTBXekJkSUQwZ1pDd2dhUzVoYldKcFpXNTBXekZkSUQwZ1ppd2dhUzVoYldKcFpXNTBXekpkSUQwZ2JUc0tJQ0FnSUNBZ0lDQnNaWFFnVHlBOUlHa3VhR0Z6YURzS0lDQWdJQ0FnSUNBb1R5NWthWEpsWTNScGIyNWhiRXhsYm1kMGFDQWhQVDBnWHlCOGZDQlBMbkJ2YVc1MFRHVnVaM1JvSUNFOVBTQm5JSHg4SUU4dWMzQnZkRXhsYm1kMGFDQWhQVDBnY0NCOGZDQlBMbkpsWTNSQmNtVmhUR1Z1WjNSb0lDRTlQU0IySUh4OElFOHVhR1Z0YVV4bGJtZDBhQ0FoUFQwZ2VDQjhmQ0JQTG01MWJVUnBjbVZqZEdsdmJtRnNVMmhoWkc5M2N5QWhQVDBnZVNCOGZDQlBMbTUxYlZCdmFXNTBVMmhoWkc5M2N5QWhQVDBnWWlCOGZDQlBMbTUxYlZOd2IzUlRhR0ZrYjNkeklDRTlQU0IzSUh4OElFOHViblZ0VTNCdmRFMWhjSE1nSVQwOUlGSWdmSHdnVHk1dWRXMU1hV2RvZEZCeWIySmxjeUFoUFQwZ1RTa2dKaVlnS0drdVpHbHlaV04wYVc5dVlXd3ViR1Z1WjNSb0lEMGdYeXdnYVM1emNHOTBMbXhsYm1kMGFDQTlJSEFzSUdrdWNtVmpkRUZ5WldFdWJHVnVaM1JvSUQwZ2Rpd2dhUzV3YjJsdWRDNXNaVzVuZEdnZ1BTQm5MQ0JwTG1obGJXa3ViR1Z1WjNSb0lEMGdlQ3dnYVM1a2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZHk1c1pXNW5kR2dnUFNCNUxDQnBMbVJwY21WamRHbHZibUZzVTJoaFpHOTNUV0Z3TG14bGJtZDBhQ0E5SUhrc0lHa3VjRzlwYm5SVGFHRmtiM2N1YkdWdVozUm9JRDBnWWl3Z2FTNXdiMmx1ZEZOb1lXUnZkMDFoY0M1c1pXNW5kR2dnUFNCaUxDQnBMbk53YjNSVGFHRmtiM2N1YkdWdVozUm9JRDBnZHl3Z2FTNXpjRzkwVTJoaFpHOTNUV0Z3TG14bGJtZDBhQ0E5SUhjc0lHa3VaR2x5WldOMGFXOXVZV3hUYUdGa2IzZE5ZWFJ5YVhndWJHVnVaM1JvSUQwZ2VTd2dhUzV3YjJsdWRGTm9ZV1J2ZDAxaGRISnBlQzVzWlc1bmRHZ2dQU0JpTENCcExuTndiM1JNYVdkb2RFMWhkSEpwZUM1c1pXNW5kR2dnUFNCM0lDc2dVaUF0SUVrc0lHa3VjM0J2ZEV4cFoyaDBUV0Z3TG14bGJtZDBhQ0E5SUZJc0lHa3ViblZ0VTNCdmRFeHBaMmgwVTJoaFpHOTNjMWRwZEdoTllYQnpJRDBnU1N3Z2FTNXVkVzFNYVdkb2RGQnliMkpsY3lBOUlFMHNJRTh1WkdseVpXTjBhVzl1WVd4TVpXNW5kR2dnUFNCZkxDQlBMbkJ2YVc1MFRHVnVaM1JvSUQwZ1p5d2dUeTV6Y0c5MFRHVnVaM1JvSUQwZ2NDd2dUeTV5WldOMFFYSmxZVXhsYm1kMGFDQTlJSFlzSUU4dWFHVnRhVXhsYm1kMGFDQTlJSGdzSUU4dWJuVnRSR2x5WldOMGFXOXVZV3hUYUdGa2IzZHpJRDBnZVN3Z1R5NXVkVzFRYjJsdWRGTm9ZV1J2ZDNNZ1BTQmlMQ0JQTG01MWJWTndiM1JUYUdGa2IzZHpJRDBnZHl3Z1R5NXVkVzFUY0c5MFRXRndjeUE5SUZJc0lFOHViblZ0VEdsbmFIUlFjbTlpWlhNZ1BTQk5MQ0JwTG5abGNuTnBiMjRnUFNCTU1Dc3JLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUd3b2FDd2dkU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnTUN3Z1ppQTlJREFzSUcwZ1BTQXdMQ0JmSUQwZ01Dd2daeUE5SURBc0lIQWdQU0IxTG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhZZ1BTQXdMQ0I0SUQwZ2FDNXNaVzVuZEdnN0lIWWdQQ0I0T3lCMkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlU0E5SUdoYmRsMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDVMbWx6UkdseVpXTjBhVzl1WVd4TWFXZG9kQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSWdQU0JwTG1ScGNtVmpkR2x2Ym1Gc1cyUmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZaTVrYVhKbFkzUnBiMjR1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIa3ViV0YwY21sNFYyOXliR1FwTENCeUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWg1TG5SaGNtZGxkQzV0WVhSeWFYaFhiM0pzWkNrc0lHSXVaR2x5WldOMGFXOXVMbk4xWWloeUtTd2dZaTVrYVhKbFkzUnBiMjR1ZEhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0hBcExDQmtLeXM3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9lUzVwYzFOd2IzUk1hV2RvZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0lnUFNCcExuTndiM1JiYlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaUxuQnZjMmwwYVc5dUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWg1TG0xaGRISnBlRmR2Y214a0tTd2dZaTV3YjNOcGRHbHZiaTVoY0hCc2VVMWhkSEpwZURRb2NDa3NJR0l1WkdseVpXTjBhVzl1TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaDVMbTFoZEhKcGVGZHZjbXhrS1N3Z2NpNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZVM1MFlYSm5aWFF1YldGMGNtbDRWMjl5YkdRcExDQmlMbVJwY21WamRHbHZiaTV6ZFdJb2Npa3NJR0l1WkdseVpXTjBhVzl1TG5SeVlXNXpabTl5YlVScGNtVmpkR2x2Ymlod0tTd2diU3NyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSGt1YVhOU1pXTjBRWEpsWVV4cFoyaDBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lpQTlJR2t1Y21WamRFRnlaV0ZiWDEwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaUxuQnZjMmwwYVc5dUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWg1TG0xaGRISnBlRmR2Y214a0tTd2dZaTV3YjNOcGRHbHZiaTVoY0hCc2VVMWhkSEpwZURRb2NDa3NJRzh1YVdSbGJuUnBkSGtvS1N3Z1lTNWpiM0I1S0hrdWJXRjBjbWw0VjI5eWJHUXBMQ0JoTG5CeVpXMTFiSFJwY0d4NUtIQXBMQ0J2TG1WNGRISmhZM1JTYjNSaGRHbHZiaWhoS1N3Z1lpNW9ZV3htVjJsa2RHZ3VjMlYwS0hrdWQybGtkR2dnS2lBdU5Td2dNQ3dnTUNrc0lHSXVhR0ZzWmtobGFXZG9kQzV6WlhRb01Dd2dlUzVvWldsbmFIUWdLaUF1TlN3Z01Da3NJR0l1YUdGc1psZHBaSFJvTG1Gd2NHeDVUV0YwY21sNE5DaHZLU3dnWWk1b1lXeG1TR1ZwWjJoMExtRndjR3g1VFdGMGNtbDROQ2h2S1N3Z1h5c3JPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIa3VhWE5RYjJsdWRFeHBaMmgwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUdrdWNHOXBiblJiWmwwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaUxuQnZjMmwwYVc5dUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWg1TG0xaGRISnBlRmR2Y214a0tTd2dZaTV3YjNOcGRHbHZiaTVoY0hCc2VVMWhkSEpwZURRb2NDa3NJR1lyS3pzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2g1TG1selNHVnRhWE53YUdWeVpVeHBaMmgwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUdrdWFHVnRhVnRuWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdJdVpHbHlaV04wYVc5dUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWg1TG0xaGRISnBlRmR2Y214a0tTd2dZaTVrYVhKbFkzUnBiMjR1ZEhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0hBcExDQm5LeXM3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJSE5sZEhWd09pQmpMQW9nSUNBZ0lDQWdJSE5sZEhWd1ZtbGxkem9nYkN3S0lDQWdJQ0FnSUNCemRHRjBaVG9nYVFvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCUWFDaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0J1WlhjZ1ZUQW9jekVzSUdVcExDQnVJRDBnVzEwc0lHa2dQU0JiWFRzS0lDQWdJR1oxYm1OMGFXOXVJSElvS1NCN0NpQWdJQ0FnSUNBZ2JpNXNaVzVuZEdnZ1BTQXdMQ0JwTG14bGJtZDBhQ0E5SURBN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmhLSFVwSUhzS0lDQWdJQ0FnSUNCdUxuQjFjMmdvZFNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnZLSFVwSUhzS0lDQWdJQ0FnSUNCcExuQjFjMmdvZFNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmpLSFVwSUhzS0lDQWdJQ0FnSUNCMExuTmxkSFZ3S0c0c0lIVXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYkNoMUtTQjdDaUFnSUNBZ0lDQWdkQzV6WlhSMWNGWnBaWGNvYml3Z2RTazdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJR2x1YVhRNklISXNDaUFnSUNBZ0lDQWdjM1JoZEdVNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdsbmFIUnpRWEp5WVhrNklHNHNDaUFnSUNBZ0lDQWdJQ0FnSUhOb1lXUnZkM05CY25KaGVUb2dhU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHbG5hSFJ6T2lCMENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnpaWFIxY0V4cFoyaDBjem9nWXl3S0lDQWdJQ0FnSUNCelpYUjFjRXhwWjJoMGMxWnBaWGM2SUd3c0NpQWdJQ0FnSUNBZ2NIVnphRXhwWjJoME9pQmhMQW9nSUNBZ0lDQWdJSEIxYzJoVGFHRmtiM2M2SUc4S0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z1JEQW9jekVzSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnYm1WM0lGZGxZV3ROWVhBN0NpQWdJQ0JtZFc1amRHbHZiaUJ1S0hJc0lHRWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCMExtZGxkQ2h5S1N3Z1l6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2J5QTlQVDBnZG05cFpDQXdJRDhnS0dNZ1BTQnVaWGNnVUdnb2N6RXNJR1VwTENCMExuTmxkQ2h5TENCYkNpQWdJQ0FnSUNBZ0lDQWdJR01LSUNBZ0lDQWdJQ0JkS1NrZ09pQmhJRDQ5SUc4dWJHVnVaM1JvSUQ4Z0tHTWdQU0J1WlhjZ1VHZ29jekVzSUdVcExDQnZMbkIxYzJnb1l5a3BJRG9nWXlBOUlHOWJZVjBzSUdNN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnBLQ2tnZXdvZ0lDQWdJQ0FnSUhRZ1BTQnVaWGNnVjJWaGEwMWhjRHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQnVMQW9nSUNBZ0lDQWdJR1JwYzNCdmMyVTZJR2tLSUNBZ0lIMDdDbjBLZG1GeUlGRnlJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VFdWemFFUmxjSFJvVFdGMFpYSnBZV3dnUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWsxbGMyaEVaWEIwYUUxaGRHVnlhV0ZzSWl3Z2RHaHBjeTVrWlhCMGFGQmhZMnRwYm1jZ1BTQkRaaXdnZEdocGN5NXRZWEFnUFNCdWRXeHNMQ0IwYUdsekxtRnNjR2hoVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRGTmpZV3hsSUQwZ01Td2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6SUQwZ01Dd2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQWhNU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0F4TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtUmxjSFJvVUdGamEybHVaeUE5SUdVdVpHVndkR2hRWVdOcmFXNW5MQ0IwYUdsekxtMWhjQ0E5SUdVdWJXRndMQ0IwYUdsekxtRnNjR2hoVFdGd0lEMGdaUzVoYkhCb1lVMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5d2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQmxMbmRwY21WbWNtRnRaU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0JsTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUN3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnYW5JZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdKMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTk5aWE5vUkdsemRHRnVZMlZOWVhSbGNtbGhiQ0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVFdWemFFUnBjM1JoYm1ObFRXRjBaWEpwWVd3aUxDQjBhR2x6TG0xaGNDQTlJRzUxYkd3c0lIUm9hWE11WVd4d2FHRk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVWdQU0F4TENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTWdQU0F3TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtMWhjQ0E5SUdVdWJXRndMQ0IwYUdsekxtRnNjR2hoVFdGd0lEMGdaUzVoYkhCb1lVMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5d2dkR2hwY3pzS0lDQWdJSDBLZlN3Z1RqQWdQU0JnZG05cFpDQnRZV2x1S0NrZ2V3b0paMnhmVUc5emFYUnBiMjRnUFNCMlpXTTBLQ0J3YjNOcGRHbHZiaXdnTVM0d0lDazdDbjFnTENCUE1DQTlJR0IxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0J6YUdGa2IzZGZjR0Z6Y3pzS2RXNXBabTl5YlNCMlpXTXlJSEpsYzI5c2RYUnBiMjQ3Q25WdWFXWnZjbTBnWm14dllYUWdjbUZrYVhWek93b2phVzVqYkhWa1pTQThjR0ZqYTJsdVp6NEtkbTlwWkNCdFlXbHVLQ2tnZXdvSlkyOXVjM1FnWm14dllYUWdjMkZ0Y0d4bGN5QTlJR1pzYjJGMEtDQldVMDFmVTBGTlVFeEZVeUFwT3dvSlpteHZZWFFnYldWaGJpQTlJREF1TURzS0NXWnNiMkYwSUhOeGRXRnlaV1JmYldWaGJpQTlJREF1TURzS0NXWnNiMkYwSUhWMlUzUnlhV1JsSUQwZ2MyRnRjR3hsY3lBOFBTQXhMakFnUHlBd0xqQWdPaUF5TGpBZ0x5QW9JSE5oYlhCc1pYTWdMU0F4TGpBZ0tUc0tDV1pzYjJGMElIVjJVM1JoY25RZ1BTQnpZVzF3YkdWeklEdzlJREV1TUNBL0lEQXVNQ0E2SUMwZ01TNHdPd29KWm05eUlDZ2dabXh2WVhRZ2FTQTlJREF1TURzZ2FTQThJSE5oYlhCc1pYTTdJR2tnS3lzZ0tTQjdDZ2tKWm14dllYUWdkWFpQWm1aelpYUWdQU0IxZGxOMFlYSjBJQ3NnYVNBcUlIVjJVM1J5YVdSbE93b0pDU05wWm1SbFppQklUMUpKV2s5T1ZFRk1YMUJCVTFNS0NRa0pkbVZqTWlCa2FYTjBjbWxpZFhScGIyNGdQU0IxYm5CaFkydFNSMEpCVkc4eVNHRnNaaWdnZEdWNGRIVnlaVEpFS0NCemFHRmtiM2RmY0dGemN5d2dLQ0JuYkY5R2NtRm5RMjl2Y21RdWVIa2dLeUIyWldNeUtDQjFkazltWm5ObGRDd2dNQzR3SUNrZ0tpQnlZV1JwZFhNZ0tTQXZJSEpsYzI5c2RYUnBiMjRnS1NBcE93b0pDUWx0WldGdUlDczlJR1JwYzNSeWFXSjFkR2x2Ymk1NE93b0pDUWx6Y1hWaGNtVmtYMjFsWVc0Z0t6MGdaR2x6ZEhKcFluVjBhVzl1TG5rZ0tpQmthWE4wY21saWRYUnBiMjR1ZVNBcklHUnBjM1J5YVdKMWRHbHZiaTU0SUNvZ1pHbHpkSEpwWW5WMGFXOXVMbmc3Q2drSkkyVnNjMlVLQ1FrSlpteHZZWFFnWkdWd2RHZ2dQU0IxYm5CaFkydFNSMEpCVkc5RVpYQjBhQ2dnZEdWNGRIVnlaVEpFS0NCemFHRmtiM2RmY0dGemN5d2dLQ0JuYkY5R2NtRm5RMjl2Y21RdWVIa2dLeUIyWldNeUtDQXdMakFzSUhWMlQyWm1jMlYwSUNrZ0tpQnlZV1JwZFhNZ0tTQXZJSEpsYzI5c2RYUnBiMjRnS1NBcE93b0pDUWx0WldGdUlDczlJR1JsY0hSb093b0pDUWx6Y1hWaGNtVmtYMjFsWVc0Z0t6MGdaR1Z3ZEdnZ0tpQmtaWEIwYURzS0NRa2paVzVrYVdZS0NYMEtDVzFsWVc0Z1BTQnRaV0Z1SUM4Z2MyRnRjR3hsY3pzS0NYTnhkV0Z5WldSZmJXVmhiaUE5SUhOeGRXRnlaV1JmYldWaGJpQXZJSE5oYlhCc1pYTTdDZ2xtYkc5aGRDQnpkR1JmWkdWMklEMGdjM0Z5ZENnZ2MzRjFZWEpsWkY5dFpXRnVJQzBnYldWaGJpQXFJRzFsWVc0Z0tUc0tDV2RzWDBaeVlXZERiMnh2Y2lBOUlIQmhZMnN5U0dGc1psUnZVa2RDUVNnZ2RtVmpNaWdnYldWaGJpd2djM1JrWDJSbGRpQXBJQ2s3Q24xZ093cG1kVzVqZEdsdmJpQkdNQ2h6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdiR1YwSUc0Z1BTQnVaWGNnVUhNc0lHa2dQU0J1WlhjZ1dpd2djaUE5SUc1bGR5QmFMQ0JoSUQwZ2JtVjNJR3BsTENCdklEMGdibVYzSUZGeUtIc0tJQ0FnSUNBZ0lDQmtaWEIwYUZCaFkydHBibWM2SUZCbUNpQWdJQ0I5S1N3Z1l5QTlJRzVsZHlCcWNpd2diQ0E5SUh0OUxDQm9JRDBnZEM1dFlYaFVaWGgwZFhKbFUybDZaU3dnZFNBOUlIc0tJQ0FnSUNBZ0lDQmJRbTVkT2lCR2RDd0tJQ0FnSUNBZ0lDQmJSblJkT2lCQ2Jpd0tJQ0FnSUNBZ0lDQmJaMjVkT2lCbmJnb2dJQ0FnZlN3Z1pDQTlJRzVsZHlCcWRDaDdDaUFnSUNBZ0lDQWdaR1ZtYVc1bGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNCV1UwMWZVMEZOVUV4RlV6b2dPQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnZFc1cFptOXliWE02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1gzQmhjM002SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZFhScGIyNDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnV2dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUEwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ1RqQXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklFOHdDaUFnSUNCOUtTd2daaUE5SUdRdVkyeHZibVVvS1RzS0lDQWdJR1l1WkdWbWFXNWxjeTVJVDFKSldrOU9WRUZNWDFCQlUxTWdQU0F4T3dvZ0lDQWdiR1YwSUcwZ1BTQnVaWGNnUjJVN0NpQWdJQ0J0TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ1pYUW9ibVYzSUVac2IyRjBNekpCY25KaGVTaGJDaUFnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0xqVXNDaUFnSUNBZ0lDQWdNeXdLSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBdU5Td0tJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUM0MUNpQWdJQ0JkS1N3Z015a3BPd29nSUNBZ2JHVjBJRjhnUFNCdVpYY2dUWFFvYlN3Z1pDa3NJR2NnUFNCMGFHbHpPd29nSUNBZ2RHaHBjeTVsYm1GaWJHVmtJRDBnSVRFc0lIUm9hWE11WVhWMGIxVndaR0YwWlNBOUlDRXdMQ0IwYUdsekxtNWxaV1J6VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11ZEhsd1pTQTlJR05rT3dvZ0lDQWdiR1YwSUhBZ1BTQjBhR2x6TG5SNWNHVTdDaUFnSUNCMGFHbHpMbkpsYm1SbGNpQTlJR1oxYm1OMGFXOXVLR0lzSUhjc0lGSXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1p5NWxibUZpYkdWa0lEMDlQU0FoTVNCOGZDQm5MbUYxZEc5VmNHUmhkR1VnUFQwOUlDRXhJQ1ltSUdjdWJtVmxaSE5WY0dSaGRHVWdQVDA5SUNFeElIeDhJR0l1YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2JHVjBJRWtnUFNCek1TNW5aWFJTWlc1a1pYSlVZWEpuWlhRb0tTd2dUU0E5SUhNeExtZGxkRUZqZEdsMlpVTjFZbVZHWVdObEtDa3NJRlFnUFNCek1TNW5aWFJCWTNScGRtVk5hWEJ0WVhCTVpYWmxiQ2dwTENCUElEMGdjekV1YzNSaGRHVTdDaUFnSUNBZ0lDQWdUeTV6WlhSQ2JHVnVaR2x1WnloRWJpa3NJRTh1WW5WbVptVnljeTVqYjJ4dmNpNXpaWFJEYkdWaGNpZ3hMQ0F4TENBeExDQXhLU3dnVHk1aWRXWm1aWEp6TG1SbGNIUm9Mbk5sZEZSbGMzUW9JVEFwTENCUExuTmxkRk5qYVhOemIzSlVaWE4wS0NFeEtUc0tJQ0FnSUNBZ0lDQnNaWFFnV1NBOUlIQWdJVDA5SUhCdUlDWW1JSFJvYVhNdWRIbHdaU0E5UFQwZ2NHNHNJQ1FnUFNCd0lEMDlQU0J3YmlBbUppQjBhR2x6TG5SNWNHVWdJVDA5SUhCdU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ZTQTlJREFzSUhvZ1BTQmlMbXhsYm1kMGFEc2dWU0E4SUhvN0lGVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J4SUQwZ1lsdFZYU3dnU0NBOUlIRXVjMmhoWkc5M093b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1NDQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VMmhoWkc5M1RXRndPaUlzSUhFc0lDSm9ZWE1nYm04Z2MyaGhaRzkzTGlJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRWd1WVhWMGIxVndaR0YwWlNBOVBUMGdJVEVnSmlZZ1NDNXVaV1ZrYzFWd1pHRjBaU0E5UFQwZ0lURXBJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJQ0FnSUNCcExtTnZjSGtvU0M1dFlYQlRhWHBsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc1bElEMGdTQzVuWlhSR2NtRnRaVVY0ZEdWdWRITW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2t1YlhWc2RHbHdiSGtvYm1VcExDQnlMbU52Y0hrb1NDNXRZWEJUYVhwbEtTd2dLR2t1ZUNBK0lHZ2dmSHdnYVM1NUlENGdhQ2tnSmlZZ0tHa3VlQ0ErSUdnZ0ppWWdLSEl1ZUNBOUlFMWhkR2d1Wm14dmIzSW9hQ0F2SUc1bExuZ3BMQ0JwTG5nZ1BTQnlMbmdnS2lCdVpTNTRMQ0JJTG0xaGNGTnBlbVV1ZUNBOUlISXVlQ2tzSUdrdWVTQStJR2dnSmlZZ0tISXVlU0E5SUUxaGRHZ3VabXh2YjNJb2FDQXZJRzVsTG5rcExDQnBMbmtnUFNCeUxua2dLaUJ1WlM1NUxDQklMbTFoY0ZOcGVtVXVlU0E5SUhJdWVTa3BMQ0JJTG0xaGNDQTlQVDBnYm5Wc2JDQjhmQ0JaSUQwOVBTQWhNQ0I4ZkNBa0lEMDlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRXNnUFNCMGFHbHpMblI1Y0dVZ0lUMDlJSEJ1SUQ4Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYmtacGJIUmxjam9nY0hRc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0ZuUm1sc2RHVnlPaUJ3ZEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNBNklIdDlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTQzV0WVhBZ0lUMDlJRzUxYkd3Z0ppWWdTQzV0WVhBdVpHbHpjRzl6WlNncExDQklMbTFoY0NBOUlHNWxkeUJ4ZENocExuZ3NJR2t1ZVN3Z1N5a3NJRWd1YldGd0xuUmxlSFIxY21VdWJtRnRaU0E5SUhFdWJtRnRaU0FySUNJdWMyaGhaRzkzVFdGd0lpd2dTQzVqWVcxbGNtRXVkWEJrWVhSbFVISnZhbVZqZEdsdmJrMWhkSEpwZUNncE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lITXhMbk5sZEZKbGJtUmxjbFJoY21kbGRDaElMbTFoY0Nrc0lITXhMbU5zWldGeUtDazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQlhJRDBnU0M1blpYUldhV1YzY0c5eWRFTnZkVzUwS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdTeUE5SURBN0lFc2dQQ0JYT3lCTEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVRZ1BTQklMbWRsZEZacFpYZHdiM0owS0VzcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTNXpaWFFvY2k1NElDb2dSQzU0TENCeUxua2dLaUJFTG5rc0lISXVlQ0FxSUVRdWVpd2djaTU1SUNvZ1JDNTNLU3dnVHk1MmFXVjNjRzl5ZENoaEtTd2dTQzUxY0dSaGRHVk5ZWFJ5YVdObGN5aHhMQ0JMS1N3Z2JpQTlJRWd1WjJWMFJuSjFjM1IxYlNncExDQjVLSGNzSUZJc0lFZ3VZMkZ0WlhKaExDQnhMQ0IwYUdsekxuUjVjR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUVndWFYTlFiMmx1ZEV4cFoyaDBVMmhoWkc5M0lDRTlQU0FoTUNBbUppQjBhR2x6TG5SNWNHVWdQVDA5SUhCdUlDWW1JSFlvU0N3Z1Vpa3NJRWd1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY0NBOUlIUm9hWE11ZEhsd1pTd2daeTV1WldWa2MxVndaR0YwWlNBOUlDRXhMQ0J6TVM1elpYUlNaVzVrWlhKVVlYSm5aWFFvU1N3Z1RTd2dWQ2s3Q2lBZ0lDQjlPd29nSUNBZ1puVnVZM1JwYjI0Z2RpaGlMQ0IzS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRklnUFNCbExuVndaR0YwWlNoZktUc0tJQ0FnSUNBZ0lDQmtMbVJsWm1sdVpYTXVWbE5OWDFOQlRWQk1SVk1nSVQwOUlHSXVZbXgxY2xOaGJYQnNaWE1nSmlZZ0tHUXVaR1ZtYVc1bGN5NVdVMDFmVTBGTlVFeEZVeUE5SUdJdVlteDFjbE5oYlhCc1pYTXNJR1l1WkdWbWFXNWxjeTVXVTAxZlUwRk5VRXhGVXlBOUlHSXVZbXgxY2xOaGJYQnNaWE1zSUdRdWJtVmxaSE5WY0dSaGRHVWdQU0FoTUN3Z1ppNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0tTd2dZaTV0WVhCUVlYTnpJRDA5UFNCdWRXeHNJQ1ltSUNoaUxtMWhjRkJoYzNNZ1BTQnVaWGNnY1hRb2FTNTRMQ0JwTG5rcEtTd2daQzUxYm1sbWIzSnRjeTV6YUdGa2IzZGZjR0Z6Y3k1MllXeDFaU0E5SUdJdWJXRndMblJsZUhSMWNtVXNJR1F1ZFc1cFptOXliWE11Y21WemIyeDFkR2x2Ymk1MllXeDFaU0E5SUdJdWJXRndVMmw2WlN3Z1pDNTFibWxtYjNKdGN5NXlZV1JwZFhNdWRtRnNkV1VnUFNCaUxuSmhaR2wxY3l3Z2N6RXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtHSXViV0Z3VUdGemN5a3NJSE14TG1Oc1pXRnlLQ2tzSUhNeExuSmxibVJsY2tKMVptWmxja1JwY21WamRDaDNMQ0J1ZFd4c0xDQlNMQ0JrTENCZkxDQnVkV3hzS1N3Z1ppNTFibWxtYjNKdGN5NXphR0ZrYjNkZmNHRnpjeTUyWVd4MVpTQTlJR0l1YldGd1VHRnpjeTUwWlhoMGRYSmxMQ0JtTG5WdWFXWnZjbTF6TG5KbGMyOXNkWFJwYjI0dWRtRnNkV1VnUFNCaUxtMWhjRk5wZW1Vc0lHWXVkVzVwWm05eWJYTXVjbUZrYVhWekxuWmhiSFZsSUQwZ1lpNXlZV1JwZFhNc0lITXhMbk5sZEZKbGJtUmxjbFJoY21kbGRDaGlMbTFoY0Nrc0lITXhMbU5zWldGeUtDa3NJSE14TG5KbGJtUmxja0oxWm1abGNrUnBjbVZqZENoM0xDQnVkV3hzTENCU0xDQm1MQ0JmTENCdWRXeHNLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhnb1lpd2dkeXdnVWl3Z1NTa2dld29nSUNBZ0lDQWdJR3hsZENCTklEMGdiblZzYkN3Z1ZDQTlJRkl1YVhOUWIybHVkRXhwWjJoMElEMDlQU0FoTUNBL0lHSXVZM1Z6ZEc5dFJHbHpkR0Z1WTJWTllYUmxjbWxoYkNBNklHSXVZM1Z6ZEc5dFJHVndkR2hOWVhSbGNtbGhiRHNLSUNBZ0lDQWdJQ0JwWmlBb1ZDQWhQVDBnZG05cFpDQXdLU0JOSUQwZ1ZEc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaE5JRDBnVWk1cGMxQnZhVzUwVEdsbmFIUWdQVDA5SUNFd0lEOGdZeUE2SUc4c0lITXhMbXh2WTJGc1EyeHBjSEJwYm1kRmJtRmliR1ZrSUNZbUlIY3VZMnhwY0ZOb1lXUnZkM01nUFQwOUlDRXdJQ1ltSUVGeWNtRjVMbWx6UVhKeVlYa29keTVqYkdsd2NHbHVaMUJzWVc1bGN5a2dKaVlnZHk1amJHbHdjR2x1WjFCc1lXNWxjeTVzWlc1bmRHZ2dJVDA5SURBZ2ZId2dkeTVrYVhOd2JHRmpaVzFsYm5STllYQWdKaVlnZHk1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBaFBUMGdNQ0I4ZkNCM0xtRnNjR2hoVFdGd0lDWW1JSGN1WVd4d2FHRlVaWE4wSUQ0Z01DQjhmQ0IzTG0xaGNDQW1KaUIzTG1Gc2NHaGhWR1Z6ZENBK0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRThnUFNCTkxuVjFhV1FzSUZrZ1BTQjNMblYxYVdRc0lDUWdQU0JzVzA5ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FrSUQwOVBTQjJiMmxrSURBZ0ppWWdLQ1FnUFNCN2ZTd2diRnRQWFNBOUlDUXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdWU0E5SUNSYldWMDdDaUFnSUNBZ0lDQWdJQ0FnSUZVZ1BUMDlJSFp2YVdRZ01DQW1KaUFvVlNBOUlFMHVZMnh2Ym1Vb0tTd2dKRnRaWFNBOUlGVXBMQ0JOSUQwZ1ZUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0UwdWRtbHphV0pzWlNBOUlIY3VkbWx6YVdKc1pTd2dUUzUzYVhKbFpuSmhiV1VnUFNCM0xuZHBjbVZtY21GdFpTd2dTU0E5UFQwZ2NHNGdQeUJOTG5OcFpHVWdQU0IzTG5Ob1lXUnZkMU5wWkdVZ0lUMDlJRzUxYkd3Z1B5QjNMbk5vWVdSdmQxTnBaR1VnT2lCM0xuTnBaR1VnT2lCTkxuTnBaR1VnUFNCM0xuTm9ZV1J2ZDFOcFpHVWdJVDA5SUc1MWJHd2dQeUIzTG5Ob1lXUnZkMU5wWkdVZ09pQjFXM2N1YzJsa1pWMHNJRTB1WVd4d2FHRk5ZWEFnUFNCM0xtRnNjR2hoVFdGd0xDQk5MbUZzY0doaFZHVnpkQ0E5SUhjdVlXeHdhR0ZVWlhOMExDQk5MbTFoY0NBOUlIY3ViV0Z3TENCTkxtTnNhWEJUYUdGa2IzZHpJRDBnZHk1amJHbHdVMmhoWkc5M2N5d2dUUzVqYkdsd2NHbHVaMUJzWVc1bGN5QTlJSGN1WTJ4cGNIQnBibWRRYkdGdVpYTXNJRTB1WTJ4cGNFbHVkR1Z5YzJWamRHbHZiaUE5SUhjdVkyeHBjRWx1ZEdWeWMyVmpkR2x2Yml3Z1RTNWthWE53YkdGalpXMWxiblJOWVhBZ1BTQjNMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2dUUzVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SUhjdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVc0lFMHVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJSGN1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeXdnVFM1M2FYSmxabkpoYldWTWFXNWxkMmxrZEdnZ1BTQjNMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ3dnVFM1c2FXNWxkMmxrZEdnZ1BTQjNMbXhwYm1WM2FXUjBhQ3dnVWk1cGMxQnZhVzUwVEdsbmFIUWdQVDA5SUNFd0lDWW1JRTB1YVhOTlpYTm9SR2x6ZEdGdVkyVk5ZWFJsY21saGJDQTlQVDBnSVRBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFOGdQU0J6TVM1d2NtOXdaWEowYVdWekxtZGxkQ2hOS1RzS0lDQWdJQ0FnSUNBZ0lDQWdUeTVzYVdkb2RDQTlJRkk3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2VTaGlMQ0IzTENCU0xDQkpMQ0JOS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLR0l1ZG1semFXSnNaU0E5UFQwZ0lURXBJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQnBaaUFvWWk1c1lYbGxjbk11ZEdWemRDaDNMbXhoZVdWeWN5a2dKaVlnS0dJdWFYTk5aWE5vSUh4OElHSXVhWE5NYVc1bElIeDhJR0l1YVhOUWIybHVkSE1wSUNZbUlDaGlMbU5oYzNSVGFHRmtiM2NnZkh3Z1lpNXlaV05sYVhabFUyaGhaRzkzSUNZbUlFMGdQVDA5SUhCdUtTQW1KaUFvSVdJdVpuSjFjM1IxYlVOMWJHeGxaQ0I4ZkNCdUxtbHVkR1Z5YzJWamRITlBZbXBsWTNRb1lpa3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHSXViVzlrWld4V2FXVjNUV0YwY21sNExtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb1VpNXRZWFJ5YVhoWGIzSnNaRWx1ZG1WeWMyVXNJR0l1YldGMGNtbDRWMjl5YkdRcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dTQTlJR1V1ZFhCa1lYUmxLR0lwTENBa0lEMGdZaTV0WVhSbGNtbGhiRHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb0pDa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCVklEMGdXUzVuY205MWNITTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIb2dQU0F3TENCeElEMGdWUzVzWlc1bmRHZzdJSG9nUENCeE95QjZLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JJSUQwZ1ZWdDZYU3dnYm1VZ1BTQWtXMGd1YldGMFpYSnBZV3hKYm1SbGVGMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWxJQ1ltSUc1bExuWnBjMmxpYkdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRmNnUFNCNEtHSXNJRzVsTENCSkxDQk5LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1Y21WdVpHVnlRblZtWm1WeVJHbHlaV04wS0ZJc0lHNTFiR3dzSUZrc0lGY3NJR0lzSUVncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2tMblpwYzJsaWJHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCVklEMGdlQ2hpTENBa0xDQkpMQ0JOS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNeExuSmxibVJsY2tKMVptWmxja1JwY21WamRDaFNMQ0J1ZFd4c0xDQlpMQ0JWTENCaUxDQnVkV3hzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ1R5QTlJR0l1WTJocGJHUnlaVzQ3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JaSUQwZ01Dd2dKQ0E5SUU4dWJHVnVaM1JvT3lCWklEd2dKRHNnV1NzcktYa29UMXRaWFN3Z2R5d2dVaXdnU1N3Z1RTazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdRakFvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdkQzVwYzFkbFlrZE1NanNLSUNBZ0lHWjFibU4wYVc5dUlHa29LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElGQWdQU0FoTVN3Z1kyVWdQU0J1WlhjZ2FtVXNJR0ZsSUQwZ2JuVnNiQ3dnWjJVZ1BTQnVaWGNnYW1Vb01Dd2dNQ3dnTUN3Z01DazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFRXRnphem9nWm5WdVkzUnBiMjRvZFdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmxJQ0U5UFNCMVpTQW1KaUFoVUNBbUppQW9jekV1WTI5c2IzSk5ZWE5yS0hWbExDQjFaU3dnZFdVc0lIVmxLU3dnWVdVZ1BTQjFaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhObGRFeHZZMnRsWkRvZ1puVnVZM1JwYjI0b2RXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkFnUFNCMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUTJ4bFlYSTZJR1oxYm1OMGFXOXVLSFZsTENCUkxDQmlaU3dnUm1Vc0lFRjBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JCZENBOVBUMGdJVEFnSmlZZ0tIVmxJQ285SUVabExDQlJJQ285SUVabExDQmlaU0FxUFNCR1pTa3NJR05sTG5ObGRDaDFaU3dnVVN3Z1ltVXNJRVpsS1N3Z1oyVXVaWEYxWVd4ektHTmxLU0E5UFQwZ0lURWdKaVlnS0hNeExtTnNaV0Z5UTI5c2IzSW9kV1VzSUZFc0lHSmxMQ0JHWlNrc0lHZGxMbU52Y0hrb1kyVXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnY21WelpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVUNBOUlDRXhMQ0JoWlNBOUlHNTFiR3dzSUdkbExuTmxkQ2d0TVN3Z01Dd2dNQ3dnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2NpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1VDQTlJQ0V4TENCalpTQTlJRzUxYkd3c0lHRmxJRDBnYm5Wc2JDd2daMlVnUFNCdWRXeHNPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUmxjM1E2SUdaMWJtTjBhVzl1S0hWbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFaU0EvSUVWbEtITXhMa1JGVUZSSVgxUkZVMVFwSURvZ1ZHVW9jekV1UkVWUVZFaGZWRVZUVkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRTFoYzJzNklHWjFibU4wYVc5dUtIVmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWlNBaFBUMGdkV1VnSmlZZ0lWQWdKaVlnS0hNeExtUmxjSFJvVFdGemF5aDFaU2tzSUdObElEMGdkV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCelpYUkdkVzVqT2lCbWRXNWpkR2x2YmloMVpTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGbElDRTlQU0IxWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaDFaU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2JtWTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TVM1a1pYQjBhRVoxYm1Nb2N6RXVUa1ZXUlZJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdjMlk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNWtaWEIwYUVaMWJtTW9jekV1UVV4WFFWbFRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUhKbU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1WkdWd2RHaEdkVzVqS0hNeExreEZVMU1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2RXODZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TVM1a1pYQjBhRVoxYm1Nb2N6RXVURVZSVlVGTUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJR0ZtT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVaR1Z3ZEdoR2RXNWpLSE14TGtWUlZVRk1LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUc5bU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1WkdWd2RHaEdkVzVqS0hNeExrZEZVVlZCVENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmpaam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNeExtUmxjSFJvUm5WdVl5aHpNUzVIVWtWQlZFVlNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUd4bU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1WkdWd2RHaEdkVzVqS0hNeExrNVBWRVZSVlVGTUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVaR1Z3ZEdoR2RXNWpLSE14TGt4RlVWVkJUQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZsSUQwZ2RXVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE5sZEV4dlkydGxaRG9nWm5WdVkzUnBiMjRvZFdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGQWdQU0IxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBRMnhsWVhJNklHWjFibU4wYVc5dUtIVmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuWlNBaFBUMGdkV1VnSmlZZ0tITXhMbU5zWldGeVJHVndkR2dvZFdVcExDQm5aU0E5SUhWbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6WlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVQ0E5SUNFeExDQmpaU0E5SUc1MWJHd3NJR0ZsSUQwZ2JuVnNiQ3dnWjJVZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdFb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUZBZ1BTQWhNU3dnWTJVZ1BTQnVkV3hzTENCaFpTQTlJRzUxYkd3c0lHZGxJRDBnYm5Wc2JDd2dkV1VnUFNCdWRXeHNMQ0JSSUQwZ2JuVnNiQ3dnWW1VZ1BTQnVkV3hzTENCR1pTQTlJRzUxYkd3c0lFRjBJRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6WlhSVVpYTjBPaUJtZFc1amRHbHZiaWgwZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VDQjhmQ0FvZEhRZ1B5QkZaU2h6TVM1VFZFVk9RMGxNWDFSRlUxUXBJRG9nVkdVb2N6RXVVMVJGVGtOSlRGOVVSVk5VS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRTFoYzJzNklHWjFibU4wYVc5dUtIUjBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWlNBaFBUMGdkSFFnSmlZZ0lWQWdKaVlnS0hNeExuTjBaVzVqYVd4TllYTnJLSFIwS1N3Z1kyVWdQU0IwZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRVoxYm1NNklHWjFibU4wYVc5dUtIUjBMQ0IwYml3Z1VuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2hoWlNBaFBUMGdkSFFnZkh3Z1oyVWdJVDA5SUhSdUlIeDhJSFZsSUNFOVBTQlNkQ2tnSmlZZ0tITXhMbk4wWlc1amFXeEdkVzVqS0hSMExDQjBiaXdnVW5RcExDQmhaU0E5SUhSMExDQm5aU0E5SUhSdUxDQjFaU0E5SUZKMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMlYwVDNBNklHWjFibU4wYVc5dUtIUjBMQ0IwYml3Z1VuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2hSSUNFOVBTQjBkQ0I4ZkNCaVpTQWhQVDBnZEc0Z2ZId2dSbVVnSVQwOUlGSjBLU0FtSmlBb2N6RXVjM1JsYm1OcGJFOXdLSFIwTENCMGJpd2dVblFwTENCUklEMGdkSFFzSUdKbElEMGdkRzRzSUVabElEMGdVblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCelpYUk1iMk5yWldRNklHWjFibU4wYVc5dUtIUjBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JRSUQwZ2RIUTdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE5sZEVOc1pXRnlPaUJtZFc1amRHbHZiaWgwZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FYUWdJVDA5SUhSMElDWW1JQ2h6TVM1amJHVmhjbE4wWlc1amFXd29kSFFwTENCQmRDQTlJSFIwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpaWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VDQTlJQ0V4TENCalpTQTlJRzUxYkd3c0lHRmxJRDBnYm5Wc2JDd2daMlVnUFNCdWRXeHNMQ0IxWlNBOUlHNTFiR3dzSUZFZ1BTQnVkV3hzTENCaVpTQTlJRzUxYkd3c0lFWmxJRDBnYm5Wc2JDd2dRWFFnUFNCdWRXeHNPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS0lDQWdJR3hsZENCdklEMGdibVYzSUdrc0lHTWdQU0J1WlhjZ2Npd2diQ0E5SUc1bGR5QmhMQ0JvSUQwZ2JtVjNJRmRsWVd0TllYQXNJSFVnUFNCdVpYY2dWMlZoYTAxaGNDd2daQ0E5SUh0OUxDQm1JRDBnZTMwc0lHMGdQU0J1WlhjZ1YyVmhhMDFoY0N3Z1h5QTlJRnRkTENCbklEMGdiblZzYkN3Z2NDQTlJQ0V4TENCMklEMGdiblZzYkN3Z2VDQTlJRzUxYkd3c0lIa2dQU0J1ZFd4c0xDQmlJRDBnYm5Wc2JDd2dkeUE5SUc1MWJHd3NJRklnUFNCdWRXeHNMQ0JKSUQwZ2JuVnNiQ3dnVFNBOUlDRXhMQ0JVSUQwZ2JuVnNiQ3dnVHlBOUlHNTFiR3dzSUZrZ1BTQnVkV3hzTENBa0lEMGdiblZzYkN3Z1ZTQTlJRzUxYkd3c0lIb2dQU0J6TVM1blpYUlFZWEpoYldWMFpYSW9jekV1VFVGWVgwTlBUVUpKVGtWRVgxUkZXRlJWVWtWZlNVMUJSMFZmVlU1SlZGTXBMQ0J4SUQwZ0lURXNJRWdnUFNBd0xDQnVaU0E5SUhNeExtZGxkRkJoY21GdFpYUmxjaWh6TVM1V1JWSlRTVTlPS1RzS0lDQWdJRzVsTG1sdVpHVjRUMllvSWxkbFlrZE1JaWtnSVQwOUlDMHhJRDhnS0VnZ1BTQndZWEp6WlVac2IyRjBLQzllVjJWaVIwd2dLRnhrS1M4dVpYaGxZeWh1WlNsYk1WMHBMQ0J4SUQwZ1NDQStQU0F4S1NBNklHNWxMbWx1WkdWNFQyWW9Jazl3Wlc1SFRDQkZVeUlwSUNFOVBTQXRNU0FtSmlBb1NDQTlJSEJoY25ObFJteHZZWFFvTDE1UGNHVnVSMHdnUlZNZ0tGeGtLUzh1WlhobFl5aHVaU2xiTVYwcExDQnhJRDBnU0NBK1BTQXlLVHNLSUNBZ0lHeGxkQ0JYSUQwZ2JuVnNiQ3dnU3lBOUlIdDlMQ0JFSUQwZ2N6RXVaMlYwVUdGeVlXMWxkR1Z5S0hNeExsTkRTVk5UVDFKZlFrOVlLU3dnUnlBOUlITXhMbWRsZEZCaGNtRnRaWFJsY2loek1TNVdTVVZYVUU5U1ZDa3NJR2hsSUQwZ2JtVjNJR3BsS0NrdVpuSnZiVUZ5Y21GNUtFUXBMQ0JtWlNBOUlHNWxkeUJxWlNncExtWnliMjFCY25KaGVTaEhLVHNLSUNBZ0lHWjFibU4wYVc5dUlGOWxLRkFzSUdObExDQmhaU3dnWjJVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZFdVZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNnMEtTd2dVU0E5SUhNeExtTnlaV0YwWlZSbGVIUjFjbVVvS1RzS0lDQWdJQ0FnSUNCek1TNWlhVzVrVkdWNGRIVnlaU2hRTENCUktTd2djekV1ZEdWNFVHRnlZVzFsZEdWeWFTaFFMQ0J6TVM1VVJWaFVWVkpGWDAxSlRsOUdTVXhVUlZJc0lITXhMazVGUVZKRlUxUXBMQ0J6TVM1MFpYaFFZWEpoYldWMFpYSnBLRkFzSUhNeExsUkZXRlJWVWtWZlRVRkhYMFpKVEZSRlVpd2djekV1VGtWQlVrVlRWQ2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JpWlNBOUlEQTdJR0psSUR3Z1lXVTdJR0psS3lzcGJpQW1KaUFvVUNBOVBUMGdjekV1VkVWWVZGVlNSVjh6UkNCOGZDQlFJRDA5UFNCek1TNVVSVmhVVlZKRlh6SkVYMEZTVWtGWktTQS9JSE14TG5SbGVFbHRZV2RsTTBRb1kyVXNJREFzSUhNeExsSkhRa0VzSURFc0lERXNJR2RsTENBd0xDQnpNUzVTUjBKQkxDQnpNUzVWVGxOSlIwNUZSRjlDV1ZSRkxDQjFaU2tnT2lCek1TNTBaWGhKYldGblpUSkVLR05sSUNzZ1ltVXNJREFzSUhNeExsSkhRa0VzSURFc0lERXNJREFzSUhNeExsSkhRa0VzSUhNeExsVk9VMGxIVGtWRVgwSlpWRVVzSUhWbEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1VUc0tJQ0FnSUgwS0lDQWdJR3hsZENCM1pTQTlJSHQ5T3dvZ0lDQWdkMlZiY3pFdVZFVllWRlZTUlY4eVJGMGdQU0JmWlNoek1TNVVSVmhVVlZKRlh6SkVMQ0J6TVM1VVJWaFVWVkpGWHpKRUxDQXhLU3dnZDJWYmN6RXVWRVZZVkZWU1JWOURWVUpGWDAxQlVGMGdQU0JmWlNoek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUUxDQnpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdzSURZcExDQnVJQ1ltSUNoM1pWdHpNUzVVUlZoVVZWSkZYekpFWDBGU1VrRlpYU0E5SUY5bEtITXhMbFJGV0ZSVlVrVmZNa1JmUVZKU1FWa3NJSE14TGxSRldGUlZVa1ZmTWtSZlFWSlNRVmtzSURFc0lERXBMQ0IzWlZ0ek1TNVVSVmhVVlZKRlh6TkVYU0E5SUY5bEtITXhMbFJGV0ZSVlVrVmZNMFFzSUhNeExsUkZXRlJWVWtWZk0wUXNJREVzSURFcEtTd2dieTV6WlhSRGJHVmhjaWd3TENBd0xDQXdMQ0F4S1N3Z1l5NXpaWFJEYkdWaGNpZ3hLU3dnYkM1elpYUkRiR1ZoY2lnd0tTd2dSV1VvY3pFdVJFVlFWRWhmVkVWVFZDa3NJR011YzJWMFJuVnVZeWgxYnlrc0lFb29JVEVwTENCVFpTaHliQ2tzSUVWbEtITXhMa05WVEV4ZlJrRkRSU2tzSUZnb1JHNHBPd29nSUNBZ1puVnVZM1JwYjI0Z1JXVW9VQ2tnZXdvZ0lDQWdJQ0FnSUdSYlVGMGdJVDA5SUNFd0lDWW1JQ2h6TVM1bGJtRmliR1VvVUNrc0lHUmJVRjBnUFNBaE1DazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJVWlNoUUtTQjdDaUFnSUNBZ0lDQWdaRnRRWFNBaFBUMGdJVEVnSmlZZ0tITXhMbVJwYzJGaWJHVW9VQ2tzSUdSYlVGMGdQU0FoTVNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlpaU2hRTENCalpTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQm1XMUJkSUNFOVBTQmpaU0EvSUNoek1TNWlhVzVrUm5KaGJXVmlkV1ptWlhJb1VDd2dZMlVwTENCbVcxQmRJRDBnWTJVc0lHNGdKaVlnS0ZBZ1BUMDlJSE14TGtSU1FWZGZSbEpCVFVWQ1ZVWkdSVklnSmlZZ0tHWmJjekV1UmxKQlRVVkNWVVpHUlZKZElEMGdZMlVwTENCUUlEMDlQU0J6TVM1R1VrRk5SVUpWUmtaRlVpQW1KaUFvWmx0ek1TNUVVa0ZYWDBaU1FVMUZRbFZHUmtWU1hTQTlJR05sS1Nrc0lDRXdLU0E2SUNFeE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhWFFvVUN3Z1kyVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1lXVWdQU0JmTENCblpTQTlJQ0V4T3dvZ0lDQWdJQ0FnSUdsbUlDaFFLU0JwWmlBb1lXVWdQU0J0TG1kbGRDaGpaU2tzSUdGbElEMDlQU0IyYjJsa0lEQWdKaVlnS0dGbElEMGdXMTBzSUcwdWMyVjBLR05sTENCaFpTa3BMQ0JRTG1selYyVmlSMHhOZFd4MGFYQnNaVkpsYm1SbGNsUmhjbWRsZEhNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVmxJRDBnVUM1MFpYaDBkWEpsT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVdVdWJHVnVaM1JvSUNFOVBTQjFaUzVzWlc1bmRHZ2dmSHdnWVdWYk1GMGdJVDA5SUhNeExrTlBURTlTWDBGVVZFRkRTRTFGVGxRd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGRWdQU0F3TENCaVpTQTlJSFZsTG14bGJtZDBhRHNnVVNBOElHSmxPeUJSS3lzcFlXVmJVVjBnUFNCek1TNURUMHhQVWw5QlZGUkJRMGhOUlU1VU1DQXJJRkU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWlM1c1pXNW5kR2dnUFNCMVpTNXNaVzVuZEdnc0lHZGxJRDBnSVRBN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdZV1ZiTUYwZ0lUMDlJSE14TGtOUFRFOVNYMEZVVkVGRFNFMUZUbFF3SUNZbUlDaGhaVnN3WFNBOUlITXhMa05QVEU5U1gwRlVWRUZEU0UxRlRsUXdMQ0JuWlNBOUlDRXdLVHNLSUNBZ0lDQWdJQ0JsYkhObElHRmxXekJkSUNFOVBTQnpNUzVDUVVOTElDWW1JQ2hoWlZzd1hTQTlJSE14TGtKQlEwc3NJR2RsSUQwZ0lUQXBPd29nSUNBZ0lDQWdJR2RsSUNZbUlDaDBMbWx6VjJWaVIwd3lJRDhnY3pFdVpISmhkMEoxWm1abGNuTW9ZV1VwSURvZ1pTNW5aWFFvSWxkRlFrZE1YMlJ5WVhkZlluVm1abVZ5Y3lJcExtUnlZWGRDZFdabVpYSnpWMFZDUjB3b1lXVXBLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVObEtGQXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaeUFoUFQwZ1VDQS9JQ2h6TVM1MWMyVlFjbTluY21GdEtGQXBMQ0JuSUQwZ1VDd2dJVEFwSURvZ0lURTdDaUFnSUNCOUNpQWdJQ0JzWlhRZ1RDQTlJSHNLSUNBZ0lDQWdJQ0JiUW1sZE9pQnpNUzVHVlU1RFgwRkVSQ3dLSUNBZ0lDQWdJQ0JiV0dSZE9pQnpNUzVHVlU1RFgxTlZRbFJTUVVOVUxBb2dJQ0FnSUNBZ0lGdHhaRjA2SUhNeExrWlZUa05mVWtWV1JWSlRSVjlUVlVKVVVrRkRWQW9nSUNBZ2ZUc0tJQ0FnSUdsbUlDaHVLU0JNVzJ4c1hTQTlJSE14TGsxSlRpd2dURnRvYkYwZ1BTQnpNUzVOUVZnN0NpQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQnNaWFFnVUNBOUlHVXVaMlYwS0NKRldGUmZZbXhsYm1SZmJXbHViV0Y0SWlrN0NpQWdJQ0FnSUNBZ1VDQWhQVDBnYm5Wc2JDQW1KaUFvVEZ0c2JGMGdQU0JRTGsxSlRsOUZXRlFzSUV4YmFHeGRJRDBnVUM1TlFWaGZSVmhVS1RzS0lDQWdJSDBLSUNBZ0lHeGxkQ0J2WlNBOUlIc0tJQ0FnSUNBZ0lDQmJXV1JkT2lCek1TNWFSVkpQTEFvZ0lDQWdJQ0FnSUZ0YVpGMDZJSE14TGs5T1JTd0tJQ0FnSUNBZ0lDQmJTbVJkT2lCek1TNVRVa05mUTA5TVQxSXNDaUFnSUNBZ0lDQWdXMnhrWFRvZ2N6RXVVMUpEWDBGTVVFaEJMQW9nSUNBZ0lDQWdJRnQwWmwwNklITXhMbE5TUTE5QlRGQklRVjlUUVZSVlVrRlVSU3dLSUNBZ0lDQWdJQ0JiYW1SZE9pQnpNUzVFVTFSZlEwOU1UMUlzQ2lBZ0lDQWdJQ0FnVzB0a1hUb2djekV1UkZOVVgwRk1VRWhCTEFvZ0lDQWdJQ0FnSUZza1pGMDZJSE14TGs5T1JWOU5TVTVWVTE5VFVrTmZRMDlNVDFJc0NpQWdJQ0FnSUNBZ1cyaGtYVG9nY3pFdVQwNUZYMDFKVGxWVFgxTlNRMTlCVEZCSVFTd0tJQ0FnSUNBZ0lDQmJaV1pkT2lCek1TNVBUa1ZmVFVsT1ZWTmZSRk5VWDBOUFRFOVNMQW9nSUNBZ0lDQWdJRnRSWkYwNklITXhMazlPUlY5TlNVNVZVMTlFVTFSZlFVeFFTRUVLSUNBZ0lIMDdDaUFnSUNCbWRXNWpkR2x2YmlCWUtGQXNJR05sTENCaFpTd2daMlVzSUhWbExDQlJMQ0JpWlN3Z1JtVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1VDQTlQVDBnUkc0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0NBOVBUMGdJVEFnSmlZZ0tGUmxLSE14TGtKTVJVNUVLU3dnY0NBOUlDRXhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9jQ0E5UFQwZ0lURWdKaVlnS0VWbEtITXhMa0pNUlU1RUtTd2djQ0E5SUNFd0tTd2dVQ0FoUFQwZ1YyUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRkFnSVQwOUlIWWdmSHdnUm1VZ0lUMDlJRTBwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ29lQ0FoUFQwZ1Fta2dmSHdnZHlBaFBUMGdRbWtwSUNZbUlDaHpNUzVpYkdWdVpFVnhkV0YwYVc5dUtITXhMa1pWVGtOZlFVUkVLU3dnZUNBOUlFSnBMQ0IzSUQwZ1Fta3BMQ0JHWlNrZ2MzZHBkR05vS0ZBcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1YyazZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXhMbUpzWlc1a1JuVnVZMU5sY0dGeVlYUmxLSE14TGs5T1JTd2djekV1VDA1RlgwMUpUbFZUWDFOU1ExOUJURkJJUVN3Z2N6RXVUMDVGTENCek1TNVBUa1ZmVFVsT1ZWTmZVMUpEWDBGTVVFaEJLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCaGJEb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVZbXhsYm1SR2RXNWpLSE14TGs5T1JTd2djekV1VDA1RktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0J2YkRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdVlteGxibVJHZFc1alUyVndZWEpoZEdVb2N6RXVXa1ZTVHl3Z2N6RXVUMDVGWDAxSlRsVlRYMU5TUTE5RFQweFBVaXdnY3pFdVdrVlNUeXdnY3pFdVQwNUZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCamJEb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVZbXhsYm1SR2RXNWpVMlZ3WVhKaGRHVW9jekV1V2tWU1R5d2djekV1VTFKRFgwTlBURTlTTENCek1TNWFSVkpQTENCek1TNVRVa05mUVV4UVNFRXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEZOMFlYUmxPaUJKYm5aaGJHbGtJR0pzWlc1a2FXNW5PaUFpTENCUUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElITjNhWFJqYUNoUUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGZHBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpNUzVpYkdWdVpFWjFibU5UWlhCaGNtRjBaU2h6TVM1VFVrTmZRVXhRU0VFc0lITXhMazlPUlY5TlNVNVZVMTlUVWtOZlFVeFFTRUVzSUhNeExrOU9SU3dnY3pFdVQwNUZYMDFKVGxWVFgxTlNRMTlCVEZCSVFTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWVd3NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNeExtSnNaVzVrUm5WdVl5aHpNUzVUVWtOZlFVeFFTRUVzSUhNeExrOU9SU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2IydzZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXhMbUpzWlc1a1JuVnVZMU5sY0dGeVlYUmxLSE14TGxwRlVrOHNJSE14TGs5T1JWOU5TVTVWVTE5VFVrTmZRMDlNVDFJc0lITXhMbHBGVWs4c0lITXhMazlPUlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdZMnc2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE14TG1Kc1pXNWtSblZ1WXloek1TNWFSVkpQTENCek1TNVRVa05mUTA5TVQxSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEZOMFlYUmxPaUJKYm5aaGJHbGtJR0pzWlc1a2FXNW5PaUFpTENCUUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1SUQwZ2JuVnNiQ3dnWWlBOUlHNTFiR3dzSUZJZ1BTQnVkV3hzTENCSklEMGdiblZzYkN3Z2RpQTlJRkFzSUUwZ1BTQkdaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFZsSUQwZ2RXVWdmSHdnWTJVc0lGRWdQU0JSSUh4OElHRmxMQ0JpWlNBOUlHSmxJSHg4SUdkbExDQW9ZMlVnSVQwOUlIZ2dmSHdnZFdVZ0lUMDlJSGNwSUNZbUlDaHpNUzVpYkdWdVpFVnhkV0YwYVc5dVUyVndZWEpoZEdVb1RGdGpaVjBzSUV4YmRXVmRLU3dnZUNBOUlHTmxMQ0IzSUQwZ2RXVXBMQ0FvWVdVZ0lUMDlJSGtnZkh3Z1oyVWdJVDA5SUdJZ2ZId2dVU0FoUFQwZ1VpQjhmQ0JpWlNBaFBUMGdTU2tnSmlZZ0tITXhMbUpzWlc1a1JuVnVZMU5sY0dGeVlYUmxLRzlsVzJGbFhTd2diMlZiWjJWZExDQnZaVnRSWFN3Z2IyVmJZbVZkS1N3Z2VTQTlJR0ZsTENCaUlEMGdaMlVzSUZJZ1BTQlJMQ0JKSUQwZ1ltVXBMQ0IySUQwZ1VDd2dUU0E5SUNFeE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhV1VvVUN3Z1kyVXBJSHNLSUNBZ0lDQWdJQ0JRTG5OcFpHVWdQVDA5SUdkdUlEOGdWR1VvY3pFdVExVk1URjlHUVVORktTQTZJRVZsS0hNeExrTlZURXhmUmtGRFJTazdDaUFnSUNBZ0lDQWdiR1YwSUdGbElEMGdVQzV6YVdSbElEMDlQU0JHZERzS0lDQWdJQ0FnSUNCalpTQW1KaUFvWVdVZ1BTQWhZV1VwTENCS0tHRmxLU3dnVUM1aWJHVnVaR2x1WnlBOVBUMGdWMmtnSmlZZ1VDNTBjbUZ1YzNCaGNtVnVkQ0E5UFQwZ0lURWdQeUJZS0VSdUtTQTZJRmdvVUM1aWJHVnVaR2x1Wnl3Z1VDNWliR1Z1WkVWeGRXRjBhVzl1TENCUUxtSnNaVzVrVTNKakxDQlFMbUpzWlc1a1JITjBMQ0JRTG1Kc1pXNWtSWEYxWVhScGIyNUJiSEJvWVN3Z1VDNWliR1Z1WkZOeVkwRnNjR2hoTENCUUxtSnNaVzVrUkhOMFFXeHdhR0VzSUZBdWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaEtTd2dZeTV6WlhSR2RXNWpLRkF1WkdWd2RHaEdkVzVqS1N3Z1l5NXpaWFJVWlhOMEtGQXVaR1Z3ZEdoVVpYTjBLU3dnWXk1elpYUk5ZWE5yS0ZBdVpHVndkR2hYY21sMFpTa3NJRzh1YzJWMFRXRnpheWhRTG1OdmJHOXlWM0pwZEdVcE93b2dJQ0FnSUNBZ0lHeGxkQ0JuWlNBOUlGQXVjM1JsYm1OcGJGZHlhWFJsT3dvZ0lDQWdJQ0FnSUd3dWMyVjBWR1Z6ZENoblpTa3NJR2RsSUNZbUlDaHNMbk5sZEUxaGMyc29VQzV6ZEdWdVkybHNWM0pwZEdWTllYTnJLU3dnYkM1elpYUkdkVzVqS0ZBdWMzUmxibU5wYkVaMWJtTXNJRkF1YzNSbGJtTnBiRkpsWml3Z1VDNXpkR1Z1WTJsc1JuVnVZMDFoYzJzcExDQnNMbk5sZEU5d0tGQXVjM1JsYm1OcGJFWmhhV3dzSUZBdWMzUmxibU5wYkZwR1lXbHNMQ0JRTG5OMFpXNWphV3hhVUdGemN5a3BMQ0I1WlNoUUxuQnZiSGxuYjI1UFptWnpaWFFzSUZBdWNHOXNlV2R2Yms5bVpuTmxkRVpoWTNSdmNpd2dVQzV3YjJ4NVoyOXVUMlptYzJWMFZXNXBkSE1wTENCUUxtRnNjR2hoVkc5RGIzWmxjbUZuWlNBOVBUMGdJVEFnUHlCRlpTaHpNUzVUUVUxUVRFVmZRVXhRU0VGZlZFOWZRMDlXUlZKQlIwVXBJRG9nVkdVb2N6RXVVMEZOVUV4RlgwRk1VRWhCWDFSUFgwTlBWa1ZTUVVkRktUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRW9vVUNrZ2V3b2dJQ0FnSUNBZ0lGUWdJVDA5SUZBZ0ppWWdLRkFnUHlCek1TNW1jbTl1ZEVaaFkyVW9jekV1UTFjcElEb2djekV1Wm5KdmJuUkdZV05sS0hNeExrTkRWeWtzSUZRZ1BTQlFLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUZObEtGQXBJSHNLSUNBZ0lDQWdJQ0JRSUNFOVBTQnJaQ0EvSUNoRlpTaHpNUzVEVlV4TVgwWkJRMFVwTENCUUlDRTlQU0JQSUNZbUlDaFFJRDA5UFNCeWJDQS9JSE14TG1OMWJHeEdZV05sS0hNeExrSkJRMHNwSURvZ1VDQTlQVDBnU0dRZ1B5QnpNUzVqZFd4c1JtRmpaU2h6TVM1R1VrOU9WQ2tnT2lCek1TNWpkV3hzUm1GalpTaHpNUzVHVWs5T1ZGOUJUa1JmUWtGRFN5a3BLU0E2SUZSbEtITXhMa05WVEV4ZlJrRkRSU2tzSUU4Z1BTQlFPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYldVb1VDa2dld29nSUNBZ0lDQWdJRkFnSVQwOUlGa2dKaVlnS0hFZ0ppWWdjekV1YkdsdVpWZHBaSFJvS0ZBcExDQlpJRDBnVUNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjVaU2hRTENCalpTd2dZV1VwSUhzS0lDQWdJQ0FnSUNCUUlEOGdLRVZsS0hNeExsQlBURmxIVDA1ZlQwWkdVMFZVWDBaSlRFd3BMQ0FvSkNBaFBUMGdZMlVnZkh3Z1ZTQWhQVDBnWVdVcElDWW1JQ2h6TVM1d2IyeDVaMjl1VDJabWMyVjBLR05sTENCaFpTa3NJQ1FnUFNCalpTd2dWU0E5SUdGbEtTa2dPaUJVWlNoek1TNVFUMHhaUjA5T1gwOUdSbE5GVkY5R1NVeE1LVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUU1bEtGQXBJSHNLSUNBZ0lDQWdJQ0JRSUQ4Z1JXVW9jekV1VTBOSlUxTlBVbDlVUlZOVUtTQTZJRlJsS0hNeExsTkRTVk5UVDFKZlZFVlRWQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCeFpTaFFLU0I3Q2lBZ0lDQWdJQ0FnVUNBOVBUMGdkbTlwWkNBd0lDWW1JQ2hRSUQwZ2N6RXVWRVZZVkZWU1JUQWdLeUI2SUMwZ01Ta3NJRmNnSVQwOUlGQWdKaVlnS0hNeExtRmpkR2wyWlZSbGVIUjFjbVVvVUNrc0lGY2dQU0JRS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlISjBLRkFzSUdObExDQmhaU2tnZXdvZ0lDQWdJQ0FnSUdGbElEMDlQU0IyYjJsa0lEQWdKaVlnS0ZjZ1BUMDlJRzUxYkd3Z1B5QmhaU0E5SUhNeExsUkZXRlJWVWtVd0lDc2dlaUF0SURFZ09pQmhaU0E5SUZjcE93b2dJQ0FnSUNBZ0lHeGxkQ0JuWlNBOUlFdGJZV1ZkT3dvZ0lDQWdJQ0FnSUdkbElEMDlQU0IyYjJsa0lEQWdKaVlnS0dkbElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUIyYjJsa0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUhSbGVIUjFjbVU2SUhadmFXUWdNQW9nSUNBZ0lDQWdJSDBzSUV0YllXVmRJRDBnWjJVcExDQW9aMlV1ZEhsd1pTQWhQVDBnVUNCOGZDQm5aUzUwWlhoMGRYSmxJQ0U5UFNCalpTa2dKaVlnS0ZjZ0lUMDlJR0ZsSUNZbUlDaHpNUzVoWTNScGRtVlVaWGgwZFhKbEtHRmxLU3dnVnlBOUlHRmxLU3dnY3pFdVltbHVaRlJsZUhSMWNtVW9VQ3dnWTJVZ2ZId2dkMlZiVUYwcExDQm5aUzUwZVhCbElEMGdVQ3dnWjJVdWRHVjRkSFZ5WlNBOUlHTmxLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVNb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUZBZ1BTQkxXMWRkT3dvZ0lDQWdJQ0FnSUZBZ0lUMDlJSFp2YVdRZ01DQW1KaUJRTG5SNWNHVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2N6RXVZbWx1WkZSbGVIUjFjbVVvVUM1MGVYQmxMQ0J1ZFd4c0tTd2dVQzUwZVhCbElEMGdkbTlwWkNBd0xDQlFMblJsZUhSMWNtVWdQU0IyYjJsa0lEQXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVXlncElIc0tJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzVqYjIxd2NtVnpjMlZrVkdWNFNXMWhaMlV5UkM1aGNIQnNlU2h6TVN3Z1lYSm5kVzFsYm5SektUc0tJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaFFLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SWl3Z1VDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnUWlncElIc0tJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzVqYjIxd2NtVnpjMlZrVkdWNFNXMWhaMlV6UkM1aGNIQnNlU2h6TVN3Z1lYSm5kVzFsYm5SektUc0tJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaFFLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SWl3Z1VDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWldVb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjekV1ZEdWNFUzVmlTVzFoWjJVeVJDNWhjSEJzZVNoek1Td2dZWEpuZFcxbGJuUnpLVHNLSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hRS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1VM1JoZEdVNklpd2dVQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2FpZ3BJSHNLSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1MFpYaFRkV0pKYldGblpUTkVMbUZ3Y0d4NUtITXhMQ0JoY21kMWJXVnVkSE1wT3dvZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0ZBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVYyVmlSMHhUZEdGMFpUb2lMQ0JRS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjBaU2dwSUhzS0lDQWdJQ0FnSUNCMGNua2dld29nSUNBZ0lDQWdJQ0FnSUNCek1TNWpiMjF3Y21WemMyVmtWR1Y0VTNWaVNXMWhaMlV5UkM1aGNIQnNlU2h6TVN3Z1lYSm5kVzFsYm5SektUc0tJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaFFLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SWl3Z1VDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVFdVb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjekV1WTI5dGNISmxjM05sWkZSbGVGTjFZa2x0WVdkbE0wUXVZWEJ3Ykhrb2N6RXNJR0Z5WjNWdFpXNTBjeWs3Q2lBZ0lDQWdJQ0FnZlNCallYUmphQ0FvVUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1WFpXSkhURk4wWVhSbE9pSXNJRkFwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlISmxLQ2tnZXdvZ0lDQWdJQ0FnSUhSeWVTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhNeExuUmxlRk4wYjNKaFoyVXlSQzVoY0hCc2VTaHpNU3dnWVhKbmRXMWxiblJ6S1RzS0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNoUUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsZGxZa2RNVTNSaGRHVTZJaXdnVUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdaR1VvS1NCN0NpQWdJQ0FnSUNBZ2RISjVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVkR1Y0VTNSdmNtRm5aVE5FTG1Gd2NHeDVLSE14TENCaGNtZDFiV1Z1ZEhNcE93b2dJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tGQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4VGRHRjBaVG9pTENCUUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJNWlNncElIc0tJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzUwWlhoSmJXRm5aVEpFTG1Gd2NHeDVLSE14TENCaGNtZDFiV1Z1ZEhNcE93b2dJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tGQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4VGRHRjBaVG9pTENCUUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJhWlNncElIc0tJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzUwWlhoSmJXRm5aVE5FTG1Gd2NHeDVLSE14TENCaGNtZDFiV1Z1ZEhNcE93b2dJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tGQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4VGRHRjBaVG9pTENCUUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ6WlNoUUtTQjdDaUFnSUNBZ0lDQWdhR1V1WlhGMVlXeHpLRkFwSUQwOVBTQWhNU0FtSmlBb2N6RXVjMk5wYzNOdmNpaFFMbmdzSUZBdWVTd2dVQzU2TENCUUxuY3BMQ0JvWlM1amIzQjVLRkFwS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlDUmxLRkFwSUhzS0lDQWdJQ0FnSUNCbVpTNWxjWFZoYkhNb1VDa2dQVDA5SUNFeElDWW1JQ2h6TVM1MmFXVjNjRzl5ZENoUUxuZ3NJRkF1ZVN3Z1VDNTZMQ0JRTG5jcExDQm1aUzVqYjNCNUtGQXBLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUU5bEtGQXNJR05sS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR0ZsSUQwZ2RTNW5aWFFvWTJVcE93b2dJQ0FnSUNBZ0lHRmxJRDA5UFNCMmIybGtJREFnSmlZZ0tHRmxJRDBnYm1WM0lGZGxZV3ROWVhBc0lIVXVjMlYwS0dObExDQmhaU2twT3dvZ0lDQWdJQ0FnSUd4bGRDQm5aU0E5SUdGbExtZGxkQ2hRS1RzS0lDQWdJQ0FnSUNCblpTQTlQVDBnZG05cFpDQXdJQ1ltSUNoblpTQTlJSE14TG1kbGRGVnVhV1p2Y20xQ2JHOWphMGx1WkdWNEtHTmxMQ0JRTG01aGJXVXBMQ0JoWlM1elpYUW9VQ3dnWjJVcEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRWxsS0ZBc0lHTmxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHZGxJRDBnZFM1blpYUW9ZMlVwTG1kbGRDaFFLVHNLSUNBZ0lDQWdJQ0JvTG1kbGRDaGpaU2tnSVQwOUlHZGxJQ1ltSUNoek1TNTFibWxtYjNKdFFteHZZMnRDYVc1a2FXNW5LR05sTENCblpTd2dVQzVmWDJKcGJtUnBibWRRYjJsdWRFbHVaR1Y0S1N3Z2FDNXpaWFFvWTJVc0lHZGxLU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCU1pTZ3BJSHNLSUNBZ0lDQWdJQ0J6TVM1a2FYTmhZbXhsS0hNeExrSk1SVTVFS1N3Z2N6RXVaR2x6WVdKc1pTaHpNUzVEVlV4TVgwWkJRMFVwTENCek1TNWthWE5oWW14bEtITXhMa1JGVUZSSVgxUkZVMVFwTENCek1TNWthWE5oWW14bEtITXhMbEJQVEZsSFQwNWZUMFpHVTBWVVgwWkpURXdwTENCek1TNWthWE5oWW14bEtITXhMbE5EU1ZOVFQxSmZWRVZUVkNrc0lITXhMbVJwYzJGaWJHVW9jekV1VTFSRlRrTkpURjlVUlZOVUtTd2djekV1WkdsellXSnNaU2h6TVM1VFFVMVFURVZmUVV4UVNFRmZWRTlmUTA5V1JWSkJSMFVwTENCek1TNWliR1Z1WkVWeGRXRjBhVzl1S0hNeExrWlZUa05mUVVSRUtTd2djekV1WW14bGJtUkdkVzVqS0hNeExrOU9SU3dnY3pFdVdrVlNUeWtzSUhNeExtSnNaVzVrUm5WdVkxTmxjR0Z5WVhSbEtITXhMazlPUlN3Z2N6RXVXa1ZTVHl3Z2N6RXVUMDVGTENCek1TNWFSVkpQS1N3Z2N6RXVZMjlzYjNKTllYTnJLQ0V3TENBaE1Dd2dJVEFzSUNFd0tTd2djekV1WTJ4bFlYSkRiMnh2Y2lnd0xDQXdMQ0F3TENBd0tTd2djekV1WkdWd2RHaE5ZWE5yS0NFd0tTd2djekV1WkdWd2RHaEdkVzVqS0hNeExreEZVMU1wTENCek1TNWpiR1ZoY2tSbGNIUm9LREVwTENCek1TNXpkR1Z1WTJsc1RXRnpheWcwTWprME9UWTNNamsxS1N3Z2N6RXVjM1JsYm1OcGJFWjFibU1vY3pFdVFVeFhRVmxUTENBd0xDQTBNamswT1RZM01qazFLU3dnY3pFdWMzUmxibU5wYkU5d0tITXhMa3RGUlZBc0lITXhMa3RGUlZBc0lITXhMa3RGUlZBcExDQnpNUzVqYkdWaGNsTjBaVzVqYVd3b01Da3NJSE14TG1OMWJHeEdZV05sS0hNeExrSkJRMHNwTENCek1TNW1jbTl1ZEVaaFkyVW9jekV1UTBOWEtTd2djekV1Y0c5c2VXZHZiazltWm5ObGRDZ3dMQ0F3S1N3Z2N6RXVZV04wYVhabFZHVjRkSFZ5WlNoek1TNVVSVmhVVlZKRk1Da3NJSE14TG1KcGJtUkdjbUZ0WldKMVptWmxjaWh6TVM1R1VrRk5SVUpWUmtaRlVpd2diblZzYkNrc0lHNGdQVDA5SUNFd0lDWW1JQ2h6TVM1aWFXNWtSbkpoYldWaWRXWm1aWElvY3pFdVJGSkJWMTlHVWtGTlJVSlZSa1pGVWl3Z2JuVnNiQ2tzSUhNeExtSnBibVJHY21GdFpXSjFabVpsY2loek1TNVNSVUZFWDBaU1FVMUZRbFZHUmtWU0xDQnVkV3hzS1Nrc0lITXhMblZ6WlZCeWIyZHlZVzBvYm5Wc2JDa3NJSE14TG14cGJtVlhhV1IwYUNneEtTd2djekV1YzJOcGMzTnZjaWd3TENBd0xDQnpNUzVqWVc1MllYTXVkMmxrZEdnc0lITXhMbU5oYm5aaGN5NW9aV2xuYUhRcExDQnpNUzUyYVdWM2NHOXlkQ2d3TENBd0xDQnpNUzVqWVc1MllYTXVkMmxrZEdnc0lITXhMbU5oYm5aaGN5NW9aV2xuYUhRcExDQmtJRDBnZTMwc0lGY2dQU0J1ZFd4c0xDQkxJRDBnZTMwc0lHWWdQU0I3ZlN3Z2JTQTlJRzVsZHlCWFpXRnJUV0Z3TENCZklEMGdXMTBzSUdjZ1BTQnVkV3hzTENCd0lEMGdJVEVzSUhZZ1BTQnVkV3hzTENCNElEMGdiblZzYkN3Z2VTQTlJRzUxYkd3c0lHSWdQU0J1ZFd4c0xDQjNJRDBnYm5Wc2JDd2dVaUE5SUc1MWJHd3NJRWtnUFNCdWRXeHNMQ0JOSUQwZ0lURXNJRlFnUFNCdWRXeHNMQ0JQSUQwZ2JuVnNiQ3dnV1NBOUlHNTFiR3dzSUNRZ1BTQnVkV3hzTENCVklEMGdiblZzYkN3Z2FHVXVjMlYwS0RBc0lEQXNJSE14TG1OaGJuWmhjeTUzYVdSMGFDd2djekV1WTJGdWRtRnpMbWhsYVdkb2RDa3NJR1psTG5ObGRDZ3dMQ0F3TENCek1TNWpZVzUyWVhNdWQybGtkR2dzSUhNeExtTmhiblpoY3k1b1pXbG5hSFFwTENCdkxuSmxjMlYwS0Nrc0lHTXVjbVZ6WlhRb0tTd2diQzV5WlhObGRDZ3BPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JpZFdabVpYSnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCdkxBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFEb2dZeXdLSUNBZ0lDQWdJQ0FnSUNBZ2MzUmxibU5wYkRvZ2JBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdaVzVoWW14bE9pQkZaU3dLSUNBZ0lDQWdJQ0JrYVhOaFlteGxPaUJVWlN3S0lDQWdJQ0FnSUNCaWFXNWtSbkpoYldWaWRXWm1aWEk2SUZsbExBb2dJQ0FnSUNBZ0lHUnlZWGRDZFdabVpYSnpPaUJwZEN3S0lDQWdJQ0FnSUNCMWMyVlFjbTluY21GdE9pQkRaU3dLSUNBZ0lDQWdJQ0J6WlhSQ2JHVnVaR2x1WnpvZ1dDd0tJQ0FnSUNBZ0lDQnpaWFJOWVhSbGNtbGhiRG9nYVdVc0NpQWdJQ0FnSUNBZ2MyVjBSbXhwY0ZOcFpHVmtPaUJLTEFvZ0lDQWdJQ0FnSUhObGRFTjFiR3hHWVdObE9pQlRaU3dLSUNBZ0lDQWdJQ0J6WlhSTWFXNWxWMmxrZEdnNklHMWxMQW9nSUNBZ0lDQWdJSE5sZEZCdmJIbG5iMjVQWm1aelpYUTZJSGxsTEFvZ0lDQWdJQ0FnSUhObGRGTmphWE56YjNKVVpYTjBPaUJPWlN3S0lDQWdJQ0FnSUNCaFkzUnBkbVZVWlhoMGRYSmxPaUJ4WlN3S0lDQWdJQ0FnSUNCaWFXNWtWR1Y0ZEhWeVpUb2djblFzQ2lBZ0lDQWdJQ0FnZFc1aWFXNWtWR1Y0ZEhWeVpUb2dReXdLSUNBZ0lDQWdJQ0JqYjIxd2NtVnpjMlZrVkdWNFNXMWhaMlV5UkRvZ1V5d0tJQ0FnSUNBZ0lDQmpiMjF3Y21WemMyVmtWR1Y0U1cxaFoyVXpSRG9nUWl3S0lDQWdJQ0FnSUNCMFpYaEpiV0ZuWlRKRU9pQk1aU3dLSUNBZ0lDQWdJQ0IwWlhoSmJXRm5aVE5FT2lCYVpTd0tJQ0FnSUNBZ0lDQjFjR1JoZEdWVlFrOU5ZWEJ3YVc1bk9pQlBaU3dLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRRbXh2WTJ0Q2FXNWthVzVuT2lCSlpTd0tJQ0FnSUNBZ0lDQjBaWGhUZEc5eVlXZGxNa1E2SUhKbExBb2dJQ0FnSUNBZ0lIUmxlRk4wYjNKaFoyVXpSRG9nWkdVc0NpQWdJQ0FnSUNBZ2RHVjRVM1ZpU1cxaFoyVXlSRG9nWldVc0NpQWdJQ0FnSUNBZ2RHVjRVM1ZpU1cxaFoyVXpSRG9nYWl3S0lDQWdJQ0FnSUNCamIyMXdjbVZ6YzJWa1ZHVjRVM1ZpU1cxaFoyVXlSRG9nZEdVc0NpQWdJQ0FnSUNBZ1kyOXRjSEpsYzNObFpGUmxlRk4xWWtsdFlXZGxNMFE2SUUxbExBb2dJQ0FnSUNBZ0lITmphWE56YjNJNklITmxMQW9nSUNBZ0lDQWdJSFpwWlhkd2IzSjBPaUFrWlN3S0lDQWdJQ0FnSUNCeVpYTmxkRG9nVW1VS0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z2VqQW9jekVzSUdVc0lIUXNJRzRzSUdrc0lISXNJR0VwSUhzS0lDQWdJR3hsZENCdklEMGdhUzVwYzFkbFlrZE1NaXdnWXlBOUlHa3ViV0Y0VkdWNGRIVnlaWE1zSUd3Z1BTQnBMbTFoZUVOMVltVnRZWEJUYVhwbExDQm9JRDBnYVM1dFlYaFVaWGgwZFhKbFUybDZaU3dnZFNBOUlHa3ViV0Y0VTJGdGNHeGxjeXdnWkNBOUlHVXVhR0Z6S0NKWFJVSkhURjl0ZFd4MGFYTmhiWEJzWldSZmNtVnVaR1Z5WDNSdlgzUmxlSFIxY21VaUtTQS9JR1V1WjJWMEtDSlhSVUpIVEY5dGRXeDBhWE5oYlhCc1pXUmZjbVZ1WkdWeVgzUnZYM1JsZUhSMWNtVWlLU0E2SUc1MWJHd3NJR1lnUFNCMGVYQmxiMllnYm1GMmFXZGhkRzl5SUQ0Z0luVWlJRDhnSVRFZ09pQXZUMk4xYkhWelFuSnZkM05sY2k5bkxuUmxjM1FvYm1GMmFXZGhkRzl5TG5WelpYSkJaMlZ1ZENrc0lHMGdQU0J1WlhjZ1YyVmhhMDFoY0N3Z1h5d2daeUE5SUc1bGR5QlhaV0ZyVFdGd0xDQndJRDBnSVRFN0NpQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lIQWdQU0IwZVhCbGIyWWdUMlptYzJOeVpXVnVRMkZ1ZG1GeklEd2dJblVpSUNZbUlHNWxkeUJQWm1aelkzSmxaVzVEWVc1MllYTW9NU3dnTVNrdVoyVjBRMjl1ZEdWNGRDZ2lNbVFpS1NBaFBUMGdiblZzYkRzS0lDQWdJSDBnWTJGMFkyZ2dJSHQ5Q2lBZ0lDQm1kVzVqZEdsdmJpQjJLRU1zSUZNcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2NDQS9JRzVsZHlCUFptWnpZM0psWlc1RFlXNTJZWE1vUXl3Z1V5a2dPaUIzY3lnaVkyRnVkbUZ6SWlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjRLRU1zSUZNc0lFSXNJR1ZsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR29nUFNBeE93b2dJQ0FnSUNBZ0lHbG1JQ2dvUXk1M2FXUjBhQ0ErSUdWbElIeDhJRU11YUdWcFoyaDBJRDRnWldVcElDWW1JQ2hxSUQwZ1pXVWdMeUJOWVhSb0xtMWhlQ2hETG5kcFpIUm9MQ0JETG1obGFXZG9kQ2twTENCcUlEd2dNU0I4ZkNCVElEMDlQU0FoTUNrZ2FXWWdLSFI1Y0dWdlppQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MElEd2dJblVpSUNZbUlFTWdhVzV6ZEdGdVkyVnZaaUJJVkUxTVNXMWhaMlZGYkdWdFpXNTBJSHg4SUhSNWNHVnZaaUJJVkUxTVEyRnVkbUZ6Uld4bGJXVnVkQ0E4SUNKMUlpQW1KaUJESUdsdWMzUmhibU5sYjJZZ1NGUk5URU5oYm5aaGMwVnNaVzFsYm5RZ2ZId2dkSGx3Wlc5bUlFbHRZV2RsUW1sMGJXRndJRHdnSW5VaUlDWW1JRU1nYVc1emRHRnVZMlZ2WmlCSmJXRm5aVUpwZEcxaGNDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR1VnUFNCVElEOGdWM0lnT2lCTllYUm9MbVpzYjI5eUxDQk5aU0E5SUhSbEtHb2dLaUJETG5kcFpIUm9LU3dnY21VZ1BTQjBaU2hxSUNvZ1F5NW9aV2xuYUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0JmSUQwOVBTQjJiMmxrSURBZ0ppWWdLRjhnUFNCMktFMWxMQ0J5WlNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHVWdQU0JDSUQ4Z2RpaE5aU3dnY21VcElEb2dYenNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSbExuZHBaSFJvSUQwZ1RXVXNJR1JsTG1obGFXZG9kQ0E5SUhKbExDQmtaUzVuWlhSRGIyNTBaWGgwS0NJeVpDSXBMbVJ5WVhkSmJXRm5aU2hETENBd0xDQXdMQ0JOWlN3Z2NtVXBMQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRlJsZUhSMWNtVWdhR0Z6SUdKbFpXNGdjbVZ6YVhwbFpDQm1jbTl0SUNnaUlDc2dReTUzYVdSMGFDQXJJQ0o0SWlBcklFTXVhR1ZwWjJoMElDc2dJaWtnZEc4Z0tDSWdLeUJOWlNBcklDSjRJaUFySUhKbElDc2dJaWt1SWlrc0lHUmxPd29nSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z0ltUmhkR0VpSUdsdUlFTWdKaVlnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJKYldGblpTQnBiaUJFWVhSaFZHVjRkSFZ5WlNCcGN5QjBiMjhnWW1sbklDZ2lJQ3NnUXk1M2FXUjBhQ0FySUNKNElpQXJJRU11YUdWcFoyaDBJQ3NnSWlrdUlpa3NJRU03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRU03Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCNUtFTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiVzhvUXk1M2FXUjBhQ2tnSmlZZ2JXOG9ReTVvWldsbmFIUXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWWloREtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOGdQeUFoTVNBNklFTXVkM0poY0ZNZ0lUMDlJRWwwSUh4OElFTXVkM0poY0ZRZ0lUMDlJRWwwSUh4OElFTXViV2x1Um1sc2RHVnlJQ0U5UFNCd2RDQW1KaUJETG0xcGJrWnBiSFJsY2lBaFBUMGdiWFE3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCM0tFTXNJRk1wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnUXk1blpXNWxjbUYwWlUxcGNHMWhjSE1nSmlZZ1V5QW1KaUJETG0xcGJrWnBiSFJsY2lBaFBUMGdjSFFnSmlZZ1F5NXRhVzVHYVd4MFpYSWdJVDA5SUcxME93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdVaWhES1NCN0NpQWdJQ0FnSUNBZ2N6RXVaMlZ1WlhKaGRHVk5hWEJ0WVhBb1F5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJKS0VNc0lGTXNJRUlzSUdWbExDQnFJRDBnSVRFcElIc0tJQ0FnSUNBZ0lDQnBaaUFvYnlBOVBUMGdJVEVwSUhKbGRIVnliaUJUT3dvZ0lDQWdJQ0FnSUdsbUlDaERJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6TVZ0RFhTQWhQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdjekZiUTEwN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dRWFIwWlcxd2RDQjBieUIxYzJVZ2JtOXVMV1Y0YVhOMGFXNW5JRmRsWWtkTUlHbHVkR1Z5Ym1Gc0lHWnZjbTFoZENBbklpQXJJRU1nS3lBaUp5SXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2RHVWdQU0JUT3dvZ0lDQWdJQ0FnSUdsbUlDaFRJRDA5UFNCek1TNVNSVVFnSmlZZ0tFSWdQVDA5SUhNeExrWk1UMEZVSUNZbUlDaDBaU0E5SUhNeExsSXpNa1lwTENCQ0lEMDlQU0J6TVM1SVFVeEdYMFpNVDBGVUlDWW1JQ2gwWlNBOUlITXhMbEl4TmtZcExDQkNJRDA5UFNCek1TNVZUbE5KUjA1RlJGOUNXVlJGSUNZbUlDaDBaU0E5SUhNeExsSTRLU2tzSUZNZ1BUMDlJSE14TGxKRlJGOUpUbFJGUjBWU0lDWW1JQ2hDSUQwOVBTQnpNUzVWVGxOSlIwNUZSRjlDV1ZSRklDWW1JQ2gwWlNBOUlITXhMbEk0VlVrcExDQkNJRDA5UFNCek1TNVZUbE5KUjA1RlJGOVRTRTlTVkNBbUppQW9kR1VnUFNCek1TNVNNVFpWU1Nrc0lFSWdQVDA5SUhNeExsVk9VMGxIVGtWRVgwbE9WQ0FtSmlBb2RHVWdQU0J6TVM1U016SlZTU2tzSUVJZ1BUMDlJSE14TGtKWlZFVWdKaVlnS0hSbElEMGdjekV1VWpoSktTd2dRaUE5UFQwZ2N6RXVVMGhQVWxRZ0ppWWdLSFJsSUQwZ2N6RXVVakUyU1Nrc0lFSWdQVDA5SUhNeExrbE9WQ0FtSmlBb2RHVWdQU0J6TVM1U016SkpLU2tzSUZNZ1BUMDlJSE14TGxKSElDWW1JQ2hDSUQwOVBTQnpNUzVHVEU5QlZDQW1KaUFvZEdVZ1BTQnpNUzVTUnpNeVJpa3NJRUlnUFQwOUlITXhMa2hCVEVaZlJreFBRVlFnSmlZZ0tIUmxJRDBnY3pFdVVrY3hOa1lwTENCQ0lEMDlQU0J6TVM1VlRsTkpSMDVGUkY5Q1dWUkZJQ1ltSUNoMFpTQTlJSE14TGxKSE9Da3BMQ0JUSUQwOVBTQnpNUzVTUjBKQktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQk5aU0E5SUdvZ1B5QjZjaUE2SUZGbExtZGxkRlJ5WVc1elptVnlLR1ZsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdRaUE5UFQwZ2N6RXVSa3hQUVZRZ0ppWWdLSFJsSUQwZ2N6RXVVa2RDUVRNeVJpa3NJRUlnUFQwOUlITXhMa2hCVEVaZlJreFBRVlFnSmlZZ0tIUmxJRDBnY3pFdVVrZENRVEUyUmlrc0lFSWdQVDA5SUhNeExsVk9VMGxIVGtWRVgwSlpWRVVnSmlZZ0tIUmxJRDBnVFdVZ1BUMDlJRzUwSUQ4Z2N6RXVVMUpIUWpoZlFVeFFTRUU0SURvZ2N6RXVVa2RDUVRncExDQkNJRDA5UFNCek1TNVZUbE5KUjA1RlJGOVRTRTlTVkY4MFh6UmZORjgwSUNZbUlDaDBaU0E5SUhNeExsSkhRa0UwS1N3Z1FpQTlQVDBnY3pFdVZVNVRTVWRPUlVSZlUwaFBVbFJmTlY4MVh6VmZNU0FtSmlBb2RHVWdQU0J6TVM1U1IwSTFYMEV4S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoMFpTQTlQVDBnY3pFdVVqRTJSaUI4ZkNCMFpTQTlQVDBnY3pFdVVqTXlSaUI4ZkNCMFpTQTlQVDBnY3pFdVVrY3hOa1lnZkh3Z2RHVWdQVDA5SUhNeExsSkhNekpHSUh4OElIUmxJRDA5UFNCek1TNVNSMEpCTVRaR0lIeDhJSFJsSUQwOVBTQnpNUzVTUjBKQk16SkdLU0FtSmlCbExtZGxkQ2dpUlZoVVgyTnZiRzl5WDJKMVptWmxjbDltYkc5aGRDSXBMQ0IwWlRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFMG9ReXdnVXl3Z1Fpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjNLRU1zSUVJcElEMDlQU0FoTUNCOGZDQkRMbWx6Um5KaGJXVmlkV1ptWlhKVVpYaDBkWEpsSUNZbUlFTXViV2x1Um1sc2RHVnlJQ0U5UFNCd2RDQW1KaUJETG0xcGJrWnBiSFJsY2lBaFBUMGdiWFFnUHlCTllYUm9MbXh2WnpJb1RXRjBhQzV0WVhnb1V5NTNhV1IwYUN3Z1V5NW9aV2xuYUhRcEtTQXJJREVnT2lCRExtMXBjRzFoY0hNZ0lUMDlJSFp2YVdRZ01DQW1KaUJETG0xcGNHMWhjSE11YkdWdVozUm9JRDRnTUNBL0lFTXViV2x3YldGd2N5NXNaVzVuZEdnZ09pQkRMbWx6UTI5dGNISmxjM05sWkZSbGVIUjFjbVVnSmlZZ1FYSnlZWGt1YVhOQmNuSmhlU2hETG1sdFlXZGxLU0EvSUZNdWJXbHdiV0Z3Y3k1c1pXNW5kR2dnT2lBeE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdWQ2hES1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVNZ1BUMDlJSEIwSUh4OElFTWdQVDA5SUdadklIeDhJRU1nUFQwOUlFeHlJRDhnY3pFdVRrVkJVa1ZUVkNBNklITXhMa3hKVGtWQlVqc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRThvUXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JUSUQwZ1F5NTBZWEpuWlhRN0NpQWdJQ0FnSUNBZ1V5NXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnVHlrc0lDUW9VeWtzSUZNdWFYTldhV1JsYjFSbGVIUjFjbVVnSmlZZ2JTNWtaV3hsZEdVb1V5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJaS0VNcElIc0tJQ0FnSUNBZ0lDQnNaWFFnVXlBOUlFTXVkR0Z5WjJWME93b2dJQ0FnSUNBZ0lGTXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpWkdsemNHOXpaU0lzSUZrcExDQjZLRk1wT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z0pDaERLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElGTWdQU0J1TG1kbGRDaERLVHNLSUNBZ0lDQWdJQ0JwWmlBb1V5NWZYM2RsWW1kc1NXNXBkQ0E5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElFSWdQU0JETG5OdmRYSmpaU3dnWldVZ1BTQm5MbWRsZENoQ0tUc0tJQ0FnSUNBZ0lDQnBaaUFvWldVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHb2dQU0JsWlZ0VExsOWZZMkZqYUdWTFpYbGRPd29nSUNBZ0lDQWdJQ0FnSUNCcUxuVnpaV1JVYVcxbGN5MHRMQ0JxTG5WelpXUlVhVzFsY3lBOVBUMGdNQ0FtSmlCVktFTXBMQ0JQWW1wbFkzUXVhMlY1Y3lobFpTa3ViR1Z1WjNSb0lEMDlQU0F3SUNZbUlHY3VaR1ZzWlhSbEtFSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J1TG5KbGJXOTJaU2hES1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlGVW9ReWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQlRJRDBnYmk1blpYUW9ReWs3Q2lBZ0lDQWdJQ0FnY3pFdVpHVnNaWFJsVkdWNGRIVnlaU2hUTGw5ZmQyVmlaMnhVWlhoMGRYSmxLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1FpQTlJRU11YzI5MWNtTmxMQ0JsWlNBOUlHY3VaMlYwS0VJcE93b2dJQ0FnSUNBZ0lHUmxiR1YwWlNCbFpWdFRMbDlmWTJGamFHVkxaWGxkTENCaExtMWxiVzl5ZVM1MFpYaDBkWEpsY3kwdE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdlaWhES1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRk1nUFNCRExuUmxlSFIxY21Vc0lFSWdQU0J1TG1kbGRDaERLU3dnWldVZ1BTQnVMbWRsZENoVEtUc0tJQ0FnSUNBZ0lDQnBaaUFvWldVdVgxOTNaV0puYkZSbGVIUjFjbVVnSVQwOUlIWnZhV1FnTUNBbUppQW9jekV1WkdWc1pYUmxWR1Y0ZEhWeVpTaGxaUzVmWDNkbFltZHNWR1Y0ZEhWeVpTa3NJR0V1YldWdGIzSjVMblJsZUhSMWNtVnpMUzBwTENCRExtUmxjSFJvVkdWNGRIVnlaU0FtSmlCRExtUmxjSFJvVkdWNGRIVnlaUzVrYVhOd2IzTmxLQ2tzSUVNdWFYTlhaV0pIVEVOMVltVlNaVzVrWlhKVVlYSm5aWFFwSUdadmNpaHNaWFFnYWlBOUlEQTdJR29nUENBMk95QnFLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaENMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjbHRxWFNrcElHWnZjaWhzWlhRZ2RHVWdQU0F3T3lCMFpTQThJRUl1WDE5M1pXSm5iRVp5WVcxbFluVm1abVZ5VzJwZExteGxibWQwYURzZ2RHVXJLeWx6TVM1a1pXeGxkR1ZHY21GdFpXSjFabVpsY2loQ0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNsdHFYVnQwWlYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0JsYkhObElITXhMbVJsYkdWMFpVWnlZVzFsWW5WbVptVnlLRUl1WDE5M1pXSm5iRVp5WVcxbFluVm1abVZ5VzJwZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnUWk1ZlgzZGxZbWRzUkdWd2RHaGlkV1ptWlhJZ0ppWWdjekV1WkdWc1pYUmxVbVZ1WkdWeVluVm1abVZ5S0VJdVgxOTNaV0puYkVSbGNIUm9ZblZtWm1WeVcycGRLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0VJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeUtTa2dabTl5S0d4bGRDQnFJRDBnTURzZ2FpQThJRUl1WDE5M1pXSm5iRVp5WVcxbFluVm1abVZ5TG14bGJtZDBhRHNnYWlzcktYTXhMbVJsYkdWMFpVWnlZVzFsWW5WbVptVnlLRUl1WDE5M1pXSm5iRVp5WVcxbFluVm1abVZ5VzJwZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnpNUzVrWld4bGRHVkdjbUZ0WldKMVptWmxjaWhDTGw5ZmQyVmlaMnhHY21GdFpXSjFabVpsY2lrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoQ0xsOWZkMlZpWjJ4RVpYQjBhR0oxWm1abGNpQW1KaUJ6TVM1a1pXeGxkR1ZTWlc1a1pYSmlkV1ptWlhJb1FpNWZYM2RsWW1kc1JHVndkR2hpZFdabVpYSXBMQ0JDTGw5ZmQyVmlaMnhOZFd4MGFYTmhiWEJzWldSR2NtRnRaV0oxWm1abGNpQW1KaUJ6TVM1a1pXeGxkR1ZHY21GdFpXSjFabVpsY2loQ0xsOWZkMlZpWjJ4TmRXeDBhWE5oYlhCc1pXUkdjbUZ0WldKMVptWmxjaWtzSUVJdVgxOTNaV0puYkVOdmJHOXlVbVZ1WkdWeVluVm1abVZ5S1NCbWIzSW9iR1YwSUdvZ1BTQXdPeUJxSUR3Z1FpNWZYM2RsWW1kc1EyOXNiM0pTWlc1a1pYSmlkV1ptWlhJdWJHVnVaM1JvT3lCcUt5c3BRaTVmWDNkbFltZHNRMjlzYjNKU1pXNWtaWEppZFdabVpYSmJhbDBnSmlZZ2N6RXVaR1ZzWlhSbFVtVnVaR1Z5WW5WbVptVnlLRUl1WDE5M1pXSm5iRU52Ykc5eVVtVnVaR1Z5WW5WbVptVnlXMnBkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdRaTVmWDNkbFltZHNSR1Z3ZEdoU1pXNWtaWEppZFdabVpYSWdKaVlnY3pFdVpHVnNaWFJsVW1WdVpHVnlZblZtWm1WeUtFSXVYMTkzWldKbmJFUmxjSFJvVW1WdVpHVnlZblZtWm1WeUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0VNdWFYTlhaV0pIVEUxMWJIUnBjR3hsVW1WdVpHVnlWR0Z5WjJWMGN5a2dabTl5S0d4bGRDQnFJRDBnTUN3Z2RHVWdQU0JUTG14bGJtZDBhRHNnYWlBOElIUmxPeUJxS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RXVWdQU0J1TG1kbGRDaFRXMnBkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdUV1V1WDE5M1pXSm5iRlJsZUhSMWNtVWdKaVlnS0hNeExtUmxiR1YwWlZSbGVIUjFjbVVvVFdVdVgxOTNaV0puYkZSbGVIUjFjbVVwTENCaExtMWxiVzl5ZVM1MFpYaDBkWEpsY3kwdEtTd2diaTV5WlcxdmRtVW9VMXRxWFNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHNHVjbVZ0YjNabEtGTXBMQ0J1TG5KbGJXOTJaU2hES1RzS0lDQWdJSDBLSUNBZ0lHeGxkQ0J4SUQwZ01Ec0tJQ0FnSUdaMWJtTjBhVzl1SUVnb0tTQjdDaUFnSUNBZ0lDQWdjU0E5SURBN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnVaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdReUE5SUhFN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVNZ1BqMGdZeUFtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVkdWNGRIVnlaWE02SUZSeWVXbHVaeUIwYnlCMWMyVWdJaUFySUVNZ0t5QWlJSFJsZUhSMWNtVWdkVzVwZEhNZ2QyaHBiR1VnZEdocGN5QkhVRlVnYzNWd2NHOXlkSE1nYjI1c2VTQWlJQ3NnWXlrc0lIRWdLejBnTVN3Z1F6c0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRmNvUXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JUSUQwZ1cxMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlGTXVjSFZ6YUNoRExuZHlZWEJUS1N3Z1V5NXdkWE5vS0VNdWQzSmhjRlFwTENCVExuQjFjMmdvUXk1M2NtRndVaUI4ZkNBd0tTd2dVeTV3ZFhOb0tFTXViV0ZuUm1sc2RHVnlLU3dnVXk1d2RYTm9LRU11YldsdVJtbHNkR1Z5S1N3Z1V5NXdkWE5vS0VNdVlXNXBjMjkwY205d2VTa3NJRk11Y0hWemFDaERMbWx1ZEdWeWJtRnNSbTl5YldGMEtTd2dVeTV3ZFhOb0tFTXVabTl5YldGMEtTd2dVeTV3ZFhOb0tFTXVkSGx3WlNrc0lGTXVjSFZ6YUNoRExtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lrc0lGTXVjSFZ6YUNoRExuQnlaVzExYkhScGNHeDVRV3h3YUdFcExDQlRMbkIxYzJnb1F5NW1iR2x3V1Nrc0lGTXVjSFZ6YUNoRExuVnVjR0ZqYTBGc2FXZHViV1Z1ZENrc0lGTXVjSFZ6YUNoRExtTnZiRzl5VTNCaFkyVXBMQ0JUTG1wdmFXNG9LVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVzb1F5d2dVeWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQkNJRDBnYmk1blpYUW9ReWs3Q2lBZ0lDQWdJQ0FnYVdZZ0tFTXVhWE5XYVdSbGIxUmxlSFIxY21VZ0ppWWdjV1VvUXlrc0lFTXVhWE5TWlc1a1pYSlVZWEpuWlhSVVpYaDBkWEpsSUQwOVBTQWhNU0FtSmlCRExuWmxjbk5wYjI0Z1BpQXdJQ1ltSUVJdVgxOTJaWEp6YVc5dUlDRTlQU0JETG5abGNuTnBiMjRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdWbElEMGdReTVwYldGblpUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVmxJRDA5UFNCdWRXeHNLU0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRlJsZUhSMWNtVWdiV0Z5YTJWa0lHWnZjaUIxY0dSaGRHVWdZblYwSUc1dklHbHRZV2RsSUdSaGRHRWdabTkxYm1RdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dWbExtTnZiWEJzWlhSbElEMDlQU0FoTVNrZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCVVpYaDBkWEpsSUcxaGNtdGxaQ0JtYjNJZ2RYQmtZWFJsSUdKMWRDQnBiV0ZuWlNCcGN5QnBibU52YlhCc1pYUmxJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnV1dVb1Fpd2dReXdnVXlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkQzVpYVc1a1ZHVjRkSFZ5WlNoek1TNVVSVmhVVlZKRlh6SkVMQ0JDTGw5ZmQyVmlaMnhVWlhoMGRYSmxMQ0J6TVM1VVJWaFVWVkpGTUNBcklGTXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnUkNoRExDQlRLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElFSWdQU0J1TG1kbGRDaERLVHNLSUNBZ0lDQWdJQ0JwWmlBb1F5NTJaWEp6YVc5dUlENGdNQ0FtSmlCQ0xsOWZkbVZ5YzJsdmJpQWhQVDBnUXk1MlpYSnphVzl1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRmxsS0VJc0lFTXNJRk1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUXVZbWx1WkZSbGVIUjFjbVVvY3pFdVZFVllWRlZTUlY4eVJGOUJVbEpCV1N3Z1FpNWZYM2RsWW1kc1ZHVjRkSFZ5WlN3Z2N6RXVWRVZZVkZWU1JUQWdLeUJUS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFY29ReXdnVXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JDSUQwZ2JpNW5aWFFvUXlrN0NpQWdJQ0FnSUNBZ2FXWWdLRU11ZG1WeWMybHZiaUErSURBZ0ppWWdRaTVmWDNabGNuTnBiMjRnSVQwOUlFTXVkbVZ5YzJsdmJpa2dld29nSUNBZ0lDQWdJQ0FnSUNCWlpTaENMQ0JETENCVEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwTG1KcGJtUlVaWGgwZFhKbEtITXhMbFJGV0ZSVlVrVmZNMFFzSUVJdVgxOTNaV0puYkZSbGVIUjFjbVVzSUhNeExsUkZXRlJWVWtVd0lDc2dVeWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCb1pTaERMQ0JUS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRUlnUFNCdUxtZGxkQ2hES1RzS0lDQWdJQ0FnSUNCcFppQW9ReTUyWlhKemFXOXVJRDRnTUNBbUppQkNMbDlmZG1WeWMybHZiaUFoUFQwZ1F5NTJaWEp6YVc5dUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsMEtFSXNJRU1zSUZNcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFF1WW1sdVpGUmxlSFIxY21Vb2N6RXVWRVZZVkZWU1JWOURWVUpGWDAxQlVDd2dRaTVmWDNkbFltZHNWR1Y0ZEhWeVpTd2djekV1VkVWWVZGVlNSVEFnS3lCVEtUc0tJQ0FnSUgwS0lDQWdJR3hsZENCbVpTQTlJSHNLSUNBZ0lDQWdJQ0JiUkhKZE9pQnpNUzVTUlZCRlFWUXNDaUFnSUNBZ0lDQWdXMGwwWFRvZ2N6RXVRMHhCVFZCZlZFOWZSVVJIUlN3S0lDQWdJQ0FnSUNCYlRuSmRPaUJ6TVM1TlNWSlNUMUpGUkY5U1JWQkZRVlFLSUNBZ0lIMHNJRjlsSUQwZ2V3b2dJQ0FnSUNBZ0lGdHdkRjA2SUhNeExrNUZRVkpGVTFRc0NpQWdJQ0FnSUNBZ1cyWnZYVG9nY3pFdVRrVkJVa1ZUVkY5TlNWQk5RVkJmVGtWQlVrVlRWQ3dLSUNBZ0lDQWdJQ0JiVEhKZE9pQnpNUzVPUlVGU1JWTlVYMDFKVUUxQlVGOU1TVTVGUVZJc0NpQWdJQ0FnSUNBZ1cyMTBYVG9nY3pFdVRFbE9SVUZTTEFvZ0lDQWdJQ0FnSUZ0MVpGMDZJSE14TGt4SlRrVkJVbDlOU1ZCTlFWQmZUa1ZCVWtWVFZDd0tJQ0FnSUNBZ0lDQmJiR2xkT2lCek1TNU1TVTVGUVZKZlRVbFFUVUZRWDB4SlRrVkJVZ29nSUNBZ2ZTd2dkMlVnUFNCN0NpQWdJQ0FnSUNBZ1cxVm1YVG9nY3pFdVRrVldSVklzQ2lBZ0lDQWdJQ0FnVzFabVhUb2djekV1UVV4WFFWbFRMQW9nSUNBZ0lDQWdJRnRFWmwwNklITXhMa3hGVTFNc0NpQWdJQ0FnSUNBZ1cwOW1YVG9nY3pFdVRFVlJWVUZNTEFvZ0lDQWdJQ0FnSUZ0T1psMDZJSE14TGtWUlZVRk1MQW9nSUNBZ0lDQWdJRnQ2WmwwNklITXhMa2RGVVZWQlRDd0tJQ0FnSUNBZ0lDQmJSbVpkT2lCek1TNUhVa1ZCVkVWU0xBb2dJQ0FnSUNBZ0lGdENabDA2SUhNeExrNVBWRVZSVlVGTUNpQWdJQ0I5T3dvZ0lDQWdablZ1WTNScGIyNGdSV1VvUXl3Z1V5d2dRaWtnZXdvZ0lDQWdJQ0FnSUdsbUlDaENJRDhnS0hNeExuUmxlRkJoY21GdFpYUmxjbWtvUXl3Z2N6RXVWRVZZVkZWU1JWOVhVa0ZRWDFNc0lHWmxXMU11ZDNKaGNGTmRLU3dnY3pFdWRHVjRVR0Z5WVcxbGRHVnlhU2hETENCek1TNVVSVmhVVlZKRlgxZFNRVkJmVkN3Z1ptVmJVeTUzY21Gd1ZGMHBMQ0FvUXlBOVBUMGdjekV1VkVWWVZGVlNSVjh6UkNCOGZDQkRJRDA5UFNCek1TNVVSVmhVVlZKRlh6SkVYMEZTVWtGWktTQW1KaUJ6TVM1MFpYaFFZWEpoYldWMFpYSnBLRU1zSUhNeExsUkZXRlJWVWtWZlYxSkJVRjlTTENCbVpWdFRMbmR5WVhCU1hTa3NJSE14TG5SbGVGQmhjbUZ0WlhSbGNta29ReXdnY3pFdVZFVllWRlZTUlY5TlFVZGZSa2xNVkVWU0xDQmZaVnRUTG0xaFowWnBiSFJsY2wwcExDQnpNUzUwWlhoUVlYSmhiV1YwWlhKcEtFTXNJSE14TGxSRldGUlZVa1ZmVFVsT1gwWkpURlJGVWl3Z1gyVmJVeTV0YVc1R2FXeDBaWEpkS1NrZ09pQW9jekV1ZEdWNFVHRnlZVzFsZEdWeWFTaERMQ0J6TVM1VVJWaFVWVkpGWDFkU1FWQmZVeXdnY3pFdVEweEJUVkJmVkU5ZlJVUkhSU2tzSUhNeExuUmxlRkJoY21GdFpYUmxjbWtvUXl3Z2N6RXVWRVZZVkZWU1JWOVhVa0ZRWDFRc0lITXhMa05NUVUxUVgxUlBYMFZFUjBVcExDQW9ReUE5UFQwZ2N6RXVWRVZZVkZWU1JWOHpSQ0I4ZkNCRElEMDlQU0J6TVM1VVJWaFVWVkpGWHpKRVgwRlNVa0ZaS1NBbUppQnpNUzUwWlhoUVlYSmhiV1YwWlhKcEtFTXNJSE14TGxSRldGUlZVa1ZmVjFKQlVGOVNMQ0J6TVM1RFRFRk5VRjlVVDE5RlJFZEZLU3dnS0ZNdWQzSmhjRk1nSVQwOUlFbDBJSHg4SUZNdWQzSmhjRlFnSVQwOUlFbDBLU0FtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZSbGVIUjFjbVVnYVhNZ2JtOTBJSEJ2ZDJWeUlHOW1JSFIzYnk0Z1ZHVjRkSFZ5WlM1M2NtRndVeUJoYm1RZ1ZHVjRkSFZ5WlM1M2NtRndWQ0J6YUc5MWJHUWdZbVVnYzJWMElIUnZJRlJJVWtWRkxrTnNZVzF3Vkc5RlpHZGxWM0poY0hCcGJtY3VJaWtzSUhNeExuUmxlRkJoY21GdFpYUmxjbWtvUXl3Z2N6RXVWRVZZVkZWU1JWOU5RVWRmUmtsTVZFVlNMQ0JVS0ZNdWJXRm5SbWxzZEdWeUtTa3NJSE14TG5SbGVGQmhjbUZ0WlhSbGNta29ReXdnY3pFdVZFVllWRlZTUlY5TlNVNWZSa2xNVkVWU0xDQlVLRk11YldsdVJtbHNkR1Z5S1Nrc0lGTXViV2x1Um1sc2RHVnlJQ0U5UFNCd2RDQW1KaUJUTG0xcGJrWnBiSFJsY2lBaFBUMGdiWFFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCVVpYaDBkWEpsSUdseklHNXZkQ0J3YjNkbGNpQnZaaUIwZDI4dUlGUmxlSFIxY21VdWJXbHVSbWxzZEdWeUlITm9iM1ZzWkNCaVpTQnpaWFFnZEc4Z1ZFaFNSVVV1VG1WaGNtVnpkRVpwYkhSbGNpQnZjaUJVU0ZKRlJTNU1hVzVsWVhKR2FXeDBaWEl1SWlrcExDQlRMbU52YlhCaGNtVkdkVzVqZEdsdmJpQW1KaUFvY3pFdWRHVjRVR0Z5WVcxbGRHVnlhU2hETENCek1TNVVSVmhVVlZKRlgwTlBUVkJCVWtWZlRVOUVSU3dnY3pFdVEwOU5VRUZTUlY5U1JVWmZWRTlmVkVWWVZGVlNSU2tzSUhNeExuUmxlRkJoY21GdFpYUmxjbWtvUXl3Z2N6RXVWRVZZVkZWU1JWOURUMDFRUVZKRlgwWlZUa01zSUhkbFcxTXVZMjl0Y0dGeVpVWjFibU4wYVc5dVhTa3BMQ0JsTG1oaGN5Z2lSVmhVWDNSbGVIUjFjbVZmWm1sc2RHVnlYMkZ1YVhOdmRISnZjR2xqSWlrZ1BUMDlJQ0V3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbFpTQTlJR1V1WjJWMEtDSkZXRlJmZEdWNGRIVnlaVjltYVd4MFpYSmZZVzVwYzI5MGNtOXdhV01pS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0ZNdWJXRm5SbWxzZEdWeUlEMDlQU0J3ZENCOGZDQlRMbTFwYmtacGJIUmxjaUFoUFQwZ1RISWdKaVlnVXk1dGFXNUdhV3gwWlhJZ0lUMDlJR3hwSUh4OElGTXVkSGx3WlNBOVBUMGdlRzRnSmlZZ1pTNW9ZWE1vSWs5RlUxOTBaWGgwZFhKbFgyWnNiMkYwWDJ4cGJtVmhjaUlwSUQwOVBTQWhNU0I4ZkNCdklEMDlQU0FoTVNBbUppQlRMblI1Y0dVZ1BUMDlJRlJ6SUNZbUlHVXVhR0Z6S0NKUFJWTmZkR1Y0ZEhWeVpWOW9ZV3htWDJac2IyRjBYMnhwYm1WaGNpSXBJRDA5UFNBaE1Ta2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FvVXk1aGJtbHpiM1J5YjNCNUlENGdNU0I4ZkNCdUxtZGxkQ2hUS1M1ZlgyTjFjbkpsYm5SQmJtbHpiM1J5YjNCNUtTQW1KaUFvY3pFdWRHVjRVR0Z5WVcxbGRHVnlaaWhETENCbFpTNVVSVmhVVlZKRlgwMUJXRjlCVGtsVFQxUlNUMUJaWDBWWVZDd2dUV0YwYUM1dGFXNG9VeTVoYm1semIzUnliM0I1TENCcExtZGxkRTFoZUVGdWFYTnZkSEp2Y0hrb0tTa3BMQ0J1TG1kbGRDaFRLUzVmWDJOMWNuSmxiblJCYm1semIzUnliM0I1SUQwZ1V5NWhibWx6YjNSeWIzQjVLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCVVpTaERMQ0JUS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRUlnUFNBaE1Uc0tJQ0FnSUNBZ0lDQkRMbDlmZDJWaVoyeEpibWwwSUQwOVBTQjJiMmxrSURBZ0ppWWdLRU11WDE5M1pXSm5iRWx1YVhRZ1BTQWhNQ3dnVXk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z1R5a3BPd29nSUNBZ0lDQWdJR3hsZENCbFpTQTlJRk11YzI5MWNtTmxMQ0JxSUQwZ1p5NW5aWFFvWldVcE93b2dJQ0FnSUNBZ0lHb2dQVDA5SUhadmFXUWdNQ0FtSmlBb2FpQTlJSHQ5TENCbkxuTmxkQ2hsWlN3Z2Fpa3BPd29nSUNBZ0lDQWdJR3hsZENCMFpTQTlJRmNvVXlrN0NpQWdJQ0FnSUNBZ2FXWWdLSFJsSUNFOVBTQkRMbDlmWTJGamFHVkxaWGtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhbHQwWlYwZ1BUMDlJSFp2YVdRZ01DQW1KaUFvYWx0MFpWMGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhoMGRYSmxPaUJ6TVM1amNtVmhkR1ZVWlhoMGRYSmxLQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWa1ZHbHRaWE02SURBS0lDQWdJQ0FnSUNBZ0lDQWdmU3dnWVM1dFpXMXZjbmt1ZEdWNGRIVnlaWE1yS3l3Z1FpQTlJQ0V3S1N3Z2FsdDBaVjB1ZFhObFpGUnBiV1Z6S3lzN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCTlpTQTlJR3BiUXk1ZlgyTmhZMmhsUzJWNVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnVFdVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYWx0RExsOWZZMkZqYUdWTFpYbGRMblZ6WldSVWFXMWxjeTB0TENCTlpTNTFjMlZrVkdsdFpYTWdQVDA5SURBZ0ppWWdWU2hUS1Nrc0lFTXVYMTlqWVdOb1pVdGxlU0E5SUhSbExDQkRMbDlmZDJWaVoyeFVaWGgwZFhKbElEMGdhbHQwWlYwdWRHVjRkSFZ5WlRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVJN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlpaU2hETENCVExDQkNLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVmxJRDBnY3pFdVZFVllWRlZTUlY4eVJEc0tJQ0FnSUNBZ0lDQW9VeTVwYzBSaGRHRkJjbkpoZVZSbGVIUjFjbVVnZkh3Z1V5NXBjME52YlhCeVpYTnpaV1JCY25KaGVWUmxlSFIxY21VcElDWW1JQ2hsWlNBOUlITXhMbFJGV0ZSVlVrVmZNa1JmUVZKU1FWa3BMQ0JUTG1selJHRjBZVE5FVkdWNGRIVnlaU0FtSmlBb1pXVWdQU0J6TVM1VVJWaFVWVkpGWHpORUtUc0tJQ0FnSUNBZ0lDQnNaWFFnYWlBOUlGUmxLRU1zSUZNcExDQjBaU0E5SUZNdWMyOTFjbU5sT3dvZ0lDQWdJQ0FnSUhRdVltbHVaRlJsZUhSMWNtVW9aV1VzSUVNdVgxOTNaV0puYkZSbGVIUjFjbVVzSUhNeExsUkZXRlJWVWtVd0lDc2dRaWs3Q2lBZ0lDQWdJQ0FnYkdWMElFMWxJRDBnYmk1blpYUW9kR1VwT3dvZ0lDQWdJQ0FnSUdsbUlDaDBaUzUyWlhKemFXOXVJQ0U5UFNCTlpTNWZYM1psY25OcGIyNGdmSHdnYWlBOVBUMGdJVEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkQzVoWTNScGRtVlVaWGgwZFhKbEtITXhMbFJGV0ZSVlVrVXdJQ3NnUWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeVpTQTlJRkZsTG1kbGRGQnlhVzFoY21sbGN5aFJaUzUzYjNKcmFXNW5RMjlzYjNKVGNHRmpaU2tzSUdSbElEMGdVeTVqYjJ4dmNsTndZV05sSUQwOVBTQllkQ0EvSUc1MWJHd2dPaUJSWlM1blpYUlFjbWx0WVhKcFpYTW9VeTVqYjJ4dmNsTndZV05sS1N3Z1RHVWdQU0JUTG1OdmJHOXlVM0JoWTJVZ1BUMDlJRmgwSUh4OElISmxJRDA5UFNCa1pTQS9JSE14TGs1UFRrVWdPaUJ6TVM1Q1VrOVhVMFZTWDBSRlJrRlZURlJmVjBWQ1IwdzdDaUFnSUNBZ0lDQWdJQ0FnSUhNeExuQnBlR1ZzVTNSdmNtVnBLSE14TGxWT1VFRkRTMTlHVEVsUVgxbGZWMFZDUjB3c0lGTXVabXhwY0ZrcExDQnpNUzV3YVhobGJGTjBiM0psYVNoek1TNVZUbEJCUTB0ZlVGSkZUVlZNVkVsUVRGbGZRVXhRU0VGZlYwVkNSMHdzSUZNdWNISmxiWFZzZEdsd2JIbEJiSEJvWVNrc0lITXhMbkJwZUdWc1UzUnZjbVZwS0hNeExsVk9VRUZEUzE5QlRFbEhUazFGVGxRc0lGTXVkVzV3WVdOclFXeHBaMjV0Wlc1MEtTd2djekV1Y0dsNFpXeFRkRzl5Wldrb2N6RXVWVTVRUVVOTFgwTlBURTlTVTFCQlEwVmZRMDlPVmtWU1UwbFBUbDlYUlVKSFRDd2dUR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnV21VZ1BTQmlLRk1wSUNZbUlIa29VeTVwYldGblpTa2dQVDA5SUNFeExDQnpaU0E5SUhnb1V5NXBiV0ZuWlN3Z1dtVXNJQ0V4TENCb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJVZ1BTQnlkQ2hUTENCelpTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQWtaU0E5SUhrb2MyVXBJSHg4SUc4c0lFOWxJRDBnY2k1amIyNTJaWEowS0ZNdVptOXliV0YwTENCVExtTnZiRzl5VTNCaFkyVXBMQ0JKWlNBOUlISXVZMjl1ZG1WeWRDaFRMblI1Y0dVcExDQlNaU0E5SUVrb1V5NXBiblJsY201aGJFWnZjbTFoZEN3Z1QyVXNJRWxsTENCVExtTnZiRzl5VTNCaFkyVXNJRk11YVhOV2FXUmxiMVJsZUhSMWNtVXBPd29nSUNBZ0lDQWdJQ0FnSUNCRlpTaGxaU3dnVXl3Z0pHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVQ3dnWTJVZ1BTQlRMbTFwY0cxaGNITXNJR0ZsSUQwZ2J5QW1KaUJUTG1selZtbGtaVzlVWlhoMGRYSmxJQ0U5UFNBaE1Dd2daMlVnUFNCTlpTNWZYM1psY25OcGIyNGdQVDA5SUhadmFXUWdNQ0I4ZkNCcUlEMDlQU0FoTUN3Z2RXVWdQU0JOS0ZNc0lITmxMQ0FrWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoVExtbHpSR1Z3ZEdoVVpYaDBkWEpsS1NCU1pTQTlJSE14TGtSRlVGUklYME5QVFZCUFRrVk9WQ3dnYnlBL0lGTXVkSGx3WlNBOVBUMGdlRzRnUHlCU1pTQTlJSE14TGtSRlVGUklYME5QVFZCUFRrVk9WRE15UmlBNklGTXVkSGx3WlNBOVBUMGdURzRnUHlCU1pTQTlJSE14TGtSRlVGUklYME5QVFZCUFRrVk9WREkwSURvZ1V5NTBlWEJsSUQwOVBTQnBhU0EvSUZKbElEMGdjekV1UkVWUVZFZ3lORjlUVkVWT1EwbE1PQ0E2SUZKbElEMGdjekV1UkVWUVZFaGZRMDlOVUU5T1JVNVVNVFlnT2lCVExuUjVjR1VnUFQwOUlIaHVJQ1ltSUdOdmJuTnZiR1V1WlhKeWIzSW9JbGRsWWtkTVVtVnVaR1Z5WlhJNklFWnNiMkYwYVc1bklIQnZhVzUwSUdSbGNIUm9JSFJsZUhSMWNtVWdjbVZ4ZFdseVpYTWdWMlZpUjB3eUxpSXBMQ0JUTG1admNtMWhkQ0E5UFQwZ2Mya2dKaVlnVW1VZ1BUMDlJSE14TGtSRlVGUklYME5QVFZCUFRrVk9WQ0FtSmlCVExuUjVjR1VnSVQwOUlGZGpJQ1ltSUZNdWRIbHdaU0FoUFQwZ1RHNGdKaVlnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nVlhObElGVnVjMmxuYm1Wa1UyaHZjblJVZVhCbElHOXlJRlZ1YzJsbmJtVmtTVzUwVkhsd1pTQm1iM0lnUkdWd2RHaEdiM0p0WVhRZ1JHVndkR2hVWlhoMGRYSmxMaUlwTENCVExuUjVjR1VnUFNCTWJpd2dTV1VnUFNCeUxtTnZiblpsY25Rb1V5NTBlWEJsS1Nrc0lGTXVabTl5YldGMElEMDlQU0JaYVNBbUppQlNaU0E5UFQwZ2N6RXVSRVZRVkVoZlEwOU5VRTlPUlU1VUlDWW1JQ2hTWlNBOUlITXhMa1JGVUZSSVgxTlVSVTVEU1V3c0lGTXVkSGx3WlNBaFBUMGdhV2tnSmlZZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1ZYTmxJRlZ1YzJsbmJtVmtTVzUwTWpRNFZIbHdaU0JtYjNJZ1JHVndkR2hUZEdWdVkybHNSbTl5YldGMElFUmxjSFJvVkdWNGRIVnlaUzRpS1N3Z1V5NTBlWEJsSUQwZ2FXa3NJRWxsSUQwZ2NpNWpiMjUyWlhKMEtGTXVkSGx3WlNrcEtTd2daMlVnSmlZZ0tHRmxJRDhnZEM1MFpYaFRkRzl5WVdkbE1rUW9jekV1VkVWWVZGVlNSVjh5UkN3Z01Td2dVbVVzSUhObExuZHBaSFJvTENCelpTNW9aV2xuYUhRcElEb2dkQzUwWlhoSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZk1rUXNJREFzSUZKbExDQnpaUzUzYVdSMGFDd2djMlV1YUdWcFoyaDBMQ0F3TENCUFpTd2dTV1VzSUc1MWJHd3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1V5NXBjMFJoZEdGVVpYaDBkWEpsS1NCcFppQW9ZMlV1YkdWdVozUm9JRDRnTUNBbUppQWtaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdVZ0ppWWdaMlVnSmlZZ2RDNTBaWGhUZEc5eVlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dkV1VzSUZKbExDQmpaVnN3WFM1M2FXUjBhQ3dnWTJWYk1GMHVhR1ZwWjJoMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1VTQTlJREFzSUdKbElEMGdZMlV1YkdWdVozUm9PeUJSSUR3Z1ltVTdJRkVyS3lsUUlEMGdZMlZiVVYwc0lHRmxJRDhnZEM1MFpYaFRkV0pKYldGblpUSkVLSE14TGxSRldGUlZVa1ZmTWtRc0lGRXNJREFzSURBc0lGQXVkMmxrZEdnc0lGQXVhR1ZwWjJoMExDQlBaU3dnU1dVc0lGQXVaR0YwWVNrZ09pQjBMblJsZUVsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dVU3dnVW1Vc0lGQXVkMmxrZEdnc0lGQXVhR1ZwWjJoMExDQXdMQ0JQWlN3Z1NXVXNJRkF1WkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJQ0V4T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1lXVWdQeUFvWjJVZ0ppWWdkQzUwWlhoVGRHOXlZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnZFdVc0lGSmxMQ0J6WlM1M2FXUjBhQ3dnYzJVdWFHVnBaMmgwS1N3Z2RDNTBaWGhUZFdKSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZk1rUXNJREFzSURBc0lEQXNJSE5sTG5kcFpIUm9MQ0J6WlM1b1pXbG5hSFFzSUU5bExDQkpaU3dnYzJVdVpHRjBZU2twSURvZ2RDNTBaWGhKYldGblpUSkVLSE14TGxSRldGUlZVa1ZmTWtRc0lEQXNJRkpsTENCelpTNTNhV1IwYUN3Z2MyVXVhR1ZwWjJoMExDQXdMQ0JQWlN3Z1NXVXNJSE5sTG1SaGRHRXBPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoVExtbHpRMjl0Y0hKbGMzTmxaRlJsZUhSMWNtVXBJR2xtSUNoVExtbHpRMjl0Y0hKbGMzTmxaRUZ5Y21GNVZHVjRkSFZ5WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXVWdKaVlnWjJVZ0ppWWdkQzUwWlhoVGRHOXlZV2RsTTBRb2N6RXVWRVZZVkZWU1JWOHlSRjlCVWxKQldTd2dkV1VzSUZKbExDQmpaVnN3WFM1M2FXUjBhQ3dnWTJWYk1GMHVhR1ZwWjJoMExDQnpaUzVrWlhCMGFDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGRWdQU0F3TENCaVpTQTlJR05sTG14bGJtZDBhRHNnVVNBOElHSmxPeUJSS3lzcFVDQTlJR05sVzFGZExDQlRMbVp2Y20xaGRDQWhQVDBnVjNRZ1B5QlBaU0FoUFQwZ2JuVnNiQ0EvSUdGbElEOGdkQzVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVelJDaHpNUzVVUlZoVVZWSkZYekpFWDBGU1VrRlpMQ0JSTENBd0xDQXdMQ0F3TENCUUxuZHBaSFJvTENCUUxtaGxhV2RvZEN3Z2MyVXVaR1Z3ZEdnc0lFOWxMQ0JRTG1SaGRHRXNJREFzSURBcElEb2dkQzVqYjIxd2NtVnpjMlZrVkdWNFNXMWhaMlV6UkNoek1TNVVSVmhVVlZKRlh6SkVYMEZTVWtGWkxDQlJMQ0JTWlN3Z1VDNTNhV1IwYUN3Z1VDNW9aV2xuYUhRc0lITmxMbVJsY0hSb0xDQXdMQ0JRTG1SaGRHRXNJREFzSURBcElEb2dZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQkJkSFJsYlhCMElIUnZJR3h2WVdRZ2RXNXpkWEJ3YjNKMFpXUWdZMjl0Y0hKbGMzTmxaQ0IwWlhoMGRYSmxJR1p2Y20xaGRDQnBiaUF1ZFhCc2IyRmtWR1Y0ZEhWeVpTZ3BJaWtnT2lCaFpTQS9JSFF1ZEdWNFUzVmlTVzFoWjJVelJDaHpNUzVVUlZoVVZWSkZYekpFWDBGU1VrRlpMQ0JSTENBd0xDQXdMQ0F3TENCUUxuZHBaSFJvTENCUUxtaGxhV2RvZEN3Z2MyVXVaR1Z3ZEdnc0lFOWxMQ0JKWlN3Z1VDNWtZWFJoS1NBNklIUXVkR1Y0U1cxaFoyVXpSQ2h6TVM1VVJWaFVWVkpGWHpKRVgwRlNVa0ZaTENCUkxDQlNaU3dnVUM1M2FXUjBhQ3dnVUM1b1pXbG5hSFFzSUhObExtUmxjSFJvTENBd0xDQlBaU3dnU1dVc0lGQXVaR0YwWVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaU0FtSmlCblpTQW1KaUIwTG5SbGVGTjBiM0poWjJVeVJDaHpNUzVVUlZoVVZWSkZYekpFTENCMVpTd2dVbVVzSUdObFd6QmRMbmRwWkhSb0xDQmpaVnN3WFM1b1pXbG5hSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JSSUQwZ01Dd2dZbVVnUFNCalpTNXNaVzVuZEdnN0lGRWdQQ0JpWlRzZ1VTc3JLVkFnUFNCalpWdFJYU3dnVXk1bWIzSnRZWFFnSVQwOUlGZDBJRDhnVDJVZ0lUMDlJRzUxYkd3Z1B5QmhaU0EvSUhRdVkyOXRjSEpsYzNObFpGUmxlRk4xWWtsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dVU3dnTUN3Z01Dd2dVQzUzYVdSMGFDd2dVQzVvWldsbmFIUXNJRTlsTENCUUxtUmhkR0VwSURvZ2RDNWpiMjF3Y21WemMyVmtWR1Y0U1cxaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWHpKRUxDQlJMQ0JTWlN3Z1VDNTNhV1IwYUN3Z1VDNW9aV2xuYUhRc0lEQXNJRkF1WkdGMFlTa2dPaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRUYwZEdWdGNIUWdkRzhnYkc5aFpDQjFibk4xY0hCdmNuUmxaQ0JqYjIxd2NtVnpjMlZrSUhSbGVIUjFjbVVnWm05eWJXRjBJR2x1SUM1MWNHeHZZV1JVWlhoMGRYSmxLQ2tpS1NBNklHRmxJRDhnZEM1MFpYaFRkV0pKYldGblpUSkVLSE14TGxSRldGUlZVa1ZmTWtRc0lGRXNJREFzSURBc0lGQXVkMmxrZEdnc0lGQXVhR1ZwWjJoMExDQlBaU3dnU1dVc0lGQXVaR0YwWVNrZ09pQjBMblJsZUVsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dVU3dnVW1Vc0lGQXVkMmxrZEdnc0lGQXVhR1ZwWjJoMExDQXdMQ0JQWlN3Z1NXVXNJRkF1WkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9VeTVwYzBSaGRHRkJjbkpoZVZSbGVIUjFjbVVwSUdGbElEOGdLR2RsSUNZbUlIUXVkR1Y0VTNSdmNtRm5aVE5FS0hNeExsUkZXRlJWVWtWZk1rUmZRVkpTUVZrc0lIVmxMQ0JTWlN3Z2MyVXVkMmxrZEdnc0lITmxMbWhsYVdkb2RDd2djMlV1WkdWd2RHZ3BMQ0IwTG5SbGVGTjFZa2x0WVdkbE0wUW9jekV1VkVWWVZGVlNSVjh5UkY5QlVsSkJXU3dnTUN3Z01Dd2dNQ3dnTUN3Z2MyVXVkMmxrZEdnc0lITmxMbWhsYVdkb2RDd2djMlV1WkdWd2RHZ3NJRTlsTENCSlpTd2djMlV1WkdGMFlTa3BJRG9nZEM1MFpYaEpiV0ZuWlRORUtITXhMbFJGV0ZSVlVrVmZNa1JmUVZKU1FWa3NJREFzSUZKbExDQnpaUzUzYVdSMGFDd2djMlV1YUdWcFoyaDBMQ0J6WlM1a1pYQjBhQ3dnTUN3Z1QyVXNJRWxsTENCelpTNWtZWFJoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9VeTVwYzBSaGRHRXpSRlJsZUhSMWNtVXBJR0ZsSUQ4Z0tHZGxJQ1ltSUhRdWRHVjRVM1J2Y21GblpUTkVLSE14TGxSRldGUlZVa1ZmTTBRc0lIVmxMQ0JTWlN3Z2MyVXVkMmxrZEdnc0lITmxMbWhsYVdkb2RDd2djMlV1WkdWd2RHZ3BMQ0IwTG5SbGVGTjFZa2x0WVdkbE0wUW9jekV1VkVWWVZGVlNSVjh6UkN3Z01Dd2dNQ3dnTUN3Z01Dd2djMlV1ZDJsa2RHZ3NJSE5sTG1obGFXZG9kQ3dnYzJVdVpHVndkR2dzSUU5bExDQkpaU3dnYzJVdVpHRjBZU2twSURvZ2RDNTBaWGhKYldGblpUTkVLSE14TGxSRldGUlZVa1ZmTTBRc0lEQXNJRkpsTENCelpTNTNhV1IwYUN3Z2MyVXVhR1ZwWjJoMExDQnpaUzVrWlhCMGFDd2dNQ3dnVDJVc0lFbGxMQ0J6WlM1a1lYUmhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1V5NXBjMFp5WVcxbFluVm1abVZ5VkdWNGRIVnlaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGxLU0JwWmlBb1lXVXBJSFF1ZEdWNFUzUnZjbUZuWlRKRUtITXhMbFJGV0ZSVlVrVmZNa1FzSUhWbExDQlNaU3dnYzJVdWQybGtkR2dzSUhObExtaGxhV2RvZENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVU0E5SUhObExuZHBaSFJvTENCaVpTQTlJSE5sTG1obGFXZG9kRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVabElEMGdNRHNnUm1VZ1BDQjFaVHNnUm1Vckt5bDBMblJsZUVsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dSbVVzSUZKbExDQlJMQ0JpWlN3Z01Dd2dUMlVzSUVsbExDQnVkV3hzS1N3Z1VTQStQajBnTVN3Z1ltVWdQajQ5SURFN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWTJVdWJHVnVaM1JvSUQ0Z01DQW1KaUFrWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXVWdKaVlnWjJVZ0ppWWdkQzUwWlhoVGRHOXlZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnZFdVc0lGSmxMQ0JqWlZzd1hTNTNhV1IwYUN3Z1kyVmJNRjB1YUdWcFoyaDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdVU0E5SURBc0lHSmxJRDBnWTJVdWJHVnVaM1JvT3lCUklEd2dZbVU3SUZFckt5bFFJRDBnWTJWYlVWMHNJR0ZsSUQ4Z2RDNTBaWGhUZFdKSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZk1rUXNJRkVzSURBc0lEQXNJRTlsTENCSlpTd2dVQ2tnT2lCMExuUmxlRWx0WVdkbE1rUW9jekV1VkVWWVZGVlNSVjh5UkN3Z1VTd2dVbVVzSUU5bExDQkpaU3dnVUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVExtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnWVdVZ1B5QW9aMlVnSmlZZ2RDNTBaWGhUZEc5eVlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dkV1VzSUZKbExDQnpaUzUzYVdSMGFDd2djMlV1YUdWcFoyaDBLU3dnZEM1MFpYaFRkV0pKYldGblpUSkVLSE14TGxSRldGUlZVa1ZmTWtRc0lEQXNJREFzSURBc0lFOWxMQ0JKWlN3Z2MyVXBLU0E2SUhRdWRHVjRTVzFoWjJVeVJDaHpNUzVVUlZoVVZWSkZYekpFTENBd0xDQlNaU3dnVDJVc0lFbGxMQ0J6WlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSGNvVXl3Z0pHVXBJQ1ltSUZJb1pXVXBMQ0JOWlM1ZlgzWmxjbk5wYjI0Z1BTQjBaUzUyWlhKemFXOXVMQ0JUTG05dVZYQmtZWFJsSUNZbUlGTXViMjVWY0dSaGRHVW9VeWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUVNdVgxOTJaWEp6YVc5dUlEMGdVeTUyWlhKemFXOXVPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYVhRb1F5d2dVeXdnUWlrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hUTG1sdFlXZGxMbXhsYm1kMGFDQWhQVDBnTmlrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUd4bGRDQmxaU0E5SUZSbEtFTXNJRk1wTENCcUlEMGdVeTV6YjNWeVkyVTdDaUFnSUNBZ0lDQWdkQzVpYVc1a1ZHVjRkSFZ5WlNoek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUUxDQkRMbDlmZDJWaVoyeFVaWGgwZFhKbExDQnpNUzVVUlZoVVZWSkZNQ0FySUVJcE93b2dJQ0FnSUNBZ0lHeGxkQ0IwWlNBOUlHNHVaMlYwS0dvcE93b2dJQ0FnSUNBZ0lHbG1JQ2hxTG5abGNuTnBiMjRnSVQwOUlIUmxMbDlmZG1WeWMybHZiaUI4ZkNCbFpTQTlQVDBnSVRBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEM1aFkzUnBkbVZVWlhoMGRYSmxLSE14TGxSRldGUlZVa1V3SUNzZ1FpazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQk5aU0E5SUZGbExtZGxkRkJ5YVcxaGNtbGxjeWhSWlM1M2IzSnJhVzVuUTI5c2IzSlRjR0ZqWlNrc0lISmxJRDBnVXk1amIyeHZjbE53WVdObElEMDlQU0JZZENBL0lHNTFiR3dnT2lCUlpTNW5aWFJRY21sdFlYSnBaWE1vVXk1amIyeHZjbE53WVdObEtTd2daR1VnUFNCVExtTnZiRzl5VTNCaFkyVWdQVDA5SUZoMElIeDhJRTFsSUQwOVBTQnlaU0EvSUhNeExrNVBUa1VnT2lCek1TNUNVazlYVTBWU1gwUkZSa0ZWVEZSZlYwVkNSMHc3Q2lBZ0lDQWdJQ0FnSUNBZ0lITXhMbkJwZUdWc1UzUnZjbVZwS0hNeExsVk9VRUZEUzE5R1RFbFFYMWxmVjBWQ1Iwd3NJRk11Wm14cGNGa3BMQ0J6TVM1d2FYaGxiRk4wYjNKbGFTaHpNUzVWVGxCQlEwdGZVRkpGVFZWTVZFbFFURmxmUVV4UVNFRmZWMFZDUjB3c0lGTXVjSEpsYlhWc2RHbHdiSGxCYkhCb1lTa3NJSE14TG5CcGVHVnNVM1J2Y21WcEtITXhMbFZPVUVGRFMxOUJURWxIVGsxRlRsUXNJRk11ZFc1d1lXTnJRV3hwWjI1dFpXNTBLU3dnY3pFdWNHbDRaV3hUZEc5eVpXa29jekV1VlU1UVFVTkxYME5QVEU5U1UxQkJRMFZmUTA5T1ZrVlNVMGxQVGw5WFJVSkhUQ3dnWkdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RHVWdQU0JUTG1selEyOXRjSEpsYzNObFpGUmxlSFIxY21VZ2ZId2dVeTVwYldGblpWc3dYUzVwYzBOdmJYQnlaWE56WldSVVpYaDBkWEpsTENCYVpTQTlJRk11YVcxaFoyVmJNRjBnSmlZZ1V5NXBiV0ZuWlZzd1hTNXBjMFJoZEdGVVpYaDBkWEpsTENCelpTQTlJRnRkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGRWdQU0F3T3lCUklEd2dOanNnVVNzcktTRk1aU0FtSmlBaFdtVWdQeUJ6WlZ0UlhTQTlJSGdvVXk1cGJXRm5aVnRSWFN3Z0lURXNJQ0V3TENCc0tTQTZJSE5sVzFGZElEMGdXbVVnUHlCVExtbHRZV2RsVzFGZExtbHRZV2RsSURvZ1V5NXBiV0ZuWlZ0UlhTd2djMlZiVVYwZ1BTQnlkQ2hUTENCelpWdFJYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0FrWlNBOUlITmxXekJkTENCUFpTQTlJSGtvSkdVcElIeDhJRzhzSUVsbElEMGdjaTVqYjI1MlpYSjBLRk11Wm05eWJXRjBMQ0JUTG1OdmJHOXlVM0JoWTJVcExDQlNaU0E5SUhJdVkyOXVkbVZ5ZENoVExuUjVjR1VwTENCUUlEMGdTU2hUTG1sdWRHVnlibUZzUm05eWJXRjBMQ0JKWlN3Z1VtVXNJRk11WTI5c2IzSlRjR0ZqWlNrc0lHTmxJRDBnYnlBbUppQlRMbWx6Vm1sa1pXOVVaWGgwZFhKbElDRTlQU0FoTUN3Z1lXVWdQU0IwWlM1ZlgzWmxjbk5wYjI0Z1BUMDlJSFp2YVdRZ01DQjhmQ0JsWlNBOVBUMGdJVEFzSUdkbElEMGdUU2hUTENBa1pTd2dUMlVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQkZaU2h6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRTENCVExDQlBaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0V4bEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpaU0FtSmlCaFpTQW1KaUIwTG5SbGVGTjBiM0poWjJVeVJDaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFMQ0JuWlN3Z1VDd2dKR1V1ZDJsa2RHZ3NJQ1JsTG1obGFXZG9kQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRkVnUFNBd095QlJJRHdnTmpzZ1VTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMVpTQTlJSE5sVzFGZExtMXBjRzFoY0hNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmlaU0E5SURBN0lHSmxJRHdnZFdVdWJHVnVaM1JvT3lCaVpTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVabElEMGdkV1ZiWW1WZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVExtWnZjbTFoZENBaFBUMGdWM1FnUHlCSlpTQWhQVDBnYm5Wc2JDQS9JR05sSUQ4Z2RDNWpiMjF3Y21WemMyVmtWR1Y0VTNWaVNXMWhaMlV5UkNoek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUVgxQlBVMGxVU1ZaRlgxZ2dLeUJSTENCaVpTd2dNQ3dnTUN3Z1JtVXVkMmxrZEdnc0lFWmxMbWhsYVdkb2RDd2dTV1VzSUVabExtUmhkR0VwSURvZ2RDNWpiMjF3Y21WemMyVmtWR1Y0U1cxaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRWDFCUFUwbFVTVlpGWDFnZ0t5QlJMQ0JpWlN3Z1VDd2dSbVV1ZDJsa2RHZ3NJRVpsTG1obGFXZG9kQ3dnTUN3Z1JtVXVaR0YwWVNrZ09pQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklFRjBkR1Z0Y0hRZ2RHOGdiRzloWkNCMWJuTjFjSEJ2Y25SbFpDQmpiMjF3Y21WemMyVmtJSFJsZUhSMWNtVWdabTl5YldGMElHbHVJQzV6WlhSVVpYaDBkWEpsUTNWaVpTZ3BJaWtnT2lCalpTQS9JSFF1ZEdWNFUzVmlTVzFoWjJVeVJDaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdnS3lCUkxDQmlaU3dnTUN3Z01Dd2dSbVV1ZDJsa2RHZ3NJRVpsTG1obGFXZG9kQ3dnU1dVc0lGSmxMQ0JHWlM1a1lYUmhLU0E2SUhRdWRHVjRTVzFoWjJVeVJDaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdnS3lCUkxDQmlaU3dnVUN3Z1JtVXVkMmxrZEdnc0lFWmxMbWhsYVdkb2RDd2dNQ3dnU1dVc0lGSmxMQ0JHWlM1a1lYUmhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFaU0E5SUZNdWJXbHdiV0Z3Y3l3Z1kyVWdKaVlnWVdVZ0ppWWdLSFZsTG14bGJtZDBhQ0ErSURBZ0ppWWdaMlVyS3l3Z2RDNTBaWGhUZEc5eVlXZGxNa1FvY3pFdVZFVllWRlZTUlY5RFZVSkZYMDFCVUN3Z1oyVXNJRkFzSUhObFd6QmRMbmRwWkhSb0xDQnpaVnN3WFM1b1pXbG5hSFFwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVVNBOUlEQTdJRkVnUENBMk95QlJLeXNwYVdZZ0tGcGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyVWdQeUIwTG5SbGVGTjFZa2x0WVdkbE1rUW9jekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVRjlRVDFOSlZFbFdSVjlZSUNzZ1VTd2dNQ3dnTUN3Z01Dd2djMlZiVVYwdWQybGtkR2dzSUhObFcxRmRMbWhsYVdkb2RDd2dTV1VzSUZKbExDQnpaVnRSWFM1a1lYUmhLU0E2SUhRdWRHVjRTVzFoWjJVeVJDaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdnS3lCUkxDQXdMQ0JRTENCelpWdFJYUzUzYVdSMGFDd2djMlZiVVYwdWFHVnBaMmgwTENBd0xDQkpaU3dnVW1Vc0lITmxXMUZkTG1SaGRHRXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWW1VZ1BTQXdPeUJpWlNBOElIVmxMbXhsYm1kMGFEc2dZbVVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkJkQ0E5SUhWbFcySmxYUzVwYldGblpWdFJYUzVwYldGblpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyVWdQeUIwTG5SbGVGTjFZa2x0WVdkbE1rUW9jekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVRjlRVDFOSlZFbFdSVjlZSUNzZ1VTd2dZbVVnS3lBeExDQXdMQ0F3TENCQmRDNTNhV1IwYUN3Z1FYUXVhR1ZwWjJoMExDQkpaU3dnVW1Vc0lFRjBMbVJoZEdFcElEb2dkQzUwWlhoSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZlExVkNSVjlOUVZCZlVFOVRTVlJKVmtWZldDQXJJRkVzSUdKbElDc2dNU3dnVUN3Z1FYUXVkMmxrZEdnc0lFRjBMbWhsYVdkb2RDd2dNQ3dnU1dVc0lGSmxMQ0JCZEM1a1lYUmhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmxJRDhnZEM1MFpYaFRkV0pKYldGblpUSkVLSE14TGxSRldGUlZVa1ZmUTFWQ1JWOU5RVkJmVUU5VFNWUkpWa1ZmV0NBcklGRXNJREFzSURBc0lEQXNJRWxsTENCU1pTd2djMlZiVVYwcElEb2dkQzUwWlhoSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZlExVkNSVjlOUVZCZlVFOVRTVlJKVmtWZldDQXJJRkVzSURBc0lGQXNJRWxsTENCU1pTd2djMlZiVVYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZbVVnUFNBd095QmlaU0E4SUhWbExteGxibWQwYURzZ1ltVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCR1pTQTlJSFZsVzJKbFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyVWdQeUIwTG5SbGVGTjFZa2x0WVdkbE1rUW9jekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVRjlRVDFOSlZFbFdSVjlZSUNzZ1VTd2dZbVVnS3lBeExDQXdMQ0F3TENCSlpTd2dVbVVzSUVabExtbHRZV2RsVzFGZEtTQTZJSFF1ZEdWNFNXMWhaMlV5UkNoek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUVgxQlBVMGxVU1ZaRlgxZ2dLeUJSTENCaVpTQXJJREVzSUZBc0lFbGxMQ0JTWlN3Z1JtVXVhVzFoWjJWYlVWMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCM0tGTXNJRTlsS1NBbUppQlNLSE14TGxSRldGUlZVa1ZmUTFWQ1JWOU5RVkFwTENCMFpTNWZYM1psY25OcGIyNGdQU0JxTG5abGNuTnBiMjRzSUZNdWIyNVZjR1JoZEdVZ0ppWWdVeTV2YmxWd1pHRjBaU2hUS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1F5NWZYM1psY25OcGIyNGdQU0JUTG5abGNuTnBiMjQ3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCRFpTaERMQ0JUTENCQ0xDQmxaU3dnYWl3Z2RHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1RXVWdQU0J5TG1OdmJuWmxjblFvUWk1bWIzSnRZWFFzSUVJdVkyOXNiM0pUY0dGalpTa3NJSEpsSUQwZ2NpNWpiMjUyWlhKMEtFSXVkSGx3WlNrc0lHUmxJRDBnU1NoQ0xtbHVkR1Z5Ym1Gc1JtOXliV0YwTENCTlpTd2djbVVzSUVJdVkyOXNiM0pUY0dGalpTazdDaUFnSUNBZ0lDQWdhV1lnS0NGdUxtZGxkQ2hUS1M1ZlgyaGhjMFY0ZEdWeWJtRnNWR1Y0ZEhWeVpYTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRnBsSUQwZ1RXRjBhQzV0WVhnb01Td2dVeTUzYVdSMGFDQStQaUIwWlNrc0lITmxJRDBnVFdGMGFDNXRZWGdvTVN3Z1V5NW9aV2xuYUhRZ1BqNGdkR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnFJRDA5UFNCek1TNVVSVmhVVlZKRlh6TkVJSHg4SUdvZ1BUMDlJSE14TGxSRldGUlZVa1ZmTWtSZlFWSlNRVmtnUHlCMExuUmxlRWx0WVdkbE0wUW9haXdnZEdVc0lHUmxMQ0JhWlN3Z2MyVXNJRk11WkdWd2RHZ3NJREFzSUUxbExDQnlaU3dnYm5Wc2JDa2dPaUIwTG5SbGVFbHRZV2RsTWtRb2Fpd2dkR1VzSUdSbExDQmFaU3dnYzJVc0lEQXNJRTFsTENCeVpTd2diblZzYkNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUXVZbWx1WkVaeVlXMWxZblZtWm1WeUtITXhMa1pTUVUxRlFsVkdSa1ZTTENCREtTd2dUbVVvVXlrZ1B5QmtMbVp5WVcxbFluVm1abVZ5VkdWNGRIVnlaVEpFVFhWc2RHbHpZVzF3YkdWRldGUW9jekV1UmxKQlRVVkNWVVpHUlZJc0lHVmxMQ0JxTENCdUxtZGxkQ2hDS1M1ZlgzZGxZbWRzVkdWNGRIVnlaU3dnTUN3Z2VXVW9VeWtwSURvZ0tHb2dQVDA5SUhNeExsUkZXRlJWVWtWZk1rUWdmSHdnYWlBK1BTQnpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdnSmlZZ2FpQThQU0J6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRWDA1RlIwRlVTVlpGWDFvcElDWW1JSE14TG1aeVlXMWxZblZtWm1WeVZHVjRkSFZ5WlRKRUtITXhMa1pTUVUxRlFsVkdSa1ZTTENCbFpTd2dhaXdnYmk1blpYUW9RaWt1WDE5M1pXSm5iRlJsZUhSMWNtVXNJSFJsS1N3Z2RDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb2N6RXVSbEpCVFVWQ1ZVWkdSVklzSUc1MWJHd3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVENoRExDQlRMQ0JDS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSE14TG1KcGJtUlNaVzVrWlhKaWRXWm1aWElvY3pFdVVrVk9SRVZTUWxWR1JrVlNMQ0JES1N3Z1V5NWtaWEIwYUVKMVptWmxjaUFtSmlBaFV5NXpkR1Z1WTJsc1FuVm1abVZ5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbFpTQTlJRzhnUFQwOUlDRXdJRDhnY3pFdVJFVlFWRWhmUTA5TlVFOU9SVTVVTWpRZ09pQnpNUzVFUlZCVVNGOURUMDFRVDA1RlRsUXhOanNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRUlnZkh3Z1RtVW9VeWtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnFJRDBnVXk1a1pYQjBhRlJsZUhSMWNtVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnFJQ1ltSUdvdWFYTkVaWEIwYUZSbGVIUjFjbVVnSmlZZ0tHb3VkSGx3WlNBOVBUMGdlRzRnUHlCbFpTQTlJSE14TGtSRlVGUklYME5QVFZCUFRrVk9WRE15UmlBNklHb3VkSGx3WlNBOVBUMGdURzRnSmlZZ0tHVmxJRDBnY3pFdVJFVlFWRWhmUTA5TlVFOU9SVTVVTWpRcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwWlNBOUlIbGxLRk1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVG1Vb1V5a2dQeUJrTG5KbGJtUmxjbUoxWm1abGNsTjBiM0poWjJWTmRXeDBhWE5oYlhCc1pVVllWQ2h6TVM1U1JVNUVSVkpDVlVaR1JWSXNJSFJsTENCbFpTd2dVeTUzYVdSMGFDd2dVeTVvWldsbmFIUXBJRG9nY3pFdWNtVnVaR1Z5WW5WbVptVnlVM1J2Y21GblpVMTFiSFJwYzJGdGNHeGxLSE14TGxKRlRrUkZVa0pWUmtaRlVpd2dkR1VzSUdWbExDQlRMbmRwWkhSb0xDQlRMbWhsYVdkb2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J6TVM1eVpXNWtaWEppZFdabVpYSlRkRzl5WVdkbEtITXhMbEpGVGtSRlVrSlZSa1pGVWl3Z1pXVXNJRk11ZDJsa2RHZ3NJRk11YUdWcFoyaDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVabkpoYldWaWRXWm1aWEpTWlc1a1pYSmlkV1ptWlhJb2N6RXVSbEpCVFVWQ1ZVWkdSVklzSUhNeExrUkZVRlJJWDBGVVZFRkRTRTFGVGxRc0lITXhMbEpGVGtSRlVrSlZSa1pGVWl3Z1F5azdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hUTG1SbGNIUm9RblZtWm1WeUlDWW1JRk11YzNSbGJtTnBiRUoxWm1abGNpa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaV1VnUFNCNVpTaFRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1FpQW1KaUJPWlNoVEtTQTlQVDBnSVRFZ1B5QnpNUzV5Wlc1a1pYSmlkV1ptWlhKVGRHOXlZV2RsVFhWc2RHbHpZVzF3YkdVb2N6RXVVa1ZPUkVWU1FsVkdSa1ZTTENCbFpTd2djekV1UkVWUVZFZ3lORjlUVkVWT1EwbE1PQ3dnVXk1M2FXUjBhQ3dnVXk1b1pXbG5hSFFwSURvZ1RtVW9VeWtnUHlCa0xuSmxibVJsY21KMVptWmxjbE4wYjNKaFoyVk5kV3gwYVhOaGJYQnNaVVZZVkNoek1TNVNSVTVFUlZKQ1ZVWkdSVklzSUdWbExDQnpNUzVFUlZCVVNESTBYMU5VUlU1RFNVdzRMQ0JUTG5kcFpIUm9MQ0JUTG1obGFXZG9kQ2tnT2lCek1TNXlaVzVrWlhKaWRXWm1aWEpUZEc5eVlXZGxLSE14TGxKRlRrUkZVa0pWUmtaRlVpd2djekV1UkVWUVZFaGZVMVJGVGtOSlRDd2dVeTUzYVdSMGFDd2dVeTVvWldsbmFIUXBMQ0J6TVM1bWNtRnRaV0oxWm1abGNsSmxibVJsY21KMVptWmxjaWh6TVM1R1VrRk5SVUpWUmtaRlVpd2djekV1UkVWUVZFaGZVMVJGVGtOSlRGOUJWRlJCUTBoTlJVNVVMQ0J6TVM1U1JVNUVSVkpDVlVaR1JWSXNJRU1wT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JsWlNBOUlGTXVhWE5YWldKSFRFMTFiSFJwY0d4bFVtVnVaR1Z5VkdGeVoyVjBjeUE5UFQwZ0lUQWdQeUJUTG5SbGVIUjFjbVVnT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVExuUmxlSFIxY21VS0lDQWdJQ0FnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcUlEMGdNRHNnYWlBOElHVmxMbXhsYm1kMGFEc2dhaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBaU0E5SUdWbFcycGRMQ0JOWlNBOUlISXVZMjl1ZG1WeWRDaDBaUzVtYjNKdFlYUXNJSFJsTG1OdmJHOXlVM0JoWTJVcExDQnlaU0E5SUhJdVkyOXVkbVZ5ZENoMFpTNTBlWEJsS1N3Z1pHVWdQU0JKS0hSbExtbHVkR1Z5Ym1Gc1JtOXliV0YwTENCTlpTd2djbVVzSUhSbExtTnZiRzl5VTNCaFkyVXBMQ0JNWlNBOUlIbGxLRk1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUWlBbUppQk9aU2hUS1NBOVBUMGdJVEVnUHlCek1TNXlaVzVrWlhKaWRXWm1aWEpUZEc5eVlXZGxUWFZzZEdsellXMXdiR1VvY3pFdVVrVk9SRVZTUWxWR1JrVlNMQ0JNWlN3Z1pHVXNJRk11ZDJsa2RHZ3NJRk11YUdWcFoyaDBLU0E2SUU1bEtGTXBJRDhnWkM1eVpXNWtaWEppZFdabVpYSlRkRzl5WVdkbFRYVnNkR2x6WVcxd2JHVkZXRlFvY3pFdVVrVk9SRVZTUWxWR1JrVlNMQ0JNWlN3Z1pHVXNJRk11ZDJsa2RHZ3NJRk11YUdWcFoyaDBLU0E2SUhNeExuSmxibVJsY21KMVptWmxjbE4wYjNKaFoyVW9jekV1VWtWT1JFVlNRbFZHUmtWU0xDQmtaU3dnVXk1M2FXUjBhQ3dnVXk1b1pXbG5hSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSE14TG1KcGJtUlNaVzVrWlhKaWRXWm1aWElvY3pFdVVrVk9SRVZTUWxWR1JrVlNMQ0J1ZFd4c0tUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRzlsS0VNc0lGTXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1V5QW1KaUJUTG1selYyVmlSMHhEZFdKbFVtVnVaR1Z5VkdGeVoyVjBLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9Ja1JsY0hSb0lGUmxlSFIxY21VZ2QybDBhQ0JqZFdKbElISmxibVJsY2lCMFlYSm5aWFJ6SUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FpS1RzS0lDQWdJQ0FnSUNCcFppQW9kQzVpYVc1a1JuSmhiV1ZpZFdabVpYSW9jekV1UmxKQlRVVkNWVVpHUlZJc0lFTXBMQ0FoS0ZNdVpHVndkR2hVWlhoMGRYSmxJQ1ltSUZNdVpHVndkR2hVWlhoMGRYSmxMbWx6UkdWd2RHaFVaWGgwZFhKbEtTa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDSnlaVzVrWlhKVVlYSm5aWFF1WkdWd2RHaFVaWGgwZFhKbElHMTFjM1FnWW1VZ1lXNGdhVzV6ZEdGdVkyVWdiMllnVkVoU1JVVXVSR1Z3ZEdoVVpYaDBkWEpsSWlrN0NpQWdJQ0FnSUNBZ0tDRnVMbWRsZENoVExtUmxjSFJvVkdWNGRIVnlaU2t1WDE5M1pXSm5iRlJsZUhSMWNtVWdmSHdnVXk1a1pYQjBhRlJsZUhSMWNtVXVhVzFoWjJVdWQybGtkR2dnSVQwOUlGTXVkMmxrZEdnZ2ZId2dVeTVrWlhCMGFGUmxlSFIxY21VdWFXMWhaMlV1YUdWcFoyaDBJQ0U5UFNCVExtaGxhV2RvZENrZ0ppWWdLRk11WkdWd2RHaFVaWGgwZFhKbExtbHRZV2RsTG5kcFpIUm9JRDBnVXk1M2FXUjBhQ3dnVXk1a1pYQjBhRlJsZUhSMWNtVXVhVzFoWjJVdWFHVnBaMmgwSUQwZ1V5NW9aV2xuYUhRc0lGTXVaR1Z3ZEdoVVpYaDBkWEpsTG01bFpXUnpWWEJrWVhSbElEMGdJVEFwTENCTEtGTXVaR1Z3ZEdoVVpYaDBkWEpsTENBd0tUc0tJQ0FnSUNBZ0lDQnNaWFFnWldVZ1BTQnVMbWRsZENoVExtUmxjSFJvVkdWNGRIVnlaU2t1WDE5M1pXSm5iRlJsZUhSMWNtVXNJR29nUFNCNVpTaFRLVHNLSUNBZ0lDQWdJQ0JwWmlBb1V5NWtaWEIwYUZSbGVIUjFjbVV1Wm05eWJXRjBJRDA5UFNCemFTa2dUbVVvVXlrZ1B5QmtMbVp5WVcxbFluVm1abVZ5VkdWNGRIVnlaVEpFVFhWc2RHbHpZVzF3YkdWRldGUW9jekV1UmxKQlRVVkNWVVpHUlZJc0lITXhMa1JGVUZSSVgwRlVWRUZEU0UxRlRsUXNJSE14TGxSRldGUlZVa1ZmTWtRc0lHVmxMQ0F3TENCcUtTQTZJSE14TG1aeVlXMWxZblZtWm1WeVZHVjRkSFZ5WlRKRUtITXhMa1pTUVUxRlFsVkdSa1ZTTENCek1TNUVSVkJVU0Y5QlZGUkJRMGhOUlU1VUxDQnpNUzVVUlZoVVZWSkZYekpFTENCbFpTd2dNQ2s3Q2lBZ0lDQWdJQ0FnWld4elpTQnBaaUFvVXk1a1pYQjBhRlJsZUhSMWNtVXVabTl5YldGMElEMDlQU0JaYVNrZ1RtVW9VeWtnUHlCa0xtWnlZVzFsWW5WbVptVnlWR1Y0ZEhWeVpUSkVUWFZzZEdsellXMXdiR1ZGV0ZRb2N6RXVSbEpCVFVWQ1ZVWkdSVklzSUhNeExrUkZVRlJJWDFOVVJVNURTVXhmUVZSVVFVTklUVVZPVkN3Z2N6RXVWRVZZVkZWU1JWOHlSQ3dnWldVc0lEQXNJR29wSURvZ2N6RXVabkpoYldWaWRXWm1aWEpVWlhoMGRYSmxNa1FvY3pFdVJsSkJUVVZDVlVaR1JWSXNJSE14TGtSRlVGUklYMU5VUlU1RFNVeGZRVlJVUVVOSVRVVk9WQ3dnY3pFdVZFVllWRlZTUlY4eVJDd2daV1VzSURBcE93b2dJQ0FnSUNBZ0lHVnNjMlVnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pWYm10dWIzZHVJR1JsY0hSb1ZHVjRkSFZ5WlNCbWIzSnRZWFFpS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlGZ29ReWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQlRJRDBnYmk1blpYUW9ReWtzSUVJZ1BTQkRMbWx6VjJWaVIweERkV0psVW1WdVpHVnlWR0Z5WjJWMElEMDlQU0FoTURzS0lDQWdJQ0FnSUNCcFppQW9ReTVrWlhCMGFGUmxlSFIxY21VZ0ppWWdJVk11WDE5aGRYUnZRV3hzYjJOaGRHVkVaWEIwYUVKMVptWmxjaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUWlrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NKMFlYSm5aWFF1WkdWd2RHaFVaWGgwZFhKbElHNXZkQ0J6ZFhCd2IzSjBaV1FnYVc0Z1EzVmlaU0J5Wlc1a1pYSWdkR0Z5WjJWMGN5SXBPd29nSUNBZ0lDQWdJQ0FnSUNCdlpTaFRMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjaXdnUXlrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaENLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lGTXVYMTkzWldKbmJFUmxjSFJvWW5WbVptVnlJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaV1VnUFNBd095QmxaU0E4SURZN0lHVmxLeXNwZEM1aWFXNWtSbkpoYldWaWRXWm1aWElvY3pFdVJsSkJUVVZDVlVaR1JWSXNJRk11WDE5M1pXSm5iRVp5WVcxbFluVm1abVZ5VzJWbFhTa3NJRk11WDE5M1pXSm5iRVJsY0hSb1luVm1abVZ5VzJWbFhTQTlJSE14TG1OeVpXRjBaVkpsYm1SbGNtSjFabVpsY2lncExDQk1LRk11WDE5M1pXSm5iRVJsY0hSb1luVm1abVZ5VzJWbFhTd2dReXdnSVRFcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCMExtSnBibVJHY21GdFpXSjFabVpsY2loek1TNUdVa0ZOUlVKVlJrWkZVaXdnVXk1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJcExDQlRMbDlmZDJWaVoyeEVaWEIwYUdKMVptWmxjaUE5SUhNeExtTnlaV0YwWlZKbGJtUmxjbUoxWm1abGNpZ3BMQ0JNS0ZNdVgxOTNaV0puYkVSbGNIUm9ZblZtWm1WeUxDQkRMQ0FoTVNrN0NpQWdJQ0FnSUNBZ2RDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb2N6RXVSbEpCVFVWQ1ZVWkdSVklzSUc1MWJHd3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYVdVb1F5d2dVeXdnUWlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsWlNBOUlHNHVaMlYwS0VNcE93b2dJQ0FnSUNBZ0lGTWdJVDA5SUhadmFXUWdNQ0FtSmlCRFpTaGxaUzVmWDNkbFltZHNSbkpoYldWaWRXWm1aWElzSUVNc0lFTXVkR1Y0ZEhWeVpTd2djekV1UTA5TVQxSmZRVlJVUVVOSVRVVk9WREFzSUhNeExsUkZXRlJWVWtWZk1rUXNJREFwTENCQ0lDRTlQU0IyYjJsa0lEQWdKaVlnV0NoREtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRW9vUXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JUSUQwZ1F5NTBaWGgwZFhKbExDQkNJRDBnYmk1blpYUW9ReWtzSUdWbElEMGdiaTVuWlhRb1V5azdDaUFnSUNBZ0lDQWdReTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnV1Nrc0lFTXVhWE5YWldKSFRFMTFiSFJwY0d4bFVtVnVaR1Z5VkdGeVoyVjBjeUFoUFQwZ0lUQWdKaVlnS0dWbExsOWZkMlZpWjJ4VVpYaDBkWEpsSUQwOVBTQjJiMmxrSURBZ0ppWWdLR1ZsTGw5ZmQyVmlaMnhVWlhoMGRYSmxJRDBnY3pFdVkzSmxZWFJsVkdWNGRIVnlaU2dwS1N3Z1pXVXVYMTkyWlhKemFXOXVJRDBnVXk1MlpYSnphVzl1TENCaExtMWxiVzl5ZVM1MFpYaDBkWEpsY3lzcktUc0tJQ0FnSUNBZ0lDQnNaWFFnYWlBOUlFTXVhWE5YWldKSFRFTjFZbVZTWlc1a1pYSlVZWEpuWlhRZ1BUMDlJQ0V3TENCMFpTQTlJRU11YVhOWFpXSkhURTExYkhScGNHeGxVbVZ1WkdWeVZHRnlaMlYwY3lBOVBUMGdJVEFzSUUxbElEMGdlU2hES1NCOGZDQnZPd29nSUNBZ0lDQWdJR2xtSUNocUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUVJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NtVWdQU0F3T3lCeVpTQThJRFk3SUhKbEt5c3BhV1lnS0c4Z0ppWWdVeTV0YVhCdFlYQnpJQ1ltSUZNdWJXbHdiV0Z3Y3k1c1pXNW5kR2dnUGlBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkNMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjbHR5WlYwZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaR1VnUFNBd095QmtaU0E4SUZNdWJXbHdiV0Z3Y3k1c1pXNW5kR2c3SUdSbEt5c3BRaTVmWDNkbFltZHNSbkpoYldWaWRXWm1aWEpiY21WZFcyUmxYU0E5SUhNeExtTnlaV0YwWlVaeVlXMWxZblZtWm1WeUtDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JDTGw5ZmQyVmlaMnhHY21GdFpXSjFabVpsY2x0eVpWMGdQU0J6TVM1amNtVmhkR1ZHY21GdFpXSjFabVpsY2lncE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodklDWW1JRk11Yldsd2JXRndjeUFtSmlCVExtMXBjRzFoY0hNdWJHVnVaM1JvSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRaTVmWDNkbFltZHNSbkpoYldWaWRXWm1aWElnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NtVWdQU0F3T3lCeVpTQThJRk11Yldsd2JXRndjeTVzWlc1bmRHZzdJSEpsS3lzcFFpNWZYM2RsWW1kc1JuSmhiV1ZpZFdabVpYSmJjbVZkSUQwZ2N6RXVZM0psWVhSbFJuSmhiV1ZpZFdabVpYSW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUVJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeUlEMGdjekV1WTNKbFlYUmxSbkpoYldWaWRXWm1aWElvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSbEtTQnBaaUFvYVM1a2NtRjNRblZtWm1WeWN5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbElEMGdReTUwWlhoMGRYSmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmtaU0E5SURBc0lFeGxJRDBnY21VdWJHVnVaM1JvT3lCa1pTQThJRXhsT3lCa1pTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdXbVVnUFNCdUxtZGxkQ2h5WlZ0a1pWMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZwbExsOWZkMlZpWjJ4VVpYaDBkWEpsSUQwOVBTQjJiMmxrSURBZ0ppWWdLRnBsTGw5ZmQyVmlaMnhVWlhoMGRYSmxJRDBnY3pFdVkzSmxZWFJsVkdWNGRIVnlaU2dwTENCaExtMWxiVzl5ZVM1MFpYaDBkWEpsY3lzcktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dWMlZpUjB4TmRXeDBhWEJzWlZKbGJtUmxjbFJoY21kbGRITWdZMkZ1SUc5dWJIa2dZbVVnZFhObFpDQjNhWFJvSUZkbFlrZE1NaUJ2Y2lCWFJVSkhURjlrY21GM1gySjFabVpsY25NZ1pYaDBaVzV6YVc5dUxpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9ieUFtSmlCRExuTmhiWEJzWlhNZ1BpQXdJQ1ltSUU1bEtFTXBJRDA5UFNBaE1Ta2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbElEMGdkR1VnUHlCVElEb2dXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZNS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCQ0xsOWZkMlZpWjJ4TmRXeDBhWE5oYlhCc1pXUkdjbUZ0WldKMVptWmxjaUE5SUhNeExtTnlaV0YwWlVaeVlXMWxZblZtWm1WeUtDa3NJRUl1WDE5M1pXSm5iRU52Ykc5eVVtVnVaR1Z5WW5WbVptVnlJRDBnVzEwc0lIUXVZbWx1WkVaeVlXMWxZblZtWm1WeUtITXhMa1pTUVUxRlFsVkdSa1ZTTENCQ0xsOWZkMlZpWjJ4TmRXeDBhWE5oYlhCc1pXUkdjbUZ0WldKMVptWmxjaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1JsSUQwZ01Ec2daR1VnUENCeVpTNXNaVzVuZEdnN0lHUmxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JNWlNBOUlISmxXMlJsWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkNMbDlmZDJWaVoyeERiMnh2Y2xKbGJtUmxjbUoxWm1abGNsdGtaVjBnUFNCek1TNWpjbVZoZEdWU1pXNWtaWEppZFdabVpYSW9LU3dnY3pFdVltbHVaRkpsYm1SbGNtSjFabVpsY2loek1TNVNSVTVFUlZKQ1ZVWkdSVklzSUVJdVgxOTNaV0puYkVOdmJHOXlVbVZ1WkdWeVluVm1abVZ5VzJSbFhTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGcGxJRDBnY2k1amIyNTJaWEowS0V4bExtWnZjbTFoZEN3Z1RHVXVZMjlzYjNKVGNHRmpaU2tzSUhObElEMGdjaTVqYjI1MlpYSjBLRXhsTG5SNWNHVXBMQ0FrWlNBOUlFa29UR1V1YVc1MFpYSnVZV3hHYjNKdFlYUXNJRnBsTENCelpTd2dUR1V1WTI5c2IzSlRjR0ZqWlN3Z1F5NXBjMWhTVW1WdVpHVnlWR0Z5WjJWMElEMDlQU0FoTUNrc0lFOWxJRDBnZVdVb1F5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdWNtVnVaR1Z5WW5WbVptVnlVM1J2Y21GblpVMTFiSFJwYzJGdGNHeGxLSE14TGxKRlRrUkZVa0pWUmtaRlVpd2dUMlVzSUNSbExDQkRMbmRwWkhSb0xDQkRMbWhsYVdkb2RDa3NJSE14TG1aeVlXMWxZblZtWm1WeVVtVnVaR1Z5WW5WbVptVnlLSE14TGtaU1FVMUZRbFZHUmtWU0xDQnpNUzVEVDB4UFVsOUJWRlJCUTBoTlJVNVVNQ0FySUdSbExDQnpNUzVTUlU1RVJWSkNWVVpHUlZJc0lFSXVYMTkzWldKbmJFTnZiRzl5VW1WdVpHVnlZblZtWm1WeVcyUmxYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TVM1aWFXNWtVbVZ1WkdWeVluVm1abVZ5S0hNeExsSkZUa1JGVWtKVlJrWkZVaXdnYm5Wc2JDa3NJRU11WkdWd2RHaENkV1ptWlhJZ0ppWWdLRUl1WDE5M1pXSm5iRVJsY0hSb1VtVnVaR1Z5WW5WbVptVnlJRDBnY3pFdVkzSmxZWFJsVW1WdVpHVnlZblZtWm1WeUtDa3NJRXdvUWk1ZlgzZGxZbWRzUkdWd2RHaFNaVzVrWlhKaWRXWm1aWElzSUVNc0lDRXdLU2tzSUhRdVltbHVaRVp5WVcxbFluVm1abVZ5S0hNeExrWlNRVTFGUWxWR1JrVlNMQ0J1ZFd4c0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9haWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBMbUpwYm1SVVpYaDBkWEpsS0hNeExsUkZXRlJWVWtWZlExVkNSVjlOUVZBc0lHVmxMbDlmZDJWaVoyeFVaWGgwZFhKbEtTd2dSV1VvY3pFdVZFVllWRlZTUlY5RFZVSkZYMDFCVUN3Z1V5d2dUV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISmxJRDBnTURzZ2NtVWdQQ0EyT3lCeVpTc3JLV2xtSUNodklDWW1JRk11Yldsd2JXRndjeUFtSmlCVExtMXBjRzFoY0hNdWJHVnVaM1JvSUQ0Z01Da2dabTl5S0d4bGRDQmtaU0E5SURBN0lHUmxJRHdnVXk1dGFYQnRZWEJ6TG14bGJtZDBhRHNnWkdVckt5bERaU2hDTGw5ZmQyVmlaMnhHY21GdFpXSjFabVpsY2x0eVpWMWJaR1ZkTENCRExDQlRMQ0J6TVM1RFQweFBVbDlCVkZSQlEwaE5SVTVVTUN3Z2N6RXVWRVZZVkZWU1JWOURWVUpGWDAxQlVGOVFUMU5KVkVsV1JWOVlJQ3NnY21Vc0lHUmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JEWlNoQ0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNsdHlaVjBzSUVNc0lGTXNJSE14TGtOUFRFOVNYMEZVVkVGRFNFMUZUbFF3TENCek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUVgxQlBVMGxVU1ZaRlgxZ2dLeUJ5WlN3Z01DazdDaUFnSUNBZ0lDQWdJQ0FnSUhjb1V5d2dUV1VwSUNZbUlGSW9jekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVQ2tzSUhRdWRXNWlhVzVrVkdWNGRIVnlaU2dwT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEpsSUQwZ1F5NTBaWGgwZFhKbE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1JsSUQwZ01Dd2dUR1VnUFNCeVpTNXNaVzVuZEdnN0lHUmxJRHdnVEdVN0lHUmxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGcGxJRDBnY21WYlpHVmRMQ0J6WlNBOUlHNHVaMlYwS0ZwbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUXVZbWx1WkZSbGVIUjFjbVVvY3pFdVZFVllWRlZTUlY4eVJDd2djMlV1WDE5M1pXSm5iRlJsZUhSMWNtVXBMQ0JGWlNoek1TNVVSVmhVVlZKRlh6SkVMQ0JhWlN3Z1RXVXBMQ0JEWlNoQ0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNpd2dReXdnV21Vc0lITXhMa05QVEU5U1gwRlVWRUZEU0UxRlRsUXdJQ3NnWkdVc0lITXhMbFJGV0ZSVlVrVmZNa1FzSURBcExDQjNLRnBsTENCTlpTa2dKaVlnVWloek1TNVVSVmhVVlZKRlh6SkVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0IwTG5WdVltbHVaRlJsZUhSMWNtVW9LVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjbVVnUFNCek1TNVVSVmhVVlZKRlh6SkVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9LRU11YVhOWFpXSkhURE5FVW1WdVpHVnlWR0Z5WjJWMElIeDhJRU11YVhOWFpXSkhURUZ5Y21GNVVtVnVaR1Z5VkdGeVoyVjBLU0FtSmlBb2J5QS9JSEpsSUQwZ1F5NXBjMWRsWWtkTU0wUlNaVzVrWlhKVVlYSm5aWFFnUHlCek1TNVVSVmhVVlZKRlh6TkVJRG9nY3pFdVZFVllWRlZTUlY4eVJGOUJVbEpCV1NBNklHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVZHVjRkSFZ5WlhNNklGUklVa1ZGTGtSaGRHRXpSRlJsZUhSMWNtVWdZVzVrSUZSSVVrVkZMa1JoZEdGQmNuSmhlVlJsZUhSMWNtVWdiMjVzZVNCemRYQndiM0owWldRZ2QybDBhQ0JYWldKSFRESXVJaWtwTENCMExtSnBibVJVWlhoMGRYSmxLSEpsTENCbFpTNWZYM2RsWW1kc1ZHVjRkSFZ5WlNrc0lFVmxLSEpsTENCVExDQk5aU2tzSUc4Z0ppWWdVeTV0YVhCdFlYQnpJQ1ltSUZNdWJXbHdiV0Z3Y3k1c1pXNW5kR2dnUGlBd0tTQm1iM0lvYkdWMElHUmxJRDBnTURzZ1pHVWdQQ0JUTG0xcGNHMWhjSE11YkdWdVozUm9PeUJrWlNzcktVTmxLRUl1WDE5M1pXSm5iRVp5WVcxbFluVm1abVZ5VzJSbFhTd2dReXdnVXl3Z2N6RXVRMDlNVDFKZlFWUlVRVU5JVFVWT1ZEQXNJSEpsTENCa1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdRMlVvUWk1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJc0lFTXNJRk1zSUhNeExrTlBURTlTWDBGVVZFRkRTRTFGVGxRd0xDQnlaU3dnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSGNvVXl3Z1RXVXBJQ1ltSUZJb2NtVXBMQ0IwTG5WdVltbHVaRlJsZUhSMWNtVW9LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnUXk1a1pYQjBhRUoxWm1abGNpQW1KaUJZS0VNcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdVMlVvUXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JUSUQwZ2VTaERLU0I4ZkNCdkxDQkNJRDBnUXk1cGMxZGxZa2RNVFhWc2RHbHdiR1ZTWlc1a1pYSlVZWEpuWlhSeklEMDlQU0FoTUNBL0lFTXVkR1Y0ZEhWeVpTQTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ1F5NTBaWGgwZFhKbENpQWdJQ0FnSUNBZ1hUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHVmxJRDBnTUN3Z2FpQTlJRUl1YkdWdVozUm9PeUJsWlNBOElHbzdJR1ZsS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHVWdQU0JDVzJWbFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIY29kR1VzSUZNcEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVFdVZ1BTQkRMbWx6VjJWaVIweERkV0psVW1WdVpHVnlWR0Z5WjJWMElEOGdjekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVQ0E2SUhNeExsUkZXRlJWVWtWZk1rUXNJSEpsSUQwZ2JpNW5aWFFvZEdVcExsOWZkMlZpWjJ4VVpYaDBkWEpsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEM1aWFXNWtWR1Y0ZEhWeVpTaE5aU3dnY21VcExDQlNLRTFsS1N3Z2RDNTFibUpwYm1SVVpYaDBkWEpsS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdFpTaERLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHOGdKaVlnUXk1ellXMXdiR1Z6SUQ0Z01DQW1KaUJPWlNoREtTQTlQVDBnSVRFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGTWdQU0JETG1selYyVmlSMHhOZFd4MGFYQnNaVkpsYm1SbGNsUmhjbWRsZEhNZ1B5QkRMblJsZUhSMWNtVWdPaUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JETG5SbGVIUjFjbVVLSUNBZ0lDQWdJQ0FnSUNBZ1hTd2dRaUE5SUVNdWQybGtkR2dzSUdWbElEMGdReTVvWldsbmFIUXNJR29nUFNCek1TNURUMHhQVWw5Q1ZVWkdSVkpmUWtsVUxDQjBaU0E5SUZ0ZExDQk5aU0E5SUVNdWMzUmxibU5wYkVKMVptWmxjaUEvSUhNeExrUkZVRlJJWDFOVVJVNURTVXhmUVZSVVFVTklUVVZPVkNBNklITXhMa1JGVUZSSVgwRlVWRUZEU0UxRlRsUXNJSEpsSUQwZ2JpNW5aWFFvUXlrc0lHUmxJRDBnUXk1cGMxZGxZa2RNVFhWc2RHbHdiR1ZTWlc1a1pYSlVZWEpuWlhSeklEMDlQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSbEtTQm1iM0lvYkdWMElFeGxJRDBnTURzZ1RHVWdQQ0JUTG14bGJtZDBhRHNnVEdVckt5bDBMbUpwYm1SR2NtRnRaV0oxWm1abGNpaHpNUzVHVWtGTlJVSlZSa1pGVWl3Z2NtVXVYMTkzWldKbmJFMTFiSFJwYzJGdGNHeGxaRVp5WVcxbFluVm1abVZ5S1N3Z2N6RXVabkpoYldWaWRXWm1aWEpTWlc1a1pYSmlkV1ptWlhJb2N6RXVSbEpCVFVWQ1ZVWkdSVklzSUhNeExrTlBURTlTWDBGVVZFRkRTRTFGVGxRd0lDc2dUR1VzSUhNeExsSkZUa1JGVWtKVlJrWkZVaXdnYm5Wc2JDa3NJSFF1WW1sdVpFWnlZVzFsWW5WbVptVnlLSE14TGtaU1FVMUZRbFZHUmtWU0xDQnlaUzVmWDNkbFltZHNSbkpoYldWaWRXWm1aWElwTENCek1TNW1jbUZ0WldKMVptWmxjbFJsZUhSMWNtVXlSQ2h6TVM1RVVrRlhYMFpTUVUxRlFsVkdSa1ZTTENCek1TNURUMHhQVWw5QlZGUkJRMGhOUlU1VU1DQXJJRXhsTENCek1TNVVSVmhVVlZKRlh6SkVMQ0J1ZFd4c0xDQXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb2N6RXVVa1ZCUkY5R1VrRk5SVUpWUmtaRlVpd2djbVV1WDE5M1pXSm5iRTExYkhScGMyRnRjR3hsWkVaeVlXMWxZblZtWm1WeUtTd2dkQzVpYVc1a1JuSmhiV1ZpZFdabVpYSW9jekV1UkZKQlYxOUdVa0ZOUlVKVlJrWkZVaXdnY21VdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JNWlNBOUlEQTdJRXhsSUR3Z1V5NXNaVzVuZEdnN0lFeGxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdVdWNIVnphQ2h6TVM1RFQweFBVbDlCVkZSQlEwaE5SVTVVTUNBcklFeGxLU3dnUXk1a1pYQjBhRUoxWm1abGNpQW1KaUIwWlM1d2RYTm9LRTFsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmFaU0E5SUhKbExsOWZhV2R1YjNKbFJHVndkR2hXWVd4MVpYTWdJVDA5SUhadmFXUWdNQ0EvSUhKbExsOWZhV2R1YjNKbFJHVndkR2hXWVd4MVpYTWdPaUFoTVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGFaU0E5UFQwZ0lURWdKaVlnS0VNdVpHVndkR2hDZFdabVpYSWdKaVlnS0dvZ2ZEMGdjekV1UkVWUVZFaGZRbFZHUmtWU1gwSkpWQ2tzSUVNdWMzUmxibU5wYkVKMVptWmxjaUFtSmlBb2FpQjhQU0J6TVM1VFZFVk9RMGxNWDBKVlJrWkZVbDlDU1ZRcEtTd2daR1VnSmlZZ2N6RXVabkpoYldWaWRXWm1aWEpTWlc1a1pYSmlkV1ptWlhJb2N6RXVVa1ZCUkY5R1VrRk5SVUpWUmtaRlVpd2djekV1UTA5TVQxSmZRVlJVUVVOSVRVVk9WREFzSUhNeExsSkZUa1JGVWtKVlJrWkZVaXdnY21VdVgxOTNaV0puYkVOdmJHOXlVbVZ1WkdWeVluVm1abVZ5VzB4bFhTa3NJRnBsSUQwOVBTQWhNQ0FtSmlBb2N6RXVhVzUyWVd4cFpHRjBaVVp5WVcxbFluVm1abVZ5S0hNeExsSkZRVVJmUmxKQlRVVkNWVVpHUlZJc0lGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JOWlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFNrc0lITXhMbWx1ZG1Gc2FXUmhkR1ZHY21GdFpXSjFabVpsY2loek1TNUVVa0ZYWDBaU1FVMUZRbFZHUmtWU0xDQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVFdVS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwcEtTd2daR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzJVZ1BTQnVMbWRsZENoVFcweGxYU2t1WDE5M1pXSm5iRlJsZUhSMWNtVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdVpuSmhiV1ZpZFdabVpYSlVaWGgwZFhKbE1rUW9jekV1UkZKQlYxOUdVa0ZOUlVKVlJrWkZVaXdnY3pFdVEwOU1UMUpmUVZSVVFVTklUVVZPVkRBc0lITXhMbFJGV0ZSVlVrVmZNa1FzSUhObExDQXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE14TG1Kc2FYUkdjbUZ0WldKMVptWmxjaWd3TENBd0xDQkNMQ0JsWlN3Z01Dd2dNQ3dnUWl3Z1pXVXNJR29zSUhNeExrNUZRVkpGVTFRcExDQm1JQ1ltSUhNeExtbHVkbUZzYVdSaGRHVkdjbUZ0WldKMVptWmxjaWh6TVM1U1JVRkVYMFpTUVUxRlFsVkdSa1ZTTENCMFpTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hRdVltbHVaRVp5WVcxbFluVm1abVZ5S0hNeExsSkZRVVJmUmxKQlRVVkNWVVpHUlZJc0lHNTFiR3dwTENCMExtSnBibVJHY21GdFpXSjFabVpsY2loek1TNUVVa0ZYWDBaU1FVMUZRbFZHUmtWU0xDQnVkV3hzS1N3Z1pHVXBJR1p2Y2loc1pYUWdUR1VnUFNBd095Qk1aU0E4SUZNdWJHVnVaM1JvT3lCTVpTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFF1WW1sdVpFWnlZVzFsWW5WbVptVnlLSE14TGtaU1FVMUZRbFZHUmtWU0xDQnlaUzVmWDNkbFltZHNUWFZzZEdsellXMXdiR1ZrUm5KaGJXVmlkV1ptWlhJcExDQnpNUzVtY21GdFpXSjFabVpsY2xKbGJtUmxjbUoxWm1abGNpaHpNUzVHVWtGTlJVSlZSa1pGVWl3Z2N6RXVRMDlNVDFKZlFWUlVRVU5JVFVWT1ZEQWdLeUJNWlN3Z2N6RXVVa1ZPUkVWU1FsVkdSa1ZTTENCeVpTNWZYM2RsWW1kc1EyOXNiM0pTWlc1a1pYSmlkV1ptWlhKYlRHVmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCYVpTQTlJRzR1WjJWMEtGTmJUR1ZkS1M1ZlgzZGxZbWRzVkdWNGRIVnlaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFF1WW1sdVpFWnlZVzFsWW5WbVptVnlLSE14TGtaU1FVMUZRbFZHUmtWU0xDQnlaUzVmWDNkbFltZHNSbkpoYldWaWRXWm1aWElwTENCek1TNW1jbUZ0WldKMVptWmxjbFJsZUhSMWNtVXlSQ2h6TVM1RVVrRlhYMFpTUVUxRlFsVkdSa1ZTTENCek1TNURUMHhQVWw5QlZGUkJRMGhOUlU1VU1DQXJJRXhsTENCek1TNVVSVmhVVlZKRlh6SkVMQ0JhWlN3Z01DazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdkQzVpYVc1a1JuSmhiV1ZpZFdabVpYSW9jekV1UkZKQlYxOUdVa0ZOUlVKVlJrWkZVaXdnY21VdVgxOTNaV0puYkUxMWJIUnBjMkZ0Y0d4bFpFWnlZVzFsWW5WbVptVnlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCNVpTaERLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndWJXbHVLSFVzSUVNdWMyRnRjR3hsY3lrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQk9aU2hES1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRk1nUFNCdUxtZGxkQ2hES1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYnlBbUppQkRMbk5oYlhCc1pYTWdQaUF3SUNZbUlHVXVhR0Z6S0NKWFJVSkhURjl0ZFd4MGFYTmhiWEJzWldSZmNtVnVaR1Z5WDNSdlgzUmxlSFIxY21VaUtTQTlQVDBnSVRBZ0ppWWdVeTVmWDNWelpWSmxibVJsY2xSdlZHVjRkSFZ5WlNBaFBUMGdJVEU3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCeFpTaERLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElGTWdQU0JoTG5KbGJtUmxjaTVtY21GdFpUc0tJQ0FnSUNBZ0lDQnRMbWRsZENoREtTQWhQVDBnVXlBbUppQW9iUzV6WlhRb1F5d2dVeWtzSUVNdWRYQmtZWFJsS0NrcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdjblFvUXl3Z1V5a2dld29nSUNBZ0lDQWdJR3hsZENCQ0lEMGdReTVqYjJ4dmNsTndZV05sTENCbFpTQTlJRU11Wm05eWJXRjBMQ0JxSUQwZ1F5NTBlWEJsT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJETG1selEyOXRjSEpsYzNObFpGUmxlSFIxY21VZ1BUMDlJQ0V3SUh4OElFTXVhWE5XYVdSbGIxUmxlSFIxY21VZ1BUMDlJQ0V3SUh4OElFTXVabTl5YldGMElEMDlQU0J3YnlCOGZDQkNJQ0U5UFNCTmJpQW1KaUJDSUNFOVBTQllkQ0FtSmlBb1VXVXVaMlYwVkhKaGJuTm1aWElvUWlrZ1BUMDlJRzUwSUQ4Z2J5QTlQVDBnSVRFZ1B5QmxMbWhoY3lnaVJWaFVYM05TUjBJaUtTQTlQVDBnSVRBZ0ppWWdaV1VnUFQwOUlGZDBJRDhnS0VNdVptOXliV0YwSUQwZ2NHOHNJRU11YldsdVJtbHNkR1Z5SUQwZ2JYUXNJRU11WjJWdVpYSmhkR1ZOYVhCdFlYQnpJRDBnSVRFcElEb2dVeUE5SUZoeUxuTlNSMEpVYjB4cGJtVmhjaWhUS1NBNklDaGxaU0FoUFQwZ1YzUWdmSHdnYWlBaFBUMGdUMjRwSUNZbUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4VVpYaDBkWEpsY3pvZ2MxSkhRaUJsYm1OdlpHVmtJSFJsZUhSMWNtVnpJR2hoZG1VZ2RHOGdkWE5sSUZKSFFrRkdiM0p0WVhRZ1lXNWtJRlZ1YzJsbmJtVmtRbmwwWlZSNWNHVXVJaWtnT2lCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEZSbGVIUjFjbVZ6T2lCVmJuTjFjSEJ2Y25SbFpDQjBaWGgwZFhKbElHTnZiRzl5SUhOd1lXTmxPaUlzSUVJcEtTd2dVenNLSUNBZ0lIMEtJQ0FnSUhSb2FYTXVZV3hzYjJOaGRHVlVaWGgwZFhKbFZXNXBkQ0E5SUc1bExDQjBhR2x6TG5KbGMyVjBWR1Y0ZEhWeVpWVnVhWFJ6SUQwZ1NDd2dkR2hwY3k1elpYUlVaWGgwZFhKbE1rUWdQU0JMTENCMGFHbHpMbk5sZEZSbGVIUjFjbVV5UkVGeWNtRjVJRDBnUkN3Z2RHaHBjeTV6WlhSVVpYaDBkWEpsTTBRZ1BTQkhMQ0IwYUdsekxuTmxkRlJsZUhSMWNtVkRkV0psSUQwZ2FHVXNJSFJvYVhNdWNtVmlhVzVrVkdWNGRIVnlaWE1nUFNCcFpTd2dkR2hwY3k1elpYUjFjRkpsYm1SbGNsUmhjbWRsZENBOUlFb3NJSFJvYVhNdWRYQmtZWFJsVW1WdVpHVnlWR0Z5WjJWMFRXbHdiV0Z3SUQwZ1UyVXNJSFJvYVhNdWRYQmtZWFJsVFhWc2RHbHpZVzF3YkdWU1pXNWtaWEpVWVhKblpYUWdQU0J0WlN3Z2RHaHBjeTV6WlhSMWNFUmxjSFJvVW1WdVpHVnlZblZtWm1WeUlEMGdXQ3dnZEdocGN5NXpaWFIxY0VaeVlXMWxRblZtWm1WeVZHVjRkSFZ5WlNBOUlFTmxMQ0IwYUdsekxuVnpaVTExYkhScGMyRnRjR3hsWkZKVVZDQTlJRTVsT3dwOUNtWjFibU4wYVc5dUlGWXdLSE14TENCbExDQjBLU0I3Q2lBZ0lDQnNaWFFnYmlBOUlIUXVhWE5YWldKSFRESTdDaUFnSUNCbWRXNWpkR2x2YmlCcEtISXNJR0VnUFNCWWRDa2dld29nSUNBZ0lDQWdJR3hsZENCdkxDQmpJRDBnVVdVdVoyVjBWSEpoYm5ObVpYSW9ZU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUU5dUtTQnlaWFIxY200Z2N6RXVWVTVUU1VkT1JVUmZRbGxVUlRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1ptUXBJSEpsZEhWeWJpQnpNUzVWVGxOSlIwNUZSRjlUU0U5U1ZGODBYelJmTkY4ME93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQndaQ2tnY21WMGRYSnVJSE14TGxWT1UwbEhUa1ZFWDFOSVQxSlVYelZmTlY4MVh6RTdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJRjltS1NCeVpYUjFjbTRnY3pFdVFsbFVSVHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnZUdZcElISmxkSFZ5YmlCek1TNVRTRTlTVkRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1YyTXBJSEpsZEhWeWJpQnpNUzVWVGxOSlIwNUZSRjlUU0U5U1ZEc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdaR1FwSUhKbGRIVnliaUJ6TVM1SlRsUTdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJRXh1S1NCeVpYUjFjbTRnY3pFdVZVNVRTVWRPUlVSZlNVNVVPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0I0YmlrZ2NtVjBkWEp1SUhNeExrWk1UMEZVT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCVWN5a2djbVYwZFhKdUlHNGdQeUJ6TVM1SVFVeEdYMFpNVDBGVUlEb2dLRzhnUFNCbExtZGxkQ2dpVDBWVFgzUmxlSFIxY21WZmFHRnNabDltYkc5aGRDSXBMQ0J2SUNFOVBTQnVkV3hzSUQ4Z2J5NUlRVXhHWDBaTVQwRlVYMDlGVXlBNklHNTFiR3dwT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCMlppa2djbVYwZFhKdUlITXhMa0ZNVUVoQk93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQlhkQ2tnY21WMGRYSnVJSE14TGxKSFFrRTdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJSGxtS1NCeVpYUjFjbTRnY3pFdVRGVk5TVTVCVGtORk93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQk5aaWtnY21WMGRYSnVJSE14TGt4VlRVbE9RVTVEUlY5QlRGQklRVHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnYzJrcElISmxkSFZ5YmlCek1TNUVSVkJVU0Y5RFQwMVFUMDVGVGxRN0NpQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlGbHBLU0J5WlhSMWNtNGdjekV1UkVWUVZFaGZVMVJGVGtOSlREc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdjRzhwSUhKbGRIVnliaUJ2SUQwZ1pTNW5aWFFvSWtWWVZGOXpVa2RDSWlrc0lHOGdJVDA5SUc1MWJHd2dQeUJ2TGxOU1IwSmZRVXhRU0VGZlJWaFVJRG9nYm5Wc2JEc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdVMllwSUhKbGRIVnliaUJ6TVM1U1JVUTdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJRzFrS1NCeVpYUjFjbTRnY3pFdVVrVkVYMGxPVkVWSFJWSTdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJR0ptS1NCeVpYUjFjbTRnY3pFdVVrYzdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJR2RrS1NCeVpYUjFjbTRnY3pFdVVrZGZTVTVVUlVkRlVqc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdYMlFwSUhKbGRIVnliaUJ6TVM1U1IwSkJYMGxPVkVWSFJWSTdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJSGRoSUh4OElISWdQVDA5SUVGaElIeDhJSElnUFQwOUlGSmhJSHg4SUhJZ1BUMDlJRU5oS1NCcFppQW9ZeUE5UFQwZ2JuUXBJR2xtSUNodklEMGdaUzVuWlhRb0lsZEZRa2RNWDJOdmJYQnlaWE56WldSZmRHVjRkSFZ5WlY5ek0zUmpYM055WjJJaUtTd2dieUFoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdkMkVwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlUxSkhRbDlUTTFSRFgwUllWREZmUlZoVU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnUVdFcElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVMUpIUWw5QlRGQklRVjlUTTFSRFgwUllWREZmUlZoVU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnVW1FcElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVMUpIUWw5QlRGQklRVjlUTTFSRFgwUllWRE5mUlZoVU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnUTJFcElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVMUpIUWw5QlRGQklRVjlUTTFSRFgwUllWRFZmUlZoVU93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHZJRDBnWlM1blpYUW9JbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOXpNM1JqSWlrc0lHOGdJVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlIZGhLU0J5WlhSMWNtNGdieTVEVDAxUVVrVlRVMFZFWDFKSFFsOVRNMVJEWDBSWVZERmZSVmhVT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdRV0VwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENRVjlUTTFSRFgwUllWREZmUlZoVU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnVW1FcElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVa2RDUVY5VE0xUkRYMFJZVkROZlJWaFVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1EyRXBJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVWtkQ1FWOVRNMVJEWDBSWVZEVmZSVmhVT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2RXd2dmSHdnY2lBOVBUMGdaR3dnZkh3Z2NpQTlQVDBnWm13Z2ZId2djaUE5UFQwZ2NHd3BJR2xtSUNodklEMGdaUzVuWlhRb0lsZEZRa2RNWDJOdmJYQnlaWE56WldSZmRHVjRkSFZ5WlY5d2RuSjBZeUlwTENCdklDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCMWJDa2djbVYwZFhKdUlHOHVRMDlOVUZKRlUxTkZSRjlTUjBKZlVGWlNWRU5mTkVKUVVGWXhYMGxOUnpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJR1JzS1NCeVpYUjFjbTRnYnk1RFQwMVFVa1ZUVTBWRVgxSkhRbDlRVmxKVVExOHlRbEJRVmpGZlNVMUhPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1ptd3BJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVWtkQ1FWOVFWbEpVUTE4MFFsQlFWakZmU1UxSE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnY0d3cElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVa2RDUVY5UVZsSlVRMTh5UWxCUVZqRmZTVTFIT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1JXWXBJSEpsZEhWeWJpQnZJRDBnWlM1blpYUW9JbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOWxkR014SWlrc0lHOGdJVDA5SUc1MWJHd2dQeUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENYMFZVUXpGZlYwVkNSMHdnT2lCdWRXeHNPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0J0YkNCOGZDQnlJRDA5UFNCbmJDa2dhV1lnS0c4Z1BTQmxMbWRsZENnaVYwVkNSMHhmWTI5dGNISmxjM05sWkY5MFpYaDBkWEpsWDJWMFl5SXBMQ0J2SUNFOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0J0YkNrZ2NtVjBkWEp1SUdNZ1BUMDlJRzUwSUQ4Z2J5NURUMDFRVWtWVFUwVkVYMU5TUjBJNFgwVlVReklnT2lCdkxrTlBUVkJTUlZOVFJVUmZVa2RDT0Y5RlZFTXlPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1oyd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZSVlJETWw5RlFVTWdPaUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENRVGhmUlZSRE1sOUZRVU03Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSEpsZEhWeWJpQnVkV3hzT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCZmJDQjhmQ0J5SUQwOVBTQjRiQ0I4ZkNCeUlEMDlQU0IyYkNCOGZDQnlJRDA5UFNCNWJDQjhmQ0J5SUQwOVBTQk5iQ0I4ZkNCeUlEMDlQU0JUYkNCOGZDQnlJRDA5UFNCaWJDQjhmQ0J5SUQwOVBTQkZiQ0I4ZkNCeUlEMDlQU0JVYkNCOGZDQnlJRDA5UFNCM2JDQjhmQ0J5SUQwOVBTQkJiQ0I4ZkNCeUlEMDlQU0JTYkNCOGZDQnlJRDA5UFNCRGJDQjhmQ0J5SUQwOVBTQlFiQ2tnYVdZZ0tHOGdQU0JsTG1kbGRDZ2lWMFZDUjB4ZlkyOXRjSEpsYzNObFpGOTBaWGgwZFhKbFgyRnpkR01pS1N3Z2J5QWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1gyd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4MGVEUmZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTgwZURSZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2VHd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4MWVEUmZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTgxZURSZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2Rtd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4MWVEVmZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTgxZURWZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2VXd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4MmVEVmZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTgyZURWZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1RXd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4MmVEWmZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTgyZURaZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1Uyd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4NGVEVmZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTg0ZURWZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1ltd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4NGVEWmZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTg0ZURaZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1JXd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4NGVEaGZTMGhTSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFWTlVRMTg0ZURoZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1ZHd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4eE1IZzFYMHRJVWlBNklHOHVRMDlOVUZKRlUxTkZSRjlTUjBKQlgwRlRWRU5mTVRCNE5WOUxTRkk3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQjNiQ2tnY21WMGRYSnVJR01nUFQwOUlHNTBJRDhnYnk1RFQwMVFVa1ZUVTBWRVgxTlNSMEk0WDBGTVVFaEJPRjlCVTFSRFh6RXdlRFpmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4eE1IZzJYMHRJVWpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJRUZzS1NCeVpYUjFjbTRnWXlBOVBUMGdiblFnUHlCdkxrTlBUVkJTUlZOVFJVUmZVMUpIUWpoZlFVeFFTRUU0WDBGVFZFTmZNVEI0T0Y5TFNGSWdPaUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENRVjlCVTFSRFh6RXdlRGhmUzBoU093b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnVW13cElISmxkSFZ5YmlCaklEMDlQU0J1ZENBL0lHOHVRMDlOVUZKRlUxTkZSRjlUVWtkQ09GOUJURkJJUVRoZlFWTlVRMTh4TUhneE1GOUxTRklnT2lCdkxrTlBUVkJTUlZOVFJVUmZVa2RDUVY5QlUxUkRYekV3ZURFd1gwdElVanNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlFTnNLU0J5WlhSMWNtNGdZeUE5UFQwZ2JuUWdQeUJ2TGtOUFRWQlNSVk5UUlVSZlUxSkhRamhmUVV4UVNFRTRYMEZUVkVOZk1USjRNVEJmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4eE1uZ3hNRjlMU0ZJN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0JRYkNrZ2NtVjBkWEp1SUdNZ1BUMDlJRzUwSUQ4Z2J5NURUMDFRVWtWVFUwVkVYMU5TUjBJNFgwRk1VRWhCT0Y5QlUxUkRYekV5ZURFeVgwdElVaUE2SUc4dVEwOU5VRkpGVTFORlJGOVNSMEpCWDBGVFZFTmZNVEo0TVRKZlMwaFNPd29nSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnVUdFZ2ZId2djaUE5UFQwZ1RHd2dmSHdnY2lBOVBUMGdTV3dwSUdsbUlDaHZJRDBnWlM1blpYUW9Ja1ZZVkY5MFpYaDBkWEpsWDJOdmJYQnlaWE56YVc5dVgySndkR01pS1N3Z2J5QWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1VHRXBJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENYMEZNVUVoQlgwSlFWRU5mVlU1UFVrMWZSVmhVSURvZ2J5NURUMDFRVWtWVFUwVkVYMUpIUWtGZlFsQlVRMTlWVGs5U1RWOUZXRlE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQk1iQ2tnY21WMGRYSnVJRzh1UTA5TlVGSkZVMU5GUkY5U1IwSmZRbEJVUTE5VFNVZE9SVVJmUmt4UFFWUmZSVmhVT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdTV3dwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENYMEpRVkVOZlZVNVRTVWRPUlVSZlJreFBRVlJmUlZoVU93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdWR1lnZkh3Z2NpQTlQVDBnVld3Z2ZId2djaUE5UFQwZ1JHd2dmSHdnY2lBOVBUMGdUbXdwSUdsbUlDaHZJRDBnWlM1blpYUW9Ja1ZZVkY5MFpYaDBkWEpsWDJOdmJYQnlaWE56YVc5dVgzSm5kR01pS1N3Z2J5QWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1VHRXBJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVWtWRVgxSkhWRU14WDBWWVZEc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUZWc0tTQnlaWFIxY200Z2J5NURUMDFRVWtWVFUwVkVYMU5KUjA1RlJGOVNSVVJmVWtkVVF6RmZSVmhVT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdSR3dwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlVrVkVYMGRTUlVWT1gxSkhWRU15WDBWWVZEc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUU1c0tTQnlaWFIxY200Z2J5NURUMDFRVWtWVFUwVkVYMU5KUjA1RlJGOVNSVVJmUjFKRlJVNWZVa2RVUXpKZlJWaFVPd29nSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjaUE5UFQwZ2FXa2dQeUJ1SUQ4Z2N6RXVWVTVUU1VkT1JVUmZTVTVVWHpJMFh6Z2dPaUFvYnlBOUlHVXVaMlYwS0NKWFJVSkhURjlrWlhCMGFGOTBaWGgwZFhKbElpa3NJRzhnSVQwOUlHNTFiR3dnUHlCdkxsVk9VMGxIVGtWRVgwbE9WRjh5TkY4NFgxZEZRa2RNSURvZ2JuVnNiQ2tnT2lCek1WdHlYU0FoUFQwZ2RtOXBaQ0F3SUQ4Z2N6RmJjbDBnT2lCdWRXeHNPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JqYjI1MlpYSjBPaUJwQ2lBZ0lDQjlPd3A5Q25aaGNpQlVieUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdlWFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlGdGRLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpRWEp5WVhsRFlXMWxjbUVnUFNBaE1Dd2dkR2hwY3k1allXMWxjbUZ6SUQwZ1pUc0tJQ0FnSUgwS2ZTd2dkR2tnUFNCamJHRnpjeUJsZUhSbGJtUnpJRXBsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzBkeWIzVndJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pIY205MWNDSTdDaUFnSUNCOUNuMHNJR3N3SUQwZ2V3b2dJQ0FnZEhsd1pUb2dJbTF2ZG1VaUNuMHNJRk56SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCMGFHbHpMbDkwWVhKblpYUlNZWGtnUFNCdWRXeHNMQ0IwYUdsekxsOW5jbWx3SUQwZ2JuVnNiQ3dnZEdocGN5NWZhR0Z1WkNBOUlHNTFiR3c3Q2lBZ0lDQjlDaUFnSUNCblpYUklZVzVrVTNCaFkyVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyaGhibVFnUFQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WDJoaGJtUWdQU0J1WlhjZ2RHa3NJSFJvYVhNdVgyaGhibVF1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUNFeExDQjBhR2x6TGw5b1lXNWtMblpwYzJsaWJHVWdQU0FoTVN3Z2RHaHBjeTVmYUdGdVpDNXFiMmx1ZEhNZ1BTQjdmU3dnZEdocGN5NWZhR0Z1WkM1cGJuQjFkRk4wWVhSbElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCd2FXNWphR2x1WnpvZ0lURUtJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NWZhR0Z1WkRzS0lDQWdJSDBLSUNBZ0lHZGxkRlJoY21kbGRGSmhlVk53WVdObEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MFlYSm5aWFJTWVhrZ1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVgzUmhjbWRsZEZKaGVTQTlJRzVsZHlCMGFTd2dkR2hwY3k1ZmRHRnlaMlYwVW1GNUxtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNU3dnZEdocGN5NWZkR0Z5WjJWMFVtRjVMblpwYzJsaWJHVWdQU0FoTVN3Z2RHaHBjeTVmZEdGeVoyVjBVbUY1TG1oaGMweHBibVZoY2xabGJHOWphWFI1SUQwZ0lURXNJSFJvYVhNdVgzUmhjbWRsZEZKaGVTNXNhVzVsWVhKV1pXeHZZMmwwZVNBOUlHNWxkeUJCTENCMGFHbHpMbDkwWVhKblpYUlNZWGt1YUdGelFXNW5kV3hoY2xabGJHOWphWFI1SUQwZ0lURXNJSFJvYVhNdVgzUmhjbWRsZEZKaGVTNWhibWQxYkdGeVZtVnNiMk5wZEhrZ1BTQnVaWGNnUVNrc0lIUm9hWE11WDNSaGNtZGxkRkpoZVRzS0lDQWdJSDBLSUNBZ0lHZGxkRWR5YVhCVGNHRmpaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaM0pwY0NBOVBUMGdiblZzYkNBbUppQW9kR2hwY3k1ZlozSnBjQ0E5SUc1bGR5QjBhU3dnZEdocGN5NWZaM0pwY0M1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUQwZ0lURXNJSFJvYVhNdVgyZHlhWEF1ZG1semFXSnNaU0E5SUNFeExDQjBhR2x6TGw5bmNtbHdMbWhoYzB4cGJtVmhjbFpsYkc5amFYUjVJRDBnSVRFc0lIUm9hWE11WDJkeWFYQXViR2x1WldGeVZtVnNiMk5wZEhrZ1BTQnVaWGNnUVN3Z2RHaHBjeTVmWjNKcGNDNW9ZWE5CYm1kMWJHRnlWbVZzYjJOcGRIa2dQU0FoTVN3Z2RHaHBjeTVmWjNKcGNDNWhibWQxYkdGeVZtVnNiMk5wZEhrZ1BTQnVaWGNnUVNrc0lIUm9hWE11WDJkeWFYQTdDaUFnSUNCOUNpQWdJQ0JrYVhOd1lYUmphRVYyWlc1MEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRHRnlaMlYwVW1GNUlDRTlQU0J1ZFd4c0lDWW1JSFJvYVhNdVgzUmhjbWRsZEZKaGVTNWthWE53WVhSamFFVjJaVzUwS0dVcExDQjBhR2x6TGw5bmNtbHdJQ0U5UFNCdWRXeHNJQ1ltSUhSb2FYTXVYMmR5YVhBdVpHbHpjR0YwWTJoRmRtVnVkQ2hsS1N3Z2RHaHBjeTVmYUdGdVpDQWhQVDBnYm5Wc2JDQW1KaUIwYUdsekxsOW9ZVzVrTG1ScGMzQmhkR05vUlhabGJuUW9aU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjI1dVpXTjBLR1VwSUhzS0lDQWdJQ0FnSUNCcFppQW9aU0FtSmlCbExtaGhibVFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TGw5b1lXNWtPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9kQ2tnWm05eUlDaHNaWFFnYmlCdlppQmxMbWhoYm1RdWRtRnNkV1Z6S0NrcGRHaHBjeTVmWjJWMFNHRnVaRXB2YVc1MEtIUXNJRzRwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWthWE53WVhSamFFVjJaVzUwS0hzS0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ltTnZibTVsWTNSbFpDSXNDaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJR1VLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdScGMyTnZibTVsWTNRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFpWkdselkyOXVibVZqZEdWa0lpd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2daUW9nSUNBZ0lDQWdJSDBwTENCMGFHbHpMbDkwWVhKblpYUlNZWGtnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WDNSaGNtZGxkRkpoZVM1MmFYTnBZbXhsSUQwZ0lURXBMQ0IwYUdsekxsOW5jbWx3SUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TGw5bmNtbHdMblpwYzJsaWJHVWdQU0FoTVNrc0lIUm9hWE11WDJoaGJtUWdJVDA5SUc1MWJHd2dKaVlnS0hSb2FYTXVYMmhoYm1RdWRtbHphV0pzWlNBOUlDRXhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVkV3hzTENCeUlEMGdiblZzYkN3Z1lTQTlJRzUxYkd3c0lHOGdQU0IwYUdsekxsOTBZWEpuWlhSU1lYa3NJR01nUFNCMGFHbHpMbDluY21sd0xDQnNJRDBnZEdocGN5NWZhR0Z1WkRzS0lDQWdJQ0FnSUNCcFppQW9aU0FtSmlCMExuTmxjM05wYjI0dWRtbHphV0pwYkdsMGVWTjBZWFJsSUNFOVBTQWlkbWx6YVdKc1pTMWliSFZ5Y21Wa0lpa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9iQ0FtSmlCbExtaGhibVFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFZ1BTQWhNRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJRjhnYjJZZ1pTNW9ZVzVrTG5aaGJIVmxjeWdwS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWnlBOUlIUXVaMlYwU205cGJuUlFiM05sS0Y4c0lHNHBMQ0J3SUQwZ2RHaHBjeTVmWjJWMFNHRnVaRXB2YVc1MEtHd3NJRjhwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHY2dJVDA5SUc1MWJHd2dKaVlnS0hBdWJXRjBjbWw0TG1aeWIyMUJjbkpoZVNobkxuUnlZVzV6Wm05eWJTNXRZWFJ5YVhncExDQndMbTFoZEhKcGVDNWtaV052YlhCdmMyVW9jQzV3YjNOcGRHbHZiaXdnY0M1eWIzUmhkR2x2Yml3Z2NDNXpZMkZzWlNrc0lIQXViV0YwY21sNFYyOXliR1JPWldWa2MxVndaR0YwWlNBOUlDRXdMQ0J3TG1wdmFXNTBVbUZrYVhWeklEMGdaeTV5WVdScGRYTXBMQ0J3TG5acGMybGliR1VnUFNCbklDRTlQU0J1ZFd4c093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCc0xtcHZhVzUwYzFzaWFXNWtaWGd0Wm1sdVoyVnlMWFJwY0NKZExDQjFJRDBnYkM1cWIybHVkSE5iSW5Sb2RXMWlMWFJwY0NKZExDQmtJRDBnYUM1d2IzTnBkR2x2Ymk1a2FYTjBZVzVqWlZSdktIVXVjRzl6YVhScGIyNHBMQ0JtSUQwZ0xqQXlMQ0J0SUQwZ0xqQXdOVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3d1YVc1d2RYUlRkR0YwWlM1d2FXNWphR2x1WnlBbUppQmtJRDRnWmlBcklHMGdQeUFvYkM1cGJuQjFkRk4wWVhSbExuQnBibU5vYVc1bklEMGdJVEVzSUhSb2FYTXVaR2x6Y0dGMFkyaEZkbVZ1ZENoN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0luQnBibU5vWlc1a0lpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a1pXUnVaWE56T2lCbExtaGhibVJsWkc1bGMzTXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBPaUIwYUdsekNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtTa2dPaUFoYkM1cGJuQjFkRk4wWVhSbExuQnBibU5vYVc1bklDWW1JR1FnUEQwZ1ppQXRJRzBnSmlZZ0tHd3VhVzV3ZFhSVGRHRjBaUzV3YVc1amFHbHVaeUE5SUNFd0xDQjBhR2x6TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0p3YVc1amFITjBZWEowSWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrWldSdVpYTnpPaUJsTG1oaGJtUmxaRzVsYzNNc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWME9pQjBhR2x6Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQmpJQ0U5UFNCdWRXeHNJQ1ltSUdVdVozSnBjRk53WVdObElDWW1JQ2h5SUQwZ2RDNW5aWFJRYjNObEtHVXVaM0pwY0ZOd1lXTmxMQ0J1S1N3Z2NpQWhQVDBnYm5Wc2JDQW1KaUFvWXk1dFlYUnlhWGd1Wm5KdmJVRnljbUY1S0hJdWRISmhibk5tYjNKdExtMWhkSEpwZUNrc0lHTXViV0YwY21sNExtUmxZMjl0Y0c5elpTaGpMbkJ2YzJsMGFXOXVMQ0JqTG5KdmRHRjBhVzl1TENCakxuTmpZV3hsS1N3Z1l5NXRZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsSUQwZ0lUQXNJSEl1YkdsdVpXRnlWbVZzYjJOcGRIa2dQeUFvWXk1b1lYTk1hVzVsWVhKV1pXeHZZMmwwZVNBOUlDRXdMQ0JqTG14cGJtVmhjbFpsYkc5amFYUjVMbU52Y0hrb2NpNXNhVzVsWVhKV1pXeHZZMmwwZVNrcElEb2dZeTVvWVhOTWFXNWxZWEpXWld4dlkybDBlU0E5SUNFeExDQnlMbUZ1WjNWc1lYSldaV3h2WTJsMGVTQS9JQ2hqTG1oaGMwRnVaM1ZzWVhKV1pXeHZZMmwwZVNBOUlDRXdMQ0JqTG1GdVozVnNZWEpXWld4dlkybDBlUzVqYjNCNUtISXVZVzVuZFd4aGNsWmxiRzlqYVhSNUtTa2dPaUJqTG1oaGMwRnVaM1ZzWVhKV1pXeHZZMmwwZVNBOUlDRXhLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHOGdJVDA5SUc1MWJHd2dKaVlnS0drZ1BTQjBMbWRsZEZCdmMyVW9aUzUwWVhKblpYUlNZWGxUY0dGalpTd2diaWtzSUdrZ1BUMDlJRzUxYkd3Z0ppWWdjaUFoUFQwZ2JuVnNiQ0FtSmlBb2FTQTlJSElwTENCcElDRTlQU0J1ZFd4c0lDWW1JQ2h2TG0xaGRISnBlQzVtY205dFFYSnlZWGtvYVM1MGNtRnVjMlp2Y20wdWJXRjBjbWw0S1N3Z2J5NXRZWFJ5YVhndVpHVmpiMjF3YjNObEtHOHVjRzl6YVhScGIyNHNJRzh1Y205MFlYUnBiMjRzSUc4dWMyTmhiR1VwTENCdkxtMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VnUFNBaE1Dd2dhUzVzYVc1bFlYSldaV3h2WTJsMGVTQS9JQ2h2TG1oaGMweHBibVZoY2xabGJHOWphWFI1SUQwZ0lUQXNJRzh1YkdsdVpXRnlWbVZzYjJOcGRIa3VZMjl3ZVNocExteHBibVZoY2xabGJHOWphWFI1S1NrZ09pQnZMbWhoYzB4cGJtVmhjbFpsYkc5amFYUjVJRDBnSVRFc0lHa3VZVzVuZFd4aGNsWmxiRzlqYVhSNUlEOGdLRzh1YUdGelFXNW5kV3hoY2xabGJHOWphWFI1SUQwZ0lUQXNJRzh1WVc1bmRXeGhjbFpsYkc5amFYUjVMbU52Y0hrb2FTNWhibWQxYkdGeVZtVnNiMk5wZEhrcEtTQTZJRzh1YUdGelFXNW5kV3hoY2xabGJHOWphWFI1SUQwZ0lURXNJSFJvYVhNdVpHbHpjR0YwWTJoRmRtVnVkQ2hyTUNrcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOGdJVDA5SUc1MWJHd2dKaVlnS0c4dWRtbHphV0pzWlNBOUlHa2dJVDA5SUc1MWJHd3BMQ0JqSUNFOVBTQnVkV3hzSUNZbUlDaGpMblpwYzJsaWJHVWdQU0J5SUNFOVBTQnVkV3hzS1N3Z2JDQWhQVDBnYm5Wc2JDQW1KaUFvYkM1MmFYTnBZbXhsSUQwZ1lTQWhQVDBnYm5Wc2JDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmZaMlYwU0dGdVpFcHZhVzUwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1pTNXFiMmx1ZEhOYmRDNXFiMmx1ZEU1aGJXVmRJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0Z1BTQnVaWGNnZEdrN0NpQWdJQ0FnSUNBZ0lDQWdJRzR1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUNFeExDQnVMblpwYzJsaWJHVWdQU0FoTVN3Z1pTNXFiMmx1ZEhOYmRDNXFiMmx1ZEU1aGJXVmRJRDBnYml3Z1pTNWhaR1FvYmlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtcHZhVzUwYzF0MExtcHZhVzUwVG1GdFpWMDdDaUFnSUNCOUNuMHNJSGR2SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJUZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzTENCb0tYc0tJQ0FnSUNBZ0lDQnBaaUFvYUNBOUlHZ2dJVDA5SUhadmFXUWdNQ0EvSUdnZ09pQnphU3dnYUNBaFBUMGdjMmtnSmlZZ2FDQWhQVDBnV1drcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaVJHVndkR2hVWlhoMGRYSmxJR1p2Y20xaGRDQnRkWE4wSUdKbElHVnBkR2hsY2lCVVNGSkZSUzVFWlhCMGFFWnZjbTFoZENCdmNpQlVTRkpGUlM1RVpYQjBhRk4wWlc1amFXeEdiM0p0WVhRaUtUc0tJQ0FnSUNBZ0lDQnVJRDA5UFNCMmIybGtJREFnSmlZZ2FDQTlQVDBnYzJrZ0ppWWdLRzRnUFNCTWJpa3NJRzRnUFQwOUlIWnZhV1FnTUNBbUppQm9JRDA5UFNCWmFTQW1KaUFvYmlBOUlHbHBLU3dnYzNWd1pYSW9iblZzYkN3Z2FTd2djaXdnWVN3Z2J5d2dZeXdnYUN3Z2Jpd2diQ2tzSUhSb2FYTXVhWE5FWlhCMGFGUmxlSFIxY21VZ1BTQWhNQ3dnZEdocGN5NXBiV0ZuWlNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2RBb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWJXRm5SbWxzZEdWeUlEMGdieUFoUFQwZ2RtOXBaQ0F3SUQ4Z2J5QTZJSEIwTENCMGFHbHpMbTFwYmtacGJIUmxjaUE5SUdNZ0lUMDlJSFp2YVdRZ01DQS9JR01nT2lCd2RDd2dkR2hwY3k1bWJHbHdXU0E5SUNFeExDQjBhR2x6TG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUNFeExDQjBhR2x6TG1OdmJYQmhjbVZHZFc1amRHbHZiaUE5SUc1MWJHdzdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTVqYjIxd1lYSmxSblZ1WTNScGIyNGdQU0JsTG1OdmJYQmhjbVZHZFc1amRHbHZiaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0J6ZFhCbGNpNTBiMHBUVDA0b1pTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dGNHRnlaVVoxYm1OMGFXOXVJQ0U5UFNCdWRXeHNJQ1ltSUNoMExtTnZiWEJoY21WR2RXNWpkR2x2YmlBOUlIUm9hWE11WTI5dGNHRnlaVVoxYm1OMGFXOXVLU3dnZERzS0lDQWdJSDBLZlN3Z1FXOGdQU0JqYkdGemN5QmxlSFJsYm1SeklITnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMQ0JwSUQwZ2JuVnNiQ3dnY2lBOUlERXNJR0VnUFNCdWRXeHNMQ0J2SUQwZ0lteHZZMkZzTFdac2IyOXlJaXdnWXlBOUlERXNJR3dnUFNCdWRXeHNMQ0JvSUQwZ2JuVnNiQ3dnZFNBOUlHNTFiR3dzSUdRZ1BTQnVkV3hzTENCbUlEMGdiblZzYkN3Z2JTQTlJRzUxYkd3c0lGOGdQU0IwTG1kbGRFTnZiblJsZUhSQmRIUnlhV0oxZEdWektDa3NJR2NnUFNCdWRXeHNMQ0J3SUQwZ2JuVnNiQ3dnZGlBOUlGdGRMQ0I0SUQwZ1cxMHNJSGtnUFNCdVpYY2dlWFE3Q2lBZ0lDQWdJQ0FnZVM1c1lYbGxjbk11Wlc1aFlteGxLREVwTENCNUxuWnBaWGR3YjNKMElEMGdibVYzSUdwbE93b2dJQ0FnSUNBZ0lHeGxkQ0JpSUQwZ2JtVjNJSGwwT3dvZ0lDQWdJQ0FnSUdJdWJHRjVaWEp6TG1WdVlXSnNaU2d5S1N3Z1lpNTJhV1YzY0c5eWRDQTlJRzVsZHlCcVpUc0tJQ0FnSUNBZ0lDQnNaWFFnZHlBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnZVN3S0lDQWdJQ0FnSUNBZ0lDQWdZZ29nSUNBZ0lDQWdJRjBzSUZJZ1BTQnVaWGNnVkc4N0NpQWdJQ0FnSUNBZ1VpNXNZWGxsY25NdVpXNWhZbXhsS0RFcExDQlNMbXhoZVdWeWN5NWxibUZpYkdVb01pazdDaUFnSUNBZ0lDQWdiR1YwSUVrZ1BTQnVkV3hzTENCTklEMGdiblZzYkRzS0lDQWdJQ0FnSUNCMGFHbHpMbU5oYldWeVlVRjFkRzlWY0dSaGRHVWdQU0FoTUN3Z2RHaHBjeTVsYm1GaWJHVmtJRDBnSVRFc0lIUm9hWE11YVhOUWNtVnpaVzUwYVc1bklEMGdJVEVzSUhSb2FYTXVaMlYwUTI5dWRISnZiR3hsY2lBOUlHWjFibU4wYVc5dUtFUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRWNnUFNCMlcwUmRPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUnlBOVBUMGdkbTlwWkNBd0lDWW1JQ2hISUQwZ2JtVjNJRk56TENCMlcwUmRJRDBnUnlrc0lFY3VaMlYwVkdGeVoyVjBVbUY1VTNCaFkyVW9LVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbWRsZEVOdmJuUnliMnhzWlhKSGNtbHdJRDBnWm5WdVkzUnBiMjRvUkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1J5QTlJSFpiUkYwN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkhJRDA5UFNCMmIybGtJREFnSmlZZ0tFY2dQU0J1WlhjZ1UzTXNJSFpiUkYwZ1BTQkhLU3dnUnk1blpYUkhjbWx3VTNCaFkyVW9LVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbWRsZEVoaGJtUWdQU0JtZFc1amRHbHZiaWhFS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSElEMGdkbHRFWFRzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFY2dQVDA5SUhadmFXUWdNQ0FtSmlBb1J5QTlJRzVsZHlCVGN5d2dkbHRFWFNBOUlFY3BMQ0JITG1kbGRFaGhibVJUY0dGalpTZ3BPd29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnVkNoRUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQkhJRDBnZUM1cGJtUmxlRTltS0VRdWFXNXdkWFJUYjNWeVkyVXBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9SeUE5UFQwZ0xURXBJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHaGxJRDBnZGx0SFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYUdVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYUdVdWRYQmtZWFJsS0VRdWFXNXdkWFJUYjNWeVkyVXNJRVF1Wm5KaGJXVXNJR3dnZkh3Z1lTa3NJR2hsTG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1JDNTBlWEJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dSQzVwYm5CMWRGTnZkWEpqWlFvZ0lDQWdJQ0FnSUNBZ0lDQjlLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUU4b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdrdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljMlZzWldOMElpd2dWQ2tzSUdrdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljMlZzWldOMGMzUmhjblFpTENCVUtTd2dhUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKelpXeGxZM1JsYm1RaUxDQlVLU3dnYVM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSnpjWFZsWlhwbElpd2dWQ2tzSUdrdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljM0YxWldWNlpYTjBZWEowSWl3Z1ZDa3NJR2t1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWMzRjFaV1Y2WldWdVpDSXNJRlFwTENCcExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbVZ1WkNJc0lFOHBMQ0JwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ltbHVjSFYwYzI5MWNtTmxjMk5vWVc1blpTSXNJRmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFUWdQU0F3T3lCRUlEd2dkaTVzWlc1bmRHZzdJRVFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSeUE5SUhoYlJGMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkhJQ0U5UFNCdWRXeHNJQ1ltSUNoNFcwUmRJRDBnYm5Wc2JDd2dkbHRFWFM1a2FYTmpiMjV1WldOMEtFY3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JKSUQwZ2JuVnNiQ3dnVFNBOUlHNTFiR3dzSUdVdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0djcExDQm1JRDBnYm5Wc2JDd2daQ0E5SUc1MWJHd3NJSFVnUFNCdWRXeHNMQ0JwSUQwZ2JuVnNiQ3dnY0NBOUlHNTFiR3dzSUVzdWMzUnZjQ2dwTENCdUxtbHpVSEpsYzJWdWRHbHVaeUE5SUNFeExDQnVMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSW5ObGMzTnBiMjVsYm1RaUNpQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVaeVlXMWxZblZtWm1WeVUyTmhiR1ZHWVdOMGIzSWdQU0JtZFc1amRHbHZiaWhFS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSElnUFNCRUxDQnVMbWx6VUhKbGMyVnVkR2x1WnlBOVBUMGdJVEFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pZVWsxaGJtRm5aWEk2SUVOaGJtNXZkQ0JqYUdGdVoyVWdabkpoYldWaWRXWm1aWElnYzJOaGJHVWdkMmhwYkdVZ2NISmxjMlZ1ZEdsdVp5NGlLVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbk5sZEZKbFptVnlaVzVqWlZOd1lXTmxWSGx3WlNBOUlHWjFibU4wYVc5dUtFUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJRVFzSUc0dWFYTlFjbVZ6Wlc1MGFXNW5JRDA5UFNBaE1DQW1KaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlsaFNUV0Z1WVdkbGNqb2dRMkZ1Ym05MElHTm9ZVzVuWlNCeVpXWmxjbVZ1WTJVZ2MzQmhZMlVnZEhsd1pTQjNhR2xzWlNCd2NtVnpaVzUwYVc1bkxpSXBPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaMlYwVW1WbVpYSmxibU5sVTNCaFkyVWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHd2dmSHdnWVRzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRGSmxabVZ5Wlc1alpWTndZV05sSUQwZ1puVnVZM1JwYjI0b1JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc0lEMGdSRHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbWRsZEVKaGMyVk1ZWGxsY2lBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWkNBaFBUMGdiblZzYkNBL0lHUWdPaUJtT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WjJWMFFtbHVaR2x1WnlBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZFRzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1kbGRFWnlZVzFsSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ0T3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WjJWMFUyVnpjMmx2YmlBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVRzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRGTmxjM05wYjI0Z1BTQmhjM2x1WXlCbWRXNWpkR2x2YmloRUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDBnUkN3Z2FTQWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0djZ1BTQmxMbWRsZEZKbGJtUmxjbFJoY21kbGRDZ3BMQ0JwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW5ObGJHVmpkQ0lzSUZRcExDQnBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9Jbk5sYkdWamRITjBZWEowSWl3Z1ZDa3NJR2t1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpYzJWc1pXTjBaVzVrSWl3Z1ZDa3NJR2t1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpYzNGMVpXVjZaU0lzSUZRcExDQnBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9Jbk54ZFdWbGVtVnpkR0Z5ZENJc0lGUXBMQ0JwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW5OeGRXVmxlbVZsYm1RaUxDQlVLU3dnYVM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKbGJtUWlMQ0JQS1N3Z2FTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSnBibkIxZEhOdmRYSmpaWE5qYUdGdVoyVWlMQ0JaS1N3Z1h5NTRja052YlhCaGRHbGliR1VnSVQwOUlDRXdJQ1ltSUdGM1lXbDBJSFF1YldGclpWaFNRMjl0Y0dGMGFXSnNaU2dwTENCcExuSmxibVJsY2xOMFlYUmxMbXhoZVdWeWN5QTlQVDBnZG05cFpDQXdJSHg4SUdVdVkyRndZV0pwYkdsMGFXVnpMbWx6VjJWaVIwd3lJRDA5UFNBaE1Ta2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkhJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYm5ScFlXeHBZWE02SUdrdWNtVnVaR1Z5VTNSaGRHVXViR0Y1WlhKeklEMDlQU0IyYjJsa0lEQWdQeUJmTG1GdWRHbGhiR2xoY3lBNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhiSEJvWVRvZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvT2lCZkxtUmxjSFJvTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdWdVkybHNPaUJmTG5OMFpXNWphV3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5WVcxbFluVm1abVZ5VTJOaGJHVkdZV04wYjNJNklISUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWWdQU0J1WlhjZ1dGSlhaV0pIVEV4aGVXVnlLR2tzSUhRc0lFY3BMQ0JwTG5Wd1pHRjBaVkpsYm1SbGNsTjBZWFJsS0hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpVeGhlV1Z5T2lCbUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2tzSUhBZ1BTQnVaWGNnY1hRb1ppNW1jbUZ0WldKMVptWmxjbGRwWkhSb0xDQm1MbVp5WVcxbFluVm1abVZ5U0dWcFoyaDBMQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y20xaGREb2dWM1FzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklFOXVMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2xOd1lXTmxPaUJsTG05MWRIQjFkRU52Ykc5eVUzQmhZMlVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWlc1amFXeENkV1ptWlhJNklGOHVjM1JsYm1OcGJBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSeUE5SUc1MWJHd3NJR2hsSUQwZ2JuVnNiQ3dnWm1VZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOHVaR1Z3ZEdnZ0ppWWdLR1psSUQwZ1h5NXpkR1Z1WTJsc0lEOGdkQzVFUlZCVVNESTBYMU5VUlU1RFNVdzRJRG9nZEM1RVJWQlVTRjlEVDAxUVQwNUZUbFF5TkN3Z1J5QTlJRjh1YzNSbGJtTnBiQ0EvSUZscElEb2djMmtzSUdobElEMGdYeTV6ZEdWdVkybHNJRDhnYVdrZ09pQk1iaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjlsSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZja1p2Y20xaGREb2dkQzVTUjBKQk9Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hHYjNKdFlYUTZJR1psTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pVWmhZM1J2Y2pvZ2Nnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RTQTlJRzVsZHlCWVVsZGxZa2RNUW1sdVpHbHVaeWhwTENCMEtTd2daQ0E5SUhVdVkzSmxZWFJsVUhKdmFtVmpkR2x2Ymt4aGVXVnlLRjlsS1N3Z2FTNTFjR1JoZEdWU1pXNWtaWEpUZEdGMFpTaDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhlV1Z5Y3pvZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrc0lIQWdQU0J1WlhjZ2NYUW9aQzUwWlhoMGRYSmxWMmxrZEdnc0lHUXVkR1Y0ZEhWeVpVaGxhV2RvZEN3Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSnRZWFE2SUZkMExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJQYml3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHaFVaWGgwZFhKbE9pQnVaWGNnZDI4b1pDNTBaWGgwZFhKbFYybGtkR2dzSUdRdWRHVjRkSFZ5WlVobGFXZG9kQ3dnYUdVc0lIWnZhV1FnTUN3Z2RtOXBaQ0F3TENCMmIybGtJREFzSUhadmFXUWdNQ3dnZG05cFpDQXdMQ0IyYjJsa0lEQXNJRWNwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdWdVkybHNRblZtWm1WeU9pQmZMbk4wWlc1amFXd3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5VTNCaFkyVTZJR1V1YjNWMGNIVjBRMjlzYjNKVGNHRmpaU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMkZ0Y0d4bGN6b2dYeTVoYm5ScFlXeHBZWE1nUHlBMElEb2dNQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCM1pTQTlJR1V1Y0hKdmNHVnlkR2xsY3k1blpYUW9jQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVXVYMTlwWjI1dmNtVkVaWEIwYUZaaGJIVmxjeUE5SUdRdWFXZHViM0psUkdWd2RHaFdZV3gxWlhNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd0xtbHpXRkpTWlc1a1pYSlVZWEpuWlhRZ1BTQWhNQ3dnZEdocGN5NXpaWFJHYjNabFlYUnBiMjRvWXlrc0lHd2dQU0J1ZFd4c0xDQmhJRDBnWVhkaGFYUWdhUzV5WlhGMVpYTjBVbVZtWlhKbGJtTmxVM0JoWTJVb2J5a3NJRXN1YzJWMFEyOXVkR1Y0ZENocEtTd2dTeTV6ZEdGeWRDZ3BMQ0J1TG1selVISmxjMlZ1ZEdsdVp5QTlJQ0V3TENCdUxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKelpYTnphVzl1YzNSaGNuUWlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVoyVjBSVzUyYVhKdmJtMWxiblJDYkdWdVpFMXZaR1VnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUc1MWJHd3BJSEpsZEhWeWJpQnBMbVZ1ZG1seWIyNXRaVzUwUW14bGJtUk5iMlJsT3dvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1dTaEVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1J5QTlJREE3SUVjZ1BDQkVMbkpsYlc5MlpXUXViR1Z1WjNSb095QkhLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHaGxJRDBnUkM1eVpXMXZkbVZrVzBkZExDQm1aU0E5SUhndWFXNWtaWGhQWmlob1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1aU0ErUFNBd0lDWW1JQ2g0VzJabFhTQTlJRzUxYkd3c0lIWmJabVZkTG1ScGMyTnZibTVsWTNRb2FHVXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRWNnUFNBd095QkhJRHdnUkM1aFpHUmxaQzVzWlc1bmRHZzdJRWNyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhR1VnUFNCRUxtRmtaR1ZrVzBkZExDQm1aU0E5SUhndWFXNWtaWGhQWmlob1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1VZ1BUMDlJQzB4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjNaU0E5SURBN0lIZGxJRHdnZGk1c1pXNW5kR2c3SUhkbEt5c3BhV1lnS0hkbElENDlJSGd1YkdWdVozUm9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGd1Y0hWemFDaG9aU2tzSUdabElEMGdkMlU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZUZ0M1pWMGdQVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRnQzWlYwZ1BTQm9aU3dnWm1VZ1BTQjNaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1aU0E5UFQwZ0xURXBJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjlsSUQwZ2RsdG1aVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWlNBbUppQmZaUzVqYjI1dVpXTjBLR2hsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ0pDQTlJRzVsZHlCQkxDQlZJRDBnYm1WM0lFRTdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdlaWhFTENCSExDQm9aU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWtMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloSExtMWhkSEpwZUZkdmNteGtLU3dnVlM1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9hR1V1YldGMGNtbDRWMjl5YkdRcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptVWdQU0FrTG1ScGMzUmhibU5sVkc4b1ZTa3NJRjlsSUQwZ1J5NXdjbTlxWldOMGFXOXVUV0YwY21sNExtVnNaVzFsYm5SekxDQjNaU0E5SUdobExuQnliMnBsWTNScGIyNU5ZWFJ5YVhndVpXeGxiV1Z1ZEhNc0lFVmxJRDBnWDJWYk1UUmRJQzhnS0Y5bFd6RXdYU0F0SURFcExDQlVaU0E5SUY5bFd6RTBYU0F2SUNoZlpWc3hNRjBnS3lBeEtTd2dXV1VnUFNBb1gyVmJPVjBnS3lBeEtTQXZJRjlsV3pWZExDQnBkQ0E5SUNoZlpWczVYU0F0SURFcElDOGdYMlZiTlYwc0lFTmxJRDBnS0Y5bFd6aGRJQzBnTVNrZ0x5QmZaVnN3WFN3Z1RDQTlJQ2gzWlZzNFhTQXJJREVwSUM4Z2QyVmJNRjBzSUc5bElEMGdSV1VnS2lCRFpTd2dXQ0E5SUVWbElDb2dUQ3dnYVdVZ1BTQm1aU0F2SUNndFEyVWdLeUJNS1N3Z1NpQTlJR2xsSUNvZ0xVTmxPd29nSUNBZ0lDQWdJQ0FnSUNCSExtMWhkSEpwZUZkdmNteGtMbVJsWTI5dGNHOXpaU2hFTG5CdmMybDBhVzl1TENCRUxuRjFZWFJsY201cGIyNHNJRVF1YzJOaGJHVXBMQ0JFTG5SeVlXNXpiR0YwWlZnb1Npa3NJRVF1ZEhKaGJuTnNZWFJsV2locFpTa3NJRVF1YldGMGNtbDRWMjl5YkdRdVkyOXRjRzl6WlNoRUxuQnZjMmwwYVc5dUxDQkVMbkYxWVhSbGNtNXBiMjRzSUVRdWMyTmhiR1VwTENCRUxtMWhkSEpwZUZkdmNteGtTVzUyWlhKelpTNWpiM0I1S0VRdWJXRjBjbWw0VjI5eWJHUXBMbWx1ZG1WeWRDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVMlVnUFNCRlpTQXJJR2xsTENCdFpTQTlJRlJsSUNzZ2FXVXNJSGxsSUQwZ2IyVWdMU0JLTENCT1pTQTlJRmdnS3lBb1ptVWdMU0JLS1N3Z2NXVWdQU0JaWlNBcUlGUmxJQzhnYldVZ0tpQlRaU3dnY25RZ1BTQnBkQ0FxSUZSbElDOGdiV1VnS2lCVFpUc0tJQ0FnSUNBZ0lDQWdJQ0FnUkM1d2NtOXFaV04wYVc5dVRXRjBjbWw0TG0xaGEyVlFaWEp6Y0dWamRHbDJaU2g1WlN3Z1RtVXNJSEZsTENCeWRDd2dVMlVzSUcxbEtTd2dSQzV3Y205cVpXTjBhVzl1VFdGMGNtbDRTVzUyWlhKelpTNWpiM0I1S0VRdWNISnZhbVZqZEdsdmJrMWhkSEpwZUNrdWFXNTJaWEowS0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlIRW9SQ3dnUnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JISUQwOVBTQnVkV3hzSUQ4Z1JDNXRZWFJ5YVhoWGIzSnNaQzVqYjNCNUtFUXViV0YwY21sNEtTQTZJRVF1YldGMGNtbDRWMjl5YkdRdWJYVnNkR2x3YkhsTllYUnlhV05sY3loSExtMWhkSEpwZUZkdmNteGtMQ0JFTG0xaGRISnBlQ2tzSUVRdWJXRjBjbWw0VjI5eWJHUkpiblpsY25ObExtTnZjSGtvUkM1dFlYUnlhWGhYYjNKc1pDa3VhVzUyWlhKMEtDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsUTJGdFpYSmhJRDBnWm5WdVkzUnBiMjRvUkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQTlQVDBnYm5Wc2JDa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0JTTG01bFlYSWdQU0JpTG01bFlYSWdQU0I1TG01bFlYSWdQU0JFTG01bFlYSXNJRkl1Wm1GeUlEMGdZaTVtWVhJZ1BTQjVMbVpoY2lBOUlFUXVabUZ5TENBb1NTQWhQVDBnVWk1dVpXRnlJSHg4SUUwZ0lUMDlJRkl1Wm1GeUtTQW1KaUFvYVM1MWNHUmhkR1ZTWlc1a1pYSlRkR0YwWlNoN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYQjBhRTVsWVhJNklGSXVibVZoY2l3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGNIUm9SbUZ5T2lCU0xtWmhjZ29nSUNBZ0lDQWdJQ0FnSUNCOUtTd2dTU0E5SUZJdWJtVmhjaXdnVFNBOUlGSXVabUZ5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVjZ1BTQkVMbkJoY21WdWRDd2dhR1VnUFNCU0xtTmhiV1Z5WVhNN0NpQWdJQ0FnSUNBZ0lDQWdJSEVvVWl3Z1J5azdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWm1VZ1BTQXdPeUJtWlNBOElHaGxMbXhsYm1kMGFEc2dabVVyS3lseEtHaGxXMlpsWFN3Z1J5azdDaUFnSUNBZ0lDQWdJQ0FnSUdobExteGxibWQwYUNBOVBUMGdNaUEvSUhvb1Vpd2dlU3dnWWlrZ09pQlNMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3VZMjl3ZVNoNUxuQnliMnBsWTNScGIyNU5ZWFJ5YVhncExDQklLRVFzSUZJc0lFY3BPd29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnU0NoRUxDQkhMQ0JvWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JvWlNBOVBUMGdiblZzYkNBL0lFUXViV0YwY21sNExtTnZjSGtvUnk1dFlYUnlhWGhYYjNKc1pDa2dPaUFvUkM1dFlYUnlhWGd1WTI5d2VTaG9aUzV0WVhSeWFYaFhiM0pzWkNrc0lFUXViV0YwY21sNExtbHVkbVZ5ZENncExDQkVMbTFoZEhKcGVDNXRkV3gwYVhCc2VTaEhMbTFoZEhKcGVGZHZjbXhrS1Nrc0lFUXViV0YwY21sNExtUmxZMjl0Y0c5elpTaEVMbkJ2YzJsMGFXOXVMQ0JFTG5GMVlYUmxjbTVwYjI0c0lFUXVjMk5oYkdVcExDQkVMblZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLQ0V3S1N3Z1JDNXdjbTlxWldOMGFXOXVUV0YwY21sNExtTnZjSGtvUnk1d2NtOXFaV04wYVc5dVRXRjBjbWw0S1N3Z1JDNXdjbTlxWldOMGFXOXVUV0YwY21sNFNXNTJaWEp6WlM1amIzQjVLRWN1Y0hKdmFtVmpkR2x2YmsxaGRISnBlRWx1ZG1WeWMyVXBMQ0JFTG1selVHVnljM0JsWTNScGRtVkRZVzFsY21FZ0ppWWdLRVF1Wm05MklEMGdXbWtnS2lBeUlDb2dUV0YwYUM1aGRHRnVLREVnTHlCRUxuQnliMnBsWTNScGIyNU5ZWFJ5YVhndVpXeGxiV1Z1ZEhOYk5WMHBMQ0JFTG5wdmIyMGdQU0F4S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTVuWlhSRFlXMWxjbUVnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkk3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSR2IzWmxZWFJwYjI0Z1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VvWkNBOVBUMGdiblZzYkNBbUppQm1JRDA5UFNCdWRXeHNLU2tnY21WMGRYSnVJR003Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV6WlhSR2IzWmxZWFJwYjI0Z1BTQm1kVzVqZEdsdmJpaEVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTWdQU0JFTENCa0lDRTlQU0J1ZFd4c0lDWW1JQ2hrTG1acGVHVmtSbTkyWldGMGFXOXVJRDBnUkNrc0lHWWdJVDA5SUc1MWJHd2dKaVlnWmk1bWFYaGxaRVp2ZG1WaGRHbHZiaUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaG1MbVpwZUdWa1JtOTJaV0YwYVc5dUlEMGdSQ2s3Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCc1pYUWdibVVnUFNCdWRXeHNPd29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRmNvUkN3Z1J5a2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hQ0E5SUVjdVoyVjBWbWxsZDJWeVVHOXpaU2hzSUh4OElHRXBMQ0J0SUQwZ1J5d2dhQ0FoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHaGxJRDBnYUM1MmFXVjNjenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1lnSVQwOUlHNTFiR3dnSmlZZ0tHVXVjMlYwVW1WdVpHVnlWR0Z5WjJWMFJuSmhiV1ZpZFdabVpYSW9jQ3dnWmk1bWNtRnRaV0oxWm1abGNpa3NJR1V1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLSEFwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1aU0E5SUNFeE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHVXViR1Z1WjNSb0lDRTlQU0JTTG1OaGJXVnlZWE11YkdWdVozUm9JQ1ltSUNoU0xtTmhiV1Z5WVhNdWJHVnVaM1JvSUQwZ01Dd2dabVVnUFNBaE1DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGOWxJRDBnTURzZ1gyVWdQQ0JvWlM1c1pXNW5kR2c3SUY5bEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjNaU0E5SUdobFcxOWxYU3dnUldVZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htSUNFOVBTQnVkV3hzS1NCRlpTQTlJR1l1WjJWMFZtbGxkM0J2Y25Rb2QyVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnV1dVZ1BTQjFMbWRsZEZacFpYZFRkV0pKYldGblpTaGtMQ0IzWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVWbElEMGdXV1V1ZG1sbGQzQnZjblFzSUY5bElEMDlQU0F3SUNZbUlDaGxMbk5sZEZKbGJtUmxjbFJoY21kbGRGUmxlSFIxY21WektIQXNJRmxsTG1OdmJHOXlWR1Y0ZEhWeVpTd2daQzVwWjI1dmNtVkVaWEIwYUZaaGJIVmxjeUEvSUhadmFXUWdNQ0E2SUZsbExtUmxjSFJvVTNSbGJtTnBiRlJsZUhSMWNtVXBMQ0JsTG5ObGRGSmxibVJsY2xSaGNtZGxkQ2h3S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlVaU0E5SUhkYlgyVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSbElEMDlQU0IyYjJsa0lEQWdKaVlnS0ZSbElEMGdibVYzSUhsMExDQlVaUzVzWVhsbGNuTXVaVzVoWW14bEtGOWxLU3dnVkdVdWRtbGxkM0J2Y25RZ1BTQnVaWGNnYW1Vc0lIZGJYMlZkSUQwZ1ZHVXBMQ0JVWlM1dFlYUnlhWGd1Wm5KdmJVRnljbUY1S0hkbExuUnlZVzV6Wm05eWJTNXRZWFJ5YVhncExDQlVaUzV0WVhSeWFYZ3VaR1ZqYjIxd2IzTmxLRlJsTG5CdmMybDBhVzl1TENCVVpTNXhkV0YwWlhKdWFXOXVMQ0JVWlM1elkyRnNaU2tzSUZSbExuQnliMnBsWTNScGIyNU5ZWFJ5YVhndVpuSnZiVUZ5Y21GNUtIZGxMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3BMQ0JVWlM1d2NtOXFaV04wYVc5dVRXRjBjbWw0U1c1MlpYSnpaUzVqYjNCNUtGUmxMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3BMbWx1ZG1WeWRDZ3BMQ0JVWlM1MmFXVjNjRzl5ZEM1elpYUW9SV1V1ZUN3Z1JXVXVlU3dnUldVdWQybGtkR2dzSUVWbExtaGxhV2RvZENrc0lGOWxJRDA5UFNBd0lDWW1JQ2hTTG0xaGRISnBlQzVqYjNCNUtGUmxMbTFoZEhKcGVDa3NJRkl1YldGMGNtbDRMbVJsWTI5dGNHOXpaU2hTTG5CdmMybDBhVzl1TENCU0xuRjFZWFJsY201cGIyNHNJRkl1YzJOaGJHVXBLU3dnWm1VZ1BUMDlJQ0V3SUNZbUlGSXVZMkZ0WlhKaGN5NXdkWE5vS0ZSbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHaGxJRDBnTURzZ2FHVWdQQ0IyTG14bGJtZDBhRHNnYUdVckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWm1VZ1BTQjRXMmhsWFN3Z1gyVWdQU0IyVzJobFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmxJQ0U5UFNCdWRXeHNJQ1ltSUY5bElDRTlQU0IyYjJsa0lEQWdKaVlnWDJVdWRYQmtZWFJsS0dabExDQkhMQ0JzSUh4OElHRXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJRzVsSUNZbUlHNWxLRVFzSUVjcExDQkhMbVJsZEdWamRHVmtVR3hoYm1WeklDWW1JRzR1WkdsemNHRjBZMmhGZG1WdWRDaDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaWNHeGhibVZ6WkdWMFpXTjBaV1FpTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dSd29nSUNBZ0lDQWdJQ0FnSUNCOUtTd2diU0E5SUc1MWJHdzdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCTElEMGdibVYzSUVWa093b2dJQ0FnSUNBZ0lFc3VjMlYwUVc1cGJXRjBhVzl1VEc5dmNDaFhLU3dnZEdocGN5NXpaWFJCYm1sdFlYUnBiMjVNYjI5d0lEMGdablZ1WTNScGIyNG9SQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnVaU0E5SUVRN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1a2FYTndiM05sSUQwZ1puVnVZM1JwYjI0b0tTQjdmVHNLSUNBZ0lIMEtmVHNLWm5WdVkzUnBiMjRnU0RBb2N6RXNJR1VwSUhzS0lDQWdJR1oxYm1OMGFXOXVJSFFvWnl3Z2NDa2dld29nSUNBZ0lDQWdJR2N1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5UFQwZ0lUQWdKaVlnWnk1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnY0M1MllXeDFaUzVqYjNCNUtHY3ViV0YwY21sNEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRzRvWnl3Z2NDa2dld29nSUNBZ0lDQWdJSEF1WTI5c2IzSXVaMlYwVWtkQ0tHY3VabTluUTI5c2IzSXVkbUZzZFdVc0lHSmtLSE14S1Nrc0lIQXVhWE5HYjJjZ1B5QW9aeTVtYjJkT1pXRnlMblpoYkhWbElEMGdjQzV1WldGeUxDQm5MbVp2WjBaaGNpNTJZV3gxWlNBOUlIQXVabUZ5S1NBNklIQXVhWE5HYjJkRmVIQXlJQ1ltSUNobkxtWnZaMFJsYm5OcGRIa3VkbUZzZFdVZ1BTQndMbVJsYm5OcGRIa3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYVNobkxDQndMQ0IyTENCNExDQjVLU0I3Q2lBZ0lDQWdJQ0FnY0M1cGMwMWxjMmhDWVhOcFkwMWhkR1Z5YVdGc0lIeDhJSEF1YVhOTlpYTm9UR0Z0WW1WeWRFMWhkR1Z5YVdGc0lEOGdjaWhuTENCd0tTQTZJSEF1YVhOTlpYTm9WRzl2YmsxaGRHVnlhV0ZzSUQ4Z0tISW9aeXdnY0Nrc0lIVW9aeXdnY0NrcElEb2djQzVwYzAxbGMyaFFhRzl1WjAxaGRHVnlhV0ZzSUQ4Z0tISW9aeXdnY0Nrc0lHZ29aeXdnY0NrcElEb2djQzVwYzAxbGMyaFRkR0Z1WkdGeVpFMWhkR1Z5YVdGc0lEOGdLSElvWnl3Z2NDa3NJR1FvWnl3Z2NDa3NJSEF1YVhOTlpYTm9VR2g1YzJsallXeE5ZWFJsY21saGJDQW1KaUJtS0djc0lIQXNJSGtwS1NBNklIQXVhWE5OWlhOb1RXRjBZMkZ3VFdGMFpYSnBZV3dnUHlBb2NpaG5MQ0J3S1N3Z2JTaG5MQ0J3S1NrZ09pQndMbWx6VFdWemFFUmxjSFJvVFdGMFpYSnBZV3dnUHlCeUtHY3NJSEFwSURvZ2NDNXBjMDFsYzJoRWFYTjBZVzVqWlUxaGRHVnlhV0ZzSUQ4Z0tISW9aeXdnY0Nrc0lGOG9aeXdnY0NrcElEb2djQzVwYzAxbGMyaE9iM0p0WVd4TllYUmxjbWxoYkNBL0lISW9aeXdnY0NrZ09pQndMbWx6VEdsdVpVSmhjMmxqVFdGMFpYSnBZV3dnUHlBb1lTaG5MQ0J3S1N3Z2NDNXBjMHhwYm1WRVlYTm9aV1JOWVhSbGNtbGhiQ0FtSmlCdktHY3NJSEFwS1NBNklIQXVhWE5RYjJsdWRITk5ZWFJsY21saGJDQS9JR01vWnl3Z2NDd2dkaXdnZUNrZ09pQndMbWx6VTNCeWFYUmxUV0YwWlhKcFlXd2dQeUJzS0djc0lIQXBJRG9nY0M1cGMxTm9ZV1J2ZDAxaGRHVnlhV0ZzSUQ4Z0tHY3VZMjlzYjNJdWRtRnNkV1V1WTI5d2VTaHdMbU52Ykc5eUtTd2daeTV2Y0dGamFYUjVMblpoYkhWbElEMGdjQzV2Y0dGamFYUjVLU0E2SUhBdWFYTlRhR0ZrWlhKTllYUmxjbWxoYkNBbUppQW9jQzUxYm1sbWIzSnRjMDVsWldSVmNHUmhkR1VnUFNBaE1TazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ5S0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0JuTG05d1lXTnBkSGt1ZG1Gc2RXVWdQU0J3TG05d1lXTnBkSGtzSUhBdVkyOXNiM0lnSmlZZ1p5NWthV1ptZFhObExuWmhiSFZsTG1OdmNIa29jQzVqYjJ4dmNpa3NJSEF1WlcxcGMzTnBkbVVnSmlZZ1p5NWxiV2x6YzJsMlpTNTJZV3gxWlM1amIzQjVLSEF1WlcxcGMzTnBkbVVwTG0xMWJIUnBjR3g1VTJOaGJHRnlLSEF1WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtwTENCd0xtMWhjQ0FtSmlBb1p5NXRZWEF1ZG1Gc2RXVWdQU0J3TG0xaGNDd2dkQ2h3TG0xaGNDd2daeTV0WVhCVWNtRnVjMlp2Y20wcEtTd2djQzVoYkhCb1lVMWhjQ0FtSmlBb1p5NWhiSEJvWVUxaGNDNTJZV3gxWlNBOUlIQXVZV3h3YUdGTllYQXNJSFFvY0M1aGJIQm9ZVTFoY0N3Z1p5NWhiSEJvWVUxaGNGUnlZVzV6Wm05eWJTa3BMQ0J3TG1KMWJYQk5ZWEFnSmlZZ0tHY3VZblZ0Y0UxaGNDNTJZV3gxWlNBOUlIQXVZblZ0Y0UxaGNDd2dkQ2h3TG1KMWJYQk5ZWEFzSUdjdVluVnRjRTFoY0ZSeVlXNXpabTl5YlNrc0lHY3VZblZ0Y0ZOallXeGxMblpoYkhWbElEMGdjQzVpZFcxd1UyTmhiR1VzSUhBdWMybGtaU0E5UFQwZ1JuUWdKaVlnS0djdVluVnRjRk5qWVd4bExuWmhiSFZsSUNvOUlDMHhLU2tzSUhBdWJtOXliV0ZzVFdGd0lDWW1JQ2huTG01dmNtMWhiRTFoY0M1MllXeDFaU0E5SUhBdWJtOXliV0ZzVFdGd0xDQjBLSEF1Ym05eWJXRnNUV0Z3TENCbkxtNXZjbTFoYkUxaGNGUnlZVzV6Wm05eWJTa3NJR2N1Ym05eWJXRnNVMk5oYkdVdWRtRnNkV1V1WTI5d2VTaHdMbTV2Y20xaGJGTmpZV3hsS1N3Z2NDNXphV1JsSUQwOVBTQkdkQ0FtSmlCbkxtNXZjbTFoYkZOallXeGxMblpoYkhWbExtNWxaMkYwWlNncEtTd2djQzVrYVhOd2JHRmpaVzFsYm5STllYQWdKaVlnS0djdVpHbHpjR3hoWTJWdFpXNTBUV0Z3TG5aaGJIVmxJRDBnY0M1a2FYTndiR0ZqWlcxbGJuUk5ZWEFzSUhRb2NDNWthWE53YkdGalpXMWxiblJOWVhBc0lHY3VaR2x6Y0d4aFkyVnRaVzUwVFdGd1ZISmhibk5tYjNKdEtTd2daeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaUzUyWVd4MVpTQTlJSEF1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUdjdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3k1MllXeDFaU0E5SUhBdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lrc0lIQXVaVzFwYzNOcGRtVk5ZWEFnSmlZZ0tHY3VaVzFwYzNOcGRtVk5ZWEF1ZG1Gc2RXVWdQU0J3TG1WdGFYTnphWFpsVFdGd0xDQjBLSEF1WlcxcGMzTnBkbVZOWVhBc0lHY3VaVzFwYzNOcGRtVk5ZWEJVY21GdWMyWnZjbTBwS1N3Z2NDNXpjR1ZqZFd4aGNrMWhjQ0FtSmlBb1p5NXpjR1ZqZFd4aGNrMWhjQzUyWVd4MVpTQTlJSEF1YzNCbFkzVnNZWEpOWVhBc0lIUW9jQzV6Y0dWamRXeGhjazFoY0N3Z1p5NXpjR1ZqZFd4aGNrMWhjRlJ5WVc1elptOXliU2twTENCd0xtRnNjR2hoVkdWemRDQStJREFnSmlZZ0tHY3VZV3h3YUdGVVpYTjBMblpoYkhWbElEMGdjQzVoYkhCb1lWUmxjM1FwT3dvZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnWlM1blpYUW9jQ2t1Wlc1MlRXRndPd29nSUNBZ0lDQWdJR2xtSUNoMklDWW1JQ2huTG1WdWRrMWhjQzUyWVd4MVpTQTlJSFlzSUdjdVpteHBjRVZ1ZGsxaGNDNTJZV3gxWlNBOUlIWXVhWE5EZFdKbFZHVjRkSFZ5WlNBbUppQjJMbWx6VW1WdVpHVnlWR0Z5WjJWMFZHVjRkSFZ5WlNBOVBUMGdJVEVnUHlBdE1TQTZJREVzSUdjdWNtVm1iR1ZqZEdsMmFYUjVMblpoYkhWbElEMGdjQzV5Wldac1pXTjBhWFpwZEhrc0lHY3VhVzl5TG5aaGJIVmxJRDBnY0M1cGIzSXNJR2N1Y21WbWNtRmpkR2x2YmxKaGRHbHZMblpoYkhWbElEMGdjQzV5WldaeVlXTjBhVzl1VW1GMGFXOHBMQ0J3TG14cFoyaDBUV0Z3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2N1YkdsbmFIUk5ZWEF1ZG1Gc2RXVWdQU0J3TG14cFoyaDBUV0Z3T3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUNBOUlITXhMbDkxYzJWTVpXZGhZM2xNYVdkb2RITWdQVDA5SUNFd0lEOGdUV0YwYUM1UVNTQTZJREU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHY3ViR2xuYUhSTllYQkpiblJsYm5OcGRIa3VkbUZzZFdVZ1BTQndMbXhwWjJoMFRXRndTVzUwWlc1emFYUjVJQ29nZUN3Z2RDaHdMbXhwWjJoMFRXRndMQ0JuTG14cFoyaDBUV0Z3VkhKaGJuTm1iM0p0S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NDNWhiMDFoY0NBbUppQW9aeTVoYjAxaGNDNTJZV3gxWlNBOUlIQXVZVzlOWVhBc0lHY3VZVzlOWVhCSmJuUmxibk5wZEhrdWRtRnNkV1VnUFNCd0xtRnZUV0Z3U1c1MFpXNXphWFI1TENCMEtIQXVZVzlOWVhBc0lHY3VZVzlOWVhCVWNtRnVjMlp2Y20wcEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR0VvWnl3Z2NDa2dld29nSUNBZ0lDQWdJR2N1WkdsbVpuVnpaUzUyWVd4MVpTNWpiM0I1S0hBdVkyOXNiM0lwTENCbkxtOXdZV05wZEhrdWRtRnNkV1VnUFNCd0xtOXdZV05wZEhrc0lIQXViV0Z3SUNZbUlDaG5MbTFoY0M1MllXeDFaU0E5SUhBdWJXRndMQ0IwS0hBdWJXRndMQ0JuTG0xaGNGUnlZVzV6Wm05eWJTa3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYnlobkxDQndLU0I3Q2lBZ0lDQWdJQ0FnWnk1a1lYTm9VMmw2WlM1MllXeDFaU0E5SUhBdVpHRnphRk5wZW1Vc0lHY3VkRzkwWVd4VGFYcGxMblpoYkhWbElEMGdjQzVrWVhOb1UybDZaU0FySUhBdVoyRndVMmw2WlN3Z1p5NXpZMkZzWlM1MllXeDFaU0E5SUhBdWMyTmhiR1U3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCaktHY3NJSEFzSUhZc0lIZ3BJSHNLSUNBZ0lDQWdJQ0JuTG1ScFptWjFjMlV1ZG1Gc2RXVXVZMjl3ZVNod0xtTnZiRzl5S1N3Z1p5NXZjR0ZqYVhSNUxuWmhiSFZsSUQwZ2NDNXZjR0ZqYVhSNUxDQm5Mbk5wZW1VdWRtRnNkV1VnUFNCd0xuTnBlbVVnS2lCMkxDQm5Mbk5qWVd4bExuWmhiSFZsSUQwZ2VDQXFJQzQxTENCd0xtMWhjQ0FtSmlBb1p5NXRZWEF1ZG1Gc2RXVWdQU0J3TG0xaGNDd2dkQ2h3TG0xaGNDd2daeTUxZGxSeVlXNXpabTl5YlNrcExDQndMbUZzY0doaFRXRndJQ1ltSUNobkxtRnNjR2hoVFdGd0xuWmhiSFZsSUQwZ2NDNWhiSEJvWVUxaGNDd2dkQ2h3TG1Gc2NHaGhUV0Z3TENCbkxtRnNjR2hoVFdGd1ZISmhibk5tYjNKdEtTa3NJSEF1WVd4d2FHRlVaWE4wSUQ0Z01DQW1KaUFvWnk1aGJIQm9ZVlJsYzNRdWRtRnNkV1VnUFNCd0xtRnNjR2hoVkdWemRDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJzS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0JuTG1ScFptWjFjMlV1ZG1Gc2RXVXVZMjl3ZVNod0xtTnZiRzl5S1N3Z1p5NXZjR0ZqYVhSNUxuWmhiSFZsSUQwZ2NDNXZjR0ZqYVhSNUxDQm5Mbkp2ZEdGMGFXOXVMblpoYkhWbElEMGdjQzV5YjNSaGRHbHZiaXdnY0M1dFlYQWdKaVlnS0djdWJXRndMblpoYkhWbElEMGdjQzV0WVhBc0lIUW9jQzV0WVhBc0lHY3ViV0Z3VkhKaGJuTm1iM0p0S1Nrc0lIQXVZV3h3YUdGTllYQWdKaVlnS0djdVlXeHdhR0ZOWVhBdWRtRnNkV1VnUFNCd0xtRnNjR2hoVFdGd0xDQjBLSEF1WVd4d2FHRk5ZWEFzSUdjdVlXeHdhR0ZOWVhCVWNtRnVjMlp2Y20wcEtTd2djQzVoYkhCb1lWUmxjM1FnUGlBd0lDWW1JQ2huTG1Gc2NHaGhWR1Z6ZEM1MllXeDFaU0E5SUhBdVlXeHdhR0ZVWlhOMEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR2dvWnl3Z2NDa2dld29nSUNBZ0lDQWdJR2N1YzNCbFkzVnNZWEl1ZG1Gc2RXVXVZMjl3ZVNod0xuTndaV04xYkdGeUtTd2daeTV6YUdsdWFXNWxjM011ZG1Gc2RXVWdQU0JOWVhSb0xtMWhlQ2h3TG5Ob2FXNXBibVZ6Y3l3Z01XVXROQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCMUtHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCd0xtZHlZV1JwWlc1MFRXRndJQ1ltSUNobkxtZHlZV1JwWlc1MFRXRndMblpoYkhWbElEMGdjQzVuY21Ga2FXVnVkRTFoY0NrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmtLR2NzSUhBcElIc0tJQ0FnSUNBZ0lDQm5MbTFsZEdGc2JtVnpjeTUyWVd4MVpTQTlJSEF1YldWMFlXeHVaWE56TENCd0xtMWxkR0ZzYm1WemMwMWhjQ0FtSmlBb1p5NXRaWFJoYkc1bGMzTk5ZWEF1ZG1Gc2RXVWdQU0J3TG0xbGRHRnNibVZ6YzAxaGNDd2dkQ2h3TG0xbGRHRnNibVZ6YzAxaGNDd2daeTV0WlhSaGJHNWxjM05OWVhCVWNtRnVjMlp2Y20wcEtTd2daeTV5YjNWbmFHNWxjM011ZG1Gc2RXVWdQU0J3TG5KdmRXZG9ibVZ6Y3l3Z2NDNXliM1ZuYUc1bGMzTk5ZWEFnSmlZZ0tHY3VjbTkxWjJodVpYTnpUV0Z3TG5aaGJIVmxJRDBnY0M1eWIzVm5hRzVsYzNOTllYQXNJSFFvY0M1eWIzVm5hRzVsYzNOTllYQXNJR2N1Y205MVoyaHVaWE56VFdGd1ZISmhibk5tYjNKdEtTa3NJR1V1WjJWMEtIQXBMbVZ1ZGsxaGNDQW1KaUFvWnk1bGJuWk5ZWEJKYm5SbGJuTnBkSGt1ZG1Gc2RXVWdQU0J3TG1WdWRrMWhjRWx1ZEdWdWMybDBlU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCbUtHY3NJSEFzSUhZcElIc0tJQ0FnSUNBZ0lDQm5MbWx2Y2k1MllXeDFaU0E5SUhBdWFXOXlMQ0J3TG5Ob1pXVnVJRDRnTUNBbUppQW9aeTV6YUdWbGJrTnZiRzl5TG5aaGJIVmxMbU52Y0hrb2NDNXphR1ZsYmtOdmJHOXlLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaHdMbk5vWldWdUtTd2daeTV6YUdWbGJsSnZkV2RvYm1WemN5NTJZV3gxWlNBOUlIQXVjMmhsWlc1U2IzVm5hRzVsYzNNc0lIQXVjMmhsWlc1RGIyeHZjazFoY0NBbUppQW9aeTV6YUdWbGJrTnZiRzl5VFdGd0xuWmhiSFZsSUQwZ2NDNXphR1ZsYmtOdmJHOXlUV0Z3TENCMEtIQXVjMmhsWlc1RGIyeHZjazFoY0N3Z1p5NXphR1ZsYmtOdmJHOXlUV0Z3VkhKaGJuTm1iM0p0S1Nrc0lIQXVjMmhsWlc1U2IzVm5hRzVsYzNOTllYQWdKaVlnS0djdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhBdWRtRnNkV1VnUFNCd0xuTm9aV1Z1VW05MVoyaHVaWE56VFdGd0xDQjBLSEF1YzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEFzSUdjdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhCVWNtRnVjMlp2Y20wcEtTa3NJSEF1WTJ4bFlYSmpiMkYwSUQ0Z01DQW1KaUFvWnk1amJHVmhjbU52WVhRdWRtRnNkV1VnUFNCd0xtTnNaV0Z5WTI5aGRDd2daeTVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM011ZG1Gc2RXVWdQU0J3TG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6Y3l3Z2NDNWpiR1ZoY21OdllYUk5ZWEFnSmlZZ0tHY3VZMnhsWVhKamIyRjBUV0Z3TG5aaGJIVmxJRDBnY0M1amJHVmhjbU52WVhSTllYQXNJSFFvY0M1amJHVmhjbU52WVhSTllYQXNJR2N1WTJ4bFlYSmpiMkYwVFdGd1ZISmhibk5tYjNKdEtTa3NJSEF1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0lDWW1JQ2huTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDNTJZV3gxWlNBOUlIQXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3TENCMEtIQXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3TENCbkxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjRlJ5WVc1elptOXliU2twTENCd0xtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDQW1KaUFvWnk1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBdWRtRnNkV1VnUFNCd0xtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDd2dkQ2h3TG1Oc1pXRnlZMjloZEU1dmNtMWhiRTFoY0N3Z1p5NWpiR1ZoY21OdllYUk9iM0p0WVd4TllYQlVjbUZ1YzJadmNtMHBMQ0JuTG1Oc1pXRnlZMjloZEU1dmNtMWhiRk5qWVd4bExuWmhiSFZsTG1OdmNIa29jQzVqYkdWaGNtTnZZWFJPYjNKdFlXeFRZMkZzWlNrc0lIQXVjMmxrWlNBOVBUMGdSblFnSmlZZ1p5NWpiR1ZoY21OdllYUk9iM0p0WVd4VFkyRnNaUzUyWVd4MVpTNXVaV2RoZEdVb0tTa3BMQ0J3TG1seWFXUmxjMk5sYm1ObElENGdNQ0FtSmlBb1p5NXBjbWxrWlhOalpXNWpaUzUyWVd4MVpTQTlJSEF1YVhKcFpHVnpZMlZ1WTJVc0lHY3VhWEpwWkdWelkyVnVZMlZKVDFJdWRtRnNkV1VnUFNCd0xtbHlhV1JsYzJObGJtTmxTVTlTTENCbkxtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV2x1YVcxMWJTNTJZV3gxWlNBOUlIQXVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05TWVc1blpWc3dYU3dnWnk1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhlR2x0ZFcwdWRtRnNkV1VnUFNCd0xtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpVbUZ1WjJWYk1WMHNJSEF1YVhKcFpHVnpZMlZ1WTJWTllYQWdKaVlnS0djdWFYSnBaR1Z6WTJWdVkyVk5ZWEF1ZG1Gc2RXVWdQU0J3TG1seWFXUmxjMk5sYm1ObFRXRndMQ0IwS0hBdWFYSnBaR1Z6WTJWdVkyVk5ZWEFzSUdjdWFYSnBaR1Z6WTJWdVkyVk5ZWEJVY21GdWMyWnZjbTBwS1N3Z2NDNXBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoY0NBbUppQW9aeTVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNDNTJZV3gxWlNBOUlIQXVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhBc0lIUW9jQzVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNDd2daeTVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNGUnlZVzV6Wm05eWJTa3BLU3dnY0M1MGNtRnVjMjFwYzNOcGIyNGdQaUF3SUNZbUlDaG5MblJ5WVc1emJXbHpjMmx2Ymk1MllXeDFaU0E5SUhBdWRISmhibk50YVhOemFXOXVMQ0JuTG5SeVlXNXpiV2x6YzJsdmJsTmhiWEJzWlhKTllYQXVkbUZzZFdVZ1BTQjJMblJsZUhSMWNtVXNJR2N1ZEhKaGJuTnRhWE56YVc5dVUyRnRjR3hsY2xOcGVtVXVkbUZzZFdVdWMyVjBLSFl1ZDJsa2RHZ3NJSFl1YUdWcFoyaDBLU3dnY0M1MGNtRnVjMjFwYzNOcGIyNU5ZWEFnSmlZZ0tHY3VkSEpoYm5OdGFYTnphVzl1VFdGd0xuWmhiSFZsSUQwZ2NDNTBjbUZ1YzIxcGMzTnBiMjVOWVhBc0lIUW9jQzUwY21GdWMyMXBjM05wYjI1TllYQXNJR2N1ZEhKaGJuTnRhWE56YVc5dVRXRndWSEpoYm5ObWIzSnRLU2tzSUdjdWRHaHBZMnR1WlhOekxuWmhiSFZsSUQwZ2NDNTBhR2xqYTI1bGMzTXNJSEF1ZEdocFkydHVaWE56VFdGd0lDWW1JQ2huTG5Sb2FXTnJibVZ6YzAxaGNDNTJZV3gxWlNBOUlIQXVkR2hwWTJ0dVpYTnpUV0Z3TENCMEtIQXVkR2hwWTJ0dVpYTnpUV0Z3TENCbkxuUm9hV05yYm1WemMwMWhjRlJ5WVc1elptOXliU2twTENCbkxtRjBkR1Z1ZFdGMGFXOXVSR2x6ZEdGdVkyVXVkbUZzZFdVZ1BTQndMbUYwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlVzSUdjdVlYUjBaVzUxWVhScGIyNURiMnh2Y2k1MllXeDFaUzVqYjNCNUtIQXVZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpa3BMQ0J3TG1GdWFYTnZkSEp2Y0hrZ1BpQXdJQ1ltSUNobkxtRnVhWE52ZEhKdmNIbFdaV04wYjNJdWRtRnNkV1V1YzJWMEtIQXVZVzVwYzI5MGNtOXdlU0FxSUUxaGRHZ3VZMjl6S0hBdVlXNXBjMjkwY205d2VWSnZkR0YwYVc5dUtTd2djQzVoYm1semIzUnliM0I1SUNvZ1RXRjBhQzV6YVc0b2NDNWhibWx6YjNSeWIzQjVVbTkwWVhScGIyNHBLU3dnY0M1aGJtbHpiM1J5YjNCNVRXRndJQ1ltSUNobkxtRnVhWE52ZEhKdmNIbE5ZWEF1ZG1Gc2RXVWdQU0J3TG1GdWFYTnZkSEp2Y0hsTllYQXNJSFFvY0M1aGJtbHpiM1J5YjNCNVRXRndMQ0JuTG1GdWFYTnZkSEp2Y0hsTllYQlVjbUZ1YzJadmNtMHBLU2tzSUdjdWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhrdWRtRnNkV1VnUFNCd0xuTndaV04xYkdGeVNXNTBaVzV6YVhSNUxDQm5Mbk53WldOMWJHRnlRMjlzYjNJdWRtRnNkV1V1WTI5d2VTaHdMbk53WldOMWJHRnlRMjlzYjNJcExDQndMbk53WldOMWJHRnlRMjlzYjNKTllYQWdKaVlnS0djdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0M1MllXeDFaU0E5SUhBdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0N3Z2RDaHdMbk53WldOMWJHRnlRMjlzYjNKTllYQXNJR2N1YzNCbFkzVnNZWEpEYjJ4dmNrMWhjRlJ5WVc1elptOXliU2twTENCd0xuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndJQ1ltSUNobkxuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndMblpoYkhWbElEMGdjQzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0N3Z2RDaHdMbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3TENCbkxuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndWSEpoYm5ObWIzSnRLU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdEtHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCd0xtMWhkR05oY0NBbUppQW9aeTV0WVhSallYQXVkbUZzZFdVZ1BTQndMbTFoZEdOaGNDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJmS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJR1V1WjJWMEtIQXBMbXhwWjJoME93b2dJQ0FnSUNBZ0lHY3VjbVZtWlhKbGJtTmxVRzl6YVhScGIyNHVkbUZzZFdVdWMyVjBSbkp2YlUxaGRISnBlRkJ2YzJsMGFXOXVLSFl1YldGMGNtbDRWMjl5YkdRcExDQm5MbTVsWVhKRWFYTjBZVzVqWlM1MllXeDFaU0E5SUhZdWMyaGhaRzkzTG1OaGJXVnlZUzV1WldGeUxDQm5MbVpoY2tScGMzUmhibU5sTG5aaGJIVmxJRDBnZGk1emFHRmtiM2N1WTJGdFpYSmhMbVpoY2pzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ2NtVm1jbVZ6YUVadloxVnVhV1p2Y20xek9pQnVMQW9nSUNBZ0lDQWdJSEpsWm5KbGMyaE5ZWFJsY21saGJGVnVhV1p2Y20xek9pQnBDaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJRWN3S0hNeExDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUh0OUxDQnlJRDBnZTMwc0lHRWdQU0JiWFN3Z2J5QTlJSFF1YVhOWFpXSkhURElnUHlCek1TNW5aWFJRWVhKaGJXVjBaWElvY3pFdVRVRllYMVZPU1VaUFVrMWZRbFZHUmtWU1gwSkpUa1JKVGtkVEtTQTZJREE3Q2lBZ0lDQm1kVzVqZEdsdmJpQmpLSFlzSUhncElIc0tJQ0FnSUNBZ0lDQnNaWFFnZVNBOUlIZ3VjSEp2WjNKaGJUc0tJQ0FnSUNBZ0lDQnVMblZ1YVdadmNtMUNiRzlqYTBKcGJtUnBibWNvZGl3Z2VTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJzS0hZc0lIZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJR2xiZGk1cFpGMDdDaUFnSUNBZ0lDQWdlU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaHRLSFlwTENCNUlEMGdhQ2gyS1N3Z2FWdDJMbWxrWFNBOUlIa3NJSFl1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpWkdsemNHOXpaU0lzSUdjcEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlIZ3VjSEp2WjNKaGJUc0tJQ0FnSUNBZ0lDQnVMblZ3WkdGMFpWVkNUMDFoY0hCcGJtY29kaXdnWWlrN0NpQWdJQ0FnSUNBZ2JHVjBJSGNnUFNCbExuSmxibVJsY2k1bWNtRnRaVHNLSUNBZ0lDQWdJQ0J5VzNZdWFXUmRJQ0U5UFNCM0lDWW1JQ2hrS0hZcExDQnlXM1l1YVdSZElEMGdkeWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCb0tIWXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2VDQTlJSFVvS1RzS0lDQWdJQ0FnSUNCMkxsOWZZbWx1WkdsdVoxQnZhVzUwU1c1a1pYZ2dQU0I0T3dvZ0lDQWdJQ0FnSUd4bGRDQjVJRDBnY3pFdVkzSmxZWFJsUW5WbVptVnlLQ2tzSUdJZ1BTQjJMbDlmYzJsNlpTd2dkeUE5SUhZdWRYTmhaMlU3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE14TG1KcGJtUkNkV1ptWlhJb2N6RXVWVTVKUms5U1RWOUNWVVpHUlZJc0lIa3BMQ0J6TVM1aWRXWm1aWEpFWVhSaEtITXhMbFZPU1VaUFVrMWZRbFZHUmtWU0xDQmlMQ0IzS1N3Z2N6RXVZbWx1WkVKMVptWmxjaWh6TVM1VlRrbEdUMUpOWDBKVlJrWkZVaXdnYm5Wc2JDa3NJSE14TG1KcGJtUkNkV1ptWlhKQ1lYTmxLSE14TGxWT1NVWlBVazFmUWxWR1JrVlNMQ0I0TENCNUtTd2dlVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhVb0tTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjJJRDBnTURzZ2RpQThJRzg3SUhZckt5bHBaaUFvWVM1cGJtUmxlRTltS0hZcElEMDlQU0F0TVNrZ2NtVjBkWEp1SUdFdWNIVnphQ2gyS1N3Z2Rqc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1RXRjRhVzExYlNCdWRXMWlaWElnYjJZZ2MybHRkV3gwWVc1bGIzVnpiSGtnZFhOaFlteGxJSFZ1YVdadmNtMXpJR2R5YjNWd2N5QnlaV0ZqYUdWa0xpSXBMQ0F3T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1pDaDJLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIZ2dQU0JwVzNZdWFXUmRMQ0I1SUQwZ2RpNTFibWxtYjNKdGN5d2dZaUE5SUhZdVgxOWpZV05vWlRzS0lDQWdJQ0FnSUNCek1TNWlhVzVrUW5WbVptVnlLSE14TGxWT1NVWlBVazFmUWxWR1JrVlNMQ0I0S1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhjZ1BTQXdMQ0JTSUQwZ2VTNXNaVzVuZEdnN0lIY2dQQ0JTT3lCM0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdTU0E5SUhsYmQxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1LRWtzSUhjc0lHSXBJRDA5UFNBaE1Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUUwZ1BTQkpMbDlmYjJabWMyVjBMQ0JVSUQwZ1FYSnlZWGt1YVhOQmNuSmhlU2hKTG5aaGJIVmxLU0EvSUVrdWRtRnNkV1VnT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTUzUyWVd4MVpRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTd2dUeUE5SURBN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUZrZ1BTQXdPeUJaSUR3Z1ZDNXNaVzVuZEdnN0lGa3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJQ1FnUFNCVVcxbGRMQ0JWSUQwZ1h5Z2tLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxiMllnSkNBOVBTQWliblZ0WW1WeUlpQS9JQ2hKTGw5ZlpHRjBZVnN3WFNBOUlDUXNJSE14TG1KMVptWmxjbE4xWWtSaGRHRW9jekV1VlU1SlJrOVNUVjlDVlVaR1JWSXNJRTBnS3lCUExDQkpMbDlmWkdGMFlTa3BJRG9nSkM1cGMwMWhkSEpwZURNZ1B5QW9TUzVmWDJSaGRHRmJNRjBnUFNBa0xtVnNaVzFsYm5Seld6QmRMQ0JKTGw5ZlpHRjBZVnN4WFNBOUlDUXVaV3hsYldWdWRITmJNVjBzSUVrdVgxOWtZWFJoV3pKZElEMGdKQzVsYkdWdFpXNTBjMXN5WFN3Z1NTNWZYMlJoZEdGYk0xMGdQU0FrTG1Wc1pXMWxiblJ6V3pCZExDQkpMbDlmWkdGMFlWczBYU0E5SUNRdVpXeGxiV1Z1ZEhOYk0xMHNJRWt1WDE5a1lYUmhXelZkSUQwZ0pDNWxiR1Z0Wlc1MGMxczBYU3dnU1M1ZlgyUmhkR0ZiTmwwZ1BTQWtMbVZzWlcxbGJuUnpXelZkTENCSkxsOWZaR0YwWVZzM1hTQTlJQ1F1Wld4bGJXVnVkSE5iTUYwc0lFa3VYMTlrWVhSaFd6aGRJRDBnSkM1bGJHVnRaVzUwYzFzMlhTd2dTUzVmWDJSaGRHRmJPVjBnUFNBa0xtVnNaVzFsYm5Seld6ZGRMQ0JKTGw5ZlpHRjBZVnN4TUYwZ1BTQWtMbVZzWlcxbGJuUnpXemhkTENCSkxsOWZaR0YwWVZzeE1WMGdQU0FrTG1Wc1pXMWxiblJ6V3pCZEtTQTZJQ2drTG5SdlFYSnlZWGtvU1M1ZlgyUmhkR0VzSUU4cExDQlBJQ3M5SUZVdWMzUnZjbUZuWlNBdklFWnNiMkYwTXpKQmNuSmhlUzVDV1ZSRlUxOVFSVkpmUlV4RlRVVk9WQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TVM1aWRXWm1aWEpUZFdKRVlYUmhLSE14TGxWT1NVWlBVazFmUWxWR1JrVlNMQ0JOTENCSkxsOWZaR0YwWVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY3pFdVltbHVaRUoxWm1abGNpaHpNUzVWVGtsR1QxSk5YMEpWUmtaRlVpd2diblZzYkNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQm1LSFlzSUhnc0lIa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1lpQTlJSFl1ZG1Gc2RXVTdDaUFnSUNBZ0lDQWdhV1lnS0hsYmVGMGdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR0lnUFQwZ0ltNTFiV0psY2lJcElIbGJlRjBnUFNCaU93b2dJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IzSUQwZ1FYSnlZWGt1YVhOQmNuSmhlU2hpS1NBL0lHSWdPaUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTd2dVaUE5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCSklEMGdNRHNnU1NBOElIY3ViR1Z1WjNSb095QkpLeXNwVWk1d2RYTm9LSGRiU1YwdVkyeHZibVVvS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNVczaGRJRDBnVWpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSVRBN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1lpQTlQU0FpYm5WdFltVnlJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZVZ0NFhTQWhQVDBnWWlrZ2NtVjBkWEp1SUhsYmVGMGdQU0JpTENBaE1Ec0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2R5QTlJRUZ5Y21GNUxtbHpRWEp5WVhrb2VWdDRYU2tnUHlCNVczaGRJRG9nV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVZ0NFhRb2dJQ0FnSUNBZ0lDQWdJQ0JkTENCU0lEMGdRWEp5WVhrdWFYTkJjbkpoZVNoaUtTQS9JR0lnT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaUNpQWdJQ0FnSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1NTQTlJREE3SUVrZ1BDQjNMbXhsYm1kMGFEc2dTU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQk5JRDBnZDF0SlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hOTG1WeGRXRnNjeWhTVzBsZEtTQTlQVDBnSVRFcElISmxkSFZ5YmlCTkxtTnZjSGtvVWx0SlhTa3NJQ0V3T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQWhNVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUcwb2Rpa2dld29nSUNBZ0lDQWdJR3hsZENCNElEMGdkaTUxYm1sbWIzSnRjeXdnZVNBOUlEQXNJR0lnUFNBeE5pd2dkeUE5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCU0lEMGdNQ3dnU1NBOUlIZ3ViR1Z1WjNSb095QlNJRHdnU1RzZ1Vpc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRTBnUFNCNFcxSmRMQ0JVSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOTFibVJoY25rNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkRzl5WVdkbE9pQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0lFOGdQU0JCY25KaGVTNXBjMEZ5Y21GNUtFMHVkbUZzZFdVcElEOGdUUzUyWVd4MVpTQTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTB1ZG1Gc2RXVUtJQ0FnSUNBZ0lDQWdJQ0FnWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQlpJRDBnTUN3Z0pDQTlJRTh1YkdWdVozUm9PeUJaSUR3Z0pEc2dXU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlZJRDBnVDF0WlhTd2dlaUE5SUY4b1ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVMbUp2ZFc1a1lYSjVJQ3M5SUhvdVltOTFibVJoY25rc0lGUXVjM1J2Y21GblpTQXJQU0I2TG5OMGIzSmhaMlU3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFMHVYMTlrWVhSaElEMGdibVYzSUVac2IyRjBNekpCY25KaGVTaFVMbk4wYjNKaFoyVWdMeUJHYkc5aGRETXlRWEp5WVhrdVFsbFVSVk5mVUVWU1gwVk1SVTFGVGxRcExDQk5MbDlmYjJabWMyVjBJRDBnZVN3Z1VpQStJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhjZ1BTQjVJQ1VnWWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlpJRDBnWWlBdElIYzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNJQ0U5UFNBd0lDWW1JRmtnTFNCVUxtSnZkVzVrWVhKNUlEd2dNQ0FtSmlBb2VTQXJQU0JpSUMwZ2R5d2dUUzVmWDI5bVpuTmxkQ0E5SUhrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIa2dLejBnVkM1emRHOXlZV2RsT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZHlBOUlIa2dKU0JpTENCM0lENGdNQ0FtSmlBb2VTQXJQU0JpSUMwZ2R5a3NJSFl1WDE5emFYcGxJRDBnZVN3Z2RpNWZYMk5oWTJobElEMGdlMzBzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJmS0hZcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZUNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnWW05MWJtUmhjbms2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJSE4wYjNKaFoyVTZJREFLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdkaUE5UFNBaWJuVnRZbVZ5SWlBL0lDaDRMbUp2ZFc1a1lYSjVJRDBnTkN3Z2VDNXpkRzl5WVdkbElEMGdOQ2tnT2lCMkxtbHpWbVZqZEc5eU1pQS9JQ2g0TG1KdmRXNWtZWEo1SUQwZ09Dd2dlQzV6ZEc5eVlXZGxJRDBnT0NrZ09pQjJMbWx6Vm1WamRHOXlNeUI4ZkNCMkxtbHpRMjlzYjNJZ1B5QW9lQzVpYjNWdVpHRnllU0E5SURFMkxDQjRMbk4wYjNKaFoyVWdQU0F4TWlrZ09pQjJMbWx6Vm1WamRHOXlOQ0EvSUNoNExtSnZkVzVrWVhKNUlEMGdNVFlzSUhndWMzUnZjbUZuWlNBOUlERTJLU0E2SUhZdWFYTk5ZWFJ5YVhneklEOGdLSGd1WW05MWJtUmhjbmtnUFNBME9Dd2dlQzV6ZEc5eVlXZGxJRDBnTkRncElEb2dkaTVwYzAxaGRISnBlRFFnUHlBb2VDNWliM1Z1WkdGeWVTQTlJRFkwTENCNExuTjBiM0poWjJVZ1BTQTJOQ2tnT2lCMkxtbHpWR1Y0ZEhWeVpTQS9JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dWR1Y0ZEhWeVpTQnpZVzF3YkdWeWN5QmpZVzRnYm05MElHSmxJSEJoY25RZ2IyWWdZVzRnZFc1cFptOXliWE1nWjNKdmRYQXVJaWtnT2lCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZWdWMzVndjRzl5ZEdWa0lIVnVhV1p2Y20wZ2RtRnNkV1VnZEhsd1pTNGlMQ0IyS1N3Z2VEc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR2NvZGlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ2RpNTBZWEpuWlhRN0NpQWdJQ0FnSUNBZ2VDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnWnlrN0NpQWdJQ0FnSUNBZ2JHVjBJSGtnUFNCaExtbHVaR1Y0VDJZb2VDNWZYMkpwYm1ScGJtZFFiMmx1ZEVsdVpHVjRLVHNLSUNBZ0lDQWdJQ0JoTG5Od2JHbGpaU2g1TENBeEtTd2djekV1WkdWc1pYUmxRblZtWm1WeUtHbGJlQzVwWkYwcExDQmtaV3hsZEdVZ2FWdDRMbWxrWFN3Z1pHVnNaWFJsSUhKYmVDNXBaRjA3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCd0tDa2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkaUJwYmlCcEtYTXhMbVJsYkdWMFpVSjFabVpsY2locFczWmRLVHNLSUNBZ0lDQWdJQ0JoSUQwZ1cxMHNJR2tnUFNCN2ZTd2djaUE5SUh0OU93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQmlhVzVrT2lCakxBb2dJQ0FnSUNBZ0lIVndaR0YwWlRvZ2JDd0tJQ0FnSUNBZ0lDQmthWE53YjNObE9pQndDaUFnSUNCOU93cDlDblpoY2lCU2J5QTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0I3ZlNsN0NpQWdJQ0FnSUNBZ2JHVjBJSHNnWTJGdWRtRnpPaUIwSUQwZ2RIQW9LU0FzSUdOdmJuUmxlSFE2SUc0Z1BTQnVkV3hzSUN3Z1pHVndkR2c2SUdrZ1BTQWhNQ0FzSUhOMFpXNWphV3c2SUhJZ1BTQWhNQ0FzSUdGc2NHaGhPaUJoSUQwZ0lURWdMQ0JoYm5ScFlXeHBZWE02SUc4Z1BTQWhNU0FzSUhCeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVRvZ1l5QTlJQ0V3SUN3Z2NISmxjMlZ5ZG1WRWNtRjNhVzVuUW5WbVptVnlPaUJzSUQwZ0lURWdMQ0J3YjNkbGNsQnlaV1psY21WdVkyVTZJR2dnUFNBaVpHVm1ZWFZzZENJZ0xDQm1ZV2xzU1daTllXcHZjbEJsY21admNtMWhibU5sUTJGMlpXRjBPaUIxSUQwZ0lURWdJSDBnUFNCbE93b2dJQ0FnSUNBZ0lIUm9hWE11YVhOWFpXSkhURkpsYm1SbGNtVnlJRDBnSVRBN0NpQWdJQ0FnSUNBZ2JHVjBJR1E3Q2lBZ0lDQWdJQ0FnYmlBaFBUMGdiblZzYkNBL0lHUWdQU0J1TG1kbGRFTnZiblJsZUhSQmRIUnlhV0oxZEdWektDa3VZV3h3YUdFZ09pQmtJRDBnWVRzS0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUc1bGR5QlZhVzUwTXpKQmNuSmhlU2cwS1N3Z2JTQTlJRzVsZHlCSmJuUXpNa0Z5Y21GNUtEUXBMQ0JmSUQwZ2JuVnNiQ3dnWnlBOUlHNTFiR3dzSUhBZ1BTQmJYU3dnZGlBOUlGdGRPd29nSUNBZ0lDQWdJSFJvYVhNdVpHOXRSV3hsYldWdWRDQTlJSFFzSUhSb2FYTXVaR1ZpZFdjZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJVMmhoWkdWeVJYSnliM0p6T2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnYjI1VGFHRmtaWEpGY25KdmNqb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WVhWMGIwTnNaV0Z5SUQwZ0lUQXNJSFJvYVhNdVlYVjBiME5zWldGeVEyOXNiM0lnUFNBaE1Dd2dkR2hwY3k1aGRYUnZRMnhsWVhKRVpYQjBhQ0E5SUNFd0xDQjBhR2x6TG1GMWRHOURiR1ZoY2xOMFpXNWphV3dnUFNBaE1Dd2dkR2hwY3k1emIzSjBUMkpxWldOMGN5QTlJQ0V3TENCMGFHbHpMbU5zYVhCd2FXNW5VR3hoYm1WeklEMGdXMTBzSUhSb2FYTXViRzlqWVd4RGJHbHdjR2x1WjBWdVlXSnNaV1FnUFNBaE1Td2dkR2hwY3k1ZmIzVjBjSFYwUTI5c2IzSlRjR0ZqWlNBOUlIWjBMQ0IwYUdsekxsOTFjMlZNWldkaFkzbE1hV2RvZEhNZ1BTQWhNU3dnZEdocGN5NTBiMjVsVFdGd2NHbHVaeUE5SUU1dUxDQjBhR2x6TG5SdmJtVk5ZWEJ3YVc1blJYaHdiM04xY21VZ1BTQXhPd29nSUNBZ0lDQWdJR3hsZENCNElEMGdkR2hwY3l3Z2VTQTlJQ0V4TENCaUlEMGdNQ3dnZHlBOUlEQXNJRklnUFNCdWRXeHNMQ0JKSUQwZ0xURXNJRTBnUFNCdWRXeHNMQ0JVSUQwZ2JtVjNJR3BsTENCUElEMGdibVYzSUdwbExDQlpJRDBnYm5Wc2JDd2dKQ0E5SUc1bGR5QndaU2d3S1N3Z1ZTQTlJREFzSUhvZ1BTQjBMbmRwWkhSb0xDQnhJRDBnZEM1b1pXbG5hSFFzSUVnZ1BTQXhMQ0J1WlNBOUlHNTFiR3dzSUZjZ1BTQnVkV3hzTENCTElEMGdibVYzSUdwbEtEQXNJREFzSUhvc0lIRXBMQ0JFSUQwZ2JtVjNJR3BsS0RBc0lEQXNJSG9zSUhFcExDQkhJRDBnSVRFc0lHaGxJRDBnYm1WM0lGQnpMQ0JtWlNBOUlDRXhMQ0JmWlNBOUlDRXhMQ0IzWlNBOUlHNTFiR3dzSUVWbElEMGdibVYzSUhwbExDQlVaU0E5SUc1bGR5QmFMQ0JaWlNBOUlHNWxkeUJCTENCcGRDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpEb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdabTluT2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNCbGJuWnBjbTl1YldWdWREb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdiM1psY25KcFpHVk5ZWFJsY21saGJEb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdhWE5UWTJWdVpUb2dJVEFLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUVObEtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVWlBOVBUMGdiblZzYkNBL0lFZ2dPaUF4T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdUQ0E5SUc0N0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2IyVW9SU3dnVGlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRllnUFNBd095QldJRHdnUlM1c1pXNW5kR2c3SUZZckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUmlBOUlFVmJWbDBzSUdzZ1BTQjBMbWRsZEVOdmJuUmxlSFFvUml3Z1RpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYXlBaFBUMGdiblZzYkNrZ2NtVjBkWEp1SUdzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJ5ZVNCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRklEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3h3YUdFNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z3ZEdnNklHa3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR1Z1WTJsc09pQnlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVzUwYVdGc2FXRnpPaUJ2TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoT2lCakxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxjMlZ5ZG1WRWNtRjNhVzVuUW5WbVptVnlPaUJzTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5M1pYSlFjbVZtWlhKbGJtTmxPaUJvTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GcGJFbG1UV0ZxYjNKUVpYSm1iM0p0WVc1alpVTmhkbVZoZERvZ2RRb2dJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSW5ObGRFRjBkSEpwWW5WMFpTSWdhVzRnZENBbUppQjBMbk5sZEVGMGRISnBZblYwWlNnaVpHRjBZUzFsYm1kcGJtVWlMQ0JnZEdoeVpXVXVhbk1nY2lSN1NHTjlZQ2tzSUhRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaWQyVmlaMnhqYjI1MFpYaDBiRzl6ZENJc0lHTmxMQ0FoTVNrc0lIUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2lkMlZpWjJ4amIyNTBaWGgwY21WemRHOXlaV1FpTENCaFpTd2dJVEVwTENCMExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0luZGxZbWRzWTI5dWRHVjRkR055WldGMGFXOXVaWEp5YjNJaUxDQm5aU3dnSVRFcExDQk1JRDA5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RpQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaWQyVmlaMnd5SWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWlkMlZpWjJ3aUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0psZUhCbGNtbHRaVzUwWVd3dGQyVmlaMndpQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZ3VhWE5YWldKSFRERlNaVzVrWlhKbGNpQTlQVDBnSVRBZ0ppWWdUaTV6YUdsbWRDZ3BMQ0JNSUQwZ2IyVW9UaXdnUlNrc0lFd2dQVDA5SUc1MWJHd3BJSFJvY205M0lHOWxLRTRwSUQ4Z2JtVjNJRVZ5Y205eUtDSkZjbkp2Y2lCamNtVmhkR2x1WnlCWFpXSkhUQ0JqYjI1MFpYaDBJSGRwZEdnZ2VXOTFjaUJ6Wld4bFkzUmxaQ0JoZEhSeWFXSjFkR1Z6TGlJcElEb2dibVYzSUVWeWNtOXlLQ0pGY25KdmNpQmpjbVZoZEdsdVp5QlhaV0pIVENCamIyNTBaWGgwTGlJcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCWFpXSkhURkpsYm1SbGNtbHVaME52Ym5SbGVIUWdQQ0FpZFNJZ0ppWWdUQ0JwYm5OMFlXNWpaVzltSUZkbFlrZE1VbVZ1WkdWeWFXNW5RMjl1ZEdWNGRDQW1KaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRmRsWWtkTUlERWdjM1Z3Y0c5eWRDQjNZWE1nWkdWd2NtVmpZWFJsWkNCcGJpQnlNVFV6SUdGdVpDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdjakUyTXk0aUtTd2dUQzVuWlhSVGFHRmtaWEpRY21WamFYTnBiMjVHYjNKdFlYUWdQVDA5SUhadmFXUWdNQ0FtSmlBb1RDNW5aWFJUYUdGa1pYSlFjbVZqYVhOcGIyNUdiM0p0WVhRZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21GdVoyVk5hVzQ2SURFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbUZ1WjJWTllYZzZJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxZMmx6YVc5dU9pQXhDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaEZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUNJZ0t5QkZMbTFsYzNOaFoyVXBMQ0JGT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdXQ3dnYVdVc0lFb3NJRk5sTENCdFpTd2dlV1VzSUU1bExDQnhaU3dnY25Rc0lFTXNJRk1zSUVJc0lHVmxMQ0JxTENCMFpTd2dUV1VzSUhKbExDQmtaU3dnVEdVc0lGcGxMQ0J6WlN3Z0pHVXNJRTlsTENCSlpUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQlNaU2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdXQ0E5SUc1bGR5Qm9YeWhNS1N3Z2FXVWdQU0J1WlhjZ2MxOG9UQ3dnV0N3Z1pTa3NJRmd1YVc1cGRDaHBaU2tzSUNSbElEMGdibVYzSUZZd0tFd3NJRmdzSUdsbEtTd2dTaUE5SUc1bGR5QkNNQ2hNTENCWUxDQnBaU2tzSUZObElEMGdibVYzSUdaZktFd3BMQ0J0WlNBOUlHNWxkeUIzTUN3Z2VXVWdQU0J1WlhjZ2VqQW9UQ3dnV0N3Z1Npd2diV1VzSUdsbExDQWtaU3dnVTJVcExDQk9aU0E5SUc1bGR5QmhYeWg0S1N3Z2NXVWdQU0J1WlhjZ2JGOG9lQ2tzSUhKMElEMGdibVYzSUdKd0tFd3NJR2xsS1N3Z1QyVWdQU0J1WlhjZ2JsOG9UQ3dnV0N3Z2NuUXNJR2xsS1N3Z1F5QTlJRzVsZHlCMVh5aE1MQ0J5ZEN3Z1UyVXNJRTlsS1N3Z1V5QTlJRzVsZHlCZlh5aE1MQ0JETENCeWRDd2dVMlVwTENCTVpTQTlJRzVsZHlCblh5aE1MQ0JwWlN3Z2VXVXBMQ0JOWlNBOUlHNWxkeUJ5WHlodFpTa3NJRUlnUFNCdVpYY2dWREFvZUN3Z1RtVXNJSEZsTENCWUxDQnBaU3dnVDJVc0lFMWxLU3dnWldVZ1BTQnVaWGNnU0RBb2VDd2diV1VwTENCcUlEMGdibVYzSUZJd0xDQjBaU0E5SUc1bGR5QkVNQ2hZTENCcFpTa3NJR1JsSUQwZ2JtVjNJSFJmS0hnc0lFNWxMQ0J4WlN3Z1Npd2dVeXdnWkN3Z1l5a3NJSEpsSUQwZ2JtVjNJRVl3S0hnc0lGTXNJR2xsS1N3Z1NXVWdQU0J1WlhjZ1J6QW9UQ3dnVTJVc0lHbGxMQ0JLS1N3Z1dtVWdQU0J1WlhjZ2FWOG9UQ3dnV0N3Z1UyVXNJR2xsS1N3Z2MyVWdQU0J1WlhjZ1pGOG9UQ3dnV0N3Z1UyVXNJR2xsS1N3Z1UyVXVjSEp2WjNKaGJYTWdQU0JDTG5CeWIyZHlZVzF6TENCNExtTmhjR0ZpYVd4cGRHbGxjeUE5SUdsbExDQjRMbVY0ZEdWdWMybHZibk1nUFNCWUxDQjRMbkJ5YjNCbGNuUnBaWE1nUFNCdFpTd2dlQzV5Wlc1a1pYSk1hWE4wY3lBOUlHb3NJSGd1YzJoaFpHOTNUV0Z3SUQwZ2NtVXNJSGd1YzNSaGRHVWdQU0JLTENCNExtbHVabThnUFNCVFpUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdVbVVvS1RzS0lDQWdJQ0FnSUNCc1pYUWdVQ0E5SUc1bGR5QkJieWg0TENCTUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5oeUlEMGdVQ3dnZEdocGN5NW5aWFJEYjI1MFpYaDBJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQk1Pd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaMlYwUTI5dWRHVjRkRUYwZEhKcFluVjBaWE1nUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRXd1WjJWMFEyOXVkR1Y0ZEVGMGRISnBZblYwWlhNb0tUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtWnZjbU5sUTI5dWRHVjRkRXh2YzNNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVVnUFNCWUxtZGxkQ2dpVjBWQ1IweGZiRzl6WlY5amIyNTBaWGgwSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJRVVnSmlZZ1JTNXNiM05sUTI5dWRHVjRkQ2dwT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11Wm05eVkyVkRiMjUwWlhoMFVtVnpkRzl5WlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSU0E5SUZndVoyVjBLQ0pYUlVKSFRGOXNiM05sWDJOdmJuUmxlSFFpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdSU0FtSmlCRkxuSmxjM1J2Y21WRGIyNTBaWGgwS0NrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUlFhWGhsYkZKaGRHbHZJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQklPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVjMlYwVUdsNFpXeFNZWFJwYnlBOUlHWjFibU4wYVc5dUtFVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1JTQWhQVDBnZG05cFpDQXdJQ1ltSUNoSUlEMGdSU3dnZEdocGN5NXpaWFJUYVhwbEtIb3NJSEVzSUNFeEtTazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJUYVhwbElEMGdablZ1WTNScGIyNG9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JTNXpaWFFvZWl3Z2NTazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXpaWFJUYVhwbElEMGdablZ1WTNScGIyNG9SU3dnVGl3Z1ZpQTlJQ0V3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUUxtbHpVSEpsYzJWdWRHbHVaeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJEWVc0bmRDQmphR0Z1WjJVZ2MybDZaU0IzYUdsc1pTQldVaUJrWlhacFkyVWdhWE1nY0hKbGMyVnVkR2x1Wnk0aUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCNklEMGdSU3dnY1NBOUlFNHNJSFF1ZDJsa2RHZ2dQU0JOWVhSb0xtWnNiMjl5S0VVZ0tpQklLU3dnZEM1b1pXbG5hSFFnUFNCTllYUm9MbVpzYjI5eUtFNGdLaUJJS1N3Z1ZpQTlQVDBnSVRBZ0ppWWdLSFF1YzNSNWJHVXVkMmxrZEdnZ1BTQkZJQ3NnSW5CNElpd2dkQzV6ZEhsc1pTNW9aV2xuYUhRZ1BTQk9JQ3NnSW5CNElpa3NJSFJvYVhNdWMyVjBWbWxsZDNCdmNuUW9NQ3dnTUN3Z1JTd2dUaWs3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSRWNtRjNhVzVuUW5WbVptVnlVMmw2WlNBOUlHWjFibU4wYVc5dUtFVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVVdWMyVjBLSG9nS2lCSUxDQnhJQ29nU0NrdVpteHZiM0lvS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRFUnlZWGRwYm1kQ2RXWm1aWEpUYVhwbElEMGdablZ1WTNScGIyNG9SU3dnVGl3Z1Zpa2dld29nSUNBZ0lDQWdJQ0FnSUNCNklEMGdSU3dnY1NBOUlFNHNJRWdnUFNCV0xDQjBMbmRwWkhSb0lEMGdUV0YwYUM1bWJHOXZjaWhGSUNvZ1Zpa3NJSFF1YUdWcFoyaDBJRDBnVFdGMGFDNW1iRzl2Y2loT0lDb2dWaWtzSUhSb2FYTXVjMlYwVm1sbGQzQnZjblFvTUN3Z01Dd2dSU3dnVGlrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUkRkWEp5Wlc1MFZtbGxkM0J2Y25RZ1BTQm1kVzVqZEdsdmJpaEZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCRkxtTnZjSGtvVkNrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUldhV1YzY0c5eWRDQTlJR1oxYm1OMGFXOXVLRVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFVXVZMjl3ZVNoTEtUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuTmxkRlpwWlhkd2IzSjBJRDBnWm5WdVkzUnBiMjRvUlN3Z1Rpd2dWaXdnUmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JGTG1selZtVmpkRzl5TkNBL0lFc3VjMlYwS0VVdWVDd2dSUzU1TENCRkxub3NJRVV1ZHlrZ09pQkxMbk5sZENoRkxDQk9MQ0JXTENCR0tTd2dTaTUyYVdWM2NHOXlkQ2hVTG1OdmNIa29TeWt1YlhWc2RHbHdiSGxUWTJGc1lYSW9TQ2t1Wm14dmIzSW9LU2s3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSVFkybHpjMjl5SUQwZ1puVnVZM1JwYjI0b1JTa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUlM1amIzQjVLRVFwT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11YzJWMFUyTnBjM052Y2lBOUlHWjFibU4wYVc5dUtFVXNJRTRzSUZZc0lFWXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1JTNXBjMVpsWTNSdmNqUWdQeUJFTG5ObGRDaEZMbmdzSUVVdWVTd2dSUzU2TENCRkxuY3BJRG9nUkM1elpYUW9SU3dnVGl3Z1Zpd2dSaWtzSUVvdWMyTnBjM052Y2loUExtTnZjSGtvUkNrdWJYVnNkR2x3YkhsVFkyRnNZWElvU0NrdVpteHZiM0lvS1NrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUlRZMmx6YzI5eVZHVnpkQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSenNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbk5sZEZOamFYTnpiM0pVWlhOMElEMGdablZ1WTNScGIyNG9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQktMbk5sZEZOamFYTnpiM0pVWlhOMEtFY2dQU0JGS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRFOXdZWEYxWlZOdmNuUWdQU0JtZFc1amRHbHZiaWhGS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRzVsSUQwZ1JUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuTmxkRlJ5WVc1emNHRnlaVzUwVTI5eWRDQTlJR1oxYm1OMGFXOXVLRVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdWeUE5SUVVN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUkRiR1ZoY2tOdmJHOXlJRDBnWm5WdVkzUnBiMjRvUlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSUzVqYjNCNUtHUmxMbWRsZEVOc1pXRnlRMjlzYjNJb0tTazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXpaWFJEYkdWaGNrTnZiRzl5SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdSbExuTmxkRU5zWldGeVEyOXNiM0l1WVhCd2JIa29aR1VzSUdGeVozVnRaVzUwY3lrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUkRiR1ZoY2tGc2NHaGhJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaUzVuWlhSRGJHVmhja0ZzY0doaEtDazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXpaWFJEYkdWaGNrRnNjR2hoSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdSbExuTmxkRU5zWldGeVFXeHdhR0V1WVhCd2JIa29aR1VzSUdGeVozVnRaVzUwY3lrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1amJHVmhjaUE5SUdaMWJtTjBhVzl1S0VVZ1BTQWhNQ3dnVGlBOUlDRXdMQ0JXSUQwZ0lUQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVlnUFNBd093b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdzZ1BTQWhNVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoU0lDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIaGxJRDBnVWk1MFpYaDBkWEpsTG1admNtMWhkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcklEMGdlR1VnUFQwOUlGOWtJSHg4SUhobElEMDlQU0JuWkNCOGZDQjRaU0E5UFQwZ2JXUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYXlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNFpTQTlJRkl1ZEdWNGRIVnlaUzUwZVhCbExDQkJaU0E5SUhobElEMDlQU0JQYmlCOGZDQjRaU0E5UFQwZ1RHNGdmSHdnZUdVZ1BUMDlJRmRqSUh4OElIaGxJRDA5UFNCcGFTQjhmQ0I0WlNBOVBUMGdabVFnZkh3Z2VHVWdQVDA5SUhCa0xDQlZaU0E5SUdSbExtZGxkRU5zWldGeVEyOXNiM0lvS1N3Z1JHVWdQU0JrWlM1blpYUkRiR1ZoY2tGc2NHaGhLQ2tzSUZkbElEMGdWV1V1Y2l3Z1VHVWdQU0JWWlM1bkxDQldaU0E5SUZWbExtSTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUVdVZ1B5QW9abHN3WFNBOUlGZGxMQ0JtV3pGZElEMGdVR1VzSUdaYk1sMGdQU0JXWlN3Z1psc3pYU0E5SUVSbExDQk1MbU5zWldGeVFuVm1abVZ5ZFdsMktFd3VRMDlNVDFJc0lEQXNJR1lwS1NBNklDaHRXekJkSUQwZ1YyVXNJRzFiTVYwZ1BTQlFaU3dnYlZzeVhTQTlJRlpsTENCdFd6TmRJRDBnUkdVc0lFd3VZMnhsWVhKQ2RXWm1aWEpwZGloTUxrTlBURTlTTENBd0xDQnRLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdSaUI4UFNCTUxrTlBURTlTWDBKVlJrWkZVbDlDU1ZRN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1RpQW1KaUFvUmlCOFBTQk1Ma1JGVUZSSVgwSlZSa1pGVWw5Q1NWUXBMQ0JXSUNZbUlDaEdJSHc5SUV3dVUxUkZUa05KVEY5Q1ZVWkdSVkpmUWtsVUtTd2dUQzVqYkdWaGNpaEdLVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbU5zWldGeVEyOXNiM0lnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiR1ZoY2lnaE1Dd2dJVEVzSUNFeEtUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtTnNaV0Z5UkdWd2RHZ2dQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amJHVmhjaWdoTVN3Z0lUQXNJQ0V4S1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1Oc1pXRnlVM1JsYm1OcGJDQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Oc1pXRnlLQ0V4TENBaE1Td2dJVEFwT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WkdsemNHOXpaU0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0luZGxZbWRzWTI5dWRHVjRkR3h2YzNRaUxDQmpaU3dnSVRFcExDQjBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSW5kbFltZHNZMjl1ZEdWNGRISmxjM1J2Y21Wa0lpd2dZV1VzSUNFeEtTd2dkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKM1pXSm5iR052Ym5SbGVIUmpjbVZoZEdsdmJtVnljbTl5SWl3Z1oyVXNJQ0V4S1N3Z2FpNWthWE53YjNObEtDa3NJSFJsTG1ScGMzQnZjMlVvS1N3Z2JXVXVaR2x6Y0c5elpTZ3BMQ0JPWlM1a2FYTndiM05sS0Nrc0lIRmxMbVJwYzNCdmMyVW9LU3dnVXk1a2FYTndiM05sS0Nrc0lFOWxMbVJwYzNCdmMyVW9LU3dnU1dVdVpHbHpjRzl6WlNncExDQkNMbVJwYzNCdmMyVW9LU3dnVUM1a2FYTndiM05sS0Nrc0lGQXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpYzJWemMybHZibk4wWVhKMElpd2dkSFFwTENCUUxuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9Jbk5sYzNOcGIyNWxibVFpTENCMGJpa3NJSGRsSUNZbUlDaDNaUzVrYVhOd2IzTmxLQ2tzSUhkbElEMGdiblZzYkNrc0lGSjBMbk4wYjNBb0tUc0tJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR05sS0VVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnUlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTENCamIyNXpiMnhsTG14dlp5Z2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nUTI5dWRHVjRkQ0JNYjNOMExpSXBMQ0I1SUQwZ0lUQTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR0ZsS0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dRMjl1ZEdWNGRDQlNaWE4wYjNKbFpDNGlLU3dnZVNBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSU0E5SUZObExtRjFkRzlTWlhObGRDd2dUaUE5SUhKbExtVnVZV0pzWldRc0lGWWdQU0J5WlM1aGRYUnZWWEJrWVhSbExDQkdJRDBnY21VdWJtVmxaSE5WY0dSaGRHVXNJR3NnUFNCeVpTNTBlWEJsT3dvZ0lDQWdJQ0FnSUNBZ0lDQlNaU2dwTENCVFpTNWhkWFJ2VW1WelpYUWdQU0JGTENCeVpTNWxibUZpYkdWa0lEMGdUaXdnY21VdVlYVjBiMVZ3WkdGMFpTQTlJRllzSUhKbExtNWxaV1J6VlhCa1lYUmxJRDBnUml3Z2NtVXVkSGx3WlNBOUlHczdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2RsS0VVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nUVNCWFpXSkhUQ0JqYjI1MFpYaDBJR052ZFd4a0lHNXZkQ0JpWlNCamNtVmhkR1ZrTGlCU1pXRnpiMjQ2SUNJc0lFVXVjM1JoZEhWelRXVnpjMkZuWlNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlIVmxLRVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUU0Z1BTQkZMblJoY21kbGREc0tJQ0FnSUNBZ0lDQWdJQ0FnVGk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dkV1VwTENCUktFNHBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJSS0VVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWW1Vb1JTa3NJRzFsTG5KbGJXOTJaU2hGS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1ltVW9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVGlBOUlHMWxMbWRsZENoRktTNXdjbTluY21GdGN6c0tJQ0FnSUNBZ0lDQWdJQ0FnVGlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hPTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvVmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FpNXlaV3hsWVhObFVISnZaM0poYlNoV0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNrc0lFVXVhWE5UYUdGa1pYSk5ZWFJsY21saGJDQW1KaUJDTG5KbGJHVmhjMlZUYUdGa1pYSkRZV05vWlNoRktTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5UW5WbVptVnlSR2x5WldOMElEMGdablZ1WTNScGIyNG9SU3dnVGl3Z1Zpd2dSaXdnYXl3Z2VHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1RpQTlQVDBnYm5Wc2JDQW1KaUFvVGlBOUlHbDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRUZsSUQwZ2F5NXBjMDFsYzJnZ0ppWWdheTV0WVhSeWFYaFhiM0pzWkM1a1pYUmxjbTFwYm1GdWRDZ3BJRHdnTUN3Z1ZXVWdQU0JHWkNoRkxDQk9MQ0JXTENCR0xDQnJLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1NpNXpaWFJOWVhSbGNtbGhiQ2hHTENCQlpTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQkVaU0E5SUZZdWFXNWtaWGdzSUZkbElEMGdNVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRVl1ZDJseVpXWnlZVzFsSUQwOVBTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFUmxJRDBnUXk1blpYUlhhWEpsWm5KaGJXVkJkSFJ5YVdKMWRHVW9WaWtzSUVSbElEMDlQU0IyYjJsa0lEQXBJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGZGxJRDBnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVR1VnUFNCV0xtUnlZWGRTWVc1blpTd2dWbVVnUFNCV0xtRjBkSEpwWW5WMFpYTXVjRzl6YVhScGIyNHNJR0YwSUQwZ1VHVXVjM1JoY25RZ0tpQlhaU3dnYkhRZ1BTQW9VR1V1YzNSaGNuUWdLeUJRWlM1amIzVnVkQ2tnS2lCWFpUc0tJQ0FnSUNBZ0lDQWdJQ0FnZUdVZ0lUMDlJRzUxYkd3Z0ppWWdLR0YwSUQwZ1RXRjBhQzV0WVhnb1lYUXNJSGhsTG5OMFlYSjBJQ29nVjJVcExDQnNkQ0E5SUUxaGRHZ3ViV2x1S0d4MExDQW9lR1V1YzNSaGNuUWdLeUI0WlM1amIzVnVkQ2tnS2lCWFpTa3BMQ0JFWlNBaFBUMGdiblZzYkNBL0lDaGhkQ0E5SUUxaGRHZ3ViV0Y0S0dGMExDQXdLU3dnYkhRZ1BTQk5ZWFJvTG0xcGJpaHNkQ3dnUkdVdVkyOTFiblFwS1NBNklGWmxJQ0U5SUc1MWJHd2dKaVlnS0dGMElEMGdUV0YwYUM1dFlYZ29ZWFFzSURBcExDQnNkQ0E5SUUxaGRHZ3ViV2x1S0d4MExDQldaUzVqYjNWdWRDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdTSFFnUFNCc2RDQXRJR0YwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvU0hRZ1BDQXdJSHg4SUVoMElEMDlQU0F4SUM4Z01Da2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0JQWlM1elpYUjFjQ2hyTENCR0xDQlZaU3dnVml3Z1JHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZVzRzSUhWMElEMGdXbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hFWlNBaFBUMGdiblZzYkNBbUppQW9ZVzRnUFNCeWRDNW5aWFFvUkdVcExDQjFkQ0E5SUhObExDQjFkQzV6WlhSSmJtUmxlQ2hoYmlrcExDQnJMbWx6VFdWemFDa2dSaTUzYVhKbFpuSmhiV1VnUFQwOUlDRXdJRDhnS0VvdWMyVjBUR2x1WlZkcFpIUm9LRVl1ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUNvZ1EyVW9LU2tzSUhWMExuTmxkRTF2WkdVb1RDNU1TVTVGVXlrcElEb2dkWFF1YzJWMFRXOWtaU2hNTGxSU1NVRk9SMHhGVXlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR3N1YVhOTWFXNWxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dHVWdQU0JHTG14cGJtVjNhV1IwYURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZobElEMDlQU0IyYjJsa0lEQWdKaVlnS0ZobElEMGdNU2tzSUVvdWMyVjBUR2x1WlZkcFpIUm9LRmhsSUNvZ1EyVW9LU2tzSUdzdWFYTk1hVzVsVTJWbmJXVnVkSE1nUHlCMWRDNXpaWFJOYjJSbEtFd3VURWxPUlZNcElEb2dheTVwYzB4cGJtVk1iMjl3SUQ4Z2RYUXVjMlYwVFc5a1pTaE1Ma3hKVGtWZlRFOVBVQ2tnT2lCMWRDNXpaWFJOYjJSbEtFd3VURWxPUlY5VFZGSkpVQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCckxtbHpVRzlwYm5SeklEOGdkWFF1YzJWMFRXOWtaU2hNTGxCUFNVNVVVeWtnT2lCckxtbHpVM0J5YVhSbElDWW1JSFYwTG5ObGRFMXZaR1VvVEM1VVVrbEJUa2RNUlZNcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2F5NXBjMGx1YzNSaGJtTmxaRTFsYzJncElIVjBMbkpsYm1SbGNrbHVjM1JoYm1ObGN5aGhkQ3dnU0hRc0lHc3VZMjkxYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hXTG1selNXNXpkR0Z1WTJWa1FuVm1abVZ5UjJWdmJXVjBjbmtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQllaU0E5SUZZdVgyMWhlRWx1YzNSaGJtTmxRMjkxYm5RZ0lUMDlJSFp2YVdRZ01DQS9JRll1WDIxaGVFbHVjM1JoYm1ObFEyOTFiblFnT2lBeElDOGdNQ3dnVTJFZ1BTQk5ZWFJvTG0xcGJpaFdMbWx1YzNSaGJtTmxRMjkxYm5Rc0lGaGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFYwTG5KbGJtUmxja2x1YzNSaGJtTmxjeWhoZEN3Z1NIUXNJRk5oS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIVjBMbkpsYm1SbGNpaGhkQ3dnU0hRcE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVkyOXRjR2xzWlNBOUlHWjFibU4wYVc5dUtFVXNJRTRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdWaWhHTENCckxDQjRaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUmk1MGNtRnVjM0JoY21WdWRDQTlQVDBnSVRBZ0ppWWdSaTV6YVdSbElEMDlQU0JuYmlBbUppQkdMbVp2Y21ObFUybHVaMnhsVUdGemN5QTlQVDBnSVRFZ1B5QW9SaTV6YVdSbElEMGdSblFzSUVZdWJtVmxaSE5WY0dSaGRHVWdQU0FoTUN3Z1NITW9SaXdnYXl3Z2VHVXBMQ0JHTG5OcFpHVWdQU0JDYml3Z1JpNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQkljeWhHTENCckxDQjRaU2tzSUVZdWMybGtaU0E5SUdkdUtTQTZJRWh6S0VZc0lHc3NJSGhsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCbklEMGdkR1V1WjJWMEtFVXBMQ0JuTG1sdWFYUW9LU3dnZGk1d2RYTm9LR2NwTENCRkxuUnlZWFpsY25ObFZtbHphV0pzWlNobWRXNWpkR2x2YmloR0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdMbWx6VEdsbmFIUWdKaVlnUmk1c1lYbGxjbk11ZEdWemRDaE9MbXhoZVdWeWN5a2dKaVlnS0djdWNIVnphRXhwWjJoMEtFWXBMQ0JHTG1OaGMzUlRhR0ZrYjNjZ0ppWWdaeTV3ZFhOb1UyaGhaRzkzS0VZcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNrc0lHY3VjMlYwZFhCTWFXZG9kSE1vZUM1ZmRYTmxUR1ZuWVdONVRHbG5hSFJ6S1N3Z1JTNTBjbUYyWlhKelpTaG1kVzVqZEdsdmJpaEdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2F5QTlJRVl1YldGMFpYSnBZV3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2F5a2dhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29heWtwSUdadmNpaHNaWFFnZUdVZ1BTQXdPeUI0WlNBOElHc3ViR1Z1WjNSb095QjRaU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUVdVZ1BTQnJXM2hsWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQldLRUZsTENCRkxDQkdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ1ZpaHJMQ0JGTENCR0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNrc0lIWXVjRzl3S0Nrc0lHY2dQU0J1ZFd4c093b2dJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdiR1YwSUVabElEMGdiblZzYkRzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCQmRDaEZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFWmxJQ1ltSUVabEtFVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUIwZENncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnVW5RdWMzUnZjQ2dwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCMGJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1VuUXVjM1JoY25Rb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUZKMElEMGdibVYzSUVWa093b2dJQ0FnSUNBZ0lGSjBMbk5sZEVGdWFXMWhkR2x2Ymt4dmIzQW9RWFFwTENCMGVYQmxiMllnYzJWc1ppQThJQ0oxSWlBbUppQlNkQzV6WlhSRGIyNTBaWGgwS0hObGJHWXBMQ0IwYUdsekxuTmxkRUZ1YVcxaGRHbHZia3h2YjNBZ1BTQm1kVzVqZEdsdmJpaEZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFWmxJRDBnUlN3Z1VDNXpaWFJCYm1sdFlYUnBiMjVNYjI5d0tFVXBMQ0JGSUQwOVBTQnVkV3hzSUQ4Z1VuUXVjM1J2Y0NncElEb2dVblF1YzNSaGNuUW9LVHNLSUNBZ0lDQWdJQ0I5TENCUUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0luTmxjM05wYjI1emRHRnlkQ0lzSUhSMEtTd2dVQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p6WlhOemFXOXVaVzVrSWl3Z2RHNHBMQ0IwYUdsekxuSmxibVJsY2lBOUlHWjFibU4wYVc5dUtFVXNJRTRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0U0Z0lUMDlJSFp2YVdRZ01DQW1KaUJPTG1selEyRnRaWEpoSUNFOVBTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjaTV5Wlc1a1pYSTZJR05oYldWeVlTQnBjeUJ1YjNRZ1lXNGdhVzV6ZEdGdVkyVWdiMllnVkVoU1JVVXVRMkZ0WlhKaExpSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2g1SUQwOVBTQWhNQ2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNCRkxtMWhkSEpwZUZkdmNteGtRWFYwYjFWd1pHRjBaU0E5UFQwZ0lUQWdKaVlnUlM1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNncExDQk9MbkJoY21WdWRDQTlQVDBnYm5Wc2JDQW1KaUJPTG0xaGRISnBlRmR2Y214a1FYVjBiMVZ3WkdGMFpTQTlQVDBnSVRBZ0ppWWdUaTUxY0dSaGRHVk5ZWFJ5YVhoWGIzSnNaQ2dwTENCUUxtVnVZV0pzWldRZ1BUMDlJQ0V3SUNZbUlGQXVhWE5RY21WelpXNTBhVzVuSUQwOVBTQWhNQ0FtSmlBb1VDNWpZVzFsY21GQmRYUnZWWEJrWVhSbElEMDlQU0FoTUNBbUppQlFMblZ3WkdGMFpVTmhiV1Z5WVNoT0tTd2dUaUE5SUZBdVoyVjBRMkZ0WlhKaEtDa3BMQ0JGTG1selUyTmxibVVnUFQwOUlDRXdJQ1ltSUVVdWIyNUNaV1p2Y21WU1pXNWtaWElvZUN3Z1JTd2dUaXdnVWlrc0lHY2dQU0IwWlM1blpYUW9SU3dnZGk1c1pXNW5kR2dwTENCbkxtbHVhWFFvS1N3Z2RpNXdkWE5vS0djcExDQkZaUzV0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLRTR1Y0hKdmFtVmpkR2x2YmsxaGRISnBlQ3dnVGk1dFlYUnlhWGhYYjNKc1pFbHVkbVZ5YzJVcExDQm9aUzV6WlhSR2NtOXRVSEp2YW1WamRHbHZiazFoZEhKcGVDaEZaU2tzSUY5bElEMGdkR2hwY3k1c2IyTmhiRU5zYVhCd2FXNW5SVzVoWW14bFpDd2dabVVnUFNCTlpTNXBibWwwS0hSb2FYTXVZMnhwY0hCcGJtZFFiR0Z1WlhNc0lGOWxLU3dnWHlBOUlHb3VaMlYwS0VVc0lIQXViR1Z1WjNSb0tTd2dYeTVwYm1sMEtDa3NJSEF1Y0hWemFDaGZLU3dnYW1Nb1JTd2dUaXdnTUN3Z2VDNXpiM0owVDJKcVpXTjBjeWtzSUY4dVptbHVhWE5vS0Nrc0lIZ3VjMjl5ZEU5aWFtVmpkSE1nUFQwOUlDRXdJQ1ltSUY4dWMyOXlkQ2h1WlN3Z1Z5a3NJSFJvYVhNdWFXNW1ieTV5Wlc1a1pYSXVabkpoYldVckt5d2dabVVnUFQwOUlDRXdJQ1ltSUUxbExtSmxaMmx1VTJoaFpHOTNjeWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVmlBOUlHY3VjM1JoZEdVdWMyaGhaRzkzYzBGeWNtRjVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVV1Y21WdVpHVnlLRllzSUVVc0lFNHBMQ0JtWlNBOVBUMGdJVEFnSmlZZ1RXVXVaVzVrVTJoaFpHOTNjeWdwTENCMGFHbHpMbWx1Wm04dVlYVjBiMUpsYzJWMElEMDlQU0FoTUNBbUppQjBhR2x6TG1sdVptOHVjbVZ6WlhRb0tTd2daR1V1Y21WdVpHVnlLRjhzSUVVcExDQm5Mbk5sZEhWd1RHbG5hSFJ6S0hndVgzVnpaVXhsWjJGamVVeHBaMmgwY3lrc0lFNHVhWE5CY25KaGVVTmhiV1Z5WVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVlnUFNCT0xtTmhiV1Z5WVhNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdzZ1BTQXdMQ0I0WlNBOUlFWXViR1Z1WjNSb095QnJJRHdnZUdVN0lHc3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRUZsSUQwZ1JsdHJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJDaGZMQ0JGTENCQlpTd2dRV1V1ZG1sbGQzQnZjblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1pXd29YeXdnUlN3Z1RpazdDaUFnSUNBZ0lDQWdJQ0FnSUZJZ0lUMDlJRzUxYkd3Z0ppWWdLSGxsTG5Wd1pHRjBaVTExYkhScGMyRnRjR3hsVW1WdVpHVnlWR0Z5WjJWMEtGSXBMQ0I1WlM1MWNHUmhkR1ZTWlc1a1pYSlVZWEpuWlhSTmFYQnRZWEFvVWlrcExDQkZMbWx6VTJObGJtVWdQVDA5SUNFd0lDWW1JRVV1YjI1QlpuUmxjbEpsYm1SbGNpaDRMQ0JGTENCT0tTd2dUMlV1Y21WelpYUkVaV1poZFd4MFUzUmhkR1VvS1N3Z1NTQTlJQzB4TENCTklEMGdiblZzYkN3Z2RpNXdiM0FvS1N3Z2RpNXNaVzVuZEdnZ1BpQXdJRDhnWnlBOUlIWmJkaTVzWlc1bmRHZ2dMU0F4WFNBNklHY2dQU0J1ZFd4c0xDQndMbkJ2Y0NncExDQndMbXhsYm1kMGFDQStJREFnUHlCZklEMGdjRnR3TG14bGJtZDBhQ0F0SURGZElEb2dYeUE5SUc1MWJHdzdDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJxWXloRkxDQk9MQ0JXTENCR0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEZMblpwYzJsaWJHVWdQVDA5SUNFeEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRkxteGhlV1Z5Y3k1MFpYTjBLRTR1YkdGNVpYSnpLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFVXVhWE5IY205MWNDa2dWaUE5SUVVdWNtVnVaR1Z5VDNKa1pYSTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaEZMbWx6VEU5RUtTQkZMbUYxZEc5VmNHUmhkR1VnUFQwOUlDRXdJQ1ltSUVVdWRYQmtZWFJsS0U0cE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1JTNXBjMHhwWjJoMEtTQm5MbkIxYzJoTWFXZG9kQ2hGS1N3Z1JTNWpZWE4wVTJoaFpHOTNJQ1ltSUdjdWNIVnphRk5vWVdSdmR5aEZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRVV1YVhOVGNISnBkR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVVVdVpuSjFjM1IxYlVOMWJHeGxaQ0I4ZkNCb1pTNXBiblJsY25ObFkzUnpVM0J5YVhSbEtFVXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVlnSmlZZ1dXVXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0VVdWJXRjBjbWw0VjI5eWJHUXBMbUZ3Y0d4NVRXRjBjbWw0TkNoRlpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JCWlNBOUlGTXVkWEJrWVhSbEtFVXBMQ0JWWlNBOUlFVXViV0YwWlhKcFlXdzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGVmxMblpwYzJsaWJHVWdKaVlnWHk1d2RYTm9LRVVzSUVGbExDQlZaU3dnVml3Z1dXVXVlaXdnYm5Wc2JDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnb1JTNXBjMDFsYzJnZ2ZId2dSUzVwYzB4cGJtVWdmSHdnUlM1cGMxQnZhVzUwY3lrZ0ppWWdLQ0ZGTG1aeWRYTjBkVzFEZFd4c1pXUWdmSHdnYUdVdWFXNTBaWEp6WldOMGMwOWlhbVZqZENoRktTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdRV1VnUFNCVExuVndaR0YwWlNoRktTd2dWV1VnUFNCRkxtMWhkR1Z5YVdGc093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoR0lDWW1JQ2hGTG1KdmRXNWthVzVuVTNCb1pYSmxJQ0U5UFNCMmIybGtJREFnUHlBb1JTNWliM1Z1WkdsdVoxTndhR1Z5WlNBOVBUMGdiblZzYkNBbUppQkZMbU52YlhCMWRHVkNiM1Z1WkdsdVoxTndhR1Z5WlNncExDQlpaUzVqYjNCNUtFVXVZbTkxYm1ScGJtZFRjR2hsY21VdVkyVnVkR1Z5S1NrZ09pQW9RV1V1WW05MWJtUnBibWRUY0dobGNtVWdQVDA5SUc1MWJHd2dKaVlnUVdVdVkyOXRjSFYwWlVKdmRXNWthVzVuVTNCb1pYSmxLQ2tzSUZsbExtTnZjSGtvUVdVdVltOTFibVJwYm1kVGNHaGxjbVV1WTJWdWRHVnlLU2tzSUZsbExtRndjR3g1VFdGMGNtbDROQ2hGTG0xaGRISnBlRmR2Y214a0tTNWhjSEJzZVUxaGRISnBlRFFvUldVcEtTd2dRWEp5WVhrdWFYTkJjbkpoZVNoVlpTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVSbElEMGdRV1V1WjNKdmRYQnpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGZGxJRDBnTUN3Z1VHVWdQU0JFWlM1c1pXNW5kR2c3SUZkbElEd2dVR1U3SUZkbEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGWmxJRDBnUkdWYlYyVmRMQ0JoZENBOUlGVmxXMVpsTG0xaGRHVnlhV0ZzU1c1a1pYaGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhRZ0ppWWdZWFF1ZG1semFXSnNaU0FtSmlCZkxuQjFjMmdvUlN3Z1FXVXNJR0YwTENCV0xDQlpaUzU2TENCV1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdWV1V1ZG1semFXSnNaU0FtSmlCZkxuQjFjMmdvUlN3Z1FXVXNJRlZsTENCV0xDQlpaUzU2TENCdWRXeHNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VHVWdQU0JGTG1Ob2FXeGtjbVZ1T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFRmxJRDBnTUN3Z1ZXVWdQU0I0WlM1c1pXNW5kR2c3SUVGbElEd2dWV1U3SUVGbEt5c3BhbU1vZUdWYlFXVmRMQ0JPTENCV0xDQkdLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWld3b1JTd2dUaXdnVml3Z1Jpa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdheUE5SUVVdWIzQmhjWFZsTENCNFpTQTlJRVV1ZEhKaGJuTnRhWE56YVhabExDQkJaU0E5SUVVdWRISmhibk53WVhKbGJuUTdDaUFnSUNBZ0lDQWdJQ0FnSUdjdWMyVjBkWEJNYVdkb2RITldhV1YzS0ZZcExDQm1aU0E5UFQwZ0lUQWdKaVlnVFdVdWMyVjBSMnh2WW1Gc1UzUmhkR1VvZUM1amJHbHdjR2x1WjFCc1lXNWxjeXdnVmlrc0lIaGxMbXhsYm1kMGFDQStJREFnSmlZZ1QyUW9heXdnZUdVc0lFNHNJRllwTENCR0lDWW1JRW91ZG1sbGQzQnZjblFvVkM1amIzQjVLRVlwS1N3Z2F5NXNaVzVuZEdnZ1BpQXdJQ1ltSUd0ektHc3NJRTRzSUZZcExDQjRaUzVzWlc1bmRHZ2dQaUF3SUNZbUlHdHpLSGhsTENCT0xDQldLU3dnUVdVdWJHVnVaM1JvSUQ0Z01DQW1KaUJyY3loQlpTd2dUaXdnVmlrc0lFb3VZblZtWm1WeWN5NWtaWEIwYUM1elpYUlVaWE4wS0NFd0tTd2dTaTVpZFdabVpYSnpMbVJsY0hSb0xuTmxkRTFoYzJzb0lUQXBMQ0JLTG1KMVptWmxjbk11WTI5c2IzSXVjMlYwVFdGemF5Z2hNQ2tzSUVvdWMyVjBVRzlzZVdkdmJrOW1abk5sZENnaE1TazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRTlrS0VVc0lFNHNJRllzSUVZcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHc2dQU0JwWlM1cGMxZGxZa2RNTWpzS0lDQWdJQ0FnSUNBZ0lDQWdkMlVnUFQwOUlHNTFiR3dnSmlZZ0tIZGxJRDBnYm1WM0lIRjBLREVzSURFc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxibVZ5WVhSbFRXbHdiV0Z3Y3pvZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCWUxtaGhjeWdpUlZoVVgyTnZiRzl5WDJKMVptWmxjbDlvWVd4bVgyWnNiMkYwSWlrZ1B5QlVjeUE2SUU5dUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXbHVSbWxzZEdWeU9pQnNhU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5oYlhCc1pYTTZJR3NnUHlBMElEb2dNQW9nSUNBZ0lDQWdJQ0FnSUNCOUtTa3NJSGd1WjJWMFJISmhkMmx1WjBKMVptWmxjbE5wZW1Vb1ZHVXBMQ0JySUQ4Z2QyVXVjMlYwVTJsNlpTaFVaUzU0TENCVVpTNTVLU0E2SUhkbExuTmxkRk5wZW1Vb1YzSW9WR1V1ZUNrc0lGZHlLRlJsTG5rcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIaGxJRDBnZUM1blpYUlNaVzVrWlhKVVlYSm5aWFFvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdlQzV6WlhSU1pXNWtaWEpVWVhKblpYUW9kMlVwTENCNExtZGxkRU5zWldGeVEyOXNiM0lvSkNrc0lGVWdQU0I0TG1kbGRFTnNaV0Z5UVd4d2FHRW9LU3dnVlNBOElERWdKaVlnZUM1elpYUkRiR1ZoY2tOdmJHOXlLREUyTnpjM01qRTFMQ0F1TlNrc0lIZ3VZMnhsWVhJb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFRmxJRDBnZUM1MGIyNWxUV0Z3Y0dsdVp6c0tJQ0FnSUNBZ0lDQWdJQ0FnZUM1MGIyNWxUV0Z3Y0dsdVp5QTlJRTV1TENCcmN5aEZMQ0JXTENCR0tTd2dlV1V1ZFhCa1lYUmxUWFZzZEdsellXMXdiR1ZTWlc1a1pYSlVZWEpuWlhRb2QyVXBMQ0I1WlM1MWNHUmhkR1ZTWlc1a1pYSlVZWEpuWlhSTmFYQnRZWEFvZDJVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZXVWdQU0FoTVRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkVaU0E5SURBc0lGZGxJRDBnVGk1c1pXNW5kR2c3SUVSbElEd2dWMlU3SUVSbEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZCbElEMGdUbHRFWlYwc0lGWmxJRDBnVUdVdWIySnFaV04wTENCaGRDQTlJRkJsTG1kbGIyMWxkSEo1TENCc2RDQTlJRkJsTG0xaGRHVnlhV0ZzTENCSWRDQTlJRkJsTG1keWIzVndPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4MExuTnBaR1VnUFQwOUlHZHVJQ1ltSUZabExteGhlV1Z5Y3k1MFpYTjBLRVl1YkdGNVpYSnpLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoYmlBOUlHeDBMbk5wWkdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiSFF1YzJsa1pTQTlJRVowTENCc2RDNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBiQ2hXWlN3Z1Zpd2dSaXdnWVhRc0lHeDBMQ0JJZENrc0lHeDBMbk5wWkdVZ1BTQmhiaXdnYkhRdWJtVmxaSE5WY0dSaGRHVWdQU0FoTUN3Z1ZXVWdQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCVlpTQTlQVDBnSVRBZ0ppWWdLSGxsTG5Wd1pHRjBaVTExYkhScGMyRnRjR3hsVW1WdVpHVnlWR0Z5WjJWMEtIZGxLU3dnZVdVdWRYQmtZWFJsVW1WdVpHVnlWR0Z5WjJWMFRXbHdiV0Z3S0hkbEtTa3NJSGd1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLSGhsS1N3Z2VDNXpaWFJEYkdWaGNrTnZiRzl5S0NRc0lGVXBMQ0I0TG5SdmJtVk5ZWEJ3YVc1bklEMGdRV1U3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUd0ektFVXNJRTRzSUZZcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFWWdQU0JPTG1selUyTmxibVVnUFQwOUlDRXdJRDhnVGk1dmRtVnljbWxrWlUxaGRHVnlhV0ZzSURvZ2JuVnNiRHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcklEMGdNQ3dnZUdVZ1BTQkZMbXhsYm1kMGFEc2dheUE4SUhobE95QnJLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFRmxJRDBnUlZ0clhTd2dWV1VnUFNCQlpTNXZZbXBsWTNRc0lFUmxJRDBnUVdVdVoyVnZiV1YwY25rc0lGZGxJRDBnUmlBOVBUMGdiblZzYkNBL0lFRmxMbTFoZEdWeWFXRnNJRG9nUml3Z1VHVWdQU0JCWlM1bmNtOTFjRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlZsTG14aGVXVnljeTUwWlhOMEtGWXViR0Y1WlhKektTQW1KaUIwYkNoVlpTd2dUaXdnVml3Z1JHVXNJRmRsTENCUVpTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2RHd29SU3dnVGl3Z1Zpd2dSaXdnYXl3Z2VHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1JTNXZia0psWm05eVpWSmxibVJsY2loNExDQk9MQ0JXTENCR0xDQnJMQ0I0WlNrc0lFVXViVzlrWld4V2FXVjNUV0YwY21sNExtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb1ZpNXRZWFJ5YVhoWGIzSnNaRWx1ZG1WeWMyVXNJRVV1YldGMGNtbDRWMjl5YkdRcExDQkZMbTV2Y20xaGJFMWhkSEpwZUM1blpYUk9iM0p0WVd4TllYUnlhWGdvUlM1dGIyUmxiRlpwWlhkTllYUnlhWGdwTENCckxtOXVRbVZtYjNKbFVtVnVaR1Z5S0hnc0lFNHNJRllzSUVZc0lFVXNJSGhsS1N3Z2F5NTBjbUZ1YzNCaGNtVnVkQ0E5UFQwZ0lUQWdKaVlnYXk1emFXUmxJRDA5UFNCbmJpQW1KaUJyTG1admNtTmxVMmx1WjJ4bFVHRnpjeUE5UFQwZ0lURWdQeUFvYXk1emFXUmxJRDBnUm5Rc0lHc3VibVZsWkhOVmNHUmhkR1VnUFNBaE1Dd2dlQzV5Wlc1a1pYSkNkV1ptWlhKRWFYSmxZM1FvVml3Z1Rpd2dSaXdnYXl3Z1JTd2dlR1VwTENCckxuTnBaR1VnUFNCQ2Jpd2dheTV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0I0TG5KbGJtUmxja0oxWm1abGNrUnBjbVZqZENoV0xDQk9MQ0JHTENCckxDQkZMQ0I0WlNrc0lHc3VjMmxrWlNBOUlHZHVLU0E2SUhndWNtVnVaR1Z5UW5WbVptVnlSR2x5WldOMEtGWXNJRTRzSUVZc0lHc3NJRVVzSUhobEtTd2dSUzV2YmtGbWRHVnlVbVZ1WkdWeUtIZ3NJRTRzSUZZc0lFWXNJR3NzSUhobEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdTSE1vUlN3Z1Rpd2dWaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQk9MbWx6VTJObGJtVWdJVDA5SUNFd0lDWW1JQ2hPSUQwZ2FYUXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSaUE5SUcxbExtZGxkQ2hGS1N3Z2F5QTlJR2N1YzNSaGRHVXViR2xuYUhSekxDQjRaU0E5SUdjdWMzUmhkR1V1YzJoaFpHOTNjMEZ5Y21GNUxDQkJaU0E5SUdzdWMzUmhkR1V1ZG1WeWMybHZiaXdnVldVZ1BTQkNMbWRsZEZCaGNtRnRaWFJsY25Nb1JTd2dheTV6ZEdGMFpTd2dlR1VzSUU0c0lGWXBMQ0JFWlNBOUlFSXVaMlYwVUhKdlozSmhiVU5oWTJobFMyVjVLRlZsS1N3Z1YyVWdQU0JHTG5CeWIyZHlZVzF6T3dvZ0lDQWdJQ0FnSUNBZ0lDQkdMbVZ1ZG1seWIyNXRaVzUwSUQwZ1JTNXBjMDFsYzJoVGRHRnVaR0Z5WkUxaGRHVnlhV0ZzSUQ4Z1RpNWxiblpwY205dWJXVnVkQ0E2SUc1MWJHd3NJRVl1Wm05bklEMGdUaTVtYjJjc0lFWXVaVzUyVFdGd0lEMGdLRVV1YVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJDQS9JSEZsSURvZ1RtVXBMbWRsZENoRkxtVnVkazFoY0NCOGZDQkdMbVZ1ZG1seWIyNXRaVzUwS1N3Z1YyVWdQVDA5SUhadmFXUWdNQ0FtSmlBb1JTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dkV1VwTENCWFpTQTlJRzVsZHlCTllYQXNJRVl1Y0hKdlozSmhiWE1nUFNCWFpTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQlFaU0E5SUZkbExtZGxkQ2hFWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUVpTQWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JpNWpkWEp5Wlc1MFVISnZaM0poYlNBOVBUMGdVR1VnSmlZZ1JpNXNhV2RvZEhOVGRHRjBaVlpsY25OcGIyNGdQVDA5SUVGbEtTQnlaWFIxY200Z2Jtd29SU3dnVldVcExDQlFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUZWbExuVnVhV1p2Y20xeklEMGdRaTVuWlhSVmJtbG1iM0p0Y3loRktTd2dSUzV2YmtKMWFXeGtLRllzSUZWbExDQjRLU3dnUlM1dmJrSmxabTl5WlVOdmJYQnBiR1VvVldVc0lIZ3BMQ0JRWlNBOUlFSXVZV054ZFdseVpWQnliMmR5WVcwb1ZXVXNJRVJsS1N3Z1YyVXVjMlYwS0VSbExDQlFaU2tzSUVZdWRXNXBabTl5YlhNZ1BTQlZaUzUxYm1sbWIzSnRjenNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRlpsSUQwZ1JpNTFibWxtYjNKdGN6c0tJQ0FnSUNBZ0lDQWdJQ0FnS0NGRkxtbHpVMmhoWkdWeVRXRjBaWEpwWVd3Z0ppWWdJVVV1YVhOU1lYZFRhR0ZrWlhKTllYUmxjbWxoYkNCOGZDQkZMbU5zYVhCd2FXNW5JRDA5UFNBaE1Da2dKaVlnS0ZabExtTnNhWEJ3YVc1blVHeGhibVZ6SUQwZ1RXVXVkVzVwWm05eWJTa3NJRzVzS0VVc0lGVmxLU3dnUmk1dVpXVmtjMHhwWjJoMGN5QTlJSHBrS0VVcExDQkdMbXhwWjJoMGMxTjBZWFJsVm1WeWMybHZiaUE5SUVGbExDQkdMbTVsWldSelRHbG5hSFJ6SUNZbUlDaFdaUzVoYldKcFpXNTBUR2xuYUhSRGIyeHZjaTUyWVd4MVpTQTlJR3N1YzNSaGRHVXVZVzFpYVdWdWRDd2dWbVV1YkdsbmFIUlFjbTlpWlM1MllXeDFaU0E5SUdzdWMzUmhkR1V1Y0hKdlltVXNJRlpsTG1ScGNtVmpkR2x2Ym1Gc1RHbG5hSFJ6TG5aaGJIVmxJRDBnYXk1emRHRjBaUzVrYVhKbFkzUnBiMjVoYkN3Z1ZtVXVaR2x5WldOMGFXOXVZV3hNYVdkb2RGTm9ZV1J2ZDNNdWRtRnNkV1VnUFNCckxuTjBZWFJsTG1ScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzTENCV1pTNXpjRzkwVEdsbmFIUnpMblpoYkhWbElEMGdheTV6ZEdGMFpTNXpjRzkwTENCV1pTNXpjRzkwVEdsbmFIUlRhR0ZrYjNkekxuWmhiSFZsSUQwZ2F5NXpkR0YwWlM1emNHOTBVMmhoWkc5M0xDQldaUzV5WldOMFFYSmxZVXhwWjJoMGN5NTJZV3gxWlNBOUlHc3VjM1JoZEdVdWNtVmpkRUZ5WldFc0lGWmxMbXgwWTE4eExuWmhiSFZsSUQwZ2F5NXpkR0YwWlM1eVpXTjBRWEpsWVV4VVF6RXNJRlpsTG14MFkxOHlMblpoYkhWbElEMGdheTV6ZEdGMFpTNXlaV04wUVhKbFlVeFVReklzSUZabExuQnZhVzUwVEdsbmFIUnpMblpoYkhWbElEMGdheTV6ZEdGMFpTNXdiMmx1ZEN3Z1ZtVXVjRzlwYm5STWFXZG9kRk5vWVdSdmQzTXVkbUZzZFdVZ1BTQnJMbk4wWVhSbExuQnZhVzUwVTJoaFpHOTNMQ0JXWlM1b1pXMXBjM0JvWlhKbFRHbG5hSFJ6TG5aaGJIVmxJRDBnYXk1emRHRjBaUzVvWlcxcExDQldaUzVrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoY0M1MllXeDFaU0E5SUdzdWMzUmhkR1V1WkdseVpXTjBhVzl1WVd4VGFHRmtiM2ROWVhBc0lGWmxMbVJwY21WamRHbHZibUZzVTJoaFpHOTNUV0YwY21sNExuWmhiSFZsSUQwZ2F5NXpkR0YwWlM1a2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZDAxaGRISnBlQ3dnVm1VdWMzQnZkRk5vWVdSdmQwMWhjQzUyWVd4MVpTQTlJR3N1YzNSaGRHVXVjM0J2ZEZOb1lXUnZkMDFoY0N3Z1ZtVXVjM0J2ZEV4cFoyaDBUV0YwY21sNExuWmhiSFZsSUQwZ2F5NXpkR0YwWlM1emNHOTBUR2xuYUhSTllYUnlhWGdzSUZabExuTndiM1JNYVdkb2RFMWhjQzUyWVd4MVpTQTlJR3N1YzNSaGRHVXVjM0J2ZEV4cFoyaDBUV0Z3TENCV1pTNXdiMmx1ZEZOb1lXUnZkMDFoY0M1MllXeDFaU0E5SUdzdWMzUmhkR1V1Y0c5cGJuUlRhR0ZrYjNkTllYQXNJRlpsTG5CdmFXNTBVMmhoWkc5M1RXRjBjbWw0TG5aaGJIVmxJRDBnYXk1emRHRjBaUzV3YjJsdWRGTm9ZV1J2ZDAxaGRISnBlQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoZENBOUlGQmxMbWRsZEZWdWFXWnZjbTF6S0Nrc0lHeDBJRDBnY1drdWMyVnhWMmwwYUZaaGJIVmxLR0YwTG5ObGNTd2dWbVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JpNWpkWEp5Wlc1MFVISnZaM0poYlNBOUlGQmxMQ0JHTG5WdWFXWnZjbTF6VEdsemRDQTlJR3gwTENCUVpUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdibXdvUlN3Z1Rpa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdWaUE5SUcxbExtZGxkQ2hGS1RzS0lDQWdJQ0FnSUNBZ0lDQWdWaTV2ZFhSd2RYUkRiMnh2Y2xOd1lXTmxJRDBnVGk1dmRYUndkWFJEYjJ4dmNsTndZV05sTENCV0xtbHVjM1JoYm1OcGJtY2dQU0JPTG1sdWMzUmhibU5wYm1jc0lGWXVhVzV6ZEdGdVkybHVaME52Ykc5eUlEMGdUaTVwYm5OMFlXNWphVzVuUTI5c2IzSXNJRll1YzJ0cGJtNXBibWNnUFNCT0xuTnJhVzV1YVc1bkxDQldMbTF2Y25Cb1ZHRnlaMlYwY3lBOUlFNHViVzl5Y0doVVlYSm5aWFJ6TENCV0xtMXZjbkJvVG05eWJXRnNjeUE5SUU0dWJXOXljR2hPYjNKdFlXeHpMQ0JXTG0xdmNuQm9RMjlzYjNKeklEMGdUaTV0YjNKd2FFTnZiRzl5Y3l3Z1ZpNXRiM0p3YUZSaGNtZGxkSE5EYjNWdWRDQTlJRTR1Ylc5eWNHaFVZWEpuWlhSelEyOTFiblFzSUZZdWJuVnRRMnhwY0hCcGJtZFFiR0Z1WlhNZ1BTQk9MbTUxYlVOc2FYQndhVzVuVUd4aGJtVnpMQ0JXTG01MWJVbHVkR1Z5YzJWamRHbHZiaUE5SUU0dWJuVnRRMnhwY0VsdWRHVnljMlZqZEdsdmJpd2dWaTUyWlhKMFpYaEJiSEJvWVhNZ1BTQk9MblpsY25SbGVFRnNjR2hoY3l3Z1ZpNTJaWEowWlhoVVlXNW5aVzUwY3lBOUlFNHVkbVZ5ZEdWNFZHRnVaMlZ1ZEhNc0lGWXVkRzl1WlUxaGNIQnBibWNnUFNCT0xuUnZibVZOWVhCd2FXNW5Pd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJHWkNoRkxDQk9MQ0JXTENCR0xDQnJLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFNHVhWE5UWTJWdVpTQWhQVDBnSVRBZ0ppWWdLRTRnUFNCcGRDa3NJSGxsTG5KbGMyVjBWR1Y0ZEhWeVpWVnVhWFJ6S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNFpTQTlJRTR1Wm05bkxDQkJaU0E5SUVZdWFYTk5aWE5vVTNSaGJtUmhjbVJOWVhSbGNtbGhiQ0EvSUU0dVpXNTJhWEp2Ym0xbGJuUWdPaUJ1ZFd4c0xDQlZaU0E5SUZJZ1BUMDlJRzUxYkd3Z1B5QjRMbTkxZEhCMWRFTnZiRzl5VTNCaFkyVWdPaUJTTG1seldGSlNaVzVrWlhKVVlYSm5aWFFnUFQwOUlDRXdJRDhnVWk1MFpYaDBkWEpsTG1OdmJHOXlVM0JoWTJVZ09pQk5iaXdnUkdVZ1BTQW9SaTVwYzAxbGMyaFRkR0Z1WkdGeVpFMWhkR1Z5YVdGc0lEOGdjV1VnT2lCT1pTa3VaMlYwS0VZdVpXNTJUV0Z3SUh4OElFRmxLU3dnVjJVZ1BTQkdMblpsY25SbGVFTnZiRzl5Y3lBOVBUMGdJVEFnSmlZZ0lTRldMbUYwZEhKcFluVjBaWE11WTI5c2IzSWdKaVlnVmk1aGRIUnlhV0oxZEdWekxtTnZiRzl5TG1sMFpXMVRhWHBsSUQwOVBTQTBMQ0JRWlNBOUlDRWhWaTVoZEhSeWFXSjFkR1Z6TG5SaGJtZGxiblFnSmlZZ0tDRWhSaTV1YjNKdFlXeE5ZWEFnZkh3Z1JpNWhibWx6YjNSeWIzQjVJRDRnTUNrc0lGWmxJRDBnSVNGV0xtMXZjbkJvUVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2Yml3Z1lYUWdQU0FoSVZZdWJXOXljR2hCZEhSeWFXSjFkR1Z6TG01dmNtMWhiQ3dnYkhRZ1BTQWhJVll1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbU52Ykc5eUxDQklkQ0E5SUU1dU93b2dJQ0FnSUNBZ0lDQWdJQ0JHTG5SdmJtVk5ZWEJ3WldRZ0ppWWdLRklnUFQwOUlHNTFiR3dnZkh3Z1VpNXBjMWhTVW1WdVpHVnlWR0Z5WjJWMElEMDlQU0FoTUNrZ0ppWWdLRWgwSUQwZ2VDNTBiMjVsVFdGd2NHbHVaeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoYmlBOUlGWXViVzl5Y0doQmRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dUlIeDhJRll1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbTV2Y20xaGJDQjhmQ0JXTG0xdmNuQm9RWFIwY21saWRYUmxjeTVqYjJ4dmNpd2dkWFFnUFNCaGJpQWhQVDBnZG05cFpDQXdJRDhnWVc0dWJHVnVaM1JvSURvZ01Dd2dXR1VnUFNCdFpTNW5aWFFvUmlrc0lGTmhJRDBnWnk1emRHRjBaUzVzYVdkb2RITTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1aU0E5UFQwZ0lUQWdKaVlnS0Y5bElEMDlQU0FoTUNCOGZDQkZJQ0U5UFNCTktTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVKMElEMGdSU0E5UFQwZ1RTQW1KaUJHTG1sa0lEMDlQU0JKT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVFdVdWMyVjBVM1JoZEdVb1Jpd2dSU3dnUW5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrZENBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNCR0xuWmxjbk5wYjI0Z1BUMDlJRmhsTGw5ZmRtVnljMmx2YmlBL0lDaFlaUzV1WldWa2MweHBaMmgwY3lBbUppQllaUzVzYVdkb2RITlRkR0YwWlZabGNuTnBiMjRnSVQwOUlGTmhMbk4wWVhSbExuWmxjbk5wYjI0Z2ZId2dXR1V1YjNWMGNIVjBRMjlzYjNKVGNHRmpaU0FoUFQwZ1ZXVWdmSHdnYXk1cGMwbHVjM1JoYm1ObFpFMWxjMmdnSmlZZ1dHVXVhVzV6ZEdGdVkybHVaeUE5UFQwZ0lURWdmSHdnSVdzdWFYTkpibk4wWVc1alpXUk5aWE5vSUNZbUlGaGxMbWx1YzNSaGJtTnBibWNnUFQwOUlDRXdJSHg4SUdzdWFYTlRhMmx1Ym1Wa1RXVnphQ0FtSmlCWVpTNXphMmx1Ym1sdVp5QTlQVDBnSVRFZ2ZId2dJV3N1YVhOVGEybHVibVZrVFdWemFDQW1KaUJZWlM1emEybHVibWx1WnlBOVBUMGdJVEFnZkh3Z2F5NXBjMGx1YzNSaGJtTmxaRTFsYzJnZ0ppWWdXR1V1YVc1emRHRnVZMmx1WjBOdmJHOXlJRDA5UFNBaE1DQW1KaUJyTG1sdWMzUmhibU5sUTI5c2IzSWdQVDA5SUc1MWJHd2dmSHdnYXk1cGMwbHVjM1JoYm1ObFpFMWxjMmdnSmlZZ1dHVXVhVzV6ZEdGdVkybHVaME52Ykc5eUlEMDlQU0FoTVNBbUppQnJMbWx1YzNSaGJtTmxRMjlzYjNJZ0lUMDlJRzUxYkd3Z2ZId2dXR1V1Wlc1MlRXRndJQ0U5UFNCRVpTQjhmQ0JHTG1adlp5QTlQVDBnSVRBZ0ppWWdXR1V1Wm05bklDRTlQU0I0WlNCOGZDQllaUzV1ZFcxRGJHbHdjR2x1WjFCc1lXNWxjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaFlaUzV1ZFcxRGJHbHdjR2x1WjFCc1lXNWxjeUFoUFQwZ1RXVXViblZ0VUd4aGJtVnpJSHg4SUZobExtNTFiVWx1ZEdWeWMyVmpkR2x2YmlBaFBUMGdUV1V1Ym5WdFNXNTBaWEp6WldOMGFXOXVLU0I4ZkNCWVpTNTJaWEowWlhoQmJIQm9ZWE1nSVQwOUlGZGxJSHg4SUZobExuWmxjblJsZUZSaGJtZGxiblJ6SUNFOVBTQlFaU0I4ZkNCWVpTNXRiM0p3YUZSaGNtZGxkSE1nSVQwOUlGWmxJSHg4SUZobExtMXZjbkJvVG05eWJXRnNjeUFoUFQwZ1lYUWdmSHdnV0dVdWJXOXljR2hEYjJ4dmNuTWdJVDA5SUd4MElIeDhJRmhsTG5SdmJtVk5ZWEJ3YVc1bklDRTlQU0JJZENCOGZDQnBaUzVwYzFkbFlrZE1NaUE5UFQwZ0lUQWdKaVlnV0dVdWJXOXljR2hVWVhKblpYUnpRMjkxYm5RZ0lUMDlJSFYwS1NBbUppQW9aSFFnUFNBaE1Da2dPaUFvWkhRZ1BTQWhNQ3dnV0dVdVgxOTJaWEp6YVc5dUlEMGdSaTUyWlhKemFXOXVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRWh1SUQwZ1dHVXVZM1Z5Y21WdWRGQnliMmR5WVcwN0NpQWdJQ0FnSUNBZ0lDQWdJR1IwSUQwOVBTQWhNQ0FtSmlBb1NHNGdQU0JJY3loR0xDQk9MQ0JyS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcGJDQTlJQ0V4TENCdmN5QTlJQ0V4TENCaVlTQTlJQ0V4TENCRGRDQTlJRWh1TG1kbGRGVnVhV1p2Y20xektDa3NJRWR1SUQwZ1dHVXVkVzVwWm05eWJYTTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEtMblZ6WlZCeWIyZHlZVzBvU0c0dWNISnZaM0poYlNrZ0ppWWdLR2xzSUQwZ0lUQXNJRzl6SUQwZ0lUQXNJR0poSUQwZ0lUQXBMQ0JHTG1sa0lDRTlQU0JKSUNZbUlDaEpJRDBnUmk1cFpDd2diM01nUFNBaE1Da3NJR2xzSUh4OElFMGdJVDA5SUVVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTjBMbk5sZEZaaGJIVmxLRXdzSUNKd2NtOXFaV04wYVc5dVRXRjBjbWw0SWl3Z1JTNXdjbTlxWldOMGFXOXVUV0YwY21sNEtTd2dRM1F1YzJWMFZtRnNkV1VvVEN3Z0luWnBaWGROWVhSeWFYZ2lMQ0JGTG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdRblFnUFNCRGRDNXRZWEF1WTJGdFpYSmhVRzl6YVhScGIyNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkNkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlFSjBMbk5sZEZaaGJIVmxLRXdzSUZsbExuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWhGTG0xaGRISnBlRmR2Y214a0tTa3NJR2xsTG14dloyRnlhWFJvYldsalJHVndkR2hDZFdabVpYSWdKaVlnUTNRdWMyVjBWbUZzZFdVb1RDd2dJbXh2WjBSbGNIUm9RblZtUmtNaUxDQXlJQzhnS0UxaGRHZ3ViRzluS0VVdVptRnlJQ3NnTVNrZ0x5Qk5ZWFJvTGt4T01pa3BMQ0FvUmk1cGMwMWxjMmhRYUc5dVowMWhkR1Z5YVdGc0lIeDhJRVl1YVhOTlpYTm9WRzl2YmsxaGRHVnlhV0ZzSUh4OElFWXVhWE5OWlhOb1RHRnRZbVZ5ZEUxaGRHVnlhV0ZzSUh4OElFWXVhWE5OWlhOb1FtRnphV05OWVhSbGNtbGhiQ0I4ZkNCR0xtbHpUV1Z6YUZOMFlXNWtZWEprVFdGMFpYSnBZV3dnZkh3Z1JpNXBjMU5vWVdSbGNrMWhkR1Z5YVdGc0tTQW1KaUJEZEM1elpYUldZV3gxWlNoTUxDQWlhWE5QY25Sb2IyZHlZWEJvYVdNaUxDQkZMbWx6VDNKMGFHOW5jbUZ3YUdsalEyRnRaWEpoSUQwOVBTQWhNQ2tzSUUwZ0lUMDlJRVVnSmlZZ0tFMGdQU0JGTENCdmN5QTlJQ0V3TENCaVlTQTlJQ0V3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCcFppQW9heTVwYzFOcmFXNXVaV1JOWlhOb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkRkQzV6WlhSUGNIUnBiMjVoYkNoTUxDQnJMQ0FpWW1sdVpFMWhkSEpwZUNJcExDQkRkQzV6WlhSUGNIUnBiMjVoYkNoTUxDQnJMQ0FpWW1sdVpFMWhkSEpwZUVsdWRtVnljMlVpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkNkQ0E5SUdzdWMydGxiR1YwYjI0N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCQ2RDQW1KaUFvYVdVdVpteHZZWFJXWlhKMFpYaFVaWGgwZFhKbGN5QS9JQ2hDZEM1aWIyNWxWR1Y0ZEhWeVpTQTlQVDBnYm5Wc2JDQW1KaUJDZEM1amIyMXdkWFJsUW05dVpWUmxlSFIxY21Vb0tTd2dRM1F1YzJWMFZtRnNkV1VvVEN3Z0ltSnZibVZVWlhoMGRYSmxJaXdnUW5RdVltOXVaVlJsZUhSMWNtVXNJSGxsS1N3Z1EzUXVjMlYwVm1Gc2RXVW9UQ3dnSW1KdmJtVlVaWGgwZFhKbFUybDZaU0lzSUVKMExtSnZibVZVWlhoMGRYSmxVMmw2WlNrcElEb2dZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQlRhMmx1Ym1Wa1RXVnphQ0JqWVc0Z2IyNXNlU0JpWlNCMWMyVmtJSGRwZEdnZ1YyVmlSMHdnTWk0Z1YybDBhQ0JYWldKSFRDQXhJRTlGVTE5MFpYaDBkWEpsWDJac2IyRjBJR0Z1WkNCMlpYSjBaWGdnZEdWNGRIVnlaWE1nYzNWd2NHOXlkQ0JwY3lCeVpYRjFhWEpsWkM0aUtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVWaElEMGdWaTV0YjNKd2FFRjBkSEpwWW5WMFpYTTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ29SV0V1Y0c5emFYUnBiMjRnSVQwOUlIWnZhV1FnTUNCOGZDQkZZUzV1YjNKdFlXd2dJVDA5SUhadmFXUWdNQ0I4ZkNCRllTNWpiMnh2Y2lBaFBUMGdkbTlwWkNBd0lDWW1JR2xsTG1selYyVmlSMHd5SUQwOVBTQWhNQ2tnSmlZZ1RHVXVkWEJrWVhSbEtHc3NJRllzSUVodUtTd2dLRzl6SUh4OElGaGxMbkpsWTJWcGRtVlRhR0ZrYjNjZ0lUMDlJR3N1Y21WalpXbDJaVk5vWVdSdmR5a2dKaVlnS0ZobExuSmxZMlZwZG1WVGFHRmtiM2NnUFNCckxuSmxZMlZwZG1WVGFHRmtiM2NzSUVOMExuTmxkRlpoYkhWbEtFd3NJQ0p5WldObGFYWmxVMmhoWkc5M0lpd2dheTV5WldObGFYWmxVMmhoWkc5M0tTa3NJRVl1YVhOTlpYTm9SMjkxY21GMVpFMWhkR1Z5YVdGc0lDWW1JRVl1Wlc1MlRXRndJQ0U5UFNCdWRXeHNJQ1ltSUNoSGJpNWxiblpOWVhBdWRtRnNkV1VnUFNCRVpTd2dSMjR1Wm14cGNFVnVkazFoY0M1MllXeDFaU0E5SUVSbExtbHpRM1ZpWlZSbGVIUjFjbVVnSmlZZ1JHVXVhWE5TWlc1a1pYSlVZWEpuWlhSVVpYaDBkWEpsSUQwOVBTQWhNU0EvSUMweElEb2dNU2tzSUc5eklDWW1JQ2hEZEM1elpYUldZV3gxWlNoTUxDQWlkRzl1WlUxaGNIQnBibWRGZUhCdmMzVnlaU0lzSUhndWRHOXVaVTFoY0hCcGJtZEZlSEJ2YzNWeVpTa3NJRmhsTG01bFpXUnpUR2xuYUhSeklDWW1JRUprS0VkdUxDQmlZU2tzSUhobElDWW1JRVl1Wm05bklEMDlQU0FoTUNBbUppQmxaUzV5WldaeVpYTm9SbTluVlc1cFptOXliWE1vUjI0c0lIaGxLU3dnWldVdWNtVm1jbVZ6YUUxaGRHVnlhV0ZzVlc1cFptOXliWE1vUjI0c0lFWXNJRWdzSUhFc0lIZGxLU3dnY1drdWRYQnNiMkZrS0V3c0lGaGxMblZ1YVdadmNtMXpUR2x6ZEN3Z1IyNHNJSGxsS1Nrc0lFWXVhWE5UYUdGa1pYSk5ZWFJsY21saGJDQW1KaUJHTG5WdWFXWnZjbTF6VG1WbFpGVndaR0YwWlNBOVBUMGdJVEFnSmlZZ0tIRnBMblZ3Ykc5aFpDaE1MQ0JZWlM1MWJtbG1iM0p0YzB4cGMzUXNJRWR1TENCNVpTa3NJRVl1ZFc1cFptOXliWE5PWldWa1ZYQmtZWFJsSUQwZ0lURXBMQ0JHTG1selUzQnlhWFJsVFdGMFpYSnBZV3dnSmlZZ1EzUXVjMlYwVm1Gc2RXVW9UQ3dnSW1ObGJuUmxjaUlzSUdzdVkyVnVkR1Z5S1N3Z1EzUXVjMlYwVm1Gc2RXVW9UQ3dnSW0xdlpHVnNWbWxsZDAxaGRISnBlQ0lzSUdzdWJXOWtaV3hXYVdWM1RXRjBjbWw0S1N3Z1EzUXVjMlYwVm1Gc2RXVW9UQ3dnSW01dmNtMWhiRTFoZEhKcGVDSXNJR3N1Ym05eWJXRnNUV0YwY21sNEtTd2dRM1F1YzJWMFZtRnNkV1VvVEN3Z0ltMXZaR1ZzVFdGMGNtbDRJaXdnYXk1dFlYUnlhWGhYYjNKc1pDa3NJRVl1YVhOVGFHRmtaWEpOWVhSbGNtbGhiQ0I4ZkNCR0xtbHpVbUYzVTJoaFpHVnlUV0YwWlhKcFlXd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCQ2RDQTlJRVl1ZFc1cFptOXliWE5IY205MWNITTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGUmhJRDBnTUN3Z1ZtUWdQU0JDZEM1c1pXNW5kR2c3SUZSaElEd2dWbVE3SUZSaEt5c3BhV1lnS0dsbExtbHpWMlZpUjB3eUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElITnNJRDBnUW5SYlZHRmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVsbExuVndaR0YwWlNoemJDd2dTRzRwTENCSlpTNWlhVzVrS0hOc0xDQkliaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQlZibWxtYjNKdElFSjFabVpsY2lCUFltcGxZM1J6SUdOaGJpQnZibXg1SUdKbElIVnpaV1FnZDJsMGFDQlhaV0pIVENBeUxpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQklianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnUW1Rb1JTd2dUaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQkZMbUZ0WW1sbGJuUk1hV2RvZEVOdmJHOXlMbTVsWldSelZYQmtZWFJsSUQwZ1Rpd2dSUzVzYVdkb2RGQnliMkpsTG01bFpXUnpWWEJrWVhSbElEMGdUaXdnUlM1a2FYSmxZM1JwYjI1aGJFeHBaMmgwY3k1dVpXVmtjMVZ3WkdGMFpTQTlJRTRzSUVVdVpHbHlaV04wYVc5dVlXeE1hV2RvZEZOb1lXUnZkM011Ym1WbFpITlZjR1JoZEdVZ1BTQk9MQ0JGTG5CdmFXNTBUR2xuYUhSekxtNWxaV1J6VlhCa1lYUmxJRDBnVGl3Z1JTNXdiMmx1ZEV4cFoyaDBVMmhoWkc5M2N5NXVaV1ZrYzFWd1pHRjBaU0E5SUU0c0lFVXVjM0J2ZEV4cFoyaDBjeTV1WldWa2MxVndaR0YwWlNBOUlFNHNJRVV1YzNCdmRFeHBaMmgwVTJoaFpHOTNjeTV1WldWa2MxVndaR0YwWlNBOUlFNHNJRVV1Y21WamRFRnlaV0ZNYVdkb2RITXVibVZsWkhOVmNHUmhkR1VnUFNCT0xDQkZMbWhsYldsemNHaGxjbVZNYVdkb2RITXVibVZsWkhOVmNHUmhkR1VnUFNCT093b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjZaQ2hGS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkZMbWx6VFdWemFFeGhiV0psY25STllYUmxjbWxoYkNCOGZDQkZMbWx6VFdWemFGUnZiMjVOWVhSbGNtbGhiQ0I4ZkNCRkxtbHpUV1Z6YUZCb2IyNW5UV0YwWlhKcFlXd2dmSHdnUlM1cGMwMWxjMmhUZEdGdVpHRnlaRTFoZEdWeWFXRnNJSHg4SUVVdWFYTlRhR0ZrYjNkTllYUmxjbWxoYkNCOGZDQkZMbWx6VTJoaFpHVnlUV0YwWlhKcFlXd2dKaVlnUlM1c2FXZG9kSE1nUFQwOUlDRXdPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxtZGxkRUZqZEdsMlpVTjFZbVZHWVdObElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaU93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVoyVjBRV04wYVhabFRXbHdiV0Z3VEdWMlpXd2dQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIYzdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJTWlc1a1pYSlVZWEpuWlhRZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZJN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1elpYUlNaVzVrWlhKVVlYSm5aWFJVWlhoMGRYSmxjeUE5SUdaMWJtTjBhVzl1S0VVc0lFNHNJRllwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiV1V1WjJWMEtFVXVkR1Y0ZEhWeVpTa3VYMTkzWldKbmJGUmxlSFIxY21VZ1BTQk9MQ0J0WlM1blpYUW9SUzVrWlhCMGFGUmxlSFIxY21VcExsOWZkMlZpWjJ4VVpYaDBkWEpsSUQwZ1Zqc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFWWdQU0J0WlM1blpYUW9SU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lFWXVYMTlvWVhORmVIUmxjbTVoYkZSbGVIUjFjbVZ6SUQwZ0lUQXNJRVl1WDE5b1lYTkZlSFJsY201aGJGUmxlSFIxY21WeklDWW1JQ2hHTGw5ZllYVjBiMEZzYkc5allYUmxSR1Z3ZEdoQ2RXWm1aWElnUFNCV0lEMDlQU0IyYjJsa0lEQXNJRVl1WDE5aGRYUnZRV3hzYjJOaGRHVkVaWEIwYUVKMVptWmxjaUI4ZkNCWUxtaGhjeWdpVjBWQ1IweGZiWFZzZEdsellXMXdiR1ZrWDNKbGJtUmxjbDkwYjE5MFpYaDBkWEpsSWlrZ1BUMDlJQ0V3SUNZbUlDaGpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklGSmxibVJsY2kxMGJ5MTBaWGgwZFhKbElHVjRkR1Z1YzJsdmJpQjNZWE1nWkdsellXSnNaV1FnWW1WallYVnpaU0JoYmlCbGVIUmxjbTVoYkNCMFpYaDBkWEpsSUhkaGN5QndjbTkyYVdSbFpDSXBMQ0JHTGw5ZmRYTmxVbVZ1WkdWeVZHOVVaWGgwZFhKbElEMGdJVEVwS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRGSmxibVJsY2xSaGNtZGxkRVp5WVcxbFluVm1abVZ5SUQwZ1puVnVZM1JwYjI0b1JTd2dUaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVmlBOUlHMWxMbWRsZENoRktUc0tJQ0FnSUNBZ0lDQWdJQ0FnVmk1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJZ1BTQk9MQ0JXTGw5ZmRYTmxSR1ZtWVhWc2RFWnlZVzFsWW5WbVptVnlJRDBnVGlBOVBUMGdkbTlwWkNBd093b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWMyVjBVbVZ1WkdWeVZHRnlaMlYwSUQwZ1puVnVZM1JwYjI0b1JTd2dUaUE5SURBc0lGWWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRklnUFNCRkxDQmlJRDBnVGl3Z2R5QTlJRlk3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JHSUQwZ0lUQXNJR3NnUFNCdWRXeHNMQ0I0WlNBOUlDRXhMQ0JCWlNBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFUmxJRDBnYldVdVoyVjBLRVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUkdVdVgxOTFjMlZFWldaaGRXeDBSbkpoYldWaWRXWm1aWElnSVQwOUlIWnZhV1FnTUNBL0lDaEtMbUpwYm1SR2NtRnRaV0oxWm1abGNpaE1Ma1pTUVUxRlFsVkdSa1ZTTENCdWRXeHNLU3dnUmlBOUlDRXhLU0E2SUVSbExsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNpQTlQVDBnZG05cFpDQXdJRDhnZVdVdWMyVjBkWEJTWlc1a1pYSlVZWEpuWlhRb1JTa2dPaUJFWlM1ZlgyaGhjMFY0ZEdWeWJtRnNWR1Y0ZEhWeVpYTWdKaVlnZVdVdWNtVmlhVzVrVkdWNGRIVnlaWE1vUlN3Z2JXVXVaMlYwS0VVdWRHVjRkSFZ5WlNrdVgxOTNaV0puYkZSbGVIUjFjbVVzSUcxbExtZGxkQ2hGTG1SbGNIUm9WR1Y0ZEhWeVpTa3VYMTkzWldKbmJGUmxlSFIxY21VcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRmRsSUQwZ1JTNTBaWGgwZFhKbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tGZGxMbWx6UkdGMFlUTkVWR1Y0ZEhWeVpTQjhmQ0JYWlM1cGMwUmhkR0ZCY25KaGVWUmxlSFIxY21VZ2ZId2dWMlV1YVhORGIyMXdjbVZ6YzJWa1FYSnlZWGxVWlhoMGRYSmxLU0FtSmlBb1FXVWdQU0FoTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVR1VnUFNCdFpTNW5aWFFvUlNrdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JTNXBjMWRsWWtkTVEzVmlaVkpsYm1SbGNsUmhjbWRsZENBL0lDaEJjbkpoZVM1cGMwRnljbUY1S0ZCbFcwNWRLU0EvSUdzZ1BTQlFaVnRPWFZ0V1hTQTZJR3NnUFNCUVpWdE9YU3dnZUdVZ1BTQWhNQ2tnT2lCcFpTNXBjMWRsWWtkTU1pQW1KaUJGTG5OaGJYQnNaWE1nUGlBd0lDWW1JSGxsTG5WelpVMTFiSFJwYzJGdGNHeGxaRkpVVkNoRktTQTlQVDBnSVRFZ1B5QnJJRDBnYldVdVoyVjBLRVVwTGw5ZmQyVmlaMnhOZFd4MGFYTmhiWEJzWldSR2NtRnRaV0oxWm1abGNpQTZJRUZ5Y21GNUxtbHpRWEp5WVhrb1VHVXBJRDhnYXlBOUlGQmxXMVpkSURvZ2F5QTlJRkJsTENCVUxtTnZjSGtvUlM1MmFXVjNjRzl5ZENrc0lFOHVZMjl3ZVNoRkxuTmphWE56YjNJcExDQlpJRDBnUlM1elkybHpjMjl5VkdWemREc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJRlF1WTI5d2VTaExLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaElLUzVtYkc5dmNpZ3BMQ0JQTG1OdmNIa29SQ2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9TQ2t1Wm14dmIzSW9LU3dnV1NBOUlFYzdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEtMbUpwYm1SR2NtRnRaV0oxWm1abGNpaE1Ma1pTUVUxRlFsVkdSa1ZTTENCcktTQW1KaUJwWlM1a2NtRjNRblZtWm1WeWN5QW1KaUJHSUNZbUlFb3VaSEpoZDBKMVptWmxjbk1vUlN3Z2F5a3NJRW91ZG1sbGQzQnZjblFvVkNrc0lFb3VjMk5wYzNOdmNpaFBLU3dnU2k1elpYUlRZMmx6YzI5eVZHVnpkQ2haS1N3Z2VHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRVpTQTlJRzFsTG1kbGRDaEZMblJsZUhSMWNtVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUQzVtY21GdFpXSjFabVpsY2xSbGVIUjFjbVV5UkNoTUxrWlNRVTFGUWxWR1JrVlNMQ0JNTGtOUFRFOVNYMEZVVkVGRFNFMUZUbFF3TENCTUxsUkZXRlJWVWtWZlExVkNSVjlOUVZCZlVFOVRTVlJKVmtWZldDQXJJRTRzSUVSbExsOWZkMlZpWjJ4VVpYaDBkWEpsTENCV0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoQlpTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVSbElEMGdiV1V1WjJWMEtFVXVkR1Y0ZEhWeVpTa3NJRmRsSUQwZ1RpQjhmQ0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEM1bWNtRnRaV0oxWm1abGNsUmxlSFIxY21WTVlYbGxjaWhNTGtaU1FVMUZRbFZHUmtWU0xDQk1Ma05QVEU5U1gwRlVWRUZEU0UxRlRsUXdMQ0JFWlM1ZlgzZGxZbWRzVkdWNGRIVnlaU3dnVmlCOGZDQXdMQ0JYWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1NTQTlJQzB4T3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11Y21WaFpGSmxibVJsY2xSaGNtZGxkRkJwZUdWc2N5QTlJR1oxYm1OMGFXOXVLRVVzSUU0c0lGWXNJRVlzSUdzc0lIaGxMQ0JCWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lTaEZJQ1ltSUVVdWFYTlhaV0pIVEZKbGJtUmxjbFJoY21kbGRDa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSXVjbVZoWkZKbGJtUmxjbFJoY21kbGRGQnBlR1ZzY3pvZ2NtVnVaR1Z5VkdGeVoyVjBJR2x6SUc1dmRDQlVTRkpGUlM1WFpXSkhURkpsYm1SbGNsUmhjbWRsZEM0aUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdWV1VnUFNCdFpTNW5aWFFvUlNrdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JTNXBjMWRsWWtkTVEzVmlaVkpsYm1SbGNsUmhjbWRsZENBbUppQkJaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaFZaU0E5SUZWbFcwRmxYU2tzSUZWbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQktMbUpwYm1SR2NtRnRaV0oxWm1abGNpaE1Ma1pTUVUxRlFsVkdSa1ZTTENCVlpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JFWlNBOUlFVXVkR1Y0ZEhWeVpTd2dWMlVnUFNCRVpTNW1iM0p0WVhRc0lGQmxJRDBnUkdVdWRIbHdaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9WMlVnSVQwOUlGZDBJQ1ltSUNSbExtTnZiblpsY25Rb1YyVXBJQ0U5UFNCTUxtZGxkRkJoY21GdFpYUmxjaWhNTGtsTlVFeEZUVVZPVkVGVVNVOU9YME5QVEU5U1gxSkZRVVJmUms5U1RVRlVLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlMbkpsWVdSU1pXNWtaWEpVWVhKblpYUlFhWGhsYkhNNklISmxibVJsY2xSaGNtZGxkQ0JwY3lCdWIzUWdhVzRnVWtkQ1FTQnZjaUJwYlhCc1pXMWxiblJoZEdsdmJpQmtaV1pwYm1Wa0lHWnZjbTFoZEM0aUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZtVWdQU0JRWlNBOVBUMGdWSE1nSmlZZ0tGZ3VhR0Z6S0NKRldGUmZZMjlzYjNKZlluVm1abVZ5WDJoaGJHWmZabXh2WVhRaUtTQjhmQ0JwWlM1cGMxZGxZa2RNTWlBbUppQllMbWhoY3lnaVJWaFVYMk52Ykc5eVgySjFabVpsY2w5bWJHOWhkQ0lwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVUdVZ0lUMDlJRTl1SUNZbUlDUmxMbU52Ym5abGNuUW9VR1VwSUNFOVBTQk1MbWRsZEZCaGNtRnRaWFJsY2loTUxrbE5VRXhGVFVWT1ZFRlVTVTlPWDBOUFRFOVNYMUpGUVVSZlZGbFFSU2tnSmlZZ0lTaFFaU0E5UFQwZ2VHNGdKaVlnS0dsbExtbHpWMlZpUjB3eUlIeDhJRmd1YUdGektDSlBSVk5mZEdWNGRIVnlaVjltYkc5aGRDSXBJSHg4SUZndWFHRnpLQ0pYUlVKSFRGOWpiMnh2Y2w5aWRXWm1aWEpmWm14dllYUWlLU2twSUNZbUlDRldaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlMbkpsWVdSU1pXNWtaWEpVWVhKblpYUlFhWGhsYkhNNklISmxibVJsY2xSaGNtZGxkQ0JwY3lCdWIzUWdhVzRnVlc1emFXZHVaV1JDZVhSbFZIbHdaU0J2Y2lCcGJYQnNaVzFsYm5SaGRHbHZiaUJrWldacGJtVmtJSFI1Y0dVdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVGlBK1BTQXdJQ1ltSUU0Z1BEMGdSUzUzYVdSMGFDQXRJRVlnSmlZZ1ZpQStQU0F3SUNZbUlGWWdQRDBnUlM1b1pXbG5hSFFnTFNCcklDWW1JRXd1Y21WaFpGQnBlR1ZzY3loT0xDQldMQ0JHTENCckxDQWtaUzVqYjI1MlpYSjBLRmRsS1N3Z0pHVXVZMjl1ZG1WeWRDaFFaU2tzSUhobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1JHVWdQU0JTSUNFOVBTQnVkV3hzSUQ4Z2JXVXVaMlYwS0ZJcExsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNpQTZJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTaTVpYVc1a1JuSmhiV1ZpZFdabVpYSW9UQzVHVWtGTlJVSlZSa1pGVWl3Z1JHVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1amIzQjVSbkpoYldWaWRXWm1aWEpVYjFSbGVIUjFjbVVnUFNCbWRXNWpkR2x2YmloRkxDQk9MQ0JXSUQwZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSaUE5SUUxaGRHZ3VjRzkzS0RJc0lDMVdLU3dnYXlBOUlFMWhkR2d1Wm14dmIzSW9UaTVwYldGblpTNTNhV1IwYUNBcUlFWXBMQ0I0WlNBOUlFMWhkR2d1Wm14dmIzSW9UaTVwYldGblpTNW9aV2xuYUhRZ0tpQkdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2VXVXVjMlYwVkdWNGRIVnlaVEpFS0U0c0lEQXBMQ0JNTG1OdmNIbFVaWGhUZFdKSmJXRm5aVEpFS0V3dVZFVllWRlZTUlY4eVJDd2dWaXdnTUN3Z01Dd2dSUzU0TENCRkxua3NJR3NzSUhobEtTd2dTaTUxYm1KcGJtUlVaWGgwZFhKbEtDazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NWpiM0I1VkdWNGRIVnlaVlJ2VkdWNGRIVnlaU0E5SUdaMWJtTjBhVzl1S0VVc0lFNHNJRllzSUVZZ1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JySUQwZ1RpNXBiV0ZuWlM1M2FXUjBhQ3dnZUdVZ1BTQk9MbWx0WVdkbExtaGxhV2RvZEN3Z1FXVWdQU0FrWlM1amIyNTJaWEowS0ZZdVptOXliV0YwS1N3Z1ZXVWdQU0FrWlM1amIyNTJaWEowS0ZZdWRIbHdaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIbGxMbk5sZEZSbGVIUjFjbVV5UkNoV0xDQXdLU3dnVEM1d2FYaGxiRk4wYjNKbGFTaE1MbFZPVUVGRFMxOUdURWxRWDFsZlYwVkNSMHdzSUZZdVpteHBjRmtwTENCTUxuQnBlR1ZzVTNSdmNtVnBLRXd1VlU1UVFVTkxYMUJTUlUxVlRGUkpVRXhaWDBGTVVFaEJYMWRGUWtkTUxDQldMbkJ5WlcxMWJIUnBjR3g1UVd4d2FHRXBMQ0JNTG5CcGVHVnNVM1J2Y21WcEtFd3VWVTVRUVVOTFgwRk1TVWRPVFVWT1ZDd2dWaTUxYm5CaFkydEJiR2xuYm0xbGJuUXBMQ0JPTG1selJHRjBZVlJsZUhSMWNtVWdQeUJNTG5SbGVGTjFZa2x0WVdkbE1rUW9UQzVVUlZoVVZWSkZYekpFTENCR0xDQkZMbmdzSUVVdWVTd2dheXdnZUdVc0lFRmxMQ0JWWlN3Z1RpNXBiV0ZuWlM1a1lYUmhLU0E2SUU0dWFYTkRiMjF3Y21WemMyVmtWR1Y0ZEhWeVpTQS9JRXd1WTI5dGNISmxjM05sWkZSbGVGTjFZa2x0WVdkbE1rUW9UQzVVUlZoVVZWSkZYekpFTENCR0xDQkZMbmdzSUVVdWVTd2dUaTV0YVhCdFlYQnpXekJkTG5kcFpIUm9MQ0JPTG0xcGNHMWhjSE5iTUYwdWFHVnBaMmgwTENCQlpTd2dUaTV0YVhCdFlYQnpXekJkTG1SaGRHRXBJRG9nVEM1MFpYaFRkV0pKYldGblpUSkVLRXd1VkVWWVZGVlNSVjh5UkN3Z1Jpd2dSUzU0TENCRkxua3NJRUZsTENCVlpTd2dUaTVwYldGblpTa3NJRVlnUFQwOUlEQWdKaVlnVmk1blpXNWxjbUYwWlUxcGNHMWhjSE1nSmlZZ1RDNW5aVzVsY21GMFpVMXBjRzFoY0NoTUxsUkZXRlJWVWtWZk1rUXBMQ0JLTG5WdVltbHVaRlJsZUhSMWNtVW9LVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbU52Y0hsVVpYaDBkWEpsVkc5VVpYaDBkWEpsTTBRZ1BTQm1kVzVqZEdsdmJpaEZMQ0JPTENCV0xDQkdMQ0JySUQwZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9lQzVwYzFkbFlrZE1NVkpsYm1SbGNtVnlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSXVZMjl3ZVZSbGVIUjFjbVZVYjFSbGVIUjFjbVV6UkRvZ1kyRnVJRzl1YkhrZ1ltVWdkWE5sWkNCM2FYUm9JRmRsWWtkTU1pNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUdVZ1BTQkZMbTFoZUM1NElDMGdSUzV0YVc0dWVDQXJJREVzSUVGbElEMGdSUzV0WVhndWVTQXRJRVV1YldsdUxua2dLeUF4TENCVlpTQTlJRVV1YldGNExub2dMU0JGTG0xcGJpNTZJQ3NnTVN3Z1JHVWdQU0FrWlM1amIyNTJaWEowS0VZdVptOXliV0YwS1N3Z1YyVWdQU0FrWlM1amIyNTJaWEowS0VZdWRIbHdaU2tzSUZCbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JpNXBjMFJoZEdFelJGUmxlSFIxY21VcElIbGxMbk5sZEZSbGVIUjFjbVV6UkNoR0xDQXdLU3dnVUdVZ1BTQk1MbFJGV0ZSVlVrVmZNMFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tFWXVhWE5FWVhSaFFYSnlZWGxVWlhoMGRYSmxLU0I1WlM1elpYUlVaWGgwZFhKbE1rUkJjbkpoZVNoR0xDQXdLU3dnVUdVZ1BTQk1MbFJGV0ZSVlVrVmZNa1JmUVZKU1FWazdDaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeUxtTnZjSGxVWlhoMGRYSmxWRzlVWlhoMGRYSmxNMFE2SUc5dWJIa2djM1Z3Y0c5eWRITWdWRWhTUlVVdVJHRjBZVlJsZUhSMWNtVXpSQ0JoYm1RZ1ZFaFNSVVV1UkdGMFlWUmxlSFIxY21VeVJFRnljbUY1TGlJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUV3dWNHbDRaV3hUZEc5eVpXa29UQzVWVGxCQlEwdGZSa3hKVUY5WlgxZEZRa2RNTENCR0xtWnNhWEJaS1N3Z1RDNXdhWGhsYkZOMGIzSmxhU2hNTGxWT1VFRkRTMTlRVWtWTlZVeFVTVkJNV1Y5QlRGQklRVjlYUlVKSFRDd2dSaTV3Y21WdGRXeDBhWEJzZVVGc2NHaGhLU3dnVEM1d2FYaGxiRk4wYjNKbGFTaE1MbFZPVUVGRFMxOUJURWxIVGsxRlRsUXNJRVl1ZFc1d1lXTnJRV3hwWjI1dFpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRlpsSUQwZ1RDNW5aWFJRWVhKaGJXVjBaWElvVEM1VlRsQkJRMHRmVWs5WFgweEZUa2RVU0Nrc0lHRjBJRDBnVEM1blpYUlFZWEpoYldWMFpYSW9UQzVWVGxCQlEwdGZTVTFCUjBWZlNFVkpSMGhVS1N3Z2JIUWdQU0JNTG1kbGRGQmhjbUZ0WlhSbGNpaE1MbFZPVUVGRFMxOVRTMGxRWDFCSldFVk1VeWtzSUVoMElEMGdUQzVuWlhSUVlYSmhiV1YwWlhJb1RDNVZUbEJCUTB0ZlUwdEpVRjlTVDFkVEtTd2dZVzRnUFNCTUxtZGxkRkJoY21GdFpYUmxjaWhNTGxWT1VFRkRTMTlUUzBsUVgwbE5RVWRGVXlrc0lIVjBJRDBnVmk1cGMwTnZiWEJ5WlhOelpXUlVaWGgwZFhKbElEOGdWaTV0YVhCdFlYQnpXekJkSURvZ1ZpNXBiV0ZuWlRzS0lDQWdJQ0FnSUNBZ0lDQWdUQzV3YVhobGJGTjBiM0psYVNoTUxsVk9VRUZEUzE5U1QxZGZURVZPUjFSSUxDQjFkQzUzYVdSMGFDa3NJRXd1Y0dsNFpXeFRkRzl5Wldrb1RDNVZUbEJCUTB0ZlNVMUJSMFZmU0VWSlIwaFVMQ0IxZEM1b1pXbG5hSFFwTENCTUxuQnBlR1ZzVTNSdmNtVnBLRXd1VlU1UVFVTkxYMU5MU1ZCZlVFbFlSVXhUTENCRkxtMXBiaTU0S1N3Z1RDNXdhWGhsYkZOMGIzSmxhU2hNTGxWT1VFRkRTMTlUUzBsUVgxSlBWMU1zSUVVdWJXbHVMbmtwTENCTUxuQnBlR1ZzVTNSdmNtVnBLRXd1VlU1UVFVTkxYMU5MU1ZCZlNVMUJSMFZUTENCRkxtMXBiaTU2S1N3Z1ZpNXBjMFJoZEdGVVpYaDBkWEpsSUh4OElGWXVhWE5FWVhSaE0wUlVaWGgwZFhKbElEOGdUQzUwWlhoVGRXSkpiV0ZuWlRORUtGQmxMQ0JyTENCT0xuZ3NJRTR1ZVN3Z1RpNTZMQ0I0WlN3Z1FXVXNJRlZsTENCRVpTd2dWMlVzSUhWMExtUmhkR0VwSURvZ1ZpNXBjME52YlhCeVpYTnpaV1JCY25KaGVWUmxlSFIxY21VZ1B5QW9ZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeUxtTnZjSGxVWlhoMGRYSmxWRzlVWlhoMGRYSmxNMFE2SUhWdWRHVnpkR1ZrSUhOMWNIQnZjblFnWm05eUlHTnZiWEJ5WlhOelpXUWdjM0pqVkdWNGRIVnlaUzRpS1N3Z1RDNWpiMjF3Y21WemMyVmtWR1Y0VTNWaVNXMWhaMlV6UkNoUVpTd2dheXdnVGk1NExDQk9MbmtzSUU0dWVpd2dlR1VzSUVGbExDQlZaU3dnUkdVc0lIVjBMbVJoZEdFcEtTQTZJRXd1ZEdWNFUzVmlTVzFoWjJVelJDaFFaU3dnYXl3Z1RpNTRMQ0JPTG5rc0lFNHVlaXdnZUdVc0lFRmxMQ0JWWlN3Z1JHVXNJRmRsTENCMWRDa3NJRXd1Y0dsNFpXeFRkRzl5Wldrb1RDNVZUbEJCUTB0ZlVrOVhYMHhGVGtkVVNDd2dWbVVwTENCTUxuQnBlR1ZzVTNSdmNtVnBLRXd1VlU1UVFVTkxYMGxOUVVkRlgwaEZTVWRJVkN3Z1lYUXBMQ0JNTG5CcGVHVnNVM1J2Y21WcEtFd3VWVTVRUVVOTFgxTkxTVkJmVUVsWVJVeFRMQ0JzZENrc0lFd3VjR2w0Wld4VGRHOXlaV2tvVEM1VlRsQkJRMHRmVTB0SlVGOVNUMWRUTENCSWRDa3NJRXd1Y0dsNFpXeFRkRzl5Wldrb1RDNVZUbEJCUTB0ZlUwdEpVRjlKVFVGSFJWTXNJR0Z1S1N3Z2F5QTlQVDBnTUNBbUppQkdMbWRsYm1WeVlYUmxUV2x3YldGd2N5QW1KaUJNTG1kbGJtVnlZWFJsVFdsd2JXRndLRkJsS1N3Z1NpNTFibUpwYm1SVVpYaDBkWEpsS0NrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1cGJtbDBWR1Y0ZEhWeVpTQTlJR1oxYm1OMGFXOXVLRVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdSUzVwYzBOMVltVlVaWGgwZFhKbElEOGdlV1V1YzJWMFZHVjRkSFZ5WlVOMVltVW9SU3dnTUNrZ09pQkZMbWx6UkdGMFlUTkVWR1Y0ZEhWeVpTQS9JSGxsTG5ObGRGUmxlSFIxY21VelJDaEZMQ0F3S1NBNklFVXVhWE5FWVhSaFFYSnlZWGxVWlhoMGRYSmxJSHg4SUVVdWFYTkRiMjF3Y21WemMyVmtRWEp5WVhsVVpYaDBkWEpsSUQ4Z2VXVXVjMlYwVkdWNGRIVnlaVEpFUVhKeVlYa29SU3dnTUNrZ09pQjVaUzV6WlhSVVpYaDBkWEpsTWtRb1JTd2dNQ2tzSUVvdWRXNWlhVzVrVkdWNGRIVnlaU2dwT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11Y21WelpYUlRkR0YwWlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCaUlEMGdNQ3dnZHlBOUlEQXNJRklnUFNCdWRXeHNMQ0JLTG5KbGMyVjBLQ2tzSUU5bExuSmxjMlYwS0NrN0NpQWdJQ0FnSUNBZ2ZTd2dkSGx3Wlc5bUlGOWZWRWhTUlVWZlJFVldWRTlQVEZOZlh5QThJQ0oxSWlBbUppQmZYMVJJVWtWRlgwUkZWbFJQVDB4VFgxOHVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSW05aWMyVnlkbVVpTENCN0NpQWdJQ0FnSUNBZ0lDQWdJR1JsZEdGcGJEb2dkR2hwY3dvZ0lDQWdJQ0FnSUgwcEtUc0tJQ0FnSUgwS0lDQWdJR2RsZENCamIyOXlaR2x1WVhSbFUzbHpkR1Z0S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMmJqc0tJQ0FnSUgwS0lDQWdJR2RsZENCdmRYUndkWFJEYjJ4dmNsTndZV05sS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl2ZFhSd2RYUkRiMnh2Y2xOd1lXTmxPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHOTFkSEIxZEVOdmJHOXlVM0JoWTJVb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgyOTFkSEIxZEVOdmJHOXlVM0JoWTJVZ1BTQmxPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1blpYUkRiMjUwWlhoMEtDazdDaUFnSUNBZ0lDQWdkQzVrY21GM2FXNW5RblZtWm1WeVEyOXNiM0pUY0dGalpTQTlJR1VnUFQwOUlIRmpJRDhnSW1ScGMzQnNZWGt0Y0RNaUlEb2dJbk55WjJJaUxDQjBMblZ1Y0dGamEwTnZiRzl5VTNCaFkyVWdQU0JSWlM1M2IzSnJhVzVuUTI5c2IzSlRjR0ZqWlNBOVBUMGdkbUVnUHlBaVpHbHpjR3hoZVMxd015SWdPaUFpYzNKbllpSTdDaUFnSUNCOUNpQWdJQ0JuWlhRZ2NHaDVjMmxqWVd4c2VVTnZjbkpsWTNSTWFXZG9kSE1vS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nVkdobElIQnliM0JsY25SNUlDNXdhSGx6YVdOaGJHeDVRMjl5Y21WamRFeHBaMmgwY3lCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVFpYUWdjbVZ1WkdWeVpYSXVkWE5sVEdWbllXTjVUR2xuYUhSeklHbHVjM1JsWVdRdUlpa3NJQ0YwYUdsekxuVnpaVXhsWjJGamVVeHBaMmgwY3pzS0lDQWdJSDBLSUNBZ0lITmxkQ0J3YUhsemFXTmhiR3g1UTI5eWNtVmpkRXhwWjJoMGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJVYUdVZ2NISnZjR1Z5ZEhrZ0xuQm9lWE5wWTJGc2JIbERiM0p5WldOMFRHbG5hSFJ6SUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SUZObGRDQnlaVzVrWlhKbGNpNTFjMlZNWldkaFkzbE1hV2RvZEhNZ2FXNXpkR1ZoWkM0aUtTd2dkR2hwY3k1MWMyVk1aV2RoWTNsTWFXZG9kSE1nUFNBaFpUc0tJQ0FnSUgwS0lDQWdJR2RsZENCdmRYUndkWFJGYm1OdlpHbHVaeWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJRY205d1pYSjBlU0F1YjNWMGNIVjBSVzVqYjJScGJtY2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWWE5sSUM1dmRYUndkWFJEYjJ4dmNsTndZV05sSUdsdWMzUmxZV1F1SWlrc0lIUm9hWE11YjNWMGNIVjBRMjlzYjNKVGNHRmpaU0E5UFQwZ2RuUWdQeUJ5YVNBNklIWmtPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHOTFkSEIxZEVWdVkyOWthVzVuS0dVcElIc0tJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklGQnliM0JsY25SNUlDNXZkWFJ3ZFhSRmJtTnZaR2x1WnlCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdMbTkxZEhCMWRFTnZiRzl5VTNCaFkyVWdhVzV6ZEdWaFpDNGlLU3dnZEdocGN5NXZkWFJ3ZFhSRGIyeHZjbE53WVdObElEMGdaU0E5UFQwZ2Nta2dQeUIyZENBNklFMXVPd29nSUNBZ2ZRb2dJQ0FnWjJWMElIVnpaVXhsWjJGamVVeHBaMmgwY3lncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCVWFHVWdjSEp2Y0dWeWRIa2dMblZ6WlV4bFoyRmplVXhwWjJoMGN5Qm9ZWE1nWW1WbGJpQmtaWEJ5WldOaGRHVmtMaUJOYVdkeVlYUmxJSGx2ZFhJZ2JHbG5hSFJwYm1jZ1lXTmpiM0prYVc1bklIUnZJSFJvWlNCbWIyeHNiM2RwYm1jZ1ozVnBaR1U2SUdoMGRIQnpPaTh2WkdselkyOTFjbk5sTG5Sb2NtVmxhbk11YjNKbkwzUXZkWEJrWVhSbGN5MTBieTFzYVdkb2RHbHVaeTFwYmkxMGFISmxaUzFxY3kxeU1UVTFMelV6TnpNekxpSXBMQ0IwYUdsekxsOTFjMlZNWldkaFkzbE1hV2RvZEhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnZFhObFRHVm5ZV041VEdsbmFIUnpLR1VwSUhzS0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZSb1pTQndjbTl3WlhKMGVTQXVkWE5sVEdWbllXTjVUR2xuYUhSeklHaGhjeUJpWldWdUlHUmxjSEpsWTJGMFpXUXVJRTFwWjNKaGRHVWdlVzkxY2lCc2FXZG9kR2x1WnlCaFkyTnZjbVJwYm1jZ2RHOGdkR2hsSUdadmJHeHZkMmx1WnlCbmRXbGtaVG9nYUhSMGNITTZMeTlrYVhOamIzVnljMlV1ZEdoeVpXVnFjeTV2Y21jdmRDOTFjR1JoZEdWekxYUnZMV3hwWjJoMGFXNW5MV2x1TFhSb2NtVmxMV3B6TFhJeE5UVXZOVE0zTXpNdUlpa3NJSFJvYVhNdVgzVnpaVXhsWjJGamVVeHBaMmgwY3lBOUlHVTdDaUFnSUNCOUNuMHNJRU52SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJTYnlCN0NuMDdDa052TG5CeWIzUnZkSGx3WlM1cGMxZGxZa2RNTVZKbGJtUmxjbVZ5SUQwZ0lUQTdDblpoY2lCUWJ5QTlJR05zWVhOeklITXhJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRZ1BTQXlOV1V0TlNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwYzBadlowVjRjRElnUFNBaE1Dd2dkR2hwY3k1dVlXMWxJRDBnSWlJc0lIUm9hWE11WTI5c2IzSWdQU0J1WlhjZ2NHVW9aU2tzSUhSb2FYTXVaR1Z1YzJsMGVTQTlJSFE3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lITXhLSFJvYVhNdVkyOXNiM0lzSUhSb2FYTXVaR1Z1YzJsMGVTazdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSWtadlowVjRjRElpTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lCMGFHbHpMbTVoYldVc0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQjBhR2x6TG1OdmJHOXlMbWRsZEVobGVDZ3BMQW9nSUNBZ0lDQWdJQ0FnSUNCa1pXNXphWFI1T2lCMGFHbHpMbVJsYm5OcGRIa0tJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRcDlMQ0JNYnlBOUlHTnNZWE56SUhNeElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFnUFNBeExDQnVJRDBnTVdVektYc0tJQ0FnSUNBZ0lDQjBhR2x6TG1selJtOW5JRDBnSVRBc0lIUm9hWE11Ym1GdFpTQTlJQ0lpTENCMGFHbHpMbU52Ykc5eUlEMGdibVYzSUhCbEtHVXBMQ0IwYUdsekxtNWxZWElnUFNCMExDQjBhR2x6TG1aaGNpQTlJRzQ3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lITXhLSFJvYVhNdVkyOXNiM0lzSUhSb2FYTXVibVZoY2l3Z2RHaHBjeTVtWVhJcE93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0pHYjJjaUxBb2dJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQjBhR2x6TG01aGJXVXNDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUIwYUdsekxtTnZiRzl5TG1kbGRFaGxlQ2dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaV0Z5T2lCMGFHbHpMbTVsWVhJc0NpQWdJQ0FnSUNBZ0lDQWdJR1poY2pvZ2RHaHBjeTVtWVhJS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFwOUxDQkpieUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdTbVVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VTJObGJtVWdQU0FoTUN3Z2RHaHBjeTUwZVhCbElEMGdJbE5qWlc1bElpd2dkR2hwY3k1aVlXTnJaM0p2ZFc1a0lEMGdiblZzYkN3Z2RHaHBjeTVsYm5acGNtOXViV1Z1ZENBOUlHNTFiR3dzSUhSb2FYTXVabTluSUQwZ2JuVnNiQ3dnZEdocGN5NWlZV05yWjNKdmRXNWtRbXgxY25KcGJtVnpjeUE5SURBc0lIUm9hWE11WW1GamEyZHliM1Z1WkVsdWRHVnVjMmwwZVNBOUlERXNJSFJvYVhNdWIzWmxjbkpwWkdWTllYUmxjbWxoYkNBOUlHNTFiR3dzSUhSNWNHVnZaaUJmWDFSSVVrVkZYMFJGVmxSUFQweFRYMThnUENBaWRTSWdKaVlnWDE5VVNGSkZSVjlFUlZaVVQwOU1VMTlmTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDSnZZbk5sY25abElpd2dld29nSUNBZ0lDQWdJQ0FnSUNCa1pYUmhhV3c2SUhSb2FYTUtJQ0FnSUNBZ0lDQjlLU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxMQ0IwS1N3Z1pTNWlZV05yWjNKdmRXNWtJQ0U5UFNCdWRXeHNJQ1ltSUNoMGFHbHpMbUpoWTJ0bmNtOTFibVFnUFNCbExtSmhZMnRuY205MWJtUXVZMnh2Ym1Vb0tTa3NJR1V1Wlc1MmFYSnZibTFsYm5RZ0lUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVpXNTJhWEp2Ym0xbGJuUWdQU0JsTG1WdWRtbHliMjV0Wlc1MExtTnNiMjVsS0NrcExDQmxMbVp2WnlBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1bWIyY2dQU0JsTG1adlp5NWpiRzl1WlNncEtTd2dkR2hwY3k1aVlXTnJaM0p2ZFc1a1FteDFjbkpwYm1WemN5QTlJR1V1WW1GamEyZHliM1Z1WkVKc2RYSnlhVzVsYzNNc0lIUm9hWE11WW1GamEyZHliM1Z1WkVsdWRHVnVjMmwwZVNBOUlHVXVZbUZqYTJkeWIzVnVaRWx1ZEdWdWMybDBlU3dnWlM1dmRtVnljbWxrWlUxaGRHVnlhV0ZzSUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG05MlpYSnlhV1JsVFdGMFpYSnBZV3dnUFNCbExtOTJaWEp5YVdSbFRXRjBaWEpwWVd3dVkyeHZibVVvS1Nrc0lIUm9hWE11YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUdVdWJXRjBjbWw0UVhWMGIxVndaR0YwWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCemRYQmxjaTUwYjBwVFQwNG9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVptOW5JQ0U5UFNCdWRXeHNJQ1ltSUNoMExtOWlhbVZqZEM1bWIyY2dQU0IwYUdsekxtWnZaeTUwYjBwVFQwNG9LU2tzSUhSb2FYTXVZbUZqYTJkeWIzVnVaRUpzZFhKeWFXNWxjM01nUGlBd0lDWW1JQ2gwTG05aWFtVmpkQzVpWVdOclozSnZkVzVrUW14MWNuSnBibVZ6Y3lBOUlIUm9hWE11WW1GamEyZHliM1Z1WkVKc2RYSnlhVzVsYzNNcExDQjBhR2x6TG1KaFkydG5jbTkxYm1SSmJuUmxibk5wZEhrZ0lUMDlJREVnSmlZZ0tIUXViMkpxWldOMExtSmhZMnRuY205MWJtUkpiblJsYm5OcGRIa2dQU0IwYUdsekxtSmhZMnRuY205MWJtUkpiblJsYm5OcGRIa3BMQ0IwT3dvZ0lDQWdmUXA5TENCSmN5QTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVhWE5KYm5SbGNteGxZWFpsWkVKMVptWmxjaUE5SUNFd0xDQjBhR2x6TG1GeWNtRjVJRDBnWlN3Z2RHaHBjeTV6ZEhKcFpHVWdQU0IwTENCMGFHbHpMbU52ZFc1MElEMGdaU0FoUFQwZ2RtOXBaQ0F3SUQ4Z1pTNXNaVzVuZEdnZ0x5QjBJRG9nTUN3Z2RHaHBjeTUxYzJGblpTQTlJRWh5TENCMGFHbHpMblZ3WkdGMFpWSmhibWRsSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J2Wm1aelpYUTZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnZkVzUwT2lBdE1Rb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWRtVnljMmx2YmlBOUlEQXNJSFJvYVhNdWRYVnBaQ0E5SUd0MEtDazdDaUFnSUNCOUNpQWdJQ0J2YmxWd2JHOWhaRU5oYkd4aVlXTnJLQ2tnZTMwS0lDQWdJSE5sZENCdVpXVmtjMVZ3WkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnWlNBOVBUMGdJVEFnSmlZZ2RHaHBjeTUyWlhKemFXOXVLeXM3Q2lBZ0lDQjlDaUFnSUNCelpYUlZjMkZuWlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZFhOaFoyVWdQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYSnlZWGtnUFNCdVpYY2daUzVoY25KaGVTNWpiMjV6ZEhKMVkzUnZjaWhsTG1GeWNtRjVLU3dnZEdocGN5NWpiM1Z1ZENBOUlHVXVZMjkxYm5Rc0lIUm9hWE11YzNSeWFXUmxJRDBnWlM1emRISnBaR1VzSUhSb2FYTXVkWE5oWjJVZ1BTQmxMblZ6WVdkbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlVUYwS0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCbElDbzlJSFJvYVhNdWMzUnlhV1JsTENCdUlDbzlJSFF1YzNSeWFXUmxPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0IwYUdsekxuTjBjbWxrWlRzZ2FTQThJSEk3SUdrckt5bDBhR2x6TG1GeWNtRjVXMlVnS3lCcFhTQTlJSFF1WVhKeVlYbGJiaUFySUdsZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhKeVlYa3VjMlYwS0dVc0lIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb1pTa2dld29nSUNBZ0lDQWdJR1V1WVhKeVlYbENkV1ptWlhKeklEMDlQU0IyYjJsa0lEQWdKaVlnS0dVdVlYSnlZWGxDZFdabVpYSnpJRDBnZTMwcExDQjBhR2x6TG1GeWNtRjVMbUoxWm1abGNpNWZkWFZwWkNBOVBUMGdkbTlwWkNBd0lDWW1JQ2gwYUdsekxtRnljbUY1TG1KMVptWmxjaTVmZFhWcFpDQTlJR3QwS0NrcExDQmxMbUZ5Y21GNVFuVm1abVZ5YzF0MGFHbHpMbUZ5Y21GNUxtSjFabVpsY2k1ZmRYVnBaRjBnUFQwOUlIWnZhV1FnTUNBbUppQW9aUzVoY25KaGVVSjFabVpsY25OYmRHaHBjeTVoY25KaGVTNWlkV1ptWlhJdVgzVjFhV1JkSUQwZ2RHaHBjeTVoY25KaGVTNXpiR2xqWlNnd0tTNWlkV1ptWlhJcE93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2JtVjNJSFJvYVhNdVlYSnlZWGt1WTI5dWMzUnlkV04wYjNJb1pTNWhjbkpoZVVKMVptWmxjbk5iZEdocGN5NWhjbkpoZVM1aWRXWm1aWEl1WDNWMWFXUmRLU3dnYmlBOUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLSFFzSUhSb2FYTXVjM1J5YVdSbEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpNXpaWFJWYzJGblpTaDBhR2x6TG5WellXZGxLU3dnYmpzS0lDQWdJSDBLSUNBZ0lHOXVWWEJzYjJGa0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmJsVndiRzloWkVOaGJHeGlZV05ySUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVZWEp5WVhsQ2RXWm1aWEp6SUQwOVBTQjJiMmxrSURBZ0ppWWdLR1V1WVhKeVlYbENkV1ptWlhKeklEMGdlMzBwTENCMGFHbHpMbUZ5Y21GNUxtSjFabVpsY2k1ZmRYVnBaQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaDBhR2x6TG1GeWNtRjVMbUoxWm1abGNpNWZkWFZwWkNBOUlHdDBLQ2twTENCbExtRnljbUY1UW5WbVptVnljMXQwYUdsekxtRnljbUY1TG1KMVptWmxjaTVmZFhWcFpGMGdQVDA5SUhadmFXUWdNQ0FtSmlBb1pTNWhjbkpoZVVKMVptWmxjbk5iZEdocGN5NWhjbkpoZVM1aWRXWm1aWEl1WDNWMWFXUmRJRDBnUVhKeVlYa3Vabkp2YlNodVpYY2dWV2x1ZERNeVFYSnlZWGtvZEdocGN5NWhjbkpoZVM1aWRXWm1aWElwS1Nrc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnZFhWcFpEb2dkR2hwY3k1MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCaWRXWm1aWEk2SUhSb2FYTXVZWEp5WVhrdVluVm1abVZ5TGw5MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUIwYUdsekxtRnljbUY1TG1OdmJuTjBjblZqZEc5eUxtNWhiV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lITjBjbWxrWlRvZ2RHaHBjeTV6ZEhKcFpHVUtJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRcDlMQ0JRZENBOUlHNWxkeUJCTENCUmFTQTlJR05zWVhOeklITXhJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHNJR2tnUFNBaE1TbDdDaUFnSUNBZ0lDQWdkR2hwY3k1cGMwbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbElEMGdJVEFzSUhSb2FYTXVibUZ0WlNBOUlDSWlMQ0IwYUdsekxtUmhkR0VnUFNCbExDQjBhR2x6TG1sMFpXMVRhWHBsSUQwZ2RDd2dkR2hwY3k1dlptWnpaWFFnUFNCdUxDQjBhR2x6TG01dmNtMWhiR2w2WldRZ1BTQnBPd29nSUNBZ2ZRb2dJQ0FnWjJWMElHTnZkVzUwS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJoZEdFdVkyOTFiblE3Q2lBZ0lDQjlDaUFnSUNCblpYUWdZWEp5WVhrb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdGMFlTNWhjbkpoZVRzS0lDQWdJSDBLSUNBZ0lITmxkQ0J1WldWa2MxVndaR0YwWlNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhMbTVsWldSelZYQmtZWFJsSUQwZ1pUc0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TkNobEtTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJSFJvYVhNdVpHRjBZUzVqYjNWdWREc2dkQ0E4SUc0N0lIUXJLeWxRZEM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUm9hWE1zSUhRcExDQlFkQzVoY0hCc2VVMWhkSEpwZURRb1pTa3NJSFJvYVhNdWMyVjBXRmxhS0hRc0lGQjBMbmdzSUZCMExua3NJRkIwTG5vcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE9iM0p0WVd4TllYUnlhWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQjBhR2x6TG1OdmRXNTBPeUIwSUR3Z2Jqc2dkQ3NyS1ZCMExtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kR2hwY3l3Z2RDa3NJRkIwTG1Gd2NHeDVUbTl5YldGc1RXRjBjbWw0S0dVcExDQjBhR2x6TG5ObGRGaFpXaWgwTENCUWRDNTRMQ0JRZEM1NUxDQlFkQzU2S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ5WVc1elptOXliVVJwY21WamRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlIUm9hWE11WTI5MWJuUTdJSFFnUENCdU95QjBLeXNwVUhRdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaDBhR2x6TENCMEtTd2dVSFF1ZEhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0dVcExDQjBhR2x6TG5ObGRGaFpXaWgwTENCUWRDNTRMQ0JRZEM1NUxDQlFkQzU2S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZnb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ29nZEdocGN5NWtZWFJoTG5OMGNtbGtaU0FySUhSb2FYTXViMlptYzJWMFhTQTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWktHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdRbVVvZEN3Z2RHaHBjeTVoY25KaGVTa3BMQ0IwYUdsekxtUmhkR0V1WVhKeVlYbGJaU0FxSUhSb2FYTXVaR0YwWVM1emRISnBaR1VnS3lCMGFHbHpMbTltWm5ObGRDQXJJREZkSUQwZ2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRm9vWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCQ1pTaDBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WkdGMFlTNWhjbkpoZVZ0bElDb2dkR2hwY3k1a1lYUmhMbk4wY21sa1pTQXJJSFJvYVhNdWIyWm1jMlYwSUNzZ01sMGdQU0IwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZ5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTl5YldGc2FYcGxaQ0FtSmlBb2RDQTlJRUpsS0hRc0lIUm9hWE11WVhKeVlYa3BLU3dnZEdocGN5NWtZWFJoTG1GeWNtRjVXMlVnS2lCMGFHbHpMbVJoZEdFdWMzUnlhV1JsSUNzZ2RHaHBjeTV2Wm1aelpYUWdLeUF6WFNBOUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJZS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WkdGMFlTNWhjbkpoZVZ0bElDb2dkR2hwY3k1a1lYUmhMbk4wY21sa1pTQXJJSFJvYVhNdWIyWm1jMlYwWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdUM1FvZEN3Z2RHaHBjeTVoY25KaGVTa3BMQ0IwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBXU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbVJoZEdFdVlYSnlZWGxiWlNBcUlIUm9hWE11WkdGMFlTNXpkSEpwWkdVZ0t5QjBhR2x6TG05bVpuTmxkQ0FySURGZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JQZENoMExDQjBhR2x6TG1GeWNtRjVLU2tzSUhRN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJhS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WkdGMFlTNWhjbkpoZVZ0bElDb2dkR2hwY3k1a1lYUmhMbk4wY21sa1pTQXJJSFJvYVhNdWIyWm1jMlYwSUNzZ01sMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUU5MEtIUXNJSFJvYVhNdVlYSnlZWGtwS1N3Z2REc0tJQ0FnSUgwS0lDQWdJR2RsZEZjb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1a1lYUmhMbUZ5Y21GNVcyVWdLaUIwYUdsekxtUmhkR0V1YzNSeWFXUmxJQ3NnZEdocGN5NXZabVp6WlhRZ0t5QXpYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3hwZW1Wa0lDWW1JQ2gwSUQwZ1QzUW9kQ3dnZEdocGN5NWhjbkpoZVNrcExDQjBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdGa29aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxJRDBnWlNBcUlIUm9hWE11WkdGMFlTNXpkSEpwWkdVZ0t5QjBhR2x6TG05bVpuTmxkQ3dnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdRbVVvZEN3Z2RHaHBjeTVoY25KaGVTa3NJRzRnUFNCQ1pTaHVMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WkdGMFlTNWhjbkpoZVZ0bElDc2dNRjBnUFNCMExDQjBhR2x6TG1SaGRHRXVZWEp5WVhsYlpTQXJJREZkSUQwZ2Jpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRmhaV2lobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdQU0JsSUNvZ2RHaHBjeTVrWVhSaExuTjBjbWxrWlNBcklIUm9hWE11YjJabWMyVjBMQ0IwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTd2diaUE5SUVKbEtHNHNJSFJvYVhNdVlYSnlZWGtwTENCcElEMGdRbVVvYVN3Z2RHaHBjeTVoY25KaGVTa3BMQ0IwYUdsekxtUmhkR0V1WVhKeVlYbGJaU0FySURCZElEMGdkQ3dnZEdocGN5NWtZWFJoTG1GeWNtRjVXMlVnS3lBeFhTQTlJRzRzSUhSb2FYTXVaR0YwWVM1aGNuSmhlVnRsSUNzZ01sMGdQU0JwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdGbGFWeWhsTENCMExDQnVMQ0JwTENCeUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdQU0JsSUNvZ2RHaHBjeTVrWVhSaExuTjBjbWxrWlNBcklIUm9hWE11YjJabWMyVjBMQ0IwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTd2diaUE5SUVKbEtHNHNJSFJvYVhNdVlYSnlZWGtwTENCcElEMGdRbVVvYVN3Z2RHaHBjeTVoY25KaGVTa3NJSElnUFNCQ1pTaHlMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WkdGMFlTNWhjbkpoZVZ0bElDc2dNRjBnUFNCMExDQjBhR2x6TG1SaGRHRXVZWEp5WVhsYlpTQXJJREZkSUQwZ2Jpd2dkR2hwY3k1a1lYUmhMbUZ5Y21GNVcyVWdLeUF5WFNBOUlHa3NJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ3NnTTEwZ1BTQnlMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb1pTa2dld29nSUNBZ0lDQWdJR2xtSUNobElEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29JbFJJVWtWRkxrbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbExtTnNiMjVsS0NrNklFTnNiMjVwYm1jZ1lXNGdhVzUwWlhKc1pXRjJaV1FnWW5WbVptVnlJR0YwZEhKcFluVjBaU0IzYVd4c0lHUmxMV2x1ZEdWeWJHVmhkbVVnWW5WbVptVnlJR1JoZEdFdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBN0lHNGdQQ0IwYUdsekxtTnZkVzUwT3lCdUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVJQ29nZEdocGN5NWtZWFJoTG5OMGNtbGtaU0FySUhSb2FYTXViMlptYzJWME93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCeUlEMGdNRHNnY2lBOElIUm9hWE11YVhSbGJWTnBlbVU3SUhJckt5bDBMbkIxYzJnb2RHaHBjeTVrWVhSaExtRnljbUY1VzJrZ0t5QnlYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCbGRDaHVaWGNnZEdocGN5NWhjbkpoZVM1amIyNXpkSEoxWTNSdmNpaDBLU3dnZEdocGN5NXBkR1Z0VTJsNlpTd2dkR2hwY3k1dWIzSnRZV3hwZW1Wa0tUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2NtVjBkWEp1SUdVdWFXNTBaWEpzWldGMlpXUkNkV1ptWlhKeklEMDlQU0IyYjJsa0lEQWdKaVlnS0dVdWFXNTBaWEpzWldGMlpXUkNkV1ptWlhKeklEMGdlMzBwTENCbExtbHVkR1Z5YkdWaGRtVmtRblZtWm1WeWMxdDBhR2x6TG1SaGRHRXVkWFZwWkYwZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWlM1cGJuUmxjbXhsWVhabFpFSjFabVpsY25OYmRHaHBjeTVrWVhSaExuVjFhV1JkSUQwZ2RHaHBjeTVrWVhSaExtTnNiMjVsS0dVcEtTd2dibVYzSUhNeEtHVXVhVzUwWlhKc1pXRjJaV1JDZFdabVpYSnpXM1JvYVhNdVpHRjBZUzUxZFdsa1hTd2dkR2hwY3k1cGRHVnRVMmw2WlN3Z2RHaHBjeTV2Wm1aelpYUXNJSFJvYVhNdWJtOXliV0ZzYVhwbFpDazdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaGxJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSWxSSVVrVkZMa2x1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxMblJ2U2xOUFRpZ3BPaUJUWlhKcFlXeHBlbWx1WnlCaGJpQnBiblJsY214bFlYWmxaQ0JpZFdabVpYSWdZWFIwY21saWRYUmxJSGRwYkd3Z1pHVXRhVzUwWlhKc1pXRjJaU0JpZFdabVpYSWdaR0YwWVM0aUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTURzZ2JpQThJSFJvYVhNdVkyOTFiblE3SUc0ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHNGdLaUIwYUdsekxtUmhkR0V1YzNSeWFXUmxJQ3NnZEdocGN5NXZabVp6WlhRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhJZ1BTQXdPeUJ5SUR3Z2RHaHBjeTVwZEdWdFUybDZaVHNnY2lzcktYUXVjSFZ6YUNoMGFHbHpMbVJoZEdFdVlYSnlZWGxiYVNBcklISmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWFJsYlZOcGVtVTZJSFJvYVhNdWFYUmxiVk5wZW1Vc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUIwYUdsekxtRnljbUY1TG1OdmJuTjBjblZqZEc5eUxtNWhiV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY25KaGVUb2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1E2SUhSb2FYTXVibTl5YldGc2FYcGxaQW9nSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCeVpYUjFjbTRnWlM1cGJuUmxjbXhsWVhabFpFSjFabVpsY25NZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWlM1cGJuUmxjbXhsWVhabFpFSjFabVpsY25NZ1BTQjdmU2tzSUdVdWFXNTBaWEpzWldGMlpXUkNkV1ptWlhKelczUm9hWE11WkdGMFlTNTFkV2xrWFNBOVBUMGdkbTlwWkNBd0lDWW1JQ2hsTG1sdWRHVnliR1ZoZG1Wa1FuVm1abVZ5YzF0MGFHbHpMbVJoZEdFdWRYVnBaRjBnUFNCMGFHbHpMbVJoZEdFdWRHOUtVMDlPS0dVcEtTd2dld29nSUNBZ0lDQWdJQ0FnSUNCcGMwbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbE9pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiVk5wZW1VNklIUm9hWE11YVhSbGJWTnBlbVVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUhSb2FYTXVaR0YwWVM1MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFE2SUhSb2FYTXViMlptYzJWMExBb2dJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZrT2lCMGFHbHpMbTV2Y20xaGJHbDZaV1FLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUXA5TENCbFlTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1luUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMU53Y21sMFpVMWhkR1Z5YVdGc0lEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSlRjSEpwZEdWTllYUmxjbWxoYkNJc0lIUm9hWE11WTI5c2IzSWdQU0J1WlhjZ2NHVW9NVFkzTnpjeU1UVXBMQ0IwYUdsekxtMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVlXeHdhR0ZOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbkp2ZEdGMGFXOXVJRDBnTUN3Z2RHaHBjeTV6YVhwbFFYUjBaVzUxWVhScGIyNGdQU0FoTUN3Z2RHaHBjeTUwY21GdWMzQmhjbVZ1ZENBOUlDRXdMQ0IwYUdsekxtWnZaeUE5SUNFd0xDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbU52Ykc5eUxtTnZjSGtvWlM1amIyeHZjaWtzSUhSb2FYTXViV0Z3SUQwZ1pTNXRZWEFzSUhSb2FYTXVZV3h3YUdGTllYQWdQU0JsTG1Gc2NHaGhUV0Z3TENCMGFHbHpMbkp2ZEdGMGFXOXVJRDBnWlM1eWIzUmhkR2x2Yml3Z2RHaHBjeTV6YVhwbFFYUjBaVzUxWVhScGIyNGdQU0JsTG5OcGVtVkJkSFJsYm5WaGRHbHZiaXdnZEdocGN5NW1iMmNnUFNCbExtWnZaeXdnZEdocGN6c0tJQ0FnSUgwS2ZTd2dTV2tzSUdSeklEMGdibVYzSUVFc0lGVnBJRDBnYm1WM0lFRXNJRVJwSUQwZ2JtVjNJRUVzSUU1cElEMGdibVYzSUZvc0lHWnpJRDBnYm1WM0lGb3NJRU5rSUQwZ2JtVjNJSHBsTENCb2NpQTlJRzVsZHlCQkxDQndjeUE5SUc1bGR5QkJMQ0IxY2lBOUlHNWxkeUJCTENCTWFDQTlJRzVsZHlCYUxDQnFZU0E5SUc1bGR5QmFMQ0JKYUNBOUlHNWxkeUJhTENCVmJ5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1NtVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5QmxZU2w3Q2lBZ0lDQWdJQ0FnYVdZZ0tITjFjR1Z5S0Nrc0lIUm9hWE11YVhOVGNISnBkR1VnUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWxOd2NtbDBaU0lzSUVscElEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1NXa2dQU0J1WlhjZ1IyVTdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F0TGpVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdExqVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1TlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUMwdU5Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzQxTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTGpVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXRMalVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1TlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Rb2dJQ0FnSUNBZ0lDQWdJQ0JkS1N3Z2JpQTlJRzVsZHlCSmN5aDBMQ0ExS1RzS0lDQWdJQ0FnSUNBZ0lDQWdTV2t1YzJWMFNXNWtaWGdvV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXpDaUFnSUNBZ0lDQWdJQ0FnSUYwcExDQkphUzV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUZGcEtHNHNJRE1zSURBc0lDRXhLU2tzSUVscExuTmxkRUYwZEhKcFluVjBaU2dpZFhZaUxDQnVaWGNnVVdrb2Jpd2dNaXdnTXl3Z0lURXBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEdocGN5NW5aVzl0WlhSeWVTQTlJRWxwTENCMGFHbHpMbTFoZEdWeWFXRnNJRDBnWlN3Z2RHaHBjeTVqWlc1MFpYSWdQU0J1WlhjZ1dpZ3VOU3dnTGpVcE93b2dJQ0FnZlFvZ0lDQWdjbUY1WTJGemRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ1pTNWpZVzFsY21FZ1BUMDlJRzUxYkd3Z0ppWWdZMjl1YzI5c1pTNWxjbkp2Y2lnblZFaFNSVVV1VTNCeWFYUmxPaUFpVW1GNVkyRnpkR1Z5TG1OaGJXVnlZU0lnYm1WbFpITWdkRzhnWW1VZ2MyVjBJR2x1SUc5eVpHVnlJSFJ2SUhKaGVXTmhjM1FnWVdkaGFXNXpkQ0J6Y0hKcGRHVnpMaWNwTENCVmFTNXpaWFJHY205dFRXRjBjbWw0VTJOaGJHVW9kR2hwY3k1dFlYUnlhWGhYYjNKc1pDa3NJRU5rTG1OdmNIa29aUzVqWVcxbGNtRXViV0YwY21sNFYyOXliR1FwTENCMGFHbHpMbTF2WkdWc1ZtbGxkMDFoZEhKcGVDNXRkV3gwYVhCc2VVMWhkSEpwWTJWektHVXVZMkZ0WlhKaExtMWhkSEpwZUZkdmNteGtTVzUyWlhKelpTd2dkR2hwY3k1dFlYUnlhWGhYYjNKc1pDa3NJRVJwTG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaDBhR2x6TG0xdlpHVnNWbWxsZDAxaGRISnBlQ2tzSUdVdVkyRnRaWEpoTG1selVHVnljM0JsWTNScGRtVkRZVzFsY21FZ0ppWWdkR2hwY3k1dFlYUmxjbWxoYkM1emFYcGxRWFIwWlc1MVlYUnBiMjRnUFQwOUlDRXhJQ1ltSUZWcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0MxRWFTNTZLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdWJXRjBaWEpwWVd3dWNtOTBZWFJwYjI0c0lHa3NJSEk3Q2lBZ0lDQWdJQ0FnYmlBaFBUMGdNQ0FtSmlBb2NpQTlJRTFoZEdndVkyOXpLRzRwTENCcElEMGdUV0YwYUM1emFXNG9iaWtwT3dvZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZEdocGN5NWpaVzUwWlhJN0NpQWdJQ0FnSUNBZ1pISW9hSEl1YzJWMEtDMHVOU3dnTFM0MUxDQXdLU3dnUkdrc0lHRXNJRlZwTENCcExDQnlLU3dnWkhJb2NITXVjMlYwS0M0MUxDQXRMalVzSURBcExDQkVhU3dnWVN3Z1ZXa3NJR2tzSUhJcExDQmtjaWgxY2k1elpYUW9MalVzSUM0MUxDQXdLU3dnUkdrc0lHRXNJRlZwTENCcExDQnlLU3dnVEdndWMyVjBLREFzSURBcExDQnFZUzV6WlhRb01Td2dNQ2tzSUVsb0xuTmxkQ2d4TENBeEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlHVXVjbUY1TG1sdWRHVnljMlZqZEZSeWFXRnVaMnhsS0doeUxDQndjeXdnZFhJc0lDRXhMQ0JrY3lrN0NpQWdJQ0FnSUNBZ2FXWWdLRzhnUFQwOUlHNTFiR3dnSmlZZ0tHUnlLSEJ6TG5ObGRDZ3RMalVzSUM0MUxDQXdLU3dnUkdrc0lHRXNJRlZwTENCcExDQnlLU3dnYW1FdWMyVjBLREFzSURFcExDQnZJRDBnWlM1eVlYa3VhVzUwWlhKelpXTjBWSEpwWVc1bmJHVW9hSElzSUhWeUxDQndjeXdnSVRFc0lHUnpLU3dnYnlBOVBUMGdiblZzYkNrcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUdVdWNtRjVMbTl5YVdkcGJpNWthWE4wWVc1alpWUnZLR1J6S1RzS0lDQWdJQ0FnSUNCaklEd2daUzV1WldGeUlIeDhJR01nUGlCbExtWmhjaUI4ZkNCMExuQjFjMmdvZXdvZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2dZeXdLSUNBZ0lDQWdJQ0FnSUNBZ2NHOXBiblE2SUdSekxtTnNiMjVsS0Nrc0NpQWdJQ0FnSUNBZ0lDQWdJSFYyT2lCVmJpNW5aWFJKYm5SbGNuQnZiR0YwYVc5dUtHUnpMQ0JvY2l3Z2NITXNJSFZ5TENCTWFDd2dhbUVzSUVsb0xDQnVaWGNnV2lrc0NpQWdJQ0FnSUNBZ0lDQWdJR1poWTJVNklHNTFiR3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOWlhbVZqZERvZ2RHaHBjd29nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU3dnZENrc0lHVXVZMlZ1ZEdWeUlDRTlQU0IyYjJsa0lEQWdKaVlnZEdocGN5NWpaVzUwWlhJdVkyOXdlU2hsTG1ObGJuUmxjaWtzSUhSb2FYTXViV0YwWlhKcFlXd2dQU0JsTG0xaGRHVnlhV0ZzTENCMGFHbHpPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJrY2loek1Td2daU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnVG1rdWMzVmlWbVZqZEc5eWN5aHpNU3dnZENrdVlXUmtVMk5oYkdGeUtDNDFLUzV0ZFd4MGFYQnNlU2h1S1N3Z2FTQWhQVDBnZG05cFpDQXdJRDhnS0daekxuZ2dQU0J5SUNvZ1Rta3VlQ0F0SUdrZ0tpQk9hUzU1TENCbWN5NTVJRDBnYVNBcUlFNXBMbmdnS3lCeUlDb2dUbWt1ZVNrZ09pQm1jeTVqYjNCNUtFNXBLU3dnY3pFdVkyOXdlU2hsS1N3Z2N6RXVlQ0FyUFNCbWN5NTRMQ0J6TVM1NUlDczlJR1p6TG5rc0lITXhMbUZ3Y0d4NVRXRjBjbWw0TkNoRFpDazdDbjBLZG1GeUlHWnlJRDBnYm1WM0lFRXNJRlZvSUQwZ2JtVjNJRUVzSUVSdklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCS1pTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3Bld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdVgyTjFjbkpsYm5STVpYWmxiQ0E5SURBc0lIUm9hWE11ZEhsd1pTQTlJQ0pNVDBRaUxDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3loMGFHbHpMQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkbVZzY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dXMTBLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYVhOTVQwUTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQWhNQW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTa3NJSFJvYVhNdVlYVjBiMVZ3WkdGMFpTQTlJQ0V3T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2MzVndaWEl1WTI5d2VTaGxMQ0FoTVNrN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbExteGxkbVZzY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RDNXNaVzVuZEdnN0lHNGdQQ0JwT3lCdUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSYmJsMDdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrVEdWMlpXd29jaTV2WW1wbFkzUXVZMnh2Ym1Vb0tTd2djaTVrYVhOMFlXNWpaU3dnY2k1b2VYTjBaWEpsYzJsektUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhWMGIxVndaR0YwWlNBOUlHVXVZWFYwYjFWd1pHRjBaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0ZrWkV4bGRtVnNLR1VzSUhRZ1BTQXdMQ0J1SUQwZ01Da2dld29nSUNBZ0lDQWdJSFFnUFNCTllYUm9MbUZpY3loMEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11YkdWMlpXeHpMQ0J5T3dvZ0lDQWdJQ0FnSUdadmNpaHlJRDBnTURzZ2NpQThJR2t1YkdWdVozUm9JQ1ltSUNFb2RDQThJR2xiY2wwdVpHbHpkR0Z1WTJVcE95QnlLeXNwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJwTG5Od2JHbGpaU2h5TENBd0xDQjdDaUFnSUNBZ0lDQWdJQ0FnSUdScGMzUmhibU5sT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0JvZVhOMFpYSmxjMmx6T2lCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0J2WW1wbFkzUTZJR1VLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjeTVoWkdRb1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJEZFhKeVpXNTBUR1YyWld3b0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOMWNuSmxiblJNWlhabGJEc0tJQ0FnSUgwS0lDQWdJR2RsZEU5aWFtVmpkRVp2Y2tScGMzUmhibU5sS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11YkdWMlpXeHpPd29nSUNBZ0lDQWdJR2xtSUNoMExteGxibWQwYUNBK0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRzSUdrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lodUlEMGdNU3dnYVNBOUlIUXViR1Z1WjNSb095QnVJRHdnYVRzZ2Jpc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeUlEMGdkRnR1WFM1a2FYTjBZVzVqWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBXMjVkTG05aWFtVmpkQzUyYVhOcFlteGxJQ1ltSUNoeUlDMDlJSElnS2lCMFcyNWRMbWg1YzNSbGNtVnphWE1wTENCbElEd2djaWtnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUmJiaUF0SURGZExtOWlhbVZqZERzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdDaUFnSUNCOUNpQWdJQ0J5WVhsallYTjBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXNaWFpsYkhNdWJHVnVaM1JvSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCbWNpNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NXRZWFJ5YVhoWGIzSnNaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1pTNXlZWGt1YjNKcFoybHVMbVJwYzNSaGJtTmxWRzhvWm5JcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZGxkRTlpYW1WamRFWnZja1JwYzNSaGJtTmxLR2twTG5KaGVXTmhjM1FvWlN3Z2RDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXViR1YyWld4ek93b2dJQ0FnSUNBZ0lHbG1JQ2gwTG14bGJtZDBhQ0ErSURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWm5JdWMyVjBSbkp2YlUxaGRISnBlRkJ2YzJsMGFXOXVLR1V1YldGMGNtbDRWMjl5YkdRcExDQlZhQzV6WlhSR2NtOXRUV0YwY21sNFVHOXphWFJwYjI0b2RHaHBjeTV0WVhSeWFYaFhiM0pzWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdUlEMGdabkl1WkdsemRHRnVZMlZVYnloVmFDa2dMeUJsTG5wdmIyMDdDaUFnSUNBZ0lDQWdJQ0FnSUhSYk1GMHViMkpxWldOMExuWnBjMmxpYkdVZ1BTQWhNRHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tzSUhJN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2locElEMGdNU3dnY2lBOUlIUXViR1Z1WjNSb095QnBJRHdnY2pzZ2FTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaElEMGdkRnRwWFM1a2FYTjBZVzVqWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBXMmxkTG05aWFtVmpkQzUyYVhOcFlteGxJQ1ltSUNoaElDMDlJR0VnS2lCMFcybGRMbWg1YzNSbGNtVnphWE1wTENCdUlENDlJR0VwSUhSYmFTQXRJREZkTG05aWFtVmpkQzUyYVhOcFlteGxJRDBnSVRFc0lIUmJhVjB1YjJKcVpXTjBMblpwYzJsaWJHVWdQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFJvYVhNdVgyTjFjbkpsYm5STVpYWmxiQ0E5SUdrZ0xTQXhPeUJwSUR3Z2Nqc2dhU3NyS1hSYmFWMHViMkpxWldOMExuWnBjMmxpYkdVZ1BTQWhNVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2MzVndaWEl1ZEc5S1UwOU9LR1VwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVZWFYwYjFWd1pHRjBaU0E5UFQwZ0lURWdKaVlnS0hRdWIySnFaV04wTG1GMWRHOVZjR1JoZEdVZ1BTQWhNU2tzSUhRdWIySnFaV04wTG14bGRtVnNjeUE5SUZ0ZE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVzWlhabGJITTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJRzR1YkdWdVozUm9PeUJwSUR3Z2Nqc2dhU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdFZ1BTQnVXMmxkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBMbTlpYW1WamRDNXNaWFpsYkhNdWNIVnphQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1wbFkzUTZJR0V1YjJKcVpXTjBMblYxYVdRc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBZVzVqWlRvZ1lTNWthWE4wWVc1alpTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaDVjM1JsY21WemFYTTZJR0V1YUhsemRHVnlaWE5wY3dvZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3Q2lBZ0lDQjlDbjBzSUVSb0lEMGdibVYzSUVFc0lFNW9JRDBnYm1WM0lHcGxMQ0JQYUNBOUlHNWxkeUJxWlN3Z1Z6QWdQU0J1WlhjZ1FTd2dSbWdnUFNCdVpYY2dlbVVzSUU5cElEMGdibVYzSUVFc0lHVnZJRDBnYm1WM0lGbDBMQ0JDYUNBOUlHNWxkeUI2WlN3Z2RHOGdQU0J1WlhjZ2FHa3NJRTV2SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJOZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1N3Z2RHaHBjeTVwYzFOcmFXNXVaV1JOWlhOb0lEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSlRhMmx1Ym1Wa1RXVnphQ0lzSUhSb2FYTXVZbWx1WkUxdlpHVWdQU0FpWVhSMFlXTm9aV1FpTENCMGFHbHpMbUpwYm1STllYUnlhWGdnUFNCdVpYY2dlbVVzSUhSb2FYTXVZbWx1WkUxaGRISnBlRWx1ZG1WeWMyVWdQU0J1WlhjZ2VtVXNJSFJvYVhNdVltOTFibVJwYm1kQ2IzZ2dQU0J1ZFd4c0xDQjBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxJRDBnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJR052YlhCMWRHVkNiM1Z1WkdsdVowSnZlQ2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVaMlZ2YldWMGNuazdDaUFnSUNBZ0lDQWdkR2hwY3k1aWIzVnVaR2x1WjBKdmVDQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWliM1Z1WkdsdVowSnZlQ0E5SUc1bGR5QlJkQ2tzSUhSb2FYTXVZbTkxYm1ScGJtZENiM2d1YldGclpVVnRjSFI1S0NrN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbExtZGxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpS1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3Z2RDNWpiM1Z1ZERzZ2Jpc3JLVTlwTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2RDd2diaWtzSUhSb2FYTXVZWEJ3YkhsQ2IyNWxWSEpoYm5ObWIzSnRLRzRzSUU5cEtTd2dkR2hwY3k1aWIzVnVaR2x1WjBKdmVDNWxlSEJoYm1SQ2VWQnZhVzUwS0U5cEtUc0tJQ0FnSUgwS0lDQWdJR052YlhCMWRHVkNiM1Z1WkdsdVoxTndhR1Z5WlNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11WjJWdmJXVjBjbms3Q2lBZ0lDQWdJQ0FnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlNBOVBUMGdiblZzYkNBbUppQW9kR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaU0E5SUc1bGR5QlpkQ2tzSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21VdWJXRnJaVVZ0Y0hSNUtDazdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbWRsZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUtUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2dkQzVqYjNWdWREc2diaXNyS1U5cExtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kQ3dnYmlrc0lIUm9hWE11WVhCd2JIbENiMjVsVkhKaGJuTm1iM0p0S0c0c0lFOXBLU3dnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlM1bGVIQmhibVJDZVZCdmFXNTBLRTlwS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VzSUhRcExDQjBhR2x6TG1KcGJtUk5iMlJsSUQwZ1pTNWlhVzVrVFc5a1pTd2dkR2hwY3k1aWFXNWtUV0YwY21sNExtTnZjSGtvWlM1aWFXNWtUV0YwY21sNEtTd2dkR2hwY3k1aWFXNWtUV0YwY21sNFNXNTJaWEp6WlM1amIzQjVLR1V1WW1sdVpFMWhkSEpwZUVsdWRtVnljMlVwTENCMGFHbHpMbk5yWld4bGRHOXVJRDBnWlM1emEyVnNaWFJ2Yml3Z1pTNWliM1Z1WkdsdVowSnZlQ0FoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVpYjNWdVpHbHVaMEp2ZUNBOUlHVXVZbTkxYm1ScGJtZENiM2d1WTJ4dmJtVW9LU2tzSUdVdVltOTFibVJwYm1kVGNHaGxjbVVnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WW05MWJtUnBibWRUY0dobGNtVWdQU0JsTG1KdmRXNWthVzVuVTNCb1pYSmxMbU5zYjI1bEtDa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbUY1WTJGemRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbTFoZEdWeWFXRnNMQ0JwSUQwZ2RHaHBjeTV0WVhSeWFYaFhiM0pzWkRzS0lDQWdJQ0FnSUNCdUlDRTlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21VZ1BUMDlJRzUxYkd3Z0ppWWdkR2hwY3k1amIyMXdkWFJsUW05MWJtUnBibWRUY0dobGNtVW9LU3dnWlc4dVkyOXdlU2gwYUdsekxtSnZkVzVrYVc1blUzQm9aWEpsS1N3Z1pXOHVZWEJ3YkhsTllYUnlhWGcwS0drcExDQmxMbkpoZVM1cGJuUmxjbk5sWTNSelUzQm9aWEpsS0dWdktTQWhQVDBnSVRFZ0ppWWdLRUpvTG1OdmNIa29hU2t1YVc1MlpYSjBLQ2tzSUhSdkxtTnZjSGtvWlM1eVlYa3BMbUZ3Y0d4NVRXRjBjbWw0TkNoQ2FDa3NJQ0VvZEdocGN5NWliM1Z1WkdsdVowSnZlQ0FoUFQwZ2JuVnNiQ0FtSmlCMGJ5NXBiblJsY25ObFkzUnpRbTk0S0hSb2FYTXVZbTkxYm1ScGJtZENiM2dwSUQwOVBTQWhNU2tnSmlZZ2RHaHBjeTVmWTI5dGNIVjBaVWx1ZEdWeWMyVmpkR2x2Ym5Nb1pTd2dkQ3dnZEc4cEtTazdDaUFnSUNCOUNpQWdJQ0JuWlhSV1pYSjBaWGhRYjNOcGRHbHZiaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1kbGRGWmxjblJsZUZCdmMybDBhVzl1S0dVc0lIUXBMQ0IwYUdsekxtRndjR3g1UW05dVpWUnlZVzV6Wm05eWJTaGxMQ0IwS1N3Z2REc0tJQ0FnSUgwS0lDQWdJR0pwYm1Rb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjMnRsYkdWMGIyNGdQU0JsTENCMElEMDlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9JVEFwTENCMGFHbHpMbk5yWld4bGRHOXVMbU5oYkdOMWJHRjBaVWx1ZG1WeWMyVnpLQ2tzSUhRZ1BTQjBhR2x6TG0xaGRISnBlRmR2Y214a0tTd2dkR2hwY3k1aWFXNWtUV0YwY21sNExtTnZjSGtvZENrc0lIUm9hWE11WW1sdVpFMWhkSEpwZUVsdWRtVnljMlV1WTI5d2VTaDBLUzVwYm5abGNuUW9LVHNLSUNBZ0lIMEtJQ0FnSUhCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXphMlZzWlhSdmJpNXdiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQnViM0p0WVd4cGVtVlRhMmx1VjJWcFoyaDBjeWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUc1bGR5QnFaU3dnZENBOUlIUm9hWE11WjJWdmJXVjBjbmt1WVhSMGNtbGlkWFJsY3k1emEybHVWMlZwWjJoME93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQjBMbU52ZFc1ME95QnVJRHdnYVRzZ2Jpc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ1pTNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFFzSUc0cE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJREVnTHlCbExtMWhibWhoZEhSaGJreGxibWQwYUNncE93b2dJQ0FnSUNBZ0lDQWdJQ0J5SUNFOVBTQXhJQzhnTUNBL0lHVXViWFZzZEdsd2JIbFRZMkZzWVhJb2Npa2dPaUJsTG5ObGRDZ3hMQ0F3TENBd0xDQXdLU3dnZEM1elpYUllXVnBYS0c0c0lHVXVlQ3dnWlM1NUxDQmxMbm9zSUdVdWR5azdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvWlNrZ2V3b2dJQ0FnSUNBZ0lITjFjR1Z5TG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0dVcExDQjBhR2x6TG1KcGJtUk5iMlJsSUQwOVBTQWlZWFIwWVdOb1pXUWlJRDhnZEdocGN5NWlhVzVrVFdGMGNtbDRTVzUyWlhKelpTNWpiM0I1S0hSb2FYTXViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwSURvZ2RHaHBjeTVpYVc1a1RXOWtaU0E5UFQwZ0ltUmxkR0ZqYUdWa0lpQS9JSFJvYVhNdVltbHVaRTFoZEhKcGVFbHVkbVZ5YzJVdVkyOXdlU2gwYUdsekxtSnBibVJOWVhSeWFYZ3BMbWx1ZG1WeWRDZ3BJRG9nWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1VGEybHVibVZrVFdWemFEb2dWVzV5WldOdloyNXBlbVZrSUdKcGJtUk5iMlJsT2lBaUlDc2dkR2hwY3k1aWFXNWtUVzlrWlNrN0NpQWdJQ0I5Q2lBZ0lDQmhjSEJzZVVKdmJtVlVjbUZ1YzJadmNtMG9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTV6YTJWc1pYUnZiaXdnYVNBOUlIUm9hWE11WjJWdmJXVjBjbms3Q2lBZ0lDQWdJQ0FnVG1ndVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHBMbUYwZEhKcFluVjBaWE11YzJ0cGJrbHVaR1Y0TENCbEtTd2dUMmd1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNocExtRjBkSEpwWW5WMFpYTXVjMnRwYmxkbGFXZG9kQ3dnWlNrc0lFUm9MbU52Y0hrb2RDa3VZWEJ3YkhsTllYUnlhWGcwS0hSb2FYTXVZbWx1WkUxaGRISnBlQ2tzSUhRdWMyVjBLREFzSURBc0lEQXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdjaUE5SURBN0lISWdQQ0EwT3lCeUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUU5b0xtZGxkRU52YlhCdmJtVnVkQ2h5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dFZ0lUMDlJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnVG1ndVoyVjBRMjl0Y0c5dVpXNTBLSElwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm1ndWJYVnNkR2x3YkhsTllYUnlhV05sY3lodUxtSnZibVZ6VzI5ZExtMWhkSEpwZUZkdmNteGtMQ0J1TG1KdmJtVkpiblpsY25ObGMxdHZYU2tzSUhRdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0Zjd0xtTnZjSGtvUkdncExtRndjR3g1VFdGMGNtbDROQ2hHYUNrc0lHRXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtRndjR3g1VFdGMGNtbDROQ2gwYUdsekxtSnBibVJOWVhSeWFYaEpiblpsY25ObEtUc0tJQ0FnSUgwS0lDQWdJR0p2Ym1WVWNtRnVjMlp2Y20wb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxOcmFXNXVaV1JOWlhOb09pQXVZbTl1WlZSeVlXNXpabTl5YlNncElIZGhjeUJ5Wlc1aGJXVmtJSFJ2SUM1aGNIQnNlVUp2Ym1WVWNtRnVjMlp2Y20wb0tTQnBiaUJ5TVRVeExpSXBMQ0IwYUdsekxtRndjR3g1UW05dVpWUnlZVzV6Wm05eWJTaGxMQ0IwS1RzS0lDQWdJSDBLZlN3Z2RHRWdQU0JqYkdGemN5QmxlSFJsYm1SeklFcGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMEp2Ym1VZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lrSnZibVVpT3dvZ0lDQWdmUXA5TENCdmFTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1UzUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1MWJHd3NJSFFnUFNBeExDQnVJRDBnTVN3Z2FTd2djaXdnWVN3Z2J5d2dZeXdnYkNBOUlIQjBMQ0JvSUQwZ2NIUXNJSFVzSUdRcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0c1MWJHd3NJR0VzSUc4c0lHTXNJR3dzSUdnc0lHa3NJSElzSUhVc0lHUXBMQ0IwYUdsekxtbHpSR0YwWVZSbGVIUjFjbVVnUFNBaE1Dd2dkR2hwY3k1cGJXRm5aU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2Jnb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUQwZ0lURXNJSFJvYVhNdVpteHBjRmtnUFNBaE1Td2dkR2hwY3k1MWJuQmhZMnRCYkdsbmJtMWxiblFnUFNBeE93b2dJQ0FnZlFwOUxDQjZhQ0E5SUc1bGR5QjZaU3dnV0RBZ1BTQnVaWGNnZW1Vc0lFOXZJRDBnWTJ4aGMzTWdjekVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlGdGRMQ0IwSUQwZ1cxMHBld29nSUNBZ0lDQWdJSFJvYVhNdWRYVnBaQ0E5SUd0MEtDa3NJSFJvYVhNdVltOXVaWE1nUFNCbExuTnNhV05sS0RBcExDQjBhR2x6TG1KdmJtVkpiblpsY25ObGN5QTlJSFFzSUhSb2FYTXVZbTl1WlUxaGRISnBZMlZ6SUQwZ2JuVnNiQ3dnZEdocGN5NWliMjVsVkdWNGRIVnlaU0E5SUc1MWJHd3NJSFJvYVhNdVltOXVaVlJsZUhSMWNtVlRhWHBsSUQwZ01Dd2dkR2hwY3k1cGJtbDBLQ2s3Q2lBZ0lDQjlDaUFnSUNCcGJtbDBLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWliMjVsY3l3Z2RDQTlJSFJvYVhNdVltOXVaVWx1ZG1WeWMyVnpPd29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbUp2Ym1WTllYUnlhV05sY3lBOUlHNWxkeUJHYkc5aGRETXlRWEp5WVhrb1pTNXNaVzVuZEdnZ0tpQXhOaWtzSUhRdWJHVnVaM1JvSUQwOVBTQXdLU0IwYUdsekxtTmhiR04xYkdGMFpVbHVkbVZ5YzJWektDazdDaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9aUzVzWlc1bmRHZ2dJVDA5SUhRdWJHVnVaM1JvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VTJ0bGJHVjBiMjQ2SUU1MWJXSmxjaUJ2WmlCcGJuWmxjbk5sSUdKdmJtVWdiV0YwY21salpYTWdaRzlsY3lCdWIzUWdiV0YwWTJnZ1lXMXZkVzUwSUc5bUlHSnZibVZ6TGlJcExDQjBhR2x6TG1KdmJtVkpiblpsY25ObGN5QTlJRnRkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdkR2hwY3k1aWIyNWxjeTVzWlc1bmRHZzdJRzRnUENCcE95QnVLeXNwZEdocGN5NWliMjVsU1c1MlpYSnpaWE11Y0hWemFDaHVaWGNnZW1VcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR05oYkdOMWJHRjBaVWx1ZG1WeWMyVnpLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVZbTl1WlVsdWRtVnljMlZ6TG14bGJtZDBhQ0E5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbElEMGdNQ3dnZENBOUlIUm9hWE11WW05dVpYTXViR1Z1WjNSb095QmxJRHdnZERzZ1pTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCdVpYY2dlbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WW05dVpYTmJaVjBnSmlZZ2JpNWpiM0I1S0hSb2FYTXVZbTl1WlhOYlpWMHViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwTENCMGFHbHpMbUp2Ym1WSmJuWmxjbk5sY3k1d2RYTm9LRzRwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lIQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbElEMGdNQ3dnZENBOUlIUm9hWE11WW05dVpYTXViR1Z1WjNSb095QmxJRHdnZERzZ1pTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbUp2Ym1WelcyVmRPd29nSUNBZ0lDQWdJQ0FnSUNCdUlDWW1JRzR1YldGMGNtbDRWMjl5YkdRdVkyOXdlU2gwYUdsekxtSnZibVZKYm5abGNuTmxjMXRsWFNrdWFXNTJaWEowS0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1pTQTlJREFzSUhRZ1BTQjBhR2x6TG1KdmJtVnpMbXhsYm1kMGFEc2daU0E4SUhRN0lHVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVpYjI1bGMxdGxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpQW1KaUFvYmk1d1lYSmxiblFnSmlZZ2JpNXdZWEpsYm5RdWFYTkNiMjVsSUQ4Z0tHNHViV0YwY21sNExtTnZjSGtvYmk1d1lYSmxiblF1YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncExDQnVMbTFoZEhKcGVDNXRkV3gwYVhCc2VTaHVMbTFoZEhKcGVGZHZjbXhrS1NrZ09pQnVMbTFoZEhKcGVDNWpiM0I1S0c0dWJXRjBjbWw0VjI5eWJHUXBMQ0J1TG0xaGRISnBlQzVrWldOdmJYQnZjMlVvYmk1d2IzTnBkR2x2Yml3Z2JpNXhkV0YwWlhKdWFXOXVMQ0J1TG5OallXeGxLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVpYjI1bGN5d2dkQ0E5SUhSb2FYTXVZbTl1WlVsdWRtVnljMlZ6TENCdUlEMGdkR2hwY3k1aWIyNWxUV0YwY21salpYTXNJR2tnUFNCMGFHbHpMbUp2Ym1WVVpYaDBkWEpsT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQXNJR0VnUFNCbExteGxibWQwYURzZ2NpQThJR0U3SUhJckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnWlZ0eVhTQS9JR1ZiY2wwdWJXRjBjbWw0VjI5eWJHUWdPaUJZTURzS0lDQWdJQ0FnSUNBZ0lDQWdlbWd1YlhWc2RHbHdiSGxOWVhSeWFXTmxjeWh2TENCMFczSmRLU3dnZW1ndWRHOUJjbkpoZVNodUxDQnlJQ29nTVRZcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBJQ0U5UFNCdWRXeHNJQ1ltSUNocExtNWxaV1J6VlhCa1lYUmxJRDBnSVRBcE93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJ6TVNoMGFHbHpMbUp2Ym1WekxDQjBhR2x6TG1KdmJtVkpiblpsY25ObGN5azdDaUFnSUNCOUNpQWdJQ0JqYjIxd2RYUmxRbTl1WlZSbGVIUjFjbVVvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCTllYUm9Mbk54Y25Rb2RHaHBjeTVpYjI1bGN5NXNaVzVuZEdnZ0tpQTBLVHNLSUNBZ0lDQWdJQ0JsSUQwZ2VXUW9aU2tzSUdVZ1BTQk5ZWFJvTG0xaGVDaGxMQ0EwS1RzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvWlNBcUlHVWdLaUEwS1RzS0lDQWdJQ0FnSUNCMExuTmxkQ2gwYUdsekxtSnZibVZOWVhSeWFXTmxjeWs3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0J1WlhjZ2Iya29kQ3dnWlN3Z1pTd2dWM1FzSUhodUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBhR2x6TG1KdmJtVk5ZWFJ5YVdObGN5QTlJSFFzSUhSb2FYTXVZbTl1WlZSbGVIUjFjbVVnUFNCdUxDQjBhR2x6TG1KdmJtVlVaWGgwZFhKbFUybDZaU0E5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUkNiMjVsUW5sT1lXMWxLR1VwSUhzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ2RHaHBjeTVpYjI1bGN5NXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVZbTl1WlhOYmRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBMbTVoYldVZ1BUMDlJR1VwSUhKbGRIVnliaUJwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1aWIyNWxWR1Y0ZEhWeVpTQWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWliMjVsVkdWNGRIVnlaUzVrYVhOd2IzTmxLQ2tzSUhSb2FYTXVZbTl1WlZSbGVIUjFjbVVnUFNCdWRXeHNLVHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUtVMDlPS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuVjFhV1FnUFNCbExuVjFhV1E3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Dd2dhU0E5SUdVdVltOXVaWE11YkdWdVozUm9PeUJ1SUR3Z2FUc2diaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhJZ1BTQmxMbUp2Ym1WelcyNWRMQ0JoSUQwZ2RGdHlYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlQVDBnZG05cFpDQXdJQ1ltSUNoamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsTnJaV3hsZEc5dU9pQk9ieUJpYjI1bElHWnZkVzVrSUhkcGRHZ2dWVlZKUkRvaUxDQnlLU3dnWVNBOUlHNWxkeUIwWVNrc0lIUm9hWE11WW05dVpYTXVjSFZ6YUNoaEtTd2dkR2hwY3k1aWIyNWxTVzUyWlhKelpYTXVjSFZ6YUNodVpYY2dlbVVvS1M1bWNtOXRRWEp5WVhrb1pTNWliMjVsU1c1MlpYSnpaWE5iYmwwcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVc1cGRDZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCdFpYUmhaR0YwWVRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtVnljMmx2YmpvZ05DNDJMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0lsTnJaV3hsZEc5dUlpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxibVZ5WVhSdmNqb2dJbE5yWld4bGRHOXVMblJ2U2xOUFRpSUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdZbTl1WlhNNklGdGRMQW9nSUNBZ0lDQWdJQ0FnSUNCaWIyNWxTVzUyWlhKelpYTTZJRnRkQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCbExuVjFhV1FnUFNCMGFHbHpMblYxYVdRN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbUp2Ym1WekxDQnVJRDBnZEdocGN5NWliMjVsU1c1MlpYSnpaWE03Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUhRdWJHVnVaM1JvT3lCcElEd2djanNnYVNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0IwVzJsZE93b2dJQ0FnSUNBZ0lDQWdJQ0JsTG1KdmJtVnpMbkIxYzJnb1lTNTFkV2xrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQnVXMmxkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxMbUp2Ym1WSmJuWmxjbk5sY3k1d2RYTm9LRzh1ZEc5QmNuSmhlU2dwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVN0NpQWdJQ0I5Q24wc0lIVnBJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmxkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVMQ0JwSUQwZ01TbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTd2dkQ3dnYmlrc0lIUm9hWE11YVhOSmJuTjBZVzVqWldSQ2RXWm1aWEpCZEhSeWFXSjFkR1VnUFNBaE1Dd2dkR2hwY3k1dFpYTm9VR1Z5UVhSMGNtbGlkWFJsSUQwZ2FUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbTFsYzJoUVpYSkJkSFJ5YVdKMWRHVWdQU0JsTG0xbGMyaFFaWEpCZEhSeWFXSjFkR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXRaWE5vVUdWeVFYUjBjbWxpZFhSbElEMGdkR2hwY3k1dFpYTm9VR1Z5UVhSMGNtbGlkWFJsTENCbExtbHpTVzV6ZEdGdVkyVmtRblZtWm1WeVFYUjBjbWxpZFhSbElEMGdJVEFzSUdVN0NpQWdJQ0I5Q24wc0lFWnBJRDBnYm1WM0lIcGxMQ0JXYUNBOUlHNWxkeUI2WlN3Z2NISWdQU0JiWFN3Z2EyZ2dQU0J1WlhjZ1VYUXNJSEV3SUQwZ2JtVjNJSHBsTENCdGN5QTlJRzVsZHlCTmRDd2daM01nUFNCdVpYY2dXWFFzSUVadklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCTmRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBLU3dnZEdocGN5NXBjMGx1YzNSaGJtTmxaRTFsYzJnZ1BTQWhNQ3dnZEdocGN5NXBibk4wWVc1alpVMWhkSEpwZUNBOUlHNWxkeUIxYVNodVpYY2dSbXh2WVhRek1rRnljbUY1S0c0Z0tpQXhOaWtzSURFMktTd2dkR2hwY3k1cGJuTjBZVzVqWlVOdmJHOXlJRDBnYm5Wc2JDd2dkR2hwY3k1amIzVnVkQ0E5SUc0c0lIUm9hWE11WW05MWJtUnBibWRDYjNnZ1BTQnVkV3hzTENCMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbElEMGdiblZzYkRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2Jqc2dhU3NyS1hSb2FYTXVjMlYwVFdGMGNtbDRRWFFvYVN3Z2NUQXBPd29nSUNBZ2ZRb2dJQ0FnWTI5dGNIVjBaVUp2ZFc1a2FXNW5RbTk0S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVuWlc5dFpYUnllU3dnZENBOUlIUm9hWE11WTI5MWJuUTdDaUFnSUNBZ0lDQWdkR2hwY3k1aWIzVnVaR2x1WjBKdmVDQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWliM1Z1WkdsdVowSnZlQ0E5SUc1bGR5QlJkQ2tzSUdVdVltOTFibVJwYm1kQ2IzZ2dQVDA5SUc1MWJHd2dKaVlnWlM1amIyMXdkWFJsUW05MWJtUnBibWRDYjNnb0tTd2dkR2hwY3k1aWIzVnVaR2x1WjBKdmVDNXRZV3RsUlcxd2RIa29LVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHdnZERzZ2Jpc3JLWFJvYVhNdVoyVjBUV0YwY21sNFFYUW9iaXdnUm1rcExDQnJhQzVqYjNCNUtHVXVZbTkxYm1ScGJtZENiM2dwTG1Gd2NHeDVUV0YwY21sNE5DaEdhU2tzSUhSb2FYTXVZbTkxYm1ScGJtZENiM2d1ZFc1cGIyNG9hMmdwT3dvZ0lDQWdmUW9nSUNBZ1kyOXRjSFYwWlVKdmRXNWthVzVuVTNCb1pYSmxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NW5aVzl0WlhSeWVTd2dkQ0E5SUhSb2FYTXVZMjkxYm5RN0NpQWdJQ0FnSUNBZ2RHaHBjeTVpYjNWdVpHbHVaMU53YUdWeVpTQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlNBOUlHNWxkeUJaZENrc0lHVXVZbTkxYm1ScGJtZFRjR2hsY21VZ1BUMDlJRzUxYkd3Z0ppWWdaUzVqYjIxd2RYUmxRbTkxYm1ScGJtZFRjR2hsY21Vb0tTd2dkR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaUzV0WVd0bFJXMXdkSGtvS1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3Z2REc2diaXNyS1hSb2FYTXVaMlYwVFdGMGNtbDRRWFFvYml3Z1Jta3BMQ0JuY3k1amIzQjVLR1V1WW05MWJtUnBibWRUY0dobGNtVXBMbUZ3Y0d4NVRXRjBjbWw0TkNoR2FTa3NJSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVV1ZFc1cGIyNG9aM01wT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU3dnZENrc0lIUm9hWE11YVc1emRHRnVZMlZOWVhSeWFYZ3VZMjl3ZVNobExtbHVjM1JoYm1ObFRXRjBjbWw0S1N3Z1pTNXBibk4wWVc1alpVTnZiRzl5SUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG1sdWMzUmhibU5sUTI5c2IzSWdQU0JsTG1sdWMzUmhibU5sUTI5c2IzSXVZMnh2Ym1Vb0tTa3NJSFJvYVhNdVkyOTFiblFnUFNCbExtTnZkVzUwTENCbExtSnZkVzVrYVc1blFtOTRJQ0U5UFNCdWRXeHNJQ1ltSUNoMGFHbHpMbUp2ZFc1a2FXNW5RbTk0SUQwZ1pTNWliM1Z1WkdsdVowSnZlQzVqYkc5dVpTZ3BLU3dnWlM1aWIzVnVaR2x1WjFOd2FHVnlaU0FoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVpYjNWdVpHbHVaMU53YUdWeVpTQTlJR1V1WW05MWJtUnBibWRUY0dobGNtVXVZMnh2Ym1Vb0tTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJEYjJ4dmNrRjBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBMbVp5YjIxQmNuSmhlU2gwYUdsekxtbHVjM1JoYm1ObFEyOXNiM0l1WVhKeVlYa3NJR1VnS2lBektUc0tJQ0FnSUgwS0lDQWdJR2RsZEUxaGRISnBlRUYwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwTG1aeWIyMUJjbkpoZVNoMGFHbHpMbWx1YzNSaGJtTmxUV0YwY21sNExtRnljbUY1TENCbElDb2dNVFlwT3dvZ0lDQWdmUW9nSUNBZ2NtRjVZMkZ6ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtMWhkSEpwZUZkdmNteGtMQ0JwSUQwZ2RHaHBjeTVqYjNWdWREc0tJQ0FnSUNBZ0lDQnBaaUFvYlhNdVoyVnZiV1YwY25rZ1BTQjBhR2x6TG1kbGIyMWxkSEo1TENCdGN5NXRZWFJsY21saGJDQTlJSFJvYVhNdWJXRjBaWEpwWVd3c0lHMXpMbTFoZEdWeWFXRnNJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11WW05MWJtUnBibWRUY0dobGNtVWdQVDA5SUc1MWJHd2dKaVlnZEdocGN5NWpiMjF3ZFhSbFFtOTFibVJwYm1kVGNHaGxjbVVvS1N3Z1ozTXVZMjl3ZVNoMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbEtTd2daM011WVhCd2JIbE5ZWFJ5YVhnMEtHNHBMQ0JsTG5KaGVTNXBiblJsY25ObFkzUnpVM0JvWlhKbEtHZHpLU0FoUFQwZ0lURXBLU0JtYjNJb2JHVjBJSElnUFNBd095QnlJRHdnYVRzZ2Npc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuWlhSTllYUnlhWGhCZENoeUxDQkdhU2tzSUZab0xtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb2Jpd2dSbWtwTENCdGN5NXRZWFJ5YVhoWGIzSnNaQ0E5SUZab0xDQnRjeTV5WVhsallYTjBLR1VzSUhCeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JoSUQwZ01Dd2dieUE5SUhCeUxteGxibWQwYURzZ1lTQThJRzg3SUdFckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlIQnlXMkZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXk1cGJuTjBZVzVqWlVsa0lEMGdjaXdnWXk1dlltcGxZM1FnUFNCMGFHbHpMQ0IwTG5CMWMyZ29ZeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY0hJdWJHVnVaM1JvSUQwZ01Ec0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J6WlhSRGIyeHZja0YwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHVjM1JoYm1ObFEyOXNiM0lnUFQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11YVc1emRHRnVZMlZEYjJ4dmNpQTlJRzVsZHlCMWFTaHVaWGNnUm14dllYUXpNa0Z5Y21GNUtIUm9hWE11YVc1emRHRnVZMlZOWVhSeWFYZ3VZMjkxYm5RZ0tpQXpLU3dnTXlrcExDQjBMblJ2UVhKeVlYa29kR2hwY3k1cGJuTjBZVzVqWlVOdmJHOXlMbUZ5Y21GNUxDQmxJQ29nTXlrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJOWVhSeWFYaEJkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkQzUwYjBGeWNtRjVLSFJvYVhNdWFXNXpkR0Z1WTJWTllYUnlhWGd1WVhKeVlYa3NJR1VnS2lBeE5pazdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVk5iM0p3YUZSaGNtZGxkSE1vS1NCN2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlaR2x6Y0c5elpTSUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lIMEtmU3dnZDNRZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdKMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTk1hVzVsUW1GemFXTk5ZWFJsY21saGJDQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlUR2x1WlVKaGMybGpUV0YwWlhKcFlXd2lMQ0IwYUdsekxtTnZiRzl5SUQwZ2JtVjNJSEJsS0RFMk56YzNNakUxS1N3Z2RHaHBjeTV0WVhBZ1BTQnVkV3hzTENCMGFHbHpMbXhwYm1WM2FXUjBhQ0E5SURFc0lIUm9hWE11YkdsdVpXTmhjQ0E5SUNKeWIzVnVaQ0lzSUhSb2FYTXViR2x1WldwdmFXNGdQU0FpY205MWJtUWlMQ0IwYUdsekxtWnZaeUE5SUNFd0xDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbU52Ykc5eUxtTnZjSGtvWlM1amIyeHZjaWtzSUhSb2FYTXViV0Z3SUQwZ1pTNXRZWEFzSUhSb2FYTXViR2x1WlhkcFpIUm9JRDBnWlM1c2FXNWxkMmxrZEdnc0lIUm9hWE11YkdsdVpXTmhjQ0E5SUdVdWJHbHVaV05oY0N3Z2RHaHBjeTVzYVc1bGFtOXBiaUE5SUdVdWJHbHVaV3B2YVc0c0lIUm9hWE11Wm05bklEMGdaUzVtYjJjc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUVob0lEMGdibVYzSUVFc0lFZG9JRDBnYm1WM0lFRXNJRmRvSUQwZ2JtVjNJSHBsTENCdWJ5QTlJRzVsZHlCb2FTd2diWElnUFNCdVpYY2dXWFFzSUdKdUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCS1pTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lFZGxMQ0IwSUQwZ2JtVjNJSGQwS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VEdsdVpTQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlUR2x1WlNJc0lIUm9hWE11WjJWdmJXVjBjbmtnUFNCbExDQjBhR2x6TG0xaGRHVnlhV0ZzSUQwZ2RDd2dkR2hwY3k1MWNHUmhkR1ZOYjNKd2FGUmhjbWRsZEhNb0tUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVc0lIUXBMQ0IwYUdsekxtMWhkR1Z5YVdGc0lEMGdRWEp5WVhrdWFYTkJjbkpoZVNobExtMWhkR1Z5YVdGc0tTQS9JR1V1YldGMFpYSnBZV3d1YzJ4cFkyVW9LU0E2SUdVdWJXRjBaWEpwWVd3c0lIUm9hWE11WjJWdmJXVjBjbmtnUFNCbExtZGxiMjFsZEhKNUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXRjSFYwWlV4cGJtVkVhWE4wWVc1alpYTW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxtZGxiMjFsZEhKNU93b2dJQ0FnSUNBZ0lHbG1JQ2hsTG1sdVpHVjRJRDA5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNWhkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVMQ0J1SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Bb2dJQ0FnSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F4TENCeUlEMGdkQzVqYjNWdWREc2dhU0E4SUhJN0lHa3JLeWxJYUM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUXNJR2tnTFNBeEtTd2dSMmd1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoMExDQnBLU3dnYmx0cFhTQTlJRzViYVNBdElERmRMQ0J1VzJsZElDczlJRWhvTG1ScGMzUmhibU5sVkc4b1IyZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCbExuTmxkRUYwZEhKcFluVjBaU2dpYkdsdVpVUnBjM1JoYm1ObElpd2dibVYzSUhabEtHNHNJREVwS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TWFXNWxMbU52YlhCMWRHVk1hVzVsUkdsemRHRnVZMlZ6S0NrNklFTnZiWEIxZEdGMGFXOXVJRzl1YkhrZ2NHOXpjMmxpYkdVZ2QybDBhQ0J1YjI0dGFXNWtaWGhsWkNCQ2RXWm1aWEpIWlc5dFpYUnllUzRpS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEpoZVdOaGMzUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVuWlc5dFpYUnllU3dnYVNBOUlIUm9hWE11YldGMGNtbDRWMjl5YkdRc0lISWdQU0JsTG5CaGNtRnRjeTVNYVc1bExuUm9jbVZ6YUc5c1pDd2dZU0E5SUc0dVpISmhkMUpoYm1kbE93b2dJQ0FnSUNBZ0lHbG1JQ2h1TG1KdmRXNWthVzVuVTNCb1pYSmxJRDA5UFNCdWRXeHNJQ1ltSUc0dVkyOXRjSFYwWlVKdmRXNWthVzVuVTNCb1pYSmxLQ2tzSUcxeUxtTnZjSGtvYmk1aWIzVnVaR2x1WjFOd2FHVnlaU2tzSUcxeUxtRndjR3g1VFdGMGNtbDROQ2hwS1N3Z2JYSXVjbUZrYVhWeklDczlJSElzSUdVdWNtRjVMbWx1ZEdWeWMyVmpkSE5UY0dobGNtVW9iWElwSUQwOVBTQWhNU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJRmRvTG1OdmNIa29hU2t1YVc1MlpYSjBLQ2tzSUc1dkxtTnZjSGtvWlM1eVlYa3BMbUZ3Y0d4NVRXRjBjbWw0TkNoWGFDazdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQnlJQzhnS0NoMGFHbHpMbk5qWVd4bExuZ2dLeUIwYUdsekxuTmpZV3hsTG5rZ0t5QjBhR2x6TG5OallXeGxMbm9wSUM4Z015a3NJR01nUFNCdklDb2dieXdnYkNBOUlHNWxkeUJCTENCb0lEMGdibVYzSUVFc0lIVWdQU0J1WlhjZ1FTd2daQ0E5SUc1bGR5QkJMQ0JtSUQwZ2RHaHBjeTVwYzB4cGJtVlRaV2R0Wlc1MGN5QS9JRElnT2lBeExDQnRJRDBnYmk1cGJtUmxlQ3dnWnlBOUlHNHVZWFIwY21saWRYUmxjeTV3YjNOcGRHbHZianNLSUNBZ0lDQWdJQ0JwWmlBb2JTQWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjQ0E5SUUxaGRHZ3ViV0Y0S0RBc0lHRXVjM1JoY25RcExDQjJJRDBnVFdGMGFDNXRhVzRvYlM1amIzVnVkQ3dnWVM1emRHRnlkQ0FySUdFdVkyOTFiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIZ2dQU0J3TENCNUlEMGdkaUF0SURFN0lIZ2dQQ0I1T3lCNElDczlJR1lwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSWdQU0J0TG1kbGRGZ29lQ2tzSUhjZ1BTQnRMbWRsZEZnb2VDQXJJREVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHd3Vabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2huTENCaUtTd2dhQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0djc0lIY3BMQ0J1Ynk1a2FYTjBZVzVqWlZOeFZHOVRaV2R0Wlc1MEtHd3NJR2dzSUdRc0lIVXBJRDRnWXlrZ1kyOXVkR2x1ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa0xtRndjR3g1VFdGMGNtbDROQ2gwYUdsekxtMWhkSEpwZUZkdmNteGtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSklEMGdaUzV5WVhrdWIzSnBaMmx1TG1ScGMzUmhibU5sVkc4b1pDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkpJRHdnWlM1dVpXRnlJSHg4SUVrZ1BpQmxMbVpoY2lCOGZDQjBMbkIxYzJnb2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNSaGJtTmxPaUJKTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZhVzUwT2lCMUxtTnNiMjVsS0NrdVlYQndiSGxOWVhSeWFYZzBLSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXBMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRPaUI0TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhZMlU2SUc1MWJHd3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GalpVbHVaR1Y0T2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRG9nZEdocGN3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlFMWhkR2d1YldGNEtEQXNJR0V1YzNSaGNuUXBMQ0IySUQwZ1RXRjBhQzV0YVc0b1p5NWpiM1Z1ZEN3Z1lTNXpkR0Z5ZENBcklHRXVZMjkxYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGdnUFNCd0xDQjVJRDBnZGlBdElERTdJSGdnUENCNU95QjRJQ3M5SUdZcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3d1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNobkxDQjRLU3dnYUM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHY3NJSGdnS3lBeEtTd2dibTh1WkdsemRHRnVZMlZUY1ZSdlUyVm5iV1Z1ZENoc0xDQm9MQ0JrTENCMUtTQStJR01wSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkM1aGNIQnNlVTFoZEhKcGVEUW9kR2hwY3k1dFlYUnlhWGhYYjNKc1pDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZHlBOUlHVXVjbUY1TG05eWFXZHBiaTVrYVhOMFlXNWpaVlJ2S0dRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2R5QThJR1V1Ym1WaGNpQjhmQ0IzSUQ0Z1pTNW1ZWElnZkh3Z2RDNXdkWE5vS0hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2dkeXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IybHVkRG9nZFM1amJHOXVaU2dwTG1Gd2NHeDVUV0YwY21sNE5DaDBhR2x6TG0xaGRISnBlRmR2Y214a0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVEb2dlQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXTmxPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poWTJWSmJtUmxlRG9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1wbFkzUTZJSFJvYVhNS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsVFc5eWNHaFVZWEpuWlhSektDa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1blpXOXRaWFJ5ZVM1dGIzSndhRUYwZEhKcFluVjBaWE1zSUc0Z1BTQlBZbXBsWTNRdWEyVjVjeWgwS1RzS0lDQWdJQ0FnSUNCcFppQW9iaTVzWlc1bmRHZ2dQaUF3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkRnR1V3pCZFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE1nUFNCYlhTd2dkR2hwY3k1dGIzSndhRlJoY21kbGRFUnBZM1JwYjI1aGNua2dQU0I3ZlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQXNJR0VnUFNCcExteGxibWQwYURzZ2NpQThJR0U3SUhJckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0JwVzNKZExtNWhiV1VnZkh3Z1UzUnlhVzVuS0hJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpMbkIxYzJnb01Da3NJSFJvYVhNdWJXOXljR2hVWVhKblpYUkVhV04wYVc5dVlYSjVXMjlkSUQwZ2Nqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlN3Z1dHZ2dQU0J1WlhjZ1FTd2djV2dnUFNCdVpYY2dRU3dnWlc0Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdKdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VzSUhRcExDQjBhR2x6TG1selRHbHVaVk5sWjIxbGJuUnpJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pNYVc1bFUyVm5iV1Z1ZEhNaU93b2dJQ0FnZlFvZ0lDQWdZMjl0Y0hWMFpVeHBibVZFYVhOMFlXNWpaWE1vS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbWRsYjIxbGRISjVPd29nSUNBZ0lDQWdJR2xtSUNobExtbHVaR1Y0SUQwOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1TENCdUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREFzSUhJZ1BTQjBMbU52ZFc1ME95QnBJRHdnY2pzZ2FTQXJQU0F5S1Zob0xtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kQ3dnYVNrc0lIRm9MbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEN3Z2FTQXJJREVwTENCdVcybGRJRDBnYVNBOVBUMGdNQ0EvSURBZ09pQnVXMmtnTFNBeFhTd2dibHRwSUNzZ01WMGdQU0J1VzJsZElDc2dXR2d1WkdsemRHRnVZMlZVYnloeGFDazdDaUFnSUNBZ0lDQWdJQ0FnSUdVdWMyVjBRWFIwY21saWRYUmxLQ0pzYVc1bFJHbHpkR0Z1WTJVaUxDQnVaWGNnZG1Vb2Jpd2dNU2twT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGt4cGJtVlRaV2R0Wlc1MGN5NWpiMjF3ZFhSbFRHbHVaVVJwYzNSaGJtTmxjeWdwT2lCRGIyMXdkWFJoZEdsdmJpQnZibXg1SUhCdmMzTnBZbXhsSUhkcGRHZ2dibTl1TFdsdVpHVjRaV1FnUW5WbVptVnlSMlZ2YldWMGNua3VJaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q24wc0lFSnZJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmliaUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBLU3dnZEdocGN5NXBjMHhwYm1WTWIyOXdJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pNYVc1bFRHOXZjQ0k3Q2lBZ0lDQjlDbjBzSUc1aElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCaWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpVRzlwYm5SelRXRjBaWEpwWVd3Z1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsQnZhVzUwYzAxaGRHVnlhV0ZzSWl3Z2RHaHBjeTVqYjJ4dmNpQTlJRzVsZHlCd1pTZ3hOamMzTnpJeE5Ta3NJSFJvYVhNdWJXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aGJIQm9ZVTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVjMmw2WlNBOUlERXNJSFJvYVhNdWMybDZaVUYwZEdWdWRXRjBhVzl1SUQwZ0lUQXNJSFJvYVhNdVptOW5JRDBnSVRBc0lIUm9hWE11YzJWMFZtRnNkV1Z6S0dVcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVZMjlzYjNJdVkyOXdlU2hsTG1OdmJHOXlLU3dnZEdocGN5NXRZWEFnUFNCbExtMWhjQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJR1V1WVd4d2FHRk5ZWEFzSUhSb2FYTXVjMmw2WlNBOUlHVXVjMmw2WlN3Z2RHaHBjeTV6YVhwbFFYUjBaVzUxWVhScGIyNGdQU0JsTG5OcGVtVkJkSFJsYm5WaGRHbHZiaXdnZEdocGN5NW1iMmNnUFNCbExtWnZaeXdnZEdocGN6c0tJQ0FnSUgwS2ZTd2dXV2dnUFNCdVpYY2dlbVVzSUhwdklEMGdibVYzSUdocExDQm5jaUE5SUc1bGR5QlpkQ3dnWDNJZ1BTQnVaWGNnUVN3Z1ZtOGdQU0JqYkdGemN5QmxlSFJsYm1SeklFcGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dSMlVzSUhRZ1BTQnVaWGNnYm1FcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11YVhOUWIybHVkSE1nUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWxCdmFXNTBjeUlzSUhSb2FYTXVaMlZ2YldWMGNua2dQU0JsTENCMGFHbHpMbTFoZEdWeWFXRnNJRDBnZEN3Z2RHaHBjeTUxY0dSaGRHVk5iM0p3YUZSaGNtZGxkSE1vS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VzSUhRcExDQjBhR2x6TG0xaGRHVnlhV0ZzSUQwZ1FYSnlZWGt1YVhOQmNuSmhlU2hsTG0xaGRHVnlhV0ZzS1NBL0lHVXViV0YwWlhKcFlXd3VjMnhwWTJVb0tTQTZJR1V1YldGMFpYSnBZV3dzSUhSb2FYTXVaMlZ2YldWMGNua2dQU0JsTG1kbGIyMWxkSEo1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY21GNVkyRnpkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1kbGIyMWxkSEo1TENCcElEMGdkR2hwY3k1dFlYUnlhWGhYYjNKc1pDd2djaUE5SUdVdWNHRnlZVzF6TGxCdmFXNTBjeTUwYUhKbGMyaHZiR1FzSUdFZ1BTQnVMbVJ5WVhkU1lXNW5aVHNLSUNBZ0lDQWdJQ0JwWmlBb2JpNWliM1Z1WkdsdVoxTndhR1Z5WlNBOVBUMGdiblZzYkNBbUppQnVMbU52YlhCMWRHVkNiM1Z1WkdsdVoxTndhR1Z5WlNncExDQm5jaTVqYjNCNUtHNHVZbTkxYm1ScGJtZFRjR2hsY21VcExDQm5jaTVoY0hCc2VVMWhkSEpwZURRb2FTa3NJR2R5TG5KaFpHbDFjeUFyUFNCeUxDQmxMbkpoZVM1cGJuUmxjbk5sWTNSelUzQm9aWEpsS0dkeUtTQTlQVDBnSVRFcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCWmFDNWpiM0I1S0drcExtbHVkbVZ5ZENncExDQjZieTVqYjNCNUtHVXVjbUY1S1M1aGNIQnNlVTFoZEhKcGVEUW9XV2dwT3dvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnY2lBdklDZ29kR2hwY3k1elkyRnNaUzU0SUNzZ2RHaHBjeTV6WTJGc1pTNTVJQ3NnZEdocGN5NXpZMkZzWlM1NktTQXZJRE1wTENCaklEMGdieUFxSUc4c0lHd2dQU0J1TG1sdVpHVjRMQ0IxSUQwZ2JpNWhkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVPd29nSUNBZ0lDQWdJR2xtSUNoc0lDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnVFdGMGFDNXRZWGdvTUN3Z1lTNXpkR0Z5ZENrc0lHWWdQU0JOWVhSb0xtMXBiaWhzTG1OdmRXNTBMQ0JoTG5OMFlYSjBJQ3NnWVM1amIzVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJR1FzSUY4Z1BTQm1PeUJ0SUR3Z1h6c2diU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm5JRDBnYkM1blpYUllLRzBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNJdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaDFMQ0JuS1N3Z1dtZ29YM0lzSUdjc0lHTXNJR2tzSUdVc0lIUXNJSFJvYVhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCTllYUm9MbTFoZUNnd0xDQmhMbk4wWVhKMEtTd2daaUE5SUUxaGRHZ3ViV2x1S0hVdVkyOTFiblFzSUdFdWMzUmhjblFnS3lCaExtTnZkVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnRJRDBnWkN3Z1h5QTlJR1k3SUcwZ1BDQmZPeUJ0S3lzcFgzSXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2gxTENCdEtTd2dXbWdvWDNJc0lHMHNJR01zSUdrc0lHVXNJSFFzSUhSb2FYTXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVTF2Y25Cb1ZHRnlaMlYwY3lncElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WjJWdmJXVjBjbmt1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMQ0J1SUQwZ1QySnFaV04wTG10bGVYTW9kQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNHViR1Z1WjNSb0lENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUmJibHN3WFYwN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElDRTlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpJRDBnVzEwc0lIUm9hWE11Ylc5eWNHaFVZWEpuWlhSRWFXTjBhVzl1WVhKNUlEMGdlMzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQmhJRDBnYVM1c1pXNW5kR2c3SUhJZ1BDQmhPeUJ5S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdhVnR5WFM1dVlXMWxJSHg4SUZOMGNtbHVaeWh5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5NXdkWE5vS0RBcExDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFJHbGpkR2x2Ym1GeWVWdHZYU0E5SUhJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDbjA3Q21aMWJtTjBhVzl1SUZwb0tITXhMQ0JsTENCMExDQnVMQ0JwTENCeUxDQmhLU0I3Q2lBZ0lDQnNaWFFnYnlBOUlIcHZMbVJwYzNSaGJtTmxVM0ZVYjFCdmFXNTBLSE14S1RzS0lDQWdJR2xtSUNodklEd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnYm1WM0lFRTdDaUFnSUNBZ0lDQWdlbTh1WTJ4dmMyVnpkRkJ2YVc1MFZHOVFiMmx1ZENoek1Td2dZeWtzSUdNdVlYQndiSGxOWVhSeWFYZzBLRzRwT3dvZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnYVM1eVlYa3ViM0pwWjJsdUxtUnBjM1JoYm1ObFZHOG9ZeWs3Q2lBZ0lDQWdJQ0FnYVdZZ0tHd2dQQ0JwTG01bFlYSWdmSHdnYkNBK0lHa3VabUZ5S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnY2k1d2RYTm9LSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpkR0Z1WTJVNklHd3NDaUFnSUNBZ0lDQWdJQ0FnSUdScGMzUmhibU5sVkc5U1lYazZJRTFoZEdndWMzRnlkQ2h2S1N3S0lDQWdJQ0FnSUNBZ0lDQWdjRzlwYm5RNklHTXNDaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQm1ZV05sT2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNCdlltcGxZM1E2SUdFS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUgwS2ZRcDJZWElnU21nZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZOMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0c0lHa3NJSElzSUdFc0lHOHNJR01zSUd3cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXNJRzRzSUdrc0lISXNJR0VzSUc4c0lHTXNJR3dwTENCMGFHbHpMbWx6Vm1sa1pXOVVaWGgwZFhKbElEMGdJVEFzSUhSb2FYTXViV2x1Um1sc2RHVnlJRDBnWVNBaFBUMGdkbTlwWkNBd0lEOGdZU0E2SUcxMExDQjBhR2x6TG0xaFowWnBiSFJsY2lBOUlISWdJVDA5SUhadmFXUWdNQ0EvSUhJZ09pQnRkQ3dnZEdocGN5NW5aVzVsY21GMFpVMXBjRzFoY0hNZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJSFJvYVhNN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2RTZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FDNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQmxMbkpsY1hWbGMzUldhV1JsYjBaeVlXMWxRMkZzYkdKaFkyc29kU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNKeVpYRjFaWE4wVm1sa1pXOUdjbUZ0WlVOaGJHeGlZV05ySWlCcGJpQmxJQ1ltSUdVdWNtVnhkV1Z6ZEZacFpHVnZSbkpoYldWRFlXeHNZbUZqYXloMUtUc0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWgwYUdsekxtbHRZV2RsS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1cGJXRm5aVHNLSUNBZ0lDQWdJQ0FpY21WeGRXVnpkRlpwWkdWdlJuSmhiV1ZEWVd4c1ltRmpheUlnYVc0Z1pTQTlQVDBnSVRFZ0ppWWdaUzV5WldGa2VWTjBZWFJsSUQ0OUlHVXVTRUZXUlY5RFZWSlNSVTVVWDBSQlZFRWdKaVlnS0hSb2FYTXVibVZsWkhOVmNHUmhkR1VnUFNBaE1DazdDaUFnSUNCOUNuMHNJQ1JvSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJUZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaDdDaUFnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIUUtJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NXBjMFp5WVcxbFluVm1abVZ5VkdWNGRIVnlaU0E5SUNFd0xDQjBhR2x6TG0xaFowWnBiSFJsY2lBOUlIQjBMQ0IwYUdsekxtMXBia1pwYkhSbGNpQTlJSEIwTENCMGFHbHpMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJQ0V4TENCMGFHbHpMbTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNCOUNuMHNJRlZ6SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJUZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzTENCb0xDQjFMQ0JrS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWh1ZFd4c0xDQmhMQ0J2TENCakxDQnNMQ0JvTENCcExDQnlMQ0IxTENCa0tTd2dkR2hwY3k1cGMwTnZiWEJ5WlhOelpXUlVaWGgwZFhKbElEMGdJVEFzSUhSb2FYTXVhVzFoWjJVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHNEtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtMXBjRzFoY0hNZ1BTQmxMQ0IwYUdsekxtWnNhWEJaSUQwZ0lURXNJSFJvYVhNdVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUQwZ0lURTdDaUFnSUNCOUNuMHNJRXRvSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJWY3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0JoS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMExDQnVMQ0J5TENCaEtTd2dkR2hwY3k1cGMwTnZiWEJ5WlhOelpXUkJjbkpoZVZSbGVIUjFjbVVnUFNBaE1Dd2dkR2hwY3k1cGJXRm5aUzVrWlhCMGFDQTlJR2tzSUhSb2FYTXVkM0poY0ZJZ1BTQkpkRHNLSUNBZ0lIMEtmU3dnVVdnZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZWeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0hadmFXUWdNQ3dnWlZzd1hTNTNhV1IwYUN3Z1pWc3dYUzVvWldsbmFIUXNJSFFzSUc0c0lIcHVLU3dnZEdocGN5NXBjME52YlhCeVpYTnpaV1JEZFdKbFZHVjRkSFZ5WlNBOUlDRXdMQ0IwYUdsekxtbHpRM1ZpWlZSbGVIUjFjbVVnUFNBaE1Dd2dkR2hwY3k1cGJXRm5aU0E5SUdVN0NpQWdJQ0I5Q24wc0lHcG9JRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QlRkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2TENCakxDQnNLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqTENCc0tTd2dkR2hwY3k1cGMwTmhiblpoYzFSbGVIUjFjbVVnUFNBaE1Dd2dkR2hwY3k1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3T3dvZ0lDQWdmUXA5TENCYWRDQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSWtOMWNuWmxJaXdnZEdocGN5NWhjbU5NWlc1bmRHaEVhWFpwYzJsdmJuTWdQU0F5TURBN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRYjJsdWRDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVEZFhKMlpUb2dMbWRsZEZCdmFXNTBLQ2tnYm05MElHbHRjR3hsYldWdWRHVmtMaUlwTENCdWRXeHNPd29nSUNBZ2ZRb2dJQ0FnWjJWMFVHOXBiblJCZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtZGxkRlYwYjFSdFlYQndhVzVuS0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEZCdmFXNTBLRzRzSUhRcE93b2dJQ0FnZlFvZ0lDQWdaMlYwVUc5cGJuUnpLR1VnUFNBMUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHc5SUdVN0lHNHJLeWwwTG5CMWMyZ29kR2hwY3k1blpYUlFiMmx1ZENodUlDOGdaU2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVM0JoWTJWa1VHOXBiblJ6S0dVZ1BTQTFLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3OUlHVTdJRzRyS3lsMExuQjFjMmdvZEdocGN5NW5aWFJRYjJsdWRFRjBLRzRnTHlCbEtTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUTdDaUFnSUNCOUNpQWdJQ0JuWlhSTVpXNW5kR2dvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbWRsZEV4bGJtZDBhSE1vS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlZ0bExteGxibWQwYUNBdElERmRPd29nSUNBZ2ZRb2dJQ0FnWjJWMFRHVnVaM1JvY3lobElEMGdkR2hwY3k1aGNtTk1aVzVuZEdoRWFYWnBjMmx2Ym5NcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWpZV05vWlVGeVkweGxibWQwYUhNZ0ppWWdkR2hwY3k1allXTm9aVUZ5WTB4bGJtZDBhSE11YkdWdVozUm9JRDA5UFNCbElDc2dNU0FtSmlBaGRHaHBjeTV1WldWa2MxVndaR0YwWlNrZ2NtVjBkWEp1SUhSb2FYTXVZMkZqYUdWQmNtTk1aVzVuZEdoek93b2dJQ0FnSUNBZ0lIUm9hWE11Ym1WbFpITlZjR1JoZEdVZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRnRkTENCdUxDQnBJRDBnZEdocGN5NW5aWFJRYjJsdWRDZ3dLU3dnY2lBOUlEQTdDaUFnSUNBZ0lDQWdkQzV3ZFhOb0tEQXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURFN0lHRWdQRDBnWlRzZ1lTc3JLVzRnUFNCMGFHbHpMbWRsZEZCdmFXNTBLR0VnTHlCbEtTd2djaUFyUFNCdUxtUnBjM1JoYm1ObFZHOG9hU2tzSUhRdWNIVnphQ2h5S1N3Z2FTQTlJRzQ3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyRmphR1ZCY21OTVpXNW5kR2h6SUQwZ2RDd2dkRHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVUZ5WTB4bGJtZDBhSE1vS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwYUdsekxtZGxkRXhsYm1kMGFITW9LVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGVjBiMVJ0WVhCd2FXNW5LR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WjJWMFRHVnVaM1JvY3lncExDQnBJRDBnTUN3Z2NpQTlJRzR1YkdWdVozUm9MQ0JoT3dvZ0lDQWdJQ0FnSUhRZ1B5QmhJRDBnZENBNklHRWdQU0JsSUNvZ2JsdHlJQzBnTVYwN0NpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNBd0xDQmpJRDBnY2lBdElERXNJR3c3Q2lBZ0lDQWdJQ0FnWm05eUtEc2dieUE4UFNCak95bHBaaUFvYVNBOUlFMWhkR2d1Wm14dmIzSW9ieUFySUNoaklDMGdieWtnTHlBeUtTd2diQ0E5SUc1YmFWMGdMU0JoTENCc0lEd2dNQ2tnYnlBOUlHa2dLeUF4T3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0d3Z1BpQXdLU0JqSUQwZ2FTQXRJREU3Q2lBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdNZ1BTQnBPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tHa2dQU0JqTENCdVcybGRJRDA5UFNCaEtTQnlaWFIxY200Z2FTQXZJQ2h5SUMwZ01TazdDaUFnSUNBZ0lDQWdiR1YwSUdnZ1BTQnVXMmxkTENCa0lEMGdibHRwSUNzZ01WMGdMU0JvTENCbUlEMGdLR0VnTFNCb0tTQXZJR1E3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ2hwSUNzZ1ppa2dMeUFvY2lBdElERXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZHRnVaMlZ1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0JsSUMwZ01XVXROQ3dnY2lBOUlHVWdLeUF4WlMwME93b2dJQ0FnSUNBZ0lHa2dQQ0F3SUNZbUlDaHBJRDBnTUNrc0lISWdQaUF4SUNZbUlDaHlJRDBnTVNrN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMGFHbHpMbWRsZEZCdmFXNTBLR2twTENCdklEMGdkR2hwY3k1blpYUlFiMmx1ZENoeUtTd2dZeUE5SUhRZ2ZId2dLR0V1YVhOV1pXTjBiM0l5SUQ4Z2JtVjNJRm9nT2lCdVpYY2dRU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR011WTI5d2VTaHZLUzV6ZFdJb1lTa3VibTl5YldGc2FYcGxLQ2tzSUdNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJVWVc1blpXNTBRWFFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1blpYUlZkRzlVYldGd2NHbHVaeWhsS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJVWVc1blpXNTBLRzRzSUhRcE93b2dJQ0FnZlFvZ0lDQWdZMjl0Y0hWMFpVWnlaVzVsZEVaeVlXMWxjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQnVaWGNnUVN3Z2FTQTlJRnRkTENCeUlEMGdXMTBzSUdFZ1BTQmJYU3dnYnlBOUlHNWxkeUJCTENCaklEMGdibVYzSUhwbE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ppQTlJREE3SUdZZ1BEMGdaVHNnWmlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMGdQU0JtSUM4Z1pUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVZ0bVhTQTlJSFJvYVhNdVoyVjBWR0Z1WjJWdWRFRjBLRzBzSUc1bGR5QkJLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY2xzd1hTQTlJRzVsZHlCQkxDQmhXekJkSUQwZ2JtVjNJRUU3Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0JPZFcxaVpYSXVUVUZZWDFaQlRGVkZMQ0JvSUQwZ1RXRjBhQzVoWW5Nb2FWc3dYUzU0S1N3Z2RTQTlJRTFoZEdndVlXSnpLR2xiTUYwdWVTa3NJR1FnUFNCTllYUm9MbUZpY3locFd6QmRMbm9wT3dvZ0lDQWdJQ0FnSUdnZ1BEMGdiQ0FtSmlBb2JDQTlJR2dzSUc0dWMyVjBLREVzSURBc0lEQXBLU3dnZFNBOFBTQnNJQ1ltSUNoc0lEMGdkU3dnYmk1elpYUW9NQ3dnTVN3Z01Da3BMQ0JrSUR3OUlHd2dKaVlnYmk1elpYUW9NQ3dnTUN3Z01Ta3NJRzh1WTNKdmMzTldaV04wYjNKektHbGJNRjBzSUc0cExtNXZjbTFoYkdsNlpTZ3BMQ0J5V3pCZExtTnliM056Vm1WamRHOXljeWhwV3pCZExDQnZLU3dnWVZzd1hTNWpjbTl6YzFabFkzUnZjbk1vYVZzd1hTd2djbHN3WFNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbUlEMGdNVHNnWmlBOFBTQmxPeUJtS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NsdG1YU0E5SUhKYlppQXRJREZkTG1Oc2IyNWxLQ2tzSUdGYlpsMGdQU0JoVzJZZ0xTQXhYUzVqYkc5dVpTZ3BMQ0J2TG1OeWIzTnpWbVZqZEc5eWN5aHBXMllnTFNBeFhTd2dhVnRtWFNrc0lHOHViR1Z1WjNSb0tDa2dQaUJPZFcxaVpYSXVSVkJUU1V4UFRpa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieTV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRJRDBnVFdGMGFDNWhZMjl6S0dOMEtHbGJaaUF0SURGZExtUnZkQ2hwVzJaZEtTd2dMVEVzSURFcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmJabDB1WVhCd2JIbE5ZWFJ5YVhnMEtHTXViV0ZyWlZKdmRHRjBhVzl1UVhocGN5aHZMQ0J0S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1lWdG1YUzVqY205emMxWmxZM1J2Y25Nb2FWdG1YU3dnY2x0bVhTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoMElEMDlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJRTFoZEdndVlXTnZjeWhqZENoeVd6QmRMbVJ2ZENoeVcyVmRLU3dnTFRFc0lERXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ppQXZQU0JsTENCcFd6QmRMbVJ2ZENodkxtTnliM056Vm1WamRHOXljeWh5V3pCZExDQnlXMlZkS1NrZ1BpQXdJQ1ltSUNobUlEMGdMV1lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHMGdQU0F4T3lCdElEdzlJR1U3SUcwckt5bHlXMjFkTG1Gd2NHeDVUV0YwY21sNE5DaGpMbTFoYTJWU2IzUmhkR2x2YmtGNGFYTW9hVnR0WFN3Z1ppQXFJRzBwS1N3Z1lWdHRYUzVqY205emMxWmxZM1J2Y25Nb2FWdHRYU3dnY2x0dFhTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSaGJtZGxiblJ6T2lCcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHpPaUJ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQmlhVzV2Y20xaGJITTZJR0VLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ1kyeHZibVVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBhR2x6TG1OdmJuTjBjblZqZEc5eUtDa3VZMjl3ZVNoMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnlZMHhsYm1kMGFFUnBkbWx6YVc5dWN5QTlJR1V1WVhKalRHVnVaM1JvUkdsMmFYTnBiMjV6TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnRaWFJoWkdGMFlUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5YzJsdmJqb2dOQzQyTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJa04xY25abElpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxibVZ5WVhSdmNqb2dJa04xY25abExuUnZTbE5QVGlJS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1WVhKalRHVnVaM1JvUkdsMmFYTnBiMjV6SUQwZ2RHaHBjeTVoY21OTVpXNW5kR2hFYVhacGMybHZibk1zSUdVdWRIbHdaU0E5SUhSb2FYTXVkSGx3WlN3Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhjbU5NWlc1bmRHaEVhWFpwYzJsdmJuTWdQU0JsTG1GeVkweGxibWQwYUVScGRtbHphVzl1Y3l3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnUkhNZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZwMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F3TENCMElEMGdNQ3dnYmlBOUlERXNJR2tnUFNBeExDQnlJRDBnTUN3Z1lTQTlJRTFoZEdndVVFa2dLaUF5TENCdklEMGdJVEVzSUdNZ1BTQXdLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpSV3hzYVhCelpVTjFjblpsSUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKRmJHeHBjSE5sUTNWeWRtVWlMQ0IwYUdsekxtRllJRDBnWlN3Z2RHaHBjeTVoV1NBOUlIUXNJSFJvYVhNdWVGSmhaR2wxY3lBOUlHNHNJSFJvYVhNdWVWSmhaR2wxY3lBOUlHa3NJSFJvYVhNdVlWTjBZWEowUVc1bmJHVWdQU0J5TENCMGFHbHpMbUZGYm1SQmJtZHNaU0E5SUdFc0lIUm9hWE11WVVOc2IyTnJkMmx6WlNBOUlHOHNJSFJvYVhNdVlWSnZkR0YwYVc5dUlEMGdZenNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnZhVzUwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFFnZkh3Z2JtVjNJRm9zSUdrZ1BTQk5ZWFJvTGxCSklDb2dNaXdnY2lBOUlIUm9hWE11WVVWdVpFRnVaMnhsSUMwZ2RHaHBjeTVoVTNSaGNuUkJibWRzWlN3Z1lTQTlJRTFoZEdndVlXSnpLSElwSUR3Z1RuVnRZbVZ5TGtWUVUwbE1UMDQ3Q2lBZ0lDQWdJQ0FnWm05eUtEc2djaUE4SURBN0tYSWdLejBnYVRzS0lDQWdJQ0FnSUNCbWIzSW9PeUJ5SUQ0Z2FUc3BjaUF0UFNCcE93b2dJQ0FnSUNBZ0lISWdQQ0JPZFcxaVpYSXVSVkJUU1V4UFRpQW1KaUFvWVNBL0lISWdQU0F3SURvZ2NpQTlJR2twTENCMGFHbHpMbUZEYkc5amEzZHBjMlVnUFQwOUlDRXdJQ1ltSUNGaElDWW1JQ2h5SUQwOVBTQnBJRDhnY2lBOUlDMXBJRG9nY2lBOUlISWdMU0JwS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUhSb2FYTXVZVk4wWVhKMFFXNW5iR1VnS3lCbElDb2djaXdnWXlBOUlIUm9hWE11WVZnZ0t5QjBhR2x6TG5oU1lXUnBkWE1nS2lCTllYUm9MbU52Y3lodktTd2diQ0E5SUhSb2FYTXVZVmtnS3lCMGFHbHpMbmxTWVdScGRYTWdLaUJOWVhSb0xuTnBiaWh2S1RzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1aFVtOTBZWFJwYjI0Z0lUMDlJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQk5ZWFJvTG1OdmN5aDBhR2x6TG1GU2IzUmhkR2x2Ymlrc0lIVWdQU0JOWVhSb0xuTnBiaWgwYUdsekxtRlNiM1JoZEdsdmJpa3NJR1FnUFNCaklDMGdkR2hwY3k1aFdDd2daaUE5SUd3Z0xTQjBhR2x6TG1GWk93b2dJQ0FnSUNBZ0lDQWdJQ0JqSUQwZ1pDQXFJR2dnTFNCbUlDb2dkU0FySUhSb2FYTXVZVmdzSUd3Z1BTQmtJQ29nZFNBcklHWWdLaUJvSUNzZ2RHaHBjeTVoV1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWMyVjBLR01zSUd3cE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVZVmdnUFNCbExtRllMQ0IwYUdsekxtRlpJRDBnWlM1aFdTd2dkR2hwY3k1NFVtRmthWFZ6SUQwZ1pTNTRVbUZrYVhWekxDQjBhR2x6TG5sU1lXUnBkWE1nUFNCbExubFNZV1JwZFhNc0lIUm9hWE11WVZOMFlYSjBRVzVuYkdVZ1BTQmxMbUZUZEdGeWRFRnVaMnhsTENCMGFHbHpMbUZGYm1SQmJtZHNaU0E5SUdVdVlVVnVaRUZ1WjJ4bExDQjBhR2x6TG1GRGJHOWphM2RwYzJVZ1BTQmxMbUZEYkc5amEzZHBjMlVzSUhSb2FYTXVZVkp2ZEdGMGFXOXVJRDBnWlM1aFVtOTBZWFJwYjI0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCemRYQmxjaTUwYjBwVFQwNG9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVoV0NBOUlIUm9hWE11WVZnc0lHVXVZVmtnUFNCMGFHbHpMbUZaTENCbExuaFNZV1JwZFhNZ1BTQjBhR2x6TG5oU1lXUnBkWE1zSUdVdWVWSmhaR2wxY3lBOUlIUm9hWE11ZVZKaFpHbDFjeXdnWlM1aFUzUmhjblJCYm1kc1pTQTlJSFJvYVhNdVlWTjBZWEowUVc1bmJHVXNJR1V1WVVWdVpFRnVaMnhsSUQwZ2RHaHBjeTVoUlc1a1FXNW5iR1VzSUdVdVlVTnNiMk5yZDJselpTQTlJSFJvYVhNdVlVTnNiMk5yZDJselpTd2daUzVoVW05MFlYUnBiMjRnUFNCMGFHbHpMbUZTYjNSaGRHbHZiaXdnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVpuSnZiVXBUVDA0b1pTa3NJSFJvYVhNdVlWZ2dQU0JsTG1GWUxDQjBhR2x6TG1GWklEMGdaUzVoV1N3Z2RHaHBjeTU0VW1Ga2FYVnpJRDBnWlM1NFVtRmthWFZ6TENCMGFHbHpMbmxTWVdScGRYTWdQU0JsTG5sU1lXUnBkWE1zSUhSb2FYTXVZVk4wWVhKMFFXNW5iR1VnUFNCbExtRlRkR0Z5ZEVGdVoyeGxMQ0IwYUdsekxtRkZibVJCYm1kc1pTQTlJR1V1WVVWdVpFRnVaMnhsTENCMGFHbHpMbUZEYkc5amEzZHBjMlVnUFNCbExtRkRiRzlqYTNkcGMyVXNJSFJvYVhNdVlWSnZkR0YwYVc5dUlEMGdaUzVoVW05MFlYUnBiMjRzSUhSb2FYTTdDaUFnSUNCOUNuMHNJR3R2SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJFY3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0JoS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMExDQnVMQ0J1TENCcExDQnlMQ0JoS1N3Z2RHaHBjeTVwYzBGeVkwTjFjblpsSUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKQmNtTkRkWEoyWlNJN0NpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlFcGpLQ2tnZXdvZ0lDQWdiR1YwSUhNeElEMGdNQ3dnWlNBOUlEQXNJSFFnUFNBd0xDQnVJRDBnTURzS0lDQWdJR1oxYm1OMGFXOXVJR2tvY2l3Z1lTd2dieXdnWXlrZ2V3b2dJQ0FnSUNBZ0lITXhJRDBnY2l3Z1pTQTlJRzhzSUhRZ1BTQXRNeUFxSUhJZ0t5QXpJQ29nWVNBdElESWdLaUJ2SUMwZ1l5d2diaUE5SURJZ0tpQnlJQzBnTWlBcUlHRWdLeUJ2SUNzZ1l6c0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdhVzVwZEVOaGRHMTFiR3hTYjIwNklHWjFibU4wYVc5dUtISXNJR0VzSUc4c0lHTXNJR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhU2hoTENCdkxDQnNJQ29nS0c4Z0xTQnlLU3dnYkNBcUlDaGpJQzBnWVNrcE93b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdhVzVwZEU1dmJuVnVhV1p2Y20xRFlYUnRkV3hzVW05dE9pQm1kVzVqZEdsdmJpaHlMQ0JoTENCdkxDQmpMQ0JzTENCb0xDQjFLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ0tHRWdMU0J5S1NBdklHd2dMU0FvYnlBdElISXBJQzhnS0d3Z0t5Qm9LU0FySUNodklDMGdZU2tnTHlCb0xDQm1JRDBnS0c4Z0xTQmhLU0F2SUdnZ0xTQW9ZeUF0SUdFcElDOGdLR2dnS3lCMUtTQXJJQ2hqSUMwZ2J5a2dMeUIxT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtJQ285SUdnc0lHWWdLajBnYUN3Z2FTaGhMQ0J2TENCa0xDQm1LVHNLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdOaGJHTTZJR1oxYm1OMGFXOXVLSElwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdFZ1BTQnlJQ29nY2l3Z2J5QTlJR0VnS2lCeU93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjekVnS3lCbElDb2djaUFySUhRZ0tpQmhJQ3NnYmlBcUlHODdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZUc0tmUXAyWVhJZ2VISWdQU0J1WlhjZ1FTd2dhVzhnUFNCdVpYY2dTbU1zSUhOdklEMGdibVYzSUVwakxDQnlieUE5SUc1bGR5QktZeXdnU0c4Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZwMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0JiWFN3Z2RDQTlJQ0V4TENCdUlEMGdJbU5sYm5SeWFYQmxkR0ZzSWl3Z2FTQTlJQzQxS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6UTJGMGJYVnNiRkp2YlVOMWNuWmxNeUE5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpUTJGMGJYVnNiRkp2YlVOMWNuWmxNeUlzSUhSb2FYTXVjRzlwYm5SeklEMGdaU3dnZEdocGN5NWpiRzl6WldRZ1BTQjBMQ0IwYUdsekxtTjFjblpsVkhsd1pTQTlJRzRzSUhSb2FYTXVkR1Z1YzJsdmJpQTlJR2s3Q2lBZ0lDQjlDaUFnSUNCblpYUlFiMmx1ZENobExDQjBJRDBnYm1WM0lFRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFFzSUdrZ1BTQjBhR2x6TG5CdmFXNTBjeXdnY2lBOUlHa3ViR1Z1WjNSb0xDQmhJRDBnS0hJZ0xTQW9kR2hwY3k1amJHOXpaV1FnUHlBd0lEb2dNU2twSUNvZ1pTd2dieUE5SUUxaGRHZ3VabXh2YjNJb1lTa3NJR01nUFNCaElDMGdienNLSUNBZ0lDQWdJQ0IwYUdsekxtTnNiM05sWkNBL0lHOGdLejBnYnlBK0lEQWdQeUF3SURvZ0tFMWhkR2d1Wm14dmIzSW9UV0YwYUM1aFluTW9ieWtnTHlCeUtTQXJJREVwSUNvZ2NpQTZJR01nUFQwOUlEQWdKaVlnYnlBOVBUMGdjaUF0SURFZ0ppWWdLRzhnUFNCeUlDMGdNaXdnWXlBOUlERXBPd29nSUNBZ0lDQWdJR3hsZENCc0xDQm9Pd29nSUNBZ0lDQWdJSFJvYVhNdVkyeHZjMlZrSUh4OElHOGdQaUF3SUQ4Z2JDQTlJR2xiS0c4Z0xTQXhLU0FsSUhKZElEb2dLSGh5TG5OMVlsWmxZM1J2Y25Nb2FWc3dYU3dnYVZzeFhTa3VZV1JrS0dsYk1GMHBMQ0JzSUQwZ2VISXBPd29nSUNBZ0lDQWdJR3hsZENCMUlEMGdhVnR2SUNVZ2NsMHNJR1FnUFNCcFd5aHZJQ3NnTVNrZ0pTQnlYVHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqYkc5elpXUWdmSHdnYnlBcklESWdQQ0J5SUQ4Z2FDQTlJR2xiS0c4Z0t5QXlLU0FsSUhKZElEb2dLSGh5TG5OMVlsWmxZM1J2Y25Nb2FWdHlJQzBnTVYwc0lHbGJjaUF0SURKZEtTNWhaR1FvYVZ0eUlDMGdNVjBwTENCb0lEMGdlSElwTENCMGFHbHpMbU4xY25abFZIbHdaU0E5UFQwZ0ltTmxiblJ5YVhCbGRHRnNJaUI4ZkNCMGFHbHpMbU4xY25abFZIbHdaU0E5UFQwZ0ltTm9iM0prWVd3aUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnZEdocGN5NWpkWEoyWlZSNWNHVWdQVDA5SUNKamFHOXlaR0ZzSWlBL0lDNDFJRG9nTGpJMUxDQnRJRDBnVFdGMGFDNXdiM2NvYkM1a2FYTjBZVzVqWlZSdlUzRjFZWEpsWkNoMUtTd2daaWtzSUY4Z1BTQk5ZWFJvTG5CdmR5aDFMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLR1FwTENCbUtTd2daeUE5SUUxaGRHZ3VjRzkzS0dRdVpHbHpkR0Z1WTJWVWIxTnhkV0Z5WldRb2FDa3NJR1lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmZJRHdnTVdVdE5DQW1KaUFvWHlBOUlERXBMQ0J0SUR3Z01XVXROQ0FtSmlBb2JTQTlJRjhwTENCbklEd2dNV1V0TkNBbUppQW9aeUE5SUY4cExDQnBieTVwYm1sMFRtOXVkVzVwWm05eWJVTmhkRzExYkd4U2IyMG9iQzU0TENCMUxuZ3NJR1F1ZUN3Z2FDNTRMQ0J0TENCZkxDQm5LU3dnYzI4dWFXNXBkRTV2Ym5WdWFXWnZjbTFEWVhSdGRXeHNVbTl0S0d3dWVTd2dkUzU1TENCa0xua3NJR2d1ZVN3Z2JTd2dYeXdnWnlrc0lISnZMbWx1YVhST2IyNTFibWxtYjNKdFEyRjBiWFZzYkZKdmJTaHNMbm9zSUhVdWVpd2daQzU2TENCb0xub3NJRzBzSUY4c0lHY3BPd29nSUNBZ0lDQWdJSDBnWld4elpTQjBhR2x6TG1OMWNuWmxWSGx3WlNBOVBUMGdJbU5oZEcxMWJHeHliMjBpSUNZbUlDaHBieTVwYm1sMFEyRjBiWFZzYkZKdmJTaHNMbmdzSUhVdWVDd2daQzU0TENCb0xuZ3NJSFJvYVhNdWRHVnVjMmx2Ymlrc0lITnZMbWx1YVhSRFlYUnRkV3hzVW05dEtHd3VlU3dnZFM1NUxDQmtMbmtzSUdndWVTd2dkR2hwY3k1MFpXNXphVzl1S1N3Z2NtOHVhVzVwZEVOaGRHMTFiR3hTYjIwb2JDNTZMQ0IxTG5vc0lHUXVlaXdnYUM1NkxDQjBhR2x6TG5SbGJuTnBiMjRwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmk1elpYUW9hVzh1WTJGc1l5aGpLU3dnYzI4dVkyRnNZeWhqS1N3Z2NtOHVZMkZzWXloaktTa3NJRzQ3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuQnZhVzUwY3lBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0JsTG5CdmFXNTBjeTVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHVXVjRzlwYm5SelczUmRPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2YVc1MGN5NXdkWE5vS0drdVkyeHZibVVvS1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5zYjNObFpDQTlJR1V1WTJ4dmMyVmtMQ0IwYUdsekxtTjFjblpsVkhsd1pTQTlJR1V1WTNWeWRtVlVlWEJsTENCMGFHbHpMblJsYm5OcGIyNGdQU0JsTG5SbGJuTnBiMjRzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b0tUc0tJQ0FnSUNBZ0lDQmxMbkJ2YVc1MGN5QTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCMGFHbHpMbkJ2YVc1MGN5NXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVjRzlwYm5SelczUmRPd29nSUNBZ0lDQWdJQ0FnSUNCbExuQnZhVzUwY3k1d2RYTm9LR2t1ZEc5QmNuSmhlU2dwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVkyeHZjMlZrSUQwZ2RHaHBjeTVqYkc5elpXUXNJR1V1WTNWeWRtVlVlWEJsSUQwZ2RHaHBjeTVqZFhKMlpWUjVjR1VzSUdVdWRHVnVjMmx2YmlBOUlIUm9hWE11ZEdWdWMybHZiaXdnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpNW1jbTl0U2xOUFRpaGxLU3dnZEdocGN5NXdiMmx1ZEhNZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnWlM1d2IybHVkSE11YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbkJ2YVc1MGMxdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YjJsdWRITXVjSFZ6YUNodVpYY2dRU2dwTG1aeWIyMUJjbkpoZVNocEtTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Oc2IzTmxaQ0E5SUdVdVkyeHZjMlZrTENCMGFHbHpMbU4xY25abFZIbHdaU0E5SUdVdVkzVnlkbVZVZVhCbExDQjBhR2x6TG5SbGJuTnBiMjRnUFNCbExuUmxibk5wYjI0c0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q21aMWJtTjBhVzl1SUdWMUtITXhMQ0JsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0JzWlhRZ2NpQTlJQ2h1SUMwZ1pTa2dLaUF1TlN3Z1lTQTlJQ2hwSUMwZ2RDa2dLaUF1TlN3Z2J5QTlJSE14SUNvZ2N6RXNJR01nUFNCek1TQXFJRzg3Q2lBZ0lDQnlaWFIxY200Z0tESWdLaUIwSUMwZ01pQXFJRzRnS3lCeUlDc2dZU2tnS2lCaklDc2dLQzB6SUNvZ2RDQXJJRE1nS2lCdUlDMGdNaUFxSUhJZ0xTQmhLU0FxSUc4Z0t5QnlJQ29nY3pFZ0t5QjBPd3A5Q21aMWJtTjBhVzl1SUZrd0tITXhMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2RDQTlJREVnTFNCek1Uc0tJQ0FnSUhKbGRIVnliaUIwSUNvZ2RDQXFJR1U3Q24wS1puVnVZM1JwYjI0Z1dqQW9jekVzSUdVcElIc0tJQ0FnSUhKbGRIVnliaUF5SUNvZ0tERWdMU0J6TVNrZ0tpQnpNU0FxSUdVN0NuMEtablZ1WTNScGIyNGdTakFvY3pFc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCek1TQXFJSE14SUNvZ1pUc0tmUXBtZFc1amRHbHZiaUJpY3loek1Td2daU3dnZEN3Z2Jpa2dld29nSUNBZ2NtVjBkWEp1SUZrd0tITXhMQ0JsS1NBcklGb3dLSE14TENCMEtTQXJJRW93S0hNeExDQnVLVHNLZlFwbWRXNWpkR2x2YmlBa01DaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0F4SUMwZ2N6RTdDaUFnSUNCeVpYUjFjbTRnZENBcUlIUWdLaUIwSUNvZ1pUc0tmUXBtZFc1amRHbHZiaUJMTUNoek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQXhJQzBnY3pFN0NpQWdJQ0J5WlhSMWNtNGdNeUFxSUhRZ0tpQjBJQ29nY3pFZ0tpQmxPd3A5Q21aMWJtTjBhVzl1SUZFd0tITXhMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdNeUFxSUNneElDMGdjekVwSUNvZ2N6RWdLaUJ6TVNBcUlHVTdDbjBLWm5WdVkzUnBiMjRnYWpBb2N6RXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQnpNU0FxSUhNeElDb2djekVnS2lCbE93cDlDbVoxYm1OMGFXOXVJRVZ6S0hNeExDQmxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQnlaWFIxY200Z0pEQW9jekVzSUdVcElDc2dTekFvY3pFc0lIUXBJQ3NnVVRBb2N6RXNJRzRwSUNzZ2FqQW9jekVzSUdrcE93cDlDblpoY2lCcFlTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1duUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5QmFMQ0IwSUQwZ2JtVjNJRm9zSUc0Z1BTQnVaWGNnV2l3Z2FTQTlJRzVsZHlCYUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selEzVmlhV05DWlhwcFpYSkRkWEoyWlNBOUlDRXdMQ0IwYUdsekxuUjVjR1VnUFNBaVEzVmlhV05DWlhwcFpYSkRkWEoyWlNJc0lIUm9hWE11ZGpBZ1BTQmxMQ0IwYUdsekxuWXhJRDBnZEN3Z2RHaHBjeTUyTWlBOUlHNHNJSFJvYVhNdWRqTWdQU0JwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVRzlwYm5Rb1pTd2dkQ0E5SUc1bGR5QmFLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwTENCcElEMGdkR2hwY3k1Mk1Dd2djaUE5SUhSb2FYTXVkakVzSUdFZ1BTQjBhR2x6TG5ZeUxDQnZJRDBnZEdocGN5NTJNenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTV6WlhRb1JYTW9aU3dnYVM1NExDQnlMbmdzSUdFdWVDd2dieTU0S1N3Z1JYTW9aU3dnYVM1NUxDQnlMbmtzSUdFdWVTd2dieTU1S1Nrc0lHNDdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTUyTUM1amIzQjVLR1V1ZGpBcExDQjBhR2x6TG5ZeExtTnZjSGtvWlM1Mk1Ta3NJSFJvYVhNdWRqSXVZMjl3ZVNobExuWXlLU3dnZEdocGN5NTJNeTVqYjNCNUtHVXVkak1wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnYzNWd1pYSXVkRzlLVTA5T0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVkakFnUFNCMGFHbHpMbll3TG5SdlFYSnlZWGtvS1N3Z1pTNTJNU0E5SUhSb2FYTXVkakV1ZEc5QmNuSmhlU2dwTENCbExuWXlJRDBnZEdocGN5NTJNaTUwYjBGeWNtRjVLQ2tzSUdVdWRqTWdQU0IwYUdsekxuWXpMblJ2UVhKeVlYa29LU3dnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVpuSnZiVXBUVDA0b1pTa3NJSFJvYVhNdWRqQXVabkp2YlVGeWNtRjVLR1V1ZGpBcExDQjBhR2x6TG5ZeExtWnliMjFCY25KaGVTaGxMbll4S1N3Z2RHaHBjeTUyTWk1bWNtOXRRWEp5WVhrb1pTNTJNaWtzSUhSb2FYTXVkak11Wm5KdmJVRnljbUY1S0dVdWRqTXBMQ0IwYUdsek93b2dJQ0FnZlFwOUxDQkhieUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdXblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJCTENCMElEMGdibVYzSUVFc0lHNGdQU0J1WlhjZ1FTd2dhU0E5SUc1bGR5QkJLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpRM1ZpYVdOQ1pYcHBaWEpEZFhKMlpUTWdQU0FoTUN3Z2RHaHBjeTUwZVhCbElEMGdJa04xWW1salFtVjZhV1Z5UTNWeWRtVXpJaXdnZEdocGN5NTJNQ0E5SUdVc0lIUm9hWE11ZGpFZ1BTQjBMQ0IwYUdsekxuWXlJRDBnYml3Z2RHaHBjeTUyTXlBOUlHazdDaUFnSUNCOUNpQWdJQ0JuWlhSUWIybHVkQ2hsTENCMElEMGdibVYzSUVFcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUXNJR2tnUFNCMGFHbHpMbll3TENCeUlEMGdkR2hwY3k1Mk1Td2dZU0E5SUhSb2FYTXVkaklzSUc4Z1BTQjBhR2x6TG5Zek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdUxuTmxkQ2hGY3lobExDQnBMbmdzSUhJdWVDd2dZUzU0TENCdkxuZ3BMQ0JGY3lobExDQnBMbmtzSUhJdWVTd2dZUzU1TENCdkxua3BMQ0JGY3lobExDQnBMbm9zSUhJdWVpd2dZUzU2TENCdkxub3BLU3dnYmpzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuWXdMbU52Y0hrb1pTNTJNQ2tzSUhSb2FYTXVkakV1WTI5d2VTaGxMbll4S1N3Z2RHaHBjeTUyTWk1amIzQjVLR1V1ZGpJcExDQjBhR2x6TG5ZekxtTnZjSGtvWlM1Mk15a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQnpkWEJsY2k1MGIwcFRUMDRvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1Mk1DQTlJSFJvYVhNdWRqQXVkRzlCY25KaGVTZ3BMQ0JsTG5ZeElEMGdkR2hwY3k1Mk1TNTBiMEZ5Y21GNUtDa3NJR1V1ZGpJZ1BTQjBhR2x6TG5ZeUxuUnZRWEp5WVhrb0tTd2daUzUyTXlBOUlIUm9hWE11ZGpNdWRHOUJjbkpoZVNncExDQmxPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVtY205dFNsTlBUaWhsS1N3Z2RHaHBjeTUyTUM1bWNtOXRRWEp5WVhrb1pTNTJNQ2tzSUhSb2FYTXVkakV1Wm5KdmJVRnljbUY1S0dVdWRqRXBMQ0IwYUdsekxuWXlMbVp5YjIxQmNuSmhlU2hsTG5ZeUtTd2dkR2hwY3k1Mk15NW1jbTl0UVhKeVlYa29aUzUyTXlrc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUhOaElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCYWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lGb3NJSFFnUFNCdVpYY2dXaWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMHhwYm1WRGRYSjJaU0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVEdsdVpVTjFjblpsSWl3Z2RHaHBjeTUyTVNBOUlHVXNJSFJvYVhNdWRqSWdQU0IwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVRzlwYm5Rb1pTd2dkQ0E5SUc1bGR5QmFLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUQwOVBTQXhJRDhnYmk1amIzQjVLSFJvYVhNdWRqSXBJRG9nS0c0dVkyOXdlU2gwYUdsekxuWXlLUzV6ZFdJb2RHaHBjeTUyTVNrc0lHNHViWFZzZEdsd2JIbFRZMkZzWVhJb1pTa3VZV1JrS0hSb2FYTXVkakVwS1N3Z2Jqc0tJQ0FnSUgwS0lDQWdJR2RsZEZCdmFXNTBRWFFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGQnZhVzUwS0dVc0lIUXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZHRnVaMlZ1ZENobExDQjBJRDBnYm1WM0lGb3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQzV6ZFdKV1pXTjBiM0p6S0hSb2FYTXVkaklzSUhSb2FYTXVkakVwTG01dmNtMWhiR2w2WlNncE93b2dJQ0FnZlFvZ0lDQWdaMlYwVkdGdVoyVnVkRUYwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUlVZVzVuWlc1MEtHVXNJSFFwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWRqRXVZMjl3ZVNobExuWXhLU3dnZEdocGN5NTJNaTVqYjNCNUtHVXVkaklwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnYzNWd1pYSXVkRzlLVTA5T0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVkakVnUFNCMGFHbHpMbll4TG5SdlFYSnlZWGtvS1N3Z1pTNTJNaUE5SUhSb2FYTXVkakl1ZEc5QmNuSmhlU2dwTENCbE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNW1jbTl0U2xOUFRpaGxLU3dnZEdocGN5NTJNUzVtY205dFFYSnlZWGtvWlM1Mk1Ta3NJSFJvYVhNdWRqSXVabkp2YlVGeWNtRjVLR1V1ZGpJcExDQjBhR2x6T3dvZ0lDQWdmUXA5TENCWGJ5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1duUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5QkJMQ0IwSUQwZ2JtVjNJRUVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5NYVc1bFEzVnlkbVV6SUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKTWFXNWxRM1Z5ZG1Veklpd2dkR2hwY3k1Mk1TQTlJR1VzSUhSb2FYTXVkaklnUFNCME93b2dJQ0FnZlFvZ0lDQWdaMlYwVUc5cGJuUW9aU3dnZENBOUlHNWxkeUJCS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCME93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbElEMDlQU0F4SUQ4Z2JpNWpiM0I1S0hSb2FYTXVkaklwSURvZ0tHNHVZMjl3ZVNoMGFHbHpMbll5S1M1emRXSW9kR2hwY3k1Mk1Ta3NJRzR1YlhWc2RHbHdiSGxUWTJGc1lYSW9aU2t1WVdSa0tIUm9hWE11ZGpFcEtTd2dianNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnZhVzUwUVhRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRkJ2YVc1MEtHVXNJSFFwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBWR0Z1WjJWdWRDaGxMQ0IwSUQwZ2JtVjNJRUVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1emRXSldaV04wYjNKektIUm9hWE11ZGpJc0lIUm9hWE11ZGpFcExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZHRnVaMlZ1ZEVGMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJVWVc1blpXNTBLR1VzSUhRcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVkakV1WTI5d2VTaGxMbll4S1N3Z2RHaHBjeTUyTWk1amIzQjVLR1V1ZGpJcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2MzVndaWEl1ZEc5S1UwOU9LQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1ZGpFZ1BTQjBhR2x6TG5ZeExuUnZRWEp5WVhrb0tTd2daUzUyTWlBOUlIUm9hWE11ZGpJdWRHOUJjbkpoZVNncExDQmxPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVtY205dFNsTlBUaWhsS1N3Z2RHaHBjeTUyTVM1bWNtOXRRWEp5WVhrb1pTNTJNU2tzSUhSb2FYTXVkakl1Wm5KdmJVRnljbUY1S0dVdWRqSXBMQ0IwYUdsek93b2dJQ0FnZlFwOUxDQnlZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdXblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJhTENCMElEMGdibVYzSUZvc0lHNGdQU0J1WlhjZ1dpbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1cGMxRjFZV1J5WVhScFkwSmxlbWxsY2tOMWNuWmxJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pSZFdGa2NtRjBhV05DWlhwcFpYSkRkWEoyWlNJc0lIUm9hWE11ZGpBZ1BTQmxMQ0IwYUdsekxuWXhJRDBnZEN3Z2RHaHBjeTUyTWlBOUlHNDdDaUFnSUNCOUNpQWdJQ0JuWlhSUWIybHVkQ2hsTENCMElEMGdibVYzSUZvcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUXNJR2tnUFNCMGFHbHpMbll3TENCeUlEMGdkR2hwY3k1Mk1Td2dZU0E5SUhSb2FYTXVkakk3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzR1YzJWMEtHSnpLR1VzSUdrdWVDd2djaTU0TENCaExuZ3BMQ0JpY3lobExDQnBMbmtzSUhJdWVTd2dZUzU1S1Nrc0lHNDdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTUyTUM1amIzQjVLR1V1ZGpBcExDQjBhR2x6TG5ZeExtTnZjSGtvWlM1Mk1Ta3NJSFJvYVhNdWRqSXVZMjl3ZVNobExuWXlLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSE4xY0dWeUxuUnZTbE5QVGlncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExuWXdJRDBnZEdocGN5NTJNQzUwYjBGeWNtRjVLQ2tzSUdVdWRqRWdQU0IwYUdsekxuWXhMblJ2UVhKeVlYa29LU3dnWlM1Mk1pQTlJSFJvYVhNdWRqSXVkRzlCY25KaGVTZ3BMQ0JsT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1bWNtOXRTbE5QVGlobEtTd2dkR2hwY3k1Mk1DNW1jbTl0UVhKeVlYa29aUzUyTUNrc0lIUm9hWE11ZGpFdVpuSnZiVUZ5Y21GNUtHVXVkakVwTENCMGFHbHpMbll5TG1aeWIyMUJjbkpoZVNobExuWXlLU3dnZEdocGN6c0tJQ0FnSUgwS2ZTd2dZV0VnUFNCamJHRnpjeUJsZUhSbGJtUnpJRnAwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnUVN3Z2RDQTlJRzVsZHlCQkxDQnVJRDBnYm1WM0lFRXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTlJkV0ZrY21GMGFXTkNaWHBwWlhKRGRYSjJaVE1nUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWxGMVlXUnlZWFJwWTBKbGVtbGxja04xY25abE15SXNJSFJvYVhNdWRqQWdQU0JsTENCMGFHbHpMbll4SUQwZ2RDd2dkR2hwY3k1Mk1pQTlJRzQ3Q2lBZ0lDQjlDaUFnSUNCblpYUlFiMmx1ZENobExDQjBJRDBnYm1WM0lFRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFFzSUdrZ1BTQjBhR2x6TG5Zd0xDQnlJRDBnZEdocGN5NTJNU3dnWVNBOUlIUm9hWE11ZGpJN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWMyVjBLR0p6S0dVc0lHa3VlQ3dnY2k1NExDQmhMbmdwTENCaWN5aGxMQ0JwTG5rc0lISXVlU3dnWVM1NUtTd2dZbk1vWlN3Z2FTNTZMQ0J5TG5vc0lHRXVlaWtwTENCdU93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVkakF1WTI5d2VTaGxMbll3S1N3Z2RHaHBjeTUyTVM1amIzQjVLR1V1ZGpFcExDQjBhR2x6TG5ZeUxtTnZjSGtvWlM1Mk1pa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQnpkWEJsY2k1MGIwcFRUMDRvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1Mk1DQTlJSFJvYVhNdWRqQXVkRzlCY25KaGVTZ3BMQ0JsTG5ZeElEMGdkR2hwY3k1Mk1TNTBiMEZ5Y21GNUtDa3NJR1V1ZGpJZ1BTQjBhR2x6TG5ZeUxuUnZRWEp5WVhrb0tTd2daVHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1Wm5KdmJVcFRUMDRvWlNrc0lIUm9hWE11ZGpBdVpuSnZiVUZ5Y21GNUtHVXVkakFwTENCMGFHbHpMbll4TG1aeWIyMUJjbkpoZVNobExuWXhLU3dnZEdocGN5NTJNaTVtY205dFFYSnlZWGtvWlM1Mk1pa3NJSFJvYVhNN0NpQWdJQ0I5Q24wc0lHOWhJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmFkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ1cxMHBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTlRjR3hwYm1WRGRYSjJaU0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVTNCc2FXNWxRM1Z5ZG1VaUxDQjBhR2x6TG5CdmFXNTBjeUE5SUdVN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRYjJsdWRDaGxMQ0IwSUQwZ2JtVjNJRm9wSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRc0lHa2dQU0IwYUdsekxuQnZhVzUwY3l3Z2NpQTlJQ2hwTG14bGJtZDBhQ0F0SURFcElDb2daU3dnWVNBOUlFMWhkR2d1Wm14dmIzSW9jaWtzSUc4Z1BTQnlJQzBnWVN3Z1l5QTlJR2xiWVNBOVBUMGdNQ0EvSUdFZ09pQmhJQzBnTVYwc0lHd2dQU0JwVzJGZExDQm9JRDBnYVZ0aElENGdhUzVzWlc1bmRHZ2dMU0F5SUQ4Z2FTNXNaVzVuZEdnZ0xTQXhJRG9nWVNBcklERmRMQ0IxSUQwZ2FWdGhJRDRnYVM1c1pXNW5kR2dnTFNBeklEOGdhUzVzWlc1bmRHZ2dMU0F4SURvZ1lTQXJJREpkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1TG5ObGRDaGxkU2h2TENCakxuZ3NJR3d1ZUN3Z2FDNTRMQ0IxTG5ncExDQmxkU2h2TENCakxua3NJR3d1ZVN3Z2FDNTVMQ0IxTG5rcEtTd2dianNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWNHOXBiblJ6SUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJR1V1Y0c5cGJuUnpMbXhsYm1kMGFEc2dkQ0E4SUc0N0lIUXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1pTNXdiMmx1ZEhOYmRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjRzlwYm5SekxuQjFjMmdvYVM1amJHOXVaU2dwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b0tUc0tJQ0FnSUNBZ0lDQmxMbkJ2YVc1MGN5QTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCMGFHbHpMbkJ2YVc1MGN5NXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVjRzlwYm5SelczUmRPd29nSUNBZ0lDQWdJQ0FnSUNCbExuQnZhVzUwY3k1d2RYTm9LR2t1ZEc5QmNuSmhlU2dwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYzNWd1pYSXVabkp2YlVwVFQwNG9aU2tzSUhSb2FYTXVjRzlwYm5SeklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUdVdWNHOXBiblJ6TG14bGJtZDBhRHNnZENBOElHNDdJSFFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaUzV3YjJsdWRITmJkRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0c5cGJuUnpMbkIxYzJnb2JtVjNJRm9vS1M1bWNtOXRRWEp5WVhrb2FTa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLZlN3Z1kyRWdQU0JQWW1wbFkzUXVabkpsWlhwbEtIc0tJQ0FnSUY5ZmNISnZkRzlmWHpvZ2JuVnNiQ3dLSUNBZ0lFRnlZME4xY25abE9pQnJieXdLSUNBZ0lFTmhkRzExYkd4U2IyMURkWEoyWlRNNklFaHZMQW9nSUNBZ1EzVmlhV05DWlhwcFpYSkRkWEoyWlRvZ2FXRXNDaUFnSUNCRGRXSnBZMEpsZW1sbGNrTjFjblpsTXpvZ1IyOHNDaUFnSUNCRmJHeHBjSE5sUTNWeWRtVTZJRVJ6TEFvZ0lDQWdUR2x1WlVOMWNuWmxPaUJ6WVN3S0lDQWdJRXhwYm1WRGRYSjJaVE02SUZkdkxBb2dJQ0FnVVhWaFpISmhkR2xqUW1WNmFXVnlRM1Z5ZG1VNklISmhMQW9nSUNBZ1VYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVXpPaUJoWVN3S0lDQWdJRk53YkdsdVpVTjFjblpsT2lCdllRcDlLU3dnV0c4Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZwMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1MGVYQmxJRDBnSWtOMWNuWmxVR0YwYUNJc0lIUm9hWE11WTNWeWRtVnpJRDBnVzEwc0lIUm9hWE11WVhWMGIwTnNiM05sSUQwZ0lURTdDaUFnSUNCOUNpQWdJQ0JoWkdRb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVkzVnlkbVZ6TG5CMWMyZ29aU2s3Q2lBZ0lDQjlDaUFnSUNCamJHOXpaVkJoZEdnb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1OMWNuWmxjMXN3WFM1blpYUlFiMmx1ZENnd0tTd2dkQ0E5SUhSb2FYTXVZM1Z5ZG1WelczUm9hWE11WTNWeWRtVnpMbXhsYm1kMGFDQXRJREZkTG1kbGRGQnZhVzUwS0RFcE93b2dJQ0FnSUNBZ0lHbG1JQ2doWlM1bGNYVmhiSE1vZENrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNGdQU0JsTG1selZtVmpkRzl5TWlBOVBUMGdJVEFnUHlBaVRHbHVaVU4xY25abElpQTZJQ0pNYVc1bFEzVnlkbVV6SWpzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amRYSjJaWE11Y0hWemFDaHVaWGNnWTJGYmJsMG9kQ3dnWlNrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnZhVzUwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1VnS2lCMGFHbHpMbWRsZEV4bGJtZDBhQ2dwTENCcElEMGdkR2hwY3k1blpYUkRkWEoyWlV4bGJtZDBhSE1vS1N3Z2NpQTlJREE3Q2lBZ0lDQWdJQ0FnWm05eUtEc2djaUE4SUdrdWJHVnVaM1JvT3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocFczSmRJRDQ5SUc0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2FWdHlYU0F0SUc0c0lHOGdQU0IwYUdsekxtTjFjblpsYzF0eVhTd2dZeUE5SUc4dVoyVjBUR1Z1WjNSb0tDa3NJR3dnUFNCaklEMDlQU0F3SUQ4Z01DQTZJREVnTFNCaElDOGdZenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZMbWRsZEZCdmFXNTBRWFFvYkN3Z2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjaXNyT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJR2RsZEV4bGJtZDBhQ2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVaMlYwUTNWeWRtVk1aVzVuZEdoektDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVmJaUzVzWlc1bmRHZ2dMU0F4WFRzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlVGeVkweGxibWQwYUhNb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMGFHbHpMbU5oWTJobFRHVnVaM1JvY3lBOUlHNTFiR3dzSUhSb2FYTXVaMlYwUTNWeWRtVk1aVzVuZEdoektDazdDaUFnSUNCOUNpQWdJQ0JuWlhSRGRYSjJaVXhsYm1kMGFITW9LU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTJGamFHVk1aVzVuZEdoeklDWW1JSFJvYVhNdVkyRmphR1ZNWlc1bmRHaHpMbXhsYm1kMGFDQTlQVDBnZEdocGN5NWpkWEoyWlhNdWJHVnVaM1JvS1NCeVpYUjFjbTRnZEdocGN5NWpZV05vWlV4bGJtZDBhSE03Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0JiWFN3Z2RDQTlJREE3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Dd2dhU0E5SUhSb2FYTXVZM1Z5ZG1WekxteGxibWQwYURzZ2JpQThJR2s3SUc0ckt5bDBJQ3M5SUhSb2FYTXVZM1Z5ZG1WelcyNWRMbWRsZEV4bGJtZDBhQ2dwTENCbExuQjFjMmdvZENrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMkZqYUdWTVpXNW5kR2h6SUQwZ1pTd2daVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGTndZV05sWkZCdmFXNTBjeWhsSUQwZ05EQXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQTdJRzRnUEQwZ1pUc2diaXNyS1hRdWNIVnphQ2gwYUdsekxtZGxkRkJ2YVc1MEtHNGdMeUJsS1NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWFYwYjBOc2IzTmxJQ1ltSUhRdWNIVnphQ2gwV3pCZEtTd2dkRHNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnZhVzUwY3lobElEMGdNVElwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZ0ZExDQnVPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0IwYUdsekxtTjFjblpsY3pzZ2FTQThJSEl1YkdWdVozUm9PeUJwS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSEpiYVYwc0lHOGdQU0JoTG1selJXeHNhWEJ6WlVOMWNuWmxJRDhnWlNBcUlESWdPaUJoTG1selRHbHVaVU4xY25abElIeDhJR0V1YVhOTWFXNWxRM1Z5ZG1VeklEOGdNU0E2SUdFdWFYTlRjR3hwYm1WRGRYSjJaU0EvSUdVZ0tpQmhMbkJ2YVc1MGN5NXNaVzVuZEdnZ09pQmxMQ0JqSUQwZ1lTNW5aWFJRYjJsdWRITW9ieWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JDQTlJREE3SUd3Z1BDQmpMbXhsYm1kMGFEc2diQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnWTF0c1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNGdKaVlnYmk1bGNYVmhiSE1vYUNrZ2ZId2dLSFF1Y0hWemFDaG9LU3dnYmlBOUlHZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUYxZEc5RGJHOXpaU0FtSmlCMExteGxibWQwYUNBK0lERWdKaVlnSVhSYmRDNXNaVzVuZEdnZ0xTQXhYUzVsY1hWaGJITW9kRnN3WFNrZ0ppWWdkQzV3ZFhOb0tIUmJNRjBwTENCME93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTVqZFhKMlpYTWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ1pTNWpkWEoyWlhNdWJHVnVaM1JvT3lCMElEd2dianNnZENzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0JsTG1OMWNuWmxjMXQwWFRzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amRYSjJaWE11Y0hWemFDaHBMbU5zYjI1bEtDa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGRYUnZRMnh2YzJVZ1BTQmxMbUYxZEc5RGJHOXpaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSE4xY0dWeUxuUnZTbE5QVGlncE93b2dJQ0FnSUNBZ0lHVXVZWFYwYjBOc2IzTmxJRDBnZEdocGN5NWhkWFJ2UTJ4dmMyVXNJR1V1WTNWeWRtVnpJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlIUm9hWE11WTNWeWRtVnpMbXhsYm1kMGFEc2dkQ0E4SUc0N0lIUXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2RHaHBjeTVqZFhKMlpYTmJkRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVXVZM1Z5ZG1WekxuQjFjMmdvYVM1MGIwcFRUMDRvS1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhOMWNHVnlMbVp5YjIxS1UwOU9LR1VwTENCMGFHbHpMbUYxZEc5RGJHOXpaU0E5SUdVdVlYVjBiME5zYjNObExDQjBhR2x6TG1OMWNuWmxjeUE5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQmxMbU4xY25abGN5NXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUdVdVkzVnlkbVZ6VzNSZE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTjFjblpsY3k1d2RYTm9LRzVsZHlCallWdHBMblI1Y0dWZEtDa3Vabkp2YlVwVFQwNG9hU2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS2ZTd2dhbWtnUFNCamJHRnpjeUJsZUhSbGJtUnpJRmh2SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pRWVhSb0lpd2dkR2hwY3k1amRYSnlaVzUwVUc5cGJuUWdQU0J1WlhjZ1dpd2daU0FtSmlCMGFHbHpMbk5sZEVaeWIyMVFiMmx1ZEhNb1pTazdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRVRzlwYm5SektHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtMXZkbVZVYnlobFd6QmRMbmdzSUdWYk1GMHVlU2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Td2diaUE5SUdVdWJHVnVaM1JvT3lCMElEd2dianNnZENzcktYUm9hWE11YkdsdVpWUnZLR1ZiZEYwdWVDd2daVnQwWFM1NUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxdmRtVlVieWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNWeWNtVnVkRkJ2YVc1MExuTmxkQ2hsTENCMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHeHBibVZVYnlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0J1WlhjZ2MyRW9kR2hwY3k1amRYSnlaVzUwVUc5cGJuUXVZMnh2Ym1Vb0tTd2dibVYzSUZvb1pTd2dkQ2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTjFjblpsY3k1d2RYTm9LRzRwTENCMGFHbHpMbU4xY25KbGJuUlFiMmx1ZEM1elpYUW9aU3dnZENrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeGRXRmtjbUYwYVdORGRYSjJaVlJ2S0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHNWxkeUJ5WVNoMGFHbHpMbU4xY25KbGJuUlFiMmx1ZEM1amJHOXVaU2dwTENCdVpYY2dXaWhsTENCMEtTd2dibVYzSUZvb2Jpd2dhU2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTjFjblpsY3k1d2RYTm9LSElwTENCMGFHbHpMbU4xY25KbGJuUlFiMmx1ZEM1elpYUW9iaXdnYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaVpYcHBaWEpEZFhKMlpWUnZLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJRzVsZHlCcFlTaDBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNWpiRzl1WlNncExDQnVaWGNnV2lobExDQjBLU3dnYm1WM0lGb29iaXdnYVNrc0lHNWxkeUJhS0hJc0lHRXBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amRYSjJaWE11Y0hWemFDaHZLU3dnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1YzJWMEtISXNJR0VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzNCc2FXNWxWR2h5ZFNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRGQnZhVzUwTG1Oc2IyNWxLQ2tLSUNBZ0lDQWdJQ0JkTG1OdmJtTmhkQ2hsS1N3Z2JpQTlJRzVsZHlCdllTaDBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amRYSjJaWE11Y0hWemFDaHVLU3dnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1WTI5d2VTaGxXMlV1YkdWdVozUm9JQzBnTVYwcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lYSmpLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSFJvYVhNdVkzVnljbVZ1ZEZCdmFXNTBMbmdzSUdNZ1BTQjBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNTVPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GaWMyRnlZeWhsSUNzZ2J5d2dkQ0FySUdNc0lHNHNJR2tzSUhJc0lHRXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZV0p6WVhKaktHVXNJSFFzSUc0c0lHa3NJSElzSUdFcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVoWW5ObGJHeHBjSE5sS0dVc0lIUXNJRzRzSUc0c0lHa3NJSElzSUdFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pXeHNhWEJ6WlNobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0IwYUdsekxtTjFjbkpsYm5SUWIybHVkQzU0TENCb0lEMGdkR2hwY3k1amRYSnlaVzUwVUc5cGJuUXVlVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aFluTmxiR3hwY0hObEtHVWdLeUJzTENCMElDc2dhQ3dnYml3Z2FTd2djaXdnWVN3Z2J5d2dZeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JoWW5ObGJHeHBjSE5sS0dVc0lIUXNJRzRzSUdrc0lISXNJR0VzSUc4c0lHTXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJRzVsZHlCRWN5aGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqS1RzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amRYSjJaWE11YkdWdVozUm9JRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJR3d1WjJWMFVHOXBiblFvTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSFV1WlhGMVlXeHpLSFJvYVhNdVkzVnljbVZ1ZEZCdmFXNTBLU0I4ZkNCMGFHbHpMbXhwYm1WVWJ5aDFMbmdzSUhVdWVTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdVkzVnlkbVZ6TG5CMWMyZ29iQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElHZ2dQU0JzTG1kbGRGQnZhVzUwS0RFcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25KbGJuUlFiMmx1ZEM1amIzQjVLR2dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11WTNWeWNtVnVkRkJ2YVc1MExtTnZjSGtvWlM1amRYSnlaVzUwVUc5cGJuUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdjM1Z3WlhJdWRHOUtVMDlPS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVkzVnljbVZ1ZEZCdmFXNTBJRDBnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1ZEc5QmNuSmhlU2dwTENCbE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNW1jbTl0U2xOUFRpaGxLU3dnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1Wm5KdmJVRnljbUY1S0dVdVkzVnljbVZ1ZEZCdmFXNTBLU3dnZEdocGN6c0tJQ0FnSUgwS2ZTd2diR0VnUFNCamJHRnpjeUJ6TVNCbGVIUmxibVJ6SUVkbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0JiQ2lBZ0lDQWdJQ0FnYm1WM0lGb29NQ3dnTFM0MUtTd0tJQ0FnSUNBZ0lDQnVaWGNnV2lndU5Td2dNQ2tzQ2lBZ0lDQWdJQ0FnYm1WM0lGb29NQ3dnTGpVcENpQWdJQ0JkTENCMElEMGdNVElzSUc0Z1BTQXdMQ0JwSUQwZ1RXRjBhQzVRU1NBcUlESXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKTVlYUm9aVWRsYjIxbGRISjVJaXdnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQndiMmx1ZEhNNklHVXNDaUFnSUNBZ0lDQWdJQ0FnSUhObFoyMWxiblJ6T2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0J3YUdsVGRHRnlkRG9nYml3S0lDQWdJQ0FnSUNBZ0lDQWdjR2hwVEdWdVozUm9PaUJwQ2lBZ0lDQWdJQ0FnZlN3Z2RDQTlJRTFoZEdndVpteHZiM0lvZENrc0lHa2dQU0JqZENocExDQXdMQ0JOWVhSb0xsQkpJQ29nTWlrN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCYlhTd2dZU0E5SUZ0ZExDQnZJRDBnVzEwc0lHTWdQU0JiWFN3Z2JDQTlJRnRkTENCb0lEMGdNU0F2SUhRc0lIVWdQU0J1WlhjZ1FTd2daQ0E5SUc1bGR5QmFMQ0JtSUQwZ2JtVjNJRUVzSUcwZ1BTQnVaWGNnUVN3Z1h5QTlJRzVsZHlCQkxDQm5JRDBnTUN3Z2NDQTlJREE3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IySUQwZ01Ec2dkaUE4UFNCbExteGxibWQwYUNBdElERTdJSFlyS3lsemQybDBZMmdvZGlsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Eb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHY2dQU0JsVzNZZ0t5QXhYUzU0SUMwZ1pWdDJYUzU0TENCd0lEMGdaVnQySUNzZ01WMHVlU0F0SUdWYmRsMHVlU3dnWmk1NElEMGdjQ0FxSURFc0lHWXVlU0E5SUMxbkxDQm1Mbm9nUFNCd0lDb2dNQ3dnWHk1amIzQjVLR1lwTENCbUxtNXZjbTFoYkdsNlpTZ3BMQ0JqTG5CMWMyZ29aaTU0TENCbUxua3NJR1l1ZWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JsTG14bGJtZDBhQ0F0SURFNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCakxuQjFjMmdvWHk1NExDQmZMbmtzSUY4dWVpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHY2dQU0JsVzNZZ0t5QXhYUzU0SUMwZ1pWdDJYUzU0TENCd0lEMGdaVnQySUNzZ01WMHVlU0F0SUdWYmRsMHVlU3dnWmk1NElEMGdjQ0FxSURFc0lHWXVlU0E5SUMxbkxDQm1Mbm9nUFNCd0lDb2dNQ3dnYlM1amIzQjVLR1lwTENCbUxuZ2dLejBnWHk1NExDQm1MbmtnS3owZ1h5NTVMQ0JtTG5vZ0t6MGdYeTU2TENCbUxtNXZjbTFoYkdsNlpTZ3BMQ0JqTG5CMWMyZ29aaTU0TENCbUxua3NJR1l1ZWlrc0lGOHVZMjl3ZVNodEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjJJRDBnTURzZ2RpQThQU0IwT3lCMkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlQ0E5SUc0Z0t5QjJJQ29nYUNBcUlHa3NJSGtnUFNCTllYUm9Mbk5wYmloNEtTd2dZaUE5SUUxaGRHZ3VZMjl6S0hncE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGNnUFNBd095QjNJRHc5SUdVdWJHVnVaM1JvSUMwZ01Uc2dkeXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhVdWVDQTlJR1ZiZDEwdWVDQXFJSGtzSUhVdWVTQTlJR1ZiZDEwdWVTd2dkUzU2SUQwZ1pWdDNYUzU0SUNvZ1lpd2dZUzV3ZFhOb0tIVXVlQ3dnZFM1NUxDQjFMbm9wTENCa0xuZ2dQU0IySUM4Z2RDd2daQzU1SUQwZ2R5QXZJQ2hsTG14bGJtZDBhQ0F0SURFcExDQnZMbkIxYzJnb1pDNTRMQ0JrTG5rcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRklnUFNCald6TWdLaUIzSUNzZ01GMGdLaUI1TENCSklEMGdZMXN6SUNvZ2R5QXJJREZkTENCTklEMGdZMXN6SUNvZ2R5QXJJREJkSUNvZ1lqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd3VjSFZ6YUNoU0xDQkpMQ0JOS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFlnUFNBd095QjJJRHdnZERzZ2Rpc3JLV1p2Y2loc1pYUWdlQ0E5SURBN0lIZ2dQQ0JsTG14bGJtZDBhQ0F0SURFN0lIZ3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I1SUQwZ2VDQXJJSFlnS2lCbExteGxibWQwYUN3Z1lpQTlJSGtzSUhjZ1BTQjVJQ3NnWlM1c1pXNW5kR2dzSUZJZ1BTQjVJQ3NnWlM1c1pXNW5kR2dnS3lBeExDQkpJRDBnZVNBcklERTdDaUFnSUNBZ0lDQWdJQ0FnSUhJdWNIVnphQ2hpTENCM0xDQkpLU3dnY2k1d2RYTm9LRklzSUVrc0lIY3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx1WkdWNEtISXBMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2dkbVVvWVN3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpZFhZaUxDQnVaWGNnZG1Vb2J5d2dNaWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWJtOXliV0ZzSWl3Z2JtVjNJSFpsS0d3c0lETXBLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG5CaGNtRnRaWFJsY25NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxMbkJoY21GdFpYUmxjbk1wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lITXhLR1V1Y0c5cGJuUnpMQ0JsTG5ObFoyMWxiblJ6TENCbExuQm9hVk4wWVhKMExDQmxMbkJvYVV4bGJtZDBhQ2s3Q2lBZ0lDQjlDbjBzSUhGdklEMGdZMnhoYzNNZ2N6RWdaWGgwWlc1a2N5QnNZU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Td2dkQ0E5SURFc0lHNGdQU0EwTENCcElEMGdPQ2w3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0J1WlhjZ2FtazdDaUFnSUNBZ0lDQWdjaTVoWW5OaGNtTW9NQ3dnTFhRZ0x5QXlMQ0JsTENCTllYUm9MbEJKSUNvZ01TNDFMQ0F3S1N3Z2NpNWhZbk5oY21Nb01Dd2dkQ0F2SURJc0lHVXNJREFzSUUxaGRHZ3VVRWtnS2lBdU5Ta3NJSE4xY0dWeUtISXVaMlYwVUc5cGJuUnpLRzRwTENCcEtTd2dkR2hwY3k1MGVYQmxJRDBnSWtOaGNITjFiR1ZIWlc5dFpYUnllU0lzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbUZrYVhWek9pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pXNW5kR2c2SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJR05oY0ZObFoyMWxiblJ6T2lCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0J5WVdScFlXeFRaV2R0Wlc1MGN6b2dhUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2djekVvWlM1eVlXUnBkWE1zSUdVdWJHVnVaM1JvTENCbExtTmhjRk5sWjIxbGJuUnpMQ0JsTG5KaFpHbGhiRk5sWjIxbGJuUnpLVHNLSUNBZ0lIMEtmU3dnV1c4Z1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklFZGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTXpJc0lHNGdQU0F3TENCcElEMGdUV0YwYUM1UVNTQXFJRElwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVkSGx3WlNBOUlDSkRhWEpqYkdWSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnpaV2R0Wlc1MGN6b2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxkR0ZUZEdGeWREb2diaXdLSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxkR0ZNWlc1bmRHZzZJR2tLSUNBZ0lDQWdJQ0I5TENCMElEMGdUV0YwYUM1dFlYZ29NeXdnZENrN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCYlhTd2dZU0E5SUZ0ZExDQnZJRDBnVzEwc0lHTWdQU0JiWFN3Z2JDQTlJRzVsZHlCQkxDQm9JRDBnYm1WM0lGbzdDaUFnSUNBZ0lDQWdZUzV3ZFhOb0tEQXNJREFzSURBcExDQnZMbkIxYzJnb01Dd2dNQ3dnTVNrc0lHTXVjSFZ6YUNndU5Td2dMalVwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZFNBOUlEQXNJR1FnUFNBek95QjFJRHc5SUhRN0lIVXJLeXdnWkNBclBTQXpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCdUlDc2dkU0F2SUhRZ0tpQnBPd29nSUNBZ0lDQWdJQ0FnSUNCc0xuZ2dQU0JsSUNvZ1RXRjBhQzVqYjNNb1ppa3NJR3d1ZVNBOUlHVWdLaUJOWVhSb0xuTnBiaWhtS1N3Z1lTNXdkWE5vS0d3dWVDd2diQzU1TENCc0xub3BMQ0J2TG5CMWMyZ29NQ3dnTUN3Z01Ta3NJR2d1ZUNBOUlDaGhXMlJkSUM4Z1pTQXJJREVwSUM4Z01pd2dhQzU1SUQwZ0tHRmJaQ0FySURGZElDOGdaU0FySURFcElDOGdNaXdnWXk1d2RYTm9LR2d1ZUN3Z2FDNTVLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IxSUQwZ01Uc2dkU0E4UFNCME95QjFLeXNwY2k1d2RYTm9LSFVzSUhVZ0t5QXhMQ0F3S1RzS0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVsdVpHVjRLSElwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnZG1Vb1lTd2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWJtOXliV0ZzSWl3Z2JtVjNJSFpsS0c4c0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5WMklpd2dibVYzSUhabEtHTXNJRElwS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JsTG5CaGNtRnRaWFJsY25NcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSE14S0dVdWNtRmthWFZ6TENCbExuTmxaMjFsYm5SekxDQmxMblJvWlhSaFUzUmhjblFzSUdVdWRHaGxkR0ZNWlc1bmRHZ3BPd29nSUNBZ2ZRcDlMQ0JPY3lBOUlHTnNZWE56SUhNeElHVjRkR1Z1WkhNZ1IyVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURFc0lIUWdQU0F4TENCdUlEMGdNU3dnYVNBOUlETXlMQ0J5SUQwZ01Td2dZU0E5SUNFeExDQnZJRDBnTUN3Z1l5QTlJRTFoZEdndVVFa2dLaUF5S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMblI1Y0dVZ1BTQWlRM2xzYVc1a1pYSkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6Vkc5d09pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE5DYjNSMGIyMDZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FXRnNVMlZuYldWdWRITTZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZEZObFoyMWxiblJ6T2lCeUxBb2dJQ0FnSUNBZ0lDQWdJQ0J2Y0dWdVJXNWtaV1E2SUdFc0NpQWdJQ0FnSUNBZ0lDQWdJSFJvWlhSaFUzUmhjblE2SUc4c0NpQWdJQ0FnSUNBZ0lDQWdJSFJvWlhSaFRHVnVaM1JvT2lCakNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlIUm9hWE03Q2lBZ0lDQWdJQ0FnYVNBOUlFMWhkR2d1Wm14dmIzSW9hU2tzSUhJZ1BTQk5ZWFJvTG1ac2IyOXlLSElwT3dvZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnVzEwc0lIVWdQU0JiWFN3Z1pDQTlJRnRkTENCbUlEMGdXMTBzSUcwZ1BTQXdMQ0JmSUQwZ1cxMHNJR2NnUFNCdUlDOGdNaXdnY0NBOUlEQTdDaUFnSUNBZ0lDQWdkaWdwTENCaElEMDlQU0FoTVNBbUppQW9aU0ErSURBZ0ppWWdlQ2doTUNrc0lIUWdQaUF3SUNZbUlIZ29JVEVwS1N3Z2RHaHBjeTV6WlhSSmJtUmxlQ2hvS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtIVXNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0ltNXZjbTFoYkNJc0lHNWxkeUIyWlNoa0xDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKMWRpSXNJRzVsZHlCMlpTaG1MQ0F5S1NrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2RpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGtnUFNCdVpYY2dRU3dnWWlBOUlHNWxkeUJCTENCM0lEMGdNQ3dnVWlBOUlDaDBJQzBnWlNrZ0x5QnVPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVrZ1BTQXdPeUJKSUR3OUlISTdJRWtyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUU0E5SUZ0ZExDQlVJRDBnU1NBdklISXNJRThnUFNCVUlDb2dLSFFnTFNCbEtTQXJJR1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRmtnUFNBd095QlpJRHc5SUdrN0lGa3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJQ1FnUFNCWklDOGdhU3dnVlNBOUlDUWdLaUJqSUNzZ2J5d2dlaUE5SUUxaGRHZ3VjMmx1S0ZVcExDQnhJRDBnVFdGMGFDNWpiM01vVlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZaTU0SUQwZ1R5QXFJSG9zSUdJdWVTQTlJQzFVSUNvZ2JpQXJJR2NzSUdJdWVpQTlJRThnS2lCeExDQjFMbkIxYzJnb1lpNTRMQ0JpTG5rc0lHSXVlaWtzSUhrdWMyVjBLSG9zSUZJc0lIRXBMbTV2Y20xaGJHbDZaU2dwTENCa0xuQjFjMmdvZVM1NExDQjVMbmtzSUhrdWVpa3NJR1l1Y0hWemFDZ2tMQ0F4SUMwZ1ZDa3NJRTB1Y0hWemFDaHRLeXNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWHk1d2RYTm9LRTBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnU1NBOUlEQTdJRWtnUENCcE95QkpLeXNwWm05eUtHeGxkQ0JOSUQwZ01Ec2dUU0E4SUhJN0lFMHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZDQTlJRjliVFYxYlNWMHNJRThnUFNCZlcwMGdLeUF4WFZ0SlhTd2dXU0E5SUY5YlRTQXJJREZkVzBrZ0t5QXhYU3dnSkNBOUlGOWJUVjFiU1NBcklERmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhQzV3ZFhOb0tGUXNJRThzSUNRcExDQm9MbkIxYzJnb1R5d2dXU3dnSkNrc0lIY2dLejBnTmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc0xtRmtaRWR5YjNWd0tIQXNJSGNzSURBcExDQndJQ3M5SUhjN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlIZ29lU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlHMHNJSGNnUFNCdVpYY2dXaXdnVWlBOUlHNWxkeUJCTENCSklEMGdNQ3dnVFNBOUlIa2dQVDA5SUNFd0lEOGdaU0E2SUhRc0lGUWdQU0I1SUQwOVBTQWhNQ0EvSURFZ09pQXRNVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCWklEMGdNVHNnV1NBOFBTQnBPeUJaS3lzcGRTNXdkWE5vS0RBc0lHY2dLaUJVTENBd0tTd2daQzV3ZFhOb0tEQXNJRlFzSURBcExDQm1MbkIxYzJnb0xqVXNJQzQxS1N3Z2JTc3JPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUeUE5SUcwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdXU0E5SURBN0lGa2dQRDBnYVRzZ1dTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCVklEMGdXU0F2SUdrZ0tpQmpJQ3NnYnl3Z2VpQTlJRTFoZEdndVkyOXpLRlVwTENCeElEMGdUV0YwYUM1emFXNG9WU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JTTG5nZ1BTQk5JQ29nY1N3Z1VpNTVJRDBnWnlBcUlGUXNJRkl1ZWlBOUlFMGdLaUI2TENCMUxuQjFjMmdvVWk1NExDQlNMbmtzSUZJdWVpa3NJR1F1Y0hWemFDZ3dMQ0JVTENBd0tTd2dkeTU0SUQwZ2VpQXFJQzQxSUNzZ0xqVXNJSGN1ZVNBOUlIRWdLaUF1TlNBcUlGUWdLeUF1TlN3Z1ppNXdkWE5vS0hjdWVDd2dkeTU1S1N3Z2JTc3JPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdXU0E5SURBN0lGa2dQQ0JwT3lCWkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUNRZ1BTQmlJQ3NnV1N3Z1ZTQTlJRThnS3lCWk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQTlQVDBnSVRBZ1B5Qm9MbkIxYzJnb1ZTd2dWU0FySURFc0lDUXBJRG9nYUM1d2RYTm9LRlVnS3lBeExDQlZMQ0FrS1N3Z1NTQXJQU0F6T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUd3dVlXUmtSM0p2ZFhBb2NDd2dTU3dnZVNBOVBUMGdJVEFnUHlBeElEb2dNaWtzSUhBZ0t6MGdTVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdUMkpxWldOMExtRnpjMmxuYmloN2ZTd2daUzV3WVhKaGJXVjBaWEp6S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJtY205dFNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QnpNU2hsTG5KaFpHbDFjMVJ2Y0N3Z1pTNXlZV1JwZFhOQ2IzUjBiMjBzSUdVdWFHVnBaMmgwTENCbExuSmhaR2xoYkZObFoyMWxiblJ6TENCbExtaGxhV2RvZEZObFoyMWxiblJ6TENCbExtOXdaVzVGYm1SbFpDd2daUzUwYUdWMFlWTjBZWEowTENCbExuUm9aWFJoVEdWdVozUm9LVHNLSUNBZ0lIMEtmU3dnV204Z1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklFNXpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTVN3Z2JpQTlJRE15TENCcElEMGdNU3dnY2lBOUlDRXhMQ0JoSUQwZ01Dd2dieUE5SUUxaGRHZ3VVRWtnS2lBeUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lnd0xDQmxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZLU3dnZEdocGN5NTBlWEJsSUQwZ0lrTnZibVZIWlc5dFpYUnllU0lzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbUZrYVhWek9pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJSEpoWkdsaGJGTmxaMjFsYm5Sek9pQnVMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFJUWldkdFpXNTBjem9nYVN3S0lDQWdJQ0FnSUNBZ0lDQWdiM0JsYmtWdVpHVmtPaUJ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR1YwWVZOMFlYSjBPaUJoTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR1YwWVV4bGJtZDBhRG9nYndvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnY3pFb1pTNXlZV1JwZFhNc0lHVXVhR1ZwWjJoMExDQmxMbkpoWkdsaGJGTmxaMjFsYm5SekxDQmxMbWhsYVdkb2RGTmxaMjFsYm5SekxDQmxMbTl3Wlc1RmJtUmxaQ3dnWlM1MGFHVjBZVk4wWVhKMExDQmxMblJvWlhSaFRHVnVaM1JvS1RzS0lDQWdJSDBLZlN3Z1pHa2dQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJRWRsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQmJYU3dnZENBOUlGdGRMQ0J1SUQwZ01Td2dhU0E5SURBcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pRYjJ4NWFHVmtjbTl1UjJWdmJXVjBjbmtpTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25ScFkyVnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBibVJwWTJWek9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE02SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJR1JsZEdGcGJEb2dhUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0JiWFN3Z1lTQTlJRnRkT3dvZ0lDQWdJQ0FnSUc4b2FTa3NJR3dvYmlrc0lHZ29LU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJSFpsS0hJc0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW01dmNtMWhiQ0lzSUc1bGR5QjJaU2h5TG5Oc2FXTmxLQ2tzSURNcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JblYySWl3Z2JtVjNJSFpsS0dFc0lESXBLU3dnYVNBOVBUMGdNQ0EvSUhSb2FYTXVZMjl0Y0hWMFpWWmxjblJsZUU1dmNtMWhiSE1vS1NBNklIUm9hWE11Ym05eWJXRnNhWHBsVG05eWJXRnNjeWdwT3dvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUc4b2Rpa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlQ0E5SUc1bGR5QkJMQ0I1SUQwZ2JtVjNJRUVzSUdJZ1BTQnVaWGNnUVRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjNJRDBnTURzZ2R5QThJSFF1YkdWdVozUm9PeUIzSUNzOUlETXBaaWgwVzNjZ0t5QXdYU3dnZUNrc0lHWW9kRnQzSUNzZ01WMHNJSGtwTENCbUtIUmJkeUFySURKZExDQmlLU3dnWXloNExDQjVMQ0JpTENCMktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdZeWgyTENCNExDQjVMQ0JpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCM0lEMGdZaUFySURFc0lGSWdQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkpJRDBnTURzZ1NTQThQU0IzT3lCSkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVbHRKWFNBOUlGdGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUUwZ1BTQjJMbU5zYjI1bEtDa3ViR1Z5Y0NoNUxDQkpJQzhnZHlrc0lGUWdQU0I0TG1Oc2IyNWxLQ2t1YkdWeWNDaDVMQ0JKSUM4Z2R5a3NJRThnUFNCM0lDMGdTVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdXU0E5SURBN0lGa2dQRDBnVHpzZ1dTc3JLVmtnUFQwOUlEQWdKaVlnU1NBOVBUMGdkeUEvSUZKYlNWMWJXVjBnUFNCTklEb2dVbHRKWFZ0WlhTQTlJRTB1WTJ4dmJtVW9LUzVzWlhKd0tGUXNJRmtnTHlCUEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFa2dQU0F3T3lCSklEd2dkenNnU1NzcktXWnZjaWhzWlhRZ1RTQTlJREE3SUUwZ1BDQXlJQ29nS0hjZ0xTQkpLU0F0SURFN0lFMHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZDQTlJRTFoZEdndVpteHZiM0lvVFNBdklESXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUU0FsSURJZ1BUMDlJREFnUHlBb1pDaFNXMGxkVzFRZ0t5QXhYU2tzSUdRb1VsdEpJQ3NnTVYxYlZGMHBMQ0JrS0ZKYlNWMWJWRjBwS1NBNklDaGtLRkpiU1YxYlZDQXJJREZkS1N3Z1pDaFNXMGtnS3lBeFhWdFVJQ3NnTVYwcExDQmtLRkpiU1NBcklERmRXMVJkS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYkNoMktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnYm1WM0lFRTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZVNBOUlEQTdJSGtnUENCeUxteGxibWQwYURzZ2VTQXJQU0F6S1hndWVDQTlJSEpiZVNBcklEQmRMQ0I0TG5rZ1BTQnlXM2tnS3lBeFhTd2dlQzU2SUQwZ2NsdDVJQ3NnTWwwc0lIZ3VibTl5YldGc2FYcGxLQ2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9kaWtzSUhKYmVTQXJJREJkSUQwZ2VDNTRMQ0J5VzNrZ0t5QXhYU0E5SUhndWVTd2djbHQ1SUNzZ01sMGdQU0I0TG5vN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHZ29LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2JtVjNJRUU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VDQTlJREE3SUhnZ1BDQnlMbXhsYm1kMGFEc2dlQ0FyUFNBektYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWXVlQ0E5SUhKYmVDQXJJREJkTENCMkxua2dQU0J5VzNnZ0t5QXhYU3dnZGk1NklEMGdjbHQ0SUNzZ01sMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVNBOUlHY29kaWtnTHlBeUlDOGdUV0YwYUM1UVNTQXJJQzQxTENCaUlEMGdjQ2gyS1NBdklFMWhkR2d1VUVrZ0t5QXVOVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0V1Y0hWemFDaDVMQ0F4SUMwZ1lpazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiU2dwTENCMUtDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFVvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdkaUE5SURBN0lIWWdQQ0JoTG14bGJtZDBhRHNnZGlBclBTQTJLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNElEMGdZVnQySUNzZ01GMHNJSGtnUFNCaFczWWdLeUF5WFN3Z1lpQTlJR0ZiZGlBcklEUmRMQ0IzSUQwZ1RXRjBhQzV0WVhnb2VDd2dlU3dnWWlrc0lGSWdQU0JOWVhSb0xtMXBiaWg0TENCNUxDQmlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGNnUGlBdU9TQW1KaUJTSUR3Z0xqRWdKaVlnS0hnZ1BDQXVNaUFtSmlBb1lWdDJJQ3NnTUYwZ0t6MGdNU2tzSUhrZ1BDQXVNaUFtSmlBb1lWdDJJQ3NnTWwwZ0t6MGdNU2tzSUdJZ1BDQXVNaUFtSmlBb1lWdDJJQ3NnTkYwZ0t6MGdNU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR1FvZGlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5TG5CMWMyZ29kaTU0TENCMkxua3NJSFl1ZWlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWW9kaXdnZUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJSFlnS2lBek93b2dJQ0FnSUNBZ0lDQWdJQ0I0TG5nZ1BTQmxXM2tnS3lBd1hTd2dlQzU1SUQwZ1pWdDVJQ3NnTVYwc0lIZ3VlaUE5SUdWYmVTQXJJREpkT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdEtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkaUE5SUc1bGR5QkJMQ0I0SUQwZ2JtVjNJRUVzSUhrZ1BTQnVaWGNnUVN3Z1lpQTlJRzVsZHlCQkxDQjNJRDBnYm1WM0lGb3NJRklnUFNCdVpYY2dXaXdnU1NBOUlHNWxkeUJhT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFMGdQU0F3TENCVUlEMGdNRHNnVFNBOElISXViR1Z1WjNSb095Qk5JQ3M5SURrc0lGUWdLejBnTmlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMkxuTmxkQ2h5VzAwZ0t5QXdYU3dnY2x0TklDc2dNVjBzSUhKYlRTQXJJREpkS1N3Z2VDNXpaWFFvY2x0TklDc2dNMTBzSUhKYlRTQXJJRFJkTENCeVcwMGdLeUExWFNrc0lIa3VjMlYwS0hKYlRTQXJJRFpkTENCeVcwMGdLeUEzWFN3Z2NsdE5JQ3NnT0YwcExDQjNMbk5sZENoaFcxUWdLeUF3WFN3Z1lWdFVJQ3NnTVYwcExDQlNMbk5sZENoaFcxUWdLeUF5WFN3Z1lWdFVJQ3NnTTEwcExDQkpMbk5sZENoaFcxUWdLeUEwWFN3Z1lWdFVJQ3NnTlYwcExDQmlMbU52Y0hrb2Rpa3VZV1JrS0hncExtRmtaQ2g1S1M1a2FYWnBaR1ZUWTJGc1lYSW9NeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1R5QTlJR2NvWWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZktIY3NJRlFnS3lBd0xDQjJMQ0JQS1N3Z1h5aFNMQ0JVSUNzZ01pd2dlQ3dnVHlrc0lGOG9TU3dnVkNBcklEUXNJSGtzSUU4cE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUY4b2Rpd2dlQ3dnZVN3Z1lpa2dld29nSUNBZ0lDQWdJQ0FnSUNCaUlEd2dNQ0FtSmlCMkxuZ2dQVDA5SURFZ0ppWWdLR0ZiZUYwZ1BTQjJMbmdnTFNBeEtTd2dlUzU0SUQwOVBTQXdJQ1ltSUhrdWVpQTlQVDBnTUNBbUppQW9ZVnQ0WFNBOUlHSWdMeUF5SUM4Z1RXRjBhQzVRU1NBcklDNDFLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWnloMktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtRjBZVzR5S0hZdWVpd2dMWFl1ZUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlIQW9kaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzVoZEdGdU1pZ3RkaTU1TENCTllYUm9Mbk54Y25Rb2RpNTRJQ29nZGk1NElDc2dkaTU2SUNvZ2RpNTZLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR1V1Y0dGeVlXMWxkR1Z5Y3lrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2djekVvWlM1MlpYSjBhV05sY3l3Z1pTNXBibVJwWTJWekxDQmxMbkpoWkdsMWN5d2daUzVrWlhSaGFXeHpLVHNLSUNBZ0lIMEtmU3dnU204Z1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklHUnBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTUNsN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNBb01TQXJJRTFoZEdndWMzRnlkQ2cxS1NrZ0x5QXlMQ0JwSUQwZ01TQXZJRzRzSUhJZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxcExBb2dJQ0FnSUNBZ0lDQWdJQ0F0Yml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xXa3NDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHa3NDaUFnSUNBZ0lDQWdJQ0FnSUMxdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F0YVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNCcExBb2dJQ0FnSUNBZ0lDQWdJQ0F0Yml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FTd0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xXNHNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzFwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0YVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUdrc0NpQWdJQ0FnSUNBZ0lDQWdJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUdrS0lDQWdJQ0FnSUNCZExDQmhJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBeE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTnl3S0lDQWdJQ0FnSUNBZ0lDQWdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ055d0tJQ0FnSUNBZ0lDQWdJQ0FnTVRVc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lERTFMQW9nSUNBZ0lDQWdJQ0FnSUNBeE15d0tJQ0FnSUNBZ0lDQWdJQ0FnTnl3S0lDQWdJQ0FnSUNBZ0lDQWdNVGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTNMQW9nSUNBZ0lDQWdJQ0FnSUNBM0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4Tnl3S0lDQWdJQ0FnSUNBZ0lDQWdOaXdLSUNBZ0lDQWdJQ0FnSUNBZ055d0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdNVFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTNMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0E0TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhOeXdLSUNBZ0lDQWdJQ0FnSUNBZ09Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRBc0NpQWdJQ0FnSUNBZ0lDQWdJREUzTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ05pd0tJQ0FnSUNBZ0lDQWdJQ0FnT0N3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01UWXNDaUFnSUNBZ0lDQWdJQ0FnSURnc0NpQWdJQ0FnSUNBZ0lDQWdJREUyTEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBNExBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRJc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREU0TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeE9Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRZc0NpQWdJQ0FnSUNBZ0lDQWdJRFlzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0EyTEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBeE15d0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdNVE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lERTFMQW9nSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0F4Tml3S0lDQWdJQ0FnSUNBZ0lDQWdNVGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURFNExBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0F4TXl3S0lDQWdJQ0FnSUNBZ0lDQWdNVGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURrc0NpQWdJQ0FnSUNBZ0lDQWdJREU0TEFvZ0lDQWdJQ0FnSUNBZ0lDQTVMQW9nSUNBZ0lDQWdJQ0FnSUNBeE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVRnc0NpQWdJQ0FnSUNBZ0lDQWdJREV4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TkN3S0lDQWdJQ0FnSUNBZ0lDQWdNVElzQ2lBZ0lDQWdJQ0FnSUNBZ0lEUXNDaUFnSUNBZ0lDQWdJQ0FnSURFeUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0E0TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ09Td0tJQ0FnSUNBZ0lDQWdJQ0FnTlN3S0lDQWdJQ0FnSUNBZ0lDQWdNVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEVXNDaUFnSUNBZ0lDQWdJQ0FnSURFNUxBb2dJQ0FnSUNBZ0lDQWdJQ0F4TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNVGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lEY3NDaUFnSUNBZ0lDQWdJQ0FnSURFNUxBb2dJQ0FnSUNBZ0lDQWdJQ0ExTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Ua3NDaUFnSUNBZ0lDQWdJQ0FnSURFMExBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhPU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRjc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXlMQW9nSUNBZ0lDQWdJQ0FnSUNBeE5Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNVFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEVXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEa0tJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJSE4xY0dWeUtISXNJR0VzSUdVc0lIUXBMQ0IwYUdsekxuUjVjR1VnUFNBaVJHOWtaV05oYUdWa2NtOXVSMlZ2YldWMGNua2lMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmhaR2wxY3pvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWMFlXbHNPaUIwQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCbWNtOXRTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJ6TVNobExuSmhaR2wxY3l3Z1pTNWtaWFJoYVd3cE93b2dJQ0FnZlFwOUxDQjJjaUE5SUc1bGR5QkJMQ0I1Y2lBOUlHNWxkeUJCTENCaGJ5QTlJRzVsZHlCQkxDQk5jaUE5SUc1bGR5QlZiaXdnSkc4Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVkbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1ZFd4c0xDQjBJRDBnTVNsN0NpQWdJQ0FnSUNBZ2FXWWdLSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKRlpHZGxjMGRsYjIxbGRISjVJaXdnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm5aVzl0WlhSeWVUb2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHlaWE5vYjJ4a1FXNW5iR1U2SUhRS0lDQWdJQ0FnSUNCOUxDQmxJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1RXRjBhQzV3YjNjb01UQXNJRFFwTENCeUlEMGdUV0YwYUM1amIzTW9ZV2tnS2lCMEtTd2dZU0E5SUdVdVoyVjBTVzVrWlhnb0tTd2dieUE5SUdVdVoyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlwTENCaklEMGdZU0EvSUdFdVkyOTFiblFnT2lCdkxtTnZkVzUwTENCc0lEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3Q2lBZ0lDQWdJQ0FnSUNBZ0lGMHNJR2dnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaVlTSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWlZaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FpWXlJS0lDQWdJQ0FnSUNBZ0lDQWdYU3dnZFNBOUlHNWxkeUJCY25KaGVTZ3pLU3dnWkNBOUlIdDlMQ0JtSUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYlNBOUlEQTdJRzBnUENCak95QnRJQ3M5SURNcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQS9JQ2hzV3pCZElEMGdZUzVuWlhSWUtHMHBMQ0JzV3pGZElEMGdZUzVuWlhSWUtHMGdLeUF4S1N3Z2JGc3lYU0E5SUdFdVoyVjBXQ2h0SUNzZ01pa3BJRG9nS0d4Yk1GMGdQU0J0TENCc1d6RmRJRDBnYlNBcklERXNJR3hiTWwwZ1BTQnRJQ3NnTWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdleUJoT2lCZklDd2dZam9nWnlBc0lHTTZJSEFnSUgwZ1BTQk5janNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZkxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9ieXdnYkZzd1hTa3NJR2N1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNodkxDQnNXekZkS1N3Z2NDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLRzhzSUd4Yk1sMHBMQ0JOY2k1blpYUk9iM0p0WVd3b1lXOHBMQ0IxV3pCZElEMGdZQ1I3VFdGMGFDNXliM1Z1WkNoZkxuZ2dLaUJwS1gwc0pIdE5ZWFJvTG5KdmRXNWtLRjh1ZVNBcUlHa3BmU3drZTAxaGRHZ3VjbTkxYm1Rb1h5NTZJQ29nYVNsOVlDd2dkVnN4WFNBOUlHQWtlMDFoZEdndWNtOTFibVFvWnk1NElDb2dhU2w5TENSN1RXRjBhQzV5YjNWdVpDaG5MbmtnS2lCcEtYMHNKSHROWVhSb0xuSnZkVzVrS0djdWVpQXFJR2twZldBc0lIVmJNbDBnUFNCZ0pIdE5ZWFJvTG5KdmRXNWtLSEF1ZUNBcUlHa3BmU3drZTAxaGRHZ3VjbTkxYm1Rb2NDNTVJQ29nYVNsOUxDUjdUV0YwYUM1eWIzVnVaQ2h3TG5vZ0tpQnBLWDFnTENBaEtIVmJNRjBnUFQwOUlIVmJNVjBnZkh3Z2RWc3hYU0E5UFQwZ2RWc3lYU0I4ZkNCMVd6SmRJRDA5UFNCMVd6QmRLU2tnWm05eUtHeGxkQ0IySUQwZ01Ec2dkaUE4SURNN0lIWXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGdnUFNBb2RpQXJJREVwSUNVZ015d2dlU0E5SUhWYmRsMHNJR0lnUFNCMVczaGRMQ0IzSUQwZ1RYSmJhRnQyWFYwc0lGSWdQU0JOY2x0b1czaGRYU3dnU1NBOUlHQWtlM2w5WHlSN1luMWdMQ0JOSUQwZ1lDUjdZbjFmSkh0NWZXQTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVFNCcGJpQmtJQ1ltSUdSYlRWMGdQeUFvWVc4dVpHOTBLR1JiVFYwdWJtOXliV0ZzS1NBOFBTQnlJQ1ltSUNobUxuQjFjMmdvZHk1NExDQjNMbmtzSUhjdWVpa3NJR1l1Y0hWemFDaFNMbmdzSUZJdWVTd2dVaTU2S1Nrc0lHUmJUVjBnUFNCdWRXeHNLU0E2SUVrZ2FXNGdaQ0I4ZkNBb1pGdEpYU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ3dPaUJzVzNaZExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlREU2SUd4YmVGMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkRvZ1lXOHVZMnh2Ym1Vb0tRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYlNCcGJpQmtLV2xtSUNoa1cyMWRLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2V5QnBibVJsZURBNklGOGdMQ0JwYm1SbGVERTZJR2NnSUgwZ1BTQmtXMjFkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG5JdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHZMQ0JmS1N3Z2VYSXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h2TENCbktTd2daaTV3ZFhOb0tIWnlMbmdzSUhaeUxua3NJSFp5TG5vcExDQm1MbkIxYzJnb2VYSXVlQ3dnZVhJdWVTd2dlWEl1ZWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtHWXNJRE1wS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1d1lYSmhiV1YwWlhKektTd2dkR2hwY3pzS0lDQWdJSDBLZlN3Z1JtNGdQU0JqYkdGemN5QmxlSFJsYm1SeklHcHBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VwTENCMGFHbHpMblYxYVdRZ1BTQnJkQ2dwTENCMGFHbHpMblI1Y0dVZ1BTQWlVMmhoY0dVaUxDQjBhR2x6TG1odmJHVnpJRDBnVzEwN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRYjJsdWRITkliMnhsY3lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnZEdocGN5NW9iMnhsY3k1c1pXNW5kR2c3SUc0Z1BDQnBPeUJ1S3lzcGRGdHVYU0E5SUhSb2FYTXVhRzlzWlhOYmJsMHVaMlYwVUc5cGJuUnpLR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwT3dvZ0lDQWdmUW9nSUNBZ1pYaDBjbUZqZEZCdmFXNTBjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjMmhoY0dVNklIUm9hWE11WjJWMFVHOXBiblJ6S0dVcExBb2dJQ0FnSUNBZ0lDQWdJQ0JvYjJ4bGN6b2dkR2hwY3k1blpYUlFiMmx1ZEhOSWIyeGxjeWhsS1FvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbWh2YkdWeklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUdVdWFHOXNaWE11YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbWh2YkdWelczUmRPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWh2YkdWekxuQjFjMmdvYVM1amJHOXVaU2dwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b0tUc0tJQ0FnSUNBZ0lDQmxMblYxYVdRZ1BTQjBhR2x6TG5WMWFXUXNJR1V1YUc5c1pYTWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ2RHaHBjeTVvYjJ4bGN5NXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVhRzlzWlhOYmRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUdVdWFHOXNaWE11Y0hWemFDaHBMblJ2U2xOUFRpZ3BLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1U3Q2lBZ0lDQjlDaUFnSUNCbWNtOXRTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjM1Z3WlhJdVpuSnZiVXBUVDA0b1pTa3NJSFJvYVhNdWRYVnBaQ0E5SUdVdWRYVnBaQ3dnZEdocGN5NW9iMnhsY3lBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0JsTG1odmJHVnpMbXhsYm1kMGFEc2dkQ0E4SUc0N0lIUXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1pTNW9iMnhsYzF0MFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9iMnhsY3k1d2RYTm9LRzVsZHlCcWFTZ3BMbVp5YjIxS1UwOU9LR2twS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNuMHNJR1Y0SUQwZ2V3b2dJQ0FnZEhKcFlXNW5kV3hoZEdVNklHWjFibU4wYVc5dUtITXhMQ0JsTENCMElEMGdNaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlNBbUppQmxMbXhsYm1kMGFDd2dhU0E5SUc0Z1B5QmxXekJkSUNvZ2RDQTZJSE14TG14bGJtZDBhQ3dnY2lBOUlGQmtLSE14TENBd0xDQnBMQ0IwTENBaE1Da3NJR0VnUFNCYlhUc0tJQ0FnSUNBZ0lDQnBaaUFvSVhJZ2ZId2djaTV1WlhoMElEMDlQU0J5TG5CeVpYWXBJSEpsZEhWeWJpQmhPd29nSUNBZ0lDQWdJR3hsZENCdkxDQmpMQ0JzTENCb0xDQjFMQ0JrTENCbU93b2dJQ0FnSUNBZ0lHbG1JQ2h1SUNZbUlDaHlJRDBnY25nb2N6RXNJR1VzSUhJc0lIUXBLU3dnY3pFdWJHVnVaM1JvSUQ0Z09EQWdLaUIwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRzhnUFNCc0lEMGdjekZiTUYwc0lHTWdQU0JvSUQwZ2N6RmJNVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJSFE3SUcwZ1BDQnBPeUJ0SUNzOUlIUXBkU0E5SUhNeFcyMWRMQ0JrSUQwZ2N6RmJiU0FySURGZExDQjFJRHdnYnlBbUppQW9ieUE5SUhVcExDQmtJRHdnWXlBbUppQW9ZeUE5SUdRcExDQjFJRDRnYkNBbUppQW9iQ0E5SUhVcExDQmtJRDRnYUNBbUppQW9hQ0E5SUdRcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtSUQwZ1RXRjBhQzV0WVhnb2JDQXRJRzhzSUdnZ0xTQmpLU3dnWmlBOUlHWWdJVDA5SURBZ1B5QXpNamMyTnlBdklHWWdPaUF3T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVDNNb2Npd2dZU3dnZEN3Z2J5d2dZeXdnWml3Z01Da3NJR0U3Q2lBZ0lDQjlDbjA3Q21aMWJtTjBhVzl1SUZCa0tITXhMQ0JsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0JzWlhRZ2Npd2dZVHNLSUNBZ0lHbG1JQ2hwSUQwOVBTQm5lQ2h6TVN3Z1pTd2dkQ3dnYmlrZ1BpQXdLU0JtYjNJb2NpQTlJR1U3SUhJZ1BDQjBPeUJ5SUNzOUlHNHBZU0E5SUhSMUtISXNJSE14VzNKZExDQnpNVnR5SUNzZ01WMHNJR0VwT3dvZ0lDQWdaV3h6WlNCbWIzSW9jaUE5SUhRZ0xTQnVPeUJ5SUQ0OUlHVTdJSElnTFQwZ2JpbGhJRDBnZEhVb2Npd2djekZiY2wwc0lITXhXM0lnS3lBeFhTd2dZU2s3Q2lBZ0lDQnlaWFIxY200Z1lTQW1KaUJOWVNoaExDQmhMbTVsZUhRcElDWW1JQ2hDY3loaEtTd2dZU0E5SUdFdWJtVjRkQ2tzSUdFN0NuMEtablZ1WTNScGIyNGdabWtvY3pFc0lHVXBJSHNLSUNBZ0lHbG1JQ2doY3pFcElISmxkSFZ5YmlCek1Uc0tJQ0FnSUdVZ2ZId2dLR1VnUFNCek1TazdDaUFnSUNCc1pYUWdkQ0E5SUhNeExDQnVPd29nSUNBZ1pHOGdhV1lnS0c0Z1BTQWhNU3dnSVhRdWMzUmxhVzVsY2lBbUppQW9UV0VvZEN3Z2RDNXVaWGgwS1NCOGZDQnpkQ2gwTG5CeVpYWXNJSFFzSUhRdWJtVjRkQ2tnUFQwOUlEQXBLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tFSnpLSFFwTENCMElEMGdaU0E5SUhRdWNISmxkaXdnZENBOVBUMGdkQzV1WlhoMEtTQmljbVZoYXpzS0lDQWdJQ0FnSUNCdUlEMGdJVEE3Q2lBZ0lDQjlJR1ZzYzJVZ2RDQTlJSFF1Ym1WNGREc0tJQ0FnSUhkb2FXeGxJQ2h1SUh4OElIUWdJVDA5SUdVcENpQWdJQ0J5WlhSMWNtNGdaVHNLZlFwbWRXNWpkR2x2YmlCUGN5aHpNU3dnWlN3Z2RDd2diaXdnYVN3Z2Npd2dZU2tnZXdvZ0lDQWdhV1lnS0NGek1Ta2djbVYwZFhKdU93b2dJQ0FnSVdFZ0ppWWdjaUFtSmlCb2VDaHpNU3dnYml3Z2FTd2djaWs3Q2lBZ0lDQnNaWFFnYnlBOUlITXhMQ0JqTENCc093b2dJQ0FnWm05eUtEc2djekV1Y0hKbGRpQWhQVDBnY3pFdWJtVjRkRHNwZXdvZ0lDQWdJQ0FnSUdsbUlDaGpJRDBnY3pFdWNISmxkaXdnYkNBOUlITXhMbTVsZUhRc0lISWdQeUJ1ZUNoek1Td2diaXdnYVN3Z2Npa2dPaUIwZUNoek1Ta3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pTNXdkWE5vS0dNdWFTQXZJSFFnZkNBd0tTd2daUzV3ZFhOb0tITXhMbWtnTHlCMElId2dNQ2tzSUdVdWNIVnphQ2hzTG1rZ0x5QjBJSHdnTUNrc0lFSnpLSE14S1N3Z2N6RWdQU0JzTG01bGVIUXNJRzhnUFNCc0xtNWxlSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvY3pFZ1BTQnNMQ0J6TVNBOVBUMGdieWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmhJRDhnWVNBOVBUMGdNU0EvSUNoek1TQTlJR2w0S0dacEtITXhLU3dnWlN3Z2RDa3NJRTl6S0hNeExDQmxMQ0IwTENCdUxDQnBMQ0J5TENBeUtTa2dPaUJoSUQwOVBTQXlJQ1ltSUhONEtITXhMQ0JsTENCMExDQnVMQ0JwTENCeUtTQTZJRTl6S0dacEtITXhLU3dnWlN3Z2RDd2diaXdnYVN3Z2Npd2dNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCMGVDaHpNU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQnpNUzV3Y21WMkxDQjBJRDBnY3pFc0lHNGdQU0J6TVM1dVpYaDBPd29nSUNBZ2FXWWdLSE4wS0dVc0lIUXNJRzRwSUQ0OUlEQXBJSEpsZEhWeWJpQWhNVHNLSUNBZ0lHeGxkQ0JwSUQwZ1pTNTRMQ0J5SUQwZ2RDNTRMQ0JoSUQwZ2JpNTRMQ0J2SUQwZ1pTNTVMQ0JqSUQwZ2RDNTVMQ0JzSUQwZ2JpNTVMQ0JvSUQwZ2FTQThJSElnUHlCcElEd2dZU0EvSUdrZ09pQmhJRG9nY2lBOElHRWdQeUJ5SURvZ1lTd2dkU0E5SUc4Z1BDQmpJRDhnYnlBOElHd2dQeUJ2SURvZ2JDQTZJR01nUENCc0lEOGdZeUE2SUd3c0lHUWdQU0JwSUQ0Z2NpQS9JR2tnUGlCaElEOGdhU0E2SUdFZ09pQnlJRDRnWVNBL0lISWdPaUJoTENCbUlEMGdieUErSUdNZ1B5QnZJRDRnYkNBL0lHOGdPaUJzSURvZ1l5QStJR3dnUHlCaklEb2diQ3dnYlNBOUlHNHVibVY0ZERzS0lDQWdJR1p2Y2lnN0lHMGdJVDA5SUdVN0tYc0tJQ0FnSUNBZ0lDQnBaaUFvYlM1NElENDlJR2dnSmlZZ2JTNTRJRHc5SUdRZ0ppWWdiUzU1SUQ0OUlIVWdKaVlnYlM1NUlEdzlJR1lnSmlZZ1Iya29hU3dnYnl3Z2Npd2dZeXdnWVN3Z2JDd2diUzU0TENCdExua3BJQ1ltSUhOMEtHMHVjSEpsZGl3Z2JTd2diUzV1WlhoMEtTQStQU0F3S1NCeVpYUjFjbTRnSVRFN0NpQWdJQ0FnSUNBZ2JTQTlJRzB1Ym1WNGREc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQWhNRHNLZlFwbWRXNWpkR2x2YmlCdWVDaHpNU3dnWlN3Z2RDd2diaWtnZXdvZ0lDQWdiR1YwSUdrZ1BTQnpNUzV3Y21WMkxDQnlJRDBnY3pFc0lHRWdQU0J6TVM1dVpYaDBPd29nSUNBZ2FXWWdLSE4wS0drc0lISXNJR0VwSUQ0OUlEQXBJSEpsZEhWeWJpQWhNVHNLSUNBZ0lHeGxkQ0J2SUQwZ2FTNTRMQ0JqSUQwZ2NpNTRMQ0JzSUQwZ1lTNTRMQ0JvSUQwZ2FTNTVMQ0IxSUQwZ2NpNTVMQ0JrSUQwZ1lTNTVMQ0JtSUQwZ2J5QThJR01nUHlCdklEd2diQ0EvSUc4Z09pQnNJRG9nWXlBOElHd2dQeUJqSURvZ2JDd2diU0E5SUdnZ1BDQjFJRDhnYUNBOElHUWdQeUJvSURvZ1pDQTZJSFVnUENCa0lEOGdkU0E2SUdRc0lGOGdQU0J2SUQ0Z1l5QS9JRzhnUGlCc0lEOGdieUE2SUd3Z09pQmpJRDRnYkNBL0lHTWdPaUJzTENCbklEMGdhQ0ErSUhVZ1B5Qm9JRDRnWkNBL0lHZ2dPaUJrSURvZ2RTQStJR1FnUHlCMUlEb2daQ3dnY0NBOUlFdHZLR1lzSUcwc0lHVXNJSFFzSUc0cExDQjJJRDBnUzI4b1h5d2daeXdnWlN3Z2RDd2diaWtzSUhnZ1BTQnpNUzV3Y21WMldpd2dlU0E5SUhNeExtNWxlSFJhT3dvZ0lDQWdabTl5S0RzZ2VDQW1KaUI0TG5vZ1BqMGdjQ0FtSmlCNUlDWW1JSGt1ZWlBOFBTQjJPeWw3Q2lBZ0lDQWdJQ0FnYVdZZ0tIZ3VlQ0ErUFNCbUlDWW1JSGd1ZUNBOFBTQmZJQ1ltSUhndWVTQStQU0J0SUNZbUlIZ3VlU0E4UFNCbklDWW1JSGdnSVQwOUlHa2dKaVlnZUNBaFBUMGdZU0FtSmlCSGFTaHZMQ0JvTENCakxDQjFMQ0JzTENCa0xDQjRMbmdzSUhndWVTa2dKaVlnYzNRb2VDNXdjbVYyTENCNExDQjRMbTVsZUhRcElENDlJREFnZkh3Z0tIZ2dQU0I0TG5CeVpYWmFMQ0I1TG5nZ1BqMGdaaUFtSmlCNUxuZ2dQRDBnWHlBbUppQjVMbmtnUGowZ2JTQW1KaUI1TG5rZ1BEMGdaeUFtSmlCNUlDRTlQU0JwSUNZbUlIa2dJVDA5SUdFZ0ppWWdSMmtvYnl3Z2FDd2dZeXdnZFN3Z2JDd2daQ3dnZVM1NExDQjVMbmtwSUNZbUlITjBLSGt1Y0hKbGRpd2dlU3dnZVM1dVpYaDBLU0ErUFNBd0tTa2djbVYwZFhKdUlDRXhPd29nSUNBZ0lDQWdJSGtnUFNCNUxtNWxlSFJhT3dvZ0lDQWdmUW9nSUNBZ1ptOXlLRHNnZUNBbUppQjRMbm9nUGowZ2NEc3Bld29nSUNBZ0lDQWdJR2xtSUNoNExuZ2dQajBnWmlBbUppQjRMbmdnUEQwZ1h5QW1KaUI0TG5rZ1BqMGdiU0FtSmlCNExua2dQRDBnWnlBbUppQjRJQ0U5UFNCcElDWW1JSGdnSVQwOUlHRWdKaVlnUjJrb2J5d2dhQ3dnWXl3Z2RTd2diQ3dnWkN3Z2VDNTRMQ0I0TG5rcElDWW1JSE4wS0hndWNISmxkaXdnZUN3Z2VDNXVaWGgwS1NBK1BTQXdLU0J5WlhSMWNtNGdJVEU3Q2lBZ0lDQWdJQ0FnZUNBOUlIZ3VjSEpsZGxvN0NpQWdJQ0I5Q2lBZ0lDQm1iM0lvT3lCNUlDWW1JSGt1ZWlBOFBTQjJPeWw3Q2lBZ0lDQWdJQ0FnYVdZZ0tIa3VlQ0ErUFNCbUlDWW1JSGt1ZUNBOFBTQmZJQ1ltSUhrdWVTQStQU0J0SUNZbUlIa3VlU0E4UFNCbklDWW1JSGtnSVQwOUlHa2dKaVlnZVNBaFBUMGdZU0FtSmlCSGFTaHZMQ0JvTENCakxDQjFMQ0JzTENCa0xDQjVMbmdzSUhrdWVTa2dKaVlnYzNRb2VTNXdjbVYyTENCNUxDQjVMbTVsZUhRcElENDlJREFwSUhKbGRIVnliaUFoTVRzS0lDQWdJQ0FnSUNCNUlEMGdlUzV1WlhoMFdqc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQWhNRHNLZlFwbWRXNWpkR2x2YmlCcGVDaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCek1Uc0tJQ0FnSUdSdklIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHNHVjSEpsZGl3Z2NpQTlJRzR1Ym1WNGRDNXVaWGgwT3dvZ0lDQWdJQ0FnSUNGTllTaHBMQ0J5S1NBbUppQk1aQ2hwTENCdUxDQnVMbTVsZUhRc0lISXBJQ1ltSUVaektHa3NJSElwSUNZbUlFWnpLSElzSUdrcElDWW1JQ2hsTG5CMWMyZ29hUzVwSUM4Z2RDQjhJREFwTENCbExuQjFjMmdvYmk1cElDOGdkQ0I4SURBcExDQmxMbkIxYzJnb2NpNXBJQzhnZENCOElEQXBMQ0JDY3lodUtTd2dRbk1vYmk1dVpYaDBLU3dnYmlBOUlITXhJRDBnY2lrc0lHNGdQU0J1TG01bGVIUTdDaUFnSUNCOWQyaHBiR1VnS0c0Z0lUMDlJSE14S1FvZ0lDQWdjbVYwZFhKdUlHWnBLRzRwT3dwOUNtWjFibU4wYVc5dUlITjRLSE14TENCbExDQjBMQ0J1TENCcExDQnlLU0I3Q2lBZ0lDQnNaWFFnWVNBOUlITXhPd29nSUNBZ1pHOGdld29nSUNBZ0lDQWdJR3hsZENCdklEMGdZUzV1WlhoMExtNWxlSFE3Q2lBZ0lDQWdJQ0FnWm05eUtEc2dieUFoUFQwZ1lTNXdjbVYyT3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaExta2dJVDA5SUc4dWFTQW1KaUJtZUNoaExDQnZLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTWdQU0JKWkNoaExDQnZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0VnUFNCbWFTaGhMQ0JoTG01bGVIUXBMQ0JqSUQwZ1pta29ZeXdnWXk1dVpYaDBLU3dnVDNNb1lTd2daU3dnZEN3Z2Jpd2dhU3dnY2l3Z01Da3NJRTl6S0dNc0lHVXNJSFFzSUc0c0lHa3NJSElzSURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUc4Z1BTQnZMbTVsZUhRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHRWdQU0JoTG01bGVIUTdDaUFnSUNCOWQyaHBiR1VnS0dFZ0lUMDlJSE14S1FwOUNtWjFibU4wYVc5dUlISjRLSE14TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJRnRkTENCeUxDQmhMQ0J2TENCakxDQnNPd29nSUNBZ1ptOXlLSElnUFNBd0xDQmhJRDBnWlM1c1pXNW5kR2c3SUhJZ1BDQmhPeUJ5S3lzcGJ5QTlJR1ZiY2wwZ0tpQnVMQ0JqSUQwZ2NpQThJR0VnTFNBeElEOGdaVnR5SUNzZ01WMGdLaUJ1SURvZ2N6RXViR1Z1WjNSb0xDQnNJRDBnVUdRb2N6RXNJRzhzSUdNc0lHNHNJQ0V4S1N3Z2JDQTlQVDBnYkM1dVpYaDBJQ1ltSUNoc0xuTjBaV2x1WlhJZ1BTQWhNQ2tzSUdrdWNIVnphQ2hrZUNoc0tTazdDaUFnSUNCbWIzSW9hUzV6YjNKMEtHRjRLU3dnY2lBOUlEQTdJSElnUENCcExteGxibWQwYURzZ2Npc3JLWFFnUFNCdmVDaHBXM0pkTENCMEtUc0tJQ0FnSUhKbGRIVnliaUIwT3dwOUNtWjFibU4wYVc5dUlHRjRLSE14TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnY3pFdWVDQXRJR1V1ZURzS2ZRcG1kVzVqZEdsdmJpQnZlQ2h6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCamVDaHpNU3dnWlNrN0NpQWdJQ0JwWmlBb0lYUXBJSEpsZEhWeWJpQmxPd29nSUNBZ2JHVjBJRzRnUFNCSlpDaDBMQ0J6TVNrN0NpQWdJQ0J5WlhSMWNtNGdabWtvYml3Z2JpNXVaWGgwS1N3Z1pta29kQ3dnZEM1dVpYaDBLVHNLZlFwbWRXNWpkR2x2YmlCamVDaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0JsTENCdUlEMGdMVEVnTHlBd0xDQnBMQ0J5SUQwZ2N6RXVlQ3dnWVNBOUlITXhMbms3Q2lBZ0lDQmtieUI3Q2lBZ0lDQWdJQ0FnYVdZZ0tHRWdQRDBnZEM1NUlDWW1JR0VnUGowZ2RDNXVaWGgwTG5rZ0ppWWdkQzV1WlhoMExua2dJVDA5SUhRdWVTa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUhRdWVDQXJJQ2hoSUMwZ2RDNTVLU0FxSUNoMExtNWxlSFF1ZUNBdElIUXVlQ2tnTHlBb2RDNXVaWGgwTG5rZ0xTQjBMbmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkNBOFBTQnlJQ1ltSUdRZ1BpQnVJQ1ltSUNodUlEMGdaQ3dnYVNBOUlIUXVlQ0E4SUhRdWJtVjRkQzU0SUQ4Z2RDQTZJSFF1Ym1WNGRDd2daQ0E5UFQwZ2Npa3BJSEpsZEhWeWJpQnBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwSUQwZ2RDNXVaWGgwT3dvZ0lDQWdmWGRvYVd4bElDaDBJQ0U5UFNCbEtRb2dJQ0FnYVdZZ0tDRnBLU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJR3hsZENCdklEMGdhU3dnWXlBOUlHa3VlQ3dnYkNBOUlHa3VlU3dnYUNBOUlERWdMeUF3TENCMU93b2dJQ0FnZENBOUlHazdDaUFnSUNCa2J5QnlJRDQ5SUhRdWVDQW1KaUIwTG5nZ1BqMGdZeUFtSmlCeUlDRTlQU0IwTG5nZ0ppWWdSMmtvWVNBOElHd2dQeUJ5SURvZ2Jpd2dZU3dnWXl3Z2JDd2dZU0E4SUd3Z1B5QnVJRG9nY2l3Z1lTd2dkQzU0TENCMExua3BJQ1ltSUNoMUlEMGdUV0YwYUM1aFluTW9ZU0F0SUhRdWVTa2dMeUFvY2lBdElIUXVlQ2tzSUVaektIUXNJSE14S1NBbUppQW9kU0E4SUdnZ2ZId2dkU0E5UFQwZ2FDQW1KaUFvZEM1NElENGdhUzU0SUh4OElIUXVlQ0E5UFQwZ2FTNTRJQ1ltSUd4NEtHa3NJSFFwS1NrZ0ppWWdLR2tnUFNCMExDQm9JRDBnZFNrcExDQjBJRDBnZEM1dVpYaDBPd29nSUNBZ2QyaHBiR1VnS0hRZ0lUMDlJRzhwQ2lBZ0lDQnlaWFIxY200Z2FUc0tmUXBtZFc1amRHbHZiaUJzZUNoek1Td2daU2tnZXdvZ0lDQWdjbVYwZFhKdUlITjBLSE14TG5CeVpYWXNJSE14TENCbExuQnlaWFlwSUR3Z01DQW1KaUJ6ZENobExtNWxlSFFzSUhNeExDQnpNUzV1WlhoMEtTQThJREE3Q24wS1puVnVZM1JwYjI0Z2FIZ29jekVzSUdVc0lIUXNJRzRwSUhzS0lDQWdJR3hsZENCcElEMGdjekU3Q2lBZ0lDQmtieUJwTG5vZ1BUMDlJREFnSmlZZ0tHa3VlaUE5SUV0dktHa3VlQ3dnYVM1NUxDQmxMQ0IwTENCdUtTa3NJR2t1Y0hKbGRsb2dQU0JwTG5CeVpYWXNJR2t1Ym1WNGRGb2dQU0JwTG01bGVIUXNJR2tnUFNCcExtNWxlSFE3Q2lBZ0lDQjNhR2xzWlNBb2FTQWhQVDBnY3pFcENpQWdJQ0JwTG5CeVpYWmFMbTVsZUhSYUlEMGdiblZzYkN3Z2FTNXdjbVYyV2lBOUlHNTFiR3dzSUhWNEtHa3BPd3A5Q21aMWJtTjBhVzl1SUhWNEtITXhLU0I3Q2lBZ0lDQnNaWFFnWlN3Z2RDd2diaXdnYVN3Z2Npd2dZU3dnYnl3Z1l5d2diQ0E5SURFN0NpQWdJQ0JrYnlCN0NpQWdJQ0FnSUNBZ1ptOXlLSFFnUFNCek1Td2djekVnUFNCdWRXeHNMQ0J5SUQwZ2JuVnNiQ3dnWVNBOUlEQTdJSFE3S1hzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0dFckt5d2diaUE5SUhRc0lHOGdQU0F3TENCbElEMGdNRHNnWlNBOElHd2dKaVlnS0c4ckt5d2diaUE5SUc0dWJtVjRkRm9zSUNFaGJpazdJR1VyS3lrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loaklEMGdiRHNnYnlBK0lEQWdmSHdnWXlBK0lEQWdKaVlnYmpzcGJ5QWhQVDBnTUNBbUppQW9ZeUE5UFQwZ01DQjhmQ0FoYmlCOGZDQjBMbm9nUEQwZ2JpNTZLU0EvSUNocElEMGdkQ3dnZENBOUlIUXVibVY0ZEZvc0lHOHRMU2tnT2lBb2FTQTlJRzRzSUc0Z1BTQnVMbTVsZUhSYUxDQmpMUzBwTENCeUlEOGdjaTV1WlhoMFdpQTlJR2tnT2lCek1TQTlJR2tzSUdrdWNISmxkbG9nUFNCeUxDQnlJRDBnYVRzS0lDQWdJQ0FnSUNBZ0lDQWdkQ0E5SUc0N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISXVibVY0ZEZvZ1BTQnVkV3hzTENCc0lDbzlJREk3Q2lBZ0lDQjlkMmhwYkdVZ0tHRWdQaUF4S1FvZ0lDQWdjbVYwZFhKdUlITXhPd3A5Q21aMWJtTjBhVzl1SUV0dktITXhMQ0JsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0J5WlhSMWNtNGdjekVnUFNBb2N6RWdMU0IwS1NBcUlHa2dmQ0F3TENCbElEMGdLR1VnTFNCdUtTQXFJR2tnZkNBd0xDQnpNU0E5SUNoek1TQjhJSE14SUR3OElEZ3BJQ1lnTVRZM01URTVNelVzSUhNeElEMGdLSE14SUh3Z2N6RWdQRHdnTkNrZ0ppQXlOVEkyTkRVeE16VXNJSE14SUQwZ0tITXhJSHdnY3pFZ1BEd2dNaWtnSmlBNE5UZzVPVE0wTlRrc0lITXhJRDBnS0hNeElId2djekVnUER3Z01Ta2dKaUF4TkRNeE5qVTFOelkxTENCbElEMGdLR1VnZkNCbElEdzhJRGdwSUNZZ01UWTNNVEU1TXpVc0lHVWdQU0FvWlNCOElHVWdQRHdnTkNrZ0ppQXlOVEkyTkRVeE16VXNJR1VnUFNBb1pTQjhJR1VnUER3Z01pa2dKaUE0TlRnNU9UTTBOVGtzSUdVZ1BTQW9aU0I4SUdVZ1BEd2dNU2tnSmlBeE5ETXhOalUxTnpZMUxDQnpNU0I4SUdVZ1BEd2dNVHNLZlFwbWRXNWpkR2x2YmlCa2VDaHpNU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQnpNU3dnZENBOUlITXhPd29nSUNBZ1pHOGdLR1V1ZUNBOElIUXVlQ0I4ZkNCbExuZ2dQVDA5SUhRdWVDQW1KaUJsTG5rZ1BDQjBMbmtwSUNZbUlDaDBJRDBnWlNrc0lHVWdQU0JsTG01bGVIUTdDaUFnSUNCM2FHbHNaU0FvWlNBaFBUMGdjekVwQ2lBZ0lDQnlaWFIxY200Z2REc0tmUXBtZFc1amRHbHZiaUJIYVNoek1Td2daU3dnZEN3Z2Jpd2dhU3dnY2l3Z1lTd2dieWtnZXdvZ0lDQWdjbVYwZFhKdUlDaHBJQzBnWVNrZ0tpQW9aU0F0SUc4cElENDlJQ2h6TVNBdElHRXBJQ29nS0hJZ0xTQnZLU0FtSmlBb2N6RWdMU0JoS1NBcUlDaHVJQzBnYnlrZ1BqMGdLSFFnTFNCaEtTQXFJQ2hsSUMwZ2J5a2dKaVlnS0hRZ0xTQmhLU0FxSUNoeUlDMGdieWtnUGowZ0tHa2dMU0JoS1NBcUlDaHVJQzBnYnlrN0NuMEtablZ1WTNScGIyNGdabmdvY3pFc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCek1TNXVaWGgwTG1rZ0lUMDlJR1V1YVNBbUppQnpNUzV3Y21WMkxta2dJVDA5SUdVdWFTQW1KaUFoY0hnb2N6RXNJR1VwSUNZbUlDaEdjeWh6TVN3Z1pTa2dKaVlnUm5Nb1pTd2djekVwSUNZbUlHMTRLSE14TENCbEtTQW1KaUFvYzNRb2N6RXVjSEpsZGl3Z2N6RXNJR1V1Y0hKbGRpa2dmSHdnYzNRb2N6RXNJR1V1Y0hKbGRpd2daU2twSUh4OElFMWhLSE14TENCbEtTQW1KaUJ6ZENoek1TNXdjbVYyTENCek1Td2djekV1Ym1WNGRDa2dQaUF3SUNZbUlITjBLR1V1Y0hKbGRpd2daU3dnWlM1dVpYaDBLU0ErSURBcE93cDlDbVoxYm1OMGFXOXVJSE4wS0hNeExDQmxMQ0IwS1NCN0NpQWdJQ0J5WlhSMWNtNGdLR1V1ZVNBdElITXhMbmtwSUNvZ0tIUXVlQ0F0SUdVdWVDa2dMU0FvWlM1NElDMGdjekV1ZUNrZ0tpQW9kQzU1SUMwZ1pTNTVLVHNLZlFwbWRXNWpkR2x2YmlCTllTaHpNU3dnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJSE14TG5nZ1BUMDlJR1V1ZUNBbUppQnpNUzU1SUQwOVBTQmxMbms3Q24wS1puVnVZM1JwYjI0Z1RHUW9jekVzSUdVc0lIUXNJRzRwSUhzS0lDQWdJR3hsZENCcElEMGdZbklvYzNRb2N6RXNJR1VzSUhRcEtTd2djaUE5SUdKeUtITjBLSE14TENCbExDQnVLU2tzSUdFZ1BTQmljaWh6ZENoMExDQnVMQ0J6TVNrcExDQnZJRDBnWW5Jb2MzUW9kQ3dnYml3Z1pTa3BPd29nSUNBZ2NtVjBkWEp1SUNFaEtHa2dJVDA5SUhJZ0ppWWdZU0FoUFQwZ2J5QjhmQ0JwSUQwOVBTQXdJQ1ltSUZOeUtITXhMQ0IwTENCbEtTQjhmQ0J5SUQwOVBTQXdJQ1ltSUZOeUtITXhMQ0J1TENCbEtTQjhmQ0JoSUQwOVBTQXdJQ1ltSUZOeUtIUXNJSE14TENCdUtTQjhmQ0J2SUQwOVBTQXdJQ1ltSUZOeUtIUXNJR1VzSUc0cEtUc0tmUXBtZFc1amRHbHZiaUJUY2loek1Td2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJR1V1ZUNBOFBTQk5ZWFJvTG0xaGVDaHpNUzU0TENCMExuZ3BJQ1ltSUdVdWVDQStQU0JOWVhSb0xtMXBiaWh6TVM1NExDQjBMbmdwSUNZbUlHVXVlU0E4UFNCTllYUm9MbTFoZUNoek1TNTVMQ0IwTG5rcElDWW1JR1V1ZVNBK1BTQk5ZWFJvTG0xcGJpaHpNUzU1TENCMExua3BPd3A5Q21aMWJtTjBhVzl1SUdKeUtITXhLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RWdQaUF3SUQ4Z01TQTZJSE14SUR3Z01DQS9JQzB4SURvZ01Ec0tmUXBtZFc1amRHbHZiaUJ3ZUNoek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQnpNVHNLSUNBZ0lHUnZJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RDNXBJQ0U5UFNCek1TNXBJQ1ltSUhRdWJtVjRkQzVwSUNFOVBTQnpNUzVwSUNZbUlIUXVhU0FoUFQwZ1pTNXBJQ1ltSUhRdWJtVjRkQzVwSUNFOVBTQmxMbWtnSmlZZ1RHUW9kQ3dnZEM1dVpYaDBMQ0J6TVN3Z1pTa3BJSEpsZEhWeWJpQWhNRHNLSUNBZ0lDQWdJQ0IwSUQwZ2RDNXVaWGgwT3dvZ0lDQWdmWGRvYVd4bElDaDBJQ0U5UFNCek1Ta0tJQ0FnSUhKbGRIVnliaUFoTVRzS2ZRcG1kVzVqZEdsdmJpQkdjeWh6TVN3Z1pTa2dld29nSUNBZ2NtVjBkWEp1SUhOMEtITXhMbkJ5WlhZc0lITXhMQ0J6TVM1dVpYaDBLU0E4SURBZ1B5QnpkQ2h6TVN3Z1pTd2djekV1Ym1WNGRDa2dQajBnTUNBbUppQnpkQ2h6TVN3Z2N6RXVjSEpsZGl3Z1pTa2dQajBnTUNBNklITjBLSE14TENCbExDQnpNUzV3Y21WMktTQThJREFnZkh3Z2MzUW9jekVzSUhNeExtNWxlSFFzSUdVcElEd2dNRHNLZlFwbWRXNWpkR2x2YmlCdGVDaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0J6TVN3Z2JpQTlJQ0V4TENCcElEMGdLSE14TG5nZ0t5QmxMbmdwSUM4Z01pd2djaUE5SUNoek1TNTVJQ3NnWlM1NUtTQXZJREk3Q2lBZ0lDQmtieUIwTG5rZ1BpQnlJQ0U5SUhRdWJtVjRkQzU1SUQ0Z2NpQW1KaUIwTG01bGVIUXVlU0FoUFQwZ2RDNTVJQ1ltSUdrZ1BDQW9kQzV1WlhoMExuZ2dMU0IwTG5ncElDb2dLSElnTFNCMExua3BJQzhnS0hRdWJtVjRkQzU1SUMwZ2RDNTVLU0FySUhRdWVDQW1KaUFvYmlBOUlDRnVLU3dnZENBOUlIUXVibVY0ZERzS0lDQWdJSGRvYVd4bElDaDBJQ0U5UFNCek1Ta0tJQ0FnSUhKbGRIVnliaUJ1T3dwOUNtWjFibU4wYVc5dUlFbGtLSE14TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SUc1bGR5QlJieWh6TVM1cExDQnpNUzU0TENCek1TNTVLU3dnYmlBOUlHNWxkeUJSYnlobExta3NJR1V1ZUN3Z1pTNTVLU3dnYVNBOUlITXhMbTVsZUhRc0lISWdQU0JsTG5CeVpYWTdDaUFnSUNCeVpYUjFjbTRnY3pFdWJtVjRkQ0E5SUdVc0lHVXVjSEpsZGlBOUlITXhMQ0IwTG01bGVIUWdQU0JwTENCcExuQnlaWFlnUFNCMExDQnVMbTVsZUhRZ1BTQjBMQ0IwTG5CeVpYWWdQU0J1TENCeUxtNWxlSFFnUFNCdUxDQnVMbkJ5WlhZZ1BTQnlMQ0J1T3dwOUNtWjFibU4wYVc5dUlIUjFLSE14TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJRzVsZHlCUmJ5aHpNU3dnWlN3Z2RDazdDaUFnSUNCeVpYUjFjbTRnYmlBL0lDaHBMbTVsZUhRZ1BTQnVMbTVsZUhRc0lHa3VjSEpsZGlBOUlHNHNJRzR1Ym1WNGRDNXdjbVYySUQwZ2FTd2diaTV1WlhoMElEMGdhU2tnT2lBb2FTNXdjbVYySUQwZ2FTd2dhUzV1WlhoMElEMGdhU2tzSUdrN0NuMEtablZ1WTNScGIyNGdRbk1vY3pFcElIc0tJQ0FnSUhNeExtNWxlSFF1Y0hKbGRpQTlJSE14TG5CeVpYWXNJSE14TG5CeVpYWXVibVY0ZENBOUlITXhMbTVsZUhRc0lITXhMbkJ5WlhaYUlDWW1JQ2h6TVM1d2NtVjJXaTV1WlhoMFdpQTlJSE14TG01bGVIUmFLU3dnY3pFdWJtVjRkRm9nSmlZZ0tITXhMbTVsZUhSYUxuQnlaWFphSUQwZ2N6RXVjSEpsZGxvcE93cDlDbVoxYm1OMGFXOXVJRkZ2S0hNeExDQmxMQ0IwS1NCN0NpQWdJQ0IwYUdsekxta2dQU0J6TVN3Z2RHaHBjeTU0SUQwZ1pTd2dkR2hwY3k1NUlEMGdkQ3dnZEdocGN5NXdjbVYySUQwZ2JuVnNiQ3dnZEdocGN5NXVaWGgwSUQwZ2JuVnNiQ3dnZEdocGN5NTZJRDBnTUN3Z2RHaHBjeTV3Y21WMldpQTlJRzUxYkd3c0lIUm9hWE11Ym1WNGRGb2dQU0J1ZFd4c0xDQjBhR2x6TG5OMFpXbHVaWElnUFNBaE1Uc0tmUXBtZFc1amRHbHZiaUJuZUNoek1Td2daU3dnZEN3Z2Jpa2dld29nSUNBZ2JHVjBJR2tnUFNBd093b2dJQ0FnWm05eUtHeGxkQ0J5SUQwZ1pTd2dZU0E5SUhRZ0xTQnVPeUJ5SUR3Z2REc2djaUFyUFNCdUtXa2dLejBnS0hNeFcyRmRJQzBnY3pGYmNsMHBJQ29nS0hNeFczSWdLeUF4WFNBcklITXhXMkVnS3lBeFhTa3NJR0VnUFNCeU93b2dJQ0FnY21WMGRYSnVJR2s3Q24wS2RtRnlJSGx1SUQwZ1kyeGhjM01nY3pFZ2V3b2dJQ0FnYzNSaGRHbGpJR0Z5WldFb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVzWlc1bmRHZ3NJRzRnUFNBd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJSFFnTFNBeExDQnlJRDBnTURzZ2NpQThJSFE3SUdrZ1BTQnlLeXNwYmlBclBTQmxXMmxkTG5nZ0tpQmxXM0pkTG5rZ0xTQmxXM0pkTG5nZ0tpQmxXMmxkTG5rN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0Z0tpQXVOVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJwYzBOc2IyTnJWMmx6WlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITXhMbUZ5WldFb1pTa2dQQ0F3T3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUhSeWFXRnVaM1ZzWVhSbFUyaGhjR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdXMTBzSUdrZ1BTQmJYU3dnY2lBOUlGdGRPd29nSUNBZ0lDQWdJRzUxS0dVcExDQnBkU2h1TENCbEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlHVXViR1Z1WjNSb093b2dJQ0FnSUNBZ0lIUXVabTl5UldGamFDaHVkU2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JqSUQwZ01Ec2dZeUE4SUhRdWJHVnVaM1JvT3lCakt5c3BhUzV3ZFhOb0tHRXBMQ0JoSUNzOUlIUmJZMTB1YkdWdVozUm9MQ0JwZFNodUxDQjBXMk5kS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUdWNExuUnlhV0Z1WjNWc1lYUmxLRzRzSUdrcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1l5QTlJREE3SUdNZ1BDQnZMbXhsYm1kMGFEc2dZeUFyUFNBektYSXVjSFZ6YUNodkxuTnNhV05sS0dNc0lHTWdLeUF6S1NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhJN0NpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlHNTFLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJSE14TG14bGJtZDBhRHNLSUNBZ0lHVWdQaUF5SUNZbUlITXhXMlVnTFNBeFhTNWxjWFZoYkhNb2N6RmJNRjBwSUNZbUlITXhMbkJ2Y0NncE93cDlDbVoxYm1OMGFXOXVJR2wxS0hNeExDQmxLU0I3Q2lBZ0lDQm1iM0lvYkdWMElIUWdQU0F3T3lCMElEd2daUzVzWlc1bmRHZzdJSFFyS3lsek1TNXdkWE5vS0dWYmRGMHVlQ2tzSUhNeExuQjFjMmdvWlZ0MFhTNTVLVHNLZlFwMllYSWdhbThnUFNCamJHRnpjeUJ6TVNCbGVIUmxibVJ6SUVkbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1WlhjZ1JtNG9Xd29nSUNBZ0lDQWdJRzVsZHlCYUtDNDFMQ0F1TlNrc0NpQWdJQ0FnSUNBZ2JtVjNJRm9vTFM0MUxDQXVOU2tzQ2lBZ0lDQWdJQ0FnYm1WM0lGb29MUzQxTENBdExqVXBMQW9nSUNBZ0lDQWdJRzVsZHlCYUtDNDFMQ0F0TGpVcENpQWdJQ0JkS1N3Z2RDQTlJSHQ5S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMblI1Y0dVZ1BTQWlSWGgwY25Wa1pVZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCemFHRndaWE02SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJSFFLSUNBZ0lDQWdJQ0I5TENCbElEMGdRWEp5WVhrdWFYTkJjbkpoZVNobEtTQS9JR1VnT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJR1VLSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5d2dhU0E5SUZ0ZExDQnlJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdklEMGdNQ3dnWXlBOUlHVXViR1Z1WjNSb095QnZJRHdnWXpzZ2J5c3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCbFcyOWRPd29nSUNBZ0lDQWdJQ0FnSUNCaEtHd3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2dkbVVvYVN3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpZFhZaUxDQnVaWGNnZG1Vb2Npd2dNaWtwTENCMGFHbHpMbU52YlhCMWRHVldaWEowWlhoT2IzSnRZV3h6S0NrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1lTaHZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1cxMHNJR3dnUFNCMExtTjFjblpsVTJWbmJXVnVkSE1nSVQwOUlIWnZhV1FnTUNBL0lIUXVZM1Z5ZG1WVFpXZHRaVzUwY3lBNklERXlMQ0JvSUQwZ2RDNXpkR1Z3Y3lBaFBUMGdkbTlwWkNBd0lEOGdkQzV6ZEdWd2N5QTZJREVzSUhVZ1BTQjBMbVJsY0hSb0lDRTlQU0IyYjJsa0lEQWdQeUIwTG1SbGNIUm9JRG9nTVN3Z1pDQTlJSFF1WW1WMlpXeEZibUZpYkdWa0lDRTlQU0IyYjJsa0lEQWdQeUIwTG1KbGRtVnNSVzVoWW14bFpDQTZJQ0V3TENCbUlEMGdkQzVpWlhabGJGUm9hV05yYm1WemN5QWhQVDBnZG05cFpDQXdJRDhnZEM1aVpYWmxiRlJvYVdOcmJtVnpjeUE2SUM0eUxDQnRJRDBnZEM1aVpYWmxiRk5wZW1VZ0lUMDlJSFp2YVdRZ01DQS9JSFF1WW1WMlpXeFRhWHBsSURvZ1ppQXRJQzR4TENCZklEMGdkQzVpWlhabGJFOW1abk5sZENBaFBUMGdkbTlwWkNBd0lEOGdkQzVpWlhabGJFOW1abk5sZENBNklEQXNJR2NnUFNCMExtSmxkbVZzVTJWbmJXVnVkSE1nSVQwOUlIWnZhV1FnTUNBL0lIUXVZbVYyWld4VFpXZHRaVzUwY3lBNklETXNJSEFnUFNCMExtVjRkSEoxWkdWUVlYUm9MQ0IySUQwZ2RDNVZWa2RsYm1WeVlYUnZjaUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RDNVZWa2RsYm1WeVlYUnZjaUE2SUY5NExDQjRMQ0I1SUQwZ0lURXNJR0lzSUhjc0lGSXNJRWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIQWdKaVlnS0hnZ1BTQndMbWRsZEZOd1lXTmxaRkJ2YVc1MGN5aG9LU3dnZVNBOUlDRXdMQ0JrSUQwZ0lURXNJR0lnUFNCd0xtTnZiWEIxZEdWR2NtVnVaWFJHY21GdFpYTW9hQ3dnSVRFcExDQjNJRDBnYm1WM0lFRXNJRklnUFNCdVpYY2dRU3dnU1NBOUlHNWxkeUJCS1N3Z1pDQjhmQ0FvWnlBOUlEQXNJR1lnUFNBd0xDQnRJRDBnTUN3Z1h5QTlJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVFNBOUlHOHVaWGgwY21GamRGQnZhVzUwY3loc0tTd2dWQ0E5SUUwdWMyaGhjR1VzSUU4Z1BTQk5MbWh2YkdWek93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYbHVMbWx6UTJ4dlkydFhhWE5sS0ZRcEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVJRDBnVkM1eVpYWmxjbk5sS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUV3Z1BTQXdMQ0J2WlNBOUlFOHViR1Z1WjNSb095Qk1JRHdnYjJVN0lFd3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRmdnUFNCUFcweGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhsdUxtbHpRMnh2WTJ0WGFYTmxLRmdwSUNZbUlDaFBXMHhkSUQwZ1dDNXlaWFpsY25ObEtDa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENBa0lEMGdlVzR1ZEhKcFlXNW5kV3hoZEdWVGFHRndaU2hVTENCUEtTd2dWU0E5SUZRN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdUQ0E5SURBc0lHOWxJRDBnVHk1c1pXNW5kR2c3SUV3Z1BDQnZaVHNnVENzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JZSUQwZ1QxdE1YVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlFnUFNCVUxtTnZibU5oZENoWUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjZLRXdzSUc5bExDQllLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMlVnZkh3Z1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVSWGgwY25Wa1pVZGxiMjFsZEhKNU9pQjJaV01nWkc5bGN5QnViM1FnWlhocGMzUWlLU3dnVEM1amJHOXVaU2dwTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWh2WlN3Z1dDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhFZ1BTQlVMbXhsYm1kMGFDd2dTQ0E5SUNRdWJHVnVaM1JvT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnVaU2hNTENCdlpTd2dXQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbGxMQ0JLTENCVFpTd2diV1VnUFNCTUxuZ2dMU0J2WlM1NExDQjVaU0E5SUV3dWVTQXRJRzlsTG5rc0lFNWxJRDBnV0M1NElDMGdUQzU0TENCeFpTQTlJRmd1ZVNBdElFd3VlU3dnY25RZ1BTQnRaU0FxSUcxbElDc2dlV1VnS2lCNVpTd2dReUE5SUcxbElDb2djV1VnTFNCNVpTQXFJRTVsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFMWhkR2d1WVdKektFTXBJRDRnVG5WdFltVnlMa1ZRVTBsTVQwNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVeUE5SUUxaGRHZ3VjM0Z5ZENoeWRDa3NJRUlnUFNCTllYUm9Mbk54Y25Rb1RtVWdLaUJPWlNBcklIRmxJQ29nY1dVcExDQmxaU0E5SUc5bExuZ2dMU0I1WlNBdklGTXNJR29nUFNCdlpTNTVJQ3NnYldVZ0x5QlRMQ0IwWlNBOUlGZ3VlQ0F0SUhGbElDOGdRaXdnVFdVZ1BTQllMbmtnS3lCT1pTQXZJRUlzSUhKbElEMGdLQ2gwWlNBdElHVmxLU0FxSUhGbElDMGdLRTFsSUMwZ2Fpa2dLaUJPWlNrZ0x5QW9iV1VnS2lCeFpTQXRJSGxsSUNvZ1RtVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbElEMGdaV1VnS3lCdFpTQXFJSEpsSUMwZ1RDNTRMQ0JLSUQwZ2FpQXJJSGxsSUNvZ2NtVWdMU0JNTG5rN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdSbElEMGdhV1VnS2lCcFpTQXJJRW9nS2lCS093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1pTQThQU0F5S1NCeVpYUjFjbTRnYm1WM0lGb29hV1VzSUVvcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk5sSUQwZ1RXRjBhQzV6Y1hKMEtHUmxJQzhnTWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JUSUQwZ0lURTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldVZ1BpQk9kVzFpWlhJdVJWQlRTVXhQVGlBL0lFNWxJRDRnVG5WdFltVnlMa1ZRVTBsTVQwNGdKaVlnS0ZNZ1BTQWhNQ2tnT2lCdFpTQThJQzFPZFcxaVpYSXVSVkJUU1V4UFRpQS9JRTVsSUR3Z0xVNTFiV0psY2k1RlVGTkpURTlPSUNZbUlDaFRJRDBnSVRBcElEb2dUV0YwYUM1emFXZHVLSGxsS1NBOVBUMGdUV0YwYUM1emFXZHVLSEZsS1NBbUppQW9VeUE5SUNFd0tTd2dVeUEvSUNocFpTQTlJQzE1WlN3Z1NpQTlJRzFsTENCVFpTQTlJRTFoZEdndWMzRnlkQ2h5ZENrcElEb2dLR2xsSUQwZ2JXVXNJRW9nUFNCNVpTd2dVMlVnUFNCTllYUm9Mbk54Y25Rb2NuUWdMeUF5S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGb29hV1VnTHlCVFpTd2dTaUF2SUZObEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVnlBOUlGdGRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUV3Z1BTQXdMQ0J2WlNBOUlGVXViR1Z1WjNSb0xDQllJRDBnYjJVZ0xTQXhMQ0JwWlNBOUlFd2dLeUF4T3lCTUlEd2diMlU3SUV3ckt5d2dXQ3NyTENCcFpTc3JLVmdnUFQwOUlHOWxJQ1ltSUNoWUlEMGdNQ2tzSUdsbElEMDlQU0J2WlNBbUppQW9hV1VnUFNBd0tTd2dWMXRNWFNBOUlHNWxLRlZiVEYwc0lGVmJXRjBzSUZWYmFXVmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRXNnUFNCYlhTd2dSQ3dnUnlBOUlGY3VZMjl1WTJGMEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVENBOUlEQXNJRzlsSUQwZ1R5NXNaVzVuZEdnN0lFd2dQQ0J2WlRzZ1RDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWUlEMGdUMXRNWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVRZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdhV1VnUFNBd0xDQktJRDBnV0M1c1pXNW5kR2dzSUZObElEMGdTaUF0SURFc0lHMWxJRDBnYVdVZ0t5QXhPeUJwWlNBOElFbzdJR2xsS3lzc0lGTmxLeXNzSUcxbEt5c3BVMlVnUFQwOUlFb2dKaVlnS0ZObElEMGdNQ2tzSUcxbElEMDlQU0JLSUNZbUlDaHRaU0E5SURBcExDQkVXMmxsWFNBOUlHNWxLRmhiYVdWZExDQllXMU5sWFN3Z1dGdHRaVjBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnU3k1d2RYTm9LRVFwTENCSElEMGdSeTVqYjI1allYUW9SQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JNSUQwZ01Ec2dUQ0E4SUdjN0lFd3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2IyVWdQU0JNSUM4Z1p5d2dXQ0E5SUdZZ0tpQk5ZWFJvTG1OdmN5aHZaU0FxSUUxaGRHZ3VVRWtnTHlBeUtTd2dhV1VnUFNCdElDb2dUV0YwYUM1emFXNG9iMlVnS2lCTllYUm9MbEJKSUM4Z01pa2dLeUJmT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JLSUQwZ01Dd2dVMlVnUFNCVkxteGxibWQwYURzZ1NpQThJRk5sT3lCS0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaU0E5SUhvb1ZWdEtYU3dnVjF0S1hTd2dhV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFVmxLRzFsTG5nc0lHMWxMbmtzSUMxWUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1NpQTlJREFzSUZObElEMGdUeTVzWlc1bmRHZzdJRW9nUENCVFpUc2dTaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldVZ1BTQlBXMHBkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFUWdQU0JMVzBwZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlV1VnUFNBd0xDQk9aU0E5SUcxbExteGxibWQwYURzZ2VXVWdQQ0JPWlRzZ2VXVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeFpTQTlJSG9vYldWYmVXVmRMQ0JFVzNsbFhTd2dhV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JGWlNoeFpTNTRMQ0J4WlM1NUxDQXRXQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvWlNBOUlHMGdLeUJmT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFd2dQU0F3T3lCTUlEd2djVHNnVENzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2WlNBOUlHUWdQeUI2S0ZSYlRGMHNJRWRiVEYwc0lHaGxLU0E2SUZSYlRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJRDhnS0ZJdVkyOXdlU2hpTG01dmNtMWhiSE5iTUYwcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0c5bExuZ3BMQ0IzTG1OdmNIa29ZaTVpYVc1dmNtMWhiSE5iTUYwcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0c5bExua3BMQ0JKTG1OdmNIa29lRnN3WFNrdVlXUmtLRklwTG1Ga1pDaDNLU3dnUldVb1NTNTRMQ0JKTG5rc0lFa3VlaWtwSURvZ1JXVW9iMlV1ZUN3Z2IyVXVlU3dnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCTUlEMGdNVHNnVENBOFBTQm9PeUJNS3lzcFptOXlLR3hsZENCdlpTQTlJREE3SUc5bElEd2djVHNnYjJVckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnV0NBOUlHUWdQeUI2S0ZSYmIyVmRMQ0JIVzI5bFhTd2dhR1VwSURvZ1ZGdHZaVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1SUQ4Z0tGSXVZMjl3ZVNoaUxtNXZjbTFoYkhOYlRGMHBMbTExYkhScGNHeDVVMk5oYkdGeUtGZ3VlQ2tzSUhjdVkyOXdlU2hpTG1KcGJtOXliV0ZzYzF0TVhTa3ViWFZzZEdsd2JIbFRZMkZzWVhJb1dDNTVLU3dnU1M1amIzQjVLSGhiVEYwcExtRmtaQ2hTS1M1aFpHUW9keWtzSUVWbEtFa3VlQ3dnU1M1NUxDQkpMbm9wS1NBNklFVmxLRmd1ZUN3Z1dDNTVMQ0IxSUM4Z2FDQXFJRXdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVENBOUlHY2dMU0F4T3lCTUlENDlJREE3SUV3dExTbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYjJVZ1BTQk1JQzhnWnl3Z1dDQTlJR1lnS2lCTllYUm9MbU52Y3lodlpTQXFJRTFoZEdndVVFa2dMeUF5S1N3Z2FXVWdQU0J0SUNvZ1RXRjBhQzV6YVc0b2IyVWdLaUJOWVhSb0xsQkpJQzhnTWlrZ0t5QmZPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQktJRDBnTUN3Z1UyVWdQU0JWTG14bGJtZDBhRHNnU2lBOElGTmxPeUJLS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdFpTQTlJSG9vVlZ0S1hTd2dWMXRLWFN3Z2FXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVWbEtHMWxMbmdzSUcxbExua3NJSFVnS3lCWUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1NpQTlJREFzSUZObElEMGdUeTVzWlc1bmRHZzdJRW9nUENCVFpUc2dTaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldVZ1BTQlBXMHBkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFUWdQU0JMVzBwZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlV1VnUFNBd0xDQk9aU0E5SUcxbExteGxibWQwYURzZ2VXVWdQQ0JPWlRzZ2VXVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeFpTQTlJSG9vYldWYmVXVmRMQ0JFVzNsbFhTd2dhV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1SUQ4Z1JXVW9jV1V1ZUN3Z2NXVXVlU0FySUhoYmFDQXRJREZkTG5rc0lIaGJhQ0F0SURGZExuZ2dLeUJZS1NBNklFVmxLSEZsTG5nc0lIRmxMbmtzSUhVZ0t5QllLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1ptVW9LU3dnWDJVb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWm1Vb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVENBOUlHa3ViR1Z1WjNSb0lDOGdNenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOWxJRDBnTUN3Z1dDQTlJSEVnS2lCdlpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2xsSUQwZ01Ec2dhV1VnUENCSU95QnBaU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFb2dQU0FrVzJsbFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZHVW9TbHN5WFNBcklGZ3NJRXBiTVYwZ0t5QllMQ0JLV3pCZElDc2dXQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlsSUQwZ2FDQXJJR2NnS2lBeUxDQllJRDBnY1NBcUlHOWxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVdVZ1BTQXdPeUJwWlNBOElFZzdJR2xsS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdTaUE5SUNSYmFXVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVaU2hLV3pCZElDc2dXQ3dnU2xzeFhTQXJJRmdzSUVwYk1sMGdLeUJZS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiMlVnUFNBd095QnZaU0E4SUVnN0lHOWxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dDQTlJQ1JiYjJWZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVVpTaFlXekpkTENCWVd6RmRMQ0JZV3pCZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdlpTQTlJREE3SUc5bElEd2dTRHNnYjJVckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JZSUQwZ0pGdHZaVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlJsS0ZoYk1GMGdLeUJ4SUNvZ2FDd2dXRnN4WFNBcklIRWdLaUJvTENCWVd6SmRJQ3NnY1NBcUlHZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc0dVlXUmtSM0p2ZFhBb1RDd2dhUzVzWlc1bmRHZ2dMeUF6SUMwZ1RDd2dNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWDJVb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVENBOUlHa3ViR1Z1WjNSb0lDOGdNeXdnYjJVZ1BTQXdPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlVvVlN3Z2IyVXBMQ0J2WlNBclBTQlZMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1dDQTlJREFzSUdsbElEMGdUeTVzWlc1bmRHZzdJRmdnUENCcFpUc2dXQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnU2lBOUlFOWJXRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVW9TaXdnYjJVcExDQnZaU0FyUFNCS0xteGxibWQwYURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc0dVlXUmtSM0p2ZFhBb1RDd2dhUzVzWlc1bmRHZ2dMeUF6SUMwZ1RDd2dNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZDJVb1RDd2diMlVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQllJRDBnVEM1c1pXNW5kR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb095QXRMVmdnUGowZ01Ec3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBaU0E5SUZnc0lFb2dQU0JZSUMwZ01Uc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JLSUR3Z01DQW1KaUFvU2lBOUlFd3ViR1Z1WjNSb0lDMGdNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCVFpTQTlJREFzSUcxbElEMGdhQ0FySUdjZ0tpQXlPeUJUWlNBOElHMWxPeUJUWlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGxsSUQwZ2NTQXFJRk5sTENCT1pTQTlJSEVnS2lBb1UyVWdLeUF4S1N3Z2NXVWdQU0J2WlNBcklHbGxJQ3NnZVdVc0lISjBJRDBnYjJVZ0t5QktJQ3NnZVdVc0lFTWdQU0J2WlNBcklFb2dLeUJPWlN3Z1V5QTlJRzlsSUNzZ2FXVWdLeUJPWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnV1dVb2NXVXNJSEowTENCRExDQlRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1JXVW9UQ3dnYjJVc0lGZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR011Y0hWemFDaE1LU3dnWXk1d2RYTm9LRzlsS1N3Z1l5NXdkWE5vS0ZncE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGUmxLRXdzSUc5bExDQllLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwZENoTUtTd2dhWFFvYjJVcExDQnBkQ2hZS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBaU0E5SUdrdWJHVnVaM1JvSUM4Z015d2dTaUE5SUhZdVoyVnVaWEpoZEdWVWIzQlZWaWh1TENCcExDQnBaU0F0SURNc0lHbGxJQzBnTWl3Z2FXVWdMU0F4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVObEtFcGJNRjBwTENCRFpTaEtXekZkS1N3Z1EyVW9TbHN5WFNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1dXVW9UQ3dnYjJVc0lGZ3NJR2xsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGRDaE1LU3dnYVhRb2IyVXBMQ0JwZENocFpTa3NJR2wwS0c5bEtTd2dhWFFvV0Nrc0lHbDBLR2xsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQktJRDBnYVM1c1pXNW5kR2dnTHlBekxDQlRaU0E5SUhZdVoyVnVaWEpoZEdWVGFXUmxWMkZzYkZWV0tHNHNJR2tzSUVvZ0xTQTJMQ0JLSUMwZ015d2dTaUF0SURJc0lFb2dMU0F4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVObEtGTmxXekJkS1N3Z1EyVW9VMlZiTVYwcExDQkRaU2hUWlZzelhTa3NJRU5sS0ZObFd6RmRLU3dnUTJVb1UyVmJNbDBwTENCRFpTaFRaVnN6WFNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FYUW9UQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVM1d2RYTm9LR05iVENBcUlETWdLeUF3WFNrc0lHa3VjSFZ6YUNoalcwd2dLaUF6SUNzZ01WMHBMQ0JwTG5CMWMyZ29ZMXRNSUNvZ015QXJJREpkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCRFpTaE1LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5TG5CMWMyZ29UQzU0S1N3Z2NpNXdkWE5vS0V3dWVTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1d1lYSmhiV1YwWlhKektTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlITjFjR1Z5TG5SdlNsTlBUaWdwTENCMElEMGdkR2hwY3k1d1lYSmhiV1YwWlhKekxuTm9ZWEJsY3l3Z2JpQTlJSFJvYVhNdWNHRnlZVzFsZEdWeWN5NXZjSFJwYjI1ek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCNGVDaDBMQ0J1TENCbEtUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5Qm1jbTl0U2xOUFRpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdaUzV6YUdGd1pYTXViR1Z1WjNSb095QnlJRHdnWVRzZ2Npc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCMFcyVXVjMmhoY0dWelczSmRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpNXdkWE5vS0c4cE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHVXViM0IwYVc5dWN5NWxlSFJ5ZFdSbFVHRjBhRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGxMbTl3ZEdsdmJuTXVaWGgwY25Wa1pWQmhkR2dnUFNCdVpYY2dZMkZiYVM1MGVYQmxYU2dwTG1aeWIyMUtVMDlPS0drcEtTd2dibVYzSUhNeEtHNHNJR1V1YjNCMGFXOXVjeWs3Q2lBZ0lDQjlDbjBzSUY5NElEMGdld29nSUNBZ1oyVnVaWEpoZEdWVWIzQlZWam9nWm5WdVkzUnBiMjRvY3pFc0lHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR1ZiZENBcUlETmRMQ0JoSUQwZ1pWdDBJQ29nTXlBcklERmRMQ0J2SUQwZ1pWdHVJQ29nTTEwc0lHTWdQU0JsVzI0Z0tpQXpJQ3NnTVYwc0lHd2dQU0JsVzJrZ0tpQXpYU3dnYUNBOUlHVmJhU0FxSURNZ0t5QXhYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXd29nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dXaWh5TENCaEtTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGb29ieXdnWXlrc0NpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCYUtHd3NJR2dwQ2lBZ0lDQWdJQ0FnWFRzS0lDQWdJSDBzQ2lBZ0lDQm5aVzVsY21GMFpWTnBaR1ZYWVd4c1ZWWTZJR1oxYm1OMGFXOXVLSE14TENCbExDQjBMQ0J1TENCcExDQnlLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0JsVzNRZ0tpQXpYU3dnYnlBOUlHVmJkQ0FxSURNZ0t5QXhYU3dnWXlBOUlHVmJkQ0FxSURNZ0t5QXlYU3dnYkNBOUlHVmJiaUFxSUROZExDQm9JRDBnWlZ0dUlDb2dNeUFySURGZExDQjFJRDBnWlZ0dUlDb2dNeUFySURKZExDQmtJRDBnWlZ0cElDb2dNMTBzSUdZZ1BTQmxXMmtnS2lBeklDc2dNVjBzSUcwZ1BTQmxXMmtnS2lBeklDc2dNbDBzSUY4Z1BTQmxXM0lnS2lBelhTd2daeUE5SUdWYmNpQXFJRE1nS3lBeFhTd2djQ0E5SUdWYmNpQXFJRE1nS3lBeVhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzVoWW5Nb2J5QXRJR2dwSUR3Z1RXRjBhQzVoWW5Nb1lTQXRJR3dwSUQ4Z1d3b2dJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1dpaGhMQ0F4SUMwZ1l5a3NDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QmFLR3dzSURFZ0xTQjFLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRm9vWkN3Z01TQXRJRzBwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnV2loZkxDQXhJQzBnY0NrS0lDQWdJQ0FnSUNCZElEb2dXd29nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dXaWh2TENBeElDMGdZeWtzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJhS0dnc0lERWdMU0IxS1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUZvb1ppd2dNU0F0SUcwcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1dpaG5MQ0F4SUMwZ2NDa0tJQ0FnSUNBZ0lDQmRPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUI0ZUNoek1Td2daU3dnZENrZ2V3b2dJQ0FnYVdZZ0tIUXVjMmhoY0dWeklEMGdXMTBzSUVGeWNtRjVMbWx6UVhKeVlYa29jekVwS1NCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2N6RXViR1Z1WjNSb095QnVJRHdnYVRzZ2Jpc3JLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSE14VzI1ZE93b2dJQ0FnSUNBZ0lIUXVjMmhoY0dWekxuQjFjMmdvY2k1MWRXbGtLVHNLSUNBZ0lIMEtJQ0FnSUdWc2MyVWdkQzV6YUdGd1pYTXVjSFZ6YUNoek1TNTFkV2xrS1RzS0lDQWdJSEpsZEhWeWJpQjBMbTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JsS1N3Z1pTNWxlSFJ5ZFdSbFVHRjBhQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaDBMbTl3ZEdsdmJuTXVaWGgwY25Wa1pWQmhkR2dnUFNCbExtVjRkSEoxWkdWUVlYUm9MblJ2U2xOUFRpZ3BLU3dnZERzS2ZRcDJZWElnWldNZ1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklHUnBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTUNsN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNBb01TQXJJRTFoZEdndWMzRnlkQ2cxS1NrZ0x5QXlMQ0JwSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdiaXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdiaXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJQzF1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0Yml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0Yml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFc0c0NpQWdJQ0FnSUNBZ0lDQWdJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0J1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0Yml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMxdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhDaUFnSUNBZ0lDQWdYU3dnY2lBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEVXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEY3NDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TUN3S0lDQWdJQ0FnSUNBZ0lDQWdNVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURVc0NpQWdJQ0FnSUNBZ0lDQWdJRGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lEVXNDaUFnSUNBZ0lDQWdJQ0FnSURFeExBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01UQXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJREV3TEFvZ0lDQWdJQ0FnSUNBZ0lDQTNMQW9nSUNBZ0lDQWdJQ0FnSUNBMkxBb2dJQ0FnSUNBZ0lDQWdJQ0EzTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBNExBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQTVMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBMkxBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQTJMQW9nSUNBZ0lDQWdJQ0FnSUNBNExBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQTRMQW9nSUNBZ0lDQWdJQ0FnSUNBNUxBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQTVMQW9nSUNBZ0lDQWdJQ0FnSUNBMUxBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBeE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdNaXdLSUNBZ0lDQWdJQ0FnSUNBZ01UQXNDaUFnSUNBZ0lDQWdJQ0FnSURnc0NpQWdJQ0FnSUNBZ0lDQWdJRFlzQ2lBZ0lDQWdJQ0FnSUNBZ0lEY3NDaUFnSUNBZ0lDQWdJQ0FnSURrc0NpQWdJQ0FnSUNBZ0lDQWdJRGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJSE4xY0dWeUtHa3NJSElzSUdVc0lIUXBMQ0IwYUdsekxuUjVjR1VnUFNBaVNXTnZjMkZvWldSeWIyNUhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhSaGFXdzZJSFFLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSE14S0dVdWNtRmthWFZ6TENCbExtUmxkR0ZwYkNrN0NpQWdJQ0I5Q24wc0lHaGhJRDBnWTJ4aGMzTWdjekVnWlhoMFpXNWtjeUJrYVNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdNU3dnZENBOUlEQXBld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4Q2lBZ0lDQWdJQ0FnWFN3Z2FTQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTWl3S0lDQWdJQ0FnSUNBZ0lDQWdOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTlN3S0lDQWdJQ0FnSUNBZ0lDQWdNaXdLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTWl3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTlN3S0lDQWdJQ0FnSUNBZ0lDQWdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdNZ29nSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9iaXdnYVN3Z1pTd2dkQ2tzSUhSb2FYTXVkSGx3WlNBOUlDSlBZM1JoYUdWa2NtOXVSMlZ2YldWMGNua2lMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmhaR2wxY3pvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWMFlXbHNPaUIwQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCbWNtOXRTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJ6TVNobExuSmhaR2wxY3l3Z1pTNWtaWFJoYVd3cE93b2dJQ0FnZlFwOUxDQjBZeUE5SUdOc1lYTnpJSE14SUdWNGRHVnVaSE1nUjJVZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJQzQxTENCMElEMGdNU3dnYmlBOUlETXlMQ0JwSUQwZ01Td2djaUE5SURBc0lHRWdQU0JOWVhSb0xsQkpJQ29nTWlsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTUwZVhCbElEMGdJbEpwYm1kSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVc1dVpYSlNZV1JwZFhNNklHVXNDaUFnSUNBZ0lDQWdJQ0FnSUc5MWRHVnlVbUZrYVhWek9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGFHVjBZVk5sWjIxbGJuUnpPaUJ1TEFvZ0lDQWdJQ0FnSUNBZ0lDQndhR2xUWldkdFpXNTBjem9nYVN3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hsZEdGVGRHRnlkRG9nY2l3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hsZEdGTVpXNW5kR2c2SUdFS0lDQWdJQ0FnSUNCOUxDQnVJRDBnVFdGMGFDNXRZWGdvTXl3Z2Jpa3NJR2tnUFNCTllYUm9MbTFoZUNneExDQnBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJRnRkTENCaklEMGdXMTBzSUd3Z1BTQmJYU3dnYUNBOUlGdGRMQ0IxSUQwZ1pTd2daQ0E5SUNoMElDMGdaU2tnTHlCcExDQm1JRDBnYm1WM0lFRXNJRzBnUFNCdVpYY2dXanNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRjhnUFNBd095QmZJRHc5SUdrN0lGOHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1p5QTlJREE3SUdjZ1BEMGdianNnWnlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J3SUQwZ2NpQXJJR2NnTHlCdUlDb2dZVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1l1ZUNBOUlIVWdLaUJOWVhSb0xtTnZjeWh3S1N3Z1ppNTVJRDBnZFNBcUlFMWhkR2d1YzJsdUtIQXBMQ0JqTG5CMWMyZ29aaTU0TENCbUxua3NJR1l1ZWlrc0lHd3VjSFZ6YUNnd0xDQXdMQ0F4S1N3Z2JTNTRJRDBnS0dZdWVDQXZJSFFnS3lBeEtTQXZJRElzSUcwdWVTQTlJQ2htTG5rZ0x5QjBJQ3NnTVNrZ0x5QXlMQ0JvTG5CMWMyZ29iUzU0TENCdExua3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFVnS3owZ1pEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmZJRDBnTURzZ1h5QThJR2s3SUY4ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm5JRDBnWHlBcUlDaHVJQ3NnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdjQ0E5SURBN0lIQWdQQ0J1T3lCd0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQndJQ3NnWnl3Z2VDQTlJSFlzSUhrZ1BTQjJJQ3NnYmlBcklERXNJR0lnUFNCMklDc2diaUFySURJc0lIY2dQU0IySUNzZ01Uc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOHVjSFZ6YUNoNExDQjVMQ0IzS1N3Z2J5NXdkWE5vS0hrc0lHSXNJSGNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdWMyVjBTVzVrWlhnb2J5a3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2hqTENBektTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0p1YjNKdFlXd2lMQ0J1WlhjZ2RtVW9iQ3dnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2lkWFlpTENCdVpYY2dkbVVvYUN3Z01pa3BPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lHVXVjR0Z5WVcxbGRHVnljeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2N6RW9aUzVwYm01bGNsSmhaR2wxY3l3Z1pTNXZkWFJsY2xKaFpHbDFjeXdnWlM1MGFHVjBZVk5sWjIxbGJuUnpMQ0JsTG5Cb2FWTmxaMjFsYm5SekxDQmxMblJvWlhSaFUzUmhjblFzSUdVdWRHaGxkR0ZNWlc1bmRHZ3BPd29nSUNBZ2ZRcDlMQ0J1WXlBOUlHTnNZWE56SUhNeElHVjRkR1Z1WkhNZ1IyVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5QkdiaWhiQ2lBZ0lDQWdJQ0FnYm1WM0lGb29NQ3dnTGpVcExBb2dJQ0FnSUNBZ0lHNWxkeUJhS0MwdU5Td2dMUzQxS1N3S0lDQWdJQ0FnSUNCdVpYY2dXaWd1TlN3Z0xTNDFLUW9nSUNBZ1hTa3NJSFFnUFNBeE1pbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1MGVYQmxJRDBnSWxOb1lYQmxSMlZ2YldWMGNua2lMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsY3pvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWRtVlRaV2R0Wlc1MGN6b2dkQW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0JiWFN3Z2FTQTlJRnRkTENCeUlEMGdXMTBzSUdFZ1BTQmJYU3dnYnlBOUlEQXNJR01nUFNBd093b2dJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHVXBJRDA5UFNBaE1Ta2diQ2hsS1RzS0lDQWdJQ0FnSUNCbGJITmxJR1p2Y2loc1pYUWdhQ0E5SURBN0lHZ2dQQ0JsTG14bGJtZDBhRHNnYUNzcktXd29aVnRvWFNrc0lIUm9hWE11WVdSa1IzSnZkWEFvYnl3Z1l5d2dhQ2tzSUc4Z0t6MGdZeXdnWXlBOUlEQTdDaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkpibVJsZUNodUtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lIWmxLR2tzSURNcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbTV2Y20xaGJDSXNJRzVsZHlCMlpTaHlMQ0F6S1Nrc0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSjFkaUlzSUc1bGR5QjJaU2hoTENBeUtTazdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdiQ2hvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMUlEMGdhUzVzWlc1bmRHZ2dMeUF6TENCa0lEMGdhQzVsZUhSeVlXTjBVRzlwYm5SektIUXBMQ0JtSUQwZ1pDNXphR0Z3WlN3Z2JTQTlJR1F1YUc5c1pYTTdDaUFnSUNBZ0lDQWdJQ0FnSUhsdUxtbHpRMnh2WTJ0WGFYTmxLR1lwSUQwOVBTQWhNU0FtSmlBb1ppQTlJR1l1Y21WMlpYSnpaU2dwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQm5JRDBnTUN3Z2NDQTlJRzB1YkdWdVozUm9PeUJuSUR3Z2NEc2daeXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnYlZ0blhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIbHVMbWx6UTJ4dlkydFhhWE5sS0hZcElEMDlQU0FoTUNBbUppQW9iVnRuWFNBOUlIWXVjbVYyWlhKelpTZ3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1h5QTlJSGx1TG5SeWFXRnVaM1ZzWVhSbFUyaGhjR1VvWml3Z2JTazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWnlBOUlEQXNJSEFnUFNCdExteGxibWQwYURzZ1p5QThJSEE3SUdjckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZGlBOUlHMWJaMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtSUQwZ1ppNWpiMjVqWVhRb2RpazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQm5JRDBnTUN3Z2NDQTlJR1l1YkdWdVozUm9PeUJuSUR3Z2NEc2daeXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnWmx0blhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa3VjSFZ6YUNoMkxuZ3NJSFl1ZVN3Z01Da3NJSEl1Y0hWemFDZ3dMQ0F3TENBeEtTd2dZUzV3ZFhOb0tIWXVlQ3dnZGk1NUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHY2dQU0F3TENCd0lEMGdYeTVzWlc1bmRHZzdJR2NnUENCd095Qm5LeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIWWdQU0JmVzJkZExDQjRJRDBnZGxzd1hTQXJJSFVzSUhrZ1BTQjJXekZkSUNzZ2RTd2dZaUE5SUhaYk1sMGdLeUIxT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYmk1d2RYTm9LSGdzSUhrc0lHSXBMQ0JqSUNzOUlETTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1d1lYSmhiV1YwWlhKektTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlITjFjR1Z5TG5SdlNsTlBUaWdwTENCMElEMGdkR2hwY3k1d1lYSmhiV1YwWlhKekxuTm9ZWEJsY3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG5nb2RDd2daU2s3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUdVdWMyaGhjR1Z6TG14bGJtZDBhRHNnYVNBOElISTdJR2tyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaElEMGdkRnRsTG5Ob1lYQmxjMXRwWFYwN0NpQWdJQ0FnSUNBZ0lDQWdJRzR1Y0hWemFDaGhLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCek1TaHVMQ0JsTG1OMWNuWmxVMlZuYldWdWRITXBPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUIyZUNoek1Td2daU2tnZXdvZ0lDQWdhV1lnS0dVdWMyaGhjR1Z6SUQwZ1cxMHNJRUZ5Y21GNUxtbHpRWEp5WVhrb2N6RXBLU0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnY3pFdWJHVnVaM1JvT3lCMElEd2dianNnZENzcktYc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlITXhXM1JkT3dvZ0lDQWdJQ0FnSUdVdWMyaGhjR1Z6TG5CMWMyZ29hUzUxZFdsa0tUc0tJQ0FnSUgwS0lDQWdJR1ZzYzJVZ1pTNXphR0Z3WlhNdWNIVnphQ2h6TVM1MWRXbGtLVHNLSUNBZ0lISmxkSFZ5YmlCbE93cDlDblpoY2lCMVlTQTlJR05zWVhOeklITXhJR1Y0ZEdWdVpITWdSMlVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlERXNJSFFnUFNBek1pd2diaUE5SURFMkxDQnBJRDBnTUN3Z2NpQTlJRTFoZEdndVVFa2dLaUF5TENCaElEMGdNQ3dnYnlBOUlFMWhkR2d1VUVrcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pUY0dobGNtVkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFGTmxaMjFsYm5Sek9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFJUWldkdFpXNTBjem9nYml3S0lDQWdJQ0FnSUNBZ0lDQWdjR2hwVTNSaGNuUTZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQm9hVXhsYm1kMGFEb2djaXdLSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxkR0ZUZEdGeWREb2dZU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxkR0ZNWlc1bmRHZzZJRzhLSUNBZ0lDQWdJQ0I5TENCMElEMGdUV0YwYUM1dFlYZ29NeXdnVFdGMGFDNW1iRzl2Y2loMEtTa3NJRzRnUFNCTllYUm9MbTFoZUNneUxDQk5ZWFJvTG1ac2IyOXlLRzRwS1RzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUUxaGRHZ3ViV2x1S0dFZ0t5QnZMQ0JOWVhSb0xsQkpLU3dnYkNBOUlEQXNJR2dnUFNCYlhTd2dkU0E5SUc1bGR5QkJMQ0JrSUQwZ2JtVjNJRUVzSUdZZ1BTQmJYU3dnYlNBOUlGdGRMQ0JmSUQwZ1cxMHNJR2NnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIQWdQU0F3T3lCd0lEdzlJRzQ3SUhBckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnVzEwc0lIZ2dQU0J3SUM4Z2Jpd2dlU0E5SURBN0NpQWdJQ0FnSUNBZ0lDQWdJSEFnUFQwOUlEQWdKaVlnWVNBOVBUMGdNQ0EvSUhrZ1BTQXVOU0F2SUhRZ09pQndJRDA5UFNCdUlDWW1JR01nUFQwOUlFMWhkR2d1VUVrZ0ppWWdLSGtnUFNBdExqVWdMeUIwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmlJRDBnTURzZ1lpQThQU0IwT3lCaUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhjZ1BTQmlJQzhnZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhVdWVDQTlJQzFsSUNvZ1RXRjBhQzVqYjNNb2FTQXJJSGNnS2lCeUtTQXFJRTFoZEdndWMybHVLR0VnS3lCNElDb2dieWtzSUhVdWVTQTlJR1VnS2lCTllYUm9MbU52Y3loaElDc2dlQ0FxSUc4cExDQjFMbm9nUFNCbElDb2dUV0YwYUM1emFXNG9hU0FySUhjZ0tpQnlLU0FxSUUxaGRHZ3VjMmx1S0dFZ0t5QjRJQ29nYnlrc0lHMHVjSFZ6YUNoMUxuZ3NJSFV1ZVN3Z2RTNTZLU3dnWkM1amIzQjVLSFVwTG01dmNtMWhiR2w2WlNncExDQmZMbkIxYzJnb1pDNTRMQ0JrTG5rc0lHUXVlaWtzSUdjdWNIVnphQ2gzSUNzZ2VTd2dNU0F0SUhncExDQjJMbkIxYzJnb2JDc3JLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JvTG5CMWMyZ29kaWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY0NBOUlEQTdJSEFnUENCdU95QndLeXNwWm05eUtHeGxkQ0IySUQwZ01Ec2dkaUE4SUhRN0lIWXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ2FGdHdYVnQySUNzZ01WMHNJSGtnUFNCb1czQmRXM1pkTENCaUlEMGdhRnR3SUNzZ01WMWJkbDBzSUhjZ1BTQm9XM0FnS3lBeFhWdDJJQ3NnTVYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ2h3SUNFOVBTQXdJSHg4SUdFZ1BpQXdLU0FtSmlCbUxuQjFjMmdvZUN3Z2VTd2dkeWtzSUNod0lDRTlQU0J1SUMwZ01TQjhmQ0JqSUR3Z1RXRjBhQzVRU1NrZ0ppWWdaaTV3ZFhOb0tIa3NJR0lzSUhjcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHVaR1Y0S0dZcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ2RtVW9iU3dnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpd2dibVYzSUhabEtGOHNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luVjJJaXdnYm1WM0lIWmxLR2NzSURJcEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExuQmhjbUZ0WlhSbGNuTXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhNeEtHVXVjbUZrYVhWekxDQmxMbmRwWkhSb1UyVm5iV1Z1ZEhNc0lHVXVhR1ZwWjJoMFUyVm5iV1Z1ZEhNc0lHVXVjR2hwVTNSaGNuUXNJR1V1Y0docFRHVnVaM1JvTENCbExuUm9aWFJoVTNSaGNuUXNJR1V1ZEdobGRHRk1aVzVuZEdncE93b2dJQ0FnZlFwOUxDQnBZeUE5SUdOc1lYTnpJSE14SUdWNGRHVnVaSE1nWkdrZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREVzSUhRZ1BTQXdLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Rb2dJQ0FnSUNBZ0lGMHNJR2tnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lETXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lETXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lETXNDaUFnSUNBZ0lDQWdJQ0FnSURFS0lDQWdJQ0FnSUNCZE93b2dJQ0FnSUNBZ0lITjFjR1Z5S0c0c0lHa3NJR1VzSUhRcExDQjBhR2x6TG5SNWNHVWdQU0FpVkdWMGNtRm9aV1J5YjI1SFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQmtaWFJoYVd3NklIUUtJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lITXhLR1V1Y21Ga2FYVnpMQ0JsTG1SbGRHRnBiQ2s3Q2lBZ0lDQjlDbjBzSUhOaklEMGdZMnhoYzNNZ2N6RWdaWGgwWlc1a2N5QkhaU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Td2dkQ0E5SUM0MExDQnVJRDBnTVRJc0lHa2dQU0EwT0N3Z2NpQTlJRTFoZEdndVVFa2dLaUF5S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMblI1Y0dVZ1BTQWlWRzl5ZFhOSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBkV0psT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0J5WVdScFlXeFRaV2R0Wlc1MGN6b2diaXdLSUNBZ0lDQWdJQ0FnSUNBZ2RIVmlkV3hoY2xObFoyMWxiblJ6T2lCcExBb2dJQ0FnSUNBZ0lDQWdJQ0JoY21NNklISUtJQ0FnSUNBZ0lDQjlMQ0J1SUQwZ1RXRjBhQzVtYkc5dmNpaHVLU3dnYVNBOUlFMWhkR2d1Wm14dmIzSW9hU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0JiWFN3Z2J5QTlJRnRkTENCaklEMGdXMTBzSUd3Z1BTQmJYU3dnYUNBOUlHNWxkeUJCTENCMUlEMGdibVYzSUVFc0lHUWdQU0J1WlhjZ1FUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHWWdQU0F3T3lCbUlEdzlJRzQ3SUdZckt5bG1iM0lvYkdWMElHMGdQU0F3T3lCdElEdzlJR2s3SUcwckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnYlNBdklHa2dLaUJ5TENCbklEMGdaaUF2SUc0Z0tpQk5ZWFJvTGxCSklDb2dNanNLSUNBZ0lDQWdJQ0FnSUNBZ2RTNTRJRDBnS0dVZ0t5QjBJQ29nVFdGMGFDNWpiM01vWnlrcElDb2dUV0YwYUM1amIzTW9YeWtzSUhVdWVTQTlJQ2hsSUNzZ2RDQXFJRTFoZEdndVkyOXpLR2NwS1NBcUlFMWhkR2d1YzJsdUtGOHBMQ0IxTG5vZ1BTQjBJQ29nVFdGMGFDNXphVzRvWnlrc0lHOHVjSFZ6YUNoMUxuZ3NJSFV1ZVN3Z2RTNTZLU3dnYUM1NElEMGdaU0FxSUUxaGRHZ3VZMjl6S0Y4cExDQm9MbmtnUFNCbElDb2dUV0YwYUM1emFXNG9YeWtzSUdRdWMzVmlWbVZqZEc5eWN5aDFMQ0JvS1M1dWIzSnRZV3hwZW1Vb0tTd2dZeTV3ZFhOb0tHUXVlQ3dnWkM1NUxDQmtMbm9wTENCc0xuQjFjMmdvYlNBdklHa3BMQ0JzTG5CMWMyZ29aaUF2SUc0cE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHWWdQU0F4T3lCbUlEdzlJRzQ3SUdZckt5bG1iM0lvYkdWMElHMGdQU0F4T3lCdElEdzlJR2s3SUcwckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnS0drZ0t5QXhLU0FxSUdZZ0t5QnRJQzBnTVN3Z1p5QTlJQ2hwSUNzZ01Ta2dLaUFvWmlBdElERXBJQ3NnYlNBdElERXNJSEFnUFNBb2FTQXJJREVwSUNvZ0tHWWdMU0F4S1NBcklHMHNJSFlnUFNBb2FTQXJJREVwSUNvZ1ppQXJJRzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHRXVjSFZ6YUNoZkxDQm5MQ0IyS1N3Z1lTNXdkWE5vS0djc0lIQXNJSFlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVsdVpHVjRLR0VwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnZG1Vb2J5d2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWJtOXliV0ZzSWl3Z2JtVjNJSFpsS0dNc0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5WMklpd2dibVYzSUhabEtHd3NJRElwS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JsTG5CaGNtRnRaWFJsY25NcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSE14S0dVdWNtRmthWFZ6TENCbExuUjFZbVVzSUdVdWNtRmthV0ZzVTJWbmJXVnVkSE1zSUdVdWRIVmlkV3hoY2xObFoyMWxiblJ6TENCbExtRnlZeWs3Q2lBZ0lDQjlDbjBzSUhKaklEMGdZMnhoYzNNZ2N6RWdaWGgwWlc1a2N5QkhaU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Td2dkQ0E5SUM0MExDQnVJRDBnTmpRc0lHa2dQU0E0TENCeUlEMGdNaXdnWVNBOUlETXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKVWIzSjFjMHR1YjNSSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBkV0psT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0IwZFdKMWJHRnlVMlZuYldWdWRITTZJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lISmhaR2xoYkZObFoyMWxiblJ6T2lCcExBb2dJQ0FnSUNBZ0lDQWdJQ0J3T2lCeUxBb2dJQ0FnSUNBZ0lDQWdJQ0J4T2lCaENpQWdJQ0FnSUNBZ2ZTd2diaUE5SUUxaGRHZ3VabXh2YjNJb2Jpa3NJR2tnUFNCTllYUm9MbVpzYjI5eUtHa3BPd29nSUNBZ0lDQWdJR3hsZENCdklEMGdXMTBzSUdNZ1BTQmJYU3dnYkNBOUlGdGRMQ0JvSUQwZ1cxMHNJSFVnUFNCdVpYY2dRU3dnWkNBOUlHNWxkeUJCTENCbUlEMGdibVYzSUVFc0lHMGdQU0J1WlhjZ1FTd2dYeUE5SUc1bGR5QkJMQ0JuSUQwZ2JtVjNJRUVzSUhBZ1BTQnVaWGNnUVRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhnZ1BTQXdPeUI0SUR3OUlHNDdJQ3NyZUNsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNUlEMGdlQ0F2SUc0Z0tpQnlJQ29nVFdGMGFDNVFTU0FxSURJN0NpQWdJQ0FnSUNBZ0lDQWdJSFlvZVN3Z2Npd2dZU3dnWlN3Z1ppa3NJSFlvZVNBcklDNHdNU3dnY2l3Z1lTd2daU3dnYlNrc0lHY3VjM1ZpVm1WamRHOXljeWh0TENCbUtTd2djQzVoWkdSV1pXTjBiM0p6S0cwc0lHWXBMQ0JmTG1OeWIzTnpWbVZqZEc5eWN5aG5MQ0J3S1N3Z2NDNWpjbTl6YzFabFkzUnZjbk1vWHl3Z1p5a3NJRjh1Ym05eWJXRnNhWHBsS0Nrc0lIQXVibTl5YldGc2FYcGxLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lpQTlJREE3SUdJZ1BEMGdhVHNnS3l0aUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IzSUQwZ1lpQXZJR2tnS2lCTllYUm9MbEJKSUNvZ01pd2dVaUE5SUMxMElDb2dUV0YwYUM1amIzTW9keWtzSUVrZ1BTQjBJQ29nVFdGMGFDNXphVzRvZHlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMUxuZ2dQU0JtTG5nZ0t5QW9VaUFxSUhBdWVDQXJJRWtnS2lCZkxuZ3BMQ0IxTG5rZ1BTQm1MbmtnS3lBb1VpQXFJSEF1ZVNBcklFa2dLaUJmTG5rcExDQjFMbm9nUFNCbUxub2dLeUFvVWlBcUlIQXVlaUFySUVrZ0tpQmZMbm9wTENCakxuQjFjMmdvZFM1NExDQjFMbmtzSUhVdWVpa3NJR1F1YzNWaVZtVmpkRzl5Y3loMUxDQm1LUzV1YjNKdFlXeHBlbVVvS1N3Z2JDNXdkWE5vS0dRdWVDd2daQzU1TENCa0xub3BMQ0JvTG5CMWMyZ29lQ0F2SUc0cExDQm9MbkIxYzJnb1lpQXZJR2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURFN0lIZ2dQRDBnYmpzZ2VDc3JLV1p2Y2loc1pYUWdlU0E5SURFN0lIa2dQRDBnYVRzZ2VTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0lnUFNBb2FTQXJJREVwSUNvZ0tIZ2dMU0F4S1NBcklDaDVJQzBnTVNrc0lIY2dQU0FvYVNBcklERXBJQ29nZUNBcklDaDVJQzBnTVNrc0lGSWdQU0FvYVNBcklERXBJQ29nZUNBcklIa3NJRWtnUFNBb2FTQXJJREVwSUNvZ0tIZ2dMU0F4S1NBcklIazdDaUFnSUNBZ0lDQWdJQ0FnSUc4dWNIVnphQ2hpTENCM0xDQkpLU3dnYnk1d2RYTm9LSGNzSUZJc0lFa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx1WkdWNEtHOHBMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2dkbVVvWXl3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpYm05eWJXRnNJaXdnYm1WM0lIWmxLR3dzSURNcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JblYySWl3Z2JtVjNJSFpsS0dnc0lESXBLVHNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUIyS0hnc0lIa3NJR0lzSUhjc0lGSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRWtnUFNCTllYUm9MbU52Y3loNEtTd2dUU0E5SUUxaGRHZ3VjMmx1S0hncExDQlVJRDBnWWlBdklIa2dLaUI0TENCUElEMGdUV0YwYUM1amIzTW9WQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lGSXVlQ0E5SUhjZ0tpQW9NaUFySUU4cElDb2dMalVnS2lCSkxDQlNMbmtnUFNCM0lDb2dLRElnS3lCUEtTQXFJRTBnS2lBdU5Td2dVaTU2SUQwZ2R5QXFJRTFoZEdndWMybHVLRlFwSUNvZ0xqVTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lHVXVjR0Z5WVcxbGRHVnljeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2N6RW9aUzV5WVdScGRYTXNJR1V1ZEhWaVpTd2daUzUwZFdKMWJHRnlVMlZuYldWdWRITXNJR1V1Y21Ga2FXRnNVMlZuYldWdWRITXNJR1V1Y0N3Z1pTNXhLVHNLSUNBZ0lIMEtmU3dnWVdNZ1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklFZGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dZV0VvYm1WM0lFRW9MVEVzSUMweExDQXdLU3dnYm1WM0lFRW9MVEVzSURFc0lEQXBMQ0J1WlhjZ1FTZ3hMQ0F4TENBd0tTa3NJSFFnUFNBMk5Dd2diaUE5SURFc0lHa2dQU0E0TENCeUlEMGdJVEVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVkSGx3WlNBOUlDSlVkV0psUjJWdmJXVjBjbmtpTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSEJoZEdnNklHVXNDaUFnSUNBZ0lDQWdJQ0FnSUhSMVluVnNZWEpUWldkdFpXNTBjem9nZEN3S0lDQWdJQ0FnSUNBZ0lDQWdjbUZrYVhWek9pQnVMQW9nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBZV3hUWldkdFpXNTBjem9nYVN3S0lDQWdJQ0FnSUNBZ0lDQWdZMnh2YzJWa09pQnlDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJR1V1WTI5dGNIVjBaVVp5Wlc1bGRFWnlZVzFsY3loMExDQnlLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUmhibWRsYm5SeklEMGdZUzUwWVc1blpXNTBjeXdnZEdocGN5NXViM0p0WVd4eklEMGdZUzV1YjNKdFlXeHpMQ0IwYUdsekxtSnBibTl5YldGc2N5QTlJR0V1WW1sdWIzSnRZV3h6T3dvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnYm1WM0lFRXNJR01nUFNCdVpYY2dRU3dnYkNBOUlHNWxkeUJhTENCb0lEMGdibVYzSUVFc0lIVWdQU0JiWFN3Z1pDQTlJRnRkTENCbUlEMGdXMTBzSUcwZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JmS0Nrc0lIUm9hWE11YzJWMFNXNWtaWGdvYlNrc0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCMlpTaDFMQ0F6S1Nrc0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSnViM0p0WVd3aUxDQnVaWGNnZG1Vb1pDd2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWRYWWlMQ0J1WlhjZ2RtVW9aaXdnTWlrcE93b2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGOG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VDQTlJREE3SUhnZ1BDQjBPeUI0S3lzcFp5aDRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1p5aHlJRDA5UFNBaE1TQS9JSFFnT2lBd0tTd2dkaWdwTENCd0tDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2NvZUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JvSUQwZ1pTNW5aWFJRYjJsdWRFRjBLSGdnTHlCMExDQm9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGtnUFNCaExtNXZjbTFoYkhOYmVGMHNJR0lnUFNCaExtSnBibTl5YldGc2MxdDRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCM0lEMGdNRHNnZHlBOFBTQnBPeUIzS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRklnUFNCM0lDOGdhU0FxSUUxaGRHZ3VVRWtnS2lBeUxDQkpJRDBnVFdGMGFDNXphVzRvVWlrc0lFMGdQU0F0VFdGMGFDNWpiM01vVWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCakxuZ2dQU0JOSUNvZ2VTNTRJQ3NnU1NBcUlHSXVlQ3dnWXk1NUlEMGdUU0FxSUhrdWVTQXJJRWtnS2lCaUxua3NJR011ZWlBOUlFMGdLaUI1TG5vZ0t5QkpJQ29nWWk1NkxDQmpMbTV2Y20xaGJHbDZaU2dwTENCa0xuQjFjMmdvWXk1NExDQmpMbmtzSUdNdWVpa3NJRzh1ZUNBOUlHZ3VlQ0FySUc0Z0tpQmpMbmdzSUc4dWVTQTlJR2d1ZVNBcklHNGdLaUJqTG5rc0lHOHVlaUE5SUdndWVpQXJJRzRnS2lCakxub3NJSFV1Y0hWemFDaHZMbmdzSUc4dWVTd2dieTU2S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ3S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGdnUFNBeE95QjRJRHc5SUhRN0lIZ3JLeWxtYjNJb2JHVjBJSGtnUFNBeE95QjVJRHc5SUdrN0lIa3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lpQTlJQ2hwSUNzZ01Ta2dLaUFvZUNBdElERXBJQ3NnS0hrZ0xTQXhLU3dnZHlBOUlDaHBJQ3NnTVNrZ0tpQjRJQ3NnS0hrZ0xTQXhLU3dnVWlBOUlDaHBJQ3NnTVNrZ0tpQjRJQ3NnZVN3Z1NTQTlJQ2hwSUNzZ01Ta2dLaUFvZUNBdElERXBJQ3NnZVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcwdWNIVnphQ2hpTENCM0xDQkpLU3dnYlM1d2RYTm9LSGNzSUZJc0lFa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlIWW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VDQTlJREE3SUhnZ1BEMGdkRHNnZUNzcktXWnZjaWhzWlhRZ2VTQTlJREE3SUhrZ1BEMGdhVHNnZVNzcktXd3VlQ0E5SUhnZ0x5QjBMQ0JzTG5rZ1BTQjVJQzhnYVN3Z1ppNXdkWE5vS0d3dWVDd2diQzU1S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1d1lYSmhiV1YwWlhKektTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlITjFjR1Z5TG5SdlNsTlBUaWdwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG5CaGRHZ2dQU0IwYUdsekxuQmhjbUZ0WlhSbGNuTXVjR0YwYUM1MGIwcFRUMDRvS1N3Z1pUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5Qm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCek1TaHVaWGNnWTJGYlpTNXdZWFJvTG5SNWNHVmRLQ2t1Wm5KdmJVcFRUMDRvWlM1d1lYUm9LU3dnWlM1MGRXSjFiR0Z5VTJWbmJXVnVkSE1zSUdVdWNtRmthWFZ6TENCbExuSmhaR2xoYkZObFoyMWxiblJ6TENCbExtTnNiM05sWkNrN0NpQWdJQ0I5Q24wc0lHOWpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QkhaU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JuVnNiQ2w3Q2lBZ0lDQWdJQ0FnYVdZZ0tITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pYYVhKbFpuSmhiV1ZIWlc5dFpYUnllU0lzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdaMlZ2YldWMGNuazZJR1VLSUNBZ0lDQWdJQ0I5TENCbElDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVzEwc0lHNGdQU0J1WlhjZ1UyVjBMQ0JwSUQwZ2JtVjNJRUVzSUhJZ1BTQnVaWGNnUVRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdWFXNWtaWGdnSVQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnWlM1aGRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dUxDQnZJRDBnWlM1cGJtUmxlQ3dnWXlBOUlHVXVaM0p2ZFhCek93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5NXNaVzVuZEdnZ1BUMDlJREFnSmlZZ0tHTWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRG9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5MWJuUTZJRzh1WTI5MWJuUXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhkR1Z5YVdGc1NXNWtaWGc2SURBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SURBc0lHZ2dQU0JqTG14bGJtZDBhRHNnYkNBOElHZzdJQ3NyYkNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhVZ1BTQmpXMnhkTENCa0lEMGdkUzV6ZEdGeWRDd2daaUE5SUhVdVkyOTFiblE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdElEMGdaQ3dnWHlBOUlHUWdLeUJtT3lCdElEd2dYenNnYlNBclBTQXpLV1p2Y2loc1pYUWdaeUE5SURBN0lHY2dQQ0F6T3lCbkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlHOHVaMlYwV0NodElDc2daeWtzSUhZZ1BTQnZMbWRsZEZnb2JTQXJJQ2huSUNzZ01Ta2dKU0F6S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHRXNJSEFwTENCeUxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9ZU3dnZGlrc0lITjFLR2tzSUhJc0lHNHBJRDA5UFNBaE1DQW1KaUFvZEM1d2RYTm9LR2t1ZUN3Z2FTNTVMQ0JwTG5vcExDQjBMbkIxYzJnb2NpNTRMQ0J5TG5rc0lISXVlaWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaElEMGdaUzVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J2SUQwZ01Dd2dZeUE5SUdFdVkyOTFiblFnTHlBek95QnZJRHdnWXpzZ2J5c3JLV1p2Y2loc1pYUWdiQ0E5SURBN0lHd2dQQ0F6T3lCc0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnTXlBcUlHOGdLeUJzTENCMUlEMGdNeUFxSUc4Z0t5QW9iQ0FySURFcElDVWdNenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9ZU3dnYUNrc0lISXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2hoTENCMUtTd2djM1VvYVN3Z2Npd2diaWtnUFQwOUlDRXdJQ1ltSUNoMExuQjFjMmdvYVM1NExDQnBMbmtzSUdrdWVpa3NJSFF1Y0hWemFDaHlMbmdzSUhJdWVTd2djaTU2S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtIUXNJRE1wS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1d1lYSmhiV1YwWlhKektTd2dkR2hwY3pzS0lDQWdJSDBLZlRzS1puVnVZM1JwYjI0Z2MzVW9jekVzSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1SUQwZ1lDUjdjekV1ZUgwc0pIdHpNUzU1ZlN3a2UzTXhMbnA5TFNSN1pTNTRmU3drZTJVdWVYMHNKSHRsTG5wOVlDd2dhU0E5SUdBa2UyVXVlSDBzSkh0bExubDlMQ1I3WlM1NmZTMGtlM014TG5oOUxDUjdjekV1ZVgwc0pIdHpNUzU2ZldBN0NpQWdJQ0J5WlhSMWNtNGdkQzVvWVhNb2Jpa2dQVDA5SUNFd0lIeDhJSFF1YUdGektHa3BJRDA5UFNBaE1DQS9JQ0V4SURvZ0tIUXVZV1JrS0c0cExDQjBMbUZrWkNocEtTd2dJVEFwT3dwOUNuWmhjaUJ5ZFNBOUlFOWlhbVZqZEM1bWNtVmxlbVVvZXdvZ0lDQWdYMTl3Y205MGIxOWZPaUJ1ZFd4c0xBb2dJQ0FnUW05NFIyVnZiV1YwY25rNklFcHBMQW9nSUNBZ1EyRndjM1ZzWlVkbGIyMWxkSEo1T2lCeGJ5d0tJQ0FnSUVOcGNtTnNaVWRsYjIxbGRISjVPaUJaYnl3S0lDQWdJRU52Ym1WSFpXOXRaWFJ5ZVRvZ1dtOHNDaUFnSUNCRGVXeHBibVJsY2tkbGIyMWxkSEo1T2lCT2N5d0tJQ0FnSUVSdlpHVmpZV2hsWkhKdmJrZGxiMjFsZEhKNU9pQktieXdLSUNBZ0lFVmtaMlZ6UjJWdmJXVjBjbms2SUNSdkxBb2dJQ0FnUlhoMGNuVmtaVWRsYjIxbGRISjVPaUJxYnl3S0lDQWdJRWxqYjNOaGFHVmtjbTl1UjJWdmJXVjBjbms2SUdWakxBb2dJQ0FnVEdGMGFHVkhaVzl0WlhSeWVUb2diR0VzQ2lBZ0lDQlBZM1JoYUdWa2NtOXVSMlZ2YldWMGNuazZJR2hoTEFvZ0lDQWdVR3hoYm1WSFpXOXRaWFJ5ZVRvZ0pISXNDaUFnSUNCUWIyeDVhR1ZrY205dVIyVnZiV1YwY25rNklHUnBMQW9nSUNBZ1VtbHVaMGRsYjIxbGRISjVPaUIwWXl3S0lDQWdJRk5vWVhCbFIyVnZiV1YwY25rNklHNWpMQW9nSUNBZ1UzQm9aWEpsUjJWdmJXVjBjbms2SUhWaExBb2dJQ0FnVkdWMGNtRm9aV1J5YjI1SFpXOXRaWFJ5ZVRvZ2FXTXNDaUFnSUNCVWIzSjFjMGRsYjIxbGRISjVPaUJ6WXl3S0lDQWdJRlJ2Y25WelMyNXZkRWRsYjIxbGRISjVPaUJ5WXl3S0lDQWdJRlIxWW1WSFpXOXRaWFJ5ZVRvZ1lXTXNDaUFnSUNCWGFYSmxabkpoYldWSFpXOXRaWFJ5ZVRvZ2IyTUtmU2tzSUdOaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCaWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpVMmhoWkc5M1RXRjBaWEpwWVd3Z1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsTm9ZV1J2ZDAxaGRHVnlhV0ZzSWl3Z2RHaHBjeTVqYjJ4dmNpQTlJRzVsZHlCd1pTZ3dLU3dnZEdocGN5NTBjbUZ1YzNCaGNtVnVkQ0E5SUNFd0xDQjBhR2x6TG1adlp5QTlJQ0V3TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtTnZiRzl5TG1OdmNIa29aUzVqYjJ4dmNpa3NJSFJvYVhNdVptOW5JRDBnWlM1bWIyY3NJSFJvYVhNN0NpQWdJQ0I5Q24wc0lHeGpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QnFkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsS1N3Z2RHaHBjeTVwYzFKaGQxTm9ZV1JsY2sxaGRHVnlhV0ZzSUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKU1lYZFRhR0ZrWlhKTllYUmxjbWxoYkNJN0NpQWdJQ0I5Q24wc0lHUmhJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VFdWemFGTjBZVzVrWVhKa1RXRjBaWEpwWVd3Z1BTQWhNQ3dnZEdocGN5NWtaV1pwYm1WeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCVFZFRk9SRUZTUkRvZ0lpSUtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuUjVjR1VnUFNBaVRXVnphRk4wWVc1a1lYSmtUV0YwWlhKcFlXd2lMQ0IwYUdsekxtTnZiRzl5SUQwZ2JtVjNJSEJsS0RFMk56YzNNakUxS1N3Z2RHaHBjeTV5YjNWbmFHNWxjM01nUFNBeExDQjBhR2x6TG0xbGRHRnNibVZ6Y3lBOUlEQXNJSFJvYVhNdWJXRndJRDBnYm5Wc2JDd2dkR2hwY3k1c2FXZG9kRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXViR2xuYUhSTllYQkpiblJsYm5OcGRIa2dQU0F4TENCMGFHbHpMbUZ2VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVoYjAxaGNFbHVkR1Z1YzJsMGVTQTlJREVzSUhSb2FYTXVaVzFwYzNOcGRtVWdQU0J1WlhjZ2NHVW9NQ2tzSUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa2dQU0F4TENCMGFHbHpMbVZ0YVhOemFYWmxUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVpZFcxd1UyTmhiR1VnUFNBeExDQjBhR2x6TG01dmNtMWhiRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVibTl5YldGc1RXRndWSGx3WlNBOUlHMXBMQ0IwYUdsekxtNXZjbTFoYkZOallXeGxJRDBnYm1WM0lGb29NU3dnTVNrc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlERXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlEQXNJSFJvYVhNdWNtOTFaMmh1WlhOelRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1dFpYUmhiRzVsYzNOTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWxiblpOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbVZ1ZGsxaGNFbHVkR1Z1YzJsMGVTQTlJREVzSUhSb2FYTXVkMmx5WldaeVlXMWxJRDBnSVRFc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ01Td2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxZMkZ3SUQwZ0luSnZkVzVrSWl3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGFtOXBiaUE5SUNKeWIzVnVaQ0lzSUhSb2FYTXVabXhoZEZOb1lXUnBibWNnUFNBaE1Td2dkR2hwY3k1bWIyY2dQU0FoTUN3Z2RHaHBjeTV6WlhSV1lXeDFaWE1vWlNrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NWtaV1pwYm1WeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCVFZFRk9SRUZTUkRvZ0lpSUtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtTnZiRzl5TG1OdmNIa29aUzVqYjJ4dmNpa3NJSFJvYVhNdWNtOTFaMmh1WlhOeklEMGdaUzV5YjNWbmFHNWxjM01zSUhSb2FYTXViV1YwWVd4dVpYTnpJRDBnWlM1dFpYUmhiRzVsYzNNc0lIUm9hWE11YldGd0lEMGdaUzV0WVhBc0lIUm9hWE11YkdsbmFIUk5ZWEFnUFNCbExteHBaMmgwVFdGd0xDQjBhR2x6TG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUQwZ1pTNXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTd2dkR2hwY3k1aGIwMWhjQ0E5SUdVdVlXOU5ZWEFzSUhSb2FYTXVZVzlOWVhCSmJuUmxibk5wZEhrZ1BTQmxMbUZ2VFdGd1NXNTBaVzV6YVhSNUxDQjBhR2x6TG1WdGFYTnphWFpsTG1OdmNIa29aUzVsYldsemMybDJaU2tzSUhSb2FYTXVaVzFwYzNOcGRtVk5ZWEFnUFNCbExtVnRhWE56YVhabFRXRndMQ0IwYUdsekxtVnRhWE56YVhabFNXNTBaVzV6YVhSNUlEMGdaUzVsYldsemMybDJaVWx1ZEdWdWMybDBlU3dnZEdocGN5NWlkVzF3VFdGd0lEMGdaUzVpZFcxd1RXRndMQ0IwYUdsekxtSjFiWEJUWTJGc1pTQTlJR1V1WW5WdGNGTmpZV3hsTENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUdVdWJtOXliV0ZzVFdGd0xDQjBhR2x6TG01dmNtMWhiRTFoY0ZSNWNHVWdQU0JsTG01dmNtMWhiRTFoY0ZSNWNHVXNJSFJvYVhNdWJtOXliV0ZzVTJOaGJHVXVZMjl3ZVNobExtNXZjbTFoYkZOallXeGxLU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5d2dkR2hwY3k1eWIzVm5hRzVsYzNOTllYQWdQU0JsTG5KdmRXZG9ibVZ6YzAxaGNDd2dkR2hwY3k1dFpYUmhiRzVsYzNOTllYQWdQU0JsTG0xbGRHRnNibVZ6YzAxaGNDd2dkR2hwY3k1aGJIQm9ZVTFoY0NBOUlHVXVZV3h3YUdGTllYQXNJSFJvYVhNdVpXNTJUV0Z3SUQwZ1pTNWxiblpOWVhBc0lIUm9hWE11Wlc1MlRXRndTVzUwWlc1emFYUjVJRDBnWlM1bGJuWk5ZWEJKYm5SbGJuTnBkSGtzSUhSb2FYTXVkMmx5WldaeVlXMWxJRDBnWlM1M2FYSmxabkpoYldVc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ1pTNTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ3NJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaV05oY0NBOUlHVXVkMmx5WldaeVlXMWxUR2x1WldOaGNDd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBOUlHVXVkMmx5WldaeVlXMWxUR2x1WldwdmFXNHNJSFJvYVhNdVpteGhkRk5vWVdScGJtY2dQU0JsTG1ac1lYUlRhR0ZrYVc1bkxDQjBhR2x6TG1adlp5QTlJR1V1Wm05bkxDQjBhR2x6T3dvZ0lDQWdmUXA5TENCb1l5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1pHRWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMDFsYzJoUWFIbHphV05oYkUxaGRHVnlhV0ZzSUQwZ0lUQXNJSFJvYVhNdVpHVm1hVzVsY3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnVTFSQlRrUkJVa1E2SUNJaUxBb2dJQ0FnSUNBZ0lDQWdJQ0JRU0ZsVFNVTkJURG9nSWlJS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5SNWNHVWdQU0FpVFdWemFGQm9lWE5wWTJGc1RXRjBaWEpwWVd3aUxDQjBhR2x6TG1GdWFYTnZkSEp2Y0hsU2IzUmhkR2x2YmlBOUlEQXNJSFJvYVhNdVlXNXBjMjkwY205d2VVMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVkyeGxZWEpqYjJGMFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNZ1BTQXdMQ0IwYUdsekxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVkyeGxZWEpqYjJGMFRtOXliV0ZzVTJOaGJHVWdQU0J1WlhjZ1dpZ3hMQ0F4S1N3Z2RHaHBjeTVqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtbHZjaUE5SURFdU5Td2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ0p5Wldac1pXTjBhWFpwZEhraUxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZM1FvTWk0MUlDb2dLSFJvYVhNdWFXOXlJQzBnTVNrZ0x5QW9kR2hwY3k1cGIzSWdLeUF4S1N3Z01Dd2dNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNG9kQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBiM0lnUFNBb01TQXJJQzQwSUNvZ2RDa2dMeUFvTVNBdElDNDBJQ29nZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjeTVwY21sa1pYTmpaVzVqWlUxaGNDQTlJRzUxYkd3c0lIUm9hWE11YVhKcFpHVnpZMlZ1WTJWSlQxSWdQU0F4TGpNc0lIUm9hWE11YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOU1lXNW5aU0E5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdNVEF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBNREFLSUNBZ0lDQWdJQ0JkTENCMGFHbHpMbWx5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTV6YUdWbGJrTnZiRzl5SUQwZ2JtVjNJSEJsS0RBcExDQjBhR2x6TG5Ob1pXVnVRMjlzYjNKTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG5Ob1pXVnVVbTkxWjJodVpYTnpJRDBnTVN3Z2RHaHBjeTV6YUdWbGJsSnZkV2RvYm1WemMwMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWRISmhibk50YVhOemFXOXVUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NTBhR2xqYTI1bGMzTWdQU0F3TENCMGFHbHpMblJvYVdOcmJtVnpjMDFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZWFIwWlc1MVlYUnBiMjVFYVhOMFlXNWpaU0E5SURFZ0x5QXdMQ0IwYUdsekxtRjBkR1Z1ZFdGMGFXOXVRMjlzYjNJZ1BTQnVaWGNnY0dVb01Td2dNU3dnTVNrc0lIUm9hWE11YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGtnUFNBeExDQjBhR2x6TG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTV6Y0dWamRXeGhja052Ykc5eUlEMGdibVYzSUhCbEtERXNJREVzSURFcExDQjBhR2x6TG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxsOWhibWx6YjNSeWIzQjVJRDBnTUN3Z2RHaHBjeTVmWTJ4bFlYSmpiMkYwSUQwZ01Dd2dkR2hwY3k1ZmFYSnBaR1Z6WTJWdVkyVWdQU0F3TENCMGFHbHpMbDl6YUdWbGJpQTlJREFzSUhSb2FYTXVYM1J5WVc1emJXbHpjMmx2YmlBOUlEQXNJSFJvYVhNdWMyVjBWbUZzZFdWektHVXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMElHRnVhWE52ZEhKdmNIa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRnVhWE52ZEhKdmNIazdDaUFnSUNCOUNpQWdJQ0J6WlhRZ1lXNXBjMjkwY205d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZZVzVwYzI5MGNtOXdlU0ErSURBZ0lUMGdaU0ErSURBZ0ppWWdkR2hwY3k1MlpYSnphVzl1S3lzc0lIUm9hWE11WDJGdWFYTnZkSEp2Y0hrZ1BTQmxPd29nSUNBZ2ZRb2dJQ0FnWjJWMElHTnNaV0Z5WTI5aGRDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyeGxZWEpqYjJGME93b2dJQ0FnZlFvZ0lDQWdjMlYwSUdOc1pXRnlZMjloZENobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyeGxZWEpqYjJGMElENGdNQ0FoUFNCbElENGdNQ0FtSmlCMGFHbHpMblpsY25OcGIyNHJLeXdnZEdocGN5NWZZMnhsWVhKamIyRjBJRDBnWlRzS0lDQWdJSDBLSUNBZ0lHZGxkQ0JwY21sa1pYTmpaVzVqWlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVhKcFpHVnpZMlZ1WTJVN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnYVhKcFpHVnpZMlZ1WTJVb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgybHlhV1JsYzJObGJtTmxJRDRnTUNBaFBTQmxJRDRnTUNBbUppQjBhR2x6TG5abGNuTnBiMjRyS3l3Z2RHaHBjeTVmYVhKcFpHVnpZMlZ1WTJVZ1BTQmxPd29nSUNBZ2ZRb2dJQ0FnWjJWMElITm9aV1Z1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6YUdWbGJqc0tJQ0FnSUgwS0lDQWdJSE5sZENCemFHVmxiaWhsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJobFpXNGdQaUF3SUNFOUlHVWdQaUF3SUNZbUlIUm9hWE11ZG1WeWMybHZiaXNyTENCMGFHbHpMbDl6YUdWbGJpQTlJR1U3Q2lBZ0lDQjlDaUFnSUNCblpYUWdkSEpoYm5OdGFYTnphVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwY21GdWMyMXBjM05wYjI0N0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnZEhKaGJuTnRhWE56YVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxsOTBjbUZ1YzIxcGMzTnBiMjRnUGlBd0lDRTlJR1VnUGlBd0lDWW1JSFJvYVhNdWRtVnljMmx2YmlzckxDQjBhR2x6TGw5MGNtRnVjMjFwYzNOcGIyNGdQU0JsT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdVpHVm1hVzVsY3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnVTFSQlRrUkJVa1E2SUNJaUxBb2dJQ0FnSUNBZ0lDQWdJQ0JRU0ZsVFNVTkJURG9nSWlJS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1GdWFYTnZkSEp2Y0hrZ1BTQmxMbUZ1YVhOdmRISnZjSGtzSUhSb2FYTXVZVzVwYzI5MGNtOXdlVkp2ZEdGMGFXOXVJRDBnWlM1aGJtbHpiM1J5YjNCNVVtOTBZWFJwYjI0c0lIUm9hWE11WVc1cGMyOTBjbTl3ZVUxaGNDQTlJR1V1WVc1cGMyOTBjbTl3ZVUxaGNDd2dkR2hwY3k1amJHVmhjbU52WVhRZ1BTQmxMbU5zWldGeVkyOWhkQ3dnZEdocGN5NWpiR1ZoY21OdllYUk5ZWEFnUFNCbExtTnNaV0Z5WTI5aGRFMWhjQ3dnZEdocGN5NWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTWdQU0JsTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6Y3l3Z2RHaHBjeTVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhBZ1BTQmxMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0N3Z2RHaHBjeTVqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEFnUFNCbExtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDd2dkR2hwY3k1amJHVmhjbU52WVhST2IzSnRZV3hUWTJGc1pTNWpiM0I1S0dVdVkyeGxZWEpqYjJGMFRtOXliV0ZzVTJOaGJHVXBMQ0IwYUdsekxtbHZjaUE5SUdVdWFXOXlMQ0IwYUdsekxtbHlhV1JsYzJObGJtTmxJRDBnWlM1cGNtbGtaWE5qWlc1alpTd2dkR2hwY3k1cGNtbGtaWE5qWlc1alpVMWhjQ0E5SUdVdWFYSnBaR1Z6WTJWdVkyVk5ZWEFzSUhSb2FYTXVhWEpwWkdWelkyVnVZMlZKVDFJZ1BTQmxMbWx5YVdSbGMyTmxibU5sU1U5U0xDQjBhR2x6TG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelVtRnVaMlVnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJQzR1TG1VdWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTlNZVzVuWlFvZ0lDQWdJQ0FnSUYwc0lIUm9hWE11YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYQWdQU0JsTG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXRndMQ0IwYUdsekxuTm9aV1Z1SUQwZ1pTNXphR1ZsYml3Z2RHaHBjeTV6YUdWbGJrTnZiRzl5TG1OdmNIa29aUzV6YUdWbGJrTnZiRzl5S1N3Z2RHaHBjeTV6YUdWbGJrTnZiRzl5VFdGd0lEMGdaUzV6YUdWbGJrTnZiRzl5VFdGd0xDQjBhR2x6TG5Ob1pXVnVVbTkxWjJodVpYTnpJRDBnWlM1emFHVmxibEp2ZFdkb2JtVnpjeXdnZEdocGN5NXphR1ZsYmxKdmRXZG9ibVZ6YzAxaGNDQTlJR1V1YzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEFzSUhSb2FYTXVkSEpoYm5OdGFYTnphVzl1SUQwZ1pTNTBjbUZ1YzIxcGMzTnBiMjRzSUhSb2FYTXVkSEpoYm5OdGFYTnphVzl1VFdGd0lEMGdaUzUwY21GdWMyMXBjM05wYjI1TllYQXNJSFJvYVhNdWRHaHBZMnR1WlhOeklEMGdaUzUwYUdsamEyNWxjM01zSUhSb2FYTXVkR2hwWTJ0dVpYTnpUV0Z3SUQwZ1pTNTBhR2xqYTI1bGMzTk5ZWEFzSUhSb2FYTXVZWFIwWlc1MVlYUnBiMjVFYVhOMFlXNWpaU0E5SUdVdVlYUjBaVzUxWVhScGIyNUVhWE4wWVc1alpTd2dkR2hwY3k1aGRIUmxiblZoZEdsdmJrTnZiRzl5TG1OdmNIa29aUzVoZEhSbGJuVmhkR2x2YmtOdmJHOXlLU3dnZEdocGN5NXpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVTQTlJR1V1YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGtzSUhSb2FYTXVjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEFnUFNCbExuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndMQ0IwYUdsekxuTndaV04xYkdGeVEyOXNiM0l1WTI5d2VTaGxMbk53WldOMWJHRnlRMjlzYjNJcExDQjBhR2x6TG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnUFNCbExuTndaV04xYkdGeVEyOXNiM0pOWVhBc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUhWaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCaWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpUV1Z6YUZCb2IyNW5UV0YwWlhKcFlXd2dQU0FoTUN3Z2RHaHBjeTUwZVhCbElEMGdJazFsYzJoUWFHOXVaMDFoZEdWeWFXRnNJaXdnZEdocGN5NWpiMnh2Y2lBOUlHNWxkeUJ3WlNneE5qYzNOekl4TlNrc0lIUm9hWE11YzNCbFkzVnNZWElnUFNCdVpYY2djR1VvTVRFeE9EUTRNU2tzSUhSb2FYTXVjMmhwYm1sdVpYTnpJRDBnTXpBc0lIUm9hWE11YldGd0lEMGdiblZzYkN3Z2RHaHBjeTVzYVdkb2RFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJHbG5hSFJOWVhCSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxtRnZUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWhiMDFoY0VsdWRHVnVjMmwwZVNBOUlERXNJSFJvYVhNdVpXMXBjM05wZG1VZ1BTQnVaWGNnY0dVb01Da3NJSFJvYVhNdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxtVnRhWE56YVhabFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aWRXMXdUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VTJOaGJHVWdQU0F4TENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUcxcExDQjBhR2x6TG01dmNtMWhiRk5qWVd4bElEMGdibVYzSUZvb01Td2dNU2tzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SURFc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SURBc0lIUm9hWE11YzNCbFkzVnNZWEpOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbUZzY0doaFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1bGJuWk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtTnZiV0pwYm1VZ1BTQjRZU3dnZEdocGN5NXlaV1pzWldOMGFYWnBkSGtnUFNBeExDQjBhR2x6TG5KbFpuSmhZM1JwYjI1U1lYUnBieUE5SUM0NU9Dd2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQWhNU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0F4TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WallYQWdQU0FpY205MWJtUWlMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVZxYjJsdUlEMGdJbkp2ZFc1a0lpd2dkR2hwY3k1bWJHRjBVMmhoWkdsdVp5QTlJQ0V4TENCMGFHbHpMbVp2WnlBOUlDRXdMQ0IwYUdsekxuTmxkRlpoYkhWbGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE11YzNCbFkzVnNZWEl1WTI5d2VTaGxMbk53WldOMWJHRnlLU3dnZEdocGN5NXphR2x1YVc1bGMzTWdQU0JsTG5Ob2FXNXBibVZ6Y3l3Z2RHaHBjeTV0WVhBZ1BTQmxMbTFoY0N3Z2RHaHBjeTVzYVdkb2RFMWhjQ0E5SUdVdWJHbG5hSFJOWVhBc0lIUm9hWE11YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtnUFNCbExteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUxDQjBhR2x6TG1GdlRXRndJRDBnWlM1aGIwMWhjQ3dnZEdocGN5NWhiMDFoY0VsdWRHVnVjMmwwZVNBOUlHVXVZVzlOWVhCSmJuUmxibk5wZEhrc0lIUm9hWE11WlcxcGMzTnBkbVV1WTI5d2VTaGxMbVZ0YVhOemFYWmxLU3dnZEdocGN5NWxiV2x6YzJsMlpVMWhjQ0E5SUdVdVpXMXBjM05wZG1WTllYQXNJSFJvYVhNdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrZ1BTQmxMbVZ0YVhOemFYWmxTVzUwWlc1emFYUjVMQ0IwYUdsekxtSjFiWEJOWVhBZ1BTQmxMbUoxYlhCTllYQXNJSFJvYVhNdVluVnRjRk5qWVd4bElEMGdaUzVpZFcxd1UyTmhiR1VzSUhSb2FYTXVibTl5YldGc1RXRndJRDBnWlM1dWIzSnRZV3hOWVhBc0lIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTQTlJR1V1Ym05eWJXRnNUV0Z3Vkhsd1pTd2dkR2hwY3k1dWIzSnRZV3hUWTJGc1pTNWpiM0I1S0dVdWJtOXliV0ZzVTJOaGJHVXBMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRTFoY0NBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0xDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRGTmpZV3hsSUQwZ1pTNWthWE53YkdGalpXMWxiblJUWTJGc1pTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6SUQwZ1pTNWthWE53YkdGalpXMWxiblJDYVdGekxDQjBhR2x6TG5Od1pXTjFiR0Z5VFdGd0lEMGdaUzV6Y0dWamRXeGhjazFoY0N3Z2RHaHBjeTVoYkhCb1lVMWhjQ0E5SUdVdVlXeHdhR0ZOWVhBc0lIUm9hWE11Wlc1MlRXRndJRDBnWlM1bGJuWk5ZWEFzSUhSb2FYTXVZMjl0WW1sdVpTQTlJR1V1WTI5dFltbHVaU3dnZEdocGN5NXlaV1pzWldOMGFYWnBkSGtnUFNCbExuSmxabXhsWTNScGRtbDBlU3dnZEdocGN5NXlaV1p5WVdOMGFXOXVVbUYwYVc4Z1BTQmxMbkpsWm5KaFkzUnBiMjVTWVhScGJ5d2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQmxMbmRwY21WbWNtRnRaU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0JsTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bFkyRndJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxZMkZ3TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxhbTlwYml3Z2RHaHBjeTVtYkdGMFUyaGhaR2x1WnlBOUlHVXVabXhoZEZOb1lXUnBibWNzSUhSb2FYTXVabTluSUQwZ1pTNW1iMmNzSUhSb2FYTTdDaUFnSUNCOUNuMHNJR1JqSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJpZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selRXVnphRlJ2YjI1TllYUmxjbWxoYkNBOUlDRXdMQ0IwYUdsekxtUmxabWx1WlhNZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUZSUFQwNDZJQ0lpQ2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTUwZVhCbElEMGdJazFsYzJoVWIyOXVUV0YwWlhKcFlXd2lMQ0IwYUdsekxtTnZiRzl5SUQwZ2JtVjNJSEJsS0RFMk56YzNNakUxS1N3Z2RHaHBjeTV0WVhBZ1BTQnVkV3hzTENCMGFHbHpMbWR5WVdScFpXNTBUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NXNhV2RvZEUxaGNDQTlJRzUxYkd3c0lIUm9hWE11YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtnUFNBeExDQjBhR2x6TG1GdlRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aGIwMWhjRWx1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11WlcxcGMzTnBkbVVnUFNCdVpYY2djR1VvTUNrc0lIUm9hWE11WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtnUFNBeExDQjBhR2x6TG1WdGFYTnphWFpsVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVpZFcxd1RXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aWRXMXdVMk5oYkdVZ1BTQXhMQ0IwYUdsekxtNXZjbTFoYkUxaGNDQTlJRzUxYkd3c0lIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTQTlJRzFwTENCMGFHbHpMbTV2Y20xaGJGTmpZV3hsSUQwZ2JtVjNJRm9vTVN3Z01Ta3NJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJREVzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJREFzSUhSb2FYTXVZV3h3YUdGTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG5kcGNtVm1jbUZ0WlNBOUlDRXhMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVYzYVdSMGFDQTlJREVzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WldOaGNDQTlJQ0p5YjNWdVpDSXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaV3B2YVc0Z1BTQWljbTkxYm1RaUxDQjBhR2x6TG1adlp5QTlJQ0V3TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtTnZiRzl5TG1OdmNIa29aUzVqYjJ4dmNpa3NJSFJvYVhNdWJXRndJRDBnWlM1dFlYQXNJSFJvYVhNdVozSmhaR2xsYm5STllYQWdQU0JsTG1keVlXUnBaVzUwVFdGd0xDQjBhR2x6TG14cFoyaDBUV0Z3SUQwZ1pTNXNhV2RvZEUxaGNDd2dkR2hwY3k1c2FXZG9kRTFoY0VsdWRHVnVjMmwwZVNBOUlHVXViR2xuYUhSTllYQkpiblJsYm5OcGRIa3NJSFJvYVhNdVlXOU5ZWEFnUFNCbExtRnZUV0Z3TENCMGFHbHpMbUZ2VFdGd1NXNTBaVzV6YVhSNUlEMGdaUzVoYjAxaGNFbHVkR1Z1YzJsMGVTd2dkR2hwY3k1bGJXbHpjMmwyWlM1amIzQjVLR1V1WlcxcGMzTnBkbVVwTENCMGFHbHpMbVZ0YVhOemFYWmxUV0Z3SUQwZ1pTNWxiV2x6YzJsMlpVMWhjQ3dnZEdocGN5NWxiV2x6YzJsMlpVbHVkR1Z1YzJsMGVTQTlJR1V1WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtzSUhSb2FYTXVZblZ0Y0UxaGNDQTlJR1V1WW5WdGNFMWhjQ3dnZEdocGN5NWlkVzF3VTJOaGJHVWdQU0JsTG1KMWJYQlRZMkZzWlN3Z2RHaHBjeTV1YjNKdFlXeE5ZWEFnUFNCbExtNXZjbTFoYkUxaGNDd2dkR2hwY3k1dWIzSnRZV3hOWVhCVWVYQmxJRDBnWlM1dWIzSnRZV3hOWVhCVWVYQmxMQ0IwYUdsekxtNXZjbTFoYkZOallXeGxMbU52Y0hrb1pTNXViM0p0WVd4VFkyRnNaU2tzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEMGdaUzVrYVhOd2JHRmpaVzFsYm5STllYQXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRUpwWVhNZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTXNJSFJvYVhNdVlXeHdhR0ZOWVhBZ1BTQmxMbUZzY0doaFRXRndMQ0IwYUdsekxuZHBjbVZtY21GdFpTQTlJR1V1ZDJseVpXWnlZVzFsTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SUdVdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0xDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVmpZWEFnUFNCbExuZHBjbVZtY21GdFpVeHBibVZqWVhBc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRnUFNCbExuZHBjbVZtY21GdFpVeHBibVZxYjJsdUxDQjBhR2x6TG1adlp5QTlJR1V1Wm05bkxDQjBhR2x6T3dvZ0lDQWdmUXA5TENCbVl5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1luUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMDFsYzJoT2IzSnRZV3hOWVhSbGNtbGhiQ0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVFdWemFFNXZjbTFoYkUxaGRHVnlhV0ZzSWl3Z2RHaHBjeTVpZFcxd1RXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aWRXMXdVMk5oYkdVZ1BTQXhMQ0IwYUdsekxtNXZjbTFoYkUxaGNDQTlJRzUxYkd3c0lIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTQTlJRzFwTENCMGFHbHpMbTV2Y20xaGJGTmpZV3hsSUQwZ2JtVjNJRm9vTVN3Z01Ta3NJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJREVzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJREFzSUhSb2FYTXVkMmx5WldaeVlXMWxJRDBnSVRFc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ01Td2dkR2hwY3k1bWJHRjBVMmhoWkdsdVp5QTlJQ0V4TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtSjFiWEJOWVhBZ1BTQmxMbUoxYlhCTllYQXNJSFJvYVhNdVluVnRjRk5qWVd4bElEMGdaUzVpZFcxd1UyTmhiR1VzSUhSb2FYTXVibTl5YldGc1RXRndJRDBnWlM1dWIzSnRZV3hOWVhBc0lIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTQTlJR1V1Ym05eWJXRnNUV0Z3Vkhsd1pTd2dkR2hwY3k1dWIzSnRZV3hUWTJGc1pTNWpiM0I1S0dVdWJtOXliV0ZzVTJOaGJHVXBMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRTFoY0NBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0xDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRGTmpZV3hsSUQwZ1pTNWthWE53YkdGalpXMWxiblJUWTJGc1pTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6SUQwZ1pTNWthWE53YkdGalpXMWxiblJDYVdGekxDQjBhR2x6TG5kcGNtVm1jbUZ0WlNBOUlHVXVkMmx5WldaeVlXMWxMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVYzYVdSMGFDQTlJR1V1ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvTENCMGFHbHpMbVpzWVhSVGFHRmthVzVuSUQwZ1pTNW1iR0YwVTJoaFpHbHVaeXdnZEdocGN6c0tJQ0FnSUgwS2ZTd2djR01nUFNCamJHRnpjeUJsZUhSbGJtUnpJR0owSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11YVhOTlpYTm9UR0Z0WW1WeWRFMWhkR1Z5YVdGc0lEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSk5aWE5vVEdGdFltVnlkRTFoZEdWeWFXRnNJaXdnZEdocGN5NWpiMnh2Y2lBOUlHNWxkeUJ3WlNneE5qYzNOekl4TlNrc0lIUm9hWE11YldGd0lEMGdiblZzYkN3Z2RHaHBjeTVzYVdkb2RFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJHbG5hSFJOWVhCSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxtRnZUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWhiMDFoY0VsdWRHVnVjMmwwZVNBOUlERXNJSFJvYVhNdVpXMXBjM05wZG1VZ1BTQnVaWGNnY0dVb01Da3NJSFJvYVhNdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxtVnRhWE56YVhabFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aWRXMXdUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VTJOaGJHVWdQU0F4TENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUcxcExDQjBhR2x6TG01dmNtMWhiRk5qWVd4bElEMGdibVYzSUZvb01Td2dNU2tzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SURFc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SURBc0lIUm9hWE11YzNCbFkzVnNZWEpOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbUZzY0doaFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1bGJuWk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtTnZiV0pwYm1VZ1BTQjRZU3dnZEdocGN5NXlaV1pzWldOMGFYWnBkSGtnUFNBeExDQjBhR2x6TG5KbFpuSmhZM1JwYjI1U1lYUnBieUE5SUM0NU9Dd2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQWhNU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0F4TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WallYQWdQU0FpY205MWJtUWlMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVZxYjJsdUlEMGdJbkp2ZFc1a0lpd2dkR2hwY3k1bWJHRjBVMmhoWkdsdVp5QTlJQ0V4TENCMGFHbHpMbVp2WnlBOUlDRXdMQ0IwYUdsekxuTmxkRlpoYkhWbGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE11YldGd0lEMGdaUzV0WVhBc0lIUm9hWE11YkdsbmFIUk5ZWEFnUFNCbExteHBaMmgwVFdGd0xDQjBhR2x6TG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUQwZ1pTNXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTd2dkR2hwY3k1aGIwMWhjQ0E5SUdVdVlXOU5ZWEFzSUhSb2FYTXVZVzlOWVhCSmJuUmxibk5wZEhrZ1BTQmxMbUZ2VFdGd1NXNTBaVzV6YVhSNUxDQjBhR2x6TG1WdGFYTnphWFpsTG1OdmNIa29aUzVsYldsemMybDJaU2tzSUhSb2FYTXVaVzFwYzNOcGRtVk5ZWEFnUFNCbExtVnRhWE56YVhabFRXRndMQ0IwYUdsekxtVnRhWE56YVhabFNXNTBaVzV6YVhSNUlEMGdaUzVsYldsemMybDJaVWx1ZEdWdWMybDBlU3dnZEdocGN5NWlkVzF3VFdGd0lEMGdaUzVpZFcxd1RXRndMQ0IwYUdsekxtSjFiWEJUWTJGc1pTQTlJR1V1WW5WdGNGTmpZV3hsTENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUdVdWJtOXliV0ZzVFdGd0xDQjBhR2x6TG01dmNtMWhiRTFoY0ZSNWNHVWdQU0JsTG01dmNtMWhiRTFoY0ZSNWNHVXNJSFJvYVhNdWJtOXliV0ZzVTJOaGJHVXVZMjl3ZVNobExtNXZjbTFoYkZOallXeGxLU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5d2dkR2hwY3k1emNHVmpkV3hoY2sxaGNDQTlJR1V1YzNCbFkzVnNZWEpOWVhBc0lIUm9hWE11WVd4d2FHRk5ZWEFnUFNCbExtRnNjR2hoVFdGd0xDQjBhR2x6TG1WdWRrMWhjQ0E5SUdVdVpXNTJUV0Z3TENCMGFHbHpMbU52YldKcGJtVWdQU0JsTG1OdmJXSnBibVVzSUhSb2FYTXVjbVZtYkdWamRHbDJhWFI1SUQwZ1pTNXlaV1pzWldOMGFYWnBkSGtzSUhSb2FYTXVjbVZtY21GamRHbHZibEpoZEdsdklEMGdaUzV5WldaeVlXTjBhVzl1VW1GMGFXOHNJSFJvYVhNdWQybHlaV1p5WVcxbElEMGdaUzUzYVhKbFpuSmhiV1VzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9JRDBnWlM1M2FYSmxabkpoYldWTWFXNWxkMmxrZEdnc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ0E5SUdVdWQybHlaV1p5WVcxbFRHbHVaV05oY0N3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGFtOXBiaUE5SUdVdWQybHlaV1p5WVcxbFRHbHVaV3B2YVc0c0lIUm9hWE11Wm14aGRGTm9ZV1JwYm1jZ1BTQmxMbVpzWVhSVGFHRmthVzVuTENCMGFHbHpMbVp2WnlBOUlHVXVabTluTENCMGFHbHpPd29nSUNBZ2ZRcDlMQ0J0WXlBOUlHTnNZWE56SUdWNGRHVnVaSE1nWW5RZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1cGMwMWxjMmhOWVhSallYQk5ZWFJsY21saGJDQTlJQ0V3TENCMGFHbHpMbVJsWm1sdVpYTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFMUJWRU5CVURvZ0lpSUtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuUjVjR1VnUFNBaVRXVnphRTFoZEdOaGNFMWhkR1Z5YVdGc0lpd2dkR2hwY3k1amIyeHZjaUE5SUc1bGR5QndaU2d4TmpjM056SXhOU2tzSUhSb2FYTXViV0YwWTJGd0lEMGdiblZzYkN3Z2RHaHBjeTV0WVhBZ1BTQnVkV3hzTENCMGFHbHpMbUoxYlhCTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1KMWJYQlRZMkZzWlNBOUlERXNJSFJvYVhNdWJtOXliV0ZzVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTV1YjNKdFlXeE5ZWEJVZVhCbElEMGdiV2tzSUhSb2FYTXVibTl5YldGc1UyTmhiR1VnUFNCdVpYY2dXaWd4TENBeEtTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bElEMGdNU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJDYVdGeklEMGdNQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJRzUxYkd3c0lIUm9hWE11Wm14aGRGTm9ZV1JwYm1jZ1BTQWhNU3dnZEdocGN5NW1iMmNnUFNBaE1Dd2dkR2hwY3k1elpYUldZV3gxWlhNb1pTazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTVrWldacGJtVnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQk5RVlJEUVZBNklDSWlDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NWpiMnh2Y2k1amIzQjVLR1V1WTI5c2IzSXBMQ0IwYUdsekxtMWhkR05oY0NBOUlHVXViV0YwWTJGd0xDQjBhR2x6TG0xaGNDQTlJR1V1YldGd0xDQjBhR2x6TG1KMWJYQk5ZWEFnUFNCbExtSjFiWEJOWVhBc0lIUm9hWE11WW5WdGNGTmpZV3hsSUQwZ1pTNWlkVzF3VTJOaGJHVXNJSFJvYVhNdWJtOXliV0ZzVFdGd0lEMGdaUzV1YjNKdFlXeE5ZWEFzSUhSb2FYTXVibTl5YldGc1RXRndWSGx3WlNBOUlHVXVibTl5YldGc1RXRndWSGx3WlN3Z2RHaHBjeTV1YjNKdFlXeFRZMkZzWlM1amIzQjVLR1V1Ym05eWJXRnNVMk5oYkdVcExDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRFMWhjQ0E5SUdVdVpHbHpjR3hoWTJWdFpXNTBUV0Z3TENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxJRDBnWlM1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SQ2FXRnpJRDBnWlM1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6TENCMGFHbHpMbUZzY0doaFRXRndJRDBnWlM1aGJIQm9ZVTFoY0N3Z2RHaHBjeTVtYkdGMFUyaGhaR2x1WnlBOUlHVXVabXhoZEZOb1lXUnBibWNzSUhSb2FYTXVabTluSUQwZ1pTNW1iMmNzSUhSb2FYTTdDaUFnSUNCOUNuMHNJR2RqSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUIzZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selRHbHVaVVJoYzJobFpFMWhkR1Z5YVdGc0lEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSk1hVzVsUkdGemFHVmtUV0YwWlhKcFlXd2lMQ0IwYUdsekxuTmpZV3hsSUQwZ01Td2dkR2hwY3k1a1lYTm9VMmw2WlNBOUlETXNJSFJvYVhNdVoyRndVMmw2WlNBOUlERXNJSFJvYVhNdWMyVjBWbUZzZFdWektHVXBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11YzJOaGJHVWdQU0JsTG5OallXeGxMQ0IwYUdsekxtUmhjMmhUYVhwbElEMGdaUzVrWVhOb1UybDZaU3dnZEdocGN5NW5ZWEJUYVhwbElEMGdaUzVuWVhCVGFYcGxMQ0IwYUdsek93b2dJQ0FnZlFwOU93cG1kVzVqZEdsdmJpQnVhU2h6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdjbVYwZFhKdUlDRnpNU0I4ZkNBaGRDQW1KaUJ6TVM1amIyNXpkSEoxWTNSdmNpQTlQVDBnWlNBL0lITXhJRG9nZEhsd1pXOW1JR1V1UWxsVVJWTmZVRVZTWDBWTVJVMUZUbFFnUFQwZ0ltNTFiV0psY2lJZ1B5QnVaWGNnWlNoek1Ta2dPaUJCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2h6TVNrN0NuMEtablZ1WTNScGIyNGdWV1FvY3pFcElIc0tJQ0FnSUhKbGRIVnliaUJCY25KaGVVSjFabVpsY2k1cGMxWnBaWGNvY3pFcElDWW1JQ0VvY3pFZ2FXNXpkR0Z1WTJWdlppQkVZWFJoVm1sbGR5azdDbjBLWm5WdVkzUnBiMjRnUkdRb2N6RXBJSHNLSUNBZ0lHWjFibU4wYVc5dUlHVW9hU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCek1WdHBYU0F0SUhNeFczSmRPd29nSUNBZ2ZRb2dJQ0FnYkdWMElIUWdQU0J6TVM1c1pXNW5kR2dzSUc0Z1BTQnVaWGNnUVhKeVlYa29kQ2s3Q2lBZ0lDQm1iM0lvYkdWMElHa2dQU0F3T3lCcElDRTlQU0IwT3lBcksya3BibHRwWFNBOUlHazdDaUFnSUNCeVpYUjFjbTRnYmk1emIzSjBLR1VwTENCdU93cDlDbVoxYm1OMGFXOXVJRjlqS0hNeExDQmxMQ0IwS1NCN0NpQWdJQ0JzWlhRZ2JpQTlJSE14TG14bGJtZDBhQ3dnYVNBOUlHNWxkeUJ6TVM1amIyNXpkSEoxWTNSdmNpaHVLVHNLSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREFzSUdFZ1BTQXdPeUJoSUNFOVBTQnVPeUFySzNJcGV3b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RGdHlYU0FxSUdVN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaklEMGdNRHNnWXlBaFBUMGdaVHNnS3l0aktXbGJZU3NyWFNBOUlITXhXMjhnS3lCalhUc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQnBPd3A5Q21aMWJtTjBhVzl1SUNSaktITXhMQ0JsTENCMExDQnVLU0I3Q2lBZ0lDQnNaWFFnYVNBOUlERXNJSElnUFNCek1Wc3dYVHNLSUNBZ0lHWnZjaWc3SUhJZ0lUMDlJSFp2YVdRZ01DQW1KaUJ5VzI1ZElEMDlQU0IyYjJsa0lEQTdLWElnUFNCek1WdHBLeXRkT3dvZ0lDQWdhV1lnS0hJZ1BUMDlJSFp2YVdRZ01Da2djbVYwZFhKdU93b2dJQ0FnYkdWMElHRWdQU0J5VzI1ZE93b2dJQ0FnYVdZZ0tHRWdJVDA5SUhadmFXUWdNQ2tnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWVNrcElHUnZJR0VnUFNCeVcyNWRMQ0JoSUNFOVBTQjJiMmxrSURBZ0ppWWdLR1V1Y0hWemFDaHlMblJwYldVcExDQjBMbkIxYzJndVlYQndiSGtvZEN3Z1lTa3BMQ0J5SUQwZ2N6RmJhU3NyWFRzS0lDQWdJSGRvYVd4bElDaHlJQ0U5UFNCMmIybGtJREFwQ2lBZ0lDQmxiSE5sSUdsbUlDaGhMblJ2UVhKeVlYa2dJVDA5SUhadmFXUWdNQ2tnWkc4Z1lTQTlJSEpiYmwwc0lHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb1pTNXdkWE5vS0hJdWRHbHRaU2tzSUdFdWRHOUJjbkpoZVNoMExDQjBMbXhsYm1kMGFDa3BMQ0J5SUQwZ2N6RmJhU3NyWFRzS0lDQWdJSGRvYVd4bElDaHlJQ0U5UFNCMmIybGtJREFwQ2lBZ0lDQmxiSE5sSUdSdklHRWdQU0J5VzI1ZExDQmhJQ0U5UFNCMmIybGtJREFnSmlZZ0tHVXVjSFZ6YUNoeUxuUnBiV1VwTENCMExuQjFjMmdvWVNrcExDQnlJRDBnY3pGYmFTc3JYVHNLSUNBZ0lIZG9hV3hsSUNoeUlDRTlQU0IyYjJsa0lEQXBDbjBLWm5WdVkzUnBiMjRnZVhnb2N6RXNJR1VzSUhRc0lHNHNJR2tnUFNBek1Da2dld29nSUNBZ2JHVjBJSElnUFNCek1TNWpiRzl1WlNncE93b2dJQ0FnY2k1dVlXMWxJRDBnWlRzS0lDQWdJR3hsZENCaElEMGdXMTA3Q2lBZ0lDQm1iM0lvYkdWMElHTWdQU0F3T3lCaklEd2djaTUwY21GamEzTXViR1Z1WjNSb095QXJLMk1wZXdvZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnY2k1MGNtRmphM05iWTEwc0lHZ2dQU0JzTG1kbGRGWmhiSFZsVTJsNlpTZ3BMQ0IxSUQwZ1cxMHNJR1FnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHWWdQU0F3T3lCbUlEd2diQzUwYVcxbGN5NXNaVzVuZEdnN0lDc3JaaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0SUQwZ2JDNTBhVzFsYzF0bVhTQXFJR2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0cwZ1BDQjBJSHg4SUcwZ1BqMGdiaWtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhVdWNIVnphQ2hzTG5ScGJXVnpXMlpkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWHlBOUlEQTdJRjhnUENCb095QXJLMThwWkM1d2RYTm9LR3d1ZG1Gc2RXVnpXMllnS2lCb0lDc2dYMTBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFV1YkdWdVozUm9JQ0U5UFNBd0lDWW1JQ2hzTG5ScGJXVnpJRDBnYm1rb2RTd2diQzUwYVcxbGN5NWpiMjV6ZEhKMVkzUnZjaWtzSUd3dWRtRnNkV1Z6SUQwZ2Jta29aQ3dnYkM1MllXeDFaWE11WTI5dWMzUnlkV04wYjNJcExDQmhMbkIxYzJnb2JDa3BPd29nSUNBZ2ZRb2dJQ0FnY2k1MGNtRmphM01nUFNCaE93b2dJQ0FnYkdWMElHOGdQU0F4SUM4Z01Ec0tJQ0FnSUdadmNpaHNaWFFnWXlBOUlEQTdJR01nUENCeUxuUnlZV05yY3k1c1pXNW5kR2c3SUNzcll5bHZJRDRnY2k1MGNtRmphM05iWTEwdWRHbHRaWE5iTUYwZ0ppWWdLRzhnUFNCeUxuUnlZV05yYzF0alhTNTBhVzFsYzFzd1hTazdDaUFnSUNCbWIzSW9iR1YwSUdNZ1BTQXdPeUJqSUR3Z2NpNTBjbUZqYTNNdWJHVnVaM1JvT3lBcksyTXBjaTUwY21GamEzTmJZMTB1YzJocFpuUW9MVEVnS2lCdktUc0tJQ0FnSUhKbGRIVnliaUJ5TG5KbGMyVjBSSFZ5WVhScGIyNG9LU3dnY2pzS2ZRcG1kVzVqZEdsdmJpQk5lQ2h6TVN3Z1pTQTlJREFzSUhRZ1BTQnpNU3dnYmlBOUlETXdLU0I3Q2lBZ0lDQnVJRHc5SURBZ0ppWWdLRzRnUFNBek1DazdDaUFnSUNCc1pYUWdhU0E5SUhRdWRISmhZMnR6TG14bGJtZDBhQ3dnY2lBOUlHVWdMeUJ1T3dvZ0lDQWdabTl5S0d4bGRDQmhJRDBnTURzZ1lTQThJR2s3SUNzcllTbDdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQjBMblJ5WVdOcmMxdGhYU3dnWXlBOUlHOHVWbUZzZFdWVWVYQmxUbUZ0WlRzS0lDQWdJQ0FnSUNCcFppQW9ZeUE5UFQwZ0ltSnZiMndpSUh4OElHTWdQVDA5SUNKemRISnBibWNpS1NCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUhNeExuUnlZV05yY3k1bWFXNWtLR1oxYm1OMGFXOXVLSEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQXVibUZ0WlNBOVBUMGdieTV1WVcxbElDWW1JSEF1Vm1Gc2RXVlVlWEJsVG1GdFpTQTlQVDBnWXpzS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQnBaaUFvYkNBOVBUMGdkbTlwWkNBd0tTQmpiMjUwYVc1MVpUc0tJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlEQXNJSFVnUFNCdkxtZGxkRlpoYkhWbFUybDZaU2dwT3dvZ0lDQWdJQ0FnSUc4dVkzSmxZWFJsU1c1MFpYSndiMnhoYm5RdWFYTkpiblJsY25CdmJHRnVkRVpoWTNSdmNubE5aWFJvYjJSSFRGUkdRM1ZpYVdOVGNHeHBibVVnSmlZZ0tHZ2dQU0IxSUM4Z015azdDaUFnSUNBZ0lDQWdiR1YwSUdRZ1BTQXdMQ0JtSUQwZ2JDNW5aWFJXWVd4MVpWTnBlbVVvS1RzS0lDQWdJQ0FnSUNCc0xtTnlaV0YwWlVsdWRHVnljRzlzWVc1MExtbHpTVzUwWlhKd2IyeGhiblJHWVdOMGIzSjVUV1YwYUc5a1IweFVSa04xWW1salUzQnNhVzVsSUNZbUlDaGtJRDBnWmlBdklETXBPd29nSUNBZ0lDQWdJR3hsZENCdElEMGdieTUwYVcxbGN5NXNaVzVuZEdnZ0xTQXhMQ0JmT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRHc5SUc4dWRHbHRaWE5iTUYwcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQWdQU0JvTENCMklEMGdkU0F0SUdnN0NpQWdJQ0FnSUNBZ0lDQWdJRjhnUFNCdkxuWmhiSFZsY3k1emJHbGpaU2h3TENCMktUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSElnUGowZ2J5NTBhVzFsYzF0dFhTa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjQ0E5SUcwZ0tpQjFJQ3NnYUN3Z2RpQTlJSEFnS3lCMUlDMGdhRHNLSUNBZ0lDQWdJQ0FnSUNBZ1h5QTlJRzh1ZG1Gc2RXVnpMbk5zYVdObEtIQXNJSFlwT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J3SUQwZ2J5NWpjbVZoZEdWSmJuUmxjbkJ2YkdGdWRDZ3BMQ0IySUQwZ2FDd2dlQ0E5SUhVZ0xTQm9Pd29nSUNBZ0lDQWdJQ0FnSUNCd0xtVjJZV3gxWVhSbEtISXBMQ0JmSUQwZ2NDNXlaWE4xYkhSQ2RXWm1aWEl1YzJ4cFkyVW9kaXdnZUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHTWdQVDA5SUNKeGRXRjBaWEp1YVc5dUlpQW1KaUJ1WlhjZ1ZYUW9LUzVtY205dFFYSnlZWGtvWHlrdWJtOXliV0ZzYVhwbEtDa3VZMjl1YW5WbllYUmxLQ2t1ZEc5QmNuSmhlU2hmS1RzS0lDQWdJQ0FnSUNCc1pYUWdaeUE5SUd3dWRHbHRaWE11YkdWdVozUm9Pd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdjQ0E5SURBN0lIQWdQQ0JuT3lBckszQXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkaUE5SUhBZ0tpQm1JQ3NnWkRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dNZ1BUMDlJQ0p4ZFdGMFpYSnVhVzl1SWlrZ1ZYUXViWFZzZEdsd2JIbFJkV0YwWlhKdWFXOXVjMFpzWVhRb2JDNTJZV3gxWlhNc0lIWXNJRjhzSURBc0lHd3VkbUZzZFdWekxDQjJLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VDQTlJR1lnTFNCa0lDb2dNanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlU0E5SURBN0lIa2dQQ0I0T3lBcksza3BiQzUyWVd4MVpYTmJkaUFySUhsZElDMDlJRjliZVYwN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnY3pFdVlteGxibVJOYjJSbElEMGdlR1FzSUhNeE93cDlDblpoY2lCVGRpQTlJSHNLSUNBZ0lHTnZiblpsY25SQmNuSmhlVG9nYm1rc0NpQWdJQ0JwYzFSNWNHVmtRWEp5WVhrNklGVmtMQW9nSUNBZ1oyVjBTMlY1Wm5KaGJXVlBjbVJsY2pvZ1JHUXNDaUFnSUNCemIzSjBaV1JCY25KaGVUb2dYMk1zQ2lBZ0lDQm1iR0YwZEdWdVNsTlBUam9nSkdNc0NpQWdJQ0J6ZFdKamJHbHdPaUI1ZUN3S0lDQWdJRzFoYTJWRGJHbHdRV1JrYVhScGRtVTZJRTE0Q24wc0lHVnpJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2Jpd2dhU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXdZWEpoYldWMFpYSlFiM05wZEdsdmJuTWdQU0JsTENCMGFHbHpMbDlqWVdOb1pXUkpibVJsZUNBOUlEQXNJSFJvYVhNdWNtVnpkV3gwUW5WbVptVnlJRDBnYVNBaFBUMGdkbTlwWkNBd0lEOGdhU0E2SUc1bGR5QjBMbU52Ym5OMGNuVmpkRzl5S0c0cExDQjBhR2x6TG5OaGJYQnNaVlpoYkhWbGN5QTlJSFFzSUhSb2FYTXVkbUZzZFdWVGFYcGxJRDBnYml3Z2RHaHBjeTV6WlhSMGFXNW5jeUE5SUc1MWJHd3NJSFJvYVhNdVJHVm1ZWFZzZEZObGRIUnBibWR6WHlBOUlIdDlPd29nSUNBZ2ZRb2dJQ0FnWlhaaGJIVmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTV3WVhKaGJXVjBaWEpRYjNOcGRHbHZibk1zSUc0Z1BTQjBhR2x6TGw5allXTm9aV1JKYm1SbGVDd2dhU0E5SUhSYmJsMHNJSElnUFNCMFcyNGdMU0F4WFRzS0lDQWdJQ0FnSUNCbE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhRNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYmpvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2s2SUdsbUlDZ2hLR1VnUENCcEtTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHOGdQU0J1SUNzZ01qczdLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pTQThJSElwSUdKeVpXRnJJR2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNGdQU0IwTG14bGJtZDBhQ3dnZEdocGN5NWZZMkZqYUdWa1NXNWtaWGdnUFNCdUxDQjBhR2x6TG1OdmNIbFRZVzF3YkdWV1lXeDFaVjhvYmlBdElERXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzRnUFQwOUlHOHBJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BTQnBMQ0JwSUQwZ2RGc3JLMjVkTENCbElEd2dhU2tnWW5KbFlXc2dkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnZEM1c1pXNW5kR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGcklHNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0dVZ1BqMGdjaWtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0IwV3pGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbElEd2dieUFtSmlBb2JpQTlJRElzSUhJZ1BTQnZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmpJRDBnYmlBdElESTdPeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnZEdocGN5NWZZMkZqYUdWa1NXNWtaWGdnUFNBd0xDQjBhR2x6TG1OdmNIbFRZVzF3YkdWV1lXeDFaVjhvTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYmlBOVBUMGdZeWtnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQTlJSElzSUhJZ1BTQjBXeTB0YmlBdElERmRMQ0JsSUQ0OUlISXBJR0p5WldGcklIUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJRzRzSUc0Z1BTQXdPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXlCdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhheUJsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtEc2diaUE4SUdFN0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJRzRnS3lCaElENCtQaUF4T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVWdQQ0IwVzI5ZElEOGdZU0E5SUc4Z09pQnVJRDBnYnlBcklERTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBOUlIUmJibDBzSUhJZ1BTQjBXMjRnTFNBeFhTd2djaUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnZEdocGN5NWZZMkZqYUdWa1NXNWtaWGdnUFNBd0xDQjBhR2x6TG1OdmNIbFRZVzF3YkdWV1lXeDFaVjhvTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0E5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnYmlBOUlIUXViR1Z1WjNSb0xDQjBhR2x6TGw5allXTm9aV1JKYm1SbGVDQTlJRzRzSUhSb2FYTXVZMjl3ZVZOaGJYQnNaVlpoYkhWbFh5aHVJQzBnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTJGamFHVmtTVzVrWlhnZ1BTQnVMQ0IwYUdsekxtbHVkR1Z5ZG1Gc1EyaGhibWRsWkY4b2Jpd2djaXdnYVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx1ZEdWeWNHOXNZWFJsWHlodUxDQnlMQ0JsTENCcEtUc0tJQ0FnSUgwS0lDQWdJR2RsZEZObGRIUnBibWR6WHlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSMGFXNW5jeUI4ZkNCMGFHbHpMa1JsWm1GMWJIUlRaWFIwYVc1bmMxODdDaUFnSUNCOUNpQWdJQ0JqYjNCNVUyRnRjR3hsVm1Gc2RXVmZLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVjbVZ6ZFd4MFFuVm1abVZ5TENCdUlEMGdkR2hwY3k1ellXMXdiR1ZXWVd4MVpYTXNJR2tnUFNCMGFHbHpMblpoYkhWbFUybDZaU3dnY2lBOUlHVWdLaUJwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWVNBOUlEQTdJR0VnSVQwOUlHazdJQ3NyWVNsMFcyRmRJRDBnYmx0eUlDc2dZVjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbkJ2YkdGMFpWOG9LU0I3Q2lBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pqWVd4c0lIUnZJR0ZpYzNSeVlXTjBJRzFsZEdodlpDSXBPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSjJZV3hEYUdGdVoyVmtYeWdwSUh0OUNuMHNJSGhqSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJsY3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBMQ0J1TENCcEtTd2dkR2hwY3k1ZmQyVnBaMmgwVUhKbGRpQTlJQzB3TENCMGFHbHpMbDl2Wm1aelpYUlFjbVYySUQwZ0xUQXNJSFJvYVhNdVgzZGxhV2RvZEU1bGVIUWdQU0F0TUN3Z2RHaHBjeTVmYjJabWMyVjBUbVY0ZENBOUlDMHdMQ0IwYUdsekxrUmxabUYxYkhSVFpYUjBhVzVuYzE4Z1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdWdVpHbHVaMU4wWVhKME9pQjZhU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pXNWthVzVuUlc1a09pQjZhUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjblpoYkVOb1lXNW5aV1JmS0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVjR0Z5WVcxbGRHVnlVRzl6YVhScGIyNXpMQ0J5SUQwZ1pTQXRJRElzSUdFZ1BTQmxJQ3NnTVN3Z2J5QTlJR2xiY2wwc0lHTWdQU0JwVzJGZE93b2dJQ0FnSUNBZ0lHbG1JQ2h2SUQwOVBTQjJiMmxrSURBcElITjNhWFJqYUNoMGFHbHpMbWRsZEZObGRIUnBibWR6WHlncExtVnVaR2x1WjFOMFlYSjBLWHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JXYVRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJZ1BTQmxMQ0J2SUQwZ01pQXFJSFFnTFNCdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUW5JNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUlEMGdhUzVzWlc1bmRHZ2dMU0F5TENCdklEMGdkQ0FySUdsYmNsMGdMU0JwVzNJZ0t5QXhYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjaUE5SUdVc0lHOGdQU0J1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9ZeUE5UFQwZ2RtOXBaQ0F3S1NCemQybDBZMmdvZEdocGN5NW5aWFJUWlhSMGFXNW5jMThvS1M1bGJtUnBibWRGYm1RcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGWnBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUdVc0lHTWdQU0F5SUNvZ2JpQXRJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkNjam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0VnUFNBeExDQmpJRDBnYmlBcklHbGJNVjBnTFNCcFd6QmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnWlNBdElERXNJR01nUFNCME93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlDaHVJQzBnZENrZ0tpQXVOU3dnYUNBOUlIUm9hWE11ZG1Gc2RXVlRhWHBsT3dvZ0lDQWdJQ0FnSUhSb2FYTXVYM2RsYVdkb2RGQnlaWFlnUFNCc0lDOGdLSFFnTFNCdktTd2dkR2hwY3k1ZmQyVnBaMmgwVG1WNGRDQTlJR3dnTHlBb1l5QXRJRzRwTENCMGFHbHpMbDl2Wm1aelpYUlFjbVYySUQwZ2NpQXFJR2dzSUhSb2FYTXVYMjltWm5ObGRFNWxlSFFnUFNCaElDb2dhRHNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljRzlzWVhSbFh5aGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0IwYUdsekxuSmxjM1ZzZEVKMVptWmxjaXdnWVNBOUlIUm9hWE11YzJGdGNHeGxWbUZzZFdWekxDQnZJRDBnZEdocGN5NTJZV3gxWlZOcGVtVXNJR01nUFNCbElDb2dieXdnYkNBOUlHTWdMU0J2TENCb0lEMGdkR2hwY3k1ZmIyWm1jMlYwVUhKbGRpd2dkU0E5SUhSb2FYTXVYMjltWm5ObGRFNWxlSFFzSUdRZ1BTQjBhR2x6TGw5M1pXbG5hSFJRY21WMkxDQm1JRDBnZEdocGN5NWZkMlZwWjJoMFRtVjRkQ3dnYlNBOUlDaHVJQzBnZENrZ0x5QW9hU0F0SUhRcExDQmZJRDBnYlNBcUlHMHNJR2NnUFNCZklDb2diU3dnY0NBOUlDMWtJQ29nWnlBcklESWdLaUJrSUNvZ1h5QXRJR1FnS2lCdExDQjJJRDBnS0RFZ0t5QmtLU0FxSUdjZ0t5QW9MVEV1TlNBdElESWdLaUJrS1NBcUlGOGdLeUFvTFM0MUlDc2daQ2tnS2lCdElDc2dNU3dnZUNBOUlDZ3RNU0F0SUdZcElDb2daeUFySUNneExqVWdLeUJtS1NBcUlGOGdLeUF1TlNBcUlHMHNJSGtnUFNCbUlDb2daeUF0SUdZZ0tpQmZPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZaUE5SURBN0lHSWdJVDA5SUc4N0lDc3JZaWx5VzJKZElEMGdjQ0FxSUdGYmFDQXJJR0pkSUNzZ2RpQXFJR0ZiYkNBcklHSmRJQ3NnZUNBcUlHRmJZeUFySUdKZElDc2dlU0FxSUdGYmRTQXJJR0pkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5T3dvZ0lDQWdmUXA5TENCbVlTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1pYTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2Jpd2dhU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU3dnZEN3Z2Jpd2dhU2s3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbkJ2YkdGMFpWOG9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEdocGN5NXlaWE4xYkhSQ2RXWm1aWElzSUdFZ1BTQjBhR2x6TG5OaGJYQnNaVlpoYkhWbGN5d2dieUE5SUhSb2FYTXVkbUZzZFdWVGFYcGxMQ0JqSUQwZ1pTQXFJRzhzSUd3Z1BTQmpJQzBnYnl3Z2FDQTlJQ2h1SUMwZ2RDa2dMeUFvYVNBdElIUXBMQ0IxSUQwZ01TQXRJR2c3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JrSUQwZ01Ec2daQ0FoUFQwZ2J6c2dLeXRrS1hKYlpGMGdQU0JoVzJ3Z0t5QmtYU0FxSUhVZ0t5QmhXMk1nS3lCa1hTQXFJR2c3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSEk3Q2lBZ0lDQjlDbjBzSUhaaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCbGN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUxDQnBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwTENCdUxDQnBLVHNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljRzlzWVhSbFh5aGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXdlVk5oYlhCc1pWWmhiSFZsWHlobElDMGdNU2s3Q2lBZ0lDQjlDbjBzSUVwMElEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYml3Z2FTbDdDaUFnSUNBZ0lDQWdhV1lnS0dVZ1BUMDlJSFp2YVdRZ01Da2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDSlVTRkpGUlM1TFpYbG1jbUZ0WlZSeVlXTnJPaUIwY21GamF5QnVZVzFsSUdseklIVnVaR1ZtYVc1bFpDSXBPd29nSUNBZ0lDQWdJR2xtSUNoMElEMDlQU0IyYjJsa0lEQWdmSHdnZEM1c1pXNW5kR2dnUFQwOUlEQXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9nYm04Z2EyVjVabkpoYldWeklHbHVJSFJ5WVdOcklHNWhiV1ZrSUNJZ0t5QmxLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VnUFNCbExDQjBhR2x6TG5ScGJXVnpJRDBnYm1rb2RDd2dkR2hwY3k1VWFXMWxRblZtWm1WeVZIbHdaU2tzSUhSb2FYTXVkbUZzZFdWeklEMGdibWtvYml3Z2RHaHBjeTVXWVd4MVpVSjFabVpsY2xSNWNHVXBMQ0IwYUdsekxuTmxkRWx1ZEdWeWNHOXNZWFJwYjI0b2FTQjhmQ0IwYUdsekxrUmxabUYxYkhSSmJuUmxjbkJ2YkdGMGFXOXVLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUIwYjBwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1amIyNXpkSEoxWTNSdmNpd2dianNLSUNBZ0lDQWdJQ0JwWmlBb2RDNTBiMHBUVDA0Z0lUMDlJSFJvYVhNdWRHOUtVMDlPS1NCdUlEMGdkQzUwYjBwVFQwNG9aU2s3Q2lBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUc0Z1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lCbExtNWhiV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbGN6b2dibWtvWlM1MGFXMWxjeXdnUVhKeVlYa3BMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWek9pQnVhU2hsTG5aaGJIVmxjeXdnUVhKeVlYa3BDaUFnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaUzVuWlhSSmJuUmxjbkJ2YkdGMGFXOXVLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHa2dJVDA5SUdVdVJHVm1ZWFZzZEVsdWRHVnljRzlzWVhScGIyNGdKaVlnS0c0dWFXNTBaWEp3YjJ4aGRHbHZiaUE5SUdrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpNTBlWEJsSUQwZ1pTNVdZV3gxWlZSNWNHVk9ZVzFsTENCdU93b2dJQ0FnZlFvZ0lDQWdTVzUwWlhKd2IyeGhiblJHWVdOMGIzSjVUV1YwYUc5a1JHbHpZM0psZEdVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZG1Nb2RHaHBjeTUwYVcxbGN5d2dkR2hwY3k1MllXeDFaWE1zSUhSb2FYTXVaMlYwVm1Gc2RXVlRhWHBsS0Nrc0lHVXBPd29nSUNBZ2ZRb2dJQ0FnU1c1MFpYSndiMnhoYm5SR1lXTjBiM0o1VFdWMGFHOWtUR2x1WldGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUdaaEtIUm9hWE11ZEdsdFpYTXNJSFJvYVhNdWRtRnNkV1Z6TENCMGFHbHpMbWRsZEZaaGJIVmxVMmw2WlNncExDQmxLVHNLSUNBZ0lIMEtJQ0FnSUVsdWRHVnljRzlzWVc1MFJtRmpkRzl5ZVUxbGRHaHZaRk50YjI5MGFDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCNFl5aDBhR2x6TG5ScGJXVnpMQ0IwYUdsekxuWmhiSFZsY3l3Z2RHaHBjeTVuWlhSV1lXeDFaVk5wZW1Vb0tTd2daU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkpiblJsY25CdmJHRjBhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZERzS0lDQWdJQ0FnSUNCemQybDBZMmdvWlNsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1QzSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnZEdocGN5NUpiblJsY25CdmJHRnVkRVpoWTNSdmNubE5aWFJvYjJSRWFYTmpjbVYwWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVp5T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlIUm9hWE11U1c1MFpYSndiMnhoYm5SR1lXTjBiM0o1VFdWMGFHOWtUR2x1WldGeU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVEdFNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMElEMGdkR2hwY3k1SmJuUmxjbkJ2YkdGdWRFWmhZM1J2Y25sTlpYUm9iMlJUYlc5dmRHZzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLSFFnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJQ0oxYm5OMWNIQnZjblJsWkNCcGJuUmxjbkJ2YkdGMGFXOXVJR1p2Y2lBaUlDc2dkR2hwY3k1V1lXeDFaVlI1Y0dWT1lXMWxJQ3NnSWlCclpYbG1jbUZ0WlNCMGNtRmpheUJ1WVcxbFpDQWlJQ3NnZEdocGN5NXVZVzFsT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWpjbVZoZEdWSmJuUmxjbkJ2YkdGdWRDQTlQVDBnZG05cFpDQXdLU0JwWmlBb1pTQWhQVDBnZEdocGN5NUVaV1poZFd4MFNXNTBaWEp3YjJ4aGRHbHZiaWtnZEdocGN5NXpaWFJKYm5SbGNuQnZiR0YwYVc5dUtIUm9hWE11UkdWbVlYVnNkRWx1ZEdWeWNHOXNZWFJwYjI0cE93b2dJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lodUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UzJWNVpuSmhiV1ZVY21GamF6b2lMQ0J1S1N3Z2RHaHBjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsU1c1MFpYSndiMnhoYm5RZ1BTQjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwU1c1MFpYSndiMnhoZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29kR2hwY3k1amNtVmhkR1ZKYm5SbGNuQnZiR0Z1ZENsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2RHaHBjeTVKYm5SbGNuQnZiR0Z1ZEVaaFkzUnZjbmxOWlhSb2IyUkVhWE5qY21WMFpUb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUGNqc0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQjBhR2x6TGtsdWRHVnljRzlzWVc1MFJtRmpkRzl5ZVUxbGRHaHZaRXhwYm1WaGNqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCR2Nqc0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQjBhR2x6TGtsdWRHVnljRzlzWVc1MFJtRmpkRzl5ZVUxbGRHaHZaRk50YjI5MGFEb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCTVlUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JuWlhSV1lXeDFaVk5wZW1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1Gc2RXVnpMbXhsYm1kMGFDQXZJSFJvYVhNdWRHbHRaWE11YkdWdVozUm9Pd29nSUNBZ2ZRb2dJQ0FnYzJocFpuUW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaGxJQ0U5UFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NTBhVzFsY3pzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTUN3Z2FTQTlJSFF1YkdWdVozUm9PeUJ1SUNFOVBTQnBPeUFySzI0cGRGdHVYU0FyUFNCbE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOallXeGxLR1VwSUhzS0lDQWdJQ0FnSUNCcFppQW9aU0FoUFQwZ01Ta2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVkR2x0WlhNN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBc0lHa2dQU0IwTG14bGJtZDBhRHNnYmlBaFBUMGdhVHNnS3l0dUtYUmJibDBnS2owZ1pUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGNtbHRLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11ZEdsdFpYTXNJR2tnUFNCdUxteGxibWQwYUN3Z2NpQTlJREFzSUdFZ1BTQnBJQzBnTVRzS0lDQWdJQ0FnSUNCbWIzSW9PeUJ5SUNFOVBTQnBJQ1ltSUc1YmNsMGdQQ0JsT3lrckszSTdDaUFnSUNBZ0lDQWdabTl5S0RzZ1lTQWhQVDBnTFRFZ0ppWWdibHRoWFNBK0lIUTdLUzB0WVRzS0lDQWdJQ0FnSUNCcFppQW9LeXRoTENCeUlDRTlQU0F3SUh4OElHRWdJVDA5SUdrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY2lBK1BTQmhJQ1ltSUNoaElEMGdUV0YwYUM1dFlYZ29ZU3dnTVNrc0lISWdQU0JoSUMwZ01TazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZEdocGN5NW5aWFJXWVd4MVpWTnBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGFXMWxjeUE5SUc0dWMyeHBZMlVvY2l3Z1lTa3NJSFJvYVhNdWRtRnNkV1Z6SUQwZ2RHaHBjeTUyWVd4MVpYTXVjMnhwWTJVb2NpQXFJRzhzSUdFZ0tpQnZLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjJZV3hwWkdGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJQ0V3TENCMElEMGdkR2hwY3k1blpYUldZV3gxWlZOcGVtVW9LVHNLSUNBZ0lDQWdJQ0IwSUMwZ1RXRjBhQzVtYkc5dmNpaDBLU0FoUFQwZ01DQW1KaUFvWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9nU1c1MllXeHBaQ0IyWVd4MVpTQnphWHBsSUdsdUlIUnlZV05yTGlJc0lIUm9hWE1wTENCbElEMGdJVEVwT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NTBhVzFsY3l3Z2FTQTlJSFJvYVhNdWRtRnNkV1Z6TENCeUlEMGdiaTVzWlc1bmRHZzdDaUFnSUNBZ0lDQWdjaUE5UFQwZ01DQW1KaUFvWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9nVkhKaFkyc2dhWE1nWlcxd2RIa3VJaXdnZEdocGN5a3NJR1VnUFNBaE1TazdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYnlBOUlEQTdJRzhnSVQwOUlISTdJRzhyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdibHR2WFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqSUQwOUlDSnVkVzFpWlhJaUlDWW1JR2x6VG1GT0tHTXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1TFpYbG1jbUZ0WlZSeVlXTnJPaUJVYVcxbElHbHpJRzV2ZENCaElIWmhiR2xrSUc1MWJXSmxjaTRpTENCMGFHbHpMQ0J2TENCaktTd2daU0E5SUNFeE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRWdJVDA5SUc1MWJHd2dKaVlnWVNBK0lHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGt0bGVXWnlZVzFsVkhKaFkyczZJRTkxZENCdlppQnZjbVJsY2lCclpYbHpMaUlzSUhSb2FYTXNJRzhzSUdNc0lHRXBMQ0JsSUQwZ0lURTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCaElEMGdZenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUhadmFXUWdNQ0FtSmlCVlpDaHBLU2tnWm05eUtHeGxkQ0J2SUQwZ01Dd2dZeUE5SUdrdWJHVnVaM1JvT3lCdklDRTlQU0JqT3lBcksyOHBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdsYmIxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMDVoVGloc0tTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1UzJWNVpuSmhiV1ZVY21GamF6b2dWbUZzZFdVZ2FYTWdibTkwSUdFZ2RtRnNhV1FnYm5WdFltVnlMaUlzSUhSb2FYTXNJRzhzSUd3cExDQmxJRDBnSVRFN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1pUc0tJQ0FnSUgwS0lDQWdJRzl3ZEdsdGFYcGxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NTBhVzFsY3k1emJHbGpaU2dwTENCMElEMGdkR2hwY3k1MllXeDFaWE11YzJ4cFkyVW9LU3dnYmlBOUlIUm9hWE11WjJWMFZtRnNkV1ZUYVhwbEtDa3NJR2tnUFNCMGFHbHpMbWRsZEVsdWRHVnljRzlzWVhScGIyNG9LU0E5UFQwZ1RHRXNJSElnUFNCbExteGxibWQwYUNBdElERXNJR0VnUFNBeE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREU3SUc4Z1BDQnlPeUFySzI4cGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJQ0V4TENCc0lEMGdaVnR2WFN3Z2FDQTlJR1ZiYnlBcklERmRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9iQ0FoUFQwZ2FDQW1KaUFvYnlBaFBUMGdNU0I4ZkNCc0lDRTlQU0JsV3pCZEtTa2dhV1lnS0drcElHTWdQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUc4Z0tpQnVMQ0JrSUQwZ2RTQXRJRzRzSUdZZ1BTQjFJQ3NnYmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYlNBOUlEQTdJRzBnSVQwOUlHNDdJQ3NyYlNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY4Z1BTQjBXM1VnS3lCdFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1h5QWhQVDBnZEZ0a0lDc2diVjBnZkh3Z1h5QWhQVDBnZEZ0bUlDc2diVjBwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXlBOUlDRXdPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2SUNFOVBTQmhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pWdGhYU0E5SUdWYmIxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0J2SUNvZ2Jpd2daQ0E5SUdFZ0tpQnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWmlBOUlEQTdJR1lnSVQwOUlHNDdJQ3NyWmlsMFcyUWdLeUJtWFNBOUlIUmJkU0FySUdaZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0t5dGhPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2h5SUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCbFcyRmRJRDBnWlZ0eVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J2SUQwZ2NpQXFJRzRzSUdNZ1BTQmhJQ29nYml3Z2JDQTlJREE3SUd3Z0lUMDlJRzQ3SUNzcmJDbDBXMk1nS3lCc1hTQTlJSFJiYnlBcklHeGRPd29nSUNBZ0lDQWdJQ0FnSUNBcksyRTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQmhJQ0U5UFNCbExteGxibWQwYUNBL0lDaDBhR2x6TG5ScGJXVnpJRDBnWlM1emJHbGpaU2d3TENCaEtTd2dkR2hwY3k1MllXeDFaWE1nUFNCMExuTnNhV05sS0RBc0lHRWdLaUJ1S1NrZ09pQW9kR2hwY3k1MGFXMWxjeUE5SUdVc0lIUm9hWE11ZG1Gc2RXVnpJRDBnZENrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVkR2x0WlhNdWMyeHBZMlVvS1N3Z2RDQTlJSFJvYVhNdWRtRnNkV1Z6TG5Oc2FXTmxLQ2tzSUc0Z1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxDQnBJRDBnYm1WM0lHNG9kR2hwY3k1dVlXMWxMQ0JsTENCMEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2FTNWpjbVZoZEdWSmJuUmxjbkJ2YkdGdWRDQTlJSFJvYVhNdVkzSmxZWFJsU1c1MFpYSndiMnhoYm5Rc0lHazdDaUFnSUNCOUNuMDdDa3AwTG5CeWIzUnZkSGx3WlM1VWFXMWxRblZtWm1WeVZIbHdaU0E5SUVac2IyRjBNekpCY25KaGVUc0tTblF1Y0hKdmRHOTBlWEJsTGxaaGJIVmxRblZtWm1WeVZIbHdaU0E5SUVac2IyRjBNekpCY25KaGVUc0tTblF1Y0hKdmRHOTBlWEJsTGtSbFptRjFiSFJKYm5SbGNuQnZiR0YwYVc5dUlEMGdSbkk3Q25aaGNpQldiaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdTblFnZXdwOU93cFdiaTV3Y205MGIzUjVjR1V1Vm1Gc2RXVlVlWEJsVG1GdFpTQTlJQ0ppYjI5c0lqc0tWbTR1Y0hKdmRHOTBlWEJsTGxaaGJIVmxRblZtWm1WeVZIbHdaU0E5SUVGeWNtRjVPd3BXYmk1d2NtOTBiM1I1Y0dVdVJHVm1ZWFZzZEVsdWRHVnljRzlzWVhScGIyNGdQU0JQY2pzS1ZtNHVjSEp2ZEc5MGVYQmxMa2x1ZEdWeWNHOXNZVzUwUm1GamRHOXllVTFsZEdodlpFeHBibVZoY2lBOUlIWnZhV1FnTURzS1ZtNHVjSEp2ZEc5MGVYQmxMa2x1ZEdWeWNHOXNZVzUwUm1GamRHOXllVTFsZEdodlpGTnRiMjkwYUNBOUlIWnZhV1FnTURzS2RtRnlJSEJoSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJLZENCN0NuMDdDbkJoTG5CeWIzUnZkSGx3WlM1V1lXeDFaVlI1Y0dWT1lXMWxJRDBnSW1OdmJHOXlJanNLZG1GeUlIUnpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QktkQ0I3Q24wN0NuUnpMbkJ5YjNSdmRIbHdaUzVXWVd4MVpWUjVjR1ZPWVcxbElEMGdJbTUxYldKbGNpSTdDblpoY2lCNVl5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1pYTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2Jpd2dhU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU3dnZEN3Z2Jpd2dhU2s3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbkJ2YkdGMFpWOG9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEdocGN5NXlaWE4xYkhSQ2RXWm1aWElzSUdFZ1BTQjBhR2x6TG5OaGJYQnNaVlpoYkhWbGN5d2dieUE5SUhSb2FYTXVkbUZzZFdWVGFYcGxMQ0JqSUQwZ0tHNGdMU0IwS1NBdklDaHBJQzBnZENrc0lHd2dQU0JsSUNvZ2J6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHZ2dQU0JzSUNzZ2J6c2diQ0FoUFQwZ2FEc2diQ0FyUFNBMEtWVjBMbk5zWlhKd1JteGhkQ2h5TENBd0xDQmhMQ0JzSUMwZ2J5d2dZU3dnYkN3Z1l5azdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISTdDaUFnSUNCOUNuMHNJSEJwSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJLZENCN0NpQWdJQ0JKYm5SbGNuQnZiR0Z1ZEVaaFkzUnZjbmxOWlhSb2IyUk1hVzVsWVhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZVdNb2RHaHBjeTUwYVcxbGN5d2dkR2hwY3k1MllXeDFaWE1zSUhSb2FYTXVaMlYwVm1Gc2RXVlRhWHBsS0Nrc0lHVXBPd29nSUNBZ2ZRcDlPd3B3YVM1d2NtOTBiM1I1Y0dVdVZtRnNkV1ZVZVhCbFRtRnRaU0E5SUNKeGRXRjBaWEp1YVc5dUlqc0tjR2t1Y0hKdmRHOTBlWEJsTGtSbFptRjFiSFJKYm5SbGNuQnZiR0YwYVc5dUlEMGdSbkk3Q25CcExuQnliM1J2ZEhsd1pTNUpiblJsY25CdmJHRnVkRVpoWTNSdmNubE5aWFJvYjJSVGJXOXZkR2dnUFNCMmIybGtJREE3Q25aaGNpQnJiaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdTblFnZXdwOU93cHJiaTV3Y205MGIzUjVjR1V1Vm1Gc2RXVlVlWEJsVG1GdFpTQTlJQ0p6ZEhKcGJtY2lPd3ByYmk1d2NtOTBiM1I1Y0dVdVZtRnNkV1ZDZFdabVpYSlVlWEJsSUQwZ1FYSnlZWGs3Q210dUxuQnliM1J2ZEhsd1pTNUVaV1poZFd4MFNXNTBaWEp3YjJ4aGRHbHZiaUE5SUU5eU93cHJiaTV3Y205MGIzUjVjR1V1U1c1MFpYSndiMnhoYm5SR1lXTjBiM0o1VFdWMGFHOWtUR2x1WldGeUlEMGdkbTlwWkNBd093cHJiaTV3Y205MGIzUjVjR1V1U1c1MFpYSndiMnhoYm5SR1lXTjBiM0o1VFdWMGFHOWtVMjF2YjNSb0lEMGdkbTlwWkNBd093cDJZWElnYm5NZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVwMElIc0tmVHNLYm5NdWNISnZkRzkwZVhCbExsWmhiSFZsVkhsd1pVNWhiV1VnUFNBaWRtVmpkRzl5SWpzS2RtRnlJR2x6SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDQTlJQzB4TENCdUxDQnBJRDBnV0dNcGV3b2dJQ0FnSUNBZ0lIUm9hWE11Ym1GdFpTQTlJR1VzSUhSb2FYTXVkSEpoWTJ0eklEMGdiaXdnZEdocGN5NWtkWEpoZEdsdmJpQTlJSFFzSUhSb2FYTXVZbXhsYm1STmIyUmxJRDBnYVN3Z2RHaHBjeTUxZFdsa0lEMGdhM1FvS1N3Z2RHaHBjeTVrZFhKaGRHbHZiaUE4SURBZ0ppWWdkR2hwY3k1eVpYTmxkRVIxY21GMGFXOXVLQ2s3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nY0dGeWMyVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVzEwc0lHNGdQU0JsTG5SeVlXTnJjeXdnYVNBOUlERWdMeUFvWlM1bWNITWdmSHdnTVNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaElEMGdNQ3dnYnlBOUlHNHViR1Z1WjNSb095QmhJQ0U5UFNCdk95QXJLMkVwZEM1d2RYTm9LR0o0S0c1YllWMHBMbk5qWVd4bEtHa3BLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJRzVsZHlCMGFHbHpLR1V1Ym1GdFpTd2daUzVrZFhKaGRHbHZiaXdnZEN3Z1pTNWliR1Z1WkUxdlpHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnlMblYxYVdRZ1BTQmxMblYxYVdRc0lISTdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdkRzlLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRnRkTENCdUlEMGdaUzUwY21GamEzTXNJR2tnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklHVXVibUZ0WlN3S0lDQWdJQ0FnSUNBZ0lDQWdaSFZ5WVhScGIyNDZJR1V1WkhWeVlYUnBiMjRzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnlZV05yY3pvZ2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnZFhWcFpEb2daUzUxZFdsa0xBb2dJQ0FnSUNBZ0lDQWdJQ0JpYkdWdVpFMXZaR1U2SUdVdVlteGxibVJOYjJSbENpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdiaTVzWlc1bmRHZzdJSElnSVQwOUlHRTdJQ3NyY2lsMExuQjFjMmdvU25RdWRHOUtVMDlPS0c1YmNsMHBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJEY21WaGRHVkdjbTl0VFc5eWNHaFVZWEpuWlhSVFpYRjFaVzVqWlNobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBMbXhsYm1kMGFDd2dZU0E5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREE3SUc4Z1BDQnlPeUJ2S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJRnRkTENCc0lEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTXVjSFZ6YUNnb2J5QXJJSElnTFNBeEtTQWxJSElzSUc4c0lDaHZJQ3NnTVNrZ0pTQnlLU3dnYkM1d2RYTm9LREFzSURFc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUVSa0tHTXBPd29nSUNBZ0lDQWdJQ0FnSUNCaklEMGdYMk1vWXl3Z01Td2dhQ2tzSUd3Z1BTQmZZeWhzTENBeExDQm9LU3dnSVdrZ0ppWWdZMXN3WFNBOVBUMGdNQ0FtSmlBb1l5NXdkWE5vS0hJcExDQnNMbkIxYzJnb2JGc3dYU2twTENCaExuQjFjMmdvYm1WM0lIUnpLQ0l1Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeld5SWdLeUIwVzI5ZExtNWhiV1VnS3lBaVhTSXNJR01zSUd3cExuTmpZV3hsS0RFZ0x5QnVLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeWhsTENBdE1Td2dZU2s3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm1sdVpFSjVUbUZ0WlNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0JsT3dvZ0lDQWdJQ0FnSUdsbUlDZ2hRWEp5WVhrdWFYTkJjbkpoZVNobEtTa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUdVN0NpQWdJQ0FnSUNBZ0lDQWdJRzRnUFNCcExtZGxiMjFsZEhKNUlDWW1JR2t1WjJWdmJXVjBjbmt1WVc1cGJXRjBhVzl1Y3lCOGZDQnBMbUZ1YVcxaGRHbHZibk03Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQTdJR2tnUENCdUxteGxibWQwYURzZ2FTc3JLV2xtSUNodVcybGRMbTVoYldVZ1BUMDlJSFFwSUhKbGRIVnliaUJ1VzJsZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJRU55WldGMFpVTnNhWEJ6Um5KdmJVMXZjbkJvVkdGeVoyVjBVMlZ4ZFdWdVkyVnpLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSHQ5TENCeUlEMGdMMTRvVzF4M0xWMHFQeWtvVzF4a1hTc3BKQzg3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J2SUQwZ01Dd2dZeUE5SUdVdWJHVnVaM1JvT3lCdklEd2dZenNnYnlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHd2dQU0JsVzI5ZExDQm9JRDBnYkM1dVlXMWxMbTFoZEdOb0tISXBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hQ0FtSmlCb0xteGxibWQwYUNBK0lERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMUlEMGdhRnN4WFN3Z1pDQTlJR2xiZFYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa0lIeDhJQ2hwVzNWZElEMGdaQ0E5SUZ0ZEtTd2daQzV3ZFhOb0tHd3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnZJR2x1SUdrcFlTNXdkWE5vS0hSb2FYTXVRM0psWVhSbFJuSnZiVTF2Y25Cb1ZHRnlaMlYwVTJWeGRXVnVZMlVvYnl3Z2FWdHZYU3dnZEN3Z2Jpa3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmhPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJSEJoY25ObFFXNXBiV0YwYVc5dUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCcFppQW9JV1VwSUhKbGRIVnliaUJqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1QmJtbHRZWFJwYjI1RGJHbHdPaUJPYnlCaGJtbHRZWFJwYjI0Z2FXNGdTbE5QVGt4dllXUmxjaUJrWVhSaExpSXBMQ0J1ZFd4c093b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1puVnVZM1JwYjI0b2RTd2daQ3dnWml3Z2JTd2dYeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWmk1c1pXNW5kR2dnSVQwOUlEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbklEMGdXMTBzSUhBZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JqS0dZc0lHY3NJSEFzSUcwcExDQm5MbXhsYm1kMGFDQWhQVDBnTUNBbUppQmZMbkIxYzJnb2JtVjNJSFVvWkN3Z1p5d2djQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dnYVNBOUlGdGRMQ0J5SUQwZ1pTNXVZVzFsSUh4OElDSmtaV1poZFd4MElpd2dZU0E5SUdVdVpuQnpJSHg4SURNd0xDQnZJRDBnWlM1aWJHVnVaRTF2WkdVc0lHTWdQU0JsTG14bGJtZDBhQ0I4ZkNBdE1Td2diQ0E5SUdVdWFHbGxjbUZ5WTJoNUlIeDhJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZFNBOUlEQTdJSFVnUENCc0xteGxibWQwYURzZ2RTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCc1czVmRMbXRsZVhNN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtDRmtJSHg4SUdRdWJHVnVaM1JvSUQwOVBTQXdLU2tnYVdZZ0tHUmJNRjB1Ylc5eWNHaFVZWEpuWlhSektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlIdDlMQ0J0T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHMGdQU0F3T3lCdElEd2daQzVzWlc1bmRHZzdJRzByS3lscFppQW9aRnR0WFM1dGIzSndhRlJoY21kbGRITXBJR1p2Y2loc1pYUWdYeUE5SURBN0lGOGdQQ0JrVzIxZExtMXZjbkJvVkdGeVoyVjBjeTVzWlc1bmRHZzdJRjhyS3lsbVcyUmJiVjB1Ylc5eWNHaFVZWEpuWlhSelcxOWRYU0E5SUMweE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCZklHbHVJR1lwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ1cxMHNJSEFnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFlnUFNBd095QjJJQ0U5UFNCa1cyMWRMbTF2Y25Cb1ZHRnlaMlYwY3k1c1pXNW5kR2c3SUNzcmRpbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ1pGdHRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaeTV3ZFhOb0tIZ3VkR2x0WlNrc0lIQXVjSFZ6YUNoNExtMXZjbkJvVkdGeVoyVjBJRDA5UFNCZklEOGdNU0E2SURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExuQjFjMmdvYm1WM0lIUnpLQ0l1Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWYklpQXJJRjhnS3lBaVhTSXNJR2NzSUhBcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTWdQU0JtTG14bGJtZDBhQ0FxSUdFN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlDSXVZbTl1WlhOYklpQXJJSFJiZFYwdWJtRnRaU0FySUNKZElqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNG9ibk1zSUdZZ0t5QWlMbkJ2YzJsMGFXOXVJaXdnWkN3Z0luQnZjeUlzSUdrcExDQnVLSEJwTENCbUlDc2dJaTV4ZFdGMFpYSnVhVzl1SWl3Z1pDd2dJbkp2ZENJc0lHa3BMQ0J1S0c1ekxDQm1JQ3NnSWk1elkyRnNaU0lzSUdRc0lDSnpZMndpTENCcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVM1c1pXNW5kR2dnUFQwOUlEQWdQeUJ1ZFd4c0lEb2dibVYzSUhSb2FYTW9jaXdnWXl3Z2FTd2dieWs3Q2lBZ0lDQjlDaUFnSUNCeVpYTmxkRVIxY21GMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NTBjbUZqYTNNc0lIUWdQU0F3T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCbExteGxibWQwYURzZ2JpQWhQVDBnYVRzZ0t5dHVLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElnUFNCMGFHbHpMblJ5WVdOcmMxdHVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJRTFoZEdndWJXRjRLSFFzSUhJdWRHbHRaWE5iY2k1MGFXMWxjeTVzWlc1bmRHZ2dMU0F4WFNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVIxY21GMGFXOXVJRDBnZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSeWFXMG9LU0I3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JsSUQwZ01Ec2daU0E4SUhSb2FYTXVkSEpoWTJ0ekxteGxibWQwYURzZ1pTc3JLWFJvYVhNdWRISmhZMnR6VzJWZExuUnlhVzBvTUN3Z2RHaHBjeTVrZFhKaGRHbHZiaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjJZV3hwWkdGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJQ0V3T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQTdJSFFnUENCMGFHbHpMblJ5WVdOcmN5NXNaVzVuZEdnN0lIUXJLeWxsSUQwZ1pTQW1KaUIwYUdsekxuUnlZV05yYzF0MFhTNTJZV3hwWkdGMFpTZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxPd29nSUNBZ2ZRb2dJQ0FnYjNCMGFXMXBlbVVvS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbElEMGdNRHNnWlNBOElIUm9hWE11ZEhKaFkydHpMbXhsYm1kMGFEc2daU3NyS1hSb2FYTXVkSEpoWTJ0elcyVmRMbTl3ZEdsdGFYcGxLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBN0lIUWdQQ0IwYUdsekxuUnlZV05yY3k1c1pXNW5kR2c3SUhRckt5bGxMbkIxYzJnb2RHaHBjeTUwY21GamEzTmJkRjB1WTJ4dmJtVW9LU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0hSb2FYTXVibUZ0WlN3Z2RHaHBjeTVrZFhKaGRHbHZiaXdnWlN3Z2RHaHBjeTVpYkdWdVpFMXZaR1VwT3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG5SdlNsTlBUaWgwYUdsektUc0tJQ0FnSUgwS2ZUc0tablZ1WTNScGIyNGdVM2dvY3pFcElIc0tJQ0FnSUhOM2FYUmphQ2h6TVM1MGIweHZkMlZ5UTJGelpTZ3BLWHNLSUNBZ0lDQWdJQ0JqWVhObElDSnpZMkZzWVhJaU9nb2dJQ0FnSUNBZ0lHTmhjMlVnSW1SdmRXSnNaU0k2Q2lBZ0lDQWdJQ0FnWTJGelpTQWlabXh2WVhRaU9nb2dJQ0FnSUNBZ0lHTmhjMlVnSW01MWJXSmxjaUk2Q2lBZ0lDQWdJQ0FnWTJGelpTQWlhVzUwWldkbGNpSTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY3pzS0lDQWdJQ0FnSUNCallYTmxJQ0oyWldOMGIzSWlPZ29nSUNBZ0lDQWdJR05oYzJVZ0luWmxZM1J2Y2pJaU9nb2dJQ0FnSUNBZ0lHTmhjMlVnSW5abFkzUnZjak1pT2dvZ0lDQWdJQ0FnSUdOaGMyVWdJblpsWTNSdmNqUWlPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5NN0NpQWdJQ0FnSUNBZ1kyRnpaU0FpWTI5c2IzSWlPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0dFN0NpQWdJQ0FnSUNBZ1kyRnpaU0FpY1hWaGRHVnlibWx2YmlJNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQndhVHNLSUNBZ0lDQWdJQ0JqWVhObElDSmliMjlzSWpvS0lDQWdJQ0FnSUNCallYTmxJQ0ppYjI5c1pXRnVJam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZadU93b2dJQ0FnSUNBZ0lHTmhjMlVnSW5OMGNtbHVaeUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcmJqc0tJQ0FnSUgwS0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9nVlc1emRYQndiM0owWldRZ2RIbHdaVTVoYldVNklDSWdLeUJ6TVNrN0NuMEtablZ1WTNScGIyNGdZbmdvY3pFcElIc0tJQ0FnSUdsbUlDaHpNUzUwZVhCbElEMDlQU0IyYjJsa0lEQXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9nZEhKaFkyc2dkSGx3WlNCMWJtUmxabWx1WldRc0lHTmhiaUJ1YjNRZ2NHRnljMlVpS1RzS0lDQWdJR3hsZENCbElEMGdVM2dvY3pFdWRIbHdaU2s3Q2lBZ0lDQnBaaUFvY3pFdWRHbHRaWE1nUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1cxMHNJRzRnUFNCYlhUc0tJQ0FnSUNBZ0lDQWtZeWh6TVM1clpYbHpMQ0IwTENCdUxDQWlkbUZzZFdVaUtTd2djekV1ZEdsdFpYTWdQU0IwTENCek1TNTJZV3gxWlhNZ1BTQnVPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJR1V1Y0dGeWMyVWdJVDA5SUhadmFXUWdNQ0EvSUdVdWNHRnljMlVvY3pFcElEb2dibVYzSUdVb2N6RXVibUZ0WlN3Z2N6RXVkR2x0WlhNc0lITXhMblpoYkhWbGN5d2djekV1YVc1MFpYSndiMnhoZEdsdmJpazdDbjBLZG1GeUlITnpJRDBnZXdvZ0lDQWdaVzVoWW14bFpEb2dJVEVzQ2lBZ0lDQm1hV3hsY3pvZ2UzMHNDaUFnSUNCaFpHUTZJR1oxYm1OMGFXOXVLSE14TENCbEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1bGJtRmliR1ZrSUNFOVBTQWhNU0FtSmlBb2RHaHBjeTVtYVd4bGMxdHpNVjBnUFNCbEtUc0tJQ0FnSUgwc0NpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtITXhLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wlc1aFlteGxaQ0FoUFQwZ0lURXBJSEpsZEhWeWJpQjBhR2x6TG1acGJHVnpXM014WFRzS0lDQWdJSDBzQ2lBZ0lDQnlaVzF2ZG1VNklHWjFibU4wYVc5dUtITXhLU0I3Q2lBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVptbHNaWE5iY3pGZE93b2dJQ0FnZlN3S0lDQWdJR05zWldGeU9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtWnBiR1Z6SUQwZ2UzMDdDaUFnSUNCOUNuMHNJRzFoSUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaWw3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxDQnlJRDBnSVRFc0lHRWdQU0F3TENCdklEMGdNQ3dnWXl3Z2JDQTlJRnRkT3dvZ0lDQWdJQ0FnSUhSb2FYTXViMjVUZEdGeWRDQTlJSFp2YVdRZ01Dd2dkR2hwY3k1dmJreHZZV1FnUFNCbExDQjBhR2x6TG05dVVISnZaM0psYzNNZ1BTQjBMQ0IwYUdsekxtOXVSWEp5YjNJZ1BTQnVMQ0IwYUdsekxtbDBaVzFUZEdGeWRDQTlJR1oxYm1OMGFXOXVLR2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdieXNyTENCeUlEMDlQU0FoTVNBbUppQnBMbTl1VTNSaGNuUWdJVDA5SUhadmFXUWdNQ0FtSmlCcExtOXVVM1JoY25Rb2FDd2dZU3dnYnlrc0lISWdQU0FoTURzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1sMFpXMUZibVFnUFNCbWRXNWpkR2x2Ymlob0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdFckt5d2dhUzV2YmxCeWIyZHlaWE56SUNFOVBTQjJiMmxrSURBZ0ppWWdhUzV2YmxCeWIyZHlaWE56S0dnc0lHRXNJRzhwTENCaElEMDlQU0J2SUNZbUlDaHlJRDBnSVRFc0lHa3ViMjVNYjJGa0lDRTlQU0IyYjJsa0lEQWdKaVlnYVM1dmJreHZZV1FvS1NrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1cGRHVnRSWEp5YjNJZ1BTQm1kVzVqZEdsdmJpaG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHa3ViMjVGY25KdmNpQWhQVDBnZG05cFpDQXdJQ1ltSUdrdWIyNUZjbkp2Y2lob0tUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuSmxjMjlzZG1WVlVrd2dQU0JtZFc1amRHbHZiaWhvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpJRDhnWXlob0tTQTZJR2c3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV6WlhSVlVreE5iMlJwWm1sbGNpQTlJR1oxYm1OMGFXOXVLR2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTWdQU0JvTENCMGFHbHpPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVZV1JrU0dGdVpHeGxjaUE5SUdaMWJtTjBhVzl1S0dnc0lIVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd3dWNIVnphQ2hvTENCMUtTd2dkR2hwY3pzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5KbGJXOTJaVWhoYm1Sc1pYSWdQU0JtZFc1amRHbHZiaWhvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMUlEMGdiQzVwYm1SbGVFOW1LR2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RTQWhQVDBnTFRFZ0ppWWdiQzV6Y0d4cFkyVW9kU3dnTWlrc0lIUm9hWE03Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSSVlXNWtiR1Z5SUQwZ1puVnVZM1JwYjI0b2FDa2dld29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhVZ1BTQXdMQ0JrSUQwZ2JDNXNaVzVuZEdnN0lIVWdQQ0JrT3lCMUlDczlJRElwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0JzVzNWZExDQnRJRDBnYkZ0MUlDc2dNVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ppNW5iRzlpWVd3Z0ppWWdLR1l1YkdGemRFbHVaR1Y0SUQwZ01Da3NJR1l1ZEdWemRDaG9LU2tnY21WMGRYSnVJRzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N0NpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS2ZTd2dSWGdnUFNCdVpYY2diV0VzSUVSMElEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlXNWhaMlZ5SUQwZ1pTQWhQVDBnZG05cFpDQXdJRDhnWlNBNklFVjRMQ0IwYUdsekxtTnliM056VDNKcFoybHVJRDBnSW1GdWIyNTViVzkxY3lJc0lIUm9hWE11ZDJsMGFFTnlaV1JsYm5ScFlXeHpJRDBnSVRFc0lIUm9hWE11Y0dGMGFDQTlJQ0lpTENCMGFHbHpMbkpsYzI5MWNtTmxVR0YwYUNBOUlDSWlMQ0IwYUdsekxuSmxjWFZsYzNSSVpXRmtaWElnUFNCN2ZUc0tJQ0FnSUgwS0lDQWdJR3h2WVdRb0tTQjdmUW9nSUNBZ2JHOWhaRUZ6ZVc1aktHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLR2tzSUhJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYmk1c2IyRmtLR1VzSUdrc0lIUXNJSElwT3dvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnZlFvZ0lDQWdjR0Z5YzJVb0tTQjdmUW9nSUNBZ2MyVjBRM0p2YzNOUGNtbG5hVzRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55YjNOelQzSnBaMmx1SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRmRwZEdoRGNtVmtaVzUwYVdGc2N5aGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWQybDBhRU55WldSbGJuUnBZV3h6SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRkJoZEdnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGRHZ2dQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFVtVnpiM1Z5WTJWUVlYUm9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaWE52ZFhKalpWQmhkR2dnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBVbVZ4ZFdWemRFaGxZV1JsY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WeGRXVnpkRWhsWVdSbGNpQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNuMDdDa1IwTGtSRlJrRlZURlJmVFVGVVJWSkpRVXhmVGtGTlJTQTlJQ0pmWDBSRlJrRlZURlFpT3dwMllYSWdabTRnUFNCN2ZTd2dUV01nUFNCamJHRnpjeUJsZUhSbGJtUnpJRVZ5Y205eUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VwTENCMGFHbHpMbkpsYzNCdmJuTmxJRDBnZERzS0lDQWdJSDBLZlN3Z2NtNGdQU0JqYkdGemN5QmxlSFJsYm1SeklFUjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VwT3dvZ0lDQWdmUW9nSUNBZ2JHOWhaQ2hsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ1pTQTlQVDBnZG05cFpDQXdJQ1ltSUNobElEMGdJaUlwTENCMGFHbHpMbkJoZEdnZ0lUMDlJSFp2YVdRZ01DQW1KaUFvWlNBOUlIUm9hWE11Y0dGMGFDQXJJR1VwTENCbElEMGdkR2hwY3k1dFlXNWhaMlZ5TG5KbGMyOXNkbVZWVWt3b1pTazdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQnpjeTVuWlhRb1pTazdDaUFnSUNBZ0lDQWdhV1lnS0hJZ0lUMDlJSFp2YVdRZ01Da2djbVYwZFhKdUlIUm9hWE11YldGdVlXZGxjaTVwZEdWdFUzUmhjblFvWlNrc0lITmxkRlJwYldWdmRYUW9LQ2s5UG5zS0lDQWdJQ0FnSUNBZ0lDQWdkQ0FtSmlCMEtISXBMQ0IwYUdsekxtMWhibUZuWlhJdWFYUmxiVVZ1WkNobEtUc0tJQ0FnSUNBZ0lDQjlMQ0F3S1N3Z2Nqc0tJQ0FnSUNBZ0lDQnBaaUFvWm01YlpWMGdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm1ibHRsWFM1d2RYTm9LSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VEc5aFpEb2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VUhKdlozSmxjM002SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrVnljbTl5T2lCcENpQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnVXMlZkSUQwZ1cxMHNJR1p1VzJWZExuQjFjMmdvZXdvZ0lDQWdJQ0FnSUNBZ0lDQnZia3h2WVdRNklIUXNDaUFnSUNBZ0lDQWdJQ0FnSUc5dVVISnZaM0psYzNNNklHNHNDaUFnSUNBZ0lDQWdJQ0FnSUc5dVJYSnliM0k2SUdrS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlHNWxkeUJTWlhGMVpYTjBLR1VzSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhR1ZoWkdWeWN6b2dibVYzSUVobFlXUmxjbk1vZEdocGN5NXlaWEYxWlhOMFNHVmhaR1Z5S1N3S0lDQWdJQ0FnSUNBZ0lDQWdZM0psWkdWdWRHbGhiSE02SUhSb2FYTXVkMmwwYUVOeVpXUmxiblJwWVd4eklEOGdJbWx1WTJ4MVpHVWlJRG9nSW5OaGJXVXRiM0pwWjJsdUlnb2dJQ0FnSUNBZ0lIMHBMQ0J2SUQwZ2RHaHBjeTV0YVcxbFZIbHdaU3dnWXlBOUlIUm9hWE11Y21WemNHOXVjMlZVZVhCbE93b2dJQ0FnSUNBZ0lHWmxkR05vS0dFcExuUm9aVzRvS0d3cFBUNTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNMbk4wWVhSMWN5QTlQVDBnTWpBd0lIeDhJR3d1YzNSaGRIVnpJRDA5UFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkM1emRHRjBkWE1nUFQwOUlEQWdKaVlnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1R2FXeGxURzloWkdWeU9pQklWRlJRSUZOMFlYUjFjeUF3SUhKbFkyVnBkbVZrTGlJcExDQjBlWEJsYjJZZ1VtVmhaR0ZpYkdWVGRISmxZVzBnUGlBaWRTSWdmSHdnYkM1aWIyUjVJRDA5UFNCMmIybGtJREFnZkh3Z2JDNWliMlI1TG1kbGRGSmxZV1JsY2lBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2JEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ1ptNWJaVjBzSUhVZ1BTQnNMbUp2WkhrdVoyVjBVbVZoWkdWeUtDa3NJR1FnUFNCc0xtaGxZV1JsY25NdVoyVjBLQ0pEYjI1MFpXNTBMVXhsYm1kMGFDSXBJSHg4SUd3dWFHVmhaR1Z5Y3k1blpYUW9JbGd0Um1sc1pTMVRhWHBsSWlrc0lHWWdQU0JrSUQ4Z2NHRnljMlZKYm5Rb1pDa2dPaUF3TENCdElEMGdaaUFoUFQwZ01Dd2dYeUE5SURBc0lHY2dQU0J1WlhjZ1VtVmhaR0ZpYkdWVGRISmxZVzBvZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowSUNod0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdkaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVXVjbVZoWkNncExuUm9aVzRvS0hzZ1pHOXVaVG9nZUNBc0lIWmhiSFZsT2lCNUlDQjlLVDArZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNEtTQndMbU5zYjNObEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY4Z0t6MGdlUzVpZVhSbFRHVnVaM1JvT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUc1bGR5QlFjbTluY21WemMwVjJaVzUwS0NKd2NtOW5jbVZ6Y3lJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGJtZDBhRU52YlhCMWRHRmliR1U2SUcwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJGa1pXUTZJRjhzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiM1JoYkRvZ1pnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IzSUQwZ01Dd2dVaUE5SUdndWJHVnVaM1JvT3lCM0lEd2dVanNnZHlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkpJRDBnYUZ0M1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVrdWIyNVFjbTluY21WemN5QW1KaUJKTG05dVVISnZaM0psYzNNb1lpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0M1bGJuRjFaWFZsS0hrcExDQjJLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVW1WemNHOXVjMlVvWnlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjBhSEp2ZHlCdVpYY2dUV01vWUdabGRHTm9JR1p2Y2lBaUpIdHNMblZ5YkgwaUlISmxjM0J2Ym1SbFpDQjNhWFJvSUNSN2JDNXpkR0YwZFhOOU9pQWtlMnd1YzNSaGRIVnpWR1Y0ZEgxZ0xDQnNLVHNLSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLQ2hzS1QwK2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29ZeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSmhjbkpoZVdKMVptWmxjaUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd3dVlYSnlZWGxDZFdabVpYSW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ltSnNiMklpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCc0xtSnNiMklvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbVJ2WTNWdFpXNTBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYkM1MFpYaDBLQ2t1ZEdobGJpZ29hQ2s5UG01bGR5QkVUMDFRWVhKelpYSW9LUzV3WVhKelpVWnliMjFUZEhKcGJtY29hQ3dnYnlrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpYW5OdmJpSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR3d1YW5OdmJpZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2J5QTlQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdiQzUwWlhoMEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJQzlqYUdGeWMyVjBQU0kvS0Z0ZU95SmNjMTBxS1NJL0wya3VaWGhsWXlodktTd2daQ0E5SUhVZ0ppWWdkVnN4WFNBL0lIVmJNVjB1ZEc5TWIzZGxja05oYzJVb0tTQTZJSFp2YVdRZ01Dd2daaUE5SUc1bGR5QlVaWGgwUkdWamIyUmxjaWhrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR3d1WVhKeVlYbENkV1ptWlhJb0tTNTBhR1Z1S0NodEtUMCtaaTVrWldOdlpHVW9iU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwcExuUm9aVzRvS0d3cFBUNTdDaUFnSUNBZ0lDQWdJQ0FnSUhOekxtRmtaQ2hsTENCc0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0JtYmx0bFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJR1p1VzJWZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFVnUFNBd0xDQmtJRDBnYUM1c1pXNW5kR2c3SUhVZ1BDQmtPeUIxS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCb1czVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaTV2Ymt4dllXUWdKaVlnWmk1dmJreHZZV1FvYkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5S1M1allYUmphQ2dvYkNrOVBuc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0JtYmx0bFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZ2dQVDA5SUhadmFXUWdNQ2tnZEdoeWIzY2dkR2hwY3k1dFlXNWhaMlZ5TG1sMFpXMUZjbkp2Y2lobEtTd2diRHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdadVcyVmRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhVZ1BTQXdMQ0JrSUQwZ2FDNXNaVzVuZEdnN0lIVWdQQ0JrT3lCMUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdZZ1BTQm9XM1ZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmk1dmJrVnljbTl5SUNZbUlHWXViMjVGY25KdmNpaHNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMWhibUZuWlhJdWFYUmxiVVZ5Y205eUtHVXBPd29nSUNBZ0lDQWdJSDBwTG1acGJtRnNiSGtvS0NrOVBuc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRZVzVoWjJWeUxtbDBaVzFGYm1Rb1pTazdDaUFnSUNBZ0lDQWdmU2tzSUhSb2FYTXViV0Z1WVdkbGNpNXBkR1Z0VTNSaGNuUW9aU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUlNaWE53YjI1elpWUjVjR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYzNCdmJuTmxWSGx3WlNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJOYVcxbFZIbHdaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x0WlZSNWNHVWdQU0JsTENCMGFHbHpPd29nSUNBZ2ZRcDlMQ0JoZFNBOUlHTnNZWE56SUdWNGRHVnVaSE1nUkhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTazdDaUFnSUNCOUNpQWdJQ0JzYjJGa0tHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNc0lHRWdQU0J1WlhjZ2NtNG9kR2hwY3k1dFlXNWhaMlZ5S1RzS0lDQWdJQ0FnSUNCaExuTmxkRkJoZEdnb2RHaHBjeTV3WVhSb0tTd2dZUzV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLSFJvYVhNdWNtVnhkV1Z6ZEVobFlXUmxjaWtzSUdFdWMyVjBWMmwwYUVOeVpXUmxiblJwWVd4ektIUm9hWE11ZDJsMGFFTnlaV1JsYm5ScFlXeHpLU3dnWVM1c2IyRmtLR1VzSUdaMWJtTjBhVzl1S0c4cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUW9jaTV3WVhKelpTaEtVMDlPTG5CaGNuTmxLRzhwS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1B5QnBLR01wSURvZ1kyOXVjMjlzWlM1bGNuSnZjaWhqS1N3Z2NpNXRZVzVoWjJWeUxtbDBaVzFGY25KdmNpaGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHNJRzRzSUdrcE93b2dJQ0FnZlFvZ0lDQWdjR0Z5YzJVb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Ec2diaUE4SUdVdWJHVnVaM1JvT3lCdUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUdsekxuQmhjbk5sS0dWYmJsMHBPd29nSUNBZ0lDQWdJQ0FnSUNCMExuQjFjMmdvYVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCME93b2dJQ0FnZlFwOUxDQnZkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdSSFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNiMkZrS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE1zSUdFZ1BTQmJYU3dnYnlBOUlHNWxkeUJWY3l3Z1l5QTlJRzVsZHlCeWJpaDBhR2x6TG0xaGJtRm5aWElwT3dvZ0lDQWdJQ0FnSUdNdWMyVjBVR0YwYUNoMGFHbHpMbkJoZEdncExDQmpMbk5sZEZKbGMzQnZibk5sVkhsd1pTZ2lZWEp5WVhsaWRXWm1aWElpS1N3Z1l5NXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtIUm9hWE11Y21WeGRXVnpkRWhsWVdSbGNpa3NJR011YzJWMFYybDBhRU55WldSbGJuUnBZV3h6S0hJdWQybDBhRU55WldSbGJuUnBZV3h6S1RzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SURBN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FDaDFLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTXViRzloWkNobFczVmRMQ0JtZFc1amRHbHZiaWhrS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUhJdWNHRnljMlVvWkN3Z0lUQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVnQxWFNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2daaTUzYVdSMGFDd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJR1l1YUdWcFoyaDBMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNtMWhkRG9nWmk1bWIzSnRZWFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXbHdiV0Z3Y3pvZ1ppNXRhWEJ0WVhCekNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDQnNJQ3M5SURFc0lHd2dQVDA5SURZZ0ppWWdLR1l1Yldsd2JXRndRMjkxYm5RZ1BUMDlJREVnSmlZZ0tHOHViV2x1Um1sc2RHVnlJRDBnYlhRcExDQnZMbWx0WVdkbElEMGdZU3dnYnk1bWIzSnRZWFFnUFNCbUxtWnZjbTFoZEN3Z2J5NXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBJQ1ltSUhRb2J5a3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUxDQnVMQ0JwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa3BJR1p2Y2loc1pYUWdkU0E5SURBc0lHUWdQU0JsTG14bGJtZDBhRHNnZFNBOElHUTdJQ3NyZFNsb0tIVXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ1l5NXNiMkZrS0dVc0lHWjFibU4wYVc5dUtIVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCeUxuQmhjbk5sS0hVc0lDRXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1F1YVhORGRXSmxiV0Z3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUdRdWJXbHdiV0Z3Y3k1c1pXNW5kR2dnTHlCa0xtMXBjRzFoY0VOdmRXNTBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnRJRDBnTURzZ2JTQThJR1k3SUcwckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVZ0dFhTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x3YldGd2N6b2dXMTBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdYeUE5SURBN0lGOGdQQ0JrTG0xcGNHMWhjRU52ZFc1ME95QmZLeXNwWVZ0dFhTNXRhWEJ0WVhCekxuQjFjMmdvWkM1dGFYQnRZWEJ6VzIwZ0tpQmtMbTFwY0cxaGNFTnZkVzUwSUNzZ1gxMHBMQ0JoVzIxZExtWnZjbTFoZENBOUlHUXVabTl5YldGMExDQmhXMjFkTG5kcFpIUm9JRDBnWkM1M2FXUjBhQ3dnWVZ0dFhTNW9aV2xuYUhRZ1BTQmtMbWhsYVdkb2REc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOHVhVzFoWjJVZ1BTQmhPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYnk1cGJXRm5aUzUzYVdSMGFDQTlJR1F1ZDJsa2RHZ3NJRzh1YVcxaFoyVXVhR1ZwWjJoMElEMGdaQzVvWldsbmFIUXNJRzh1Yldsd2JXRndjeUE5SUdRdWJXbHdiV0Z3Y3pzS0lDQWdJQ0FnSUNBZ0lDQWdaQzV0YVhCdFlYQkRiM1Z1ZENBOVBUMGdNU0FtSmlBb2J5NXRhVzVHYVd4MFpYSWdQU0J0ZENrc0lHOHVabTl5YldGMElEMGdaQzVtYjNKdFlYUXNJRzh1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNQ3dnZENBbUppQjBLRzhwT3dvZ0lDQWdJQ0FnSUgwc0lHNHNJR2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2T3dvZ0lDQWdmUXA5TENCeWN5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1JIUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyRmtLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkJoZEdnZ0lUMDlJSFp2YVdRZ01DQW1KaUFvWlNBOUlIUm9hWE11Y0dGMGFDQXJJR1VwTENCbElEMGdkR2hwY3k1dFlXNWhaMlZ5TG5KbGMyOXNkbVZWVWt3b1pTazdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBhR2x6TENCaElEMGdjM011WjJWMEtHVXBPd29nSUNBZ0lDQWdJR2xtSUNoaElDRTlQU0IyYjJsa0lEQXBJSEpsZEhWeWJpQnlMbTFoYm1GblpYSXVhWFJsYlZOMFlYSjBLR1VwTENCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCMElDWW1JSFFvWVNrc0lISXViV0Z1WVdkbGNpNXBkR1Z0Ulc1a0tHVXBPd29nSUNBZ0lDQWdJSDBzSURBcExDQmhPd29nSUNBZ0lDQWdJR3hsZENCdklEMGdkM01vSW1sdFp5SXBPd29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR01vS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2dvS1N3Z2MzTXVZV1JrS0dVc0lIUm9hWE1wTENCMElDWW1JSFFvZEdocGN5a3NJSEl1YldGdVlXZGxjaTVwZEdWdFJXNWtLR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCc0tIVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FDZ3BMQ0JwSUNZbUlHa29kU2tzSUhJdWJXRnVZV2RsY2k1cGRHVnRSWEp5YjNJb1pTa3NJSEl1YldGdVlXZGxjaTVwZEdWdFJXNWtLR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCb0tDa2dld29nSUNBZ0lDQWdJQ0FnSUNCdkxuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbXh2WVdRaUxDQmpMQ0FoTVNrc0lHOHVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpWlhKeWIzSWlMQ0JzTENBaE1TazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQnZMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbXh2WVdRaUxDQmpMQ0FoTVNrc0lHOHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2laWEp5YjNJaUxDQnNMQ0FoTVNrc0lHVXVjMnhwWTJVb01Dd2dOU2tnSVQwOUlDSmtZWFJoT2lJZ0ppWWdkR2hwY3k1amNtOXpjMDl5YVdkcGJpQWhQVDBnZG05cFpDQXdJQ1ltSUNodkxtTnliM056VDNKcFoybHVJRDBnZEdocGN5NWpjbTl6YzA5eWFXZHBiaWtzSUhJdWJXRnVZV2RsY2k1cGRHVnRVM1JoY25Rb1pTa3NJRzh1YzNKaklEMGdaU3dnYnpzS0lDQWdJSDBLZlN3Z1kzVWdQU0JqYkdGemN5QmxlSFJsYm1SeklFUjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VwT3dvZ0lDQWdmUW9nSUNBZ2JHOWhaQ2hsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCdVpYY2dTMms3Q2lBZ0lDQWdJQ0FnY2k1amIyeHZjbE53WVdObElEMGdkblE3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0J1WlhjZ2NuTW9kR2hwY3k1dFlXNWhaMlZ5S1RzS0lDQWdJQ0FnSUNCaExuTmxkRU55YjNOelQzSnBaMmx1S0hSb2FYTXVZM0p2YzNOUGNtbG5hVzRwTENCaExuTmxkRkJoZEdnb2RHaHBjeTV3WVhSb0tUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlEQTdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdZeWhzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR0V1Ykc5aFpDaGxXMnhkTENCbWRXNWpkR2x2Ymlob0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlMbWx0WVdkbGMxdHNYU0E5SUdnc0lHOHJLeXdnYnlBOVBUMGdOaUFtSmlBb2NpNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBJQ1ltSUhRb2Npa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUxDQjJiMmxrSURBc0lHa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR3dnUFNBd095QnNJRHdnWlM1c1pXNW5kR2c3SUNzcmJDbGpLR3dwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5T3dvZ0lDQWdmUXA5TENCc2RTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1JIUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyRmtLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSb2FYTXNJR0VnUFNCdVpYY2diMmtzSUc4Z1BTQnVaWGNnY200b2RHaHBjeTV0WVc1aFoyVnlLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdieTV6WlhSU1pYTndiMjV6WlZSNWNHVW9JbUZ5Y21GNVluVm1abVZ5SWlrc0lHOHVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaDBhR2x6TG5KbGNYVmxjM1JJWldGa1pYSXBMQ0J2TG5ObGRGQmhkR2dvZEdocGN5NXdZWFJvS1N3Z2J5NXpaWFJYYVhSb1EzSmxaR1Z1ZEdsaGJITW9jaTUzYVhSb1EzSmxaR1Z1ZEdsaGJITXBMQ0J2TG14dllXUW9aU3dnWm5WdVkzUnBiMjRvWXlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JEc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd2dQU0J5TG5CaGNuTmxLR01wT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQWhQVDBnZG05cFpDQXdLU0JwS0dncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2JDNXBiV0ZuWlNBaFBUMGdkbTlwWkNBd0lEOGdZUzVwYldGblpTQTlJR3d1YVcxaFoyVWdPaUJzTG1SaGRHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb1lTNXBiV0ZuWlM1M2FXUjBhQ0E5SUd3dWQybGtkR2dzSUdFdWFXMWhaMlV1YUdWcFoyaDBJRDBnYkM1b1pXbG5hSFFzSUdFdWFXMWhaMlV1WkdGMFlTQTlJR3d1WkdGMFlTa3NJR0V1ZDNKaGNGTWdQU0JzTG5keVlYQlRJQ0U5UFNCMmIybGtJREFnUHlCc0xuZHlZWEJUSURvZ1NYUXNJR0V1ZDNKaGNGUWdQU0JzTG5keVlYQlVJQ0U5UFNCMmIybGtJREFnUHlCc0xuZHlZWEJVSURvZ1NYUXNJR0V1YldGblJtbHNkR1Z5SUQwZ2JDNXRZV2RHYVd4MFpYSWdJVDA5SUhadmFXUWdNQ0EvSUd3dWJXRm5SbWxzZEdWeUlEb2diWFFzSUdFdWJXbHVSbWxzZEdWeUlEMGdiQzV0YVc1R2FXeDBaWElnSVQwOUlIWnZhV1FnTUNBL0lHd3ViV2x1Um1sc2RHVnlJRG9nYlhRc0lHRXVZVzVwYzI5MGNtOXdlU0E5SUd3dVlXNXBjMjkwY205d2VTQWhQVDBnZG05cFpDQXdJRDhnYkM1aGJtbHpiM1J5YjNCNUlEb2dNU3dnYkM1amIyeHZjbE53WVdObElDRTlQU0IyYjJsa0lEQWdQeUJoTG1OdmJHOXlVM0JoWTJVZ1BTQnNMbU52Ykc5eVUzQmhZMlVnT2lCc0xtVnVZMjlrYVc1bklDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdVpXNWpiMlJwYm1jZ1BTQnNMbVZ1WTI5a2FXNW5LU3dnYkM1bWJHbHdXU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMbVpzYVhCWklEMGdiQzVtYkdsd1dTa3NJR3d1Wm05eWJXRjBJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVabTl5YldGMElEMGdiQzVtYjNKdFlYUXBMQ0JzTG5SNWNHVWdJVDA5SUhadmFXUWdNQ0FtSmlBb1lTNTBlWEJsSUQwZ2JDNTBlWEJsS1N3Z2JDNXRhWEJ0WVhCeklDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWJXbHdiV0Z3Y3lBOUlHd3ViV2x3YldGd2N5d2dZUzV0YVc1R2FXeDBaWElnUFNCc2FTa3NJR3d1Yldsd2JXRndRMjkxYm5RZ1BUMDlJREVnSmlZZ0tHRXViV2x1Um1sc2RHVnlJRDBnYlhRcExDQnNMbWRsYm1WeVlYUmxUV2x3YldGd2N5QWhQVDBnZG05cFpDQXdJQ1ltSUNoaExtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lBOUlHd3VaMlZ1WlhKaGRHVk5hWEJ0WVhCektTd2dZUzV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwSUNZbUlIUW9ZU3dnYkNrN0NpQWdJQ0FnSUNBZ2ZTd2diaXdnYVNrc0lHRTdDaUFnSUNCOUNuMHNJR2gxSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJFZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobEtUc0tJQ0FnSUgwS0lDQWdJR3h2WVdRb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJR3hsZENCeUlEMGdibVYzSUZOMExDQmhJRDBnYm1WM0lISnpLSFJvYVhNdWJXRnVZV2RsY2lrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFdWMyVjBRM0p2YzNOUGNtbG5hVzRvZEdocGN5NWpjbTl6YzA5eWFXZHBiaWtzSUdFdWMyVjBVR0YwYUNoMGFHbHpMbkJoZEdncExDQmhMbXh2WVdRb1pTd2dablZ1WTNScGIyNG9ieWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlMbWx0WVdkbElEMGdieXdnY2k1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMElDRTlQU0IyYjJsa0lEQWdKaVlnZENoeUtUc0tJQ0FnSUNBZ0lDQjlMQ0J1TENCcEtTd2djanNLSUNBZ0lIMEtmU3dnUlc0Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVwbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFnUFNBeEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selRHbG5hSFFnUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWt4cFoyaDBJaXdnZEdocGN5NWpiMnh2Y2lBOUlHNWxkeUJ3WlNobEtTd2dkR2hwY3k1cGJuUmxibk5wZEhrZ1BTQjBPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUh0OUNpQWdJQ0JqYjNCNUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobExDQjBLU3dnZEdocGN5NWpiMnh2Y2k1amIzQjVLR1V1WTI5c2IzSXBMQ0IwYUdsekxtbHVkR1Z1YzJsMGVTQTlJR1V1YVc1MFpXNXphWFI1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhOMWNHVnlMblJ2U2xOUFRpaGxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQzV2WW1wbFkzUXVZMjlzYjNJZ1BTQjBhR2x6TG1OdmJHOXlMbWRsZEVobGVDZ3BMQ0IwTG05aWFtVmpkQzVwYm5SbGJuTnBkSGtnUFNCMGFHbHpMbWx1ZEdWdWMybDBlU3dnZEdocGN5NW5jbTkxYm1SRGIyeHZjaUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaDBMbTlpYW1WamRDNW5jbTkxYm1SRGIyeHZjaUE5SUhSb2FYTXVaM0p2ZFc1a1EyOXNiM0l1WjJWMFNHVjRLQ2twTENCMGFHbHpMbVJwYzNSaGJtTmxJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUXViMkpxWldOMExtUnBjM1JoYm1ObElEMGdkR2hwY3k1a2FYTjBZVzVqWlNrc0lIUm9hWE11WVc1bmJHVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2RDNXZZbXBsWTNRdVlXNW5iR1VnUFNCMGFHbHpMbUZ1WjJ4bEtTd2dkR2hwY3k1a1pXTmhlU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaDBMbTlpYW1WamRDNWtaV05oZVNBOUlIUm9hWE11WkdWallYa3BMQ0IwYUdsekxuQmxiblZ0WW5KaElDRTlQU0IyYjJsa0lEQWdKaVlnS0hRdWIySnFaV04wTG5CbGJuVnRZbkpoSUQwZ2RHaHBjeTV3Wlc1MWJXSnlZU2tzSUhSb2FYTXVjMmhoWkc5M0lDRTlQU0IyYjJsa0lEQWdKaVlnS0hRdWIySnFaV04wTG5Ob1lXUnZkeUE5SUhSb2FYTXVjMmhoWkc5M0xuUnZTbE5QVGlncEtTd2dkRHNLSUNBZ0lIMEtmU3dnVTJNZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVWdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lHNHBMQ0IwYUdsekxtbHpTR1Z0YVhOd2FHVnlaVXhwWjJoMElEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSklaVzFwYzNCb1pYSmxUR2xuYUhRaUxDQjBhR2x6TG5CdmMybDBhVzl1TG1OdmNIa29TbVV1UkVWR1FWVk1WRjlWVUNrc0lIUm9hWE11ZFhCa1lYUmxUV0YwY21sNEtDa3NJSFJvYVhNdVozSnZkVzVrUTI5c2IzSWdQU0J1WlhjZ2NHVW9kQ2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxMQ0IwS1N3Z2RHaHBjeTVuY205MWJtUkRiMnh2Y2k1amIzQjVLR1V1WjNKdmRXNWtRMjlzYjNJcExDQjBhR2x6T3dvZ0lDQWdmUXA5TENCdmJ5QTlJRzVsZHlCNlpTd2dkWFVnUFNCdVpYY2dRU3dnWkhVZ1BTQnVaWGNnUVN3Z2VuTWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0IwYUdsekxtTmhiV1Z5WVNBOUlHVXNJSFJvYVhNdVltbGhjeUE5SURBc0lIUm9hWE11Ym05eWJXRnNRbWxoY3lBOUlEQXNJSFJvYVhNdWNtRmthWFZ6SUQwZ01Td2dkR2hwY3k1aWJIVnlVMkZ0Y0d4bGN5QTlJRGdzSUhSb2FYTXViV0Z3VTJsNlpTQTlJRzVsZHlCYUtEVXhNaXdnTlRFeUtTd2dkR2hwY3k1dFlYQWdQU0J1ZFd4c0xDQjBhR2x6TG0xaGNGQmhjM01nUFNCdWRXeHNMQ0IwYUdsekxtMWhkSEpwZUNBOUlHNWxkeUI2WlN3Z2RHaHBjeTVoZFhSdlZYQmtZWFJsSUQwZ0lUQXNJSFJvYVhNdWJtVmxaSE5WY0dSaGRHVWdQU0FoTVN3Z2RHaHBjeTVmWm5KMWMzUjFiU0E5SUc1bGR5QlFjeXdnZEdocGN5NWZabkpoYldWRmVIUmxiblJ6SUQwZ2JtVjNJRm9vTVN3Z01Ta3NJSFJvYVhNdVgzWnBaWGR3YjNKMFEyOTFiblFnUFNBeExDQjBhR2x6TGw5MmFXVjNjRzl5ZEhNZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QnFaU2d3TENBd0xDQXhMQ0F4S1FvZ0lDQWdJQ0FnSUYwN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJXYVdWM2NHOXlkRU52ZFc1MEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MmFXVjNjRzl5ZEVOdmRXNTBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJuSjFjM1IxYlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWm5KMWMzUjFiVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVTFoZEhKcFkyVnpLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZMkZ0WlhKaExDQnVJRDBnZEdocGN5NXRZWFJ5YVhnN0NpQWdJQ0FnSUNBZ2RYVXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0dVdWJXRjBjbWw0VjI5eWJHUXBMQ0IwTG5CdmMybDBhVzl1TG1OdmNIa29kWFVwTENCa2RTNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvWlM1MFlYSm5aWFF1YldGMGNtbDRWMjl5YkdRcExDQjBMbXh2YjJ0QmRDaGtkU2tzSUhRdWRYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb0tTd2diMjh1YlhWc2RHbHdiSGxOWVhSeWFXTmxjeWgwTG5CeWIycGxZM1JwYjI1TllYUnlhWGdzSUhRdWJXRjBjbWw0VjI5eWJHUkpiblpsY25ObEtTd2dkR2hwY3k1ZlpuSjFjM1IxYlM1elpYUkdjbTl0VUhKdmFtVmpkR2x2YmsxaGRISnBlQ2h2Ynlrc0lHNHVjMlYwS0M0MUxDQXdMQ0F3TENBdU5Td2dNQ3dnTGpVc0lEQXNJQzQxTENBd0xDQXdMQ0F1TlN3Z0xqVXNJREFzSURBc0lEQXNJREVwTENCdUxtMTFiSFJwY0d4NUtHOXZLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGWnBaWGR3YjNKMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRtbGxkM0J2Y25SelcyVmRPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJuSmhiV1ZGZUhSbGJuUnpLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW1jbUZ0WlVWNGRHVnVkSE03Q2lBZ0lDQjlDaUFnSUNCa2FYTndiM05sS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YldGd0lDWW1JSFJvYVhNdWJXRndMbVJwYzNCdmMyVW9LU3dnZEdocGN5NXRZWEJRWVhOeklDWW1JSFJvYVhNdWJXRndVR0Z6Y3k1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqWVcxbGNtRWdQU0JsTG1OaGJXVnlZUzVqYkc5dVpTZ3BMQ0IwYUdsekxtSnBZWE1nUFNCbExtSnBZWE1zSUhSb2FYTXVjbUZrYVhWeklEMGdaUzV5WVdScGRYTXNJSFJvYVhNdWJXRndVMmw2WlM1amIzQjVLR1V1YldGd1UybDZaU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdlMzA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVltbGhjeUFoUFQwZ01DQW1KaUFvWlM1aWFXRnpJRDBnZEdocGN5NWlhV0Z6S1N3Z2RHaHBjeTV1YjNKdFlXeENhV0Z6SUNFOVBTQXdJQ1ltSUNobExtNXZjbTFoYkVKcFlYTWdQU0IwYUdsekxtNXZjbTFoYkVKcFlYTXBMQ0IwYUdsekxuSmhaR2wxY3lBaFBUMGdNU0FtSmlBb1pTNXlZV1JwZFhNZ1BTQjBhR2x6TG5KaFpHbDFjeWtzSUNoMGFHbHpMbTFoY0ZOcGVtVXVlQ0FoUFQwZ05URXlJSHg4SUhSb2FYTXViV0Z3VTJsNlpTNTVJQ0U5UFNBMU1USXBJQ1ltSUNobExtMWhjRk5wZW1VZ1BTQjBhR2x6TG0xaGNGTnBlbVV1ZEc5QmNuSmhlU2dwS1N3Z1pTNWpZVzFsY21FZ1BTQjBhR2x6TG1OaGJXVnlZUzUwYjBwVFQwNG9JVEVwTG05aWFtVmpkQ3dnWkdWc1pYUmxJR1V1WTJGdFpYSmhMbTFoZEhKcGVDd2daVHNLSUNBZ0lIMEtmU3dnWW1NZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUhweklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JtVjNJSGwwS0RVd0xDQXhMQ0F1TlN3Z05UQXdLU2tzSUhSb2FYTXVhWE5UY0c5MFRHbG5hSFJUYUdGa2IzY2dQU0FoTUN3Z2RHaHBjeTVtYjJOMWN5QTlJREU3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZOWVhSeWFXTmxjeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5oYldWeVlTd2diaUE5SUZwcElDb2dNaUFxSUdVdVlXNW5iR1VnS2lCMGFHbHpMbVp2WTNWekxDQnBJRDBnZEdocGN5NXRZWEJUYVhwbExuZHBaSFJvSUM4Z2RHaHBjeTV0WVhCVGFYcGxMbWhsYVdkb2RDd2djaUE5SUdVdVpHbHpkR0Z1WTJVZ2ZId2dkQzVtWVhJN0NpQWdJQ0FnSUNBZ0tHNGdJVDA5SUhRdVptOTJJSHg4SUdrZ0lUMDlJSFF1WVhOd1pXTjBJSHg4SUhJZ0lUMDlJSFF1Wm1GeUtTQW1KaUFvZEM1bWIzWWdQU0J1TENCMExtRnpjR1ZqZENBOUlHa3NJSFF1Wm1GeUlEMGdjaXdnZEM1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRLQ2twTENCemRYQmxjaTUxY0dSaGRHVk5ZWFJ5YVdObGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1adlkzVnpJRDBnWlM1bWIyTjFjeXdnZEdocGN6c0tJQ0FnSUgwS2ZTd2dSV01nUFNCamJHRnpjeUJsZUhSbGJtUnpJRVZ1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRnUFNBd0xDQnBJRDBnVFdGMGFDNVFTU0F2SURNc0lISWdQU0F3TENCaElEMGdNaWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU3dnZENrc0lIUm9hWE11YVhOVGNHOTBUR2xuYUhRZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsTndiM1JNYVdkb2RDSXNJSFJvYVhNdWNHOXphWFJwYjI0dVkyOXdlU2hLWlM1RVJVWkJWVXhVWDFWUUtTd2dkR2hwY3k1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnZEdocGN5NTBZWEpuWlhRZ1BTQnVaWGNnU21Vc0lIUm9hWE11WkdsemRHRnVZMlVnUFNCdUxDQjBhR2x6TG1GdVoyeGxJRDBnYVN3Z2RHaHBjeTV3Wlc1MWJXSnlZU0E5SUhJc0lIUm9hWE11WkdWallYa2dQU0JoTENCMGFHbHpMbTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVjMmhoWkc5M0lEMGdibVYzSUdKak93b2dJQ0FnZlFvZ0lDQWdaMlYwSUhCdmQyVnlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtbHVkR1Z1YzJsMGVTQXFJRTFoZEdndVVFazdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2NHOTNaWElvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YVc1MFpXNXphWFI1SUQwZ1pTQXZJRTFoZEdndVVFazdDaUFnSUNCOUNpQWdJQ0JrYVhOd2IzTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjMmhoWkc5M0xtUnBjM0J2YzJVb0tUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVc0lIUXBMQ0IwYUdsekxtUnBjM1JoYm1ObElEMGdaUzVrYVhOMFlXNWpaU3dnZEdocGN5NWhibWRzWlNBOUlHVXVZVzVuYkdVc0lIUm9hWE11Y0dWdWRXMWljbUVnUFNCbExuQmxiblZ0WW5KaExDQjBhR2x6TG1SbFkyRjVJRDBnWlM1a1pXTmhlU3dnZEdocGN5NTBZWEpuWlhRZ1BTQmxMblJoY21kbGRDNWpiRzl1WlNncExDQjBhR2x6TG5Ob1lXUnZkeUE5SUdVdWMyaGhaRzkzTG1Oc2IyNWxLQ2tzSUhSb2FYTTdDaUFnSUNCOUNuMHNJR1oxSUQwZ2JtVjNJSHBsTENCZmN5QTlJRzVsZHlCQkxDQmpieUE5SUc1bGR5QkJMQ0JVWXlBOUlHTnNZWE56SUdWNGRHVnVaSE1nZW5NZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lodVpYY2dlWFFvT1RBc0lERXNJQzQxTENBMU1EQXBLU3dnZEdocGN5NXBjMUJ2YVc1MFRHbG5hSFJUYUdGa2IzY2dQU0FoTUN3Z2RHaHBjeTVmWm5KaGJXVkZlSFJsYm5SeklEMGdibVYzSUZvb05Dd2dNaWtzSUhSb2FYTXVYM1pwWlhkd2IzSjBRMjkxYm5RZ1BTQTJMQ0IwYUdsekxsOTJhV1YzY0c5eWRITWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJxWlNneUxDQXhMQ0F4TENBeEtTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lHcGxLREFzSURFc0lERXNJREVwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnYW1Vb015d2dNU3dnTVN3Z01Ta3NDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QnFaU2d4TENBeExDQXhMQ0F4S1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUdwbEtETXNJREFzSURFc0lERXBMQW9nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dhbVVvTVN3Z01Dd2dNU3dnTVNrS0lDQWdJQ0FnSUNCZExDQjBhR2x6TGw5amRXSmxSR2x5WldOMGFXOXVjeUE5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUVFb01Td2dNQ3dnTUNrc0NpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCQktDMHhMQ0F3TENBd0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFRW9NQ3dnTUN3Z01Ta3NDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJLREFzSURBc0lDMHhLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRUVvTUN3Z01Td2dNQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJCS0RBc0lDMHhMQ0F3S1FvZ0lDQWdJQ0FnSUYwc0lIUm9hWE11WDJOMVltVlZjSE1nUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCQktEQXNJREVzSURBcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1FTZ3dMQ0F4TENBd0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFRW9NQ3dnTVN3Z01Da3NDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJLREFzSURFc0lEQXBMQW9nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dRU2d3TENBd0xDQXhLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRUVvTUN3Z01Dd2dMVEVwQ2lBZ0lDQWdJQ0FnWFRzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlUxaGRISnBZMlZ6S0dVc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbU5oYldWeVlTd2dhU0E5SUhSb2FYTXViV0YwY21sNExDQnlJRDBnWlM1a2FYTjBZVzVqWlNCOGZDQnVMbVpoY2pzS0lDQWdJQ0FnSUNCeUlDRTlQU0J1TG1aaGNpQW1KaUFvYmk1bVlYSWdQU0J5TENCdUxuVndaR0YwWlZCeWIycGxZM1JwYjI1TllYUnlhWGdvS1Nrc0lGOXpMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmlobExtMWhkSEpwZUZkdmNteGtLU3dnYmk1d2IzTnBkR2x2Ymk1amIzQjVLRjl6S1N3Z1kyOHVZMjl3ZVNodUxuQnZjMmwwYVc5dUtTd2dZMjh1WVdSa0tIUm9hWE11WDJOMVltVkVhWEpsWTNScGIyNXpXM1JkS1N3Z2JpNTFjQzVqYjNCNUtIUm9hWE11WDJOMVltVlZjSE5iZEYwcExDQnVMbXh2YjJ0QmRDaGpieWtzSUc0dWRYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb0tTd2dhUzV0WVd0bFZISmhibk5zWVhScGIyNG9MVjl6TG5nc0lDMWZjeTU1TENBdFgzTXVlaWtzSUdaMUxtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb2JpNXdjbTlxWldOMGFXOXVUV0YwY21sNExDQnVMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaU2tzSUhSb2FYTXVYMlp5ZFhOMGRXMHVjMlYwUm5KdmJWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb1puVXBPd29nSUNBZ2ZRcDlMQ0IzWXlBOUlHTnNZWE56SUdWNGRHVnVaSE1nUlc0Z2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlBOUlEQXNJR2tnUFNBeUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBLU3dnZEdocGN5NXBjMUJ2YVc1MFRHbG5hSFFnUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWxCdmFXNTBUR2xuYUhRaUxDQjBhR2x6TG1ScGMzUmhibU5sSUQwZ2Jpd2dkR2hwY3k1a1pXTmhlU0E5SUdrc0lIUm9hWE11YzJoaFpHOTNJRDBnYm1WM0lGUmpPd29nSUNBZ2ZRb2dJQ0FnWjJWMElIQnZkMlZ5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx1ZEdWdWMybDBlU0FxSURRZ0tpQk5ZWFJvTGxCSk93b2dJQ0FnZlFvZ0lDQWdjMlYwSUhCdmQyVnlLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWx1ZEdWdWMybDBlU0E5SUdVZ0x5QW9OQ0FxSUUxaGRHZ3VVRWtwT3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5Ob1lXUnZkeTVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxMQ0IwS1N3Z2RHaHBjeTVrYVhOMFlXNWpaU0E5SUdVdVpHbHpkR0Z1WTJVc0lIUm9hWE11WkdWallYa2dQU0JsTG1SbFkyRjVMQ0IwYUdsekxuTm9ZV1J2ZHlBOUlHVXVjMmhoWkc5M0xtTnNiMjVsS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUVGaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCNmN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3Bld29nSUNBZ0lDQWdJSE4xY0dWeUtHNWxkeUJNY3lndE5Td2dOU3dnTlN3Z0xUVXNJQzQxTENBMU1EQXBLU3dnZEdocGN5NXBjMFJwY21WamRHbHZibUZzVEdsbmFIUlRhR0ZrYjNjZ1BTQWhNRHNLSUNBZ0lIMEtmU3dnVW1NZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVWdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VzSUhRcExDQjBhR2x6TG1selJHbHlaV04wYVc5dVlXeE1hV2RvZENBOUlDRXdMQ0IwYUdsekxuUjVjR1VnUFNBaVJHbHlaV04wYVc5dVlXeE1hV2RvZENJc0lIUm9hWE11Y0c5emFYUnBiMjR1WTI5d2VTaEtaUzVFUlVaQlZVeFVYMVZRS1N3Z2RHaHBjeTUxY0dSaGRHVk5ZWFJ5YVhnb0tTd2dkR2hwY3k1MFlYSm5aWFFnUFNCdVpYY2dTbVVzSUhSb2FYTXVjMmhoWkc5M0lEMGdibVYzSUVGak93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuTm9ZV1J2ZHk1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NTBZWEpuWlhRZ1BTQmxMblJoY21kbGRDNWpiRzl1WlNncExDQjBhR2x6TG5Ob1lXUnZkeUE5SUdVdWMyaGhaRzkzTG1Oc2IyNWxLQ2tzSUhSb2FYTTdDaUFnSUNCOUNuMHNJRU5qSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJGYmlCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1N3Z2RHaHBjeTVwYzBGdFltbGxiblJNYVdkb2RDQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlRVzFpYVdWdWRFeHBaMmgwSWpzS0lDQWdJSDBLZlN3Z1VHTWdQU0JqYkdGemN5QmxlSFJsYm1SeklFVnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNGdQU0F4TUN3Z2FTQTlJREV3S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMEtTd2dkR2hwY3k1cGMxSmxZM1JCY21WaFRHbG5hSFFnUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWxKbFkzUkJjbVZoVEdsbmFIUWlMQ0IwYUdsekxuZHBaSFJvSUQwZ2Jpd2dkR2hwY3k1b1pXbG5hSFFnUFNCcE93b2dJQ0FnZlFvZ0lDQWdaMlYwSUhCdmQyVnlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtbHVkR1Z1YzJsMGVTQXFJSFJvYVhNdWQybGtkR2dnS2lCMGFHbHpMbWhsYVdkb2RDQXFJRTFoZEdndVVFazdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2NHOTNaWElvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YVc1MFpXNXphWFI1SUQwZ1pTQXZJQ2gwYUdsekxuZHBaSFJvSUNvZ2RHaHBjeTVvWldsbmFIUWdLaUJOWVhSb0xsQkpLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG5kcFpIUm9JRDBnWlM1M2FXUjBhQ3dnZEdocGN5NW9aV2xuYUhRZ1BTQmxMbWhsYVdkb2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQnpkWEJsY2k1MGIwcFRUMDRvWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRdWIySnFaV04wTG5kcFpIUm9JRDBnZEdocGN5NTNhV1IwYUN3Z2RDNXZZbXBsWTNRdWFHVnBaMmgwSUQwZ2RHaHBjeTVvWldsbmFIUXNJSFE3Q2lBZ0lDQjlDbjBzSUV4aklEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQjBhR2x6TG1selUzQm9aWEpwWTJGc1NHRnliVzl1YVdOek15QTlJQ0V3TENCMGFHbHpMbU52WldabWFXTnBaVzUwY3lBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdaU0E5SURBN0lHVWdQQ0E1T3lCbEt5c3BkR2hwY3k1amIyVm1abWxqYVdWdWRITXVjSFZ6YUNodVpYY2dRU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQTdJSFFnUENBNU95QjBLeXNwZEdocGN5NWpiMlZtWm1samFXVnVkSE5iZEYwdVkyOXdlU2hsVzNSZEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhwbGNtOG9LU0I3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JsSUQwZ01Ec2daU0E4SURrN0lHVXJLeWwwYUdsekxtTnZaV1ptYVdOcFpXNTBjMXRsWFM1elpYUW9NQ3dnTUN3Z01DazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUkJkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQmxMbmdzSUdrZ1BTQmxMbmtzSUhJZ1BTQmxMbm9zSUdFZ1BTQjBhR2x6TG1OdlpXWm1hV05wWlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNWpiM0I1S0dGYk1GMHBMbTExYkhScGNHeDVVMk5oYkdGeUtDNHlPREl3T1RVcExDQjBMbUZrWkZOallXeGxaRlpsWTNSdmNpaGhXekZkTENBdU5EZzROakF6SUNvZ2FTa3NJSFF1WVdSa1UyTmhiR1ZrVm1WamRHOXlLR0ZiTWwwc0lDNDBPRGcyTURNZ0tpQnlLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvWVZzelhTd2dMalE0T0RZd015QXFJRzRwTENCMExtRmtaRk5qWVd4bFpGWmxZM1J2Y2loaFd6UmRMQ0F4TGpBNU1qVTBPQ0FxSUNodUlDb2dhU2twTENCMExtRmtaRk5qWVd4bFpGWmxZM1J2Y2loaFd6VmRMQ0F4TGpBNU1qVTBPQ0FxSUNocElDb2djaWtwTENCMExtRmtaRk5qWVd4bFpGWmxZM1J2Y2loaFd6WmRMQ0F1TXpFMU16a3lJQ29nS0RNZ0tpQnlJQ29nY2lBdElERXBLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvWVZzM1hTd2dNUzR3T1RJMU5EZ2dLaUFvYmlBcUlISXBLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvWVZzNFhTd2dMalUwTmpJM05DQXFJQ2h1SUNvZ2JpQXRJR2tnS2lCcEtTa3NJSFE3Q2lBZ0lDQjlDaUFnSUNCblpYUkpjbkpoWkdsaGJtTmxRWFFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdaUzU0TENCcElEMGdaUzU1TENCeUlEMGdaUzU2TENCaElEMGdkR2hwY3k1amIyVm1abWxqYVdWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUXVZMjl3ZVNoaFd6QmRLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpZ3VPRGcyTWpJM0tTd2dkQzVoWkdSVFkyRnNaV1JXWldOMGIzSW9ZVnN4WFN3Z01pQXFJQzQxTVRFMk5qUWdLaUJwS1N3Z2RDNWhaR1JUWTJGc1pXUldaV04wYjNJb1lWc3lYU3dnTWlBcUlDNDFNVEUyTmpRZ0tpQnlLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvWVZzelhTd2dNaUFxSUM0MU1URTJOalFnS2lCdUtTd2dkQzVoWkdSVFkyRnNaV1JXWldOMGIzSW9ZVnMwWFN3Z01pQXFJQzQwTWprd05ETWdLaUJ1SUNvZ2FTa3NJSFF1WVdSa1UyTmhiR1ZrVm1WamRHOXlLR0ZiTlYwc0lESWdLaUF1TkRJNU1EUXpJQ29nYVNBcUlISXBMQ0IwTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWhoV3paZExDQXVOelF6TVRJMUlDb2djaUFxSUhJZ0xTQXVNalEzTnpBNEtTd2dkQzVoWkdSVFkyRnNaV1JXWldOMGIzSW9ZVnMzWFN3Z01pQXFJQzQwTWprd05ETWdLaUJ1SUNvZ2Npa3NJSFF1WVdSa1UyTmhiR1ZrVm1WamRHOXlLR0ZiT0Ywc0lDNDBNamt3TkRNZ0tpQW9iaUFxSUc0Z0xTQnBJQ29nYVNrcExDQjBPd29nSUNBZ2ZRb2dJQ0FnWVdSa0tHVXBJSHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd095QjBJRHdnT1RzZ2RDc3JLWFJvYVhNdVkyOWxabVpwWTJsbGJuUnpXM1JkTG1Ga1pDaGxMbU52WldabWFXTnBaVzUwYzF0MFhTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFpHUlRZMkZzWldSVFNDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElEazdJRzRyS3lsMGFHbHpMbU52WldabWFXTnBaVzUwYzF0dVhTNWhaR1JUWTJGc1pXUldaV04wYjNJb1pTNWpiMlZtWm1samFXVnVkSE5iYmwwc0lIUXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyTmhiR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREE3SUhRZ1BDQTVPeUIwS3lzcGRHaHBjeTVqYjJWbVptbGphV1Z1ZEhOYmRGMHViWFZzZEdsd2JIbFRZMkZzWVhJb1pTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCc1pYSndLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2dPVHNnYmlzcktYUm9hWE11WTI5bFptWnBZMmxsYm5SelcyNWRMbXhsY25Bb1pTNWpiMlZtWm1samFXVnVkSE5iYmwwc0lIUXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYRjFZV3h6S0dVcElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3T3lCMElEd2dPVHNnZENzcktXbG1JQ2doZEdocGN5NWpiMlZtWm1samFXVnVkSE5iZEYwdVpYRjFZV3h6S0dVdVkyOWxabVpwWTJsbGJuUnpXM1JkS1NrZ2NtVjBkWEp1SUNFeE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaE1Ec0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDaGxMbU52WldabWFXTnBaVzUwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9LUzVqYjNCNUtIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUZ5Y21GNUtHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1OdlpXWm1hV05wWlc1MGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F3T3lCcElEd2dPVHNnYVNzcktXNWJhVjB1Wm5KdmJVRnljbUY1S0dVc0lIUWdLeUJwSUNvZ015azdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwRnljbUY1S0dVZ1BTQmJYU3dnZENBOUlEQXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVkyOWxabVpwWTJsbGJuUnpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBN0lHa2dQQ0E1T3lCcEt5c3BibHRwWFM1MGIwRnljbUY1S0dVc0lIUWdLeUJwSUNvZ015azdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVTdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdaMlYwUW1GemFYTkJkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQmxMbmdzSUdrZ1BTQmxMbmtzSUhJZ1BTQmxMbm83Q2lBZ0lDQWdJQ0FnZEZzd1hTQTlJQzR5T0RJd09UVXNJSFJiTVYwZ1BTQXVORGc0TmpBeklDb2dhU3dnZEZzeVhTQTlJQzQwT0RnMk1ETWdLaUJ5TENCMFd6TmRJRDBnTGpRNE9EWXdNeUFxSUc0c0lIUmJORjBnUFNBeExqQTVNalUwT0NBcUlHNGdLaUJwTENCMFd6VmRJRDBnTVM0d09USTFORGdnS2lCcElDb2djaXdnZEZzMlhTQTlJQzR6TVRVek9USWdLaUFvTXlBcUlISWdLaUJ5SUMwZ01Ta3NJSFJiTjEwZ1BTQXhMakE1TWpVME9DQXFJRzRnS2lCeUxDQjBXemhkSUQwZ0xqVTBOakkzTkNBcUlDaHVJQ29nYmlBdElHa2dLaUJwS1RzS0lDQWdJSDBLZlN3Z1NXTWdQU0JqYkdGemN5QmxlSFJsYm1SeklFVnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dUR01zSUhRZ1BTQXhLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaDJiMmxrSURBc0lIUXBMQ0IwYUdsekxtbHpUR2xuYUhSUWNtOWlaU0E5SUNFd0xDQjBhR2x6TG5Ob0lEMGdaVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG5Ob0xtTnZjSGtvWlM1emFDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXNTBaVzV6YVhSNUlEMGdaUzVwYm5SbGJuTnBkSGtzSUhSb2FYTXVjMmd1Wm5KdmJVRnljbUY1S0dVdWMyZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSE4xY0dWeUxuUnZTbE5QVGlobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNXZZbXBsWTNRdWMyZ2dQU0IwYUdsekxuTm9MblJ2UVhKeVlYa29LU3dnZERzS0lDQWdJSDBLZlN3Z1ZXTWdQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJRVIwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVcExDQjBhR2x6TG5SbGVIUjFjbVZ6SUQwZ2UzMDdDaUFnSUNCOUNpQWdJQ0JzYjJGa0tHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNc0lHRWdQU0J1WlhjZ2NtNG9jaTV0WVc1aFoyVnlLVHNLSUNBZ0lDQWdJQ0JoTG5ObGRGQmhkR2dvY2k1d1lYUm9LU3dnWVM1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0hJdWNtVnhkV1Z6ZEVobFlXUmxjaWtzSUdFdWMyVjBWMmwwYUVOeVpXUmxiblJwWVd4ektISXVkMmwwYUVOeVpXUmxiblJwWVd4ektTd2dZUzVzYjJGa0tHVXNJR1oxYm1OMGFXOXVLRzhwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRb2NpNXdZWEp6WlNoS1UwOU9MbkJoY25ObEtHOHBLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnUHlCcEtHTXBJRG9nWTI5dWMyOXNaUzVsY25KdmNpaGpLU3dnY2k1dFlXNWhaMlZ5TG1sMFpXMUZjbkp2Y2lobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwc0lHNHNJR2twT3dvZ0lDQWdmUW9nSUNBZ2NHRnljMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTUwWlhoMGRYSmxjenNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ1S0hJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJiY2wwZ1BUMDlJSFp2YVdRZ01DQW1KaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGsxaGRHVnlhV0ZzVEc5aFpHVnlPaUJWYm1SbFptbHVaV1FnZEdWNGRIVnlaU0lzSUhJcExDQjBXM0pkT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhNeExtTnlaV0YwWlUxaGRHVnlhV0ZzUm5KdmJWUjVjR1VvWlM1MGVYQmxLVHNLSUNBZ0lDQWdJQ0JwWmlBb1pTNTFkV2xrSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZFhWcFpDQTlJR1V1ZFhWcFpDa3NJR1V1Ym1GdFpTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtNWhiV1VnUFNCbExtNWhiV1VwTENCbExtTnZiRzl5SUNFOVBTQjJiMmxrSURBZ0ppWWdhUzVqYjJ4dmNpQWhQVDBnZG05cFpDQXdJQ1ltSUdrdVkyOXNiM0l1YzJWMFNHVjRLR1V1WTI5c2IzSXBMQ0JsTG5KdmRXZG9ibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5KdmRXZG9ibVZ6Y3lBOUlHVXVjbTkxWjJodVpYTnpLU3dnWlM1dFpYUmhiRzVsYzNNZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1dFpYUmhiRzVsYzNNZ1BTQmxMbTFsZEdGc2JtVnpjeWtzSUdVdWMyaGxaVzRnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV6YUdWbGJpQTlJR1V1YzJobFpXNHBMQ0JsTG5Ob1pXVnVRMjlzYjNJZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emFHVmxia052Ykc5eUlEMGdibVYzSUhCbEtDa3VjMlYwU0dWNEtHVXVjMmhsWlc1RGIyeHZjaWtwTENCbExuTm9aV1Z1VW05MVoyaHVaWE56SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YzJobFpXNVNiM1ZuYUc1bGMzTWdQU0JsTG5Ob1pXVnVVbTkxWjJodVpYTnpLU3dnWlM1bGJXbHpjMmwyWlNBaFBUMGdkbTlwWkNBd0lDWW1JR2t1WlcxcGMzTnBkbVVnSVQwOUlIWnZhV1FnTUNBbUppQnBMbVZ0YVhOemFYWmxMbk5sZEVobGVDaGxMbVZ0YVhOemFYWmxLU3dnWlM1emNHVmpkV3hoY2lBaFBUMGdkbTlwWkNBd0lDWW1JR2t1YzNCbFkzVnNZWElnSVQwOUlIWnZhV1FnTUNBbUppQnBMbk53WldOMWJHRnlMbk5sZEVobGVDaGxMbk53WldOMWJHRnlLU3dnWlM1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1SUQwZ1pTNXpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVTa3NJR1V1YzNCbFkzVnNZWEpEYjJ4dmNpQWhQVDBnZG05cFpDQXdJQ1ltSUdrdWMzQmxZM1ZzWVhKRGIyeHZjaUFoUFQwZ2RtOXBaQ0F3SUNZbUlHa3VjM0JsWTNWc1lYSkRiMnh2Y2k1elpYUklaWGdvWlM1emNHVmpkV3hoY2tOdmJHOXlLU3dnWlM1emFHbHVhVzVsYzNNZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emFHbHVhVzVsYzNNZ1BTQmxMbk5vYVc1cGJtVnpjeWtzSUdVdVkyeGxZWEpqYjJGMElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVkyeGxZWEpqYjJGMElEMGdaUzVqYkdWaGNtTnZZWFFwTENCbExtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemN5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemN5QTlJR1V1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56S1N3Z1pTNXBjbWxrWlhOalpXNWpaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbWx5YVdSbGMyTmxibU5sSUQwZ1pTNXBjbWxrWlhOalpXNWpaU2tzSUdVdWFYSnBaR1Z6WTJWdVkyVkpUMUlnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVwY21sa1pYTmpaVzVqWlVsUFVpQTlJR1V1YVhKcFpHVnpZMlZ1WTJWSlQxSXBMQ0JsTG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelVtRnVaMlVnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzFKaGJtZGxJRDBnWlM1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMxSmhibWRsS1N3Z1pTNTBjbUZ1YzIxcGMzTnBiMjRnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzUwY21GdWMyMXBjM05wYjI0Z1BTQmxMblJ5WVc1emJXbHpjMmx2Ymlrc0lHVXVkR2hwWTJ0dVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VkR2hwWTJ0dVpYTnpJRDBnWlM1MGFHbGphMjVsYzNNcExDQmxMbUYwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlVnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sSUQwZ1pTNWhkSFJsYm5WaGRHbHZia1JwYzNSaGJtTmxLU3dnWlM1aGRIUmxiblZoZEdsdmJrTnZiRzl5SUNFOVBTQjJiMmxrSURBZ0ppWWdhUzVoZEhSbGJuVmhkR2x2YmtOdmJHOXlJQ0U5UFNCMmIybGtJREFnSmlZZ2FTNWhkSFJsYm5WaGRHbHZia052Ykc5eUxuTmxkRWhsZUNobExtRjBkR1Z1ZFdGMGFXOXVRMjlzYjNJcExDQmxMbUZ1YVhOdmRISnZjSGtnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVoYm1semIzUnliM0I1SUQwZ1pTNWhibWx6YjNSeWIzQjVLU3dnWlM1aGJtbHpiM1J5YjNCNVVtOTBZWFJwYjI0Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1aGJtbHpiM1J5YjNCNVVtOTBZWFJwYjI0Z1BTQmxMbUZ1YVhOdmRISnZjSGxTYjNSaGRHbHZiaWtzSUdVdVptOW5JQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VabTluSUQwZ1pTNW1iMmNwTENCbExtWnNZWFJUYUdGa2FXNW5JQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VabXhoZEZOb1lXUnBibWNnUFNCbExtWnNZWFJUYUdGa2FXNW5LU3dnWlM1aWJHVnVaR2x1WnlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1Kc1pXNWthVzVuSUQwZ1pTNWliR1Z1WkdsdVp5a3NJR1V1WTI5dFltbHVaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbU52YldKcGJtVWdQU0JsTG1OdmJXSnBibVVwTENCbExuTnBaR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV6YVdSbElEMGdaUzV6YVdSbEtTd2daUzV6YUdGa2IzZFRhV1JsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YzJoaFpHOTNVMmxrWlNBOUlHVXVjMmhoWkc5M1UybGtaU2tzSUdVdWIzQmhZMmwwZVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG05d1lXTnBkSGtnUFNCbExtOXdZV05wZEhrcExDQmxMblJ5WVc1emNHRnlaVzUwSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZEhKaGJuTndZWEpsYm5RZ1BTQmxMblJ5WVc1emNHRnlaVzUwS1N3Z1pTNWhiSEJvWVZSbGMzUWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNWhiSEJvWVZSbGMzUWdQU0JsTG1Gc2NHaGhWR1Z6ZENrc0lHVXVZV3h3YUdGSVlYTm9JQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VZV3h3YUdGSVlYTm9JRDBnWlM1aGJIQm9ZVWhoYzJncExDQmxMbVJsY0hSb1ZHVnpkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbVJsY0hSb1ZHVnpkQ0E5SUdVdVpHVndkR2hVWlhOMEtTd2daUzVrWlhCMGFGZHlhWFJsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WkdWd2RHaFhjbWwwWlNBOUlHVXVaR1Z3ZEdoWGNtbDBaU2tzSUdVdVkyOXNiM0pYY21sMFpTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtTnZiRzl5VjNKcGRHVWdQU0JsTG1OdmJHOXlWM0pwZEdVcExDQmxMbk4wWlc1amFXeFhjbWwwWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5OMFpXNWphV3hYY21sMFpTQTlJR1V1YzNSbGJtTnBiRmR5YVhSbEtTd2daUzV6ZEdWdVkybHNWM0pwZEdWTllYTnJJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VjM1JsYm1OcGJGZHlhWFJsVFdGemF5QTlJR1V1YzNSbGJtTnBiRmR5YVhSbFRXRnpheWtzSUdVdWMzUmxibU5wYkVaMWJtTWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXpkR1Z1WTJsc1JuVnVZeUE5SUdVdWMzUmxibU5wYkVaMWJtTXBMQ0JsTG5OMFpXNWphV3hTWldZZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emRHVnVZMmxzVW1WbUlEMGdaUzV6ZEdWdVkybHNVbVZtS1N3Z1pTNXpkR1Z1WTJsc1JuVnVZMDFoYzJzZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emRHVnVZMmxzUm5WdVkwMWhjMnNnUFNCbExuTjBaVzVqYVd4R2RXNWpUV0Z6YXlrc0lHVXVjM1JsYm1OcGJFWmhhV3dnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV6ZEdWdVkybHNSbUZwYkNBOUlHVXVjM1JsYm1OcGJFWmhhV3dwTENCbExuTjBaVzVqYVd4YVJtRnBiQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbk4wWlc1amFXeGFSbUZwYkNBOUlHVXVjM1JsYm1OcGJGcEdZV2xzS1N3Z1pTNXpkR1Z1WTJsc1dsQmhjM01nSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV6ZEdWdVkybHNXbEJoYzNNZ1BTQmxMbk4wWlc1amFXeGFVR0Z6Y3lrc0lHVXVkMmx5WldaeVlXMWxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VkMmx5WldaeVlXMWxJRDBnWlM1M2FYSmxabkpoYldVcExDQmxMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SUdVdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0tTd2daUzUzYVhKbFpuSmhiV1ZNYVc1bFkyRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VkMmx5WldaeVlXMWxUR2x1WldOaGNDQTlJR1V1ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ2tzSUdVdWQybHlaV1p5WVcxbFRHbHVaV3B2YVc0Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBOUlHVXVkMmx5WldaeVlXMWxUR2x1WldwdmFXNHBMQ0JsTG5KdmRHRjBhVzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1Y205MFlYUnBiMjRnUFNCbExuSnZkR0YwYVc5dUtTd2daUzVzYVc1bGQybGtkR2dnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVzYVc1bGQybGtkR2dnUFNCbExteHBibVYzYVdSMGFDa3NJR1V1WkdGemFGTnBlbVVnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVrWVhOb1UybDZaU0E5SUdVdVpHRnphRk5wZW1VcExDQmxMbWRoY0ZOcGVtVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNW5ZWEJUYVhwbElEMGdaUzVuWVhCVGFYcGxLU3dnWlM1elkyRnNaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbk5qWVd4bElEMGdaUzV6WTJGc1pTa3NJR1V1Y0c5c2VXZHZiazltWm5ObGRDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuQnZiSGxuYjI1UFptWnpaWFFnUFNCbExuQnZiSGxuYjI1UFptWnpaWFFwTENCbExuQnZiSGxuYjI1UFptWnpaWFJHWVdOMGIzSWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXdiMng1WjI5dVQyWm1jMlYwUm1GamRHOXlJRDBnWlM1d2IyeDVaMjl1VDJabWMyVjBSbUZqZEc5eUtTd2daUzV3YjJ4NVoyOXVUMlptYzJWMFZXNXBkSE1nSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV3YjJ4NVoyOXVUMlptYzJWMFZXNXBkSE1nUFNCbExuQnZiSGxuYjI1UFptWnpaWFJWYm1sMGN5a3NJR1V1WkdsMGFHVnlhVzVuSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WkdsMGFHVnlhVzVuSUQwZ1pTNWthWFJvWlhKcGJtY3BMQ0JsTG1Gc2NHaGhWRzlEYjNabGNtRm5aU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbUZzY0doaFZHOURiM1psY21GblpTQTlJR1V1WVd4d2FHRlViME52ZG1WeVlXZGxLU3dnWlM1d2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1d2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFZ1BTQmxMbkJ5WlcxMWJIUnBjR3hwWldSQmJIQm9ZU2tzSUdVdVptOXlZMlZUYVc1bmJHVlFZWE56SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1Wm05eVkyVlRhVzVuYkdWUVlYTnpJRDBnWlM1bWIzSmpaVk5wYm1kc1pWQmhjM01wTENCbExuWnBjMmxpYkdVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1MmFYTnBZbXhsSUQwZ1pTNTJhWE5wWW14bEtTd2daUzUwYjI1bFRXRndjR1ZrSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZEc5dVpVMWhjSEJsWkNBOUlHVXVkRzl1WlUxaGNIQmxaQ2tzSUdVdWRYTmxja1JoZEdFZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1MWMyVnlSR0YwWVNBOUlHVXVkWE5sY2tSaGRHRXBMQ0JsTG5abGNuUmxlRU52Ykc5eWN5QWhQVDBnZG05cFpDQXdJQ1ltSUNoMGVYQmxiMllnWlM1MlpYSjBaWGhEYjJ4dmNuTWdQVDBnSW01MWJXSmxjaUlnUHlCcExuWmxjblJsZUVOdmJHOXljeUE5SUdVdWRtVnlkR1Y0UTI5c2IzSnpJRDRnTUNBNklHa3VkbVZ5ZEdWNFEyOXNiM0p6SUQwZ1pTNTJaWEowWlhoRGIyeHZjbk1wTENCbExuVnVhV1p2Y20xeklDRTlQU0IyYjJsa0lEQXBJR1p2Y2loc1pYUWdjaUJwYmlCbExuVnVhV1p2Y20xektYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0JsTG5WdWFXWnZjbTF6VzNKZE93b2dJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29hUzUxYm1sbWIzSnRjMXR5WFNBOUlIdDlMQ0JoTG5SNWNHVXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWRDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVM1MWJtbG1iM0p0YzF0eVhTNTJZV3gxWlNBOUlHNG9ZUzUyWVd4MVpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKaklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwTG5WdWFXWnZjbTF6VzNKZExuWmhiSFZsSUQwZ2JtVjNJSEJsS0NrdWMyVjBTR1Y0S0dFdWRtRnNkV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlkaklpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa3VkVzVwWm05eWJYTmJjbDB1ZG1Gc2RXVWdQU0J1WlhjZ1dpZ3BMbVp5YjIxQmNuSmhlU2hoTG5aaGJIVmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0luWXpJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExuVnVhV1p2Y20xelczSmRMblpoYkhWbElEMGdibVYzSUVFb0tTNW1jbTl0UVhKeVlYa29ZUzUyWVd4MVpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKMk5DSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVM1MWJtbG1iM0p0YzF0eVhTNTJZV3gxWlNBOUlHNWxkeUJxWlNncExtWnliMjFCY25KaGVTaGhMblpoYkhWbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSW0weklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwTG5WdWFXWnZjbTF6VzNKZExuWmhiSFZsSUQwZ2JtVjNJRWhsS0NrdVpuSnZiVUZ5Y21GNUtHRXVkbUZzZFdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpYlRRaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2t1ZFc1cFptOXliWE5iY2wwdWRtRnNkV1VnUFNCdVpYY2dlbVVvS1M1bWNtOXRRWEp5WVhrb1lTNTJZV3gxWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa3VkVzVwWm05eWJYTmJjbDB1ZG1Gc2RXVWdQU0JoTG5aaGJIVmxPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2hsTG1SbFptbHVaWE1nSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVrWldacGJtVnpJRDBnWlM1a1pXWnBibVZ6S1N3Z1pTNTJaWEowWlhoVGFHRmtaWElnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzUyWlhKMFpYaFRhR0ZrWlhJZ1BTQmxMblpsY25SbGVGTm9ZV1JsY2lrc0lHVXVabkpoWjIxbGJuUlRhR0ZrWlhJZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1bWNtRm5iV1Z1ZEZOb1lXUmxjaUE5SUdVdVpuSmhaMjFsYm5SVGFHRmtaWElwTENCbExtZHNjMnhXWlhKemFXOXVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VaMnh6YkZabGNuTnBiMjRnUFNCbExtZHNjMnhXWlhKemFXOXVLU3dnWlM1bGVIUmxibk5wYjI1eklDRTlQU0IyYjJsa0lEQXBJR1p2Y2loc1pYUWdjaUJwYmlCbExtVjRkR1Z1YzJsdmJuTXBhUzVsZUhSbGJuTnBiMjV6VzNKZElEMGdaUzVsZUhSbGJuTnBiMjV6VzNKZE93b2dJQ0FnSUNBZ0lHbG1JQ2hsTG14cFoyaDBjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbXhwWjJoMGN5QTlJR1V1YkdsbmFIUnpLU3dnWlM1amJHbHdjR2x1WnlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1Oc2FYQndhVzVuSUQwZ1pTNWpiR2x3Y0dsdVp5a3NJR1V1YzJsNlpTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuTnBlbVVnUFNCbExuTnBlbVVwTENCbExuTnBlbVZCZEhSbGJuVmhkR2x2YmlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5OcGVtVkJkSFJsYm5WaGRHbHZiaUE5SUdVdWMybDZaVUYwZEdWdWRXRjBhVzl1S1N3Z1pTNXRZWEFnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV0WVhBZ1BTQnVLR1V1YldGd0tTa3NJR1V1YldGMFkyRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3ViV0YwWTJGd0lEMGdiaWhsTG0xaGRHTmhjQ2twTENCbExtRnNjR2hoVFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVlXeHdhR0ZOWVhBZ1BTQnVLR1V1WVd4d2FHRk5ZWEFwS1N3Z1pTNWlkVzF3VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVluVnRjRTFoY0NBOUlHNG9aUzVpZFcxd1RXRndLU2tzSUdVdVluVnRjRk5qWVd4bElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVluVnRjRk5qWVd4bElEMGdaUzVpZFcxd1UyTmhiR1VwTENCbExtNXZjbTFoYkUxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtNXZjbTFoYkUxaGNDQTlJRzRvWlM1dWIzSnRZV3hOWVhBcEtTd2daUzV1YjNKdFlXeE5ZWEJVZVhCbElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUdVdWJtOXliV0ZzVFdGd1ZIbHdaU2tzSUdVdWJtOXliV0ZzVTJOaGJHVWdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHVXVibTl5YldGc1UyTmhiR1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lFRnljbUY1TG1selFYSnlZWGtvY2lrZ1BUMDlJQ0V4SUNZbUlDaHlJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2l3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJS0lDQWdJQ0FnSUNBZ0lDQWdYU2tzSUdrdWJtOXliV0ZzVTJOaGJHVWdQU0J1WlhjZ1dpZ3BMbVp5YjIxQmNuSmhlU2h5S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WkdsemNHeGhZMlZ0Wlc1MFRXRndJRDBnYmlobExtUnBjM0JzWVdObGJXVnVkRTFoY0NrcExDQmxMbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVWdQU0JsTG1ScGMzQnNZV05sYldWdWRGTmpZV3hsS1N3Z1pTNWthWE53YkdGalpXMWxiblJDYVdGeklDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5a3NJR1V1Y205MVoyaHVaWE56VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWNtOTFaMmh1WlhOelRXRndJRDBnYmlobExuSnZkV2RvYm1WemMwMWhjQ2twTENCbExtMWxkR0ZzYm1WemMwMWhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbTFsZEdGc2JtVnpjMDFoY0NBOUlHNG9aUzV0WlhSaGJHNWxjM05OWVhBcEtTd2daUzVsYldsemMybDJaVTFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1WdGFYTnphWFpsVFdGd0lEMGdiaWhsTG1WdGFYTnphWFpsVFdGd0tTa3NJR1V1WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVsYldsemMybDJaVWx1ZEdWdWMybDBlU0E5SUdVdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrcExDQmxMbk53WldOMWJHRnlUV0Z3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YzNCbFkzVnNZWEpOWVhBZ1BTQnVLR1V1YzNCbFkzVnNZWEpOWVhBcEtTd2daUzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0lEMGdiaWhsTG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0tTa3NJR1V1YzNCbFkzVnNZWEpEYjJ4dmNrMWhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbk53WldOMWJHRnlRMjlzYjNKTllYQWdQU0J1S0dVdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0NrcExDQmxMbVZ1ZGsxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtVnVkazFoY0NBOUlHNG9aUzVsYm5aTllYQXBLU3dnWlM1bGJuWk5ZWEJKYm5SbGJuTnBkSGtnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVsYm5aTllYQkpiblJsYm5OcGRIa2dQU0JsTG1WdWRrMWhjRWx1ZEdWdWMybDBlU2tzSUdVdWNtVm1iR1ZqZEdsMmFYUjVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VjbVZtYkdWamRHbDJhWFI1SUQwZ1pTNXlaV1pzWldOMGFYWnBkSGtwTENCbExuSmxabkpoWTNScGIyNVNZWFJwYnlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5KbFpuSmhZM1JwYjI1U1lYUnBieUE5SUdVdWNtVm1jbUZqZEdsdmJsSmhkR2x2S1N3Z1pTNXNhV2RvZEUxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExteHBaMmgwVFdGd0lEMGdiaWhsTG14cFoyaDBUV0Z3S1Nrc0lHVXViR2xuYUhSTllYQkpiblJsYm5OcGRIa2dJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTQTlJR1V1YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtwTENCbExtRnZUV0Z3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WVc5TllYQWdQU0J1S0dVdVlXOU5ZWEFwS1N3Z1pTNWhiMDFoY0VsdWRHVnVjMmwwZVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1GdlRXRndTVzUwWlc1emFYUjVJRDBnWlM1aGIwMWhjRWx1ZEdWdWMybDBlU2tzSUdVdVozSmhaR2xsYm5STllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNW5jbUZrYVdWdWRFMWhjQ0E5SUc0b1pTNW5jbUZrYVdWdWRFMWhjQ2twTENCbExtTnNaV0Z5WTI5aGRFMWhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbU5zWldGeVkyOWhkRTFoY0NBOUlHNG9aUzVqYkdWaGNtTnZZWFJOWVhBcEtTd2daUzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhBZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQWdQU0J1S0dVdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndLU2tzSUdVdVkyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVkyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd0lEMGdiaWhsTG1Oc1pXRnlZMjloZEU1dmNtMWhiRTFoY0NrcExDQmxMbU5zWldGeVkyOWhkRTV2Y20xaGJGTmpZV3hsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WTJ4bFlYSmpiMkYwVG05eWJXRnNVMk5oYkdVZ1BTQnVaWGNnV2lncExtWnliMjFCY25KaGVTaGxMbU5zWldGeVkyOWhkRTV2Y20xaGJGTmpZV3hsS1Nrc0lHVXVhWEpwWkdWelkyVnVZMlZOWVhBZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1cGNtbGtaWE5qWlc1alpVMWhjQ0E5SUc0b1pTNXBjbWxrWlhOalpXNWpaVTFoY0NrcExDQmxMbWx5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEFnUFNCdUtHVXVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhBcEtTd2daUzUwY21GdWMyMXBjM05wYjI1TllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNTBjbUZ1YzIxcGMzTnBiMjVOWVhBZ1BTQnVLR1V1ZEhKaGJuTnRhWE56YVc5dVRXRndLU2tzSUdVdWRHaHBZMnR1WlhOelRXRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VkR2hwWTJ0dVpYTnpUV0Z3SUQwZ2JpaGxMblJvYVdOcmJtVnpjMDFoY0NrcExDQmxMbUZ1YVhOdmRISnZjSGxOWVhBZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1aGJtbHpiM1J5YjNCNVRXRndJRDBnYmlobExtRnVhWE52ZEhKdmNIbE5ZWEFwS1N3Z1pTNXphR1ZsYmtOdmJHOXlUV0Z3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YzJobFpXNURiMnh2Y2sxaGNDQTlJRzRvWlM1emFHVmxia052Ykc5eVRXRndLU2tzSUdVdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhBZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0NBOUlHNG9aUzV6YUdWbGJsSnZkV2RvYm1WemMwMWhjQ2twTENCcE93b2dJQ0FnZlFvZ0lDQWdjMlYwVkdWNGRIVnlaWE1vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJsZUhSMWNtVnpJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJqY21WaGRHVk5ZWFJsY21saGJFWnliMjFVZVhCbEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1UyaGhaRzkzVFdGMFpYSnBZV3c2SUdOakxBb2dJQ0FnSUNBZ0lDQWdJQ0JUY0hKcGRHVk5ZWFJsY21saGJEb2daV0VzQ2lBZ0lDQWdJQ0FnSUNBZ0lGSmhkMU5vWVdSbGNrMWhkR1Z5YVdGc09pQnNZeXdLSUNBZ0lDQWdJQ0FnSUNBZ1UyaGhaR1Z5VFdGMFpYSnBZV3c2SUdwMExBb2dJQ0FnSUNBZ0lDQWdJQ0JRYjJsdWRITk5ZWFJsY21saGJEb2dibUVzQ2lBZ0lDQWdJQ0FnSUNBZ0lFMWxjMmhRYUhsemFXTmhiRTFoZEdWeWFXRnNPaUJvWXl3S0lDQWdJQ0FnSUNBZ0lDQWdUV1Z6YUZOMFlXNWtZWEprVFdGMFpYSnBZV3c2SUdSaExBb2dJQ0FnSUNBZ0lDQWdJQ0JOWlhOb1VHaHZibWROWVhSbGNtbGhiRG9nZFdNc0NpQWdJQ0FnSUNBZ0lDQWdJRTFsYzJoVWIyOXVUV0YwWlhKcFlXdzZJR1JqTEFvZ0lDQWdJQ0FnSUNBZ0lDQk5aWE5vVG05eWJXRnNUV0YwWlhKcFlXdzZJR1pqTEFvZ0lDQWdJQ0FnSUNBZ0lDQk5aWE5vVEdGdFltVnlkRTFoZEdWeWFXRnNPaUJ3WXl3S0lDQWdJQ0FnSUNBZ0lDQWdUV1Z6YUVSbGNIUm9UV0YwWlhKcFlXdzZJRkZ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQk5aWE5vUkdsemRHRnVZMlZOWVhSbGNtbGhiRG9nYW5Jc0NpQWdJQ0FnSUNBZ0lDQWdJRTFsYzJoQ1lYTnBZMDFoZEdWeWFXRnNPaUJUYml3S0lDQWdJQ0FnSUNBZ0lDQWdUV1Z6YUUxaGRHTmhjRTFoZEdWeWFXRnNPaUJ0WXl3S0lDQWdJQ0FnSUNBZ0lDQWdUR2x1WlVSaGMyaGxaRTFoZEdWeWFXRnNPaUJuWXl3S0lDQWdJQ0FnSUNBZ0lDQWdUR2x1WlVKaGMybGpUV0YwWlhKcFlXdzZJSGQwTEFvZ0lDQWdJQ0FnSUNBZ0lDQk5ZWFJsY21saGJEb2dZblFLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RGdGxYVHNLSUNBZ0lIMEtmU3dnWjJFZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0J6ZEdGMGFXTWdaR1ZqYjJSbFZHVjRkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQlVaWGgwUkdWamIyUmxjaUE4SUNKMUlpa2djbVYwZFhKdUlHNWxkeUJVWlhoMFJHVmpiMlJsY2lncExtUmxZMjlrWlNobEtUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlDSWlPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBc0lHa2dQU0JsTG14bGJtZDBhRHNnYmlBOElHazdJRzRyS3lsMElDczlJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWlZ0dVhTazdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaGxjMk5oY0dVb2RDa3BPd29nSUNBZ0lDQWdJSDBnWTJGMFkyZ2dJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHVjRkSEpoWTNSVmNteENZWE5sS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXViR0Z6ZEVsdVpHVjRUMllvSWk4aUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDQTlQVDBnTFRFZ1B5QWlMaThpSURvZ1pTNXpiR2xqWlNnd0xDQjBJQ3NnTVNrN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ2NtVnpiMngyWlZWU1RDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJsSUNFOUlDSnpkSEpwYm1jaUlIeDhJR1VnUFQwOUlDSWlJRDhnSWlJZ09pQW9MMTVvZEhSd2N6ODZYQzljTHk5cExuUmxjM1FvZENrZ0ppWWdMMTVjTHk4dWRHVnpkQ2hsS1NBbUppQW9kQ0E5SUhRdWNtVndiR0ZqWlNndktGNW9kSFJ3Y3o4NlhDOWNMMXRlWEM5ZEt5a3VLaTlwTENBaUpERWlLU2tzSUM5ZUtHaDBkSEJ6UHpvcFAxd3ZYQzh2YVM1MFpYTjBLR1VwSUh4OElDOWVaR0YwWVRvdUtpd3VLaVF2YVM1MFpYTjBLR1VwSUh4OElDOWVZbXh2WWpvdUtpUXZhUzUwWlhOMEtHVXBJRDhnWlNBNklIUWdLeUJsS1RzS0lDQWdJSDBLZlN3Z1JHTWdQU0JqYkdGemN5QmxlSFJsYm1SeklFZGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMGx1YzNSaGJtTmxaRUoxWm1abGNrZGxiMjFsZEhKNUlEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSkpibk4wWVc1alpXUkNkV1ptWlhKSFpXOXRaWFJ5ZVNJc0lIUm9hWE11YVc1emRHRnVZMlZEYjNWdWRDQTlJREVnTHlBd093b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVhVzV6ZEdGdVkyVkRiM1Z1ZENBOUlHVXVhVzV6ZEdGdVkyVkRiM1Z1ZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhOMWNHVnlMblJ2U2xOUFRpZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbWx1YzNSaGJtTmxRMjkxYm5RZ1BTQjBhR2x6TG1sdWMzUmhibU5sUTI5MWJuUXNJR1V1YVhOSmJuTjBZVzVqWldSQ2RXWm1aWEpIWlc5dFpYUnllU0E5SUNFd0xDQmxPd29nSUNBZ2ZRcDlMQ0JPWXlBOUlHTnNZWE56SUdWNGRHVnVaSE1nUkhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTazdDaUFnSUNCOUNpQWdJQ0JzYjJGa0tHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNc0lHRWdQU0J1WlhjZ2NtNG9jaTV0WVc1aFoyVnlLVHNLSUNBZ0lDQWdJQ0JoTG5ObGRGQmhkR2dvY2k1d1lYUm9LU3dnWVM1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0hJdWNtVnhkV1Z6ZEVobFlXUmxjaWtzSUdFdWMyVjBWMmwwYUVOeVpXUmxiblJwWVd4ektISXVkMmwwYUVOeVpXUmxiblJwWVd4ektTd2dZUzVzYjJGa0tHVXNJR1oxYm1OMGFXOXVLRzhwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRb2NpNXdZWEp6WlNoS1UwOU9MbkJoY25ObEtHOHBLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnUHlCcEtHTXBJRG9nWTI5dWMyOXNaUzVsY25KdmNpaGpLU3dnY2k1dFlXNWhaMlZ5TG1sMFpXMUZjbkp2Y2lobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwc0lHNHNJR2twT3dvZ0lDQWdmUW9nSUNBZ2NHRnljMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2UzMHNJRzRnUFNCN2ZUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnBLR1lzSUcwcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUmJiVjBnSVQwOUlIWnZhV1FnTUNrZ2NtVjBkWEp1SUhSYmJWMDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm5JRDBnWmk1cGJuUmxjbXhsWVhabFpFSjFabVpsY25OYmJWMHNJSEFnUFNCeUtHWXNJR2N1WW5WbVptVnlLU3dnZGlBOUlHdHBLR2N1ZEhsd1pTd2djQ2tzSUhnZ1BTQnVaWGNnU1hNb2Rpd2daeTV6ZEhKcFpHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZUM1MWRXbGtJRDBnWnk1MWRXbGtMQ0IwVzIxZElEMGdlQ3dnZURzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NpaG1MQ0J0S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodVcyMWRJQ0U5UFNCMmIybGtJREFwSUhKbGRIVnliaUJ1VzIxZE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJR1l1WVhKeVlYbENkV1ptWlhKelcyMWRMQ0J3SUQwZ2JtVjNJRlZwYm5Rek1rRnljbUY1S0djcExtSjFabVpsY2pzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWJiVjBnUFNCd0xDQndPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJR1V1YVhOSmJuTjBZVzVqWldSQ2RXWm1aWEpIWlc5dFpYUnllU0EvSUc1bGR5QkVZeUE2SUc1bGR5QkhaU3dnYnlBOUlHVXVaR0YwWVM1cGJtUmxlRHNLSUNBZ0lDQWdJQ0JwWmlBb2J5QWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtSUQwZ2Eya29ieTUwZVhCbExDQnZMbUZ5Y21GNUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWVM1elpYUkpibVJsZUNodVpYY2daWFFvWml3Z01Ta3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJR1V1WkdGMFlTNWhkSFJ5YVdKMWRHVnpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdaaUJwYmlCaktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMGdQU0JqVzJaZExDQmZPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9iUzVwYzBsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5UVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaeUE5SUdrb1pTNWtZWFJoTENCdExtUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWHlBOUlHNWxkeUJSYVNobkxDQnRMbWwwWlcxVGFYcGxMQ0J0TG05bVpuTmxkQ3dnYlM1dWIzSnRZV3hwZW1Wa0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbklEMGdhMmtvYlM1MGVYQmxMQ0J0TG1GeWNtRjVLU3dnY0NBOUlHMHVhWE5KYm5OMFlXNWpaV1JDZFdabVpYSkJkSFJ5YVdKMWRHVWdQeUIxYVNBNklHVjBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYeUE5SUc1bGR5QndLR2NzSUcwdWFYUmxiVk5wZW1Vc0lHMHVibTl5YldGc2FYcGxaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYlM1dVlXMWxJQ0U5UFNCMmIybGtJREFnSmlZZ0tGOHVibUZ0WlNBOUlHMHVibUZ0WlNrc0lHMHVkWE5oWjJVZ0lUMDlJSFp2YVdRZ01DQW1KaUJmTG5ObGRGVnpZV2RsS0cwdWRYTmhaMlVwTENCdExuVndaR0YwWlZKaGJtZGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tGOHVkWEJrWVhSbFVtRnVaMlV1YjJabWMyVjBJRDBnYlM1MWNHUmhkR1ZTWVc1blpTNXZabVp6WlhRc0lGOHVkWEJrWVhSbFVtRnVaMlV1WTI5MWJuUWdQU0J0TG5Wd1pHRjBaVkpoYm1kbExtTnZkVzUwS1N3Z1lTNXpaWFJCZEhSeWFXSjFkR1VvWml3Z1h5azdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCc0lEMGdaUzVrWVhSaExtMXZjbkJvUVhSMGNtbGlkWFJsY3pzS0lDQWdJQ0FnSUNCcFppQW9iQ2tnWm05eUtHeGxkQ0JtSUdsdUlHd3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiU0E5SUd4YlpsMHNJRjhnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JuSUQwZ01Dd2djQ0E5SUcwdWJHVnVaM1JvT3lCbklEd2djRHNnWnlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2JWdG5YU3dnZURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJMbWx6U1c1MFpYSnNaV0YyWldSQ2RXWm1aWEpCZEhSeWFXSjFkR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVNBOUlHa29aUzVrWVhSaExDQjJMbVJoZEdFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGdnUFNCdVpYY2dVV2tvZVN3Z2RpNXBkR1Z0VTJsNlpTd2dkaTV2Wm1aelpYUXNJSFl1Ym05eWJXRnNhWHBsWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I1SUQwZ2Eya29kaTUwZVhCbExDQjJMbUZ5Y21GNUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0SUQwZ2JtVjNJR1YwS0hrc0lIWXVhWFJsYlZOcGVtVXNJSFl1Ym05eWJXRnNhWHBsWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMkxtNWhiV1VnSVQwOUlIWnZhV1FnTUNBbUppQW9lQzV1WVcxbElEMGdkaTV1WVcxbEtTd2dYeTV3ZFhOb0tIZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR0V1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpXMlpkSUQwZ1h6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaUzVrWVhSaExtMXZjbkJvVkdGeVoyVjBjMUpsYkdGMGFYWmxJQ1ltSUNoaExtMXZjbkJvVkdGeVoyVjBjMUpsYkdGMGFYWmxJRDBnSVRBcE93b2dJQ0FnSUNBZ0lHeGxkQ0IxSUQwZ1pTNWtZWFJoTG1keWIzVndjeUI4ZkNCbExtUmhkR0V1WkhKaGQyTmhiR3h6SUh4OElHVXVaR0YwWVM1dlptWnpaWFJ6T3dvZ0lDQWdJQ0FnSUdsbUlDaDFJQ0U5UFNCMmIybGtJREFwSUdadmNpaHNaWFFnWmlBOUlEQXNJRzBnUFNCMUxteGxibWQwYURzZ1ppQWhQVDBnYlRzZ0t5dG1LWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCMVcyWmRPd29nSUNBZ0lDQWdJQ0FnSUNCaExtRmtaRWR5YjNWd0tGOHVjM1JoY25Rc0lGOHVZMjkxYm5Rc0lGOHViV0YwWlhKcFlXeEpibVJsZUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ1pTNWtZWFJoTG1KdmRXNWthVzVuVTNCb1pYSmxPd29nSUNBZ0lDQWdJR2xtSUNoa0lDRTlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCdVpYY2dRVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pDNWpaVzUwWlhJZ0lUMDlJSFp2YVdRZ01DQW1KaUJtTG1aeWIyMUJjbkpoZVNoa0xtTmxiblJsY2lrc0lHRXVZbTkxYm1ScGJtZFRjR2hsY21VZ1BTQnVaWGNnV1hRb1ppd2daQzV5WVdScGRYTXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV1WVcxbElDWW1JQ2hoTG01aGJXVWdQU0JsTG01aGJXVXBMQ0JsTG5WelpYSkVZWFJoSUNZbUlDaGhMblZ6WlhKRVlYUmhJRDBnWlM1MWMyVnlSR0YwWVNrc0lHRTdDaUFnSUNCOUNuMHNJSEIxSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJFZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobEtUc0tJQ0FnSUgwS0lDQWdJR3h2WVdRb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJR3hsZENCeUlEMGdkR2hwY3l3Z1lTQTlJSFJvYVhNdWNHRjBhQ0E5UFQwZ0lpSWdQeUJuWVM1bGVIUnlZV04wVlhKc1FtRnpaU2hsS1NBNklIUm9hWE11Y0dGMGFEc0tJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyOTFjbU5sVUdGMGFDQTlJSFJvYVhNdWNtVnpiM1Z5WTJWUVlYUm9JSHg4SUdFN0NpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCdVpYY2djbTRvZEdocGN5NXRZVzVoWjJWeUtUc0tJQ0FnSUNBZ0lDQnZMbk5sZEZCaGRHZ29kR2hwY3k1d1lYUm9LU3dnYnk1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0hSb2FYTXVjbVZ4ZFdWemRFaGxZV1JsY2lrc0lHOHVjMlYwVjJsMGFFTnlaV1JsYm5ScFlXeHpLSFJvYVhNdWQybDBhRU55WldSbGJuUnBZV3h6S1N3Z2J5NXNiMkZrS0dVc0lHWjFibU4wYVc5dUtHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdWRXeHNPd29nSUNBZ0lDQWdJQ0FnSUNCMGNua2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiQ0E5SUVwVFQwNHVjR0Z5YzJVb1l5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0hVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dJVDA5SUhadmFXUWdNQ0FtSmlCcEtIVXBMQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlRwUFltcGxZM1JNYjJGa1pYSTZJRU5oYmlkMElIQmhjbk5sSUNJZ0t5QmxJQ3NnSWk0aUxDQjFMbTFsYzNOaFoyVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ2JDNXRaWFJoWkdGMFlUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZ2dQVDA5SUhadmFXUWdNQ0I4ZkNCb0xuUjVjR1VnUFQwOUlIWnZhV1FnTUNCOGZDQm9MblI1Y0dVdWRHOU1iM2RsY2tOaGMyVW9LU0E5UFQwZ0ltZGxiMjFsZEhKNUlpa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0FoUFQwZ2RtOXBaQ0F3SUNZbUlHa29ibVYzSUVWeWNtOXlLQ0pVU0ZKRlJTNVBZbXBsWTNSTWIyRmtaWEk2SUVOaGJpZDBJR3h2WVdRZ0lpQXJJR1VwS1N3Z1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVUMkpxWldOMFRHOWhaR1Z5T2lCRFlXNG5kQ0JzYjJGa0lDSWdLeUJsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0J5TG5CaGNuTmxLR3dzSUhRcE93b2dJQ0FnSUNBZ0lIMHNJRzRzSUdrcE93b2dJQ0FnZlFvZ0lDQWdZWE41Ym1NZ2JHOWhaRUZ6ZVc1aktHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXNJR2tnUFNCMGFHbHpMbkJoZEdnZ1BUMDlJQ0lpSUQ4Z1oyRXVaWGgwY21GamRGVnliRUpoYzJVb1pTa2dPaUIwYUdsekxuQmhkR2c3Q2lBZ0lDQWdJQ0FnZEdocGN5NXlaWE52ZFhKalpWQmhkR2dnUFNCMGFHbHpMbkpsYzI5MWNtTmxVR0YwYUNCOGZDQnBPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdibVYzSUhKdUtIUm9hWE11YldGdVlXZGxjaWs3Q2lBZ0lDQWdJQ0FnY2k1elpYUlFZWFJvS0hSb2FYTXVjR0YwYUNrc0lISXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaDBhR2x6TG5KbGNYVmxjM1JJWldGa1pYSXBMQ0J5TG5ObGRGZHBkR2hEY21Wa1pXNTBhV0ZzY3loMGFHbHpMbmRwZEdoRGNtVmtaVzUwYVdGc2N5azdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQmhkMkZwZENCeUxteHZZV1JCYzNsdVl5aGxMQ0IwS1N3Z2J5QTlJRXBUVDA0dWNHRnljMlVvWVNrc0lHTWdQU0J2TG0xbGRHRmtZWFJoT3dvZ0lDQWdJQ0FnSUdsbUlDaGpJRDA5UFNCMmIybGtJREFnZkh3Z1l5NTBlWEJsSUQwOVBTQjJiMmxrSURBZ2ZId2dZeTUwZVhCbExuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlDSm5aVzl0WlhSeWVTSXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVQySnFaV04wVEc5aFpHVnlPaUJEWVc0bmRDQnNiMkZrSUNJZ0t5QmxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWGRoYVhRZ2JpNXdZWEp6WlVGemVXNWpLRzhwT3dvZ0lDQWdmUW9nSUNBZ2NHRnljMlVvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1d1lYSnpaVUZ1YVcxaGRHbHZibk1vWlM1aGJtbHRZWFJwYjI1ektTd2dhU0E5SUhSb2FYTXVjR0Z5YzJWVGFHRndaWE1vWlM1emFHRndaWE1wTENCeUlEMGdkR2hwY3k1d1lYSnpaVWRsYjIxbGRISnBaWE1vWlM1blpXOXRaWFJ5YVdWekxDQnBLU3dnWVNBOUlIUm9hWE11Y0dGeWMyVkpiV0ZuWlhNb1pTNXBiV0ZuWlhNc0lHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCMElDRTlQU0IyYjJsa0lEQWdKaVlnZENoc0tUc0tJQ0FnSUNBZ0lDQjlLU3dnYnlBOUlIUm9hWE11Y0dGeWMyVlVaWGgwZFhKbGN5aGxMblJsZUhSMWNtVnpMQ0JoS1N3Z1l5QTlJSFJvYVhNdWNHRnljMlZOWVhSbGNtbGhiSE1vWlM1dFlYUmxjbWxoYkhNc0lHOHBMQ0JzSUQwZ2RHaHBjeTV3WVhKelpVOWlhbVZqZENobExtOWlhbVZqZEN3Z2Npd2dZeXdnYnl3Z2Jpa3NJR2dnUFNCMGFHbHpMbkJoY25ObFUydGxiR1YwYjI1ektHVXVjMnRsYkdWMGIyNXpMQ0JzS1RzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1aWFXNWtVMnRsYkdWMGIyNXpLR3dzSUdncExDQjBJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhVZ1BTQWhNVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCa0lHbHVJR0VwYVdZZ0tHRmJaRjB1WkdGMFlTQnBibk4wWVc1alpXOW1JRWhVVFV4SmJXRm5aVVZzWlcxbGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFVnUFNBaE1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhVZ1BUMDlJQ0V4SUNZbUlIUW9iQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJzT3dvZ0lDQWdmUW9nSUNBZ1lYTjVibU1nY0dGeWMyVkJjM2x1WXlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5CaGNuTmxRVzVwYldGMGFXOXVjeWhsTG1GdWFXMWhkR2x2Ym5NcExDQnVJRDBnZEdocGN5NXdZWEp6WlZOb1lYQmxjeWhsTG5Ob1lYQmxjeWtzSUdrZ1BTQjBhR2x6TG5CaGNuTmxSMlZ2YldWMGNtbGxjeWhsTG1kbGIyMWxkSEpwWlhNc0lHNHBMQ0J5SUQwZ1lYZGhhWFFnZEdocGN5NXdZWEp6WlVsdFlXZGxjMEZ6ZVc1aktHVXVhVzFoWjJWektTd2dZU0E5SUhSb2FYTXVjR0Z5YzJWVVpYaDBkWEpsY3lobExuUmxlSFIxY21WekxDQnlLU3dnYnlBOUlIUm9hWE11Y0dGeWMyVk5ZWFJsY21saGJITW9aUzV0WVhSbGNtbGhiSE1zSUdFcExDQmpJRDBnZEdocGN5NXdZWEp6WlU5aWFtVmpkQ2hsTG05aWFtVmpkQ3dnYVN3Z2J5d2dZU3dnZENrc0lHd2dQU0IwYUdsekxuQmhjbk5sVTJ0bGJHVjBiMjV6S0dVdWMydGxiR1YwYjI1ekxDQmpLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aWFXNWtVMnRsYkdWMGIyNXpLR01zSUd3cExDQmpPd29nSUNBZ2ZRb2dJQ0FnY0dGeWMyVlRhR0Z3WlhNb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdlMzA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdJVDA5SUhadmFXUWdNQ2tnWm05eUtHeGxkQ0J1SUQwZ01Dd2dhU0E5SUdVdWJHVnVaM1JvT3lCdUlEd2dhVHNnYmlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0J1WlhjZ1JtNG9LUzVtY205dFNsTlBUaWhsVzI1ZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEZ0eUxuVjFhV1JkSUQwZ2Nqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUTdDaUFnSUNCOUNpQWdJQ0J3WVhKelpWTnJaV3hsZEc5dWN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCN2ZTd2dhU0E5SUh0OU93b2dJQ0FnSUNBZ0lHbG1JQ2gwTG5SeVlYWmxjbk5sS0daMWJtTjBhVzl1S0hJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY2k1cGMwSnZibVVnSmlZZ0tHbGJjaTUxZFdsa1hTQTlJSElwT3dvZ0lDQWdJQ0FnSUgwcExDQmxJQ0U5UFNCMmIybGtJREFwSUdadmNpaHNaWFFnY2lBOUlEQXNJR0VnUFNCbExteGxibWQwYURzZ2NpQThJR0U3SUhJckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnYm1WM0lFOXZLQ2t1Wm5KdmJVcFRUMDRvWlZ0eVhTd2dhU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHNWJieTUxZFdsa1hTQTlJRzg3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1T3dvZ0lDQWdmUW9nSUNBZ2NHRnljMlZIWlc5dFpYUnlhV1Z6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSHQ5T3dvZ0lDQWdJQ0FnSUdsbUlDaGxJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVaWGNnVG1NN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdjaUE5SURBc0lHRWdQU0JsTG14bGJtZDBhRHNnY2lBOElHRTdJSElyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdieXdnWXlBOUlHVmJjbDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29ZeTUwZVhCbEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSkNkV1ptWlhKSFpXOXRaWFJ5ZVNJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVNXNXpkR0Z1WTJWa1FuVm1abVZ5UjJWdmJXVjBjbmtpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2SUQwZ2FTNXdZWEp6WlNoaktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXk1MGVYQmxJR2x1SUhKMUlEOGdieUE5SUhKMVcyTXVkSGx3WlYwdVpuSnZiVXBUVDA0b1l5d2dkQ2tnT2lCamIyNXpiMnhsTG5kaGNtNG9ZRlJJVWtWRkxrOWlhbVZqZEV4dllXUmxjam9nVlc1emRYQndiM0owWldRZ1oyVnZiV1YwY25rZ2RIbHdaU0FpSkh0akxuUjVjR1Y5SW1BcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5NTFkV2xrSUQwZ1l5NTFkV2xrTENCakxtNWhiV1VnSVQwOUlIWnZhV1FnTUNBbUppQW9ieTV1WVcxbElEMGdZeTV1WVcxbEtTd2dZeTUxYzJWeVJHRjBZU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHZMblZ6WlhKRVlYUmhJRDBnWXk1MWMyVnlSR0YwWVNrc0lHNWJZeTUxZFdsa1hTQTlJRzg3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNDdDaUFnSUNCOUNpQWdJQ0J3WVhKelpVMWhkR1Z5YVdGc2N5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCN2ZTd2dhU0E5SUh0OU93b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0J1WlhjZ1ZXTTdDaUFnSUNBZ0lDQWdJQ0FnSUhJdWMyVjBWR1Y0ZEhWeVpYTW9kQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREFzSUc4Z1BTQmxMbXhsYm1kMGFEc2dZU0E4SUc4N0lHRXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJR1ZiWVYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVcyTXVkWFZwWkYwZ1BUMDlJSFp2YVdRZ01DQW1KaUFvYmx0akxuVjFhV1JkSUQwZ2NpNXdZWEp6WlNoaktTa3NJR2xiWXk1MWRXbGtYU0E5SUc1Yll5NTFkV2xrWFRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVHNLSUNBZ0lIMEtJQ0FnSUhCaGNuTmxRVzVwYldGMGFXOXVjeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCN2ZUc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBaFBUMGdkbTlwWkNBd0tTQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2daUzVzWlc1bmRHZzdJRzRyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaVnR1WFN3Z2NpQTlJR2x6TG5CaGNuTmxLR2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBXM0l1ZFhWcFpGMGdQU0J5T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZERzS0lDQWdJSDBLSUNBZ0lIQmhjbk5sU1cxaFoyVnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE1zSUdrZ1BTQjdmU3dnY2pzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCaEtHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWJXRnVZV2RsY2k1cGRHVnRVM1JoY25Rb1l5a3NJSEl1Ykc5aFpDaGpMQ0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc0dWJXRnVZV2RsY2k1cGRHVnRSVzVrS0dNcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5TENCMmIybGtJREFzSUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JpNXRZVzVoWjJWeUxtbDBaVzFGY25KdmNpaGpLU3dnYmk1dFlXNWhaMlZ5TG1sMFpXMUZibVFvWXlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdktHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpJRDA5SUNKemRISnBibWNpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdNc0lHZ2dQU0F2WGloY0wxd3ZLWHdvVzJFdGVsMHJPaWhjTDF3dktUOHBMMmt1ZEdWemRDaHNLU0EvSUd3Z09pQnVMbkpsYzI5MWNtTmxVR0YwYUNBcklHdzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lTaG9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGRIVnliaUJqTG1SaGRHRWdQeUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQnJhU2hqTG5SNWNHVXNJR011WkdGMFlTa3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ1l5NTNhV1IwYUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdobGFXZG9kRG9nWXk1b1pXbG5hSFFLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQTZJRzUxYkd3N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQjJiMmxrSURBZ0ppWWdaUzVzWlc1bmRHZ2dQaUF3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdibVYzSUcxaEtIUXBPd29nSUNBZ0lDQWdJQ0FnSUNCeUlEMGdibVYzSUhKektHTXBMQ0J5TG5ObGRFTnliM056VDNKcFoybHVLSFJvYVhNdVkzSnZjM05QY21sbmFXNHBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUd3Z1BTQXdMQ0JvSUQwZ1pTNXNaVzVuZEdnN0lHd2dQQ0JvT3lCc0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhVZ1BTQmxXMnhkTENCa0lEMGdkUzUxY213N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoa0tTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnRJRDBnTUN3Z1h5QTlJR1F1YkdWdVozUm9PeUJ0SUR3Z1h6c2diU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHY2dQU0JrVzIxZExDQndJRDBnYnlobktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDQWhQVDBnYm5Wc2JDQW1KaUFvY0NCcGJuTjBZVzVqWlc5bUlFaFVUVXhKYldGblpVVnNaVzFsYm5RZ1B5Qm1MbkIxYzJnb2NDa2dPaUJtTG5CMWMyZ29ibVYzSUc5cEtIQXVaR0YwWVN3Z2NDNTNhV1IwYUN3Z2NDNW9aV2xuYUhRcEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGJkUzUxZFdsa1hTQTlJRzVsZHlCSmJpaG1LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0J2S0hVdWRYSnNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFczVXVkWFZwWkYwZ1BTQnVaWGNnU1c0b1ppazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdrN0NpQWdJQ0I5Q2lBZ0lDQmhjM2x1WXlCd1lYSnpaVWx0WVdkbGMwRnplVzVqS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE1zSUc0Z1BTQjdmU3dnYVRzS0lDQWdJQ0FnSUNCaGMzbHVZeUJtZFc1amRHbHZiaUJ5S0dFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaElEMDlJQ0p6ZEhKcGJtY2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJR0VzSUdNZ1BTQXZYaWhjTDF3dktYd29XMkV0ZWwwck9paGNMMXd2S1Q4cEwya3VkR1Z6ZENodktTQS9JRzhnT2lCMExuSmxjMjkxY21ObFVHRjBhQ0FySUc4N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhkaGFYUWdhUzVzYjJGa1FYTjVibU1vWXlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z1lTNWtZWFJoSUQ4Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nYTJrb1lTNTBlWEJsTENCaExtUmhkR0VwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR0V1ZDJsa2RHZ3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHRXVhR1ZwWjJoMENpQWdJQ0FnSUNBZ0lDQWdJSDBnT2lCdWRXeHNPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb1pTQWhQVDBnZG05cFpDQXdJQ1ltSUdVdWJHVnVaM1JvSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCcElEMGdibVYzSUhKektIUm9hWE11YldGdVlXZGxjaWtzSUdrdWMyVjBRM0p2YzNOUGNtbG5hVzRvZEdocGN5NWpjbTl6YzA5eWFXZHBiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREFzSUc4Z1BTQmxMbXhsYm1kMGFEc2dZU0E4SUc4N0lHRXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJR1ZiWVYwc0lHd2dQU0JqTG5WeWJEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHd3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFVnUFNBd0xDQmtJRDBnYkM1c1pXNW5kR2c3SUhVZ1BDQmtPeUIxS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUd4YmRWMHNJRzBnUFNCaGQyRnBkQ0J5S0dZcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdElDRTlQU0J1ZFd4c0lDWW1JQ2h0SUdsdWMzUmhibU5sYjJZZ1NGUk5URWx0WVdkbFJXeGxiV1Z1ZENBL0lHZ3VjSFZ6YUNodEtTQTZJR2d1Y0hWemFDaHVaWGNnYjJrb2JTNWtZWFJoTENCdExuZHBaSFJvTENCdExtaGxhV2RvZENrcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JsdGpMblYxYVdSZElEMGdibVYzSUVsdUtHZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJR0YzWVdsMElISW9ZeTUxY213cE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzViWXk1MWRXbGtYU0E5SUc1bGR5QkpiaWhvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdianNLSUNBZ0lIMEtJQ0FnSUhCaGNuTmxWR1Y0ZEhWeVpYTW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHNG9jaXdnWVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlISWdQVDBnSW01MWJXSmxjaUlnUHlCeUlEb2dLR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VDJKcVpXTjBURzloWkdWeUxuQmhjbk5sVkdWNGRIVnlaVG9nUTI5dWMzUmhiblFnYzJodmRXeGtJR0psSUdsdUlHNTFiV1Z5YVdNZ1ptOXliUzRpTENCeUtTd2dZVnR5WFNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2UzMDdDaUFnSUNBZ0lDQWdhV1lnS0dVZ0lUMDlJSFp2YVdRZ01Da2dabTl5S0d4bGRDQnlJRDBnTUN3Z1lTQTlJR1V1YkdWdVozUm9PeUJ5SUR3Z1lUc2djaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQmxXM0pkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnZMbWx0WVdkbElEMDlQU0IyYjJsa0lEQWdKaVlnWTI5dWMyOXNaUzUzWVhKdUtDZFVTRkpGUlM1UFltcGxZM1JNYjJGa1pYSTZJRTV2SUNKcGJXRm5aU0lnYzNCbFkybG1hV1ZrSUdadmNpY3NJRzh1ZFhWcFpDa3NJSFJiYnk1cGJXRm5aVjBnUFQwOUlIWnZhV1FnTUNBbUppQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMazlpYW1WamRFeHZZV1JsY2pvZ1ZXNWtaV1pwYm1Wa0lHbHRZV2RsSWl3Z2J5NXBiV0ZuWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdkRnR2TG1sdFlXZGxYU3dnYkNBOUlHTXVaR0YwWVN3Z2FEc0tJQ0FnSUNBZ0lDQWdJQ0FnUVhKeVlYa3VhWE5CY25KaGVTaHNLU0EvSUNob0lEMGdibVYzSUV0cExDQnNMbXhsYm1kMGFDQTlQVDBnTmlBbUppQW9hQzV1WldWa2MxVndaR0YwWlNBOUlDRXdLU2tnT2lBb2JDQW1KaUJzTG1SaGRHRWdQeUJvSUQwZ2JtVjNJRzlwSURvZ2FDQTlJRzVsZHlCVGRDd2diQ0FtSmlBb2FDNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0tTa3NJR2d1YzI5MWNtTmxJRDBnWXl3Z2FDNTFkV2xrSUQwZ2J5NTFkV2xrTENCdkxtNWhiV1VnSVQwOUlIWnZhV1FnTUNBbUppQW9hQzV1WVcxbElEMGdieTV1WVcxbEtTd2dieTV0WVhCd2FXNW5JQ0U5UFNCMmIybGtJREFnSmlZZ0tHZ3ViV0Z3Y0dsdVp5QTlJRzRvYnk1dFlYQndhVzVuTENCVWVDa3BMQ0J2TG1Ob1lXNXVaV3dnSVQwOUlIWnZhV1FnTUNBbUppQW9hQzVqYUdGdWJtVnNJRDBnYnk1amFHRnVibVZzS1N3Z2J5NXZabVp6WlhRZ0lUMDlJSFp2YVdRZ01DQW1KaUJvTG05bVpuTmxkQzVtY205dFFYSnlZWGtvYnk1dlptWnpaWFFwTENCdkxuSmxjR1ZoZENBaFBUMGdkbTlwWkNBd0lDWW1JR2d1Y21Wd1pXRjBMbVp5YjIxQmNuSmhlU2h2TG5KbGNHVmhkQ2tzSUc4dVkyVnVkR1Z5SUNFOVBTQjJiMmxrSURBZ0ppWWdhQzVqWlc1MFpYSXVabkp2YlVGeWNtRjVLRzh1WTJWdWRHVnlLU3dnYnk1eWIzUmhkR2x2YmlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hvTG5KdmRHRjBhVzl1SUQwZ2J5NXliM1JoZEdsdmJpa3NJRzh1ZDNKaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNob0xuZHlZWEJUSUQwZ2JpaHZMbmR5WVhCYk1GMHNJRzExS1N3Z2FDNTNjbUZ3VkNBOUlHNG9ieTUzY21Gd1d6RmRMQ0J0ZFNrcExDQnZMbVp2Y20xaGRDQWhQVDBnZG05cFpDQXdJQ1ltSUNob0xtWnZjbTFoZENBOUlHOHVabTl5YldGMEtTd2dieTVwYm5SbGNtNWhiRVp2Y20xaGRDQWhQVDBnZG05cFpDQXdJQ1ltSUNob0xtbHVkR1Z5Ym1Gc1JtOXliV0YwSUQwZ2J5NXBiblJsY201aGJFWnZjbTFoZENrc0lHOHVkSGx3WlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hvTG5SNWNHVWdQU0J2TG5SNWNHVXBMQ0J2TG1OdmJHOXlVM0JoWTJVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYUM1amIyeHZjbE53WVdObElEMGdieTVqYjJ4dmNsTndZV05sS1N3Z2J5NWxibU52WkdsdVp5QWhQVDBnZG05cFpDQXdJQ1ltSUNob0xtVnVZMjlrYVc1bklEMGdieTVsYm1OdlpHbHVaeWtzSUc4dWJXbHVSbWxzZEdWeUlDRTlQU0IyYjJsa0lEQWdKaVlnS0dndWJXbHVSbWxzZEdWeUlEMGdiaWh2TG0xcGJrWnBiSFJsY2l3Z1ozVXBLU3dnYnk1dFlXZEdhV3gwWlhJZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYUM1dFlXZEdhV3gwWlhJZ1BTQnVLRzh1YldGblJtbHNkR1Z5TENCbmRTa3BMQ0J2TG1GdWFYTnZkSEp2Y0hrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYUM1aGJtbHpiM1J5YjNCNUlEMGdieTVoYm1semIzUnliM0I1S1N3Z2J5NW1iR2x3V1NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hvTG1ac2FYQlpJRDBnYnk1bWJHbHdXU2tzSUc4dVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2d1WjJWdVpYSmhkR1ZOYVhCdFlYQnpJRDBnYnk1blpXNWxjbUYwWlUxcGNHMWhjSE1wTENCdkxuQnlaVzExYkhScGNHeDVRV3h3YUdFZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYUM1d2NtVnRkV3gwYVhCc2VVRnNjR2hoSUQwZ2J5NXdjbVZ0ZFd4MGFYQnNlVUZzY0doaEtTd2dieTUxYm5CaFkydEJiR2xuYm0xbGJuUWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FDNTFibkJoWTJ0QmJHbG5ibTFsYm5RZ1BTQnZMblZ1Y0dGamEwRnNhV2R1YldWdWRDa3NJRzh1WTI5dGNHRnlaVVoxYm1OMGFXOXVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHZ3VZMjl0Y0dGeVpVWjFibU4wYVc5dUlEMGdieTVqYjIxd1lYSmxSblZ1WTNScGIyNHBMQ0J2TG5WelpYSkVZWFJoSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2d1ZFhObGNrUmhkR0VnUFNCdkxuVnpaWEpFWVhSaEtTd2dhVnR2TG5WMWFXUmRJRDBnYURzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdrN0NpQWdJQ0I5Q2lBZ0lDQndZWEp6WlU5aWFtVmpkQ2hsTENCMExDQnVMQ0JwTENCeUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdFN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2J5aGtLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMFcyUmRJRDA5UFNCMmIybGtJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVBZbXBsWTNSTWIyRmtaWEk2SUZWdVpHVm1hVzVsWkNCblpXOXRaWFJ5ZVNJc0lHUXBMQ0IwVzJSZE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmpLR1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dRZ0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aQ2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlGdGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYlNBOUlEQXNJRjhnUFNCa0xteGxibWQwYURzZ2JTQThJRjg3SUcwckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ1pGdHRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibHRuWFNBOVBUMGdkbTlwWkNBd0lDWW1JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VDJKcVpXTjBURzloWkdWeU9pQlZibVJsWm1sdVpXUWdiV0YwWlhKcFlXd2lMQ0JuS1N3Z1ppNXdkWE5vS0c1YloxMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVcyUmRJRDA5UFNCMmIybGtJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVBZbXBsWTNSTWIyRmtaWEk2SUZWdVpHVm1hVzVsWkNCdFlYUmxjbWxoYkNJc0lHUXBMQ0J1VzJSZE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUd3b1pDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVZ0a1hTQTlQVDBnZG05cFpDQXdJQ1ltSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVQySnFaV04wVEc5aFpHVnlPaUJWYm1SbFptbHVaV1FnZEdWNGRIVnlaU0lzSUdRcExDQnBXMlJkT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdhQ3dnZFRzS0lDQWdJQ0FnSUNCemQybDBZMmdvWlM1MGVYQmxLWHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpVTJObGJtVWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QkpieXdnWlM1aVlXTnJaM0p2ZFc1a0lDRTlQU0IyYjJsa0lEQWdKaVlnS0U1MWJXSmxjaTVwYzBsdWRHVm5aWElvWlM1aVlXTnJaM0p2ZFc1a0tTQS9JR0V1WW1GamEyZHliM1Z1WkNBOUlHNWxkeUJ3WlNobExtSmhZMnRuY205MWJtUXBJRG9nWVM1aVlXTnJaM0p2ZFc1a0lEMGdiQ2hsTG1KaFkydG5jbTkxYm1RcEtTd2daUzVsYm5acGNtOXViV1Z1ZENBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG1WdWRtbHliMjV0Wlc1MElEMGdiQ2hsTG1WdWRtbHliMjV0Wlc1MEtTa3NJR1V1Wm05bklDRTlQU0IyYjJsa0lEQWdKaVlnS0dVdVptOW5MblI1Y0dVZ1BUMDlJQ0pHYjJjaUlEOGdZUzVtYjJjZ1BTQnVaWGNnVEc4b1pTNW1iMmN1WTI5c2IzSXNJR1V1Wm05bkxtNWxZWElzSUdVdVptOW5MbVpoY2lrZ09pQmxMbVp2Wnk1MGVYQmxJRDA5UFNBaVJtOW5SWGh3TWlJZ0ppWWdLR0V1Wm05bklEMGdibVYzSUZCdktHVXVabTluTG1OdmJHOXlMQ0JsTG1adlp5NWtaVzV6YVhSNUtTa3NJR1V1Wm05bkxtNWhiV1VnSVQwOUlDSWlJQ1ltSUNoaExtWnZaeTV1WVcxbElEMGdaUzVtYjJjdWJtRnRaU2twTENCbExtSmhZMnRuY205MWJtUkNiSFZ5Y21sdVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVZbUZqYTJkeWIzVnVaRUpzZFhKeWFXNWxjM01nUFNCbExtSmhZMnRuY205MWJtUkNiSFZ5Y21sdVpYTnpLU3dnWlM1aVlXTnJaM0p2ZFc1a1NXNTBaVzV6YVhSNUlDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdVltRmphMmR5YjNWdVpFbHVkR1Z1YzJsMGVTQTlJR1V1WW1GamEyZHliM1Z1WkVsdWRHVnVjMmwwZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpVUdWeWMzQmxZM1JwZG1WRFlXMWxjbUVpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHNWxkeUI1ZENobExtWnZkaXdnWlM1aGMzQmxZM1FzSUdVdWJtVmhjaXdnWlM1bVlYSXBMQ0JsTG1adlkzVnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVabTlqZFhNZ1BTQmxMbVp2WTNWektTd2daUzU2YjI5dElDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWVtOXZiU0E5SUdVdWVtOXZiU2tzSUdVdVptbHNiVWRoZFdkbElDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdVptbHNiVWRoZFdkbElEMGdaUzVtYVd4dFIyRjFaMlVwTENCbExtWnBiRzFQWm1aelpYUWdJVDA5SUhadmFXUWdNQ0FtSmlBb1lTNW1hV3h0VDJabWMyVjBJRDBnWlM1bWFXeHRUMlptYzJWMEtTd2daUzUyYVdWM0lDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWRtbGxkeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUdVdWRtbGxkeWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJazl5ZEdodlozSmhjR2hwWTBOaGJXVnlZU0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2JtVjNJRXh6S0dVdWJHVm1kQ3dnWlM1eWFXZG9kQ3dnWlM1MGIzQXNJR1V1WW05MGRHOXRMQ0JsTG01bFlYSXNJR1V1Wm1GeUtTd2daUzU2YjI5dElDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWVtOXZiU0E5SUdVdWVtOXZiU2tzSUdVdWRtbGxkeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMblpwWlhjZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxMblpwWlhjcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKQmJXSnBaVzUwVEdsbmFIUWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QkRZeWhsTG1OdmJHOXlMQ0JsTG1sdWRHVnVjMmwwZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpUkdseVpXTjBhVzl1WVd4TWFXZG9kQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2JtVjNJRkpqS0dVdVkyOXNiM0lzSUdVdWFXNTBaVzV6YVhSNUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKUWIybHVkRXhwWjJoMElqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRWdQU0J1WlhjZ2QyTW9aUzVqYjJ4dmNpd2daUzVwYm5SbGJuTnBkSGtzSUdVdVpHbHpkR0Z1WTJVc0lHVXVaR1ZqWVhrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxKbFkzUkJjbVZoVEdsbmFIUWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QlFZeWhsTG1OdmJHOXlMQ0JsTG1sdWRHVnVjMmwwZVN3Z1pTNTNhV1IwYUN3Z1pTNW9aV2xuYUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxOd2IzUk1hV2RvZENJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUVWaktHVXVZMjlzYjNJc0lHVXVhVzUwWlc1emFYUjVMQ0JsTG1ScGMzUmhibU5sTENCbExtRnVaMnhsTENCbExuQmxiblZ0WW5KaExDQmxMbVJsWTJGNUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKSVpXMXBjM0JvWlhKbFRHbG5hSFFpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHNWxkeUJUWXlobExtTnZiRzl5TENCbExtZHliM1Z1WkVOdmJHOXlMQ0JsTG1sdWRHVnVjMmwwZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpVEdsbmFIUlFjbTlpWlNJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUVsaktDa3Vabkp2YlVwVFQwNG9aU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlVMnRwYm01bFpFMWxjMmdpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUNBOUlHOG9aUzVuWlc5dFpYUnllU2tzSUhVZ1BTQmpLR1V1YldGMFpYSnBZV3dwTENCaElEMGdibVYzSUU1dktHZ3NJSFVwTENCbExtSnBibVJOYjJSbElDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdVltbHVaRTF2WkdVZ1BTQmxMbUpwYm1STmIyUmxLU3dnWlM1aWFXNWtUV0YwY21sNElDRTlQU0IyYjJsa0lEQWdKaVlnWVM1aWFXNWtUV0YwY21sNExtWnliMjFCY25KaGVTaGxMbUpwYm1STllYUnlhWGdwTENCbExuTnJaV3hsZEc5dUlDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWMydGxiR1YwYjI0Z1BTQmxMbk5yWld4bGRHOXVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSk5aWE5vSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdnZ1BTQnZLR1V1WjJWdmJXVjBjbmtwTENCMUlEMGdZeWhsTG0xaGRHVnlhV0ZzS1N3Z1lTQTlJRzVsZHlCTmRDaG9MQ0IxS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pKYm5OMFlXNWpaV1JOWlhOb0lqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZ2dQU0J2S0dVdVoyVnZiV1YwY25rcExDQjFJRDBnWXlobExtMWhkR1Z5YVdGc0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ1pTNWpiM1Z1ZEN3Z1ppQTlJR1V1YVc1emRHRnVZMlZOWVhSeWFYZ3NJRzBnUFNCbExtbHVjM1JoYm1ObFEyOXNiM0k3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2JtVjNJRVp2S0dnc0lIVXNJR1FwTENCaExtbHVjM1JoYm1ObFRXRjBjbWw0SUQwZ2JtVjNJSFZwS0c1bGR5QkdiRzloZERNeVFYSnlZWGtvWmk1aGNuSmhlU2tzSURFMktTd2diU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMbWx1YzNSaGJtTmxRMjlzYjNJZ1BTQnVaWGNnZFdrb2JtVjNJRVpzYjJGME16SkJjbkpoZVNodExtRnljbUY1S1N3Z2JTNXBkR1Z0VTJsNlpTa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lreFBSQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2JtVjNJRVJ2T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJa3hwYm1VaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJRzVsZHlCaWJpaHZLR1V1WjJWdmJXVjBjbmtwTENCaktHVXViV0YwWlhKcFlXd3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSk1hVzVsVEc5dmNDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnYm1WM0lFSnZLRzhvWlM1blpXOXRaWFJ5ZVNrc0lHTW9aUzV0WVhSbGNtbGhiQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJa3hwYm1WVFpXZHRaVzUwY3lJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUdWdUtHOG9aUzVuWlc5dFpYUnllU2tzSUdNb1pTNXRZWFJsY21saGJDa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsQnZhVzUwUTJ4dmRXUWlPZ29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pRYjJsdWRITWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QldieWh2S0dVdVoyVnZiV1YwY25rcExDQmpLR1V1YldGMFpYSnBZV3dwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pUY0hKcGRHVWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QlZieWhqS0dVdWJXRjBaWEpwWVd3cEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKSGNtOTFjQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2JtVjNJSFJwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJa0p2Ym1VaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJRzVsZHlCMFlUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJRzVsZHlCS1pUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0dFdWRYVnBaQ0E5SUdVdWRYVnBaQ3dnWlM1dVlXMWxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVibUZ0WlNBOUlHVXVibUZ0WlNrc0lHVXViV0YwY21sNElDRTlQU0IyYjJsa0lEQWdQeUFvWVM1dFlYUnlhWGd1Wm5KdmJVRnljbUY1S0dVdWJXRjBjbWw0S1N3Z1pTNXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOUlHVXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTa3NJR0V1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0FtSmlCaExtMWhkSEpwZUM1a1pXTnZiWEJ2YzJVb1lTNXdiM05wZEdsdmJpd2dZUzV4ZFdGMFpYSnVhVzl1TENCaExuTmpZV3hsS1NrZ09pQW9aUzV3YjNOcGRHbHZiaUFoUFQwZ2RtOXBaQ0F3SUNZbUlHRXVjRzl6YVhScGIyNHVabkp2YlVGeWNtRjVLR1V1Y0c5emFYUnBiMjRwTENCbExuSnZkR0YwYVc5dUlDRTlQU0IyYjJsa0lEQWdKaVlnWVM1eWIzUmhkR2x2Ymk1bWNtOXRRWEp5WVhrb1pTNXliM1JoZEdsdmJpa3NJR1V1Y1hWaGRHVnlibWx2YmlBaFBUMGdkbTlwWkNBd0lDWW1JR0V1Y1hWaGRHVnlibWx2Ymk1bWNtOXRRWEp5WVhrb1pTNXhkV0YwWlhKdWFXOXVLU3dnWlM1elkyRnNaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlHRXVjMk5oYkdVdVpuSnZiVUZ5Y21GNUtHVXVjMk5oYkdVcEtTd2daUzUxY0NBaFBUMGdkbTlwWkNBd0lDWW1JR0V1ZFhBdVpuSnZiVUZ5Y21GNUtHVXVkWEFwTENCbExtTmhjM1JUYUdGa2IzY2dJVDA5SUhadmFXUWdNQ0FtSmlBb1lTNWpZWE4wVTJoaFpHOTNJRDBnWlM1allYTjBVMmhoWkc5M0tTd2daUzV5WldObGFYWmxVMmhoWkc5M0lDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWNtVmpaV2wyWlZOb1lXUnZkeUE5SUdVdWNtVmpaV2wyWlZOb1lXUnZkeWtzSUdVdWMyaGhaRzkzSUNZbUlDaGxMbk5vWVdSdmR5NWlhV0Z6SUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1YzJoaFpHOTNMbUpwWVhNZ1BTQmxMbk5vWVdSdmR5NWlhV0Z6S1N3Z1pTNXphR0ZrYjNjdWJtOXliV0ZzUW1saGN5QWhQVDBnZG05cFpDQXdJQ1ltSUNoaExuTm9ZV1J2ZHk1dWIzSnRZV3hDYVdGeklEMGdaUzV6YUdGa2IzY3VibTl5YldGc1FtbGhjeWtzSUdVdWMyaGhaRzkzTG5KaFpHbDFjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMbk5vWVdSdmR5NXlZV1JwZFhNZ1BTQmxMbk5vWVdSdmR5NXlZV1JwZFhNcExDQmxMbk5vWVdSdmR5NXRZWEJUYVhwbElDRTlQU0IyYjJsa0lEQWdKaVlnWVM1emFHRmtiM2N1YldGd1UybDZaUzVtY205dFFYSnlZWGtvWlM1emFHRmtiM2N1YldGd1UybDZaU2tzSUdVdWMyaGhaRzkzTG1OaGJXVnlZU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMbk5vWVdSdmR5NWpZVzFsY21FZ1BTQjBhR2x6TG5CaGNuTmxUMkpxWldOMEtHVXVjMmhoWkc5M0xtTmhiV1Z5WVNrcEtTd2daUzUyYVhOcFlteGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVkbWx6YVdKc1pTQTlJR1V1ZG1semFXSnNaU2tzSUdVdVpuSjFjM1IxYlVOMWJHeGxaQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMbVp5ZFhOMGRXMURkV3hzWldRZ1BTQmxMbVp5ZFhOMGRXMURkV3hzWldRcExDQmxMbkpsYm1SbGNrOXlaR1Z5SUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1Y21WdVpHVnlUM0prWlhJZ1BTQmxMbkpsYm1SbGNrOXlaR1Z5S1N3Z1pTNTFjMlZ5UkdGMFlTQWhQVDBnZG05cFpDQXdJQ1ltSUNoaExuVnpaWEpFWVhSaElEMGdaUzUxYzJWeVJHRjBZU2tzSUdVdWJHRjVaWEp6SUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1YkdGNVpYSnpMbTFoYzJzZ1BTQmxMbXhoZVdWeWN5a3NJR1V1WTJocGJHUnlaVzRnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJR1V1WTJocGJHUnlaVzQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ppQTlJREE3SUdZZ1BDQmtMbXhsYm1kMGFEc2daaXNyS1dFdVlXUmtLSFJvYVhNdWNHRnljMlZQWW1wbFkzUW9aRnRtWFN3Z2RDd2diaXdnYVN3Z2Npa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb1pTNWhibWx0WVhScGIyNXpJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQmxMbUZ1YVcxaGRHbHZibk03Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ppQTlJREE3SUdZZ1BDQmtMbXhsYm1kMGFEc2daaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRJRDBnWkZ0bVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRXVZVzVwYldGMGFXOXVjeTV3ZFhOb0tISmJiVjBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNobExuUjVjR1VnUFQwOUlDSk1UMFFpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1V1WVhWMGIxVndaR0YwWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG1GMWRHOVZjR1JoZEdVZ1BTQmxMbUYxZEc5VmNHUmhkR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkNBOUlHVXViR1YyWld4ek93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1lnUFNBd095Qm1JRHdnWkM1c1pXNW5kR2c3SUdZckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYlNBOUlHUmJabDBzSUY4Z1BTQmhMbWRsZEU5aWFtVmpkRUo1VUhKdmNHVnlkSGtvSW5WMWFXUWlMQ0J0TG05aWFtVmpkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmSUNFOVBTQjJiMmxrSURBZ0ppWWdZUzVoWkdSTVpYWmxiQ2hmTENCdExtUnBjM1JoYm1ObExDQnRMbWg1YzNSbGNtVnphWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQmhPd29nSUNBZ2ZRb2dJQ0FnWW1sdVpGTnJaV3hsZEc5dWN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9kQ2t1YkdWdVozUm9JQ0U5UFNBd0lDWW1JR1V1ZEhKaGRtVnljMlVvWm5WdVkzUnBiMjRvYmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpNXBjMU5yYVc1dVpXUk5aWE5vSUQwOVBTQWhNQ0FtSmlCdUxuTnJaV3hsZEc5dUlDRTlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkRnR1TG5OclpXeGxkRzl1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1BUMDlJSFp2YVdRZ01DQS9JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VDJKcVpXTjBURzloWkdWeU9pQk9ieUJ6YTJWc1pYUnZiaUJtYjNWdVpDQjNhWFJvSUZWVlNVUTZJaXdnYmk1emEyVnNaWFJ2YmlrZ09pQnVMbUpwYm1Rb2FTd2diaTVpYVc1a1RXRjBjbWw0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdmUXA5TENCVWVDQTlJSHNLSUNBZ0lGVldUV0Z3Y0dsdVp6b2dSMk1zQ2lBZ0lDQkRkV0psVW1WbWJHVmpkR2x2YmsxaGNIQnBibWM2SUhwdUxBb2dJQ0FnUTNWaVpWSmxabkpoWTNScGIyNU5ZWEJ3YVc1bk9pQmphU3dLSUNBZ0lFVnhkV2x5WldOMFlXNW5kV3hoY2xKbFpteGxZM1JwYjI1TllYQndhVzVuT2lCSmNpd0tJQ0FnSUVWeGRXbHlaV04wWVc1bmRXeGhjbEpsWm5KaFkzUnBiMjVOWVhCd2FXNW5PaUJWY2l3S0lDQWdJRU4xWW1WVlZsSmxabXhsWTNScGIyNU5ZWEJ3YVc1bk9pQldjd3A5TENCdGRTQTlJSHNLSUNBZ0lGSmxjR1ZoZEZkeVlYQndhVzVuT2lCRWNpd0tJQ0FnSUVOc1lXMXdWRzlGWkdkbFYzSmhjSEJwYm1jNklFbDBMQW9nSUNBZ1RXbHljbTl5WldSU1pYQmxZWFJYY21Gd2NHbHVaem9nVG5JS2ZTd2daM1VnUFNCN0NpQWdJQ0JPWldGeVpYTjBSbWxzZEdWeU9pQndkQ3dLSUNBZ0lFNWxZWEpsYzNSTmFYQnRZWEJPWldGeVpYTjBSbWxzZEdWeU9pQm1ieXdLSUNBZ0lFNWxZWEpsYzNSTmFYQnRZWEJNYVc1bFlYSkdhV3gwWlhJNklFeHlMQW9nSUNBZ1RHbHVaV0Z5Um1sc2RHVnlPaUJ0ZEN3S0lDQWdJRXhwYm1WaGNrMXBjRzFoY0U1bFlYSmxjM1JHYVd4MFpYSTZJSFZrTEFvZ0lDQWdUR2x1WldGeVRXbHdiV0Z3VEdsdVpXRnlSbWxzZEdWeU9pQnNhUXA5TENCZmRTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1JIUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU2tzSUhSb2FYTXVhWE5KYldGblpVSnBkRzFoY0V4dllXUmxjaUE5SUNFd0xDQjBlWEJsYjJZZ1kzSmxZWFJsU1cxaFoyVkNhWFJ0WVhBZ1BpQWlkU0lnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUpiV0ZuWlVKcGRHMWhjRXh2WVdSbGNqb2dZM0psWVhSbFNXMWhaMlZDYVhSdFlYQW9LU0J1YjNRZ2MzVndjRzl5ZEdWa0xpSXBMQ0IwZVhCbGIyWWdabVYwWTJnZ1BpQWlkU0lnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUpiV0ZuWlVKcGRHMWhjRXh2WVdSbGNqb2dabVYwWTJnb0tTQnViM1FnYzNWd2NHOXlkR1ZrTGlJcExDQjBhR2x6TG05d2RHbHZibk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSEJ5WlcxMWJIUnBjR3g1UVd4d2FHRTZJQ0p1YjI1bElnb2dJQ0FnSUNBZ0lIMDdDaUFnSUNCOUNpQWdJQ0J6WlhSUGNIUnBiMjV6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y0hScGIyNXpJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUd4dllXUW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUdVZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWlNBOUlDSWlLU3dnZEdocGN5NXdZWFJvSUNFOVBTQjJiMmxrSURBZ0ppWWdLR1VnUFNCMGFHbHpMbkJoZEdnZ0t5QmxLU3dnWlNBOUlIUm9hWE11YldGdVlXZGxjaTV5WlhOdmJIWmxWVkpNS0dVcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeXdnWVNBOUlITnpMbWRsZENobEtUc0tJQ0FnSUNBZ0lDQnBaaUFvWVNBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2NpNXRZVzVoWjJWeUxtbDBaVzFUZEdGeWRDaGxLU3dnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZENBbUppQjBLR0VwTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ1WkNobEtUc0tJQ0FnSUNBZ0lDQjlMQ0F3S1N3Z1lUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlIdDlPd29nSUNBZ0lDQWdJRzh1WTNKbFpHVnVkR2xoYkhNZ1BTQjBhR2x6TG1OeWIzTnpUM0pwWjJsdUlEMDlQU0FpWVc1dmJubHRiM1Z6SWlBL0lDSnpZVzFsTFc5eWFXZHBiaUlnT2lBaWFXNWpiSFZrWlNJc0lHOHVhR1ZoWkdWeWN5QTlJSFJvYVhNdWNtVnhkV1Z6ZEVobFlXUmxjaXdnWm1WMFkyZ29aU3dnYnlrdWRHaGxiaWhtZFc1amRHbHZiaWhqS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpMbUpzYjJJb0tUc0tJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVWx0WVdkbFFtbDBiV0Z3S0dNc0lFOWlhbVZqZEM1aGMzTnBaMjRvY2k1dmNIUnBiMjV6TENCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjbE53WVdObFEyOXVkbVZ5YzJsdmJqb2dJbTV2Ym1VaUNpQWdJQ0FnSUNBZ0lDQWdJSDBwS1RzS0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzNNdVlXUmtLR1VzSUdNcExDQjBJQ1ltSUhRb1l5a3NJSEl1YldGdVlXZGxjaTVwZEdWdFJXNWtLR1VwT3dvZ0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVNBbUppQnBLR01wTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ5Y205eUtHVXBMQ0J5TG0xaGJtRm5aWEl1YVhSbGJVVnVaQ2hsS1RzS0lDQWdJQ0FnSUNCOUtTd2djaTV0WVc1aFoyVnlMbWwwWlcxVGRHRnlkQ2hsS1RzS0lDQWdJSDBLZlN3Z1JYSXNJRjloSUQwZ1kyeGhjM01nZXdvZ0lDQWdjM1JoZEdsaklHZGxkRU52Ym5SbGVIUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRVZ5SUQwOVBTQjJiMmxrSURBZ0ppWWdLRVZ5SUQwZ2JtVjNJQ2gzYVc1a2IzY3VRWFZrYVc5RGIyNTBaWGgwSUh4OElIZHBibVJ2ZHk1M1pXSnJhWFJCZFdScGIwTnZiblJsZUhRcEtTd2dSWEk3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nYzJWMFEyOXVkR1Y0ZENobEtTQjdDaUFnSUNBZ0lDQWdSWElnUFNCbE93b2dJQ0FnZlFwOUxDQjRkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdSSFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNiMkZrS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE1zSUdFZ1BTQnVaWGNnY200b2RHaHBjeTV0WVc1aFoyVnlLVHNLSUNBZ0lDQWdJQ0JoTG5ObGRGSmxjM0J2Ym5ObFZIbHdaU2dpWVhKeVlYbGlkV1ptWlhJaUtTd2dZUzV6WlhSUVlYUm9LSFJvYVhNdWNHRjBhQ2tzSUdFdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loMGFHbHpMbkpsY1hWbGMzUklaV0ZrWlhJcExDQmhMbk5sZEZkcGRHaERjbVZrWlc1MGFXRnNjeWgwYUdsekxuZHBkR2hEY21Wa1pXNTBhV0ZzY3lrc0lHRXViRzloWkNobExDQm1kVzVqZEdsdmJpaGpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJR011YzJ4cFkyVW9NQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWVM1blpYUkRiMjUwWlhoMEtDa3VaR1ZqYjJSbFFYVmthVzlFWVhSaEtHd3NJR1oxYm1OMGFXOXVLSFVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBLSFVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z2J5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0d3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOG9iQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQ0J1TENCcEtUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnZLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhU0EvSUdrb1l5a2dPaUJqYjI1emIyeGxMbVZ5Y205eUtHTXBMQ0J5TG0xaGJtRm5aWEl1YVhSbGJVVnljbTl5S0dVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS2ZTd2dkblVnUFNCdVpYY2dlbVVzSUhsMUlEMGdibVYzSUhwbExDQmFiaUE5SUc1bGR5QjZaU3dnVFhVZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lncGV3b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pUZEdWeVpXOURZVzFsY21FaUxDQjBhR2x6TG1GemNHVmpkQ0E5SURFc0lIUm9hWE11WlhsbFUyVndJRDBnTGpBMk5Dd2dkR2hwY3k1allXMWxjbUZNSUQwZ2JtVjNJSGwwTENCMGFHbHpMbU5oYldWeVlVd3ViR0Y1WlhKekxtVnVZV0pzWlNneEtTd2dkR2hwY3k1allXMWxjbUZNTG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1allXMWxjbUZTSUQwZ2JtVjNJSGwwTENCMGFHbHpMbU5oYldWeVlWSXViR0Y1WlhKekxtVnVZV0pzWlNneUtTd2dkR2hwY3k1allXMWxjbUZTTG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1ZlkyRmphR1VnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2WTNWek9pQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iM1k2SUc1MWJHd3NDaUFnSUNBZ0lDQWdJQ0FnSUdGemNHVmpkRG9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WaGNqb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdabUZ5T2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNCNmIyOXRPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lDQWdJQ0JsZVdWVFpYQTZJRzUxYkd3S0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVgyTmhZMmhsT3dvZ0lDQWdJQ0FnSUdsbUlDaDBMbVp2WTNWeklDRTlQU0JsTG1adlkzVnpJSHg4SUhRdVptOTJJQ0U5UFNCbExtWnZkaUI4ZkNCMExtRnpjR1ZqZENBaFBUMGdaUzVoYzNCbFkzUWdLaUIwYUdsekxtRnpjR1ZqZENCOGZDQjBMbTVsWVhJZ0lUMDlJR1V1Ym1WaGNpQjhmQ0IwTG1aaGNpQWhQVDBnWlM1bVlYSWdmSHdnZEM1NmIyOXRJQ0U5UFNCbExucHZiMjBnZkh3Z2RDNWxlV1ZUWlhBZ0lUMDlJSFJvYVhNdVpYbGxVMlZ3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSFF1Wm05amRYTWdQU0JsTG1adlkzVnpMQ0IwTG1admRpQTlJR1V1Wm05MkxDQjBMbUZ6Y0dWamRDQTlJR1V1WVhOd1pXTjBJQ29nZEdocGN5NWhjM0JsWTNRc0lIUXVibVZoY2lBOUlHVXVibVZoY2l3Z2RDNW1ZWElnUFNCbExtWmhjaXdnZEM1NmIyOXRJRDBnWlM1NmIyOXRMQ0IwTG1WNVpWTmxjQ0E5SUhSb2FYTXVaWGxsVTJWd0xDQmFiaTVqYjNCNUtHVXVjSEp2YW1WamRHbHZiazFoZEhKcGVDazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEM1bGVXVlRaWEFnTHlBeUxDQnlJRDBnYVNBcUlIUXVibVZoY2lBdklIUXVabTlqZFhNc0lHRWdQU0IwTG01bFlYSWdLaUJOWVhSb0xuUmhiaWhoYVNBcUlIUXVabTkySUNvZ0xqVXBJQzhnZEM1NmIyOXRMQ0J2TENCak93b2dJQ0FnSUNBZ0lDQWdJQ0I1ZFM1bGJHVnRaVzUwYzFzeE1sMGdQU0F0YVN3Z2RuVXVaV3hsYldWdWRITmJNVEpkSUQwZ2FTd2dieUE5SUMxaElDb2dkQzVoYzNCbFkzUWdLeUJ5TENCaklEMGdZU0FxSUhRdVlYTndaV04wSUNzZ2Npd2dXbTR1Wld4bGJXVnVkSE5iTUYwZ1BTQXlJQ29nZEM1dVpXRnlJQzhnS0dNZ0xTQnZLU3dnV200dVpXeGxiV1Z1ZEhOYk9GMGdQU0FvWXlBcklHOHBJQzhnS0dNZ0xTQnZLU3dnZEdocGN5NWpZVzFsY21GTUxuQnliMnBsWTNScGIyNU5ZWFJ5YVhndVkyOXdlU2hhYmlrc0lHOGdQU0F0WVNBcUlIUXVZWE53WldOMElDMGdjaXdnWXlBOUlHRWdLaUIwTG1GemNHVmpkQ0F0SUhJc0lGcHVMbVZzWlcxbGJuUnpXekJkSUQwZ01pQXFJSFF1Ym1WaGNpQXZJQ2hqSUMwZ2J5a3NJRnB1TG1Wc1pXMWxiblJ6V3poZElEMGdLR01nS3lCdktTQXZJQ2hqSUMwZ2J5a3NJSFJvYVhNdVkyRnRaWEpoVWk1d2NtOXFaV04wYVc5dVRXRjBjbWw0TG1OdmNIa29XbTRwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbU5oYldWeVlVd3ViV0YwY21sNFYyOXliR1F1WTI5d2VTaGxMbTFoZEhKcGVGZHZjbXhrS1M1dGRXeDBhWEJzZVNoNWRTa3NJSFJvYVhNdVkyRnRaWEpoVWk1dFlYUnlhWGhYYjNKc1pDNWpiM0I1S0dVdWJXRjBjbWw0VjI5eWJHUXBMbTExYkhScGNHeDVLSFoxS1RzS0lDQWdJSDBLZlN3Z1QyTWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnSVRBcGV3b2dJQ0FnSUNBZ0lIUm9hWE11WVhWMGIxTjBZWEowSUQwZ1pTd2dkR2hwY3k1emRHRnlkRlJwYldVZ1BTQXdMQ0IwYUdsekxtOXNaRlJwYldVZ1BTQXdMQ0IwYUdsekxtVnNZWEJ6WldSVWFXMWxJRDBnTUN3Z2RHaHBjeTV5ZFc1dWFXNW5JRDBnSVRFN0NpQWdJQ0I5Q2lBZ0lDQnpkR0Z5ZENncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBWR2x0WlNBOUlGTjFLQ2tzSUhSb2FYTXViMnhrVkdsdFpTQTlJSFJvYVhNdWMzUmhjblJVYVcxbExDQjBhR2x6TG1Wc1lYQnpaV1JVYVcxbElEMGdNQ3dnZEdocGN5NXlkVzV1YVc1bklEMGdJVEE3Q2lBZ0lDQjlDaUFnSUNCemRHOXdLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaMlYwUld4aGNITmxaRlJwYldVb0tTd2dkR2hwY3k1eWRXNXVhVzVuSUQwZ0lURXNJSFJvYVhNdVlYVjBiMU4wWVhKMElEMGdJVEU3Q2lBZ0lDQjlDaUFnSUNCblpYUkZiR0Z3YzJWa1ZHbHRaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJFWld4MFlTZ3BMQ0IwYUdsekxtVnNZWEJ6WldSVWFXMWxPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJHVnNkR0VvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNBd093b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtRjFkRzlUZEdGeWRDQW1KaUFoZEdocGN5NXlkVzV1YVc1bktTQnlaWFIxY200Z2RHaHBjeTV6ZEdGeWRDZ3BMQ0F3T3dvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KMWJtNXBibWNwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRZ1BTQlRkU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnS0hRZ0xTQjBhR2x6TG05c1pGUnBiV1VwSUM4Z01XVXpMQ0IwYUdsekxtOXNaRlJwYldVZ1BTQjBMQ0IwYUdsekxtVnNZWEJ6WldSVWFXMWxJQ3M5SUdVN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbE93b2dJQ0FnZlFwOU93cG1kVzVqZEdsdmJpQlRkU2dwSUhzS0lDQWdJSEpsZEhWeWJpQW9kSGx3Wlc5bUlIQmxjbVp2Y20xaGJtTmxJRDRnSW5VaUlEOGdSR0YwWlNBNklIQmxjbVp2Y20xaGJtTmxLUzV1YjNjb0tUc0tmUXAyWVhJZ1NtNGdQU0J1WlhjZ1FTd2dZblVnUFNCdVpYY2dWWFFzSUhkNElEMGdibVYzSUVFc0lDUnVJRDBnYm1WM0lFRXNJRVYxSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJLWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lncGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pCZFdScGIweHBjM1JsYm1WeUlpd2dkR2hwY3k1amIyNTBaWGgwSUQwZ1gyRXVaMlYwUTI5dWRHVjRkQ2dwTENCMGFHbHpMbWRoYVc0Z1BTQjBhR2x6TG1OdmJuUmxlSFF1WTNKbFlYUmxSMkZwYmlncExDQjBhR2x6TG1kaGFXNHVZMjl1Ym1WamRDaDBhR2x6TG1OdmJuUmxlSFF1WkdWemRHbHVZWFJwYjI0cExDQjBhR2x6TG1acGJIUmxjaUE5SUc1MWJHd3NJSFJvYVhNdWRHbHRaVVJsYkhSaElEMGdNQ3dnZEdocGN5NWZZMnh2WTJzZ1BTQnVaWGNnVDJNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJKYm5CMWRDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bllXbHVPd29nSUNBZ2ZRb2dJQ0FnY21WdGIzWmxSbWxzZEdWeUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1acGJIUmxjaUFoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVuWVdsdUxtUnBjMk52Ym01bFkzUW9kR2hwY3k1bWFXeDBaWElwTENCMGFHbHpMbVpwYkhSbGNpNWthWE5qYjI1dVpXTjBLSFJvYVhNdVkyOXVkR1Y0ZEM1a1pYTjBhVzVoZEdsdmJpa3NJSFJvYVhNdVoyRnBiaTVqYjI1dVpXTjBLSFJvYVhNdVkyOXVkR1Y0ZEM1a1pYTjBhVzVoZEdsdmJpa3NJSFJvYVhNdVptbHNkR1Z5SUQwZ2JuVnNiQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSR2FXeDBaWElvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVabWxzZEdWeU93b2dJQ0FnZlFvZ0lDQWdjMlYwUm1sc2RHVnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW1hV3gwWlhJZ0lUMDlJRzUxYkd3Z1B5QW9kR2hwY3k1bllXbHVMbVJwYzJOdmJtNWxZM1FvZEdocGN5NW1hV3gwWlhJcExDQjBhR2x6TG1acGJIUmxjaTVrYVhOamIyNXVaV04wS0hSb2FYTXVZMjl1ZEdWNGRDNWtaWE4wYVc1aGRHbHZiaWtwSURvZ2RHaHBjeTVuWVdsdUxtUnBjMk52Ym01bFkzUW9kR2hwY3k1amIyNTBaWGgwTG1SbGMzUnBibUYwYVc5dUtTd2dkR2hwY3k1bWFXeDBaWElnUFNCbExDQjBhR2x6TG1kaGFXNHVZMjl1Ym1WamRDaDBhR2x6TG1acGJIUmxjaWtzSUhSb2FYTXVabWxzZEdWeUxtTnZibTVsWTNRb2RHaHBjeTVqYjI1MFpYaDBMbVJsYzNScGJtRjBhVzl1S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFMWhjM1JsY2xadmJIVnRaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5ZV2x1TG1kaGFXNHVkbUZzZFdVN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJOWVhOMFpYSldiMngxYldVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kaGFXNHVaMkZwYmk1elpYUlVZWEpuWlhSQmRGUnBiV1VvWlN3Z2RHaHBjeTVqYjI1MFpYaDBMbU4xY25KbGJuUlVhVzFsTENBdU1ERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9aU2tnZXdvZ0lDQWdJQ0FnSUhOMWNHVnlMblZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLR1VwT3dvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWpiMjUwWlhoMExteHBjM1JsYm1WeUxDQnVJRDBnZEdocGN5NTFjRHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwYVcxbFJHVnNkR0VnUFNCMGFHbHpMbDlqYkc5amF5NW5aWFJFWld4MFlTZ3BMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtMbVJsWTI5dGNHOXpaU2hLYml3Z1luVXNJSGQ0S1N3Z0pHNHVjMlYwS0RBc0lEQXNJQzB4S1M1aGNIQnNlVkYxWVhSbGNtNXBiMjRvWW5VcExDQjBMbkJ2YzJsMGFXOXVXQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11WTI5dWRHVjRkQzVqZFhKeVpXNTBWR2x0WlNBcklIUm9hWE11ZEdsdFpVUmxiSFJoT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBMbkJ2YzJsMGFXOXVXQzVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaEtiaTU0TENCcEtTd2dkQzV3YjNOcGRHbHZibGt1YkdsdVpXRnlVbUZ0Y0ZSdlZtRnNkV1ZCZEZScGJXVW9TbTR1ZVN3Z2FTa3NJSFF1Y0c5emFYUnBiMjVhTG14cGJtVmhjbEpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLRXB1TG5vc0lHa3BMQ0IwTG1admNuZGhjbVJZTG14cGJtVmhjbEpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLQ1J1TG5nc0lHa3BMQ0IwTG1admNuZGhjbVJaTG14cGJtVmhjbEpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLQ1J1TG5rc0lHa3BMQ0IwTG1admNuZGhjbVJhTG14cGJtVmhjbEpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLQ1J1TG5vc0lHa3BMQ0IwTG5Wd1dDNXNhVzVsWVhKU1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNodUxuZ3NJR2twTENCMExuVndXUzVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaHVMbmtzSUdrcExDQjBMblZ3V2k1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2h1TG5vc0lHa3BPd29nSUNBZ0lDQWdJSDBnWld4elpTQjBMbk5sZEZCdmMybDBhVzl1S0VwdUxuZ3NJRXB1TG5rc0lFcHVMbm9wTENCMExuTmxkRTl5YVdWdWRHRjBhVzl1S0NSdUxuZ3NJQ1J1TG5rc0lDUnVMbm9zSUc0dWVDd2diaTU1TENCdUxub3BPd29nSUNBZ2ZRcDlMQ0JHWXlBOUlHTnNZWE56SUdWNGRHVnVaSE1nU21VZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1MGVYQmxJRDBnSWtGMVpHbHZJaXdnZEdocGN5NXNhWE4wWlc1bGNpQTlJR1VzSUhSb2FYTXVZMjl1ZEdWNGRDQTlJR1V1WTI5dWRHVjRkQ3dnZEdocGN5NW5ZV2x1SUQwZ2RHaHBjeTVqYjI1MFpYaDBMbU55WldGMFpVZGhhVzRvS1N3Z2RHaHBjeTVuWVdsdUxtTnZibTVsWTNRb1pTNW5aWFJKYm5CMWRDZ3BLU3dnZEdocGN5NWhkWFJ2Y0d4aGVTQTlJQ0V4TENCMGFHbHpMbUoxWm1abGNpQTlJRzUxYkd3c0lIUm9hWE11WkdWMGRXNWxJRDBnTUN3Z2RHaHBjeTVzYjI5d0lEMGdJVEVzSUhSb2FYTXViRzl2Y0ZOMFlYSjBJRDBnTUN3Z2RHaHBjeTVzYjI5d1JXNWtJRDBnTUN3Z2RHaHBjeTV2Wm1aelpYUWdQU0F3TENCMGFHbHpMbVIxY21GMGFXOXVJRDBnZG05cFpDQXdMQ0IwYUdsekxuQnNZWGxpWVdOclVtRjBaU0E5SURFc0lIUm9hWE11YVhOUWJHRjVhVzVuSUQwZ0lURXNJSFJvYVhNdWFHRnpVR3hoZVdKaFkydERiMjUwY205c0lEMGdJVEFzSUhSb2FYTXVjMjkxY21ObElEMGdiblZzYkN3Z2RHaHBjeTV6YjNWeVkyVlVlWEJsSUQwZ0ltVnRjSFI1SWl3Z2RHaHBjeTVmYzNSaGNuUmxaRUYwSUQwZ01Dd2dkR2hwY3k1ZmNISnZaM0psYzNNZ1BTQXdMQ0IwYUdsekxsOWpiMjV1WldOMFpXUWdQU0FoTVN3Z2RHaHBjeTVtYVd4MFpYSnpJRDBnVzEwN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJQZFhSd2RYUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyRnBianNLSUNBZ0lIMEtJQ0FnSUhObGRFNXZaR1ZUYjNWeVkyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtaGhjMUJzWVhsaVlXTnJRMjl1ZEhKdmJDQTlJQ0V4TENCMGFHbHpMbk52ZFhKalpWUjVjR1VnUFNBaVlYVmthVzlPYjJSbElpd2dkR2hwY3k1emIzVnlZMlVnUFNCbExDQjBhR2x6TG1OdmJtNWxZM1FvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFMWxaR2xoUld4bGJXVnVkRk52ZFhKalpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFHRnpVR3hoZVdKaFkydERiMjUwY205c0lEMGdJVEVzSUhSb2FYTXVjMjkxY21ObFZIbHdaU0E5SUNKdFpXUnBZVTV2WkdVaUxDQjBhR2x6TG5OdmRYSmpaU0E5SUhSb2FYTXVZMjl1ZEdWNGRDNWpjbVZoZEdWTlpXUnBZVVZzWlcxbGJuUlRiM1Z5WTJVb1pTa3NJSFJvYVhNdVkyOXVibVZqZENncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBUV1ZrYVdGVGRISmxZVzFUYjNWeVkyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtaGhjMUJzWVhsaVlXTnJRMjl1ZEhKdmJDQTlJQ0V4TENCMGFHbHpMbk52ZFhKalpWUjVjR1VnUFNBaWJXVmthV0ZUZEhKbFlXMU9iMlJsSWl3Z2RHaHBjeTV6YjNWeVkyVWdQU0IwYUdsekxtTnZiblJsZUhRdVkzSmxZWFJsVFdWa2FXRlRkSEpsWVcxVGIzVnlZMlVvWlNrc0lIUm9hWE11WTI5dWJtVmpkQ2dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFFuVm1abVZ5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVpZFdabVpYSWdQU0JsTENCMGFHbHpMbk52ZFhKalpWUjVjR1VnUFNBaVluVm1abVZ5SWl3Z2RHaHBjeTVoZFhSdmNHeGhlU0FtSmlCMGFHbHpMbkJzWVhrb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIQnNZWGtvWlNBOUlEQXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzFCc1lYbHBibWNnUFQwOUlDRXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRWFZrYVc4NklFRjFaR2x2SUdseklHRnNjbVZoWkhrZ2NHeGhlV2x1Wnk0aUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVhOUWJHRjVZbUZqYTBOdmJuUnliMndnUFQwOUlDRXhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRWFZrYVc4NklIUm9hWE1nUVhWa2FXOGdhR0Z6SUc1dklIQnNZWGxpWVdOcklHTnZiblJ5YjJ3dUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoY25SbFpFRjBJRDBnZEdocGN5NWpiMjUwWlhoMExtTjFjbkpsYm5SVWFXMWxJQ3NnWlRzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZMjl1ZEdWNGRDNWpjbVZoZEdWQ2RXWm1aWEpUYjNWeVkyVW9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQzVpZFdabVpYSWdQU0IwYUdsekxtSjFabVpsY2l3Z2RDNXNiMjl3SUQwZ2RHaHBjeTVzYjI5d0xDQjBMbXh2YjNCVGRHRnlkQ0E5SUhSb2FYTXViRzl2Y0ZOMFlYSjBMQ0IwTG14dmIzQkZibVFnUFNCMGFHbHpMbXh2YjNCRmJtUXNJSFF1YjI1bGJtUmxaQ0E5SUhSb2FYTXViMjVGYm1SbFpDNWlhVzVrS0hSb2FYTXBMQ0IwTG5OMFlYSjBLSFJvYVhNdVgzTjBZWEowWldSQmRDd2dkR2hwY3k1ZmNISnZaM0psYzNNZ0t5QjBhR2x6TG05bVpuTmxkQ3dnZEdocGN5NWtkWEpoZEdsdmJpa3NJSFJvYVhNdWFYTlFiR0Y1YVc1bklEMGdJVEFzSUhSb2FYTXVjMjkxY21ObElEMGdkQ3dnZEdocGN5NXpaWFJFWlhSMWJtVW9kR2hwY3k1a1pYUjFibVVwTENCMGFHbHpMbk5sZEZCc1lYbGlZV05yVW1GMFpTaDBhR2x6TG5Cc1lYbGlZV05yVW1GMFpTa3NJSFJvYVhNdVkyOXVibVZqZENncE93b2dJQ0FnZlFvZ0lDQWdjR0YxYzJVb0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhR0Z6VUd4aGVXSmhZMnREYjI1MGNtOXNJRDA5UFNBaE1Ta2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrRjFaR2x2T2lCMGFHbHpJRUYxWkdsdklHaGhjeUJ1YnlCd2JHRjVZbUZqYXlCamIyNTBjbTlzTGlJcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1selVHeGhlV2x1WnlBOVBUMGdJVEFnSmlZZ0tIUm9hWE11WDNCeWIyZHlaWE56SUNzOUlFMWhkR2d1YldGNEtIUm9hWE11WTI5dWRHVjRkQzVqZFhKeVpXNTBWR2x0WlNBdElIUm9hWE11WDNOMFlYSjBaV1JCZEN3Z01Da2dLaUIwYUdsekxuQnNZWGxpWVdOclVtRjBaU3dnZEdocGN5NXNiMjl3SUQwOVBTQWhNQ0FtSmlBb2RHaHBjeTVmY0hKdlozSmxjM01nUFNCMGFHbHpMbDl3Y205bmNtVnpjeUFsSUNoMGFHbHpMbVIxY21GMGFXOXVJSHg4SUhSb2FYTXVZblZtWm1WeUxtUjFjbUYwYVc5dUtTa3NJSFJvYVhNdWMyOTFjbU5sTG5OMGIzQW9LU3dnZEdocGN5NXpiM1Z5WTJVdWIyNWxibVJsWkNBOUlHNTFiR3dzSUhSb2FYTXVhWE5RYkdGNWFXNW5JRDBnSVRFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzUnZjQ2dwSUhzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lYTlFiR0Y1WW1GamEwTnZiblJ5YjJ3Z1BUMDlJQ0V4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UVhWa2FXODZJSFJvYVhNZ1FYVmthVzhnYUdGeklHNXZJSEJzWVhsaVlXTnJJR052Ym5SeWIyd3VJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjJkeVpYTnpJRDBnTUN3Z2RHaHBjeTV6YjNWeVkyVWdJVDA5SUc1MWJHd2dKaVlnS0hSb2FYTXVjMjkxY21ObExuTjBiM0FvS1N3Z2RHaHBjeTV6YjNWeVkyVXViMjVsYm1SbFpDQTlJRzUxYkd3cExDQjBhR2x6TG1selVHeGhlV2x1WnlBOUlDRXhMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl1Ym1WamRDZ3BJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVtYVd4MFpYSnpMbXhsYm1kMGFDQStJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emIzVnlZMlV1WTI5dWJtVmpkQ2gwYUdsekxtWnBiSFJsY25OYk1GMHBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdVZ1BTQXhMQ0IwSUQwZ2RHaHBjeTVtYVd4MFpYSnpMbXhsYm1kMGFEc2daU0E4SUhRN0lHVXJLeWwwYUdsekxtWnBiSFJsY25OYlpTQXRJREZkTG1OdmJtNWxZM1FvZEdocGN5NW1hV3gwWlhKelcyVmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtYVd4MFpYSnpXM1JvYVhNdVptbHNkR1Z5Y3k1c1pXNW5kR2dnTFNBeFhTNWpiMjV1WldOMEtIUm9hWE11WjJWMFQzVjBjSFYwS0NrcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCMGFHbHpMbk52ZFhKalpTNWpiMjV1WldOMEtIUm9hWE11WjJWMFQzVjBjSFYwS0NrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYjI1dVpXTjBaV1FnUFNBaE1Dd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnBjMk52Ym01bFkzUW9LU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJtNWxZM1JsWkNBaFBUMGdJVEVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVabWxzZEdWeWN5NXNaVzVuZEdnZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTnZkWEpqWlM1a2FYTmpiMjV1WldOMEtIUm9hWE11Wm1sc2RHVnljMXN3WFNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdVZ1BTQXhMQ0IwSUQwZ2RHaHBjeTVtYVd4MFpYSnpMbXhsYm1kMGFEc2daU0E4SUhRN0lHVXJLeWwwYUdsekxtWnBiSFJsY25OYlpTQXRJREZkTG1ScGMyTnZibTVsWTNRb2RHaHBjeTVtYVd4MFpYSnpXMlZkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabWxzZEdWeWMxdDBhR2x6TG1acGJIUmxjbk11YkdWdVozUm9JQzBnTVYwdVpHbHpZMjl1Ym1WamRDaDBhR2x6TG1kbGRFOTFkSEIxZENncEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSFJvYVhNdWMyOTFjbU5sTG1ScGMyTnZibTVsWTNRb2RHaHBjeTVuWlhSUGRYUndkWFFvS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amIyNXVaV04wWldRZ1BTQWhNU3dnZEdocGN6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JuWlhSR2FXeDBaWEp6S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpwYkhSbGNuTTdDaUFnSUNCOUNpQWdJQ0J6WlhSR2FXeDBaWEp6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQjhmQ0FvWlNBOUlGdGRLU3dnZEdocGN5NWZZMjl1Ym1WamRHVmtJRDA5UFNBaE1DQS9JQ2gwYUdsekxtUnBjMk52Ym01bFkzUW9LU3dnZEdocGN5NW1hV3gwWlhKeklEMGdaUzV6YkdsalpTZ3BMQ0IwYUdsekxtTnZibTVsWTNRb0tTa2dPaUIwYUdsekxtWnBiSFJsY25NZ1BTQmxMbk5zYVdObEtDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJFWlhSMWJtVW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1SbGRIVnVaU0E5SUdVc0lIUm9hWE11YzI5MWNtTmxMbVJsZEhWdVpTQWhQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdkR2hwY3k1cGMxQnNZWGxwYm1jZ1BUMDlJQ0V3SUNZbUlIUm9hWE11YzI5MWNtTmxMbVJsZEhWdVpTNXpaWFJVWVhKblpYUkJkRlJwYldVb2RHaHBjeTVrWlhSMWJtVXNJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTd2dMakF4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFUmxkSFZ1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVrWlhSMWJtVTdDaUFnSUNCOUNpQWdJQ0JuWlhSR2FXeDBaWElvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwUm1sc2RHVnljeWdwV3pCZE93b2dJQ0FnZlFvZ0lDQWdjMlYwUm1sc2RHVnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFJHYVd4MFpYSnpLR1VnUHlCYkNpQWdJQ0FnSUNBZ0lDQWdJR1VLSUNBZ0lDQWdJQ0JkSURvZ1cxMHBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFVHeGhlV0poWTJ0U1lYUmxLR1VwSUhzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lYTlFiR0Y1WW1GamEwTnZiblJ5YjJ3Z1BUMDlJQ0V4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UVhWa2FXODZJSFJvYVhNZ1FYVmthVzhnYUdGeklHNXZJSEJzWVhsaVlXTnJJR052Ym5SeWIyd3VJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR3hoZVdKaFkydFNZWFJsSUQwZ1pTd2dkR2hwY3k1cGMxQnNZWGxwYm1jZ1BUMDlJQ0V3SUNZbUlIUm9hWE11YzI5MWNtTmxMbkJzWVhsaVlXTnJVbUYwWlM1elpYUlVZWEpuWlhSQmRGUnBiV1VvZEdocGN5NXdiR0Y1WW1GamExSmhkR1VzSUhSb2FYTXVZMjl1ZEdWNGRDNWpkWEp5Wlc1MFZHbHRaU3dnTGpBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRkJzWVhsaVlXTnJVbUYwWlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3YkdGNVltRmphMUpoZEdVN0NpQWdJQ0I5Q2lBZ0lDQnZia1Z1WkdWa0tDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWFYTlFiR0Y1YVc1bklEMGdJVEU3Q2lBZ0lDQjlDaUFnSUNCblpYUk1iMjl3S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWhoYzFCc1lYbGlZV05yUTI5dWRISnZiQ0E5UFQwZ0lURWdQeUFvWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1QmRXUnBiem9nZEdocGN5QkJkV1JwYnlCb1lYTWdibThnY0d4aGVXSmhZMnNnWTI5dWRISnZiQzRpS1N3Z0lURXBJRG9nZEdocGN5NXNiMjl3T3dvZ0lDQWdmUW9nSUNBZ2MyVjBURzl2Y0NobEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhR0Z6VUd4aGVXSmhZMnREYjI1MGNtOXNJRDA5UFNBaE1Ta2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrRjFaR2x2T2lCMGFHbHpJRUYxWkdsdklHaGhjeUJ1YnlCd2JHRjVZbUZqYXlCamIyNTBjbTlzTGlJcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG14dmIzQWdQU0JsTENCMGFHbHpMbWx6VUd4aGVXbHVaeUE5UFQwZ0lUQWdKaVlnS0hSb2FYTXVjMjkxY21ObExteHZiM0FnUFNCMGFHbHpMbXh2YjNBcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBURzl2Y0ZOMFlYSjBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNiMjl3VTNSaGNuUWdQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFRHOXZjRVZ1WkNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ykc5dmNFVnVaQ0E5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUldiMngxYldVb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJGcGJpNW5ZV2x1TG5aaGJIVmxPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZtOXNkVzFsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWVdsdUxtZGhhVzR1YzJWMFZHRnlaMlYwUVhSVWFXMWxLR1VzSUhSb2FYTXVZMjl1ZEdWNGRDNWpkWEp5Wlc1MFZHbHRaU3dnTGpBeEtTd2dkR2hwY3pzS0lDQWdJSDBLZlN3Z1MyNGdQU0J1WlhjZ1FTd2dWSFVnUFNCdVpYY2dWWFFzSUVGNElEMGdibVYzSUVFc0lGRnVJRDBnYm1WM0lFRXNJSGQxSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJHWXlCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobEtTd2dkR2hwY3k1d1lXNXVaWElnUFNCMGFHbHpMbU52Ym5SbGVIUXVZM0psWVhSbFVHRnVibVZ5S0Nrc0lIUm9hWE11Y0dGdWJtVnlMbkJoYm01cGJtZE5iMlJsYkNBOUlDSklVbFJHSWl3Z2RHaHBjeTV3WVc1dVpYSXVZMjl1Ym1WamRDaDBhR2x6TG1kaGFXNHBPd29nSUNBZ2ZRb2dJQ0FnWTI5dWJtVmpkQ2dwSUhzS0lDQWdJQ0FnSUNCemRYQmxjaTVqYjI1dVpXTjBLQ2tzSUhSb2FYTXVjR0Z1Ym1WeUxtTnZibTVsWTNRb2RHaHBjeTVuWVdsdUtUc0tJQ0FnSUgwS0lDQWdJR1JwYzJOdmJtNWxZM1FvS1NCN0NpQWdJQ0FnSUNBZ2MzVndaWEl1WkdselkyOXVibVZqZENncExDQjBhR2x6TG5CaGJtNWxjaTVrYVhOamIyNXVaV04wS0hSb2FYTXVaMkZwYmlrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJQZFhSd2RYUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHRnVibVZ5T3dvZ0lDQWdmUW9nSUNBZ1oyVjBVbVZtUkdsemRHRnVZMlVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z1Ym1WeUxuSmxaa1JwYzNSaGJtTmxPd29nSUNBZ2ZRb2dJQ0FnYzJWMFVtVm1SR2x6ZEdGdVkyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhibTVsY2k1eVpXWkVhWE4wWVc1alpTQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSU2IyeHNiMlptUm1GamRHOXlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhibTVsY2k1eWIyeHNiMlptUm1GamRHOXlPd29nSUNBZ2ZRb2dJQ0FnYzJWMFVtOXNiRzltWmtaaFkzUnZjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z1Ym1WeUxuSnZiR3h2Wm1aR1lXTjBiM0lnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBSR2x6ZEdGdVkyVk5iMlJsYkNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVc1dVpYSXVaR2x6ZEdGdVkyVk5iMlJsYkRzS0lDQWdJSDBLSUNBZ0lITmxkRVJwYzNSaGJtTmxUVzlrWld3b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGJtNWxjaTVrYVhOMFlXNWpaVTF2WkdWc0lEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEUxaGVFUnBjM1JoYm1ObEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGJtNWxjaTV0WVhoRWFYTjBZVzVqWlRzS0lDQWdJSDBLSUNBZ0lITmxkRTFoZUVScGMzUmhibU5sS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVc1dVpYSXViV0Y0UkdsemRHRnVZMlVnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSR2x5WldOMGFXOXVZV3hEYjI1bEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVc1dVpYSXVZMjl1WlVsdWJtVnlRVzVuYkdVZ1BTQmxMQ0IwYUdsekxuQmhibTVsY2k1amIyNWxUM1YwWlhKQmJtZHNaU0E5SUhRc0lIUm9hWE11Y0dGdWJtVnlMbU52Ym1WUGRYUmxja2RoYVc0Z1BTQnVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaHpkWEJsY2k1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtTd2dkR2hwY3k1b1lYTlFiR0Y1WW1GamEwTnZiblJ5YjJ3Z1BUMDlJQ0V3SUNZbUlIUm9hWE11YVhOUWJHRjVhVzVuSUQwOVBTQWhNU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXVaR1ZqYjIxd2IzTmxLRXR1TENCVWRTd2dRWGdwTENCUmJpNXpaWFFvTUN3Z01Dd2dNU2t1WVhCd2JIbFJkV0YwWlhKdWFXOXVLRlIxS1RzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVjR0Z1Ym1WeU93b2dJQ0FnSUNBZ0lHbG1JQ2gwTG5CdmMybDBhVzl1V0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTQXJJSFJvYVhNdWJHbHpkR1Z1WlhJdWRHbHRaVVJsYkhSaE93b2dJQ0FnSUNBZ0lDQWdJQ0IwTG5CdmMybDBhVzl1V0M1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2hMYmk1NExDQnVLU3dnZEM1d2IzTnBkR2x2YmxrdWJHbHVaV0Z5VW1GdGNGUnZWbUZzZFdWQmRGUnBiV1VvUzI0dWVTd2diaWtzSUhRdWNHOXphWFJwYjI1YUxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0V0dUxub3NJRzRwTENCMExtOXlhV1Z1ZEdGMGFXOXVXQzVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaFJiaTU0TENCdUtTd2dkQzV2Y21sbGJuUmhkR2x2YmxrdWJHbHVaV0Z5VW1GdGNGUnZWbUZzZFdWQmRGUnBiV1VvVVc0dWVTd2diaWtzSUhRdWIzSnBaVzUwWVhScGIyNWFMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtGRnVMbm9zSUc0cE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCMExuTmxkRkJ2YzJsMGFXOXVLRXR1TG5nc0lFdHVMbmtzSUV0dUxub3BMQ0IwTG5ObGRFOXlhV1Z1ZEdGMGFXOXVLRkZ1TG5nc0lGRnVMbmtzSUZGdUxub3BPd29nSUNBZ2ZRcDlMQ0JCZFNBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUWdQU0F5TURRNEtYc0tJQ0FnSUNBZ0lDQjBhR2x6TG1GdVlXeDVjMlZ5SUQwZ1pTNWpiMjUwWlhoMExtTnlaV0YwWlVGdVlXeDVjMlZ5S0Nrc0lIUm9hWE11WVc1aGJIbHpaWEl1Wm1aMFUybDZaU0E5SUhRc0lIUm9hWE11WkdGMFlTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtIUm9hWE11WVc1aGJIbHpaWEl1Wm5KbGNYVmxibU41UW1sdVEyOTFiblFwTENCbExtZGxkRTkxZEhCMWRDZ3BMbU52Ym01bFkzUW9kR2hwY3k1aGJtRnNlWE5sY2lrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJHY21WeGRXVnVZM2xFWVhSaEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GdVlXeDVjMlZ5TG1kbGRFSjVkR1ZHY21WeGRXVnVZM2xFWVhSaEtIUm9hWE11WkdGMFlTa3NJSFJvYVhNdVpHRjBZVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFRjJaWEpoWjJWR2NtVnhkV1Z1WTNrb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQXdMQ0IwSUQwZ2RHaHBjeTVuWlhSR2NtVnhkV1Z1WTNsRVlYUmhLQ2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Ec2diaUE4SUhRdWJHVnVaM1JvT3lCdUt5c3BaU0FyUFNCMFcyNWRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxJQzhnZEM1c1pXNW5kR2c3Q2lBZ0lDQjlDbjBzSUVKaklEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVpYVc1a2FXNW5JRDBnWlN3Z2RHaHBjeTUyWVd4MVpWTnBlbVVnUFNCdU93b2dJQ0FnSUNBZ0lHeGxkQ0JwTENCeUxDQmhPd29nSUNBZ0lDQWdJSE4zYVhSamFDaDBLWHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpY1hWaGRHVnlibWx2YmlJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElEMGdkR2hwY3k1ZmMyeGxjbkFzSUhJZ1BTQjBhR2x6TGw5emJHVnljRUZrWkdsMGFYWmxMQ0JoSUQwZ2RHaHBjeTVmYzJWMFFXUmthWFJwZG1WSlpHVnVkR2wwZVZGMVlYUmxjbTVwYjI0c0lIUm9hWE11WW5WbVptVnlJRDBnYm1WM0lFWnNiMkYwTmpSQmNuSmhlU2h1SUNvZ05pa3NJSFJvYVhNdVgzZHZjbXRKYm1SbGVDQTlJRFU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWljM1J5YVc1bklqb0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlZbTl2YkNJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElEMGdkR2hwY3k1ZmMyVnNaV04wTENCeUlEMGdkR2hwY3k1ZmMyVnNaV04wTENCaElEMGdkR2hwY3k1ZmMyVjBRV1JrYVhScGRtVkpaR1Z1ZEdsMGVVOTBhR1Z5TENCMGFHbHpMbUoxWm1abGNpQTlJRzVsZHlCQmNuSmhlU2h1SUNvZ05TazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0IwYUdsekxsOXNaWEp3TENCeUlEMGdkR2hwY3k1ZmJHVnljRUZrWkdsMGFYWmxMQ0JoSUQwZ2RHaHBjeTVmYzJWMFFXUmthWFJwZG1WSlpHVnVkR2wwZVU1MWJXVnlhV01zSUhSb2FYTXVZblZtWm1WeUlEMGdibVYzSUVac2IyRjBOalJCY25KaGVTaHVJQ29nTlNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUm9hWE11WDIxcGVFSjFabVpsY2xKbFoybHZiaUE5SUdrc0lIUm9hWE11WDIxcGVFSjFabVpsY2xKbFoybHZia0ZrWkdsMGFYWmxJRDBnY2l3Z2RHaHBjeTVmYzJWMFNXUmxiblJwZEhrZ1BTQmhMQ0IwYUdsekxsOXZjbWxuU1c1a1pYZ2dQU0F6TENCMGFHbHpMbDloWkdSSmJtUmxlQ0E5SURRc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kQ0E5SURBc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kRUZrWkdsMGFYWmxJRDBnTUN3Z2RHaHBjeTUxYzJWRGIzVnVkQ0E5SURBc0lIUm9hWE11Y21WbVpYSmxibU5sUTI5MWJuUWdQU0F3T3dvZ0lDQWdmUW9nSUNBZ1lXTmpkVzExYkdGMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbUoxWm1abGNpd2dhU0E5SUhSb2FYTXVkbUZzZFdWVGFYcGxMQ0J5SUQwZ1pTQXFJR2tnS3lCcExDQmhJRDBnZEdocGN5NWpkVzExYkdGMGFYWmxWMlZwWjJoME93b2dJQ0FnSUNBZ0lHbG1JQ2hoSUQwOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREE3SUc4Z0lUMDlJR2s3SUNzcmJ5bHVXM0lnS3lCdlhTQTlJRzViYjEwN0NpQWdJQ0FnSUNBZ0lDQWdJR0VnUFNCME93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR0VnS3owZ2REc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0IwSUM4Z1lUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiV2w0UW5WbVptVnlVbVZuYVc5dUtHNHNJSElzSURBc0lHOHNJR2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbU4xYlhWc1lYUnBkbVZYWldsbmFIUWdQU0JoT3dvZ0lDQWdmUW9nSUNBZ1lXTmpkVzExYkdGMFpVRmtaR2wwYVhabEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVluVm1abVZ5TENCdUlEMGdkR2hwY3k1MllXeDFaVk5wZW1Vc0lHa2dQU0J1SUNvZ2RHaHBjeTVmWVdSa1NXNWtaWGc3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpkVzExYkdGMGFYWmxWMlZwWjJoMFFXUmthWFJwZG1VZ1BUMDlJREFnSmlZZ2RHaHBjeTVmYzJWMFNXUmxiblJwZEhrb0tTd2dkR2hwY3k1ZmJXbDRRblZtWm1WeVVtVm5hVzl1UVdSa2FYUnBkbVVvZEN3Z2FTd2dNQ3dnWlN3Z2Jpa3NJSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZEVGa1pHbDBhWFpsSUNzOUlHVTdDaUFnSUNCOUNpQWdJQ0JoY0hCc2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuWmhiSFZsVTJsNlpTd2diaUE5SUhSb2FYTXVZblZtWm1WeUxDQnBJRDBnWlNBcUlIUWdLeUIwTENCeUlEMGdkR2hwY3k1amRXMTFiR0YwYVhabFYyVnBaMmgwTENCaElEMGdkR2hwY3k1amRXMTFiR0YwYVhabFYyVnBaMmgwUVdSa2FYUnBkbVVzSUc4Z1BTQjBhR2x6TG1KcGJtUnBibWM3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kQ0E5SURBc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kRUZrWkdsMGFYWmxJRDBnTUN3Z2NpQThJREVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdNZ1BTQjBJQ29nZEdocGN5NWZiM0pwWjBsdVpHVjRPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0YVhoQ2RXWm1aWEpTWldkcGIyNG9iaXdnYVN3Z1l5d2dNU0F0SUhJc0lIUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JoSUQ0Z01DQW1KaUIwYUdsekxsOXRhWGhDZFdabVpYSlNaV2RwYjI1QlpHUnBkR2wyWlNodUxDQnBMQ0IwYUdsekxsOWhaR1JKYm1SbGVDQXFJSFFzSURFc0lIUXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZeUE5SUhRc0lHd2dQU0IwSUNzZ2REc2dZeUFoUFQwZ2JEc2dLeXRqS1dsbUlDaHVXMk5kSUNFOVBTQnVXMk1nS3lCMFhTa2dld29nSUNBZ0lDQWdJQ0FnSUNCdkxuTmxkRlpoYkhWbEtHNHNJR2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQnpZWFpsVDNKcFoybHVZV3hUZEdGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVltbHVaR2x1Wnl3Z2RDQTlJSFJvYVhNdVluVm1abVZ5TENCdUlEMGdkR2hwY3k1MllXeDFaVk5wZW1Vc0lHa2dQU0J1SUNvZ2RHaHBjeTVmYjNKcFowbHVaR1Y0T3dvZ0lDQWdJQ0FnSUdVdVoyVjBWbUZzZFdVb2RDd2dhU2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J5SUQwZ2Jpd2dZU0E5SUdrN0lISWdJVDA5SUdFN0lDc3JjaWwwVzNKZElEMGdkRnRwSUNzZ2NpQWxJRzVkT3dvZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEVsa1pXNTBhWFI1S0Nrc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kQ0E5SURBc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kRUZrWkdsMGFYWmxJRDBnTURzS0lDQWdJSDBLSUNBZ0lISmxjM1J2Y21WUGNtbG5hVzVoYkZOMFlYUmxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NTJZV3gxWlZOcGVtVWdLaUF6T3dvZ0lDQWdJQ0FnSUhSb2FYTXVZbWx1WkdsdVp5NXpaWFJXWVd4MVpTaDBhR2x6TG1KMVptWmxjaXdnWlNrN0NpQWdJQ0I5Q2lBZ0lDQmZjMlYwUVdSa2FYUnBkbVZKWkdWdWRHbDBlVTUxYldWeWFXTW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxsOWhaR1JKYm1SbGVDQXFJSFJvYVhNdWRtRnNkV1ZUYVhwbExDQjBJRDBnWlNBcklIUm9hWE11ZG1Gc2RXVlRhWHBsT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlHVTdJRzRnUENCME95QnVLeXNwZEdocGN5NWlkV1ptWlhKYmJsMGdQU0F3T3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRUZrWkdsMGFYWmxTV1JsYm5ScGRIbFJkV0YwWlhKdWFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEVGa1pHbDBhWFpsU1dSbGJuUnBkSGxPZFcxbGNtbGpLQ2tzSUhSb2FYTXVZblZtWm1WeVczUm9hWE11WDJGa1pFbHVaR1Y0SUNvZ2RHaHBjeTUyWVd4MVpWTnBlbVVnS3lBelhTQTlJREU3Q2lBZ0lDQjlDaUFnSUNCZmMyVjBRV1JrYVhScGRtVkpaR1Z1ZEdsMGVVOTBhR1Z5S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVmYjNKcFowbHVaR1Y0SUNvZ2RHaHBjeTUyWVd4MVpWTnBlbVVzSUhRZ1BTQjBhR2x6TGw5aFpHUkpibVJsZUNBcUlIUm9hWE11ZG1Gc2RXVlRhWHBsT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQTdJRzRnUENCMGFHbHpMblpoYkhWbFUybDZaVHNnYmlzcktYUm9hWE11WW5WbVptVnlXM1FnS3lCdVhTQTlJSFJvYVhNdVluVm1abVZ5VzJVZ0t5QnVYVHNLSUNBZ0lIMEtJQ0FnSUY5elpXeGxZM1FvWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ0lDQWdJR2xtSUNocElENDlJQzQxS1NCbWIzSW9iR1YwSUdFZ1BTQXdPeUJoSUNFOVBTQnlPeUFySzJFcFpWdDBJQ3NnWVYwZ1BTQmxXMjRnS3lCaFhUc0tJQ0FnSUgwS0lDQWdJRjl6YkdWeWNDaGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnVlhRdWMyeGxjbkJHYkdGMEtHVXNJSFFzSUdVc0lIUXNJR1VzSUc0c0lHa3BPd29nSUNBZ2ZRb2dJQ0FnWDNOc1pYSndRV1JrYVhScGRtVW9aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2RHaHBjeTVmZDI5eWEwbHVaR1Y0SUNvZ2Nqc0tJQ0FnSUNBZ0lDQlZkQzV0ZFd4MGFYQnNlVkYxWVhSbGNtNXBiMjV6Um14aGRDaGxMQ0JoTENCbExDQjBMQ0JsTENCdUtTd2dWWFF1YzJ4bGNuQkdiR0YwS0dVc0lIUXNJR1VzSUhRc0lHVXNJR0VzSUdrcE93b2dJQ0FnZlFvZ0lDQWdYMnhsY25Bb1pTd2dkQ3dnYml3Z2FTd2djaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnTVNBdElHazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnZJRDBnTURzZ2J5QWhQVDBnY2pzZ0t5dHZLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCMElDc2dienNLSUNBZ0lDQWdJQ0FnSUNBZ1pWdGpYU0E5SUdWYlkxMGdLaUJoSUNzZ1pWdHVJQ3NnYjEwZ0tpQnBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUY5c1pYSndRV1JrYVhScGRtVW9aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREE3SUdFZ0lUMDlJSEk3SUNzcllTbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZENBcklHRTdDaUFnSUNBZ0lDQWdJQ0FnSUdWYmIxMGdQU0JsVzI5ZElDc2daVnR1SUNzZ1lWMGdLaUJwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlN3Z1MyTWdQU0FpWEZ4YlhGeGRYRnd1T2x4Y0x5SXNJRko0SUQwZ2JtVjNJRkpsWjBWNGNDZ2lXeUlnS3lCTFl5QXJJQ0pkSWl3Z0ltY2lLU3dnVVdNZ1BTQWlXMTRpSUNzZ1MyTWdLeUFpWFNJc0lFTjRJRDBnSWx0ZUlpQXJJRXRqTG5KbGNHeGhZMlVvSWx4Y0xpSXNJQ0lpS1NBcklDSmRJaXdnVUhnZ1BTQXZLQ2cvT2xkREsxdGNMenBkS1NvcEx5NXpiM1Z5WTJVdWNtVndiR0ZqWlNnaVYwTWlMQ0JSWXlrc0lFeDRJRDBnTHloWFEwOUVLeWsvTHk1emIzVnlZMlV1Y21Wd2JHRmpaU2dpVjBOUFJDSXNJRU40S1N3Z1NYZ2dQU0F2S0Q4NlhDNG9WME1yS1NnL09seGJLQzRyS1Z4ZEtUOHBQeTh1YzI5MWNtTmxMbkpsY0d4aFkyVW9JbGRESWl3Z1VXTXBMQ0JWZUNBOUlDOWNMaWhYUXlzcEtEODZYRnNvTGlzcFhGMHBQeTh1YzI5MWNtTmxMbkpsY0d4aFkyVW9JbGRESWl3Z1VXTXBMQ0JFZUNBOUlHNWxkeUJTWldkRmVIQW9JbDRpSUNzZ1VIZ2dLeUJNZUNBcklFbDRJQ3NnVlhnZ0t5QWlKQ0lwTENCT2VDQTlJRnNLSUNBZ0lDSnRZWFJsY21saGJDSXNDaUFnSUNBaWJXRjBaWEpwWVd4eklpd0tJQ0FnSUNKaWIyNWxjeUlzQ2lBZ0lDQWliV0Z3SWdwZExDQjZZeUE5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJR3hsZENCcElEMGdiaUI4ZkNCTFpTNXdZWEp6WlZSeVlXTnJUbUZ0WlNoMEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5MFlYSm5aWFJIY205MWNDQTlJR1VzSUhSb2FYTXVYMkpwYm1ScGJtZHpJRDBnWlM1emRXSnpZM0pwWW1WZktIUXNJR2twT3dvZ0lDQWdmUW9nSUNBZ1oyVjBWbUZzZFdVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVZbWx1WkNncE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVmZEdGeVoyVjBSM0p2ZFhBdWJrTmhZMmhsWkU5aWFtVmpkSE5mTENCcElEMGdkR2hwY3k1ZlltbHVaR2x1WjNOYmJsMDdDaUFnSUNBZ0lDQWdhU0FoUFQwZ2RtOXBaQ0F3SUNZbUlHa3VaMlYwVm1Gc2RXVW9aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJXWVd4MVpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbDlpYVc1a2FXNW5jenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnUFNCMGFHbHpMbDkwWVhKblpYUkhjbTkxY0M1dVEyRmphR1ZrVDJKcVpXTjBjMThzSUhJZ1BTQnVMbXhsYm1kMGFEc2dhU0FoUFQwZ2Nqc2dLeXRwS1c1YmFWMHVjMlYwVm1Gc2RXVW9aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQmlhVzVrS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVmWW1sdVpHbHVaM003Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ2RHaHBjeTVmZEdGeVoyVjBSM0p2ZFhBdWJrTmhZMmhsWkU5aWFtVmpkSE5mTENCdUlEMGdaUzVzWlc1bmRHZzdJSFFnSVQwOUlHNDdJQ3NyZENsbFczUmRMbUpwYm1Rb0tUc0tJQ0FnSUgwS0lDQWdJSFZ1WW1sdVpDZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVgySnBibVJwYm1kek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJSFJvYVhNdVgzUmhjbWRsZEVkeWIzVndMbTVEWVdOb1pXUlBZbXBsWTNSelh5d2diaUE5SUdVdWJHVnVaM1JvT3lCMElDRTlQU0J1T3lBckszUXBaVnQwWFM1MWJtSnBibVFvS1RzS0lDQWdJSDBLZlN3Z1MyVWdQU0JqYkdGemN5QnpNU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVLWHNLSUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2dnUFNCMExDQjBhR2x6TG5CaGNuTmxaRkJoZEdnZ1BTQnVJSHg4SUhNeExuQmhjbk5sVkhKaFkydE9ZVzFsS0hRcExDQjBhR2x6TG01dlpHVWdQU0J6TVM1bWFXNWtUbTlrWlNobExDQjBhR2x6TG5CaGNuTmxaRkJoZEdndWJtOWtaVTVoYldVcExDQjBhR2x6TG5KdmIzUk9iMlJsSUQwZ1pTd2dkR2hwY3k1blpYUldZV3gxWlNBOUlIUm9hWE11WDJkbGRGWmhiSFZsWDNWdVltOTFibVFzSUhSb2FYTXVjMlYwVm1Gc2RXVWdQU0IwYUdsekxsOXpaWFJXWVd4MVpWOTFibUp2ZFc1a093b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHTnlaV0YwWlNobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVZ0ppWWdaUzVwYzBGdWFXMWhkR2x2Yms5aWFtVmpkRWR5YjNWd0lEOGdibVYzSUhNeExrTnZiWEJ2YzJsMFpTaGxMQ0IwTENCdUtTQTZJRzVsZHlCek1TaGxMQ0IwTENCdUtUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5QnpZVzVwZEdsNlpVNXZaR1ZPWVcxbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV5WlhCc1lXTmxLQzljY3k5bkxDQWlYeUlwTG5KbGNHeGhZMlVvVW5nc0lDSWlLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJ3WVhKelpWUnlZV05yVG1GdFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JFZUM1bGVHVmpLR1VwT3dvZ0lDQWdJQ0FnSUdsbUlDaDBJRDA5UFNCdWRXeHNLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9JbEJ5YjNCbGNuUjVRbWx1WkdsdVp6b2dRMkZ1Ym05MElIQmhjbk5sSUhSeVlXTnJUbUZ0WlRvZ0lpQXJJR1VwT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnViMlJsVG1GdFpUb2dkRnN5WFN3S0lDQWdJQ0FnSUNBZ0lDQWdiMkpxWldOMFRtRnRaVG9nZEZzelhTd0tJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBTVzVrWlhnNklIUmJORjBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNVRtRnRaVG9nZEZzMVhTd0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkSGxKYm1SbGVEb2dkRnMyWFFvZ0lDQWdJQ0FnSUgwc0lHa2dQU0J1TG01dlpHVk9ZVzFsSUNZbUlHNHVibTlrWlU1aGJXVXViR0Z6ZEVsdVpHVjRUMllvSWk0aUtUc0tJQ0FnSUNBZ0lDQnBaaUFvYVNBaFBUMGdkbTlwWkNBd0lDWW1JR2tnSVQwOUlDMHhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2JpNXViMlJsVG1GdFpTNXpkV0p6ZEhKcGJtY29hU0FySURFcE93b2dJQ0FnSUNBZ0lDQWdJQ0JPZUM1cGJtUmxlRTltS0hJcElDRTlQU0F0TVNBbUppQW9iaTV1YjJSbFRtRnRaU0E5SUc0dWJtOWtaVTVoYldVdWMzVmljM1J5YVc1bktEQXNJR2twTENCdUxtOWlhbVZqZEU1aGJXVWdQU0J5S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLRzR1Y0hKdmNHVnlkSGxPWVcxbElEMDlQU0J1ZFd4c0lIeDhJRzR1Y0hKdmNHVnlkSGxPWVcxbExteGxibWQwYUNBOVBUMGdNQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pRY205d1pYSjBlVUpwYm1ScGJtYzZJR05oYmlCdWIzUWdjR0Z5YzJVZ2NISnZjR1Z5ZEhsT1lXMWxJR1p5YjIwZ2RISmhZMnRPWVcxbE9pQWlJQ3NnWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0N0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1ptbHVaRTV2WkdVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBJRDA5UFNCMmIybGtJREFnZkh3Z2RDQTlQVDBnSWlJZ2ZId2dkQ0E5UFQwZ0lpNGlJSHg4SUhRZ1BUMDlJQzB4SUh4OElIUWdQVDA5SUdVdWJtRnRaU0I4ZkNCMElEMDlQU0JsTG5WMWFXUXBJSEpsZEhWeWJpQmxPd29nSUNBZ0lDQWdJR2xtSUNobExuTnJaV3hsZEc5dUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlM1emEyVnNaWFJ2Ymk1blpYUkNiMjVsUW5sT1lXMWxLSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYmlBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2Jqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0dVdVkyaHBiR1J5Wlc0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNGdQU0JtZFc1amRHbHZiaWh5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdFZ1BTQXdPeUJoSUR3Z2NpNXNaVzVuZEdnN0lHRXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCeVcyRmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZMbTVoYldVZ1BUMDlJSFFnZkh3Z2J5NTFkV2xrSUQwOVBTQjBLU0J5WlhSMWNtNGdienNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc0b2J5NWphR2xzWkhKbGJpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTXBJSEpsZEhWeWJpQmpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNJR2tnUFNCdUtHVXVZMmhwYkdSeVpXNHBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU2tnY21WMGRYSnVJR2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c093b2dJQ0FnZlFvZ0lDQWdYMmRsZEZaaGJIVmxYM1Z1WVhaaGFXeGhZbXhsS0NrZ2UzMEtJQ0FnSUY5elpYUldZV3gxWlY5MWJtRjJZV2xzWVdKc1pTZ3BJSHQ5Q2lBZ0lDQmZaMlYwVm1Gc2RXVmZaR2x5WldOMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCbFczUmRJRDBnZEdocGN5NTBZWEpuWlhSUFltcGxZM1JiZEdocGN5NXdjbTl3WlhKMGVVNWhiV1ZkT3dvZ0lDQWdmUW9nSUNBZ1gyZGxkRlpoYkhWbFgyRnljbUY1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdWNtVnpiMngyWldSUWNtOXdaWEowZVRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ1BTQXdMQ0J5SUQwZ2JpNXNaVzVuZEdnN0lHa2dJVDA5SUhJN0lDc3JhU2xsVzNRcksxMGdQU0J1VzJsZE93b2dJQ0FnZlFvZ0lDQWdYMmRsZEZaaGJIVmxYMkZ5Y21GNVJXeGxiV1Z1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnWlZ0MFhTQTlJSFJvYVhNdWNtVnpiMngyWldSUWNtOXdaWEowZVZ0MGFHbHpMbkJ5YjNCbGNuUjVTVzVrWlhoZE93b2dJQ0FnZlFvZ0lDQWdYMmRsZEZaaGJIVmxYM1J2UVhKeVlYa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11Y21WemIyeDJaV1JRY205d1pYSjBlUzUwYjBGeWNtRjVLR1VzSUhRcE93b2dJQ0FnZlFvZ0lDQWdYM05sZEZaaGJIVmxYMlJwY21WamRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUlBZbXBsWTNSYmRHaHBjeTV3Y205d1pYSjBlVTVoYldWZElEMGdaVnQwWFRzS0lDQWdJSDBLSUNBZ0lGOXpaWFJXWVd4MVpWOWthWEpsWTNSZmMyVjBUbVZsWkhOVmNHUmhkR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBXM1JvYVhNdWNISnZjR1Z5ZEhsT1lXMWxYU0E5SUdWYmRGMHNJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBMbTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNCOUNpQWdJQ0JmYzJWMFZtRnNkV1ZmWkdseVpXTjBYM05sZEUxaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZEdGeVoyVjBUMkpxWldOMFczUm9hWE11Y0hKdmNHVnlkSGxPWVcxbFhTQTlJR1ZiZEYwc0lIUm9hWE11ZEdGeVoyVjBUMkpxWldOMExtMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VnUFNBaE1Ec0tJQ0FnSUgwS0lDQWdJRjl6WlhSV1lXeDFaVjloY25KaGVTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJRzR1YkdWdVozUm9PeUJwSUNFOVBTQnlPeUFySzJrcGJsdHBYU0E5SUdWYmRDc3JYVHNLSUNBZ0lIMEtJQ0FnSUY5elpYUldZV3gxWlY5aGNuSmhlVjl6WlhST1pXVmtjMVZ3WkdGMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJRzR1YkdWdVozUm9PeUJwSUNFOVBTQnlPeUFySzJrcGJsdHBYU0E5SUdWYmRDc3JYVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQzV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWDNObGRGWmhiSFZsWDJGeWNtRjVYM05sZEUxaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTV5WlhOdmJIWmxaRkJ5YjNCbGNuUjVPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0J1TG14bGJtZDBhRHNnYVNBaFBUMGdjanNnS3l0cEtXNWJhVjBnUFNCbFczUXJLMTA3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhSUFltcGxZM1F1YldGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpTQTlJQ0V3T3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRlpoYkhWbFgyRnljbUY1Uld4bGJXVnVkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTnZiSFpsWkZCeWIzQmxjblI1VzNSb2FYTXVjSEp2Y0dWeWRIbEpibVJsZUYwZ1BTQmxXM1JkT3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRlpoYkhWbFgyRnljbUY1Uld4bGJXVnVkRjl6WlhST1pXVmtjMVZ3WkdGMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOdmJIWmxaRkJ5YjNCbGNuUjVXM1JvYVhNdWNISnZjR1Z5ZEhsSmJtUmxlRjBnUFNCbFczUmRMQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQzV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWDNObGRGWmhiSFZsWDJGeWNtRjVSV3hsYldWdWRGOXpaWFJOWVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIbGJkR2hwY3k1d2NtOXdaWEowZVVsdVpHVjRYU0E5SUdWYmRGMHNJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBMbTFoZEhKcGVGZHZjbXhrVG1WbFpITlZjR1JoZEdVZ1BTQWhNRHNLSUNBZ0lIMEtJQ0FnSUY5elpYUldZV3gxWlY5bWNtOXRRWEp5WVhrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6YjJ4MlpXUlFjbTl3WlhKMGVTNW1jbTl0UVhKeVlYa29aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQmZjMlYwVm1Gc2RXVmZabkp2YlVGeWNtRjVYM05sZEU1bFpXUnpWWEJrWVhSbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIa3Vabkp2YlVGeWNtRjVLR1VzSUhRcExDQjBhR2x6TG5SaGNtZGxkRTlpYW1WamRDNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnZlFvZ0lDQWdYM05sZEZaaGJIVmxYMlp5YjIxQmNuSmhlVjl6WlhSTllYUnlhWGhYYjNKc1pFNWxaV1J6VlhCa1lYUmxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGt1Wm5KdmJVRnljbUY1S0dVc0lIUXBMQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQzV0WVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDaUFnSUNCZloyVjBWbUZzZFdWZmRXNWliM1Z1WkNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWlhVzVrS0Nrc0lIUm9hWE11WjJWMFZtRnNkV1VvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0JmYzJWMFZtRnNkV1ZmZFc1aWIzVnVaQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1aWFXNWtLQ2tzSUhSb2FYTXVjMlYwVm1Gc2RXVW9aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQmlhVzVrS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTV1YjJSbExDQjBJRDBnZEdocGN5NXdZWEp6WldSUVlYUm9MQ0J1SUQwZ2RDNXZZbXBsWTNST1lXMWxMQ0JwSUQwZ2RDNXdjbTl3WlhKMGVVNWhiV1VzSUhJZ1BTQjBMbkJ5YjNCbGNuUjVTVzVrWlhnN0NpQWdJQ0FnSUNBZ2FXWWdLR1VnZkh3Z0tHVWdQU0J6TVM1bWFXNWtUbTlrWlNoMGFHbHpMbkp2YjNST2IyUmxMQ0IwTG01dlpHVk9ZVzFsS1N3Z2RHaHBjeTV1YjJSbElEMGdaU2tzSUhSb2FYTXVaMlYwVm1Gc2RXVWdQU0IwYUdsekxsOW5aWFJXWVd4MVpWOTFibUYyWVdsc1lXSnNaU3dnZEdocGN5NXpaWFJXWVd4MVpTQTlJSFJvYVhNdVgzTmxkRlpoYkhWbFgzVnVZWFpoYVd4aFlteGxMQ0FoWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nVG04Z2RHRnlaMlYwSUc1dlpHVWdabTkxYm1RZ1ptOXlJSFJ5WVdOck9pQWlJQ3NnZEdocGN5NXdZWFJvSUNzZ0lpNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9iaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlIUXViMkpxWldOMFNXNWtaWGc3Q2lBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNodUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSW0xaGRHVnlhV0ZzY3lJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbExtMWhkR1Z5YVdGc0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbEJ5YjNCbGNuUjVRbWx1WkdsdVp6b2dRMkZ1SUc1dmRDQmlhVzVrSUhSdklHMWhkR1Z5YVdGc0lHRnpJRzV2WkdVZ1pHOWxjeUJ1YjNRZ2FHRjJaU0JoSUcxaGRHVnlhV0ZzTGlJc0lIUm9hWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWlM1dFlYUmxjbWxoYkM1dFlYUmxjbWxoYkhNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVSEp2Y0dWeWRIbENhVzVrYVc1bk9pQkRZVzRnYm05MElHSnBibVFnZEc4Z2JXRjBaWEpwWVd3dWJXRjBaWEpwWVd4eklHRnpJRzV2WkdVdWJXRjBaWEpwWVd3Z1pHOWxjeUJ1YjNRZ2FHRjJaU0JoSUcxaGRHVnlhV0ZzY3lCaGNuSmhlUzRpTENCMGFHbHpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbElEMGdaUzV0WVhSbGNtbGhiQzV0WVhSbGNtbGhiSE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSmliMjVsY3lJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbExuTnJaV3hsZEc5dUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbEJ5YjNCbGNuUjVRbWx1WkdsdVp6b2dRMkZ1SUc1dmRDQmlhVzVrSUhSdklHSnZibVZ6SUdGeklHNXZaR1VnWkc5bGN5QnViM1FnYUdGMlpTQmhJSE5yWld4bGRHOXVMaUlzSUhSb2FYTXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVZ1BTQmxMbk5yWld4bGRHOXVMbUp2Ym1Wek93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdhQ0E5SURBN0lHZ2dQQ0JsTG14bGJtZDBhRHNnYUNzcktXbG1JQ2hsVzJoZExtNWhiV1VnUFQwOUlHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiQ0E5SUdnN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbTFoY0NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NKdFlYQWlJR2x1SUdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTQTlJR1V1YldGd093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbExtMWhkR1Z5YVdGc0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbEJ5YjNCbGNuUjVRbWx1WkdsdVp6b2dRMkZ1SUc1dmRDQmlhVzVrSUhSdklHMWhkR1Z5YVdGc0lHRnpJRzV2WkdVZ1pHOWxjeUJ1YjNRZ2FHRjJaU0JoSUcxaGRHVnlhV0ZzTGlJc0lIUm9hWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWlM1dFlYUmxjbWxoYkM1dFlYQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VUhKdmNHVnlkSGxDYVc1a2FXNW5PaUJEWVc0Z2JtOTBJR0pwYm1RZ2RHOGdiV0YwWlhKcFlXd3ViV0Z3SUdGeklHNXZaR1V1YldGMFpYSnBZV3dnWkc5bGN5QnViM1FnYUdGMlpTQmhJRzFoY0M0aUxDQjBhR2x6S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnWlM1dFlYUmxjbWxoYkM1dFlYQTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobFcyNWRJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVVISnZjR1Z5ZEhsQ2FXNWthVzVuT2lCRFlXNGdibTkwSUdKcGJtUWdkRzhnYjJKcVpXTjBUbUZ0WlNCdlppQnViMlJsSUhWdVpHVm1hVzVsWkM0aUxDQjBhR2x6S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnWlZ0dVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkNBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlZ0c1hTQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVSEp2Y0dWeWRIbENhVzVrYVc1bk9pQlVjbmxwYm1jZ2RHOGdZbWx1WkNCMGJ5QnZZbXBsWTNSSmJtUmxlQ0J2WmlCdlltcGxZM1JPWVcxbExDQmlkWFFnYVhNZ2RXNWtaV1pwYm1Wa0xpSXNJSFJvYVhNc0lHVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1VnUFNCbFcyeGRPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ1pWdHBYVHNLSUNBZ0lDQWdJQ0JwWmlBb1lTQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ2RDNXViMlJsVG1GdFpUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVVISnZjR1Z5ZEhsQ2FXNWthVzVuT2lCVWNubHBibWNnZEc4Z2RYQmtZWFJsSUhCeWIzQmxjblI1SUdadmNpQjBjbUZqYXpvZ0lpQXJJR3dnS3lBaUxpSWdLeUJwSUNzZ0lpQmlkWFFnYVhRZ2QyRnpiaWQwSUdadmRXNWtMaUlzSUdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCdklEMGdkR2hwY3k1V1pYSnphVzl1YVc1bkxrNXZibVU3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhSUFltcGxZM1FnUFNCbExDQmxMbTVsWldSelZYQmtZWFJsSUNFOVBTQjJiMmxrSURBZ1B5QnZJRDBnZEdocGN5NVdaWEp6YVc5dWFXNW5MazVsWldSelZYQmtZWFJsSURvZ1pTNXRZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzhnUFNCMGFHbHpMbFpsY25OcGIyNXBibWN1VFdGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpTazdDaUFnSUNBZ0lDQWdiR1YwSUdNZ1BTQjBhR2x6TGtKcGJtUnBibWRVZVhCbExrUnBjbVZqZERzS0lDQWdJQ0FnSUNCcFppQW9jaUFoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElEMDlQU0FpYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklpa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbExtZGxiMjFsZEhKNUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVVISnZjR1Z5ZEhsQ2FXNWthVzVuT2lCRFlXNGdibTkwSUdKcGJtUWdkRzhnYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklHSmxZMkYxYzJVZ2JtOWtaU0JrYjJWeklHNXZkQ0JvWVhabElHRWdaMlZ2YldWMGNua3VJaXdnZEdocGN5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbExtZGxiMjFsZEhKNUxtMXZjbkJvUVhSMGNtbGlkWFJsY3lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nUTJGdUlHNXZkQ0JpYVc1a0lIUnZJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sY3lCaVpXTmhkWE5sSUc1dlpHVWdaRzlsY3lCdWIzUWdhR0YyWlNCaElHZGxiMjFsZEhKNUxtMXZjbkJvUVhSMGNtbGlkWFJsY3k0aUxDQjBhR2x6S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExtMXZjbkJvVkdGeVoyVjBSR2xqZEdsdmJtRnllVnR5WFNBaFBUMGdkbTlwWkNBd0lDWW1JQ2h5SUQwZ1pTNXRiM0p3YUZSaGNtZGxkRVJwWTNScGIyNWhjbmxiY2wwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHTWdQU0IwYUdsekxrSnBibVJwYm1kVWVYQmxMa0Z5Y21GNVJXeGxiV1Z1ZEN3Z2RHaHBjeTV5WlhOdmJIWmxaRkJ5YjNCbGNuUjVJRDBnWVN3Z2RHaHBjeTV3Y205d1pYSjBlVWx1WkdWNElEMGdjanNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdZUzVtY205dFFYSnlZWGtnSVQwOUlIWnZhV1FnTUNBbUppQmhMblJ2UVhKeVlYa2dJVDA5SUhadmFXUWdNQ0EvSUNoaklEMGdkR2hwY3k1Q2FXNWthVzVuVkhsd1pTNUlZWE5HY205dFZHOUJjbkpoZVN3Z2RHaHBjeTV5WlhOdmJIWmxaRkJ5YjNCbGNuUjVJRDBnWVNrZ09pQkJjbkpoZVM1cGMwRnljbUY1S0dFcElEOGdLR01nUFNCMGFHbHpMa0pwYm1ScGJtZFVlWEJsTGtWdWRHbHlaVUZ5Y21GNUxDQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGtnUFNCaEtTQTZJSFJvYVhNdWNISnZjR1Z5ZEhsT1lXMWxJRDBnYVRzS0lDQWdJQ0FnSUNCMGFHbHpMbWRsZEZaaGJIVmxJRDBnZEdocGN5NUhaWFIwWlhKQ2VVSnBibVJwYm1kVWVYQmxXMk5kTENCMGFHbHpMbk5sZEZaaGJIVmxJRDBnZEdocGN5NVRaWFIwWlhKQ2VVSnBibVJwYm1kVWVYQmxRVzVrVm1WeWMybHZibWx1WjF0alhWdHZYVHNLSUNBZ0lIMEtJQ0FnSUhWdVltbHVaQ2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTV2WkdVZ1BTQnVkV3hzTENCMGFHbHpMbWRsZEZaaGJIVmxJRDBnZEdocGN5NWZaMlYwVm1Gc2RXVmZkVzVpYjNWdVpDd2dkR2hwY3k1elpYUldZV3gxWlNBOUlIUm9hWE11WDNObGRGWmhiSFZsWDNWdVltOTFibVE3Q2lBZ0lDQjlDbjA3Q2t0bExrTnZiWEJ2YzJsMFpTQTlJSHBqT3dwTFpTNXdjbTkwYjNSNWNHVXVRbWx1WkdsdVoxUjVjR1VnUFNCN0NpQWdJQ0JFYVhKbFkzUTZJREFzQ2lBZ0lDQkZiblJwY21WQmNuSmhlVG9nTVN3S0lDQWdJRUZ5Y21GNVJXeGxiV1Z1ZERvZ01pd0tJQ0FnSUVoaGMwWnliMjFVYjBGeWNtRjVPaUF6Q24wN0NrdGxMbkJ5YjNSdmRIbHdaUzVXWlhKemFXOXVhVzVuSUQwZ2V3b2dJQ0FnVG05dVpUb2dNQ3dLSUNBZ0lFNWxaV1J6VlhCa1lYUmxPaUF4TEFvZ0lDQWdUV0YwY21sNFYyOXliR1JPWldWa2MxVndaR0YwWlRvZ01ncDlPd3BMWlM1d2NtOTBiM1I1Y0dVdVIyVjBkR1Z5UW5sQ2FXNWthVzVuVkhsd1pTQTlJRnNLSUNBZ0lFdGxMbkJ5YjNSdmRIbHdaUzVmWjJWMFZtRnNkV1ZmWkdseVpXTjBMQW9nSUNBZ1MyVXVjSEp2ZEc5MGVYQmxMbDluWlhSV1lXeDFaVjloY25KaGVTd0tJQ0FnSUV0bExuQnliM1J2ZEhsd1pTNWZaMlYwVm1Gc2RXVmZZWEp5WVhsRmJHVnRaVzUwTEFvZ0lDQWdTMlV1Y0hKdmRHOTBlWEJsTGw5blpYUldZV3gxWlY5MGIwRnljbUY1Q2wwN0NrdGxMbkJ5YjNSdmRIbHdaUzVUWlhSMFpYSkNlVUpwYm1ScGJtZFVlWEJsUVc1a1ZtVnljMmx2Ym1sdVp5QTlJRnNLSUNBZ0lGc0tJQ0FnSUNBZ0lDQkxaUzV3Y205MGIzUjVjR1V1WDNObGRGWmhiSFZsWDJScGNtVmpkQ3dLSUNBZ0lDQWdJQ0JMWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyUnBjbVZqZEY5elpYUk9aV1ZrYzFWd1pHRjBaU3dLSUNBZ0lDQWdJQ0JMWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyUnBjbVZqZEY5elpYUk5ZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsQ2lBZ0lDQmRMQW9nSUNBZ1d3b2dJQ0FnSUNBZ0lFdGxMbkJ5YjNSdmRIbHdaUzVmYzJWMFZtRnNkV1ZmWVhKeVlYa3NDaUFnSUNBZ0lDQWdTMlV1Y0hKdmRHOTBlWEJsTGw5elpYUldZV3gxWlY5aGNuSmhlVjl6WlhST1pXVmtjMVZ3WkdGMFpTd0tJQ0FnSUNBZ0lDQkxaUzV3Y205MGIzUjVjR1V1WDNObGRGWmhiSFZsWDJGeWNtRjVYM05sZEUxaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVUtJQ0FnSUYwc0NpQWdJQ0JiQ2lBZ0lDQWdJQ0FnUzJVdWNISnZkRzkwZVhCbExsOXpaWFJXWVd4MVpWOWhjbkpoZVVWc1pXMWxiblFzQ2lBZ0lDQWdJQ0FnUzJVdWNISnZkRzkwZVhCbExsOXpaWFJXWVd4MVpWOWhjbkpoZVVWc1pXMWxiblJmYzJWMFRtVmxaSE5WY0dSaGRHVXNDaUFnSUNBZ0lDQWdTMlV1Y0hKdmRHOTBlWEJsTGw5elpYUldZV3gxWlY5aGNuSmhlVVZzWlcxbGJuUmZjMlYwVFdGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpRb2dJQ0FnWFN3S0lDQWdJRnNLSUNBZ0lDQWdJQ0JMWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyWnliMjFCY25KaGVTd0tJQ0FnSUNBZ0lDQkxaUzV3Y205MGIzUjVjR1V1WDNObGRGWmhiSFZsWDJaeWIyMUJjbkpoZVY5elpYUk9aV1ZrYzFWd1pHRjBaU3dLSUNBZ0lDQWdJQ0JMWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyWnliMjFCY25KaGVWOXpaWFJOWVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbENpQWdJQ0JkQ2wwN0NuWmhjaUJTZFNBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwYzBGdWFXMWhkR2x2Yms5aWFtVmpkRWR5YjNWd0lEMGdJVEFzSUhSb2FYTXVkWFZwWkNBOUlHdDBLQ2tzSUhSb2FYTXVYMjlpYW1WamRITWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1wTENCMGFHbHpMbTVEWVdOb1pXUlBZbXBsWTNSelh5QTlJREE3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0I3ZlRzS0lDQWdJQ0FnSUNCMGFHbHpMbDlwYm1ScFkyVnpRbmxWVlVsRUlEMGdaVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYmlBaFBUMGdhVHNnS3l0dUtXVmJZWEpuZFcxbGJuUnpXMjVkTG5WMWFXUmRJRDBnYmpzS0lDQWdJQ0FnSUNCMGFHbHpMbDl3WVhSb2N5QTlJRnRkTENCMGFHbHpMbDl3WVhKelpXUlFZWFJvY3lBOUlGdGRMQ0IwYUdsekxsOWlhVzVrYVc1bmN5QTlJRnRkTENCMGFHbHpMbDlpYVc1a2FXNW5jMGx1WkdsalpYTkNlVkJoZEdnZ1BTQjdmVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMGN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2IySnFaV04wY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVjBJSFJ2ZEdGc0lDZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1ZmIySnFaV04wY3k1c1pXNW5kR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJWMElHbHVWWE5sSUNncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MGIzUmhiQ0F0SUhRdWJrTmhZMmhsWkU5aWFtVmpkSE5mT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCblpYUWdZbWx1WkdsdVozTlFaWEpQWW1wbFkzUWdLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1WDJKcGJtUnBibWR6TG14bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMDdDaUFnSUNCOUNpQWdJQ0JoWkdRb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TGw5dlltcGxZM1J6TENCMElEMGdkR2hwY3k1ZmFXNWthV05sYzBKNVZWVkpSQ3dnYmlBOUlIUm9hWE11WDNCaGRHaHpMQ0JwSUQwZ2RHaHBjeTVmY0dGeWMyVmtVR0YwYUhNc0lISWdQU0IwYUdsekxsOWlhVzVrYVc1bmN5d2dZU0E5SUhJdWJHVnVaM1JvTENCdkxDQmpJRDBnWlM1c1pXNW5kR2dzSUd3Z1BTQjBhR2x6TG01RFlXTm9aV1JQWW1wbFkzUnpYenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2dnUFNBd0xDQjFJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYUNBaFBUMGdkVHNnS3l0b0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JoY21kMWJXVnVkSE5iYUYwc0lHWWdQU0JrTG5WMWFXUXNJRzBnUFNCMFcyWmRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9iU0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdElEMGdZeXNyTENCMFcyWmRJRDBnYlN3Z1pTNXdkWE5vS0dRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCZklEMGdNQ3dnWnlBOUlHRTdJRjhnSVQwOUlHYzdJQ3NyWHlseVcxOWRMbkIxYzJnb2JtVjNJRXRsS0dRc0lHNWJYMTBzSUdsYlgxMHBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHRJRHdnYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJR1ZiYlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdYeUE5SUMwdGJDd2daeUE5SUdWYlgxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBXMmN1ZFhWcFpGMGdQU0J0TENCbFcyMWRJRDBnWnl3Z2RGdG1YU0E5SUY4c0lHVmJYMTBnUFNCa093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCd0lEMGdNQ3dnZGlBOUlHRTdJSEFnSVQwOUlIWTdJQ3NyY0NsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhnZ1BTQnlXM0JkTENCNUlEMGdlRnRmWFN3Z1lpQTlJSGhiYlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRnR0WFNBOUlIa3NJR0lnUFQwOUlIWnZhV1FnTUNBbUppQW9ZaUE5SUc1bGR5QkxaU2hrTENCdVczQmRMQ0JwVzNCZEtTa3NJSGhiWDEwZ1BTQmlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnWlZ0dFhTQWhQVDBnYnlBbUppQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVCYm1sdFlYUnBiMjVQWW1wbFkzUkhjbTkxY0RvZ1JHbG1abVZ5Wlc1MElHOWlhbVZqZEhNZ2QybDBhQ0IwYUdVZ2MyRnRaU0JWVlVsRUlHUmxkR1ZqZEdWa0xpQkRiR1ZoYmlCMGFHVWdZMkZqYUdWeklHOXlJSEpsWTNKbFlYUmxJSGx2ZFhJZ2FXNW1jbUZ6ZEhKMVkzUjFjbVVnZDJobGJpQnlaV3h2WVdScGJtY2djMk5sYm1WekxpSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxtNURZV05vWldSUFltcGxZM1J6WHlBOUlHdzdDaUFnSUNCOUNpQWdJQ0J5WlcxdmRtVW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxsOXZZbXBsWTNSekxDQjBJRDBnZEdocGN5NWZhVzVrYVdObGMwSjVWVlZKUkN3Z2JpQTlJSFJvYVhNdVgySnBibVJwYm1kekxDQnBJRDBnYmk1c1pXNW5kR2dzSUhJZ1BTQjBhR2x6TG01RFlXTm9aV1JQWW1wbFkzUnpYenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR0VnUFNBd0xDQnZJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnWVNBaFBUMGdienNnS3l0aEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTWdQU0JoY21kMWJXVnVkSE5iWVYwc0lHd2dQU0JqTG5WMWFXUXNJR2dnUFNCMFcyeGRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlHZ2dQajBnY2lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCeUt5c3NJR1FnUFNCbFczVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRnRrTG5WMWFXUmRJRDBnYUN3Z1pWdG9YU0E5SUdRc0lIUmJiRjBnUFNCMUxDQmxXM1ZkSUQwZ1l6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ppQTlJREFzSUcwZ1BTQnBPeUJtSUNFOVBTQnRPeUFySzJZcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCZklEMGdibHRtWFN3Z1p5QTlJRjliZFYwc0lIQWdQU0JmVzJoZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjliYUYwZ1BTQm5MQ0JmVzNWZElEMGdjRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG01RFlXTm9aV1JQWW1wbFkzUnpYeUE5SUhJN0NpQWdJQ0I5Q2lBZ0lDQjFibU5oWTJobEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1ZmIySnFaV04wY3l3Z2RDQTlJSFJvYVhNdVgybHVaR2xqWlhOQ2VWVlZTVVFzSUc0Z1BTQjBhR2x6TGw5aWFXNWthVzVuY3l3Z2FTQTlJRzR1YkdWdVozUm9MQ0J5SUQwZ2RHaHBjeTV1UTJGamFHVmtUMkpxWldOMGMxOHNJR0VnUFNCbExteGxibWQwYURzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc4Z1BTQXdMQ0JqSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2J5QWhQVDBnWXpzZ0t5dHZLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCaGNtZDFiV1Z1ZEhOYmIxMHNJR2dnUFNCc0xuVjFhV1FzSUhVZ1BTQjBXMmhkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZFNBaFBUMGdkbTlwWkNBd0tTQnBaaUFvWkdWc1pYUmxJSFJiYUYwc0lIVWdQQ0J5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUMwdGNpd2daaUE5SUdWYlpGMHNJRzBnUFNBdExXRXNJRjhnUFNCbFcyMWRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRnRtTG5WMWFXUmRJRDBnZFN3Z1pWdDFYU0E5SUdZc0lIUmJYeTUxZFdsa1hTQTlJR1FzSUdWYlpGMGdQU0JmTENCbExuQnZjQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JuSUQwZ01Dd2djQ0E5SUdrN0lHY2dJVDA5SUhBN0lDc3JaeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFlnUFNCdVcyZGRMQ0I0SUQwZ2RsdGtYU3dnZVNBOUlIWmJiVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RsdDFYU0E5SUhnc0lIWmJaRjBnUFNCNUxDQjJMbkJ2Y0NncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQXRMV0VzSUdZZ1BTQmxXMlJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkNBK0lEQWdKaVlnS0hSYlppNTFkV2xrWFNBOUlIVXBMQ0JsVzNWZElEMGdaaXdnWlM1d2IzQW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0E5SURBc0lGOGdQU0JwT3lCdElDRTlQU0JmT3lBcksyMHBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm5JRDBnYmx0dFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuVzNWZElEMGdaMXRrWFN3Z1p5NXdiM0FvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxtNURZV05vWldSUFltcGxZM1J6WHlBOUlISTdDaUFnSUNCOUNpQWdJQ0J6ZFdKelkzSnBZbVZmS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVgySnBibVJwYm1kelNXNWthV05sYzBKNVVHRjBhQ3dnYVNBOUlHNWJaVjBzSUhJZ1BTQjBhR2x6TGw5aWFXNWthVzVuY3pzS0lDQWdJQ0FnSUNCcFppQW9hU0FoUFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnY2x0cFhUc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIUm9hWE11WDNCaGRHaHpMQ0J2SUQwZ2RHaHBjeTVmY0dGeWMyVmtVR0YwYUhNc0lHTWdQU0IwYUdsekxsOXZZbXBsWTNSekxDQnNJRDBnWXk1c1pXNW5kR2dzSUdnZ1BTQjBhR2x6TG01RFlXTm9aV1JQWW1wbFkzUnpYeXdnZFNBOUlHNWxkeUJCY25KaGVTaHNLVHNLSUNBZ0lDQWdJQ0JwSUQwZ2NpNXNaVzVuZEdnc0lHNWJaVjBnUFNCcExDQmhMbkIxYzJnb1pTa3NJRzh1Y0hWemFDaDBLU3dnY2k1d2RYTm9LSFVwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWkNBOUlHZ3NJR1lnUFNCakxteGxibWQwYURzZ1pDQWhQVDBnWmpzZ0t5dGtLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzBnUFNCalcyUmRPd29nSUNBZ0lDQWdJQ0FnSUNCMVcyUmRJRDBnYm1WM0lFdGxLRzBzSUdVc0lIUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkVHNLSUNBZ0lIMEtJQ0FnSUhWdWMzVmljMk55YVdKbFh5aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOWlhVzVrYVc1bmMwbHVaR2xqWlhOQ2VWQmhkR2dzSUc0Z1BTQjBXMlZkT3dvZ0lDQWdJQ0FnSUdsbUlDaHVJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBhR2x6TGw5d1lYUm9jeXdnY2lBOUlIUm9hWE11WDNCaGNuTmxaRkJoZEdoekxDQmhJRDBnZEdocGN5NWZZbWx1WkdsdVozTXNJRzhnUFNCaExteGxibWQwYUNBdElERXNJR01nUFNCaFcyOWRMQ0JzSUQwZ1pWdHZYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RGdHNYU0E5SUc0c0lHRmJibDBnUFNCakxDQmhMbkJ2Y0NncExDQnlXMjVkSUQwZ2NsdHZYU3dnY2k1d2IzQW9LU3dnYVZ0dVhTQTlJR2xiYjEwc0lHa3VjRzl3S0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFwOUxDQldZeUE5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNGdQU0J1ZFd4c0xDQnBJRDBnZEM1aWJHVnVaRTF2WkdVcGV3b2dJQ0FnSUNBZ0lIUm9hWE11WDIxcGVHVnlJRDBnWlN3Z2RHaHBjeTVmWTJ4cGNDQTlJSFFzSUhSb2FYTXVYMnh2WTJGc1VtOXZkQ0E5SUc0c0lIUm9hWE11WW14bGJtUk5iMlJsSUQwZ2FUc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUXVkSEpoWTJ0ekxDQmhJRDBnY2k1c1pXNW5kR2dzSUc4Z1BTQnVaWGNnUVhKeVlYa29ZU2tzSUdNZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdWdVpHbHVaMU4wWVhKME9pQjZhU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pXNWthVzVuUlc1a09pQjZhUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JzSUQwZ01Ec2diQ0FoUFQwZ1lUc2dLeXRzS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQnlXMnhkTG1OeVpXRjBaVWx1ZEdWeWNHOXNZVzUwS0c1MWJHd3BPd29nSUNBZ0lDQWdJQ0FnSUNCdlcyeGRJRDBnYUN3Z2FDNXpaWFIwYVc1bmN5QTlJR003Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVYMmx1ZEdWeWNHOXNZVzUwVTJWMGRHbHVaM01nUFNCakxDQjBhR2x6TGw5cGJuUmxjbkJ2YkdGdWRITWdQU0J2TENCMGFHbHpMbDl3Y205d1pYSjBlVUpwYm1ScGJtZHpJRDBnYm1WM0lFRnljbUY1S0dFcExDQjBhR2x6TGw5allXTm9aVWx1WkdWNElEMGdiblZzYkN3Z2RHaHBjeTVmWW5sRGJHbHdRMkZqYUdWSmJtUmxlQ0E5SUc1MWJHd3NJSFJvYVhNdVgzUnBiV1ZUWTJGc1pVbHVkR1Z5Y0c5c1lXNTBJRDBnYm5Wc2JDd2dkR2hwY3k1ZmQyVnBaMmgwU1c1MFpYSndiMnhoYm5RZ1BTQnVkV3hzTENCMGFHbHpMbXh2YjNBZ1BTQkJaaXdnZEdocGN5NWZiRzl2Y0VOdmRXNTBJRDBnTFRFc0lIUm9hWE11WDNOMFlYSjBWR2x0WlNBOUlHNTFiR3dzSUhSb2FYTXVkR2x0WlNBOUlEQXNJSFJvYVhNdWRHbHRaVk5qWVd4bElEMGdNU3dnZEdocGN5NWZaV1ptWldOMGFYWmxWR2x0WlZOallXeGxJRDBnTVN3Z2RHaHBjeTUzWldsbmFIUWdQU0F4TENCMGFHbHpMbDlsWm1abFkzUnBkbVZYWldsbmFIUWdQU0F4TENCMGFHbHpMbkpsY0dWMGFYUnBiMjV6SUQwZ01TQXZJREFzSUhSb2FYTXVjR0YxYzJWa0lEMGdJVEVzSUhSb2FYTXVaVzVoWW14bFpDQTlJQ0V3TENCMGFHbHpMbU5zWVcxd1YyaGxia1pwYm1semFHVmtJRDBnSVRFc0lIUm9hWE11ZW1WeWIxTnNiM0JsUVhSVGRHRnlkQ0E5SUNFd0xDQjBhR2x6TG5wbGNtOVRiRzl3WlVGMFJXNWtJRDBnSVRBN0NpQWdJQ0I5Q2lBZ0lDQndiR0Y1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0YVhobGNpNWZZV04wYVhaaGRHVkJZM1JwYjI0b2RHaHBjeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZEc5d0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dGFYaGxjaTVmWkdWaFkzUnBkbUYwWlVGamRHbHZiaWgwYUdsektTd2dkR2hwY3k1eVpYTmxkQ2dwT3dvZ0lDQWdmUW9nSUNBZ2NtVnpaWFFvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0YxYzJWa0lEMGdJVEVzSUhSb2FYTXVaVzVoWW14bFpDQTlJQ0V3TENCMGFHbHpMblJwYldVZ1BTQXdMQ0IwYUdsekxsOXNiMjl3UTI5MWJuUWdQU0F0TVN3Z2RHaHBjeTVmYzNSaGNuUlVhVzFsSUQwZ2JuVnNiQ3dnZEdocGN5NXpkRzl3Um1Ga2FXNW5LQ2t1YzNSdmNGZGhjbkJwYm1jb0tUc0tJQ0FnSUgwS0lDQWdJR2x6VW5WdWJtbHVaeWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWxibUZpYkdWa0lDWW1JQ0YwYUdsekxuQmhkWE5sWkNBbUppQjBhR2x6TG5ScGJXVlRZMkZzWlNBaFBUMGdNQ0FtSmlCMGFHbHpMbDl6ZEdGeWRGUnBiV1VnUFQwOUlHNTFiR3dnSmlZZ2RHaHBjeTVmYldsNFpYSXVYMmx6UVdOMGFYWmxRV04wYVc5dUtIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ2FYTlRZMmhsWkhWc1pXUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMXBlR1Z5TGw5cGMwRmpkR2wyWlVGamRHbHZiaWgwYUdsektUc0tJQ0FnSUgwS0lDQWdJSE4wWVhKMFFYUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpkR0Z5ZEZScGJXVWdQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFRHOXZjQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ykc5dmNDQTlJR1VzSUhSb2FYTXVjbVZ3WlhScGRHbHZibk1nUFNCMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSV1ptWldOMGFYWmxWMlZwWjJoMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1M1pXbG5hSFFnUFNCbExDQjBhR2x6TGw5bFptWmxZM1JwZG1WWFpXbG5hSFFnUFNCMGFHbHpMbVZ1WVdKc1pXUWdQeUJsSURvZ01Dd2dkR2hwY3k1emRHOXdSbUZrYVc1bktDazdDaUFnSUNCOUNpQWdJQ0JuWlhSRlptWmxZM1JwZG1WWFpXbG5hSFFvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMlZtWm1WamRHbDJaVmRsYVdkb2REc0tJQ0FnSUgwS0lDQWdJR1poWkdWSmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTmphR1ZrZFd4bFJtRmthVzVuS0dVc0lEQXNJREVwT3dvZ0lDQWdmUW9nSUNBZ1ptRmtaVTkxZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNOamFHVmtkV3hsUm1Ga2FXNW5LR1VzSURFc0lEQXBPd29nSUNBZ2ZRb2dJQ0FnWTNKdmMzTkdZV1JsUm5KdmJTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdhV1lnS0dVdVptRmtaVTkxZENoMEtTd2dkR2hwY3k1bVlXUmxTVzRvZENrc0lHNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbDlqYkdsd0xtUjFjbUYwYVc5dUxDQnlJRDBnWlM1ZlkyeHBjQzVrZFhKaGRHbHZiaXdnWVNBOUlISWdMeUJwTENCdklEMGdhU0F2SUhJN0NpQWdJQ0FnSUNBZ0lDQWdJR1V1ZDJGeWNDZ3hMQ0JoTENCMEtTd2dkR2hwY3k1M1lYSndLRzhzSURFc0lIUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnliM056Um1Ga1pWUnZLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVqY205emMwWmhaR1ZHY205dEtIUm9hWE1zSUhRc0lHNHBPd29nSUNBZ2ZRb2dJQ0FnYzNSdmNFWmhaR2x1WnlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11WDNkbGFXZG9kRWx1ZEdWeWNHOXNZVzUwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TGw5M1pXbG5hSFJKYm5SbGNuQnZiR0Z1ZENBOUlHNTFiR3dzSUhSb2FYTXVYMjFwZUdWeUxsOTBZV3RsUW1GamEwTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRDaGxLU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSRlptWmxZM1JwZG1WVWFXMWxVMk5oYkdVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ScGJXVlRZMkZzWlNBOUlHVXNJSFJvYVhNdVgyVm1abVZqZEdsMlpWUnBiV1ZUWTJGc1pTQTlJSFJvYVhNdWNHRjFjMlZrSUQ4Z01DQTZJR1VzSUhSb2FYTXVjM1J2Y0ZkaGNuQnBibWNvS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRVZtWm1WamRHbDJaVlJwYldWVFkyRnNaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaV1ptWldOMGFYWmxWR2x0WlZOallXeGxPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJIVnlZWFJwYjI0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ScGJXVlRZMkZzWlNBOUlIUm9hWE11WDJOc2FYQXVaSFZ5WVhScGIyNGdMeUJsTENCMGFHbHpMbk4wYjNCWFlYSndhVzVuS0NrN0NpQWdJQ0I5Q2lBZ0lDQnplVzVqVjJsMGFDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRHbHRaU0E5SUdVdWRHbHRaU3dnZEdocGN5NTBhVzFsVTJOaGJHVWdQU0JsTG5ScGJXVlRZMkZzWlN3Z2RHaHBjeTV6ZEc5d1YyRnljR2x1WnlncE93b2dJQ0FnZlFvZ0lDQWdhR0ZzZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZDJGeWNDaDBhR2x6TGw5bFptWmxZM1JwZG1WVWFXMWxVMk5oYkdVc0lEQXNJR1VwT3dvZ0lDQWdmUW9nSUNBZ2QyRnljQ2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxsOXRhWGhsY2l3Z2NpQTlJR2t1ZEdsdFpTd2dZU0E5SUhSb2FYTXVkR2x0WlZOallXeGxMQ0J2SUQwZ2RHaHBjeTVmZEdsdFpWTmpZV3hsU1c1MFpYSndiMnhoYm5RN0NpQWdJQ0FnSUNBZ2J5QTlQVDBnYm5Wc2JDQW1KaUFvYnlBOUlHa3VYMnhsYm1SRGIyNTBjbTlzU1c1MFpYSndiMnhoYm5Rb0tTd2dkR2hwY3k1ZmRHbHRaVk5qWVd4bFNXNTBaWEp3YjJ4aGJuUWdQU0J2S1RzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc4dWNHRnlZVzFsZEdWeVVHOXphWFJwYjI1ekxDQnNJRDBnYnk1ellXMXdiR1ZXWVd4MVpYTTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmJNRjBnUFNCeUxDQmpXekZkSUQwZ2NpQXJJRzRzSUd4Yk1GMGdQU0JsSUM4Z1lTd2diRnN4WFNBOUlIUWdMeUJoTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzNSdmNGZGhjbkJwYm1jb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TGw5MGFXMWxVMk5oYkdWSmJuUmxjbkJ2YkdGdWREc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWZkR2x0WlZOallXeGxTVzUwWlhKd2IyeGhiblFnUFNCdWRXeHNMQ0IwYUdsekxsOXRhWGhsY2k1ZmRHRnJaVUpoWTJ0RGIyNTBjbTlzU1c1MFpYSndiMnhoYm5Rb1pTa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwVFdsNFpYSW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMXBlR1Z5T3dvZ0lDQWdmUW9nSUNBZ1oyVjBRMnhwY0NncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTJ4cGNEc0tJQ0FnSUgwS0lDQWdJR2RsZEZKdmIzUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyeHZZMkZzVW05dmRDQjhmQ0IwYUdsekxsOXRhWGhsY2k1ZmNtOXZkRHNLSUNBZ0lIMEtJQ0FnSUY5MWNHUmhkR1VvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWxibUZpYkdWa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWZGxhV2RvZENobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNdVgzTjBZWEowVkdsdFpUc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJQ2hsSUMwZ2Npa2dLaUJ1T3dvZ0lDQWdJQ0FnSUNBZ0lDQmpJRHdnTUNCOGZDQnVJRDA5UFNBd0lEOGdkQ0E5SURBZ09pQW9kR2hwY3k1ZmMzUmhjblJVYVcxbElEMGdiblZzYkN3Z2RDQTlJRzRnS2lCaktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkQ0FxUFNCMGFHbHpMbDkxY0dSaGRHVlVhVzFsVTJOaGJHVW9aU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0IwYUdsekxsOTFjR1JoZEdWVWFXMWxLSFFwTENCdklEMGdkR2hwY3k1ZmRYQmtZWFJsVjJWcFoyaDBLR1VwT3dvZ0lDQWdJQ0FnSUdsbUlDaHZJRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJSFJvYVhNdVgybHVkR1Z5Y0c5c1lXNTBjeXdnYkNBOUlIUm9hWE11WDNCeWIzQmxjblI1UW1sdVpHbHVaM003Q2lBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNoMGFHbHpMbUpzWlc1a1RXOWtaU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElIaGtPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYUNBOUlEQXNJSFVnUFNCakxteGxibWQwYURzZ2FDQWhQVDBnZFRzZ0t5dG9LV05iYUYwdVpYWmhiSFZoZEdVb1lTa3NJR3hiYUYwdVlXTmpkVzExYkdGMFpVRmtaR2wwYVhabEtHOHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCWVl6b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQm9JRDBnTUN3Z2RTQTlJR011YkdWdVozUm9PeUJvSUNFOVBTQjFPeUFySzJncFkxdG9YUzVsZG1Gc2RXRjBaU2hoS1N3Z2JGdG9YUzVoWTJOMWJYVnNZWFJsS0drc0lHOHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdYM1Z3WkdGMFpWZGxhV2RvZENobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQXdPd29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZ1WVdKc1pXUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSFJvYVhNdWQyVnBaMmgwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WDNkbGFXZG9kRWx1ZEdWeWNHOXNZVzUwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYmlBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdUxtVjJZV3gxWVhSbEtHVXBXekJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZENBcVBTQnBMQ0JsSUQ0Z2JpNXdZWEpoYldWMFpYSlFiM05wZEdsdmJuTmJNVjBnSmlZZ0tIUm9hWE11YzNSdmNFWmhaR2x1WnlncExDQnBJRDA5UFNBd0lDWW1JQ2gwYUdsekxtVnVZV0pzWldRZ1BTQWhNU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bFptWmxZM1JwZG1WWFpXbG5hSFFnUFNCMExDQjBPd29nSUNBZ2ZRb2dJQ0FnWDNWd1pHRjBaVlJwYldWVFkyRnNaU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNBd093b2dJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXdZWFZ6WldRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlIUm9hWE11ZEdsdFpWTmpZV3hsT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WDNScGJXVlRZMkZzWlVsdWRHVnljRzlzWVc1ME93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpQWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVMbVYyWVd4MVlYUmxLR1VwV3pCZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQXFQU0JwTENCbElENGdiaTV3WVhKaGJXVjBaWEpRYjNOcGRHbHZibk5iTVYwZ0ppWWdLSFJvYVhNdWMzUnZjRmRoY25CcGJtY29LU3dnZENBOVBUMGdNQ0EvSUhSb2FYTXVjR0YxYzJWa0lEMGdJVEFnT2lCMGFHbHpMblJwYldWVFkyRnNaU0E5SUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWxabVpsWTNScGRtVlVhVzFsVTJOaGJHVWdQU0IwTENCME93b2dJQ0FnZlFvZ0lDQWdYM1Z3WkdGMFpWUnBiV1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVmWTJ4cGNDNWtkWEpoZEdsdmJpd2diaUE5SUhSb2FYTXViRzl2Y0N3Z2FTQTlJSFJvYVhNdWRHbHRaU0FySUdVc0lISWdQU0IwYUdsekxsOXNiMjl3UTI5MWJuUXNJR0VnUFNCdUlEMDlQU0JTWmpzS0lDQWdJQ0FnSUNCcFppQW9aU0E5UFQwZ01Da2djbVYwZFhKdUlISWdQVDA5SUMweElEOGdhU0E2SUdFZ0ppWWdLSElnSmlBeEtTQTlQVDBnTVNBL0lIUWdMU0JwSURvZ2FUc0tJQ0FnSUNBZ0lDQnBaaUFvYmlBOVBUMGdkMllwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjaUE5UFQwZ0xURWdKaVlnS0hSb2FYTXVYMnh2YjNCRGIzVnVkQ0E5SURBc0lIUm9hWE11WDNObGRFVnVaR2x1WjNNb0lUQXNJQ0V3TENBaE1Ta3BPd29nSUNBZ0lDQWdJQ0FnSUNCbE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBK1BTQjBLU0JwSUQwZ2REc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHa2dQQ0F3S1NCcElEMGdNRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHbHRaU0E5SUdrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzZ1pUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTJ4aGJYQlhhR1Z1Um1sdWFYTm9aV1FnUHlCMGFHbHpMbkJoZFhObFpDQTlJQ0V3SURvZ2RHaHBjeTVsYm1GaWJHVmtJRDBnSVRFc0lIUm9hWE11ZEdsdFpTQTlJR2tzSUhSb2FYTXVYMjFwZUdWeUxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKbWFXNXBjMmhsWkNJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV04wYVc5dU9pQjBhR2x6TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJqb2daU0E4SURBZ1B5QXRNU0E2SURFS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlDMHhJQ1ltSUNobElENDlJREFnUHlBb2NpQTlJREFzSUhSb2FYTXVYM05sZEVWdVpHbHVaM01vSVRBc0lIUm9hWE11Y21Wd1pYUnBkR2x2Ym5NZ1BUMDlJREFzSUdFcEtTQTZJSFJvYVhNdVgzTmxkRVZ1WkdsdVozTW9kR2hwY3k1eVpYQmxkR2wwYVc5dWN5QTlQVDBnTUN3Z0lUQXNJR0VwS1N3Z2FTQStQU0IwSUh4OElHa2dQQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdieUE5SUUxaGRHZ3VabXh2YjNJb2FTQXZJSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNBdFBTQjBJQ29nYnl3Z2NpQXJQU0JOWVhSb0xtRmljeWh2S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnZEdocGN5NXlaWEJsZEdsMGFXOXVjeUF0SUhJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZeUE4UFNBd0tTQjBhR2x6TG1Oc1lXMXdWMmhsYmtacGJtbHphR1ZrSUQ4Z2RHaHBjeTV3WVhWelpXUWdQU0FoTUNBNklIUm9hWE11Wlc1aFlteGxaQ0E5SUNFeExDQnBJRDBnWlNBK0lEQWdQeUIwSURvZ01Dd2dkR2hwY3k1MGFXMWxJRDBnYVN3Z2RHaHBjeTVmYldsNFpYSXVaR2x6Y0dGMFkyaEZkbVZ1ZENoN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ltWnBibWx6YUdWa0lpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWTNScGIyNDZJSFJvYVhNc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x5WldOMGFXOXVPaUJsSUQ0Z01DQS9JREVnT2lBdE1Rb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWXlBOVBUMGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJR1VnUENBd093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6WlhSRmJtUnBibWR6S0d3c0lDRnNMQ0JoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2RHaHBjeTVmYzJWMFJXNWthVzVuY3lnaE1Td2dJVEVzSUdFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZiM0JEYjNWdWRDQTlJSElzSUhSb2FYTXVkR2x0WlNBOUlHa3NJSFJvYVhNdVgyMXBlR1Z5TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaWJHOXZjQ0lzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJqb2dkR2hwY3l3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5dmNFUmxiSFJoT2lCdkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCMGFHbHpMblJwYldVZ1BTQnBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZU0FtSmlBb2NpQW1JREVwSUQwOVBTQXhLU0J5WlhSMWNtNGdkQ0F0SUdrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcE93b2dJQ0FnZlFvZ0lDQWdYM05sZEVWdVpHbHVaM01vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NWZhVzUwWlhKd2IyeGhiblJUWlhSMGFXNW5jenNLSUNBZ0lDQWdJQ0J1SUQ4Z0tHa3VaVzVrYVc1blUzUmhjblFnUFNCV2FTd2dhUzVsYm1ScGJtZEZibVFnUFNCV2FTa2dPaUFvWlNBL0lHa3VaVzVrYVc1blUzUmhjblFnUFNCMGFHbHpMbnBsY205VGJHOXdaVUYwVTNSaGNuUWdQeUJXYVNBNklIcHBJRG9nYVM1bGJtUnBibWRUZEdGeWRDQTlJRUp5TENCMElEOGdhUzVsYm1ScGJtZEZibVFnUFNCMGFHbHpMbnBsY205VGJHOXdaVUYwUlc1a0lEOGdWbWtnT2lCNmFTQTZJR2t1Wlc1a2FXNW5SVzVrSUQwZ1FuSXBPd29nSUNBZ2ZRb2dJQ0FnWDNOamFHVmtkV3hsUm1Ga2FXNW5LR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVgyMXBlR1Z5TENCeUlEMGdhUzUwYVcxbExDQmhJRDBnZEdocGN5NWZkMlZwWjJoMFNXNTBaWEp3YjJ4aGJuUTdDaUFnSUNBZ0lDQWdZU0E5UFQwZ2JuVnNiQ0FtSmlBb1lTQTlJR2t1WDJ4bGJtUkRiMjUwY205c1NXNTBaWEp3YjJ4aGJuUW9LU3dnZEdocGN5NWZkMlZwWjJoMFNXNTBaWEp3YjJ4aGJuUWdQU0JoS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUdFdWNHRnlZVzFsZEdWeVVHOXphWFJwYjI1ekxDQmpJRDBnWVM1ellXMXdiR1ZXWVd4MVpYTTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOWJNRjBnUFNCeUxDQmpXekJkSUQwZ2RDd2diMXN4WFNBOUlISWdLeUJsTENCald6RmRJRDBnYml3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnVDNnZ1BTQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtERXBMQ0JEZFNBOUlHTnNZWE56SUdWNGRHVnVaSE1nYzI0Z2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1ZmNtOXZkQ0E5SUdVc0lIUm9hWE11WDJsdWFYUk5aVzF2Y25sTllXNWhaMlZ5S0Nrc0lIUm9hWE11WDJGalkzVkpibVJsZUNBOUlEQXNJSFJvYVhNdWRHbHRaU0E5SURBc0lIUm9hWE11ZEdsdFpWTmpZV3hsSUQwZ01Uc0tJQ0FnSUgwS0lDQWdJRjlpYVc1a1FXTjBhVzl1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1V1WDJ4dlkyRnNVbTl2ZENCOGZDQjBhR2x6TGw5eWIyOTBMQ0JwSUQwZ1pTNWZZMnhwY0M1MGNtRmphM01zSUhJZ1BTQnBMbXhsYm1kMGFDd2dZU0E5SUdVdVgzQnliM0JsY25SNVFtbHVaR2x1WjNNc0lHOGdQU0JsTGw5cGJuUmxjbkJ2YkdGdWRITXNJR01nUFNCdUxuVjFhV1FzSUd3Z1BTQjBhR2x6TGw5aWFXNWthVzVuYzBKNVVtOXZkRUZ1WkU1aGJXVXNJR2dnUFNCc1cyTmRPd29nSUNBZ0lDQWdJR2dnUFQwOUlIWnZhV1FnTUNBbUppQW9hQ0E5SUh0OUxDQnNXMk5kSUQwZ2FDazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjFJRDBnTURzZ2RTQWhQVDBnY2pzZ0t5dDFLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCcFczVmRMQ0JtSUQwZ1pDNXVZVzFsTENCdElEMGdhRnRtWFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cwZ0lUMDlJSFp2YVdRZ01Da2dLeXR0TG5KbFptVnlaVzVqWlVOdmRXNTBMQ0JoVzNWZElEMGdiVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JTQTlJR0ZiZFYwc0lHMGdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMHVYMk5oWTJobFNXNWtaWGdnUFQwOUlHNTFiR3dnSmlZZ0tDc3JiUzV5WldabGNtVnVZMlZEYjNWdWRDd2dkR2hwY3k1ZllXUmtTVzVoWTNScGRtVkNhVzVrYVc1bktHMHNJR01zSUdZcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCZklEMGdkQ0FtSmlCMExsOXdjbTl3WlhKMGVVSnBibVJwYm1kelczVmRMbUpwYm1ScGJtY3VjR0Z5YzJWa1VHRjBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzBnUFNCdVpYY2dRbU1vUzJVdVkzSmxZWFJsS0c0c0lHWXNJRjhwTENCa0xsWmhiSFZsVkhsd1pVNWhiV1VzSUdRdVoyVjBWbUZzZFdWVGFYcGxLQ2twTENBcksyMHVjbVZtWlhKbGJtTmxRMjkxYm5Rc0lIUm9hWE11WDJGa1pFbHVZV04wYVhabFFtbHVaR2x1WnlodExDQmpMQ0JtS1N3Z1lWdDFYU0E5SUcwN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2IxdDFYUzV5WlhOMWJIUkNkV1ptWlhJZ1BTQnRMbUoxWm1abGNqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JmWVdOMGFYWmhkR1ZCWTNScGIyNG9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmFYTkJZM1JwZG1WQlkzUnBiMjRvWlNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVXVYMk5oWTJobFNXNWtaWGdnUFQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnS0dVdVgyeHZZMkZzVW05dmRDQjhmQ0IwYUdsekxsOXliMjkwS1M1MWRXbGtMQ0JwSUQwZ1pTNWZZMnhwY0M1MWRXbGtMQ0J5SUQwZ2RHaHBjeTVmWVdOMGFXOXVjMEo1UTJ4cGNGdHBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgySnBibVJCWTNScGIyNG9aU3dnY2lBbUppQnlMbXR1YjNkdVFXTjBhVzl1YzFzd1hTa3NJSFJvYVhNdVgyRmtaRWx1WVdOMGFYWmxRV04wYVc5dUtHVXNJR2tzSUc0cE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNWZjSEp2Y0dWeWRIbENhVzVrYVc1bmN6c0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Dd2dhU0E5SUhRdWJHVnVaM1JvT3lCdUlDRTlQU0JwT3lBcksyNHBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBXMjVkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2k1MWMyVkRiM1Z1ZENzcklEMDlQU0F3SUNZbUlDaDBhR2x6TGw5c1pXNWtRbWx1WkdsdVp5aHlLU3dnY2k1ellYWmxUM0pwWjJsdVlXeFRkR0YwWlNncEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c1pXNWtRV04wYVc5dUtHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUY5a1pXRmpkR2wyWVhSbFFXTjBhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZhWE5CWTNScGRtVkJZM1JwYjI0b1pTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbExsOXdjbTl3WlhKMGVVSnBibVJwYm1kek93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnZEM1c1pXNW5kR2c3SUc0Z0lUMDlJR2s3SUNzcmJpbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUmJibDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F0TFhJdWRYTmxRMjkxYm5RZ1BUMDlJREFnSmlZZ0tISXVjbVZ6ZEc5eVpVOXlhV2RwYm1Gc1UzUmhkR1VvS1N3Z2RHaHBjeTVmZEdGclpVSmhZMnRDYVc1a2FXNW5LSElwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkwWVd0bFFtRmphMEZqZEdsdmJpaGxLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCZmFXNXBkRTFsYlc5eWVVMWhibUZuWlhJb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZllXTjBhVzl1Y3lBOUlGdGRMQ0IwYUdsekxsOXVRV04wYVhabFFXTjBhVzl1Y3lBOUlEQXNJSFJvYVhNdVgyRmpkR2x2Ym5OQ2VVTnNhWEFnUFNCN2ZTd2dkR2hwY3k1ZlltbHVaR2x1WjNNZ1BTQmJYU3dnZEdocGN5NWZia0ZqZEdsMlpVSnBibVJwYm1keklEMGdNQ3dnZEdocGN5NWZZbWx1WkdsdVozTkNlVkp2YjNSQmJtUk9ZVzFsSUQwZ2UzMHNJSFJvYVhNdVgyTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITWdQU0JiWFN3Z2RHaHBjeTVmYmtGamRHbDJaVU52Ym5SeWIyeEpiblJsY25CdmJHRnVkSE1nUFNBd093b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjenNLSUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJ6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JoWTNScGIyNXpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuWlhRZ2RHOTBZV3dnS0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbDloWTNScGIyNXpMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aWFFnYVc1VmMyVWdLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbExsOXVRV04wYVhabFFXTjBhVzl1Y3pzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1ltbHVaR2x1WjNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxkQ0IwYjNSaGJDQW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVgySnBibVJwYm1kekxteGxibWQwYURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpYUWdhVzVWYzJVZ0tDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTGw5dVFXTjBhWFpsUW1sdVpHbHVaM003Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnhKYm5SbGNuQnZiR0Z1ZEhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxkQ0IwYjNSaGJDQW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVgyTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITXViR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxkQ0JwYmxWelpTQW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVgyNUJZM1JwZG1WRGIyNTBjbTlzU1c1MFpYSndiMnhoYm5Sek93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lGOXBjMEZqZEdsMlpVRmpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbDlqWVdOb1pVbHVaR1Y0T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUNFOVBTQnVkV3hzSUNZbUlIUWdQQ0IwYUdsekxsOXVRV04wYVhabFFXTjBhVzl1Y3pzS0lDQWdJSDBLSUNBZ0lGOWhaR1JKYm1GamRHbDJaVUZqZEdsdmJpaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBhR2x6TGw5aFkzUnBiMjV6TENCeUlEMGdkR2hwY3k1ZllXTjBhVzl1YzBKNVEyeHBjQ3dnWVNBOUlISmJkRjA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHRWdQVDA5SUhadmFXUWdNQ2tnWVNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnYTI1dmQyNUJZM1JwYjI1ek9pQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxDaUFnSUNBZ0lDQWdJQ0FnSUYwc0NpQWdJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJrSjVVbTl2ZERvZ2UzMEtJQ0FnSUNBZ0lDQjlMQ0JsTGw5aWVVTnNhWEJEWVdOb1pVbHVaR1Y0SUQwZ01Dd2djbHQwWFNBOUlHRTdDaUFnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdZUzVyYm05M2JrRmpkR2x2Ym5NN0NpQWdJQ0FnSUNBZ0lDQWdJR1V1WDJKNVEyeHBjRU5oWTJobFNXNWtaWGdnUFNCdkxteGxibWQwYUN3Z2J5NXdkWE5vS0dVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmxMbDlqWVdOb1pVbHVaR1Y0SUQwZ2FTNXNaVzVuZEdnc0lHa3VjSFZ6YUNobEtTd2dZUzVoWTNScGIyNUNlVkp2YjNSYmJsMGdQU0JsT3dvZ0lDQWdmUW9nSUNBZ1gzSmxiVzkyWlVsdVlXTjBhWFpsUVdOMGFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVYMkZqZEdsdmJuTXNJRzRnUFNCMFczUXViR1Z1WjNSb0lDMGdNVjBzSUdrZ1BTQmxMbDlqWVdOb1pVbHVaR1Y0T3dvZ0lDQWdJQ0FnSUc0dVgyTmhZMmhsU1c1a1pYZ2dQU0JwTENCMFcybGRJRDBnYml3Z2RDNXdiM0FvS1N3Z1pTNWZZMkZqYUdWSmJtUmxlQ0E5SUc1MWJHdzdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQmxMbDlqYkdsd0xuVjFhV1FzSUdFZ1BTQjBhR2x6TGw5aFkzUnBiMjV6UW5sRGJHbHdMQ0J2SUQwZ1lWdHlYU3dnWXlBOUlHOHVhMjV2ZDI1QlkzUnBiMjV6TENCc0lEMGdZMXRqTG14bGJtZDBhQ0F0SURGZExDQm9JRDBnWlM1ZllubERiR2x3UTJGamFHVkpibVJsZURzS0lDQWdJQ0FnSUNCc0xsOWllVU5zYVhCRFlXTm9aVWx1WkdWNElEMGdhQ3dnWTF0b1hTQTlJR3dzSUdNdWNHOXdLQ2tzSUdVdVgySjVRMnhwY0VOaFkyaGxTVzVrWlhnZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnYnk1aFkzUnBiMjVDZVZKdmIzUXNJR1FnUFNBb1pTNWZiRzlqWVd4U2IyOTBJSHg4SUhSb2FYTXVYM0p2YjNRcExuVjFhV1E3Q2lBZ0lDQWdJQ0FnWkdWc1pYUmxJSFZiWkYwc0lHTXViR1Z1WjNSb0lEMDlQU0F3SUNZbUlHUmxiR1YwWlNCaFczSmRMQ0IwYUdsekxsOXlaVzF2ZG1WSmJtRmpkR2wyWlVKcGJtUnBibWR6Um05eVFXTjBhVzl1S0dVcE93b2dJQ0FnZlFvZ0lDQWdYM0psYlc5MlpVbHVZV04wYVhabFFtbHVaR2x1WjNOR2IzSkJZM1JwYjI0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVmY0hKdmNHVnlkSGxDYVc1a2FXNW5jenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnZEM1c1pXNW5kR2c3SUc0Z0lUMDlJR2s3SUNzcmJpbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEZ0dVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnTFMxeUxuSmxabVZ5Wlc1alpVTnZkVzUwSUQwOVBTQXdJQ1ltSUhSb2FYTXVYM0psYlc5MlpVbHVZV04wYVhabFFtbHVaR2x1WnloeUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JmYkdWdVpFRmpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TGw5aFkzUnBiMjV6TENCdUlEMGdaUzVmWTJGamFHVkpibVJsZUN3Z2FTQTlJSFJvYVhNdVgyNUJZM1JwZG1WQlkzUnBiMjV6S3lzc0lISWdQU0IwVzJsZE93b2dJQ0FnSUNBZ0lHVXVYMk5oWTJobFNXNWtaWGdnUFNCcExDQjBXMmxkSUQwZ1pTd2djaTVmWTJGamFHVkpibVJsZUNBOUlHNHNJSFJiYmwwZ1BTQnlPd29nSUNBZ2ZRb2dJQ0FnWDNSaGEyVkNZV05yUVdOMGFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVYMkZqZEdsdmJuTXNJRzRnUFNCbExsOWpZV05vWlVsdVpHVjRMQ0JwSUQwZ0xTMTBhR2x6TGw5dVFXTjBhWFpsUVdOMGFXOXVjeXdnY2lBOUlIUmJhVjA3Q2lBZ0lDQWdJQ0FnWlM1ZlkyRmphR1ZKYm1SbGVDQTlJR2tzSUhSYmFWMGdQU0JsTENCeUxsOWpZV05vWlVsdVpHVjRJRDBnYml3Z2RGdHVYU0E5SUhJN0NpQWdJQ0I5Q2lBZ0lDQmZZV1JrU1c1aFkzUnBkbVZDYVc1a2FXNW5LR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVgySnBibVJwYm1kelFubFNiMjkwUVc1a1RtRnRaU3dnY2lBOUlIUm9hWE11WDJKcGJtUnBibWR6TENCaElEMGdhVnQwWFRzS0lDQWdJQ0FnSUNCaElEMDlQU0IyYjJsa0lEQWdKaVlnS0dFZ1BTQjdmU3dnYVZ0MFhTQTlJR0VwTENCaFcyNWRJRDBnWlN3Z1pTNWZZMkZqYUdWSmJtUmxlQ0E5SUhJdWJHVnVaM1JvTENCeUxuQjFjMmdvWlNrN0NpQWdJQ0I5Q2lBZ0lDQmZjbVZ0YjNabFNXNWhZM1JwZG1WQ2FXNWthVzVuS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WDJKcGJtUnBibWR6TENCdUlEMGdaUzVpYVc1a2FXNW5MQ0JwSUQwZ2JpNXliMjkwVG05a1pTNTFkV2xrTENCeUlEMGdiaTV3WVhSb0xDQmhJRDBnZEdocGN5NWZZbWx1WkdsdVozTkNlVkp2YjNSQmJtUk9ZVzFsTENCdklEMGdZVnRwWFN3Z1l5QTlJSFJiZEM1c1pXNW5kR2dnTFNBeFhTd2diQ0E5SUdVdVgyTmhZMmhsU1c1a1pYZzdDaUFnSUNBZ0lDQWdZeTVmWTJGamFHVkpibVJsZUNBOUlHd3NJSFJiYkYwZ1BTQmpMQ0IwTG5CdmNDZ3BMQ0JrWld4bGRHVWdiMXR5WFN3Z1QySnFaV04wTG10bGVYTW9ieWt1YkdWdVozUm9JRDA5UFNBd0lDWW1JR1JsYkdWMFpTQmhXMmxkT3dvZ0lDQWdmUW9nSUNBZ1gyeGxibVJDYVc1a2FXNW5LR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVYMkpwYm1ScGJtZHpMQ0J1SUQwZ1pTNWZZMkZqYUdWSmJtUmxlQ3dnYVNBOUlIUm9hWE11WDI1QlkzUnBkbVZDYVc1a2FXNW5jeXNyTENCeUlEMGdkRnRwWFRzS0lDQWdJQ0FnSUNCbExsOWpZV05vWlVsdVpHVjRJRDBnYVN3Z2RGdHBYU0E5SUdVc0lISXVYMk5oWTJobFNXNWtaWGdnUFNCdUxDQjBXMjVkSUQwZ2Nqc0tJQ0FnSUgwS0lDQWdJRjkwWVd0bFFtRmphMEpwYm1ScGJtY29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWZZbWx1WkdsdVozTXNJRzRnUFNCbExsOWpZV05vWlVsdVpHVjRMQ0JwSUQwZ0xTMTBhR2x6TGw5dVFXTjBhWFpsUW1sdVpHbHVaM01zSUhJZ1BTQjBXMmxkT3dvZ0lDQWdJQ0FnSUdVdVgyTmhZMmhsU1c1a1pYZ2dQU0JwTENCMFcybGRJRDBnWlN3Z2NpNWZZMkZqYUdWSmJtUmxlQ0E5SUc0c0lIUmJibDBnUFNCeU93b2dJQ0FnZlFvZ0lDQWdYMnhsYm1SRGIyNTBjbTlzU1c1MFpYSndiMnhoYm5Rb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TGw5amIyNTBjbTlzU1c1MFpYSndiMnhoYm5SekxDQjBJRDBnZEdocGN5NWZia0ZqZEdsMlpVTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITXJLeXdnYmlBOUlHVmJkRjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzRnUFQwOUlIWnZhV1FnTUNBbUppQW9iaUE5SUc1bGR5Qm1ZU2h1WlhjZ1JteHZZWFF6TWtGeWNtRjVLRElwTENCdVpYY2dSbXh2WVhRek1rRnljbUY1S0RJcExDQXhMQ0JQZUNrc0lHNHVYMTlqWVdOb1pVbHVaR1Y0SUQwZ2RDd2daVnQwWFNBOUlHNHBMQ0J1T3dvZ0lDQWdmUW9nSUNBZ1gzUmhhMlZDWVdOclEyOXVkSEp2YkVsdWRHVnljRzlzWVc1MEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVgyTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITXNJRzRnUFNCbExsOWZZMkZqYUdWSmJtUmxlQ3dnYVNBOUlDMHRkR2hwY3k1ZmJrRmpkR2wyWlVOdmJuUnliMnhKYm5SbGNuQnZiR0Z1ZEhNc0lISWdQU0IwVzJsZE93b2dJQ0FnSUNBZ0lHVXVYMTlqWVdOb1pVbHVaR1Y0SUQwZ2FTd2dkRnRwWFNBOUlHVXNJSEl1WDE5allXTm9aVWx1WkdWNElEMGdiaXdnZEZ0dVhTQTlJSEk3Q2lBZ0lDQjlDaUFnSUNCamJHbHdRV04wYVc5dUtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUWdmSHdnZEdocGN5NWZjbTl2ZEN3Z2NpQTlJR2t1ZFhWcFpDd2dZU0E5SUhSNWNHVnZaaUJsSUQwOUlDSnpkSEpwYm1jaUlEOGdhWE11Wm1sdVpFSjVUbUZ0WlNocExDQmxLU0E2SUdVc0lHOGdQU0JoSUNFOVBTQnVkV3hzSUQ4Z1lTNTFkV2xrSURvZ1pTd2dZeUE5SUhSb2FYTXVYMkZqZEdsdmJuTkNlVU5zYVhCYmIxMHNJR3dnUFNCdWRXeHNPd29nSUNBZ0lDQWdJR2xtSUNodUlEMDlQU0IyYjJsa0lEQWdKaVlnS0dFZ0lUMDlJRzUxYkd3Z1B5QnVJRDBnWVM1aWJHVnVaRTF2WkdVZ09pQnVJRDBnV0dNcExDQmpJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhVZ1BTQmpMbUZqZEdsdmJrSjVVbTl2ZEZ0eVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVWdJVDA5SUhadmFXUWdNQ0FtSmlCMUxtSnNaVzVrVFc5a1pTQTlQVDBnYmlrZ2NtVjBkWEp1SUhVN0NpQWdJQ0FnSUNBZ0lDQWdJR3dnUFNCakxtdHViM2R1UVdOMGFXOXVjMXN3WFN3Z1lTQTlQVDBnYm5Wc2JDQW1KaUFvWVNBOUlHd3VYMk5zYVhBcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvWVNBOVBUMGdiblZzYkNrZ2NtVjBkWEp1SUc1MWJHdzdDaUFnSUNBZ0lDQWdiR1YwSUdnZ1BTQnVaWGNnVm1Nb2RHaHBjeXdnWVN3Z2RDd2diaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgySnBibVJCWTNScGIyNG9hQ3dnYkNrc0lIUm9hWE11WDJGa1pFbHVZV04wYVhabFFXTjBhVzl1S0dnc0lHOHNJSElwTENCb093b2dJQ0FnZlFvZ0lDQWdaWGhwYzNScGJtZEJZM1JwYjI0b1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZENCOGZDQjBhR2x6TGw5eWIyOTBMQ0JwSUQwZ2JpNTFkV2xrTENCeUlEMGdkSGx3Wlc5bUlHVWdQVDBnSW5OMGNtbHVaeUlnUHlCcGN5NW1hVzVrUW5sT1lXMWxLRzRzSUdVcElEb2daU3dnWVNBOUlISWdQeUJ5TG5WMWFXUWdPaUJsTENCdklEMGdkR2hwY3k1ZllXTjBhVzl1YzBKNVEyeHBjRnRoWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYnlBaFBUMGdkbTlwWkNBd0lDWW1JRzh1WVdOMGFXOXVRbmxTYjI5MFcybGRJSHg4SUc1MWJHdzdDaUFnSUNCOUNpQWdJQ0J6ZEc5d1FXeHNRV04wYVc5dUtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1ZllXTjBhVzl1Y3l3Z2RDQTlJSFJvYVhNdVgyNUJZM1JwZG1WQlkzUnBiMjV6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlIUWdMU0F4T3lCdUlENDlJREE3SUMwdGJpbGxXMjVkTG5OMGIzQW9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlNobEtTQjdDaUFnSUNBZ0lDQWdaU0FxUFNCMGFHbHpMblJwYldWVFkyRnNaVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVgyRmpkR2x2Ym5Nc0lHNGdQU0IwYUdsekxsOXVRV04wYVhabFFXTjBhVzl1Y3l3Z2FTQTlJSFJvYVhNdWRHbHRaU0FyUFNCbExDQnlJRDBnVFdGMGFDNXphV2R1S0dVcExDQmhJRDBnZEdocGN5NWZZV05qZFVsdVpHVjRJRjQ5SURFN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCc0lEMGdNRHNnYkNBaFBUMGdianNnS3l0c0tYUmJiRjB1WDNWd1pHRjBaU2hwTENCbExDQnlMQ0JoS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUhSb2FYTXVYMkpwYm1ScGJtZHpMQ0JqSUQwZ2RHaHBjeTVmYmtGamRHbDJaVUpwYm1ScGJtZHpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SURBN0lHd2dJVDA5SUdNN0lDc3JiQ2x2VzJ4ZExtRndjR3g1S0dFcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZHbHRaU2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwYVcxbElEMGdNRHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd095QjBJRHdnZEdocGN5NWZZV04wYVc5dWN5NXNaVzVuZEdnN0lIUXJLeWwwYUdsekxsOWhZM1JwYjI1elczUmRMblJwYldVZ1BTQXdPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5Wd1pHRjBaU2hsS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRkp2YjNRb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKdmIzUTdDaUFnSUNCOUNpQWdJQ0IxYm1OaFkyaGxRMnhwY0NobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TGw5aFkzUnBiMjV6TENCdUlEMGdaUzUxZFdsa0xDQnBJRDBnZEdocGN5NWZZV04wYVc5dWMwSjVRMnhwY0N3Z2NpQTlJR2xiYmwwN0NpQWdJQ0FnSUNBZ2FXWWdLSElnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSEl1YTI1dmQyNUJZM1JwYjI1ek93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzhnUFNBd0xDQmpJRDBnWVM1c1pXNW5kR2c3SUc4Z0lUMDlJR003SUNzcmJ5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlHRmJiMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtaV0ZqZEdsMllYUmxRV04wYVc5dUtHd3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQnNMbDlqWVdOb1pVbHVaR1Y0TENCMUlEMGdkRnQwTG14bGJtZDBhQ0F0SURGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDNWZZMkZqYUdWSmJtUmxlQ0E5SUc1MWJHd3NJR3d1WDJKNVEyeHBjRU5oWTJobFNXNWtaWGdnUFNCdWRXeHNMQ0IxTGw5allXTm9aVWx1WkdWNElEMGdhQ3dnZEZ0b1hTQTlJSFVzSUhRdWNHOXdLQ2tzSUhSb2FYTXVYM0psYlc5MlpVbHVZV04wYVhabFFtbHVaR2x1WjNOR2IzSkJZM1JwYjI0b2JDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHbGJibDA3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2RXNWpZV05vWlZKdmIzUW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1MWRXbGtMQ0J1SUQwZ2RHaHBjeTVmWVdOMGFXOXVjMEo1UTJ4cGNEc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHRWdhVzRnYmlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdibHRoWFM1aFkzUnBiMjVDZVZKdmIzUXNJR01nUFNCdlczUmRPd29nSUNBZ0lDQWdJQ0FnSUNCaklDRTlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXVYMlJsWVdOMGFYWmhkR1ZCWTNScGIyNG9ZeWtzSUhSb2FYTXVYM0psYlc5MlpVbHVZV04wYVhabFFXTjBhVzl1S0dNcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBhR2x6TGw5aWFXNWthVzVuYzBKNVVtOXZkRUZ1WkU1aGJXVXNJSElnUFNCcFczUmRPd29nSUNBZ0lDQWdJR2xtSUNoeUlDRTlQU0IyYjJsa0lEQXBJR1p2Y2loc1pYUWdZU0JwYmlCeUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0J5VzJGZE93b2dJQ0FnSUNBZ0lDQWdJQ0J2TG5KbGMzUnZjbVZQY21sbmFXNWhiRk4wWVhSbEtDa3NJSFJvYVhNdVgzSmxiVzkyWlVsdVlXTjBhWFpsUW1sdVpHbHVaeWh2S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQjFibU5oWTJobFFXTjBhVzl1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVpYaHBjM1JwYm1kQlkzUnBiMjRvWlN3Z2RDazdDaUFnSUNBZ0lDQWdiaUFoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVmWkdWaFkzUnBkbUYwWlVGamRHbHZiaWh1S1N3Z2RHaHBjeTVmY21WdGIzWmxTVzVoWTNScGRtVkJZM1JwYjI0b2Jpa3BPd29nSUNBZ2ZRcDlMQ0JRZFNBOUlHTnNZWE56SUhNeElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSFJvYVhNdWRtRnNkV1VnUFNCbE93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJ6TVNoMGFHbHpMblpoYkhWbExtTnNiMjVsSUQwOVBTQjJiMmxrSURBZ1B5QjBhR2x6TG5aaGJIVmxJRG9nZEdocGN5NTJZV3gxWlM1amJHOXVaU2dwS1RzS0lDQWdJSDBLZlN3Z1JuZ2dQU0F3TENCTWRTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ2MyNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpWVzVwWm05eWJYTkhjbTkxY0NBOUlDRXdMQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnSW1sa0lpd2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nUm5nckt3b2dJQ0FnSUNBZ0lIMHBMQ0IwYUdsekxtNWhiV1VnUFNBaUlpd2dkR2hwY3k1MWMyRm5aU0E5SUVoeUxDQjBhR2x6TG5WdWFXWnZjbTF6SUQwZ1cxMDdDaUFnSUNCOUNpQWdJQ0JoWkdRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5WdWFXWnZjbTF6TG5CMWMyZ29aU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5WlcxdmRtVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NTFibWxtYjNKdGN5NXBibVJsZUU5bUtHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBJQ0U5UFNBdE1TQW1KaUIwYUdsekxuVnVhV1p2Y20xekxuTndiR2xqWlNoMExDQXhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEU1aGJXVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNWhiV1VnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBWWE5oWjJVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5WellXZGxJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR2x6Y0dGMFkyaEZkbVZ1ZENoN0NpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDSmthWE53YjNObElnb2dJQ0FnSUNBZ0lIMHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dVlXMWxJRDBnWlM1dVlXMWxMQ0IwYUdsekxuVnpZV2RsSUQwZ1pTNTFjMkZuWlRzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdWRXNXBabTl5YlhNN0NpQWdJQ0FnSUNBZ2RHaHBjeTUxYm1sbWIzSnRjeTVzWlc1bmRHZ2dQU0F3T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQThJR2s3SUc0ckt5bDBhR2x6TG5WdWFXWnZjbTF6TG5CMWMyZ29kRnR1WFM1amJHOXVaU2dwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1OdmNIa29kR2hwY3lrN0NpQWdJQ0I5Q24wc0lFbDFJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QkpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVJRDBnTVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlN3Z2RDa3NJSFJvYVhNdWFYTkpibk4wWVc1alpXUkpiblJsY214bFlYWmxaRUoxWm1abGNpQTlJQ0V3TENCMGFHbHpMbTFsYzJoUVpYSkJkSFJ5YVdKMWRHVWdQU0J1T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWJXVnphRkJsY2tGMGRISnBZblYwWlNBOUlHVXViV1Z6YUZCbGNrRjBkSEpwWW5WMFpTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlITjFjR1Z5TG1Oc2IyNWxLR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwTG0xbGMyaFFaWEpCZEhSeWFXSjFkR1VnUFNCMGFHbHpMbTFsYzJoUVpYSkJkSFJ5YVdKMWRHVXNJSFE3Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2MzVndaWEl1ZEc5S1UwOU9LR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwTG1selNXNXpkR0Z1WTJWa1NXNTBaWEpzWldGMlpXUkNkV1ptWlhJZ1BTQWhNQ3dnZEM1dFpYTm9VR1Z5UVhSMGNtbGlkWFJsSUQwZ2RHaHBjeTV0WlhOb1VHVnlRWFIwY21saWRYUmxMQ0IwT3dvZ0lDQWdmUXA5TENCVmRTQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0c0lHa3NJSElwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVhWE5IVEVKMVptWmxja0YwZEhKcFluVjBaU0E5SUNFd0xDQjBhR2x6TG01aGJXVWdQU0FpSWl3Z2RHaHBjeTVpZFdabVpYSWdQU0JsTENCMGFHbHpMblI1Y0dVZ1BTQjBMQ0IwYUdsekxtbDBaVzFUYVhwbElEMGdiaXdnZEdocGN5NWxiR1Z0Wlc1MFUybDZaU0E5SUdrc0lIUm9hWE11WTI5MWJuUWdQU0J5TENCMGFHbHpMblpsY25OcGIyNGdQU0F3T3dvZ0lDQWdmUW9nSUNBZ2MyVjBJRzVsWldSelZYQmtZWFJsS0dVcElIc0tJQ0FnSUNBZ0lDQmxJRDA5UFNBaE1DQW1KaUIwYUdsekxuWmxjbk5wYjI0ckt6c0tJQ0FnSUgwS0lDQWdJSE5sZEVKMVptWmxjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZblZtWm1WeUlEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZSNWNHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblI1Y0dVZ1BTQmxMQ0IwYUdsekxtVnNaVzFsYm5SVGFYcGxJRDBnZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFbDBaVzFUYVhwbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGRHVnRVMmw2WlNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJEYjNWdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOTFiblFnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUXA5TENCRWRTQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0Z1BTQXdMQ0JwSUQwZ01TQXZJREFwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjbUY1SUQwZ2JtVjNJR2hwS0dVc0lIUXBMQ0IwYUdsekxtNWxZWElnUFNCdUxDQjBhR2x6TG1aaGNpQTlJR2tzSUhSb2FYTXVZMkZ0WlhKaElEMGdiblZzYkN3Z2RHaHBjeTVzWVhsbGNuTWdQU0J1WlhjZ1VuTXNJSFJvYVhNdWNHRnlZVzF6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JOWlhOb09pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1RHbHVaVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeVpYTm9iMnhrT2lBeENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lFeFBSRG9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJRkJ2YVc1MGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5WlhOb2IyeGtPaUF4Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUZOd2NtbDBaVG9nZTMwS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdjMlYwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmhlUzV6WlhRb1pTd2dkQ2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0UTJGdFpYSmhLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBMbWx6VUdWeWMzQmxZM1JwZG1WRFlXMWxjbUVnUHlBb2RHaHBjeTV5WVhrdWIzSnBaMmx1TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaDBMbTFoZEhKcGVGZHZjbXhrS1N3Z2RHaHBjeTV5WVhrdVpHbHlaV04wYVc5dUxuTmxkQ2hsTG5nc0lHVXVlU3dnTGpVcExuVnVjSEp2YW1WamRDaDBLUzV6ZFdJb2RHaHBjeTV5WVhrdWIzSnBaMmx1S1M1dWIzSnRZV3hwZW1Vb0tTd2dkR2hwY3k1allXMWxjbUVnUFNCMEtTQTZJSFF1YVhOUGNuUm9iMmR5WVhCb2FXTkRZVzFsY21FZ1B5QW9kR2hwY3k1eVlYa3ViM0pwWjJsdUxuTmxkQ2hsTG5nc0lHVXVlU3dnS0hRdWJtVmhjaUFySUhRdVptRnlLU0F2SUNoMExtNWxZWElnTFNCMExtWmhjaWtwTG5WdWNISnZhbVZqZENoMEtTd2dkR2hwY3k1eVlYa3VaR2x5WldOMGFXOXVMbk5sZENnd0xDQXdMQ0F0TVNrdWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtIUXViV0YwY21sNFYyOXliR1FwTENCMGFHbHpMbU5oYldWeVlTQTlJSFFwSURvZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVbUY1WTJGemRHVnlPaUJWYm5OMWNIQnZjblJsWkNCallXMWxjbUVnZEhsd1pUb2dJaUFySUhRdWRIbHdaU2s3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSUFltcGxZM1FvWlN3Z2RDQTlJQ0V3TENCdUlEMGdXMTBwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYTJNb1pTd2dkR2hwY3l3Z2Jpd2dkQ2tzSUc0dWMyOXlkQ2hPZFNrc0lHNDdDaUFnSUNCOUNpQWdJQ0JwYm5SbGNuTmxZM1JQWW1wbFkzUnpLR1VzSUhRZ1BTQWhNQ3dnYmlBOUlGdGRLU0I3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUdVdWJHVnVaM1JvT3lCcElEd2djanNnYVNzcktXdGpLR1ZiYVYwc0lIUm9hWE1zSUc0c0lIUXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVMbk52Y25Rb1RuVXBMQ0J1T3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCT2RTaHpNU3dnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJSE14TG1ScGMzUmhibU5sSUMwZ1pTNWthWE4wWVc1alpUc0tmUXBtZFc1amRHbHZiaUJyWXloek1Td2daU3dnZEN3Z2Jpa2dld29nSUNBZ2FXWWdLSE14TG14aGVXVnljeTUwWlhOMEtHVXViR0Y1WlhKektTQW1KaUJ6TVM1eVlYbGpZWE4wS0dVc0lIUXBMQ0J1SUQwOVBTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnY3pFdVkyaHBiR1J5Wlc0N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCeUlEMGdNQ3dnWVNBOUlHa3ViR1Z1WjNSb095QnlJRHdnWVRzZ2Npc3JLV3RqS0dsYmNsMHNJR1VzSUhRc0lDRXdLVHNLSUNBZ0lIMEtmUXAyWVhJZ1QzVWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnTVN3Z2RDQTlJREFzSUc0Z1BTQXdLWHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVlXUnBkWE1nUFNCbExDQjBhR2x6TG5Cb2FTQTlJSFFzSUhSb2FYTXVkR2hsZEdFZ1BTQnVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwS0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlZV1JwZFhNZ1BTQmxMQ0IwYUdsekxuQm9hU0E5SUhRc0lIUm9hWE11ZEdobGRHRWdQU0J1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtRmthWFZ6SUQwZ1pTNXlZV1JwZFhNc0lIUm9hWE11Y0docElEMGdaUzV3YUdrc0lIUm9hWE11ZEdobGRHRWdQU0JsTG5Sb1pYUmhMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlZOaFptVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHaHBJRDBnVFdGMGFDNXRZWGdvTVdVdE5pd2dUV0YwYUM1dGFXNG9UV0YwYUM1UVNTQXRJREZsTFRZc0lIUm9hWE11Y0docEtTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFZtVmpkRzl5TXlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMFJuSnZiVU5oY25SbGMybGhia052YjNKa2N5aGxMbmdzSUdVdWVTd2daUzU2S1RzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxRFlYSjBaWE5wWVc1RGIyOXlaSE1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmhaR2wxY3lBOUlFMWhkR2d1YzNGeWRDaGxJQ29nWlNBcklIUWdLaUIwSUNzZ2JpQXFJRzRwTENCMGFHbHpMbkpoWkdsMWN5QTlQVDBnTUNBL0lDaDBhR2x6TG5Sb1pYUmhJRDBnTUN3Z2RHaHBjeTV3YUdrZ1BTQXdLU0E2SUNoMGFHbHpMblJvWlhSaElEMGdUV0YwYUM1aGRHRnVNaWhsTENCdUtTd2dkR2hwY3k1d2FHa2dQU0JOWVhSb0xtRmpiM01vWTNRb2RDQXZJSFJvYVhNdWNtRmthWFZ6TENBdE1Td2dNU2twS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNuMHNJRVoxSUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlERXNJSFFnUFNBd0xDQnVJRDBnTUNsN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbUZrYVhWeklEMGdaU3dnZEdocGN5NTBhR1YwWVNBOUlIUXNJSFJvYVhNdWVTQTlJRzRzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhRb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpoWkdsMWN5QTlJR1VzSUhSb2FYTXVkR2hsZEdFZ1BTQjBMQ0IwYUdsekxua2dQU0J1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtRmthWFZ6SUQwZ1pTNXlZV1JwZFhNc0lIUm9hWE11ZEdobGRHRWdQU0JsTG5Sb1pYUmhMQ0IwYUdsekxua2dQU0JsTG5rc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0Vm1WamRHOXlNeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwUm5KdmJVTmhjblJsYzJsaGJrTnZiM0prY3lobExuZ3NJR1V1ZVN3Z1pTNTZLVHNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFEWVhKMFpYTnBZVzVEYjI5eVpITW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KaFpHbDFjeUE5SUUxaGRHZ3VjM0Z5ZENobElDb2daU0FySUc0Z0tpQnVLU3dnZEdocGN5NTBhR1YwWVNBOUlFMWhkR2d1WVhSaGJqSW9aU3dnYmlrc0lIUm9hWE11ZVNBOUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9LUzVqYjNCNUtIUm9hWE1wT3dvZ0lDQWdmUXA5TENCQ2RTQTlJRzVsZHlCYUxDQjZkU0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dXaWd4SUM4Z01Dd2dNU0F2SURBcExDQjBJRDBnYm1WM0lGb29MVEVnTHlBd0xDQXRNU0F2SURBcEtYc0tJQ0FnSUNBZ0lDQjBhR2x6TG1selFtOTRNaUE5SUNFd0xDQjBhR2x6TG0xcGJpQTlJR1VzSUhSb2FYTXViV0Y0SUQwZ2REc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbU52Y0hrb1pTa3NJSFJvYVhNdWJXRjRMbU52Y0hrb2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFVHOXBiblJ6S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG0xaGEyVkZiWEIwZVNncE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQmxMbXhsYm1kMGFEc2dkQ0E4SUc0N0lIUXJLeWwwYUdsekxtVjRjR0Z1WkVKNVVHOXBiblFvWlZ0MFhTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0UTJWdWRHVnlRVzVrVTJsNlpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCQ2RTNWpiM0I1S0hRcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0M0MUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0YVc0dVkyOXdlU2hsS1M1emRXSW9iaWtzSUhSb2FYTXViV0Y0TG1OdmNIa29aU2t1WVdSa0tHNHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLQ2t1WTI5d2VTaDBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTFwYmk1amIzQjVLR1V1YldsdUtTd2dkR2hwY3k1dFlYZ3VZMjl3ZVNobExtMWhlQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVd0bFJXMXdkSGtvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG5nZ1BTQjBhR2x6TG0xcGJpNTVJRDBnTVNBdklEQXNJSFJvYVhNdWJXRjRMbmdnUFNCMGFHbHpMbTFoZUM1NUlEMGdMVEVnTHlBd0xDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2FYTkZiWEIwZVNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhndWVDQThJSFJvYVhNdWJXbHVMbmdnZkh3Z2RHaHBjeTV0WVhndWVTQThJSFJvYVhNdWJXbHVMbms3Q2lBZ0lDQjlDaUFnSUNCblpYUkRaVzUwWlhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1selJXMXdkSGtvS1NBL0lHVXVjMlYwS0RBc0lEQXBJRG9nWlM1aFpHUldaV04wYjNKektIUm9hWE11YldsdUxDQjBhR2x6TG0xaGVDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb0xqVXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFUybDZaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhWE5GYlhCMGVTZ3BJRDhnWlM1elpYUW9NQ3dnTUNrZ09pQmxMbk4xWWxabFkzUnZjbk1vZEdocGN5NXRZWGdzSUhSb2FYTXViV2x1S1RzS0lDQWdJSDBLSUNBZ0lHVjRjR0Z1WkVKNVVHOXBiblFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTFwYmk1dGFXNG9aU2tzSUhSb2FYTXViV0Y0TG0xaGVDaGxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1Y0Y0dGdVpFSjVWbVZqZEc5eUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHVjM1ZpS0dVcExDQjBhR2x6TG0xaGVDNWhaR1FvWlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCbGVIQmhibVJDZVZOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG1Ga1pGTmpZV3hoY2lndFpTa3NJSFJvYVhNdWJXRjRMbUZrWkZOallXeGhjaWhsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOdmJuUmhhVzV6VUc5cGJuUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUFoS0dVdWVDQThJSFJvYVhNdWJXbHVMbmdnZkh3Z1pTNTRJRDRnZEdocGN5NXRZWGd1ZUNCOGZDQmxMbmtnUENCMGFHbHpMbTFwYmk1NUlIeDhJR1V1ZVNBK0lIUm9hWE11YldGNExua3BPd29nSUNBZ2ZRb2dJQ0FnWTI5dWRHRnBibk5DYjNnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNTRJRHc5SUdVdWJXbHVMbmdnSmlZZ1pTNXRZWGd1ZUNBOFBTQjBhR2x6TG0xaGVDNTRJQ1ltSUhSb2FYTXViV2x1TG5rZ1BEMGdaUzV0YVc0dWVTQW1KaUJsTG0xaGVDNTVJRHc5SUhSb2FYTXViV0Y0TG5rN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRWVhKaGJXVjBaWElvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbk5sZENnb1pTNTRJQzBnZEdocGN5NXRhVzR1ZUNrZ0x5QW9kR2hwY3k1dFlYZ3VlQ0F0SUhSb2FYTXViV2x1TG5ncExDQW9aUzU1SUMwZ2RHaHBjeTV0YVc0dWVTa2dMeUFvZEdocGN5NXRZWGd1ZVNBdElIUm9hWE11YldsdUxua3BLVHNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljMlZqZEhOQ2IzZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUFoS0dVdWJXRjRMbmdnUENCMGFHbHpMbTFwYmk1NElIeDhJR1V1YldsdUxuZ2dQaUIwYUdsekxtMWhlQzU0SUh4OElHVXViV0Y0TG5rZ1BDQjBhR2x6TG0xcGJpNTVJSHg4SUdVdWJXbHVMbmtnUGlCMGFHbHpMbTFoZUM1NUtUc0tJQ0FnSUgwS0lDQWdJR05zWVcxd1VHOXBiblFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbU52Y0hrb1pTa3VZMnhoYlhBb2RHaHBjeTV0YVc0c0lIUm9hWE11YldGNEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNSaGJtTmxWRzlRYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeGhiWEJRYjJsdWRDaGxMQ0JDZFNrdVpHbHpkR0Z1WTJWVWJ5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljMlZqZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxtMWhlQ2hsTG0xcGJpa3NJSFJvYVhNdWJXRjRMbTFwYmlobExtMWhlQ2tzSUhSb2FYTXVhWE5GYlhCMGVTZ3BJQ1ltSUhSb2FYTXViV0ZyWlVWdGNIUjVLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IxYm1sdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbTFwYmlobExtMXBiaWtzSUhSb2FYTXViV0Y0TG0xaGVDaGxMbTFoZUNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjMnhoZEdVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNWhaR1FvWlNrc0lIUm9hWE11YldGNExtRmtaQ2hsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWJXbHVMbVZ4ZFdGc2N5aDBhR2x6TG0xcGJpa2dKaVlnWlM1dFlYZ3VaWEYxWVd4ektIUm9hWE11YldGNEtUc0tJQ0FnSUgwS2ZTd2dWblVnUFNCdVpYY2dRU3dnVkhJZ1BTQnVaWGNnUVN3Z2EzVWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lFRXNJSFFnUFNCdVpYY2dRU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXpkR0Z5ZENBOUlHVXNJSFJvYVhNdVpXNWtJRDBnZERzS0lDQWdJSDBLSUNBZ0lITmxkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSaGNuUXVZMjl3ZVNobEtTd2dkR2hwY3k1bGJtUXVZMjl3ZVNoMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wWVhKMExtTnZjSGtvWlM1emRHRnlkQ2tzSUhSb2FYTXVaVzVrTG1OdmNIa29aUzVsYm1RcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBRMlZ1ZEdWeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVoWkdSV1pXTjBiM0p6S0hSb2FYTXVjM1JoY25Rc0lIUm9hWE11Wlc1a0tTNXRkV3gwYVhCc2VWTmpZV3hoY2lndU5TazdDaUFnSUNCOUNpQWdJQ0JrWld4MFlTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1YzNWaVZtVmpkRzl5Y3loMGFHbHpMbVZ1WkN3Z2RHaHBjeTV6ZEdGeWRDazdDaUFnSUNCOUNpQWdJQ0JrYVhOMFlXNWpaVk54S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wWVhKMExtUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tIUm9hWE11Wlc1a0tUc0tJQ0FnSUgwS0lDQWdJR1JwYzNSaGJtTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBZWEowTG1ScGMzUmhibU5sVkc4b2RHaHBjeTVsYm1RcE93b2dJQ0FnZlFvZ0lDQWdZWFFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SbGJIUmhLSFFwTG0xMWJIUnBjR3g1VTJOaGJHRnlLR1VwTG1Ga1pDaDBhR2x6TG5OMFlYSjBLVHNLSUNBZ0lIMEtJQ0FnSUdOc2IzTmxjM1JRYjJsdWRGUnZVRzlwYm5SUVlYSmhiV1YwWlhJb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUZaMUxuTjFZbFpsWTNSdmNuTW9aU3dnZEdocGN5NXpkR0Z5ZENrc0lGUnlMbk4xWWxabFkzUnZjbk1vZEdocGN5NWxibVFzSUhSb2FYTXVjM1JoY25RcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1ZISXVaRzkwS0ZSeUtTd2djaUE5SUZSeUxtUnZkQ2hXZFNrZ0x5QnVPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBJQ1ltSUNoeUlEMGdZM1FvY2l3Z01Dd2dNU2twTENCeU93b2dJQ0FnZlFvZ0lDQWdZMnh2YzJWemRGQnZhVzUwVkc5UWIybHVkQ2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxtTnNiM05sYzNSUWIybHVkRlJ2VUc5cGJuUlFZWEpoYldWMFpYSW9aU3dnZENrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR1ZzZEdFb2Jpa3ViWFZzZEdsd2JIbFRZMkZzWVhJb2FTa3VZV1JrS0hSb2FYTXVjM1JoY25RcE93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEdGeWRDNWhjSEJzZVUxaGRISnBlRFFvWlNrc0lIUm9hWE11Wlc1a0xtRndjR3g1VFdGMGNtbDROQ2hsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWMzUmhjblF1WlhGMVlXeHpLSFJvYVhNdWMzUmhjblFwSUNZbUlHVXVaVzVrTG1WeGRXRnNjeWgwYUdsekxtVnVaQ2s3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRcDlMQ0JJZFNBOUlHNWxkeUJCTENCSGRTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1NtVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZENsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVzYVdkb2RDQTlJR1VzSUhSb2FYTXViV0YwY21sNElEMGdaUzV0WVhSeWFYaFhiM0pzWkN3Z2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11WTI5c2IzSWdQU0IwTENCMGFHbHpMblI1Y0dVZ1BTQWlVM0J2ZEV4cFoyaDBTR1ZzY0dWeUlqc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHNWxkeUJIWlN3Z2FTQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F4Q2lBZ0lDQWdJQ0FnWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdFZ1BTQXdMQ0J2SUQwZ01Td2dZeUE5SURNeU95QmhJRHdnWXpzZ1lTc3JMQ0J2S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJR0VnTHlCaklDb2dUV0YwYUM1UVNTQXFJRElzSUdnZ1BTQnZJQzhnWXlBcUlFMWhkR2d1VUVrZ0tpQXlPd29nSUNBZ0lDQWdJQ0FnSUNCcExuQjFjMmdvVFdGMGFDNWpiM01vYkNrc0lFMWhkR2d1YzJsdUtHd3BMQ0F4TENCTllYUm9MbU52Y3lob0tTd2dUV0YwYUM1emFXNG9hQ2tzSURFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnVMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnZG1Vb2FTd2dNeWtwT3dvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnYm1WM0lIZDBLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOW5PaUFoTVN3S0lDQWdJQ0FnSUNBZ0lDQWdkRzl1WlUxaGNIQmxaRG9nSVRFS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtVWdQU0J1WlhjZ1pXNG9iaXdnY2lrc0lIUm9hWE11WVdSa0tIUm9hWE11WTI5dVpTa3NJSFJvYVhNdWRYQmtZWFJsS0NrN0NpQWdJQ0I5Q2lBZ0lDQmthWE53YjNObEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdVkyOXVaUzVuWlc5dFpYUnllUzVrYVhOd2IzTmxLQ2tzSUhSb2FYTXVZMjl1WlM1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1c2FXZG9kQzUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2doTUN3Z0lURXBMQ0IwYUdsekxteHBaMmgwTG5SaGNtZGxkQzUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2doTUN3Z0lURXBPd29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1c2FXZG9kQzVrYVhOMFlXNWpaU0EvSUhSb2FYTXViR2xuYUhRdVpHbHpkR0Z1WTJVZ09pQXhaVE1zSUhRZ1BTQmxJQ29nVFdGMGFDNTBZVzRvZEdocGN5NXNhV2RvZEM1aGJtZHNaU2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiMjVsTG5OallXeGxMbk5sZENoMExDQjBMQ0JsS1N3Z1NIVXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hSb2FYTXViR2xuYUhRdWRHRnlaMlYwTG0xaGRISnBlRmR2Y214a0tTd2dkR2hwY3k1amIyNWxMbXh2YjJ0QmRDaElkU2tzSUhSb2FYTXVZMjlzYjNJZ0lUMDlJSFp2YVdRZ01DQS9JSFJvYVhNdVkyOXVaUzV0WVhSbGNtbGhiQzVqYjJ4dmNpNXpaWFFvZEdocGN5NWpiMnh2Y2lrZ09pQjBhR2x6TG1OdmJtVXViV0YwWlhKcFlXd3VZMjlzYjNJdVkyOXdlU2gwYUdsekxteHBaMmgwTG1OdmJHOXlLVHNLSUNBZ0lIMEtmU3dnVUc0Z1BTQnVaWGNnUVN3Z2QzSWdQU0J1WlhjZ2VtVXNJR3h2SUQwZ2JtVjNJSHBsTENCWGRTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1pXNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JPWkNobEtTd2diaUE5SUc1bGR5QkhaU3dnYVNBOUlGdGRMQ0J5SUQwZ1cxMHNJR0VnUFNCdVpYY2djR1VvTUN3Z01Dd2dNU2tzSUc4Z1BTQnVaWGNnY0dVb01Dd2dNU3dnTUNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCc0lEMGdNRHNnYkNBOElIUXViR1Z1WjNSb095QnNLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlIUmJiRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHZ3VjR0Z5Wlc1MElDWW1JR2d1Y0dGeVpXNTBMbWx6UW05dVpTQW1KaUFvYVM1d2RYTm9LREFzSURBc0lEQXBMQ0JwTG5CMWMyZ29NQ3dnTUN3Z01Da3NJSEl1Y0hWemFDaGhMbklzSUdFdVp5d2dZUzVpS1N3Z2NpNXdkWE5vS0c4dWNpd2dieTVuTENCdkxtSXBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYmk1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lIWmxLR2tzSURNcEtTd2diaTV6WlhSQmRIUnlhV0oxZEdVb0ltTnZiRzl5SWl3Z2JtVjNJSFpsS0hJc0lETXBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJRzVsZHlCM2RDaDdDaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUmxlRU52Ykc5eWN6b2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvVkdWemREb2dJVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvVjNKcGRHVTZJQ0V4TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVN3S0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5Od1lYSmxiblE2SUNFd0NpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2Jpd2dZeWtzSUhSb2FYTXVhWE5UYTJWc1pYUnZia2hsYkhCbGNpQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlVMnRsYkdWMGIyNUlaV3h3WlhJaUxDQjBhR2x6TG5KdmIzUWdQU0JsTENCMGFHbHpMbUp2Ym1WeklEMGdkQ3dnZEdocGN5NXRZWFJ5YVhnZ1BTQmxMbTFoZEhKcGVGZHZjbXhrTENCMGFHbHpMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVWdQU0FoTVRzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlUxaGRISnBlRmR2Y214a0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVltOXVaWE1zSUc0Z1BTQjBhR2x6TG1kbGIyMWxkSEo1TENCcElEMGdiaTVuWlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpazdDaUFnSUNBZ0lDQWdiRzh1WTI5d2VTaDBhR2x6TG5KdmIzUXViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQXNJR0VnUFNBd095QnlJRHdnZEM1c1pXNW5kR2c3SUhJckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZEZ0eVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYnk1d1lYSmxiblFnSmlZZ2J5NXdZWEpsYm5RdWFYTkNiMjVsSUNZbUlDaDNjaTV0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLR3h2TENCdkxtMWhkSEpwZUZkdmNteGtLU3dnVUc0dWMyVjBSbkp2YlUxaGRISnBlRkJ2YzJsMGFXOXVLSGR5S1N3Z2FTNXpaWFJZV1Zvb1lTd2dVRzR1ZUN3Z1VHNHVlU3dnVUc0dWVpa3NJSGR5TG0xMWJIUnBjR3g1VFdGMGNtbGpaWE1vYkc4c0lHOHVjR0Z5Wlc1MExtMWhkSEpwZUZkdmNteGtLU3dnVUc0dWMyVjBSbkp2YlUxaGRISnBlRkJ2YzJsMGFXOXVLSGR5S1N3Z2FTNXpaWFJZV1Zvb1lTQXJJREVzSUZCdUxuZ3NJRkJ1TG5rc0lGQnVMbm9wTENCaElDczlJRElwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCdUxtZGxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpS1M1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCemRYQmxjaTUxY0dSaGRHVk5ZWFJ5YVhoWGIzSnNaQ2hsS1RzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1blpXOXRaWFJ5ZVM1a2FYTndiM05sS0Nrc0lIUm9hWE11YldGMFpYSnBZV3d1WkdsemNHOXpaU2dwT3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCT1pDaHpNU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQmJYVHNLSUNBZ0lITXhMbWx6UW05dVpTQTlQVDBnSVRBZ0ppWWdaUzV3ZFhOb0tITXhLVHNLSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREE3SUhRZ1BDQnpNUzVqYUdsc1pISmxiaTVzWlc1bmRHZzdJSFFyS3lsbExuQjFjMmd1WVhCd2JIa29aU3dnVG1Rb2N6RXVZMmhwYkdSeVpXNWJkRjBwS1RzS0lDQWdJSEpsZEhWeWJpQmxPd3A5Q25aaGNpQllkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdUWFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaWw3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1WlhjZ2RXRW9kQ3dnTkN3Z01pa3NJSElnUFNCdVpYY2dVMjRvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjNhWEpsWm5KaGJXVTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iMmM2SUNFeExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSE4xY0dWeUtHa3NJSElwTENCMGFHbHpMbXhwWjJoMElEMGdaU3dnZEdocGN5NWpiMnh2Y2lBOUlHNHNJSFJvYVhNdWRIbHdaU0E5SUNKUWIybHVkRXhwWjJoMFNHVnNjR1Z5SWl3Z2RHaHBjeTV0WVhSeWFYZ2dQU0IwYUdsekxteHBaMmgwTG0xaGRISnBlRmR2Y214a0xDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1MWNHUmhkR1VvS1RzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1blpXOXRaWFJ5ZVM1a2FYTndiM05sS0Nrc0lIUm9hWE11YldGMFpYSnBZV3d1WkdsemNHOXpaU2dwT3dvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YkdsbmFIUXVkWEJrWVhSbFYyOXliR1JOWVhSeWFYZ29JVEFzSUNFeEtTd2dkR2hwY3k1amIyeHZjaUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RHaHBjeTV0WVhSbGNtbGhiQzVqYjJ4dmNpNXpaWFFvZEdocGN5NWpiMnh2Y2lrZ09pQjBhR2x6TG0xaGRHVnlhV0ZzTG1OdmJHOXlMbU52Y0hrb2RHaHBjeTVzYVdkb2RDNWpiMnh2Y2lrN0NpQWdJQ0I5Q24wc0lFSjRJRDBnYm1WM0lFRXNJSEYxSUQwZ2JtVjNJSEJsTENCWmRTQTlJRzVsZHlCd1pTd2dXblVnUFNCamJHRnpjeUJsZUhSbGJtUnpJRXBsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXViR2xuYUhRZ1BTQmxMQ0IwYUdsekxtMWhkSEpwZUNBOUlHVXViV0YwY21sNFYyOXliR1FzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJQ0V4TENCMGFHbHpMbU52Ykc5eUlEMGdiaXdnZEdocGN5NTBlWEJsSUQwZ0lraGxiV2x6Y0dobGNtVk1hV2RvZEVobGJIQmxjaUk3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1WlhjZ2FHRW9kQ2s3Q2lBZ0lDQWdJQ0FnYVM1eWIzUmhkR1ZaS0UxaGRHZ3VVRWtnS2lBdU5Ta3NJSFJvYVhNdWJXRjBaWEpwWVd3Z1BTQnVaWGNnVTI0b2V3b2dJQ0FnSUNBZ0lDQWdJQ0IzYVhKbFpuSmhiV1U2SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JtYjJjNklDRXhMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwTENCMGFHbHpMbU52Ykc5eUlEMDlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXViV0YwWlhKcFlXd3VkbVZ5ZEdWNFEyOXNiM0p6SUQwZ0lUQXBPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdhUzVuWlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpa3NJR0VnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0hJdVkyOTFiblFnS2lBektUc0tJQ0FnSUNBZ0lDQnBMbk5sZEVGMGRISnBZblYwWlNnaVkyOXNiM0lpTENCdVpYY2daWFFvWVN3Z015a3BMQ0IwYUdsekxtRmtaQ2h1WlhjZ1RYUW9hU3dnZEdocGN5NXRZWFJsY21saGJDa3BMQ0IwYUdsekxuVndaR0YwWlNncE93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtTm9hV3hrY21WdVd6QmRMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnZEdocGN5NWphR2xzWkhKbGJsc3dYUzV0WVhSbGNtbGhiQzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1VvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbU5vYVd4a2NtVnVXekJkT3dvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmJHOXlJQ0U5UFNCMmIybGtJREFwSUhSb2FYTXViV0YwWlhKcFlXd3VZMjlzYjNJdWMyVjBLSFJvYVhNdVkyOXNiM0lwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdVoyVnZiV1YwY25rdVoyVjBRWFIwY21saWRYUmxLQ0pqYjJ4dmNpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCeGRTNWpiM0I1S0hSb2FYTXViR2xuYUhRdVkyOXNiM0lwTENCWmRTNWpiM0I1S0hSb2FYTXViR2xuYUhRdVozSnZkVzVrUTI5c2IzSXBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RDNWpiM1Z1ZERzZ2JpQThJR2s3SUc0ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHNGdQQ0JwSUM4Z01pQS9JSEYxSURvZ1dYVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBMbk5sZEZoWldpaHVMQ0J5TG5Jc0lISXVaeXdnY2k1aUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjBMbTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdWJHbG5hSFF1ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvSVRBc0lDRXhLU3dnWlM1c2IyOXJRWFFvUW5ndWMyVjBSbkp2YlUxaGRISnBlRkJ2YzJsMGFXOXVLSFJvYVhNdWJHbG5hSFF1YldGMGNtbDRWMjl5YkdRcExtNWxaMkYwWlNncEtUc0tJQ0FnSUgwS2ZTd2dTblVnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1Z1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhNQ3dnZENBOUlERXdMQ0J1SUQwZ05EUTNNemt5TkN3Z2FTQTlJRGc1TkRjNE5EZ3Bld29nSUNBZ0lDQWdJRzRnUFNCdVpYY2djR1VvYmlrc0lHa2dQU0J1WlhjZ2NHVW9hU2s3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0IwSUM4Z01pd2dZU0E5SUdVZ0x5QjBMQ0J2SUQwZ1pTQXZJRElzSUdNZ1BTQmJYU3dnYkNBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdaQ0E5SURBc0lHWWdQU0F3TENCdElEMGdMVzg3SUdRZ1BEMGdkRHNnWkNzckxDQnRJQ3M5SUdFcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JqTG5CMWMyZ29MVzhzSURBc0lHMHNJRzhzSURBc0lHMHBMQ0JqTG5CMWMyZ29iU3dnTUN3Z0xXOHNJRzBzSURBc0lHOHBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdYeUE5SUdRZ1BUMDlJSElnUHlCdUlEb2dhVHNLSUNBZ0lDQWdJQ0FnSUNBZ1h5NTBiMEZ5Y21GNUtHd3NJR1lwTENCbUlDczlJRE1zSUY4dWRHOUJjbkpoZVNoc0xDQm1LU3dnWmlBclBTQXpMQ0JmTG5SdlFYSnlZWGtvYkN3Z1ppa3NJR1lnS3owZ015d2dYeTUwYjBGeWNtRjVLR3dzSUdZcExDQm1JQ3M5SURNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ2JtVjNJRWRsT3dvZ0lDQWdJQ0FnSUdndWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2hqTENBektTa3NJR2d1YzJWMFFYUjBjbWxpZFhSbEtDSmpiMnh2Y2lJc0lHNWxkeUIyWlNoc0xDQXpLU2s3Q2lBZ0lDQWdJQ0FnYkdWMElIVWdQU0J1WlhjZ2QzUW9ld29nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhEYjJ4dmNuTTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lITjFjR1Z5S0dnc0lIVXBMQ0IwYUdsekxuUjVjR1VnUFNBaVIzSnBaRWhsYkhCbGNpSTdDaUFnSUNCOUNpQWdJQ0JrYVhOd2IzTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaMlZ2YldWMGNua3VaR2x6Y0c5elpTZ3BMQ0IwYUdsekxtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tUc0tJQ0FnSUgwS2ZTd2dKSFVnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1Z1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhNQ3dnZENBOUlERTJMQ0J1SUQwZ09Dd2dhU0E5SURZMExDQnlJRDBnTkRRM016a3lOQ3dnWVNBOUlEZzVORGM0TkRncGV3b2dJQ0FnSUNBZ0lISWdQU0J1WlhjZ2NHVW9jaWtzSUdFZ1BTQnVaWGNnY0dVb1lTazdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQmJYU3dnWXlBOUlGdGRPd29nSUNBZ0lDQWdJR2xtSUNoMElENGdNU2tnWm05eUtHeGxkQ0IxSUQwZ01Ec2dkU0E4SUhRN0lIVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ2RTQXZJSFFnS2lBb1RXRjBhQzVRU1NBcUlESXBMQ0JtSUQwZ1RXRjBhQzV6YVc0b1pDa2dLaUJsTENCdElEMGdUV0YwYUM1amIzTW9aQ2tnS2lCbE93b2dJQ0FnSUNBZ0lDQWdJQ0J2TG5CMWMyZ29NQ3dnTUN3Z01Da3NJRzh1Y0hWemFDaG1MQ0F3TENCdEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOGdQU0IxSUNZZ01TQS9JSElnT2lCaE93b2dJQ0FnSUNBZ0lDQWdJQ0JqTG5CMWMyZ29YeTV5TENCZkxtY3NJRjh1WWlrc0lHTXVjSFZ6YUNoZkxuSXNJRjh1Wnl3Z1h5NWlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IxSUQwZ01Ec2dkU0E4SUc0N0lIVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ2RTQW1JREVnUHlCeUlEb2dZU3dnWmlBOUlHVWdMU0JsSUM4Z2JpQXFJSFU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJREE3SUcwZ1BDQnBPeUJ0S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCdElDOGdhU0FxSUNoTllYUm9MbEJKSUNvZ01pa3NJR2NnUFNCTllYUm9Mbk5wYmloZktTQXFJR1lzSUhBZ1BTQk5ZWFJvTG1OdmN5aGZLU0FxSUdZN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxuQjFjMmdvWnl3Z01Dd2djQ2tzSUdNdWNIVnphQ2hrTG5Jc0lHUXVaeXdnWkM1aUtTd2dYeUE5SUNodElDc2dNU2tnTHlCcElDb2dLRTFoZEdndVVFa2dLaUF5S1N3Z1p5QTlJRTFoZEdndWMybHVLRjhwSUNvZ1ppd2djQ0E5SUUxaGRHZ3VZMjl6S0Y4cElDb2daaXdnYnk1d2RYTm9LR2NzSURBc0lIQXBMQ0JqTG5CMWMyZ29aQzV5TENCa0xtY3NJR1F1WWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0J1WlhjZ1IyVTdDaUFnSUNBZ0lDQWdiQzV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtHOHNJRE1wS1N3Z2JDNXpaWFJCZEhSeWFXSjFkR1VvSW1OdmJHOXlJaXdnYm1WM0lIWmxLR01zSURNcEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlHNWxkeUIzZENoN0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVFTnZiRzl5Y3pvZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUhSdmJtVk5ZWEJ3WldRNklDRXhDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9iQ3dnYUNrc0lIUm9hWE11ZEhsd1pTQTlJQ0pRYjJ4aGNrZHlhV1JJWld4d1pYSWlPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnZEdocGN5NXRZWFJsY21saGJDNWthWE53YjNObEtDazdDaUFnSUNCOUNuMHNJRXQxSUQwZ2JtVjNJRUVzSUVGeUlEMGdibVYzSUVFc0lGRjFJRDBnYm1WM0lFRXNJR3AxSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJLWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbXhwWjJoMElEMGdaU3dnZEdocGN5NXRZWFJ5YVhnZ1BTQmxMbTFoZEhKcGVGZHZjbXhrTENCMGFHbHpMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVWdQU0FoTVN3Z2RHaHBjeTVqYjJ4dmNpQTlJRzRzSUhSb2FYTXVkSGx3WlNBOUlDSkVhWEpsWTNScGIyNWhiRXhwWjJoMFNHVnNjR1Z5SWl3Z2RDQTlQVDBnZG05cFpDQXdJQ1ltSUNoMElEMGdNU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1WlhjZ1IyVTdDaUFnSUNBZ0lDQWdhUzV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtGc0tJQ0FnSUNBZ0lDQWdJQ0FnTFhRc0NpQWdJQ0FnSUNBZ0lDQWdJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUhRc0NpQWdJQ0FnSUNBZ0lDQWdJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUhRc0NpQWdJQ0FnSUNBZ0lDQWdJQzEwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdGRDd0tJQ0FnSUNBZ0lDQWdJQ0FnTFhRc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMTBMQW9nSUNBZ0lDQWdJQ0FnSUNCMExBb2dJQ0FnSUNBZ0lDQWdJQ0F3Q2lBZ0lDQWdJQ0FnWFN3Z015a3BPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdibVYzSUhkMEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05bk9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHOXVaVTFoY0hCbFpEb2dJVEVLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNCMGFHbHpMbXhwWjJoMFVHeGhibVVnUFNCdVpYY2dZbTRvYVN3Z2Npa3NJSFJvYVhNdVlXUmtLSFJvYVhNdWJHbG5hSFJRYkdGdVpTa3NJR2tnUFNCdVpYY2dSMlVzSUdrdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVLSUNBZ0lDQWdJQ0JkTENBektTa3NJSFJvYVhNdWRHRnlaMlYwVEdsdVpTQTlJRzVsZHlCaWJpaHBMQ0J5S1N3Z2RHaHBjeTVoWkdRb2RHaHBjeTUwWVhKblpYUk1hVzVsS1N3Z2RHaHBjeTUxY0dSaGRHVW9LVHNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVzYVdkb2RGQnNZVzVsTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVzYVdkb2RGQnNZVzVsTG0xaGRHVnlhV0ZzTG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTUwWVhKblpYUk1hVzVsTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTUwWVhKblpYUk1hVzVsTG0xaGRHVnlhV0ZzTG1ScGMzQnZjMlVvS1RzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG14cFoyaDBMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLQ0V3TENBaE1Ta3NJSFJvYVhNdWJHbG5hSFF1ZEdGeVoyVjBMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLQ0V3TENBaE1Ta3NJRXQxTG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaDBhR2x6TG14cFoyaDBMbTFoZEhKcGVGZHZjbXhrS1N3Z1FYSXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hSb2FYTXViR2xuYUhRdWRHRnlaMlYwTG0xaGRISnBlRmR2Y214a0tTd2dVWFV1YzNWaVZtVmpkRzl5Y3loQmNpd2dTM1VwTENCMGFHbHpMbXhwWjJoMFVHeGhibVV1Ykc5dmEwRjBLRUZ5S1N3Z2RHaHBjeTVqYjJ4dmNpQWhQVDBnZG05cFpDQXdJRDhnS0hSb2FYTXViR2xuYUhSUWJHRnVaUzV0WVhSbGNtbGhiQzVqYjJ4dmNpNXpaWFFvZEdocGN5NWpiMnh2Y2lrc0lIUm9hWE11ZEdGeVoyVjBUR2x1WlM1dFlYUmxjbWxoYkM1amIyeHZjaTV6WlhRb2RHaHBjeTVqYjJ4dmNpa3BJRG9nS0hSb2FYTXViR2xuYUhSUWJHRnVaUzV0WVhSbGNtbGhiQzVqYjJ4dmNpNWpiM0I1S0hSb2FYTXViR2xuYUhRdVkyOXNiM0lwTENCMGFHbHpMblJoY21kbGRFeHBibVV1YldGMFpYSnBZV3d1WTI5c2IzSXVZMjl3ZVNoMGFHbHpMbXhwWjJoMExtTnZiRzl5S1Nrc0lIUm9hWE11ZEdGeVoyVjBUR2x1WlM1c2IyOXJRWFFvUVhJcExDQjBhR2x6TG5SaGNtZGxkRXhwYm1VdWMyTmhiR1V1ZWlBOUlGRjFMbXhsYm1kMGFDZ3BPd29nSUNBZ2ZRcDlMQ0JTY2lBOUlHNWxkeUJCTENCdmRDQTlJRzVsZHlCRGN5d2daV1FnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1Z1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2JtVjNJRWRsTENCdUlEMGdibVYzSUhkMEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJREUyTnpjM01qRTFMQW9nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhEYjJ4dmNuTTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcExDQnBJRDBnVzEwc0lISWdQU0JiWFN3Z1lTQTlJSHQ5T3dvZ0lDQWdJQ0FnSUc4b0ltNHhJaXdnSW00eUlpa3NJRzhvSW00eUlpd2dJbTQwSWlrc0lHOG9JbTQwSWl3Z0ltNHpJaWtzSUc4b0ltNHpJaXdnSW00eElpa3NJRzhvSW1ZeElpd2dJbVl5SWlrc0lHOG9JbVl5SWl3Z0ltWTBJaWtzSUc4b0ltWTBJaXdnSW1Zeklpa3NJRzhvSW1Zeklpd2dJbVl4SWlrc0lHOG9JbTR4SWl3Z0ltWXhJaWtzSUc4b0ltNHlJaXdnSW1ZeUlpa3NJRzhvSW00eklpd2dJbVl6SWlrc0lHOG9JbTQwSWl3Z0ltWTBJaWtzSUc4b0luQWlMQ0FpYmpFaUtTd2dieWdpY0NJc0lDSnVNaUlwTENCdktDSndJaXdnSW00eklpa3NJRzhvSW5BaUxDQWlialFpS1N3Z2J5Z2lkVEVpTENBaWRUSWlLU3dnYnlnaWRUSWlMQ0FpZFRNaUtTd2dieWdpZFRNaUxDQWlkVEVpS1N3Z2J5Z2lZeUlzSUNKMElpa3NJRzhvSW5BaUxDQWlZeUlwTENCdktDSmpiakVpTENBaVkyNHlJaWtzSUc4b0ltTnVNeUlzSUNKamJqUWlLU3dnYnlnaVkyWXhJaXdnSW1ObU1pSXBMQ0J2S0NKalpqTWlMQ0FpWTJZMElpazdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdieWh0TENCZktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdNb2JTa3NJR01vWHlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHTW9iU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBMbkIxYzJnb01Dd2dNQ3dnTUNrc0lISXVjSFZ6YUNnd0xDQXdMQ0F3S1N3Z1lWdHRYU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaGhXMjFkSUQwZ1cxMHBMQ0JoVzIxZExuQjFjMmdvYVM1c1pXNW5kR2dnTHlBeklDMGdNU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhRdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2hwTENBektTa3NJSFF1YzJWMFFYUjBjbWxpZFhSbEtDSmpiMnh2Y2lJc0lHNWxkeUIyWlNoeUxDQXpLU2tzSUhOMWNHVnlLSFFzSUc0cExDQjBhR2x6TG5SNWNHVWdQU0FpUTJGdFpYSmhTR1ZzY0dWeUlpd2dkR2hwY3k1allXMWxjbUVnUFNCbExDQjBhR2x6TG1OaGJXVnlZUzUxY0dSaGRHVlFjbTlxWldOMGFXOXVUV0YwY21sNElDWW1JSFJvYVhNdVkyRnRaWEpoTG5Wd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LU3dnZEdocGN5NXRZWFJ5YVhnZ1BTQmxMbTFoZEhKcGVGZHZjbXhrTENCMGFHbHpMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVWdQU0FoTVN3Z2RHaHBjeTV3YjJsdWRFMWhjQ0E5SUdFc0lIUm9hWE11ZFhCa1lYUmxLQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0J1WlhjZ2NHVW9NVFkzTlRVeU1EQXBMQ0JvSUQwZ2JtVjNJSEJsS0RFMk56RXhOamd3S1N3Z2RTQTlJRzVsZHlCd1pTZzBNemMzTlNrc0lHUWdQU0J1WlhjZ2NHVW9NVFkzTnpjeU1UVXBMQ0JtSUQwZ2JtVjNJSEJsS0RNek5UVTBORE1wT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwUTI5c2IzSnpLR3dzSUdnc0lIVXNJR1FzSUdZcE93b2dJQ0FnZlFvZ0lDQWdjMlYwUTI5c2IzSnpLR1VzSUhRc0lHNHNJR2tzSUhJcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlIUm9hWE11WjJWdmJXVjBjbmt1WjJWMFFYUjBjbWxpZFhSbEtDSmpiMnh2Y2lJcE93b2dJQ0FnSUNBZ0lHOHVjMlYwV0ZsYUtEQXNJR1V1Y2l3Z1pTNW5MQ0JsTG1JcExDQnZMbk5sZEZoWldpZ3hMQ0JsTG5Jc0lHVXVaeXdnWlM1aUtTd2dieTV6WlhSWVdWb29NaXdnWlM1eUxDQmxMbWNzSUdVdVlpa3NJRzh1YzJWMFdGbGFLRE1zSUdVdWNpd2daUzVuTENCbExtSXBMQ0J2TG5ObGRGaFpXaWcwTENCbExuSXNJR1V1Wnl3Z1pTNWlLU3dnYnk1elpYUllXVm9vTlN3Z1pTNXlMQ0JsTG1jc0lHVXVZaWtzSUc4dWMyVjBXRmxhS0RZc0lHVXVjaXdnWlM1bkxDQmxMbUlwTENCdkxuTmxkRmhaV2lnM0xDQmxMbklzSUdVdVp5d2daUzVpS1N3Z2J5NXpaWFJZV1Zvb09Dd2daUzV5TENCbExtY3NJR1V1WWlrc0lHOHVjMlYwV0ZsYUtEa3NJR1V1Y2l3Z1pTNW5MQ0JsTG1JcExDQnZMbk5sZEZoWldpZ3hNQ3dnWlM1eUxDQmxMbWNzSUdVdVlpa3NJRzh1YzJWMFdGbGFLREV4TENCbExuSXNJR1V1Wnl3Z1pTNWlLU3dnYnk1elpYUllXVm9vTVRJc0lHVXVjaXdnWlM1bkxDQmxMbUlwTENCdkxuTmxkRmhaV2lneE15d2daUzV5TENCbExtY3NJR1V1WWlrc0lHOHVjMlYwV0ZsYUtERTBMQ0JsTG5Jc0lHVXVaeXdnWlM1aUtTd2dieTV6WlhSWVdWb29NVFVzSUdVdWNpd2daUzVuTENCbExtSXBMQ0J2TG5ObGRGaFpXaWd4Tml3Z1pTNXlMQ0JsTG1jc0lHVXVZaWtzSUc4dWMyVjBXRmxhS0RFM0xDQmxMbklzSUdVdVp5d2daUzVpS1N3Z2J5NXpaWFJZV1Zvb01UZ3NJR1V1Y2l3Z1pTNW5MQ0JsTG1JcExDQnZMbk5sZEZoWldpZ3hPU3dnWlM1eUxDQmxMbWNzSUdVdVlpa3NJRzh1YzJWMFdGbGFLREl3TENCbExuSXNJR1V1Wnl3Z1pTNWlLU3dnYnk1elpYUllXVm9vTWpFc0lHVXVjaXdnWlM1bkxDQmxMbUlwTENCdkxuTmxkRmhaV2lneU1pd2daUzV5TENCbExtY3NJR1V1WWlrc0lHOHVjMlYwV0ZsYUtESXpMQ0JsTG5Jc0lHVXVaeXdnWlM1aUtTd2dieTV6WlhSWVdWb29NalFzSUhRdWNpd2dkQzVuTENCMExtSXBMQ0J2TG5ObGRGaFpXaWd5TlN3Z2RDNXlMQ0IwTG1jc0lIUXVZaWtzSUc4dWMyVjBXRmxhS0RJMkxDQjBMbklzSUhRdVp5d2dkQzVpS1N3Z2J5NXpaWFJZV1Zvb01qY3NJSFF1Y2l3Z2RDNW5MQ0IwTG1JcExDQnZMbk5sZEZoWldpZ3lPQ3dnZEM1eUxDQjBMbWNzSUhRdVlpa3NJRzh1YzJWMFdGbGFLREk1TENCMExuSXNJSFF1Wnl3Z2RDNWlLU3dnYnk1elpYUllXVm9vTXpBc0lIUXVjaXdnZEM1bkxDQjBMbUlwTENCdkxuTmxkRmhaV2lnek1Td2dkQzV5TENCMExtY3NJSFF1WWlrc0lHOHVjMlYwV0ZsYUtETXlMQ0J1TG5Jc0lHNHVaeXdnYmk1aUtTd2dieTV6WlhSWVdWb29Nek1zSUc0dWNpd2diaTVuTENCdUxtSXBMQ0J2TG5ObGRGaFpXaWd6TkN3Z2JpNXlMQ0J1TG1jc0lHNHVZaWtzSUc4dWMyVjBXRmxhS0RNMUxDQnVMbklzSUc0dVp5d2diaTVpS1N3Z2J5NXpaWFJZV1Zvb016WXNJRzR1Y2l3Z2JpNW5MQ0J1TG1JcExDQnZMbk5sZEZoWldpZ3pOeXdnYmk1eUxDQnVMbWNzSUc0dVlpa3NJRzh1YzJWMFdGbGFLRE00TENCcExuSXNJR2t1Wnl3Z2FTNWlLU3dnYnk1elpYUllXVm9vTXprc0lHa3VjaXdnYVM1bkxDQnBMbUlwTENCdkxuTmxkRmhaV2lnME1Dd2djaTV5TENCeUxtY3NJSEl1WWlrc0lHOHVjMlYwV0ZsYUtEUXhMQ0J5TG5Jc0lISXVaeXdnY2k1aUtTd2dieTV6WlhSWVdWb29ORElzSUhJdWNpd2djaTVuTENCeUxtSXBMQ0J2TG5ObGRGaFpXaWcwTXl3Z2NpNXlMQ0J5TG1jc0lISXVZaWtzSUc4dWMyVjBXRmxhS0RRMExDQnlMbklzSUhJdVp5d2djaTVpS1N3Z2J5NXpaWFJZV1Zvb05EVXNJSEl1Y2l3Z2NpNW5MQ0J5TG1JcExDQnZMbk5sZEZoWldpZzBOaXdnY2k1eUxDQnlMbWNzSUhJdVlpa3NJRzh1YzJWMFdGbGFLRFEzTENCeUxuSXNJSEl1Wnl3Z2NpNWlLU3dnYnk1elpYUllXVm9vTkRnc0lISXVjaXdnY2k1bkxDQnlMbUlwTENCdkxuTmxkRmhaV2lnME9Td2djaTV5TENCeUxtY3NJSEl1WWlrc0lHOHVibVZsWkhOVmNHUmhkR1VnUFNBaE1Ec0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVoyVnZiV1YwY25rc0lIUWdQU0IwYUdsekxuQnZhVzUwVFdGd0xDQnVJRDBnTVN3Z2FTQTlJREU3Q2lBZ0lDQWdJQ0FnYjNRdWNISnZhbVZqZEdsdmJrMWhkSEpwZUVsdWRtVnljMlV1WTI5d2VTaDBhR2x6TG1OaGJXVnlZUzV3Y205cVpXTjBhVzl1VFdGMGNtbDRTVzUyWlhKelpTa3NJR2gwS0NKaklpd2dkQ3dnWlN3Z2IzUXNJREFzSURBc0lDMHhLU3dnYUhRb0luUWlMQ0IwTENCbExDQnZkQ3dnTUN3Z01Dd2dNU2tzSUdoMEtDSnVNU0lzSUhRc0lHVXNJRzkwTENBdGJpd2dMV2tzSUMweEtTd2dhSFFvSW00eUlpd2dkQ3dnWlN3Z2IzUXNJRzRzSUMxcExDQXRNU2tzSUdoMEtDSnVNeUlzSUhRc0lHVXNJRzkwTENBdGJpd2dhU3dnTFRFcExDQm9kQ2dpYmpRaUxDQjBMQ0JsTENCdmRDd2diaXdnYVN3Z0xURXBMQ0JvZENnaVpqRWlMQ0IwTENCbExDQnZkQ3dnTFc0c0lDMXBMQ0F4S1N3Z2FIUW9JbVl5SWl3Z2RDd2daU3dnYjNRc0lHNHNJQzFwTENBeEtTd2dhSFFvSW1Zeklpd2dkQ3dnWlN3Z2IzUXNJQzF1TENCcExDQXhLU3dnYUhRb0ltWTBJaXdnZEN3Z1pTd2diM1FzSUc0c0lHa3NJREVwTENCb2RDZ2lkVEVpTENCMExDQmxMQ0J2ZEN3Z2JpQXFJQzQzTENCcElDb2dNUzR4TENBdE1Ta3NJR2gwS0NKMU1pSXNJSFFzSUdVc0lHOTBMQ0F0YmlBcUlDNDNMQ0JwSUNvZ01TNHhMQ0F0TVNrc0lHaDBLQ0oxTXlJc0lIUXNJR1VzSUc5MExDQXdMQ0JwSUNvZ01pd2dMVEVwTENCb2RDZ2lZMll4SWl3Z2RDd2daU3dnYjNRc0lDMXVMQ0F3TENBeEtTd2dhSFFvSW1ObU1pSXNJSFFzSUdVc0lHOTBMQ0J1TENBd0xDQXhLU3dnYUhRb0ltTm1NeUlzSUhRc0lHVXNJRzkwTENBd0xDQXRhU3dnTVNrc0lHaDBLQ0pqWmpRaUxDQjBMQ0JsTENCdmRDd2dNQ3dnYVN3Z01Ta3NJR2gwS0NKamJqRWlMQ0IwTENCbExDQnZkQ3dnTFc0c0lEQXNJQzB4S1N3Z2FIUW9JbU51TWlJc0lIUXNJR1VzSUc5MExDQnVMQ0F3TENBdE1Ta3NJR2gwS0NKamJqTWlMQ0IwTENCbExDQnZkQ3dnTUN3Z0xXa3NJQzB4S1N3Z2FIUW9JbU51TkNJc0lIUXNJR1VzSUc5MExDQXdMQ0JwTENBdE1Ta3NJR1V1WjJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXBMbTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNCOUNpQWdJQ0JrYVhOd2IzTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaMlZ2YldWMGNua3VaR2x6Y0c5elpTZ3BMQ0IwYUdsekxtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tUc0tJQ0FnSUgwS2ZUc0tablZ1WTNScGIyNGdhSFFvY3pFc0lHVXNJSFFzSUc0c0lHa3NJSElzSUdFcElIc0tJQ0FnSUZKeUxuTmxkQ2hwTENCeUxDQmhLUzUxYm5CeWIycGxZM1FvYmlrN0NpQWdJQ0JzWlhRZ2J5QTlJR1ZiY3pGZE93b2dJQ0FnYVdZZ0tHOGdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnZEM1blpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaWs3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JzSUQwZ01Dd2dhQ0E5SUc4dWJHVnVaM1JvT3lCc0lEd2dhRHNnYkNzcktXTXVjMlYwV0ZsYUtHOWJiRjBzSUZKeUxuZ3NJRkp5TG5rc0lGSnlMbm9wT3dvZ0lDQWdmUXA5Q25aaGNpQkRjaUE5SUc1bGR5QlJkQ3dnZEdRZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdWdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFnUFNBeE5qYzNOamsyTUNsN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCdVpYY2dWV2x1ZERFMlFYSnlZWGtvV3dvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQTFMQW9nSUNBZ0lDQWdJQ0FnSUNBMUxBb2dJQ0FnSUNBZ0lDQWdJQ0EyTEFvZ0lDQWdJQ0FnSUNBZ0lDQTJMQW9nSUNBZ0lDQWdJQ0FnSUNBM0xBb2dJQ0FnSUNBZ0lDQWdJQ0EzTEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBMUxBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQTJMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0EzQ2lBZ0lDQWdJQ0FnWFNrc0lHa2dQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLRGdnS2lBektTd2djaUE5SUc1bGR5QkhaVHNLSUNBZ0lDQWdJQ0J5TG5ObGRFbHVaR1Y0S0c1bGR5QmxkQ2h1TENBeEtTa3NJSEl1YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCbGRDaHBMQ0F6S1Nrc0lITjFjR1Z5S0hJc0lHNWxkeUIzZENoN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwS1N3Z2RHaHBjeTV2WW1wbFkzUWdQU0JsTENCMGFHbHpMblI1Y0dVZ1BTQWlRbTk0U0dWc2NHVnlJaXdnZEdocGN5NXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElEMGdJVEVzSUhSb2FYTXVkWEJrWVhSbEtDazdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaGxJQ0U5UFNCMmIybGtJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUNiM2hJWld4d1pYSTZJQzUxY0dSaGRHVW9LU0JvWVhNZ2JtOGdiRzl1WjJWeUlHRnlaM1Z0Wlc1MGN5NGlLU3dnZEdocGN5NXZZbXBsWTNRZ0lUMDlJSFp2YVdRZ01DQW1KaUJEY2k1elpYUkdjbTl0VDJKcVpXTjBLSFJvYVhNdWIySnFaV04wS1N3Z1EzSXVhWE5GYlhCMGVTZ3BLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQkRjaTV0YVc0c0lHNGdQU0JEY2k1dFlYZ3NJR2tnUFNCMGFHbHpMbWRsYjIxbGRISjVMbUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjRzSUhJZ1BTQnBMbUZ5Y21GNU93b2dJQ0FnSUNBZ0lISmJNRjBnUFNCdUxuZ3NJSEpiTVYwZ1BTQnVMbmtzSUhKYk1sMGdQU0J1TG5vc0lISmJNMTBnUFNCMExuZ3NJSEpiTkYwZ1BTQnVMbmtzSUhKYk5WMGdQU0J1TG5vc0lISmJObDBnUFNCMExuZ3NJSEpiTjEwZ1BTQjBMbmtzSUhKYk9GMGdQU0J1TG5vc0lISmJPVjBnUFNCdUxuZ3NJSEpiTVRCZElEMGdkQzU1TENCeVd6RXhYU0E5SUc0dWVpd2djbHN4TWwwZ1BTQnVMbmdzSUhKYk1UTmRJRDBnYmk1NUxDQnlXekUwWFNBOUlIUXVlaXdnY2xzeE5WMGdQU0IwTG5nc0lISmJNVFpkSUQwZ2JpNTVMQ0J5V3pFM1hTQTlJSFF1ZWl3Z2Nsc3hPRjBnUFNCMExuZ3NJSEpiTVRsZElEMGdkQzU1TENCeVd6SXdYU0E5SUhRdWVpd2djbHN5TVYwZ1BTQnVMbmdzSUhKYk1qSmRJRDBnZEM1NUxDQnlXekl6WFNBOUlIUXVlaXdnYVM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMGFHbHpMbWRsYjIxbGRISjVMbU52YlhCMWRHVkNiM1Z1WkdsdVoxTndhR1Z5WlNncE93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJVOWlhbVZqZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YjJKcVpXTjBJRDBnWlN3Z2RHaHBjeTUxY0dSaGRHVW9LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVc0lIUXBMQ0IwYUdsekxtOWlhbVZqZENBOUlHVXViMkpxWldOMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTV0WVhSbGNtbGhiQzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQjlDbjBzSUc1a0lEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCbGJpQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwSUQwZ01UWTNOelk1TmpBcGV3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2JtVjNJRlZwYm5ReE5rRnljbUY1S0ZzS0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNaXdLSUNBZ0lDQWdJQ0FnSUNBZ01pd0tJQ0FnSUNBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdOaXdLSUNBZ0lDQWdJQ0FnSUNBZ055d0tJQ0FnSUNBZ0lDQWdJQ0FnTnl3S0lDQWdJQ0FnSUNBZ0lDQWdOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnTWl3S0lDQWdJQ0FnSUNBZ0lDQWdOaXdLSUNBZ0lDQWdJQ0FnSUNBZ015d0tJQ0FnSUNBZ0lDQWdJQ0FnTndvZ0lDQWdJQ0FnSUYwcExDQnBJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMweENpQWdJQ0FnSUNBZ1hTd2djaUE5SUc1bGR5QkhaVHNLSUNBZ0lDQWdJQ0J5TG5ObGRFbHVaR1Y0S0c1bGR5QmxkQ2h1TENBeEtTa3NJSEl1YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCMlpTaHBMQ0F6S1Nrc0lITjFjR1Z5S0hJc0lHNWxkeUIzZENoN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwS1N3Z2RHaHBjeTVpYjNnZ1BTQmxMQ0IwYUdsekxuUjVjR1VnUFNBaVFtOTRNMGhsYkhCbGNpSXNJSFJvYVhNdVoyVnZiV1YwY25rdVkyOXRjSFYwWlVKdmRXNWthVzVuVTNCb1pYSmxLQ2s3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1KdmVEc0tJQ0FnSUNBZ0lDQjBMbWx6Ulcxd2RIa29LU0I4ZkNBb2RDNW5aWFJEWlc1MFpYSW9kR2hwY3k1d2IzTnBkR2x2Ymlrc0lIUXVaMlYwVTJsNlpTaDBhR2x6TG5OallXeGxLU3dnZEdocGN5NXpZMkZzWlM1dGRXeDBhWEJzZVZOallXeGhjaWd1TlNrc0lITjFjR1Z5TG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0dVcEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NW5aVzl0WlhSeWVTNWthWE53YjNObEtDa3NJSFJvYVhNdWJXRjBaWEpwWVd3dVpHbHpjRzl6WlNncE93b2dJQ0FnZlFwOUxDQnBaQ0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdZbTRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDQTlJREVzSUc0Z1BTQXhOamMzTmprMk1DbDdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVMQ0J5SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURBS0lDQWdJQ0FnSUNCZExDQmhJRDBnYm1WM0lFZGxPd29nSUNBZ0lDQWdJR0V1YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCMlpTaHlMQ0F6S1Nrc0lHRXVZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0Nrc0lITjFjR1Z5S0dFc0lHNWxkeUIzZENoN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwS1N3Z2RHaHBjeTUwZVhCbElEMGdJbEJzWVc1bFNHVnNjR1Z5SWl3Z2RHaHBjeTV3YkdGdVpTQTlJR1VzSUhSb2FYTXVjMmw2WlNBOUlIUTdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURBS0lDQWdJQ0FnSUNCZExDQmpJRDBnYm1WM0lFZGxPd29nSUNBZ0lDQWdJR011YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCMlpTaHZMQ0F6S1Nrc0lHTXVZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0Nrc0lIUm9hWE11WVdSa0tHNWxkeUJOZENoakxDQnVaWGNnVTI0b2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqb2dhU3dLSUNBZ0lDQWdJQ0FnSUNBZ2IzQmhZMmwwZVRvZ0xqSXNDaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpjR0Z5Wlc1ME9pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hYY21sMFpUb2dJVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnZibVZOWVhCd1pXUTZJQ0V4Q2lBZ0lDQWdJQ0FnZlNrcEtUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVMbk5sZENnd0xDQXdMQ0F3S1N3Z2RHaHBjeTV6WTJGc1pTNXpaWFFvTGpVZ0tpQjBhR2x6TG5OcGVtVXNJQzQxSUNvZ2RHaHBjeTV6YVhwbExDQXhLU3dnZEdocGN5NXNiMjlyUVhRb2RHaHBjeTV3YkdGdVpTNXViM0p0WVd3cExDQjBhR2x6TG5SeVlXNXpiR0YwWlZvb0xYUm9hWE11Y0d4aGJtVXVZMjl1YzNSaGJuUXBMQ0J6ZFhCbGNpNTFjR1JoZEdWTllYUnlhWGhYYjNKc1pDaGxLVHNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVuWlc5dFpYUnllUzVrYVhOd2IzTmxLQ2tzSUhSb2FYTXViV0YwWlhKcFlXd3VaR2x6Y0c5elpTZ3BMQ0IwYUdsekxtTm9hV3hrY21WdVd6QmRMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnZEdocGN5NWphR2xzWkhKbGJsc3dYUzV0WVhSbGNtbGhiQzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQjlDbjBzSUhOa0lEMGdibVYzSUVFc0lGQnlMQ0JvYnl3Z2NtUWdQU0JqYkdGemN5QmxlSFJsYm1SeklFcGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dRU2d3TENBd0xDQXhLU3dnZENBOUlHNWxkeUJCS0RBc0lEQXNJREFwTENCdUlEMGdNU3dnYVNBOUlERTJOemMyT1RZd0xDQnlJRDBnYmlBcUlDNHlMQ0JoSUQwZ2NpQXFJQzR5S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMblI1Y0dVZ1BTQWlRWEp5YjNkSVpXeHdaWElpTENCUWNpQTlQVDBnZG05cFpDQXdJQ1ltSUNoUWNpQTlJRzVsZHlCSFpTd2dVSEl1YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCMlpTaGJDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQUtJQ0FnSUNBZ0lDQmRMQ0F6S1Nrc0lHaHZJRDBnYm1WM0lFNXpLREFzSUM0MUxDQXhMQ0ExTENBeEtTd2dhRzh1ZEhKaGJuTnNZWFJsS0RBc0lDMHVOU3dnTUNrcExDQjBhR2x6TG5CdmMybDBhVzl1TG1OdmNIa29kQ2tzSUhSb2FYTXViR2x1WlNBOUlHNWxkeUJpYmloUWNpd2dibVYzSUhkMEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnZibVZOWVhCd1pXUTZJQ0V4Q2lBZ0lDQWdJQ0FnZlNrcExDQjBhR2x6TG14cGJtVXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJQ0V4TENCMGFHbHpMbUZrWkNoMGFHbHpMbXhwYm1VcExDQjBhR2x6TG1OdmJtVWdQU0J1WlhjZ1RYUW9hRzhzSUc1bGR5QlRiaWg3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCcExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBLU3dnZEdocGN5NWpiMjVsTG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1aFpHUW9kR2hwY3k1amIyNWxLU3dnZEdocGN5NXpaWFJFYVhKbFkzUnBiMjRvWlNrc0lIUm9hWE11YzJWMFRHVnVaM1JvS0c0c0lISXNJR0VwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBSR2x5WldOMGFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCcFppQW9aUzU1SUQ0Z0xqazVPVGs1S1NCMGFHbHpMbkYxWVhSbGNtNXBiMjR1YzJWMEtEQXNJREFzSURBc0lERXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1V1ZVNBOElDMHVPVGs1T1RrcElIUm9hWE11Y1hWaGRHVnlibWx2Ymk1elpYUW9NU3dnTUN3Z01Dd2dNQ2s3Q2lBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhOa0xuTmxkQ2hsTG5vc0lEQXNJQzFsTG5ncExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUUxaGRHZ3VZV052Y3lobExua3BPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkYxWVhSbGNtNXBiMjR1YzJWMFJuSnZiVUY0YVhOQmJtZHNaU2h6WkN3Z2RDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnYzJWMFRHVnVaM1JvS0dVc0lIUWdQU0JsSUNvZ0xqSXNJRzRnUFNCMElDb2dMaklwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbXhwYm1VdWMyTmhiR1V1YzJWMEtERXNJRTFoZEdndWJXRjRLREZsTFRRc0lHVWdMU0IwS1N3Z01Ta3NJSFJvYVhNdWJHbHVaUzUxY0dSaGRHVk5ZWFJ5YVhnb0tTd2dkR2hwY3k1amIyNWxMbk5qWVd4bExuTmxkQ2h1TENCMExDQnVLU3dnZEdocGN5NWpiMjVsTG5CdmMybDBhVzl1TG5rZ1BTQmxMQ0IwYUdsekxtTnZibVV1ZFhCa1lYUmxUV0YwY21sNEtDazdDaUFnSUNCOUNpQWdJQ0J6WlhSRGIyeHZjaWhsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVzYVc1bExtMWhkR1Z5YVdGc0xtTnZiRzl5TG5ObGRDaGxLU3dnZEdocGN5NWpiMjVsTG0xaGRHVnlhV0ZzTG1OdmJHOXlMbk5sZENobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VzSUNFeEtTd2dkR2hwY3k1c2FXNWxMbU52Y0hrb1pTNXNhVzVsS1N3Z2RHaHBjeTVqYjI1bExtTnZjSGtvWlM1amIyNWxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXNhVzVsTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVzYVc1bExtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tTd2dkR2hwY3k1amIyNWxMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnZEdocGN5NWpiMjVsTG0xaGRHVnlhV0ZzTG1ScGMzQnZjMlVvS1RzS0lDQWdJSDBLZlN3Z1lXUWdQU0JqYkdGemN5QmxlSFJsYm1SeklHVnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeEtYc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnWlN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdaU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pRb2dJQ0FnSUNBZ0lGMHNJRzRnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDNDJMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F1Tml3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMallzQ2lBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQmRMQ0JwSUQwZ2JtVjNJRWRsT3dvZ0lDQWdJQ0FnSUdrdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2gwTENBektTa3NJR2t1YzJWMFFYUjBjbWxpZFhSbEtDSmpiMnh2Y2lJc0lHNWxkeUIyWlNodUxDQXpLU2s3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0J1WlhjZ2QzUW9ld29nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhEYjJ4dmNuTTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lITjFjR1Z5S0drc0lISXBMQ0IwYUdsekxuUjVjR1VnUFNBaVFYaGxjMGhsYkhCbGNpSTdDaUFnSUNCOUNpQWdJQ0J6WlhSRGIyeHZjbk1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnYm1WM0lIQmxMQ0J5SUQwZ2RHaHBjeTVuWlc5dFpYUnllUzVoZEhSeWFXSjFkR1Z6TG1OdmJHOXlMbUZ5Y21GNU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcExuTmxkQ2hsS1N3Z2FTNTBiMEZ5Y21GNUtISXNJREFwTENCcExuUnZRWEp5WVhrb2Npd2dNeWtzSUdrdWMyVjBLSFFwTENCcExuUnZRWEp5WVhrb2Npd2dOaWtzSUdrdWRHOUJjbkpoZVNoeUxDQTVLU3dnYVM1elpYUW9iaWtzSUdrdWRHOUJjbkpoZVNoeUxDQXhNaWtzSUdrdWRHOUJjbkpoZVNoeUxDQXhOU2tzSUhSb2FYTXVaMlZ2YldWMGNua3VZWFIwY21saWRYUmxjeTVqYjJ4dmNpNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTV0WVhSbGNtbGhiQzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQjlDbjBzSUc5a0lEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpVTJoaGNHVlFZWFJvSWl3Z2RHaHBjeTVqYjJ4dmNpQTlJRzVsZHlCd1pTd2dkR2hwY3k1emRXSlFZWFJvY3lBOUlGdGRMQ0IwYUdsekxtTjFjbkpsYm5SUVlYUm9JRDBnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJRzF2ZG1WVWJ5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM1Z5Y21WdWRGQmhkR2dnUFNCdVpYY2dhbWtzSUhSb2FYTXVjM1ZpVUdGMGFITXVjSFZ6YUNoMGFHbHpMbU4xY25KbGJuUlFZWFJvS1N3Z2RHaHBjeTVqZFhKeVpXNTBVR0YwYUM1dGIzWmxWRzhvWlN3Z2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnNhVzVsVkc4b1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTjFjbkpsYm5SUVlYUm9MbXhwYm1WVWJ5aGxMQ0IwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhGMVlXUnlZWFJwWTBOMWNuWmxWRzhvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25KbGJuUlFZWFJvTG5GMVlXUnlZWFJwWTBOMWNuWmxWRzhvWlN3Z2RDd2diaXdnYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaVpYcHBaWEpEZFhKMlpWUnZLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amRYSnlaVzUwVUdGMGFDNWlaWHBwWlhKRGRYSjJaVlJ2S0dVc0lIUXNJRzRzSUdrc0lISXNJR0VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzNCc2FXNWxWR2h5ZFNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNWeWNtVnVkRkJoZEdndWMzQnNhVzVsVkdoeWRTaGxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2VTJoaGNHVnpLR1VwSUhzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCMEtIQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFlnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0I0SUQwZ01Dd2dlU0E5SUhBdWJHVnVaM1JvT3lCNElEd2dlVHNnZUNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JpSUQwZ2NGdDRYU3dnZHlBOUlHNWxkeUJHYmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhjdVkzVnlkbVZ6SUQwZ1lpNWpkWEoyWlhNc0lIWXVjSFZ6YUNoM0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2Rqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdiaWh3TENCMktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnZGk1c1pXNW5kR2dzSUhrZ1BTQWhNVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaUlEMGdlQ0F0SURFc0lIY2dQU0F3T3lCM0lEd2dlRHNnWWlBOUlIY3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1VpQTlJSFpiWWwwc0lFa2dQU0IyVzNkZExDQk5JRDBnU1M1NElDMGdVaTU0TENCVUlEMGdTUzU1SUMwZ1VpNTVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0UxaGRHZ3VZV0p6S0ZRcElENGdUblZ0WW1WeUxrVlFVMGxNVDA0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ZDQThJREFnSmlZZ0tGSWdQU0IyVzNkZExDQk5JRDBnTFUwc0lFa2dQU0IyVzJKZExDQlVJRDBnTFZRcExDQndMbmtnUENCU0xua2dmSHdnY0M1NUlENGdTUzU1S1NCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0M1NUlEMDlQU0JTTG5rcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEF1ZUNBOVBUMGdVaTU0S1NCeVpYUjFjbTRnSVRBN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRThnUFNCVUlDb2dLSEF1ZUNBdElGSXVlQ2tnTFNCTklDb2dLSEF1ZVNBdElGSXVlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUElEMDlQU0F3S1NCeVpYUjFjbTRnSVRBN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFBJRHdnTUNrZ1kyOXVkR2x1ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrZ1BTQWhlVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3TG5rZ0lUMDlJRkl1ZVNrZ1kyOXVkR2x1ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VrdWVDQThQU0J3TG5nZ0ppWWdjQzU0SUR3OUlGSXVlQ0I4ZkNCU0xuZ2dQRDBnY0M1NElDWW1JSEF1ZUNBOFBTQkpMbmdwSUhKbGRIVnliaUFoTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCNWJpNXBjME5zYjJOclYybHpaU3dnY2lBOUlIUm9hWE11YzNWaVVHRjBhSE03Q2lBZ0lDQWdJQ0FnYVdZZ0tISXViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTRnVzEwN0NpQWdJQ0FnSUNBZ2JHVjBJR0VzSUc4c0lHTXNJR3dnUFNCYlhUc0tJQ0FnSUNBZ0lDQnBaaUFvY2k1c1pXNW5kR2dnUFQwOUlERXBJSEpsZEhWeWJpQnZJRDBnY2xzd1hTd2dZeUE5SUc1bGR5QkdiaXdnWXk1amRYSjJaWE1nUFNCdkxtTjFjblpsY3l3Z2JDNXdkWE5vS0dNcExDQnNPd29nSUNBZ0lDQWdJR3hsZENCb0lEMGdJV2tvY2xzd1hTNW5aWFJRYjJsdWRITW9LU2s3Q2lBZ0lDQWdJQ0FnYUNBOUlHVWdQeUFoYUNBNklHZzdDaUFnSUNBZ0lDQWdiR1YwSUhVZ1BTQmJYU3dnWkNBOUlGdGRMQ0JtSUQwZ1cxMHNJRzBnUFNBd0xDQmZPd29nSUNBZ0lDQWdJR1JiYlYwZ1BTQjJiMmxrSURBc0lHWmJiVjBnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIQWdQU0F3TENCMklEMGdjaTVzWlc1bmRHZzdJSEFnUENCMk95QndLeXNwYnlBOUlISmJjRjBzSUY4Z1BTQnZMbWRsZEZCdmFXNTBjeWdwTENCaElEMGdhU2hmS1N3Z1lTQTlJR1VnUHlBaFlTQTZJR0VzSUdFZ1B5QW9JV2dnSmlZZ1pGdHRYU0FtSmlCdEt5c3NJR1JiYlYwZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhNNklHNWxkeUJHYml3S0lDQWdJQ0FnSUNBZ0lDQWdjRG9nWHdvZ0lDQWdJQ0FnSUgwc0lHUmJiVjB1Y3k1amRYSjJaWE1nUFNCdkxtTjFjblpsY3l3Z2FDQW1KaUJ0S3lzc0lHWmJiVjBnUFNCYlhTa2dPaUJtVzIxZExuQjFjMmdvZXdvZ0lDQWdJQ0FnSUNBZ0lDQm9PaUJ2TEFvZ0lDQWdJQ0FnSUNBZ0lDQndPaUJmV3pCZENpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdhV1lnS0NGa1d6QmRLU0J5WlhSMWNtNGdkQ2h5S1RzS0lDQWdJQ0FnSUNCcFppQW9aQzVzWlc1bmRHZ2dQaUF4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd0lEMGdJVEVzSUhZZ1BTQXdPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhnZ1BTQXdMQ0I1SUQwZ1pDNXNaVzVuZEdnN0lIZ2dQQ0I1T3lCNEt5c3BkVnQ0WFNBOUlGdGRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhnZ1BTQXdMQ0I1SUQwZ1pDNXNaVzVuZEdnN0lIZ2dQQ0I1T3lCNEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdJZ1BTQm1XM2hkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IzSUQwZ01Ec2dkeUE4SUdJdWJHVnVaM1JvT3lCM0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlNJRDBnWWx0M1hTd2dTU0E5SUNFd093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdUU0E5SURBN0lFMGdQQ0JrTG14bGJtZDBhRHNnVFNzcktXNG9VaTV3TENCa1cwMWRMbkFwSUNZbUlDaDRJQ0U5UFNCTklDWW1JSFlyS3l3Z1NTQS9JQ2hKSUQwZ0lURXNJSFZiVFYwdWNIVnphQ2hTS1NrZ09pQndJRDBnSVRBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWtnSmlZZ2RWdDRYUzV3ZFhOb0tGSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFlnUGlBd0lDWW1JSEFnUFQwOUlDRXhJQ1ltSUNobUlEMGdkU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQm5Pd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdjQ0E5SURBc0lIWWdQU0JrTG14bGJtZDBhRHNnY0NBOElIWTdJSEFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR01nUFNCa1czQmRMbk1zSUd3dWNIVnphQ2hqS1N3Z1p5QTlJR1piY0YwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURBc0lIa2dQU0JuTG14bGJtZDBhRHNnZUNBOElIazdJSGdyS3lsakxtaHZiR1Z6TG5CMWMyZ29aMXQ0WFM1b0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHdzdDaUFnSUNCOUNuMDdDblI1Y0dWdlppQmZYMVJJVWtWRlgwUkZWbFJQVDB4VFgxOGdQQ0FpZFNJZ0ppWWdYMTlVU0ZKRlJWOUVSVlpVVDA5TVUxOWZMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NKeVpXZHBjM1JsY2lJc0lIc0tJQ0FnSUdSbGRHRnBiRG9nZXdvZ0lDQWdJQ0FnSUhKbGRtbHphVzl1T2lCSVl3b2dJQ0FnZlFwOUtTazdDblI1Y0dWdlppQjNhVzVrYjNjZ1BDQWlkU0lnSmlZZ0tIZHBibVJ2ZHk1ZlgxUklVa1ZGWDE4Z1B5QmpiMjV6YjJ4bExuZGhjbTRvSWxkQlVrNUpUa2M2SUUxMWJIUnBjR3hsSUdsdWMzUmhibU5sY3lCdlppQlVhSEpsWlM1cWN5QmlaV2x1WnlCcGJYQnZjblJsWkM0aUtTQTZJSGRwYm1SdmR5NWZYMVJJVWtWRlgxOGdQU0JJWXlrN0NtTnZibk4wSUcxdlpDQTlJSHNLSUNBZ0lFRkRSVk5HYVd4dGFXTlViMjVsVFdGd2NHbHVaem9nYldZc0NpQWdJQ0JCWkdSRmNYVmhkR2x2YmpvZ1Fta3NDaUFnSUNCQlpHUlBjR1Z5WVhScGIyNDZJSFZtTEFvZ0lDQWdRV1JrYVhScGRtVkJibWx0WVhScGIyNUNiR1Z1WkUxdlpHVTZJSGhrTEFvZ0lDQWdRV1JrYVhScGRtVkNiR1Z1WkdsdVp6b2dZV3dzQ2lBZ0lDQkJiSEJvWVVadmNtMWhkRG9nZG1Zc0NpQWdJQ0JCYkhkaGVYTkRiMjF3WVhKbE9pQldaaXdLSUNBZ0lFRnNkMkY1YzBSbGNIUm9PaUJ6Wml3S0lDQWdJRUZzZDJGNWMxTjBaVzVqYVd4R2RXNWpPaUJKWml3S0lDQWdJRUZ0WW1sbGJuUk1hV2RvZERvZ1EyTXNDaUFnSUNCQmJtbHRZWFJwYjI1QlkzUnBiMjQ2SUZaakxBb2dJQ0FnUVc1cGJXRjBhVzl1UTJ4cGNEb2dhWE1zQ2lBZ0lDQkJibWx0WVhScGIyNU1iMkZrWlhJNklHRjFMQW9nSUNBZ1FXNXBiV0YwYVc5dVRXbDRaWEk2SUVOMUxBb2dJQ0FnUVc1cGJXRjBhVzl1VDJKcVpXTjBSM0p2ZFhBNklGSjFMQW9nSUNBZ1FXNXBiV0YwYVc5dVZYUnBiSE02SUZOMkxBb2dJQ0FnUVhKalEzVnlkbVU2SUd0dkxBb2dJQ0FnUVhKeVlYbERZVzFsY21FNklGUnZMQW9nSUNBZ1FYSnliM2RJWld4d1pYSTZJSEprTEFvZ0lDQWdRWFZrYVc4NklFWmpMQW9nSUNBZ1FYVmthVzlCYm1Gc2VYTmxjam9nUVhVc0NpQWdJQ0JCZFdScGIwTnZiblJsZUhRNklGOWhMQW9nSUNBZ1FYVmthVzlNYVhOMFpXNWxjam9nUlhVc0NpQWdJQ0JCZFdScGIweHZZV1JsY2pvZ2VIVXNDaUFnSUNCQmVHVnpTR1ZzY0dWeU9pQmhaQ3dLSUNBZ0lFSmhZMnRUYVdSbE9pQkdkQ3dLSUNBZ0lFSmhjMmxqUkdWd2RHaFFZV05yYVc1bk9pQkRaaXdLSUNBZ0lFSmhjMmxqVTJoaFpHOTNUV0Z3T2lCSWVDd0tJQ0FnSUVKdmJtVTZJSFJoTEFvZ0lDQWdRbTl2YkdWaGJrdGxlV1p5WVcxbFZISmhZMnM2SUZadUxBb2dJQ0FnUW05NE1qb2dlblVzQ2lBZ0lDQkNiM2d6T2lCUmRDd0tJQ0FnSUVKdmVETklaV3h3WlhJNklHNWtMQW9nSUNBZ1FtOTRSMlZ2YldWMGNuazZJRXBwTEFvZ0lDQWdRbTk0U0dWc2NHVnlPaUIwWkN3S0lDQWdJRUoxWm1abGNrRjBkSEpwWW5WMFpUb2daWFFzQ2lBZ0lDQkNkV1ptWlhKSFpXOXRaWFJ5ZVRvZ1IyVXNDaUFnSUNCQ2RXWm1aWEpIWlc5dFpYUnllVXh2WVdSbGNqb2dUbU1zQ2lBZ0lDQkNlWFJsVkhsd1pUb2dYMllzQ2lBZ0lDQkRZV05vWlRvZ2MzTXNDaUFnSUNCRFlXMWxjbUU2SUVOekxBb2dJQ0FnUTJGdFpYSmhTR1ZzY0dWeU9pQmxaQ3dLSUNBZ0lFTmhiblpoYzFSbGVIUjFjbVU2SUdwb0xBb2dJQ0FnUTJGd2MzVnNaVWRsYjIxbGRISjVPaUJ4Ynl3S0lDQWdJRU5oZEcxMWJHeFNiMjFEZFhKMlpUTTZJRWh2TEFvZ0lDQWdRMmx1Wlc5dVZHOXVaVTFoY0hCcGJtYzZJSEJtTEFvZ0lDQWdRMmx5WTJ4bFIyVnZiV1YwY25rNklGbHZMQW9nSUNBZ1EyeGhiWEJVYjBWa1oyVlhjbUZ3Y0dsdVp6b2dTWFFzQ2lBZ0lDQkRiRzlqYXpvZ1QyTXNDaUFnSUNCRGIyeHZjam9nY0dVc0NpQWdJQ0JEYjJ4dmNrdGxlV1p5WVcxbFZISmhZMnM2SUhCaExBb2dJQ0FnUTI5c2IzSk5ZVzVoWjJWdFpXNTBPaUJSWlN3S0lDQWdJRU52YlhCeVpYTnpaV1JCY25KaGVWUmxlSFIxY21VNklFdG9MQW9nSUNBZ1EyOXRjSEpsYzNObFpFTjFZbVZVWlhoMGRYSmxPaUJSYUN3S0lDQWdJRU52YlhCeVpYTnpaV1JVWlhoMGRYSmxPaUJWY3l3S0lDQWdJRU52YlhCeVpYTnpaV1JVWlhoMGRYSmxURzloWkdWeU9pQnZkU3dLSUNBZ0lFTnZibVZIWlc5dFpYUnllVG9nV204c0NpQWdJQ0JEZFdKbFEyRnRaWEpoT2lCZmJ5d0tJQ0FnSUVOMVltVlNaV1pzWldOMGFXOXVUV0Z3Y0dsdVp6b2dlbTRzQ2lBZ0lDQkRkV0psVW1WbWNtRmpkR2x2YmsxaGNIQnBibWM2SUdOcExBb2dJQ0FnUTNWaVpWUmxlSFIxY21VNklFdHBMQW9nSUNBZ1EzVmlaVlJsZUhSMWNtVk1iMkZrWlhJNklHTjFMQW9nSUNBZ1EzVmlaVlZXVW1WbWJHVmpkR2x2YmsxaGNIQnBibWM2SUZaekxBb2dJQ0FnUTNWaWFXTkNaWHBwWlhKRGRYSjJaVG9nYVdFc0NpQWdJQ0JEZFdKcFkwSmxlbWxsY2tOMWNuWmxNem9nUjI4c0NpQWdJQ0JEZFdKcFkwbHVkR1Z5Y0c5c1lXNTBPaUI0WXl3S0lDQWdJRU4xYkd4R1lXTmxRbUZqYXpvZ2Ntd3NDaUFnSUNCRGRXeHNSbUZqWlVaeWIyNTBPaUJJWkN3S0lDQWdJRU4xYkd4R1lXTmxSbkp2Ym5SQ1lXTnJPaUJyZUN3S0lDQWdJRU4xYkd4R1lXTmxUbTl1WlRvZ2EyUXNDaUFnSUNCRGRYSjJaVG9nV25Rc0NpQWdJQ0JEZFhKMlpWQmhkR2c2SUZodkxBb2dJQ0FnUTNWemRHOXRRbXhsYm1ScGJtYzZJRmRrTEFvZ0lDQWdRM1Z6ZEc5dFZHOXVaVTFoY0hCcGJtYzZJR2RtTEFvZ0lDQWdRM2xzYVc1a1pYSkhaVzl0WlhSeWVUb2dUbk1zQ2lBZ0lDQkRlV3hwYm1SeWFXTmhiRG9nUm5Vc0NpQWdJQ0JFWVhSaE0wUlVaWGgwZFhKbE9pQnhjaXdLSUNBZ0lFUmhkR0ZCY25KaGVWUmxlSFIxY21VNklFRnpMQW9nSUNBZ1JHRjBZVlJsZUhSMWNtVTZJRzlwTEFvZ0lDQWdSR0YwWVZSbGVIUjFjbVZNYjJGa1pYSTZJR3gxTEFvZ0lDQWdSR0YwWVZWMGFXeHpPaUJOZGl3S0lDQWdJRVJsWTNKbGJXVnVkRk4wWlc1amFXeFBjRG9nWlhZc0NpQWdJQ0JFWldOeVpXMWxiblJYY21Gd1UzUmxibU5wYkU5d09pQnVkaXdLSUNBZ0lFUmxabUYxYkhSTWIyRmthVzVuVFdGdVlXZGxjam9nUlhnc0NpQWdJQ0JFWlhCMGFFWnZjbTFoZERvZ2Mya3NDaUFnSUNCRVpYQjBhRk4wWlc1amFXeEdiM0p0WVhRNklGbHBMQW9nSUNBZ1JHVndkR2hVWlhoMGRYSmxPaUIzYnl3S0lDQWdJRVJwY21WamRHbHZibUZzVEdsbmFIUTZJRkpqTEFvZ0lDQWdSR2x5WldOMGFXOXVZV3hNYVdkb2RFaGxiSEJsY2pvZ2FuVXNDaUFnSUNCRWFYTmpjbVYwWlVsdWRHVnljRzlzWVc1ME9pQjJZeXdLSUNBZ0lFUnBjM0JzWVhsUU0wTnZiRzl5VTNCaFkyVTZJSEZqTEFvZ0lDQWdSRzlrWldOaGFHVmtjbTl1UjJWdmJXVjBjbms2SUVwdkxBb2dJQ0FnUkc5MVlteGxVMmxrWlRvZ1oyNHNDaUFnSUNCRWMzUkJiSEJvWVVaaFkzUnZjam9nUzJRc0NpQWdJQ0JFYzNSRGIyeHZja1poWTNSdmNqb2dhbVFzQ2lBZ0lDQkVlVzVoYldsalEyOXdlVlZ6WVdkbE9pQmZkaXdLSUNBZ0lFUjVibUZ0YVdORWNtRjNWWE5oWjJVNklIVjJMQW9nSUNBZ1JIbHVZVzFwWTFKbFlXUlZjMkZuWlRvZ2NIWXNDaUFnSUNCRlpHZGxjMGRsYjIxbGRISjVPaUFrYnl3S0lDQWdJRVZzYkdsd2MyVkRkWEoyWlRvZ1JITXNDaUFnSUNCRmNYVmhiRU52YlhCaGNtVTZJRTVtTEFvZ0lDQWdSWEYxWVd4RVpYQjBhRG9nWVdZc0NpQWdJQ0JGY1hWaGJGTjBaVzVqYVd4R2RXNWpPaUJoZGl3S0lDQWdJRVZ4ZFdseVpXTjBZVzVuZFd4aGNsSmxabXhsWTNScGIyNU5ZWEJ3YVc1bk9pQkpjaXdLSUNBZ0lFVnhkV2x5WldOMFlXNW5kV3hoY2xKbFpuSmhZM1JwYjI1TllYQndhVzVuT2lCVmNpd0tJQ0FnSUVWMWJHVnlPaUJaY2l3S0lDQWdJRVYyWlc1MFJHbHpjR0YwWTJobGNqb2djMjRzQ2lBZ0lDQkZlSFJ5ZFdSbFIyVnZiV1YwY25rNklHcHZMQW9nSUNBZ1JtbHNaVXh2WVdSbGNqb2djbTRzQ2lBZ0lDQkdiRzloZERFMlFuVm1abVZ5UVhSMGNtbGlkWFJsT2lCcGFDd0tJQ0FnSUVac2IyRjBNekpDZFdabVpYSkJkSFJ5YVdKMWRHVTZJSFpsTEFvZ0lDQWdSbXh2WVhRMk5FSjFabVpsY2tGMGRISnBZblYwWlRvZ2MyZ3NDaUFnSUNCR2JHOWhkRlI1Y0dVNklIaHVMQW9nSUNBZ1JtOW5PaUJNYnl3S0lDQWdJRVp2WjBWNGNESTZJRkJ2TEFvZ0lDQWdSbkpoYldWaWRXWm1aWEpVWlhoMGRYSmxPaUFrYUN3S0lDQWdJRVp5YjI1MFUybGtaVG9nUW00c0NpQWdJQ0JHY25WemRIVnRPaUJRY3l3S0lDQWdJRWRNUW5WbVptVnlRWFIwY21saWRYUmxPaUJWZFN3S0lDQWdJRWRNVTB3eE9pQjJkaXdLSUNBZ0lFZE1VMHd6T2lCUGJDd0tJQ0FnSUVkeVpXRjBaWEpEYjIxd1lYSmxPaUJHWml3S0lDQWdJRWR5WldGMFpYSkVaWEIwYURvZ1kyWXNDaUFnSUNCSGNtVmhkR1Z5UlhGMVlXeERiMjF3WVhKbE9pQjZaaXdLSUNBZ0lFZHlaV0YwWlhKRmNYVmhiRVJsY0hSb09pQnZaaXdLSUNBZ0lFZHlaV0YwWlhKRmNYVmhiRk4wWlc1amFXeEdkVzVqT2lCb2Rpd0tJQ0FnSUVkeVpXRjBaWEpUZEdWdVkybHNSblZ1WXpvZ1kzWXNDaUFnSUNCSGNtbGtTR1ZzY0dWeU9pQktkU3dLSUNBZ0lFZHliM1Z3T2lCMGFTd0tJQ0FnSUVoaGJHWkdiRzloZEZSNWNHVTZJRlJ6TEFvZ0lDQWdTR1Z0YVhOd2FHVnlaVXhwWjJoME9pQlRZeXdLSUNBZ0lFaGxiV2x6Y0dobGNtVk1hV2RvZEVobGJIQmxjam9nV25Vc0NpQWdJQ0JKWTI5ellXaGxaSEp2YmtkbGIyMWxkSEo1T2lCbFl5d0tJQ0FnSUVsdFlXZGxRbWwwYldGd1RHOWhaR1Z5T2lCZmRTd0tJQ0FnSUVsdFlXZGxURzloWkdWeU9pQnljeXdLSUNBZ0lFbHRZV2RsVlhScGJITTZJRmh5TEFvZ0lDQWdTVzVqY21WdFpXNTBVM1JsYm1OcGJFOXdPaUJxZUN3S0lDQWdJRWx1WTNKbGJXVnVkRmR5WVhCVGRHVnVZMmxzVDNBNklIUjJMQW9nSUNBZ1NXNXpkR0Z1WTJWa1FuVm1abVZ5UVhSMGNtbGlkWFJsT2lCMWFTd0tJQ0FnSUVsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVPaUJFWXl3S0lDQWdJRWx1YzNSaGJtTmxaRWx1ZEdWeWJHVmhkbVZrUW5WbVptVnlPaUJKZFN3S0lDQWdJRWx1YzNSaGJtTmxaRTFsYzJnNklFWnZMQW9nSUNBZ1NXNTBNVFpDZFdabVpYSkJkSFJ5YVdKMWRHVTZJSFJvTEFvZ0lDQWdTVzUwTXpKQ2RXWm1aWEpCZEhSeWFXSjFkR1U2SUc1b0xBb2dJQ0FnU1c1ME9FSjFabVpsY2tGMGRISnBZblYwWlRvZ1VXd3NDaUFnSUNCSmJuUlVlWEJsT2lCa1pDd0tJQ0FnSUVsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5T2lCSmN5d0tJQ0FnSUVsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5UVhSMGNtbGlkWFJsT2lCUmFTd0tJQ0FnSUVsdWRHVnljRzlzWVc1ME9pQmxjeXdLSUNBZ0lFbHVkR1Z5Y0c5c1lYUmxSR2x6WTNKbGRHVTZJRTl5TEFvZ0lDQWdTVzUwWlhKd2IyeGhkR1ZNYVc1bFlYSTZJRVp5TEFvZ0lDQWdTVzUwWlhKd2IyeGhkR1ZUYlc5dmRHZzZJRXhoTEFvZ0lDQWdTVzUyWlhKMFUzUmxibU5wYkU5d09pQnBkaXdLSUNBZ0lFdGxaWEJUZEdWdVkybHNUM0E2SUVsaExBb2dJQ0FnUzJWNVpuSmhiV1ZVY21GamF6b2dTblFzQ2lBZ0lDQk1UMFE2SUVSdkxBb2dJQ0FnVEdGMGFHVkhaVzl0WlhSeWVUb2diR0VzQ2lBZ0lDQk1ZWGxsY25NNklGSnpMQW9nSUNBZ1RHVnpjME52YlhCaGNtVTZJRVJtTEFvZ0lDQWdUR1Z6YzBSbGNIUm9PaUJ5Wml3S0lDQWdJRXhsYzNORmNYVmhiRU52YlhCaGNtVTZJRTltTEFvZ0lDQWdUR1Z6YzBWeGRXRnNSR1Z3ZEdnNklIVnZMQW9nSUNBZ1RHVnpjMFZ4ZFdGc1UzUmxibU5wYkVaMWJtTTZJRzkyTEFvZ0lDQWdUR1Z6YzFOMFpXNWphV3hHZFc1ak9pQnlkaXdLSUNBZ0lFeHBaMmgwT2lCRmJpd0tJQ0FnSUV4cFoyaDBVSEp2WW1VNklFbGpMQW9nSUNBZ1RHbHVaVG9nWW00c0NpQWdJQ0JNYVc1bE16b2dhM1VzQ2lBZ0lDQk1hVzVsUW1GemFXTk5ZWFJsY21saGJEb2dkM1FzQ2lBZ0lDQk1hVzVsUTNWeWRtVTZJSE5oTEFvZ0lDQWdUR2x1WlVOMWNuWmxNem9nVjI4c0NpQWdJQ0JNYVc1bFJHRnphR1ZrVFdGMFpYSnBZV3c2SUdkakxBb2dJQ0FnVEdsdVpVeHZiM0E2SUVKdkxBb2dJQ0FnVEdsdVpWTmxaMjFsYm5Sek9pQmxiaXdLSUNBZ0lFeHBibVZoY2tScGMzQnNZWGxRTTBOdmJHOXlVM0JoWTJVNklIWmhMQW9nSUNBZ1RHbHVaV0Z5Ulc1amIyUnBibWM2SUhaa0xBb2dJQ0FnVEdsdVpXRnlSbWxzZEdWeU9pQnRkQ3dLSUNBZ0lFeHBibVZoY2tsdWRHVnljRzlzWVc1ME9pQm1ZU3dLSUNBZ0lFeHBibVZoY2sxcGNFMWhjRXhwYm1WaGNrWnBiSFJsY2pvZ1dYZ3NDaUFnSUNCTWFXNWxZWEpOYVhCTllYQk9aV0Z5WlhOMFJtbHNkR1Z5T2lCeGVDd0tJQ0FnSUV4cGJtVmhjazFwY0cxaGNFeHBibVZoY2tacGJIUmxjam9nYkdrc0NpQWdJQ0JNYVc1bFlYSk5hWEJ0WVhCT1pXRnlaWE4wUm1sc2RHVnlPaUIxWkN3S0lDQWdJRXhwYm1WaGNsTlNSMEpEYjJ4dmNsTndZV05sT2lCTmJpd0tJQ0FnSUV4cGJtVmhjbFJ2Ym1WTllYQndhVzVuT2lCa1ppd0tJQ0FnSUV4cGJtVmhjbFJ5WVc1elptVnlPaUI2Y2l3S0lDQWdJRXh2WVdSbGNqb2dSSFFzQ2lBZ0lDQk1iMkZrWlhKVmRHbHNjem9nWjJFc0NpQWdJQ0JNYjJGa2FXNW5UV0Z1WVdkbGNqb2diV0VzQ2lBZ0lDQk1iMjl3VDI1alpUb2dkMllzQ2lBZ0lDQk1iMjl3VUdsdVoxQnZibWM2SUZKbUxBb2dJQ0FnVEc5dmNGSmxjR1ZoZERvZ1FXWXNDaUFnSUNCTWRXMXBibUZ1WTJWQmJIQm9ZVVp2Y20xaGREb2dUV1lzQ2lBZ0lDQk1kVzFwYm1GdVkyVkdiM0p0WVhRNklIbG1MQW9nSUNBZ1RVOVZVMFU2SUhwNExBb2dJQ0FnVFdGMFpYSnBZV3c2SUdKMExBb2dJQ0FnVFdGMFpYSnBZV3hNYjJGa1pYSTZJRlZqTEFvZ0lDQWdUV0YwYUZWMGFXeHpPaUI1ZGl3S0lDQWdJRTFoZEhKcGVETTZJRWhsTEFvZ0lDQWdUV0YwY21sNE5Eb2dlbVVzQ2lBZ0lDQk5ZWGhGY1hWaGRHbHZiam9nYUd3c0NpQWdJQ0JOWlhOb09pQk5kQ3dLSUNBZ0lFMWxjMmhDWVhOcFkwMWhkR1Z5YVdGc09pQlRiaXdLSUNBZ0lFMWxjMmhFWlhCMGFFMWhkR1Z5YVdGc09pQlJjaXdLSUNBZ0lFMWxjMmhFYVhOMFlXNWpaVTFoZEdWeWFXRnNPaUJxY2l3S0lDQWdJRTFsYzJoTVlXMWlaWEowVFdGMFpYSnBZV3c2SUhCakxBb2dJQ0FnVFdWemFFMWhkR05oY0UxaGRHVnlhV0ZzT2lCdFl5d0tJQ0FnSUUxbGMyaE9iM0p0WVd4TllYUmxjbWxoYkRvZ1ptTXNDaUFnSUNCTlpYTm9VR2h2Ym1kTllYUmxjbWxoYkRvZ2RXTXNDaUFnSUNCTlpYTm9VR2g1YzJsallXeE5ZWFJsY21saGJEb2dhR01zQ2lBZ0lDQk5aWE5vVTNSaGJtUmhjbVJOWVhSbGNtbGhiRG9nWkdFc0NpQWdJQ0JOWlhOb1ZHOXZiazFoZEdWeWFXRnNPaUJrWXl3S0lDQWdJRTFwYmtWeGRXRjBhVzl1T2lCc2JDd0tJQ0FnSUUxcGNuSnZjbVZrVW1Wd1pXRjBWM0poY0hCcGJtYzZJRTV5TEFvZ0lDQWdUV2w0VDNCbGNtRjBhVzl1T2lCb1ppd0tJQ0FnSUUxMWJIUnBjR3g1UW14bGJtUnBibWM2SUdOc0xBb2dJQ0FnVFhWc2RHbHdiSGxQY0dWeVlYUnBiMjQ2SUhoaExBb2dJQ0FnVG1WaGNtVnpkRVpwYkhSbGNqb2djSFFzQ2lBZ0lDQk9aV0Z5WlhOMFRXbHdUV0Z3VEdsdVpXRnlSbWxzZEdWeU9pQlllQ3dLSUNBZ0lFNWxZWEpsYzNSTmFYQk5ZWEJPWldGeVpYTjBSbWxzZEdWeU9pQlhlQ3dLSUNBZ0lFNWxZWEpsYzNSTmFYQnRZWEJNYVc1bFlYSkdhV3gwWlhJNklFeHlMQW9nSUNBZ1RtVmhjbVZ6ZEUxcGNHMWhjRTVsWVhKbGMzUkdhV3gwWlhJNklHWnZMQW9nSUNBZ1RtVjJaWEpEYjIxd1lYSmxPaUJWWml3S0lDQWdJRTVsZG1WeVJHVndkR2c2SUc1bUxBb2dJQ0FnVG1WMlpYSlRkR1Z1WTJsc1JuVnVZem9nYzNZc0NpQWdJQ0JPYjBKc1pXNWthVzVuT2lCRWJpd0tJQ0FnSUU1dlEyOXNiM0pUY0dGalpUb2dXSFFzQ2lBZ0lDQk9iMVJ2Ym1WTllYQndhVzVuT2lCT2Jpd0tJQ0FnSUU1dmNtMWhiRUZ1YVcxaGRHbHZia0pzWlc1a1RXOWtaVG9nV0dNc0NpQWdJQ0JPYjNKdFlXeENiR1Z1WkdsdVp6b2dWMmtzQ2lBZ0lDQk9iM1JGY1hWaGJFTnZiWEJoY21VNklFSm1MQW9nSUNBZ1RtOTBSWEYxWVd4RVpYQjBhRG9nYkdZc0NpQWdJQ0JPYjNSRmNYVmhiRk4wWlc1amFXeEdkVzVqT2lCc2Rpd0tJQ0FnSUU1MWJXSmxja3RsZVdaeVlXMWxWSEpoWTJzNklIUnpMQW9nSUNBZ1QySnFaV04wTTBRNklFcGxMQW9nSUNBZ1QySnFaV04wVEc5aFpHVnlPaUJ3ZFN3S0lDQWdJRTlpYW1WamRGTndZV05sVG05eWJXRnNUV0Z3T2lCTVppd0tJQ0FnSUU5amRHRm9aV1J5YjI1SFpXOXRaWFJ5ZVRvZ2FHRXNDaUFnSUNCUGJtVkdZV04wYjNJNklGcGtMQW9nSUNBZ1QyNWxUV2x1ZFhORWMzUkJiSEJvWVVaaFkzUnZjam9nVVdRc0NpQWdJQ0JQYm1WTmFXNTFjMFJ6ZEVOdmJHOXlSbUZqZEc5eU9pQmxaaXdLSUNBZ0lFOXVaVTFwYm5WelUzSmpRV3h3YUdGR1lXTjBiM0k2SUdoa0xBb2dJQ0FnVDI1bFRXbHVkWE5UY21ORGIyeHZja1poWTNSdmNqb2dKR1FzQ2lBZ0lDQlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRTZJRXh6TEFvZ0lDQWdVRE5RY21sdFlYSnBaWE02SUd0eUxBb2dJQ0FnVUVOR1UyaGhaRzkzVFdGd09pQmpaQ3dLSUNBZ0lGQkRSbE52Wm5SVGFHRmtiM2ROWVhBNklFZGtMQW9nSUNBZ1VFMVNSVTFIWlc1bGNtRjBiM0k2SUV0eUxBb2dJQ0FnVUdGMGFEb2dhbWtzQ2lBZ0lDQlFaWEp6Y0dWamRHbDJaVU5oYldWeVlUb2dlWFFzQ2lBZ0lDQlFiR0Z1WlRvZ2JXNHNDaUFnSUNCUWJHRnVaVWRsYjIxbGRISjVPaUFrY2l3S0lDQWdJRkJzWVc1bFNHVnNjR1Z5T2lCcFpDd0tJQ0FnSUZCdmFXNTBUR2xuYUhRNklIZGpMQW9nSUNBZ1VHOXBiblJNYVdkb2RFaGxiSEJsY2pvZ1dIVXNDaUFnSUNCUWIybHVkSE02SUZadkxBb2dJQ0FnVUc5cGJuUnpUV0YwWlhKcFlXdzZJRzVoTEFvZ0lDQWdVRzlzWVhKSGNtbGtTR1ZzY0dWeU9pQWtkU3dLSUNBZ0lGQnZiSGxvWldSeWIyNUhaVzl0WlhSeWVUb2daR2tzQ2lBZ0lDQlFiM05wZEdsdmJtRnNRWFZrYVc4NklIZDFMQW9nSUNBZ1VISnZjR1Z5ZEhsQ2FXNWthVzVuT2lCTFpTd0tJQ0FnSUZCeWIzQmxjblI1VFdsNFpYSTZJRUpqTEFvZ0lDQWdVWFZoWkhKaGRHbGpRbVY2YVdWeVEzVnlkbVU2SUhKaExBb2dJQ0FnVVhWaFpISmhkR2xqUW1WNmFXVnlRM1Z5ZG1Vek9pQmhZU3dLSUNBZ0lGRjFZWFJsY201cGIyNDZJRlYwTEFvZ0lDQWdVWFZoZEdWeWJtbHZia3RsZVdaeVlXMWxWSEpoWTJzNklIQnBMQW9nSUNBZ1VYVmhkR1Z5Ym1sdmJreHBibVZoY2tsdWRHVnljRzlzWVc1ME9pQjVZeXdLSUNBZ0lGSkZSRjlIVWtWRlRsOVNSMVJETWw5R2IzSnRZWFE2SUVSc0xBb2dJQ0FnVWtWRVgxSkhWRU14WDBadmNtMWhkRG9nVkdZc0NpQWdJQ0JTUlZaSlUwbFBUam9nU0dNc0NpQWdJQ0JTUjBKQlJHVndkR2hRWVdOcmFXNW5PaUJRWml3S0lDQWdJRkpIUWtGR2IzSnRZWFE2SUZkMExBb2dJQ0FnVWtkQ1FVbHVkR1ZuWlhKR2IzSnRZWFE2SUY5a0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpFd2VERXdYMFp2Y20xaGREb2dVbXdzQ2lBZ0lDQlNSMEpCWDBGVFZFTmZNVEI0TlY5R2IzSnRZWFE2SUZSc0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpFd2VEWmZSbTl5YldGME9pQjNiQ3dLSUNBZ0lGSkhRa0ZmUVZOVVExOHhNSGc0WDBadmNtMWhkRG9nUVd3c0NpQWdJQ0JTUjBKQlgwRlRWRU5mTVRKNE1UQmZSbTl5YldGME9pQkRiQ3dLSUNBZ0lGSkhRa0ZmUVZOVVExOHhNbmd4TWw5R2IzSnRZWFE2SUZCc0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpSNE5GOUdiM0p0WVhRNklGOXNMQW9nSUNBZ1VrZENRVjlCVTFSRFh6VjRORjlHYjNKdFlYUTZJSGhzTEFvZ0lDQWdVa2RDUVY5QlUxUkRYelY0TlY5R2IzSnRZWFE2SUhac0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpaNE5WOUdiM0p0WVhRNklIbHNMQW9nSUNBZ1VrZENRVjlCVTFSRFh6WjRObDlHYjNKdFlYUTZJRTFzTEFvZ0lDQWdVa2RDUVY5QlUxUkRYemg0TlY5R2IzSnRZWFE2SUZOc0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpoNE5sOUdiM0p0WVhRNklHSnNMQW9nSUNBZ1VrZENRVjlCVTFSRFh6aDRPRjlHYjNKdFlYUTZJRVZzTEFvZ0lDQWdVa2RDUVY5Q1VGUkRYMFp2Y20xaGREb2dVR0VzQ2lBZ0lDQlNSMEpCWDBWVVF6SmZSVUZEWDBadmNtMWhkRG9nWjJ3c0NpQWdJQ0JTUjBKQlgxQldVbFJEWHpKQ1VGQldNVjlHYjNKdFlYUTZJSEJzTEFvZ0lDQWdVa2RDUVY5UVZsSlVRMTgwUWxCUVZqRmZSbTl5YldGME9pQm1iQ3dLSUNBZ0lGSkhRa0ZmVXpOVVExOUVXRlF4WDBadmNtMWhkRG9nUVdFc0NpQWdJQ0JTUjBKQlgxTXpWRU5mUkZoVU0xOUdiM0p0WVhRNklGSmhMQW9nSUNBZ1VrZENRVjlUTTFSRFgwUllWRFZmUm05eWJXRjBPaUJEWVN3S0lDQWdJRkpIUWw5Q1VGUkRYMU5KUjA1RlJGOUdiM0p0WVhRNklFeHNMQW9nSUNBZ1VrZENYMEpRVkVOZlZVNVRTVWRPUlVSZlJtOXliV0YwT2lCSmJDd0tJQ0FnSUZKSFFsOUZWRU14WDBadmNtMWhkRG9nUldZc0NpQWdJQ0JTUjBKZlJWUkRNbDlHYjNKdFlYUTZJRzFzTEFvZ0lDQWdVa2RDWDFCV1VsUkRYekpDVUZCV01WOUdiM0p0WVhRNklHUnNMQW9nSUNBZ1VrZENYMUJXVWxSRFh6UkNVRkJXTVY5R2IzSnRZWFE2SUhWc0xBb2dJQ0FnVWtkQ1gxTXpWRU5mUkZoVU1WOUdiM0p0WVhRNklIZGhMQW9nSUNBZ1VrZEdiM0p0WVhRNklHSm1MQW9nSUNBZ1VrZEpiblJsWjJWeVJtOXliV0YwT2lCblpDd0tJQ0FnSUZKaGQxTm9ZV1JsY2sxaGRHVnlhV0ZzT2lCc1l5d0tJQ0FnSUZKaGVUb2dhR2tzQ2lBZ0lDQlNZWGxqWVhOMFpYSTZJRVIxTEFvZ0lDQWdVbVZqTnpBNVVISnBiV0Z5YVdWek9pQldjaXdLSUNBZ0lGSmxZM1JCY21WaFRHbG5hSFE2SUZCakxBb2dJQ0FnVW1Wa1JtOXliV0YwT2lCVFppd0tJQ0FnSUZKbFpFbHVkR1ZuWlhKR2IzSnRZWFE2SUcxa0xBb2dJQ0FnVW1WcGJtaGhjbVJVYjI1bFRXRndjR2x1WnpvZ1ptWXNDaUFnSUNCU1pXNWtaWEpVWVhKblpYUTZJR2R2TEFvZ0lDQWdVbVZ3WldGMFYzSmhjSEJwYm1jNklFUnlMQW9nSUNBZ1VtVndiR0ZqWlZOMFpXNWphV3hQY0RvZ1VYZ3NDaUFnSUNCU1pYWmxjbk5sVTNWaWRISmhZM1JGY1hWaGRHbHZiam9nY1dRc0NpQWdJQ0JTYVc1blIyVnZiV1YwY25rNklIUmpMQW9nSUNBZ1UwbEhUa1ZFWDFKRlJGOUhVa1ZGVGw5U1IxUkRNbDlHYjNKdFlYUTZJRTVzTEFvZ0lDQWdVMGxIVGtWRVgxSkZSRjlTUjFSRE1WOUdiM0p0WVhRNklGVnNMQW9nSUNBZ1UxSkhRa052Ykc5eVUzQmhZMlU2SUhaMExBb2dJQ0FnVTFKSFFsUnlZVzV6Wm1WeU9pQnVkQ3dLSUNBZ0lGTmpaVzVsT2lCSmJ5d0tJQ0FnSUZOb1lXUmxja05vZFc1ck9pQnJaU3dLSUNBZ0lGTm9ZV1JsY2t4cFlqb2dibTRzQ2lBZ0lDQlRhR0ZrWlhKTllYUmxjbWxoYkRvZ2FuUXNDaUFnSUNCVGFHRmtiM2ROWVhSbGNtbGhiRG9nWTJNc0NpQWdJQ0JUYUdGd1pUb2dSbTRzQ2lBZ0lDQlRhR0Z3WlVkbGIyMWxkSEo1T2lCdVl5d0tJQ0FnSUZOb1lYQmxVR0YwYURvZ2IyUXNDaUFnSUNCVGFHRndaVlYwYVd4ek9pQjViaXdLSUNBZ0lGTm9iM0owVkhsd1pUb2dlR1lzQ2lBZ0lDQlRhMlZzWlhSdmJqb2dUMjhzQ2lBZ0lDQlRhMlZzWlhSdmJraGxiSEJsY2pvZ1YzVXNDaUFnSUNCVGEybHVibVZrVFdWemFEb2dUbThzQ2lBZ0lDQlRiM1Z5WTJVNklFbHVMQW9nSUNBZ1UzQm9aWEpsT2lCWmRDd0tJQ0FnSUZOd2FHVnlaVWRsYjIxbGRISjVPaUIxWVN3S0lDQWdJRk53YUdWeWFXTmhiRG9nVDNVc0NpQWdJQ0JUY0dobGNtbGpZV3hJWVhKdGIyNXBZM016T2lCTVl5d0tJQ0FnSUZOd2JHbHVaVU4xY25abE9pQnZZU3dLSUNBZ0lGTndiM1JNYVdkb2REb2dSV01zQ2lBZ0lDQlRjRzkwVEdsbmFIUklaV3h3WlhJNklFZDFMQW9nSUNBZ1UzQnlhWFJsT2lCVmJ5d0tJQ0FnSUZOd2NtbDBaVTFoZEdWeWFXRnNPaUJsWVN3S0lDQWdJRk55WTBGc2NHaGhSbUZqZEc5eU9pQnNaQ3dLSUNBZ0lGTnlZMEZzY0doaFUyRjBkWEpoZEdWR1lXTjBiM0k2SUhSbUxBb2dJQ0FnVTNKalEyOXNiM0pHWVdOMGIzSTZJRXBrTEFvZ0lDQWdVM1JoZEdsalEyOXdlVlZ6WVdkbE9pQm5kaXdLSUNBZ0lGTjBZWFJwWTBSeVlYZFZjMkZuWlRvZ1NISXNDaUFnSUNCVGRHRjBhV05TWldGa1ZYTmhaMlU2SUdaMkxBb2dJQ0FnVTNSbGNtVnZRMkZ0WlhKaE9pQk5kU3dLSUNBZ0lGTjBjbVZoYlVOdmNIbFZjMkZuWlRvZ2VIWXNDaUFnSUNCVGRISmxZVzFFY21GM1ZYTmhaMlU2SUdSMkxBb2dJQ0FnVTNSeVpXRnRVbVZoWkZWellXZGxPaUJ0ZGl3S0lDQWdJRk4wY21sdVowdGxlV1p5WVcxbFZISmhZMnM2SUd0dUxBb2dJQ0FnVTNWaWRISmhZM1JGY1hWaGRHbHZiam9nV0dRc0NpQWdJQ0JUZFdKMGNtRmpkR2wyWlVKc1pXNWthVzVuT2lCdmJDd0tJQ0FnSUZSUFZVTklPaUJXZUN3S0lDQWdJRlJoYm1kbGJuUlRjR0ZqWlU1dmNtMWhiRTFoY0RvZ2JXa3NDaUFnSUNCVVpYUnlZV2hsWkhKdmJrZGxiMjFsZEhKNU9pQnBZeXdLSUNBZ0lGUmxlSFIxY21VNklGTjBMQW9nSUNBZ1ZHVjRkSFZ5WlV4dllXUmxjam9nYUhVc0NpQWdJQ0JVYjNKMWMwZGxiMjFsZEhKNU9pQnpZeXdLSUNBZ0lGUnZjblZ6UzI1dmRFZGxiMjFsZEhKNU9pQnlZeXdLSUNBZ0lGUnlhV0Z1WjJ4bE9pQlZiaXdLSUNBZ0lGUnlhV0Z1WjJ4bFJtRnVSSEpoZDAxdlpHVTZJQ1I0TEFvZ0lDQWdWSEpwWVc1bmJHVlRkSEpwY0VSeVlYZE5iMlJsT2lCS2VDd0tJQ0FnSUZSeWFXRnVaMnhsYzBSeVlYZE5iMlJsT2lCYWVDd0tJQ0FnSUZSMVltVkhaVzl0WlhSeWVUb2dZV01zQ2lBZ0lDQlVkMjlRWVhOelJHOTFZbXhsVTJsa1pUb2dSM2dzQ2lBZ0lDQlZWazFoY0hCcGJtYzZJRWRqTEFvZ0lDQWdWV2x1ZERFMlFuVm1abVZ5UVhSMGNtbGlkWFJsT2lCYWNpd0tJQ0FnSUZWcGJuUXpNa0oxWm1abGNrRjBkSEpwWW5WMFpUb2dTbklzQ2lBZ0lDQlZhVzUwT0VKMVptWmxja0YwZEhKcFluVjBaVG9nYW13c0NpQWdJQ0JWYVc1ME9FTnNZVzF3WldSQ2RXWm1aWEpCZEhSeWFXSjFkR1U2SUdWb0xBb2dJQ0FnVlc1cFptOXliVG9nVUhVc0NpQWdJQ0JWYm1sbWIzSnRjMGR5YjNWd09pQk1kU3dLSUNBZ0lGVnVhV1p2Y20xelRHbGlPaUJzWlN3S0lDQWdJRlZ1YVdadmNtMXpWWFJwYkhNNklIaHdMQW9nSUNBZ1ZXNXphV2R1WldSQ2VYUmxWSGx3WlRvZ1QyNHNDaUFnSUNCVmJuTnBaMjVsWkVsdWRESTBPRlI1Y0dVNklHbHBMQW9nSUNBZ1ZXNXphV2R1WldSSmJuUlVlWEJsT2lCTWJpd0tJQ0FnSUZWdWMybG5ibVZrVTJodmNuUTBORFEwVkhsd1pUb2dabVFzQ2lBZ0lDQlZibk5wWjI1bFpGTm9iM0owTlRVMU1WUjVjR1U2SUhCa0xBb2dJQ0FnVlc1emFXZHVaV1JUYUc5eWRGUjVjR1U2SUZkakxBb2dJQ0FnVmxOTlUyaGhaRzkzVFdGd09pQndiaXdLSUNBZ0lGWmxZM1J2Y2pJNklGb3NDaUFnSUNCV1pXTjBiM0l6T2lCQkxBb2dJQ0FnVm1WamRHOXlORG9nYW1Vc0NpQWdJQ0JXWldOMGIzSkxaWGxtY21GdFpWUnlZV05yT2lCdWN5d0tJQ0FnSUZacFpHVnZWR1Y0ZEhWeVpUb2dTbWdzQ2lBZ0lDQlhaV0pIVERGU1pXNWtaWEpsY2pvZ1EyOHNDaUFnSUNCWFpXSkhURE5FVW1WdVpHVnlWR0Z5WjJWME9pQkliQ3dLSUNBZ0lGZGxZa2RNUVhKeVlYbFNaVzVrWlhKVVlYSm5aWFE2SUd0c0xBb2dJQ0FnVjJWaVIweERiMjl5WkdsdVlYUmxVM2x6ZEdWdE9pQjJiaXdLSUNBZ0lGZGxZa2RNUTNWaVpWSmxibVJsY2xSaGNtZGxkRG9nZUc4c0NpQWdJQ0JYWldKSFRFMTFiSFJwY0d4bFVtVnVaR1Z5VkdGeVoyVjBjem9nUjJ3c0NpQWdJQ0JYWldKSFRGSmxibVJsY2xSaGNtZGxkRG9nY1hRc0NpQWdJQ0JYWldKSFRGSmxibVJsY21WeU9pQlNieXdLSUNBZ0lGZGxZa2RNVlhScGJITTZJRll3TEFvZ0lDQWdWMlZpUjFCVlEyOXZjbVJwYm1GMFpWTjVjM1JsYlRvZ1IzSXNDaUFnSUNCWGFYSmxabkpoYldWSFpXOXRaWFJ5ZVRvZ2IyTXNDaUFnSUNCWGNtRndRWEp2ZFc1a1JXNWthVzVuT2lCQ2Npd0tJQ0FnSUZwbGNtOURkWEoyWVhSMWNtVkZibVJwYm1jNklIcHBMQW9nSUNBZ1dtVnliMFpoWTNSdmNqb2dXV1FzQ2lBZ0lDQmFaWEp2VTJ4dmNHVkZibVJwYm1jNklGWnBMQW9nSUNBZ1dtVnliMU4wWlc1amFXeFBjRG9nUzNnc0NpQWdJQ0JmVTFKSFFrRkdiM0p0WVhRNklIQnZMQW9nSUNBZ1kzSmxZWFJsUTJGdWRtRnpSV3hsYldWdWREb2dkSEFzQ2lBZ0lDQnpVa2RDUlc1amIyUnBibWM2SUhKcENuMDdDbVoxYm1OMGFXOXVJR2RsZEZkbFlrZE1SWEp5YjNKTlpYTnpZV2RsS0NrZ2V3b2dJQ0FnY21WMGRYSnVJR2RsZEVWeWNtOXlUV1Z6YzJGblpTZ3hLVHNLZlFwbWRXNWpkR2x2YmlCblpYUkZjbkp2Y2sxbGMzTmhaMlVvZG1WeWMybHZiaWtnZXdvZ0lDQWdkbUZ5SUc1aGJXVnpJRDBnZXdvZ0lDQWdJQ0FnSURFNklDSlhaV0pIVENJc0NpQWdJQ0FnSUNBZ01qb2dJbGRsWWtkTUlESWlDaUFnSUNCOU93b2dJQ0FnZG1GeUlHTnZiblJsZUhSeklEMGdld29nSUNBZ0lDQWdJREU2SUhkcGJtUnZkeTVYWldKSFRGSmxibVJsY21sdVowTnZiblJsZUhRc0NpQWdJQ0FnSUNBZ01qb2dkMmx1Wkc5M0xsZGxZa2RNTWxKbGJtUmxjbWx1WjBOdmJuUmxlSFFLSUNBZ0lIMDdDaUFnSUNCMllYSWdiV1Z6YzJGblpTQTlJQ2RaYjNWeUlDUXdJR1J2WlhNZ2JtOTBJSE5sWlcwZ2RHOGdjM1Z3Y0c5eWRDQThZU0JvY21WbVBTSm9kSFJ3T2k4dmEyaHliMjV2Y3k1dmNtY3ZkMlZpWjJ3dmQybHJhUzlIWlhSMGFXNW5YMkZmVjJWaVIweGZTVzF3YkdWdFpXNTBZWFJwYjI0aUlITjBlV3hsUFNKamIyeHZjam9qTURBd0lqNGtNVHd2WVQ0bk93b2dJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NKa2FYWWlLVHNLSUNBZ0lHVnNaVzFsYm5RdWFXUWdQU0FpZDJWaVoyeHRaWE56WVdkbElqc0tJQ0FnSUdWc1pXMWxiblF1YzNSNWJHVXVabTl1ZEVaaGJXbHNlU0E5SUNKdGIyNXZjM0JoWTJVaU93b2dJQ0FnWld4bGJXVnVkQzV6ZEhsc1pTNW1iMjUwVTJsNlpTQTlJQ0l4TTNCNElqc0tJQ0FnSUdWc1pXMWxiblF1YzNSNWJHVXVabTl1ZEZkbGFXZG9kQ0E5SUNKdWIzSnRZV3dpT3dvZ0lDQWdaV3hsYldWdWRDNXpkSGxzWlM1MFpYaDBRV3hwWjI0Z1BTQWlZMlZ1ZEdWeUlqc0tJQ0FnSUdWc1pXMWxiblF1YzNSNWJHVXVZbUZqYTJkeWIzVnVaQ0E5SUNJalptWm1JanNLSUNBZ0lHVnNaVzFsYm5RdWMzUjViR1V1WTI5c2IzSWdQU0FpSXpBd01DSTdDaUFnSUNCbGJHVnRaVzUwTG5OMGVXeGxMbkJoWkdScGJtY2dQU0FpTVM0MVpXMGlPd29nSUNBZ1pXeGxiV1Z1ZEM1emRIbHNaUzUzYVdSMGFDQTlJQ0kwTURCd2VDSTdDaUFnSUNCbGJHVnRaVzUwTG5OMGVXeGxMbTFoY21kcGJpQTlJQ0kxWlcwZ1lYVjBieUF3SWpzS0lDQWdJR2xtSUNoamIyNTBaWGgwYzF0MlpYSnphVzl1WFNrZ2V3b2dJQ0FnSUNBZ0lHMWxjM05oWjJVZ1BTQnRaWE56WVdkbExuSmxjR3hoWTJVb0lpUXdJaXdnSW1keVlYQm9hV056SUdOaGNtUWlLVHNLSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2JXVnpjMkZuWlNBOUlHMWxjM05oWjJVdWNtVndiR0ZqWlNnaUpEQWlMQ0FpWW5KdmQzTmxjaUlwT3dvZ0lDQWdmUW9nSUNBZ2JXVnpjMkZuWlNBOUlHMWxjM05oWjJVdWNtVndiR0ZqWlNnaUpERWlMQ0J1WVcxbGMxdDJaWEp6YVc5dVhTazdDaUFnSUNCbGJHVnRaVzUwTG1sdWJtVnlTRlJOVENBOUlHMWxjM05oWjJVN0NpQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWREc0tmUXBtZFc1amRHbHZiaUIwZVhCbFpHRnljbUY1WDNSdlgzWmxZM1I1Y0dVb2RIbHdaV1JCY25KaGVTd2dibVJwYlNrZ2V3b2dJQ0FnYVdZZ0tHNWthVzBnUFQwOUlERXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdJbVpzYjJGMElqc0tJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaV1JCY25KaGVTQnBibk4wWVc1alpXOW1JRVpzYjJGME16SkJjbkpoZVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaWRtVmpJaUFySUc1a2FXMDdDaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1ZrUVhKeVlYa2dhVzV6ZEdGdVkyVnZaaUJKYm5Rek1rRnljbUY1S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNKcGRtVmpJaUFySUc1a2FXMDdDaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1ZrUVhKeVlYa2dhVzV6ZEdGdVkyVnZaaUJWYVc1ME16SkJjbkpoZVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaWRYWmxZeUlnS3lCdVpHbHRPd29nSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnWVhSMGNtbGlkWFJsWDNSNWNHVW9ZWFIwY21saWRYUmxLU0I3Q2lBZ0lDQnBaaUFvWVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVmtZWEp5WVhsZmRHOWZkbVZqZEhsd1pTaGhkSFJ5YVdKMWRHVXVZWEp5WVhrc0lHRjBkSEpwWW5WMFpTNXBkR1Z0VTJsNlpTazdDaUFnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lIMEtmUXBtZFc1amRHbHZiaUIxYm1sbWIzSnRYM1I1Y0dVb2IySnFLU0I3Q2lBZ0lDQnBaaUFvYjJKcUlHbHVjM1JoYm1ObGIyWWdWRWhTUlVVdVZXNXBabTl5YlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMWJtbG1iM0p0WDNSNWNHVW9iMkpxTG5aaGJIVmxLVHNLSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHOWlhaUE5UFQwZ0ltNTFiV0psY2lJcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0ltWnNiMkYwSWpzS0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JRzlpYWlBOVBUMGdJbUp2YjJ4bFlXNGlLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0ppYjI5c0lqc0tJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IySnFJR2x1YzNSaGJtTmxiMllnVkVoU1JVVXVWbVZqZEc5eU1pa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQWlkbVZqTWlJN0NpQWdJQ0I5SUdWc2MyVWdhV1lnS0c5aWFpQnBibk4wWVc1alpXOW1JRlJJVWtWRkxsWmxZM1J2Y2pNcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0luWmxZek1pT3dvZ0lDQWdmU0JsYkhObElHbG1JQ2h2WW1vZ2FXNXpkR0Z1WTJWdlppQlVTRkpGUlM1V1pXTjBiM0kwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNKMlpXTTBJanNLSUNBZ0lIMGdaV3h6WlNCcFppQW9iMkpxSUdsdWMzUmhibU5sYjJZZ1ZFaFNSVVV1UTI5c2IzSXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdJblpsWXpRaU93b2dJQ0FnZlNCbGJITmxJR2xtSUNodlltb2dhVzV6ZEdGdVkyVnZaaUJVU0ZKRlJTNU5ZWFJ5YVhnektTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDSnRZWFF6SWpzS0lDQWdJSDBnWld4elpTQnBaaUFvYjJKcUlHbHVjM1JoYm1ObGIyWWdWRWhTUlVVdVRXRjBjbWw0TkNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaWJXRjBOQ0k3Q2lBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzlpYWlCcGJuTjBZVzVqWlc5bUlGUklVa1ZGTGxSbGVIUjFjbVVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnSW5OaGJYQnNaWEl5UkNJN0NpQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQjFibWxtYjNKdGMxOTBiMTkwZVhCbFgyUmxZMnhoY21GMGFXOXVLSFZ1YVdadmNtMWZaR2xqZENrZ2V3b2dJQ0FnYkdWMElISmxjM1ZzZENBOUlDSWlPd29nSUNBZ1ptOXlLR052Ym5OMElHNWhiV1VnYVc0Z2RXNXBabTl5YlY5a2FXTjBLWHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjFibWxtYjNKdElEMGdkVzVwWm05eWJWOWthV04wVzI1aGJXVmRPd29nSUNBZ0lDQWdJR052Ym5OMElIUjVjR1VnUFNCMWJtbG1iM0p0WDNSNWNHVW9kVzVwWm05eWJTazdDaUFnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJR0IxYm1sbWIzSnRJQ1I3ZEhsd1pYMGdKSHR1WVcxbGZUdGNibUE3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPd3A5Q21aMWJtTjBhVzl1SUdGMGRISnBZblYwWlhOZmRHOWZkSGx3WlY5a1pXTnNZWEpoZEdsdmJpaGhkSFJ5YVdKMWRHVnpYMlJwWTNRcElIc0tJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQWlJanNLSUNBZ0lHWnZjaWhqYjI1emRDQnVZVzFsSUdsdUlHRjBkSEpwWW5WMFpYTmZaR2xqZENsN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWVhSMGNtbGlkWFJsSUQwZ1lYUjBjbWxpZFhSbGMxOWthV04wVzI1aGJXVmRPd29nSUNBZ0lDQWdJR052Ym5OMElIUjVjR1VnUFNCaGRIUnlhV0oxZEdWZmRIbHdaU2hoZEhSeWFXSjFkR1VwT3dvZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCZ2FXNGdKSHQwZVhCbGZTQWtlMjVoYldWOU8xeHVZRHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdDbjBLWTI5dWMzUWdYMk5vWVc1blpVVjJaVzUwSUQwZ2V3b2dJQ0FnZEhsd1pUb2dJbU5vWVc1blpTSUtmVHNLWTI5dWMzUWdYM04wWVhKMFJYWmxiblFnUFNCN0NpQWdJQ0IwZVhCbE9pQWljM1JoY25RaUNuMDdDbU52Ym5OMElGOWxibVJGZG1WdWRDQTlJSHNLSUNBZ0lIUjVjR1U2SUNKbGJtUWlDbjA3Q21OdmJuTjBJRjl5WVhrZ1BTQnVaWGNnYUdrb0tUc0tZMjl1YzNRZ1gzQnNZVzVsSUQwZ2JtVjNJRzF1S0NrN0NtTnZibk4wSUZSSlRGUmZURWxOU1ZRZ1BTQk5ZWFJvTG1OdmN5ZzNNQ0FxSUhsMkxrUkZSekpTUVVRcE93cGpiR0Z6Y3lCUGNtSnBkRU52Ym5SeWIyeHpJR1Y0ZEdWdVpITWdjMjRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvYjJKcVpXTjBMQ0JrYjIxRmJHVnRaVzUwTENCaGJHeHZkMTkxY0dSaGRHVXNJR2x6WDJsdVgzTmpaVzVsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXViMkpxWldOMElEMGdiMkpxWldOME93b2dJQ0FnSUNBZ0lIUm9hWE11Wkc5dFJXeGxiV1Z1ZENBOUlHUnZiVVZzWlcxbGJuUTdDaUFnSUNBZ0lDQWdkR2hwY3k1a2IyMUZiR1Z0Wlc1MExuTjBlV3hsTG5SdmRXTm9RV04wYVc5dUlEMGdJbTV2Ym1VaU93b2dJQ0FnSUNBZ0lIUm9hWE11Wlc1aFlteGxaQ0E5SUhSeWRXVTdDaUFnSUNBZ0lDQWdkR2hwY3k1MFlYSm5aWFFnUFNCdVpYY2dRU2dwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z5YzI5eUlEMGdibVYzSUVFb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG0xcGJrUnBjM1JoYm1ObElEMGdNRHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhlRVJwYzNSaGJtTmxJRDBnU1c1bWFXNXBkSGs3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRhVzVhYjI5dElEMGdNRHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhlRnB2YjIwZ1BTQkpibVpwYm1sMGVUc0tJQ0FnSUNBZ0lDQjBhR2x6TG0xcGJsUmhjbWRsZEZKaFpHbDFjeUE5SURBN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhoVVlYSm5aWFJTWVdScGRYTWdQU0JKYm1acGJtbDBlVHNLSUNBZ0lDQWdJQ0IwYUdsekxtMXBibEJ2YkdGeVFXNW5iR1VnUFNBd093b2dJQ0FnSUNBZ0lIUm9hWE11YldGNFVHOXNZWEpCYm1kc1pTQTlJRTFoZEdndVVFazdDaUFnSUNBZ0lDQWdkR2hwY3k1dGFXNUJlbWx0ZFhSb1FXNW5iR1VnUFNBdFNXNW1hVzVwZEhrN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhoQmVtbHRkWFJvUVc1bmJHVWdQU0JKYm1acGJtbDBlVHNLSUNBZ0lDQWdJQ0IwYUdsekxtVnVZV0pzWlVSaGJYQnBibWNnUFNCbVlXeHpaVHNLSUNBZ0lDQWdJQ0IwYUdsekxtUmhiWEJwYm1kR1lXTjBiM0lnUFNBd0xqQTFPd29nSUNBZ0lDQWdJSFJvYVhNdVpXNWhZbXhsV205dmJTQTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ2RHaHBjeTU2YjI5dFUzQmxaV1FnUFNBeExqQTdDaUFnSUNBZ0lDQWdkR2hwY3k1bGJtRmliR1ZTYjNSaGRHVWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lIUm9hWE11Y205MFlYUmxVM0JsWldRZ1BTQXhMakE3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxibUZpYkdWUVlXNGdQU0IwY25WbE93b2dJQ0FnSUNBZ0lIUm9hWE11Y0dGdVUzQmxaV1FnUFNBeExqQTdDaUFnSUNBZ0lDQWdkR2hwY3k1elkzSmxaVzVUY0dGalpWQmhibTVwYm1jZ1BTQjBjblZsT3dvZ0lDQWdJQ0FnSUhSb2FYTXVhMlY1VUdGdVUzQmxaV1FnUFNBM0xqQTdDaUFnSUNBZ0lDQWdkR2hwY3k1NmIyOXRWRzlEZFhKemIzSWdQU0JtWVd4elpUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1GMWRHOVNiM1JoZEdVZ1BTQm1ZV3h6WlRzS0lDQWdJQ0FnSUNCMGFHbHpMbUYxZEc5U2IzUmhkR1ZUY0dWbFpDQTlJREl1TURzS0lDQWdJQ0FnSUNCMGFHbHpMbXRsZVhNZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUV4RlJsUTZJQ0pCY25KdmQweGxablFpTEFvZ0lDQWdJQ0FnSUNBZ0lDQlZVRG9nSWtGeWNtOTNWWEFpTEFvZ0lDQWdJQ0FnSUNBZ0lDQlNTVWRJVkRvZ0lrRnljbTkzVW1sbmFIUWlMQW9nSUNBZ0lDQWdJQ0FnSUNCQ1QxUlVUMDA2SUNKQmNuSnZkMFJ2ZDI0aUNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxRblYwZEc5dWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1RFVkdWRG9nZW5ndVVrOVVRVlJGTEFvZ0lDQWdJQ0FnSUNBZ0lDQk5TVVJFVEVVNklIcDRMa1JQVEV4WkxBb2dJQ0FnSUNBZ0lDQWdJQ0JTU1VkSVZEb2dlbmd1VUVGT0NpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SdmRXTm9aWE1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJRTlPUlRvZ1ZuZ3VVazlVUVZSRkxBb2dJQ0FnSUNBZ0lDQWdJQ0JVVjA4NklGWjRMa1JQVEV4WlgxQkJUZ29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRd0lEMGdkR2hwY3k1MFlYSm5aWFF1WTJ4dmJtVW9LVHNLSUNBZ0lDQWdJQ0IwYUdsekxuQnZjMmwwYVc5dU1DQTlJSFJvYVhNdWIySnFaV04wTG5CdmMybDBhVzl1TG1Oc2IyNWxLQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NTZiMjl0TUNBOUlIUm9hWE11YjJKcVpXTjBMbnB2YjIwN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmWkc5dFJXeGxiV1Z1ZEV0bGVVVjJaVzUwY3lBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZEdocGN5NW5aWFJRYjJ4aGNrRnVaMnhsSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6Y0dobGNtbGpZV3d1Y0docE93b2dJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdkR2hwY3k1blpYUkJlbWx0ZFhSb1lXeEJibWRzWlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNCb1pYSnBZMkZzTG5Sb1pYUmhPd29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnZEdocGN5NW5aWFJFYVhOMFlXNWpaU0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dlltcGxZM1F1Y0c5emFYUnBiMjR1WkdsemRHRnVZMlZVYnloMGFHbHpMblJoY21kbGRDazdDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0IwYUdsekxteHBjM1JsYmxSdlMyVjVSWFpsYm5SeklEMGdablZ1WTNScGIyNG9aRzl0Uld4bGJXVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmtiMjFGYkdWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbXRsZVdSdmQyNGlMQ0J2Ymt0bGVVUnZkMjRwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a2IyMUZiR1Z0Wlc1MFMyVjVSWFpsYm5SeklEMGdaRzl0Uld4bGJXVnVkRHNLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y0V4cGMzUmxibFJ2UzJWNVJYWmxiblJ6SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlJ2YlVWc1pXMWxiblJMWlhsRmRtVnVkSE11Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWEyVjVaRzkzYmlJc0lHOXVTMlY1Ukc5M2JpazdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlJ2YlVWc1pXMWxiblJMWlhsRmRtVnVkSE1nUFNCdWRXeHNPd29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnZEdocGN5NXpZWFpsVTNSaGRHVWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjMk52Y0dVdWRHRnlaMlYwTUM1amIzQjVLSE5qYjNCbExuUmhjbWRsZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuQnZjMmwwYVc5dU1DNWpiM0I1S0hOamIzQmxMbTlpYW1WamRDNXdiM05wZEdsdmJpazdDaUFnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbnB2YjIwd0lEMGdjMk52Y0dVdWIySnFaV04wTG5wdmIyMDdDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmxjMlYwSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMblJoY21kbGRDNWpiM0I1S0hOamIzQmxMblJoY21kbGREQXBPd29nSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzV2WW1wbFkzUXVjRzl6YVhScGIyNHVZMjl3ZVNoelkyOXdaUzV3YjNOcGRHbHZiakFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1dlltcGxZM1F1ZW05dmJTQTlJSE5qYjNCbExucHZiMjB3T3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1dlltcGxZM1F1ZFhCa1lYUmxVSEp2YW1WamRHbHZiazFoZEhKcGVDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzVrYVhOd1lYUmphRVYyWlc1MEtGOWphR0Z1WjJWRmRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5Wd1pHRjBaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlGTlVRVlJGTGs1UFRrVTdDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J2Wm1aelpYUWdQU0J1WlhjZ1FTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J4ZFdGMElEMGdibVYzSUZWMEtDa3VjMlYwUm5KdmJWVnVhWFJXWldOMGIzSnpLRzlpYW1WamRDNTFjQ3dnYm1WM0lFRW9NQ3dnTVN3Z01Da3BPd29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J4ZFdGMFNXNTJaWEp6WlNBOUlIRjFZWFF1WTJ4dmJtVW9LUzVwYm5abGNuUW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGemRGQnZjMmwwYVc5dUlEMGdibVYzSUVFb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiR0Z6ZEZGMVlYUmxjbTVwYjI0Z1BTQnVaWGNnVlhRb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiR0Z6ZEZSaGNtZGxkRkJ2YzJsMGFXOXVJRDBnYm1WM0lFRW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEhkdlVFa2dQU0F5SUNvZ1RXRjBhQzVRU1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlIVndaR0YwWlNoa1pXeDBZVlJwYldVZ1BTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV0ZzYkc5M1gzVndaR0YwWlNncEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NHOXphWFJwYjI0Z1BTQnpZMjl3WlM1dlltcGxZM1F1Y0c5emFYUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Wm1aelpYUXVZMjl3ZVNod2IzTnBkR2x2YmlrdWMzVmlLSE5qYjNCbExuUmhjbWRsZENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFF1WVhCd2JIbFJkV0YwWlhKdWFXOXVLSEYxWVhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQm9aWEpwWTJGc0xuTmxkRVp5YjIxV1pXTjBiM0l6S0c5bVpuTmxkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1WVhWMGIxSnZkR0YwWlNBbUppQnpkR0YwWlNBOVBUMGdVMVJCVkVVdVRrOU9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZkR0YwWlV4bFpuUW9aMlYwUVhWMGIxSnZkR0YwYVc5dVFXNW5iR1VvWkdWc2RHRlVhVzFsS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdVpXNWhZbXhsUkdGdGNHbHVaeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndhR1Z5YVdOaGJDNTBhR1YwWVNBclBTQnpjR2hsY21sallXeEVaV3gwWVM1MGFHVjBZU0FxSUhOamIzQmxMbVJoYlhCcGJtZEdZV04wYjNJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JvWlhKcFkyRnNMbkJvYVNBclBTQnpjR2hsY21sallXeEVaV3gwWVM1d2FHa2dLaUJ6WTI5d1pTNWtZVzF3YVc1blJtRmpkRzl5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHaGxjbWxqWVd3dWRHaGxkR0VnS3owZ2MzQm9aWEpwWTJGc1JHVnNkR0V1ZEdobGRHRTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCb1pYSnBZMkZzTG5Cb2FTQXJQU0J6Y0dobGNtbGpZV3hFWld4MFlTNXdhR2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXbHVJRDBnYzJOdmNHVXViV2x1UVhwcGJYVjBhRUZ1WjJ4bE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzFoZUNBOUlITmpiM0JsTG0xaGVFRjZhVzExZEdoQmJtZHNaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMwWnBibWwwWlNodGFXNHBJQ1ltSUdselJtbHVhWFJsS0cxaGVDa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iV2x1SUR3Z0xVMWhkR2d1VUVrcElHMXBiaUFyUFNCMGQyOVFTVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNodGFXNGdQaUJOWVhSb0xsQkpLU0J0YVc0Z0xUMGdkSGR2VUVrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxaGVDQThJQzFOWVhSb0xsQkpLU0J0WVhnZ0t6MGdkSGR2VUVrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9iV0Y0SUQ0Z1RXRjBhQzVRU1NrZ2JXRjRJQzA5SUhSM2IxQkpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRhVzRnUEQwZ2JXRjRLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53YUdWeWFXTmhiQzUwYUdWMFlTQTlJRTFoZEdndWJXRjRLRzFwYml3Z1RXRjBhQzV0YVc0b2JXRjRMQ0J6Y0dobGNtbGpZV3d1ZEdobGRHRXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dobGNtbGpZV3d1ZEdobGRHRWdQU0J6Y0dobGNtbGpZV3d1ZEdobGRHRWdQaUFvYldsdUlDc2diV0Y0S1NBdklESWdQeUJOWVhSb0xtMWhlQ2h0YVc0c0lITndhR1Z5YVdOaGJDNTBhR1YwWVNrZ09pQk5ZWFJvTG0xcGJpaHRZWGdzSUhOd2FHVnlhV05oYkM1MGFHVjBZU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQm9aWEpwWTJGc0xuQm9hU0E5SUUxaGRHZ3ViV0Y0S0hOamIzQmxMbTFwYmxCdmJHRnlRVzVuYkdVc0lFMWhkR2d1YldsdUtITmpiM0JsTG0xaGVGQnZiR0Z5UVc1bmJHVXNJSE53YUdWeWFXTmhiQzV3YUdrcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndhR1Z5YVdOaGJDNXRZV3RsVTJGbVpTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamIzQmxMbVZ1WVdKc1pVUmhiWEJwYm1jZ1BUMDlJSFJ5ZFdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNTBZWEpuWlhRdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0hCaGJrOW1abk5sZEN3Z2MyTnZjR1V1WkdGdGNHbHVaMFpoWTNSdmNpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuUmhjbWRsZEM1aFpHUW9jR0Z1VDJabWMyVjBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuUmhjbWRsZEM1emRXSW9jMk52Y0dVdVkzVnljMjl5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMblJoY21kbGRDNWpiR0Z0Y0V4bGJtZDBhQ2h6WTI5d1pTNXRhVzVVWVhKblpYUlNZV1JwZFhNc0lITmpiM0JsTG0xaGVGUmhjbWRsZEZKaFpHbDFjeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNTBZWEpuWlhRdVlXUmtLSE5qYjNCbExtTjFjbk52Y2lrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdWVtOXZiVlJ2UTNWeWMyOXlJQ1ltSUhCbGNtWnZjbTFEZFhKemIzSmFiMjl0SUh4OElITmpiM0JsTG05aWFtVmpkQzVwYzA5eWRHaHZaM0poY0docFkwTmhiV1Z5WVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53YUdWeWFXTmhiQzV5WVdScGRYTWdQU0JqYkdGdGNFUnBjM1JoYm1ObEtITndhR1Z5YVdOaGJDNXlZV1JwZFhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR2hsY21sallXd3VjbUZrYVhWeklEMGdZMnhoYlhCRWFYTjBZVzVqWlNoemNHaGxjbWxqWVd3dWNtRmthWFZ6SUNvZ2MyTmhiR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBMbk5sZEVaeWIyMVRjR2hsY21sallXd29jM0JvWlhKcFkyRnNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRDNWhjSEJzZVZGMVlYUmxjbTVwYjI0b2NYVmhkRWx1ZG1WeWMyVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl6YVhScGIyNHVZMjl3ZVNoelkyOXdaUzUwWVhKblpYUXBMbUZrWkNodlptWnpaWFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXViMkpxWldOMExteHZiMnRCZENoelkyOXdaUzUwWVhKblpYUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamIzQmxMbVZ1WVdKc1pVUmhiWEJwYm1jZ1BUMDlJSFJ5ZFdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dobGNtbGpZV3hFWld4MFlTNTBhR1YwWVNBcVBTQXhJQzBnYzJOdmNHVXVaR0Z0Y0dsdVowWmhZM1J2Y2pzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR2hsY21sallXeEVaV3gwWVM1d2FHa2dLajBnTVNBdElITmpiM0JsTG1SaGJYQnBibWRHWVdOMGIzSTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGdVQyWm1jMlYwTG0xMWJIUnBjR3g1VTJOaGJHRnlLREVnTFNCelkyOXdaUzVrWVcxd2FXNW5SbUZqZEc5eUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JvWlhKcFkyRnNSR1ZzZEdFdWMyVjBLREFzSURBc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGJrOW1abk5sZEM1elpYUW9NQ3dnTUN3Z01DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZW05dmJVTm9ZVzVuWldRZ1BTQm1ZV3h6WlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1NmIyOXRWRzlEZFhKemIzSWdKaVlnY0dWeVptOXliVU4xY25OdmNscHZiMjBwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm1WM1VtRmthWFZ6SUQwZ2JuVnNiRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdWIySnFaV04wTG1selVHVnljM0JsWTNScGRtVkRZVzFsY21FcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbGRsSmhaR2wxY3lBOUlHOW1abk5sZEM1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1VtRmthWFZ6SUQwZ1kyeGhiWEJFYVhOMFlXNWpaU2h3Y21WMlVtRmthWFZ6SUNvZ2MyTmhiR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlZV1JwZFhORVpXeDBZU0E5SUhCeVpYWlNZV1JwZFhNZ0xTQnVaWGRTWVdScGRYTTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG05aWFtVmpkQzV3YjNOcGRHbHZiaTVoWkdSVFkyRnNaV1JXWldOMGIzSW9aRzlzYkhsRWFYSmxZM1JwYjI0c0lISmhaR2wxYzBSbGJIUmhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk52Y0dVdWIySnFaV04wTG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6WTI5d1pTNXZZbXBsWTNRdWFYTlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JXOTFjMlZDWldadmNtVWdQU0J1WlhjZ1FTaHRiM1Z6WlM1NExDQnRiM1Z6WlM1NUxDQXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWQ1pXWnZjbVV1ZFc1d2NtOXFaV04wS0hOamIzQmxMbTlpYW1WamRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG05aWFtVmpkQzU2YjI5dElEMGdUV0YwYUM1dFlYZ29jMk52Y0dVdWJXbHVXbTl2YlN3Z1RXRjBhQzV0YVc0b2MyTnZjR1V1YldGNFdtOXZiU3dnYzJOdmNHVXViMkpxWldOMExucHZiMjBnTHlCelkyRnNaU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNXZZbXBsWTNRdWRYQmtZWFJsVUhKdmFtVmpkR2x2YmsxaGRISnBlQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I2YjI5dFEyaGhibWRsWkNBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMXZkWE5sUVdaMFpYSWdQU0J1WlhjZ1FTaHRiM1Z6WlM1NExDQnRiM1Z6WlM1NUxDQXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWQlpuUmxjaTUxYm5CeWIycGxZM1FvYzJOdmNHVXViMkpxWldOMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1YjJKcVpXTjBMbkJ2YzJsMGFXOXVMbk4xWWlodGIzVnpaVUZtZEdWeUtTNWhaR1FvYlc5MWMyVkNaV1p2Y21VcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzV2WW1wbFkzUXVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzVW1Ga2FYVnpJRDBnYjJabWMyVjBMbXhsYm1kMGFDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVYwRlNUa2xPUnpvZ1QzSmlhWFJEYjI1MGNtOXNjeTVxY3lCbGJtTnZkVzUwWlhKbFpDQmhiaUIxYm10dWIzZHVJR05oYldWeVlTQjBlWEJsSUMwZ2VtOXZiU0IwYnlCamRYSnpiM0lnWkdsellXSnNaV1F1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbnB2YjIxVWIwTjFjbk52Y2lBOUlHWmhiSE5sT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JtVjNVbUZrYVhWeklDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTmpjbVZsYmxOd1lXTmxVR0Z1Ym1sdVp5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVkR0Z5WjJWMExuTmxkQ2d3TENBd0xDQXRNU2t1ZEhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0hOamIzQmxMbTlpYW1WamRDNXRZWFJ5YVhncExtMTFiSFJwY0d4NVUyTmhiR0Z5S0c1bGQxSmhaR2wxY3lrdVlXUmtLSE5qYjNCbExtOWlhbVZqZEM1d2IzTnBkR2x2YmlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmNtRjVMbTl5YVdkcGJpNWpiM0I1S0hOamIzQmxMbTlpYW1WamRDNXdiM05wZEdsdmJpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmY21GNUxtUnBjbVZqZEdsdmJpNXpaWFFvTUN3Z01Dd2dMVEVwTG5SeVlXNXpabTl5YlVScGNtVmpkR2x2YmloelkyOXdaUzV2WW1wbFkzUXViV0YwY21sNEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoTllYUm9MbUZpY3loelkyOXdaUzV2WW1wbFkzUXVkWEF1Wkc5MEtGOXlZWGt1WkdseVpXTjBhVzl1S1NrZ1BDQlVTVXhVWDB4SlRVbFVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkpxWldOMExteHZiMnRCZENoelkyOXdaUzUwWVhKblpYUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZjR3hoYm1VdWMyVjBSbkp2YlU1dmNtMWhiRUZ1WkVOdmNHeGhibUZ5VUc5cGJuUW9jMk52Y0dVdWIySnFaV04wTG5Wd0xDQnpZMjl3WlM1MFlYSm5aWFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjl5WVhrdWFXNTBaWEp6WldOMFVHeGhibVVvWDNCc1lXNWxMQ0J6WTI5d1pTNTBZWEpuWlhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoelkyOXdaUzV2WW1wbFkzUXVhWE5QY25Sb2IyZHlZWEJvYVdORFlXMWxjbUVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1dlltcGxZM1F1ZW05dmJTQTlJRTFoZEdndWJXRjRLSE5qYjNCbExtMXBibHB2YjIwc0lFMWhkR2d1YldsdUtITmpiM0JsTG0xaGVGcHZiMjBzSUhOamIzQmxMbTlpYW1WamRDNTZiMjl0SUM4Z2MyTmhiR1VwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1dlltcGxZM1F1ZFhCa1lYUmxVSEp2YW1WamRHbHZiazFoZEhKcGVDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhwdmIyMURhR0Z1WjJWa0lEMGdkSEoxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOallXeGxJRDBnTVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCbGNtWnZjbTFEZFhKemIzSmFiMjl0SUQwZ1ptRnNjMlU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2VtOXZiVU5vWVc1blpXUWdmSHdnYkdGemRGQnZjMmwwYVc5dUxtUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tITmpiM0JsTG05aWFtVmpkQzV3YjNOcGRHbHZiaWtnUGlCRlVGTWdmSHdnT0NBcUlDZ3hJQzBnYkdGemRGRjFZWFJsY201cGIyNHVaRzkwS0hOamIzQmxMbTlpYW1WamRDNXhkV0YwWlhKdWFXOXVLU2tnUGlCRlVGTWdmSHdnYkdGemRGUmhjbWRsZEZCdmMybDBhVzl1TG1ScGMzUmhibU5sVkc5VGNYVmhjbVZrS0hOamIzQmxMblJoY21kbGRDa2dQaUF3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk52Y0dVdVpHbHpjR0YwWTJoRmRtVnVkQ2hmWTJoaGJtZGxSWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSUWIzTnBkR2x2Ymk1amIzQjVLSE5qYjNCbExtOWlhbVZqZEM1d2IzTnBkR2x2YmlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z6ZEZGMVlYUmxjbTVwYjI0dVkyOXdlU2h6WTI5d1pTNXZZbXBsWTNRdWNYVmhkR1Z5Ym1sdmJpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGemRGUmhjbWRsZEZCdmMybDBhVzl1TG1OdmNIa29jMk52Y0dVdWRHRnlaMlYwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjZiMjl0UTJoaGJtZGxaQ0E5SUdaaGJITmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPd29nSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lIMG9LVHNLSUNBZ0lDQWdJQ0IwYUdsekxtUnBjM0J2YzJVZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSmpiMjUwWlhoMGJXVnVkU0lzSUc5dVEyOXVkR1Y0ZEUxbGJuVXBPd29nSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzVrYjIxRmJHVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0luQnZhVzUwWlhKa2IzZHVJaXdnYjI1UWIybHVkR1Z5Ukc5M2JpazdDaUFnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbVJ2YlVWc1pXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWNHOXBiblJsY21OaGJtTmxiQ0lzSUc5dVVHOXBiblJsY2xWd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVaRzl0Uld4bGJXVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKM2FHVmxiQ0lzSUc5dVRXOTFjMlZYYUdWbGJDazdDaUFnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbVJ2YlVWc1pXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWNHOXBiblJsY20xdmRtVWlMQ0J2YmxCdmFXNTBaWEpOYjNabEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVaRzl0Uld4bGJXVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKd2IybHVkR1Z5ZFhBaUxDQnZibEJ2YVc1MFpYSlZjQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNWZaRzl0Uld4bGJXVnVkRXRsZVVWMlpXNTBjeUFoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVYMlJ2YlVWc1pXMWxiblJMWlhsRmRtVnVkSE11Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWEyVjVaRzkzYmlJc0lHOXVTMlY1Ukc5M2JpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1ZlpHOXRSV3hsYldWdWRFdGxlVVYyWlc1MGN5QTlJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSE5qYjNCbElEMGdkR2hwY3pzS0lDQWdJQ0FnSUNCamIyNXpkQ0JUVkVGVVJTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1RrOU9SVG9nTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJRkpQVkVGVVJUb2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1JFOU1URms2SURFc0NpQWdJQ0FnSUNBZ0lDQWdJRkJCVGpvZ01pd0tJQ0FnSUNBZ0lDQWdJQ0FnVkU5VlEwaGZVazlVUVZSRk9pQXpMQW9nSUNBZ0lDQWdJQ0FnSUNCVVQxVkRTRjlRUVU0NklEUXNDaUFnSUNBZ0lDQWdJQ0FnSUZSUFZVTklYMFJQVEV4WlgxQkJUam9nTlN3S0lDQWdJQ0FnSUNBZ0lDQWdWRTlWUTBoZlJFOU1URmxmVWs5VVFWUkZPaUEyQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCc1pYUWdjM1JoZEdVZ1BTQlRWRUZVUlM1T1QwNUZPd29nSUNBZ0lDQWdJR052Ym5OMElFVlFVeUE5SURBdU1EQXdNREF4T3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSE53YUdWeWFXTmhiQ0E5SUc1bGR5QlBkU2dwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSE53YUdWeWFXTmhiRVJsYkhSaElEMGdibVYzSUU5MUtDazdDaUFnSUNBZ0lDQWdiR1YwSUhOallXeGxJRDBnTVRzS0lDQWdJQ0FnSUNCamIyNXpkQ0J3WVc1UFptWnpaWFFnUFNCdVpYY2dRU2dwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEp2ZEdGMFpWTjBZWEowSUQwZ2JtVjNJRm9vS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J5YjNSaGRHVkZibVFnUFNCdVpYY2dXaWdwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEp2ZEdGMFpVUmxiSFJoSUQwZ2JtVjNJRm9vS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J3WVc1VGRHRnlkQ0E5SUc1bGR5QmFLQ2s3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjR0Z1Ulc1a0lEMGdibVYzSUZvb0tUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lXNUVaV3gwWVNBOUlHNWxkeUJhS0NrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWkc5c2JIbFRkR0Z5ZENBOUlHNWxkeUJhS0NrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnWkc5c2JIbEZibVFnUFNCdVpYY2dXaWdwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJR1J2Ykd4NVJHVnNkR0VnUFNCdVpYY2dXaWdwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJR1J2Ykd4NVJHbHlaV04wYVc5dUlEMGdibVYzSUVFb0tUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIzVnpaU0E5SUc1bGR5QmFLQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElIQmxjbVp2Y20xRGRYSnpiM0phYjI5dElEMGdabUZzYzJVN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnY0c5cGJuUmxjbk1nUFNCYlhUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCd2IybHVkR1Z5VUc5emFYUnBiMjV6SUQwZ2UzMDdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdaMlYwUVhWMGIxSnZkR0YwYVc5dVFXNW5iR1VvWkdWc2RHRlVhVzFsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1pXeDBZVlJwYldVZ0lUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBeUlDb2dUV0YwYUM1UVNTQXZJRFl3SUNvZ2MyTnZjR1V1WVhWMGIxSnZkR0YwWlZOd1pXVmtJQ29nWkdWc2RHRlVhVzFsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURJZ0tpQk5ZWFJvTGxCSklDOGdOakFnTHlBMk1DQXFJSE5qYjNCbExtRjFkRzlTYjNSaGRHVlRjR1ZsWkRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJuWlhSYWIyOXRVMk5oYkdVb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuQnZkeWd3TGprMUxDQnpZMjl3WlM1NmIyOXRVM0JsWldRcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnliM1JoZEdWTVpXWjBLR0Z1WjJ4bEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhOd2FHVnlhV05oYkVSbGJIUmhMblJvWlhSaElDMDlJR0Z1WjJ4bE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnliM1JoZEdWVmNDaGhibWRzWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6Y0dobGNtbGpZV3hFWld4MFlTNXdhR2tnTFQwZ1lXNW5iR1U3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdOdmJuTjBJSEJoYmt4bFpuUWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RpQTlJRzVsZHlCQktDazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ3WVc1TVpXWjBLR1JwYzNSaGJtTmxMQ0J2WW1wbFkzUk5ZWFJ5YVhncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWXVjMlYwUm5KdmJVMWhkSEpwZUVOdmJIVnRiaWh2WW1wbFkzUk5ZWFJ5YVhnc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaTV0ZFd4MGFYQnNlVk5qWVd4aGNpZ3RaR2x6ZEdGdVkyVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1VDJabWMyVjBMbUZrWkNoMktUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCOUtDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHRnVWWEFnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkaUE5SUc1bGR5QkJLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCd1lXNVZjQ2hrYVhOMFlXNWpaU3dnYjJKcVpXTjBUV0YwY21sNEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVjMk55WldWdVUzQmhZMlZRWVc1dWFXNW5JRDA5UFNCMGNuVmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RpNXpaWFJHY205dFRXRjBjbWw0UTI5c2RXMXVLRzlpYW1WamRFMWhkSEpwZUN3Z01TazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFl1YzJWMFJuSnZiVTFoZEhKcGVFTnZiSFZ0YmlodlltcGxZM1JOWVhSeWFYZ3NJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWXVZM0p2YzNOV1pXTjBiM0p6S0hOamIzQmxMbTlpYW1WamRDNTFjQ3dnZGlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMkxtMTFiSFJwY0d4NVUyTmhiR0Z5S0dScGMzUmhibU5sS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGJrOW1abk5sZEM1aFpHUW9kaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdmU2dwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEJoYmlBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J2Wm1aelpYUWdQU0J1WlhjZ1FTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnY0dGdUtHUmxiSFJoV0N3Z1pHVnNkR0ZaS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JsYkdWdFpXNTBJRDBnYzJOdmNHVXVaRzl0Uld4bGJXVnVkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzV2WW1wbFkzUXVhWE5RWlhKemNHVmpkR2wyWlVOaGJXVnlZU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCdmMybDBhVzl1SUQwZ2MyTnZjR1V1YjJKcVpXTjBMbkJ2YzJsMGFXOXVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkQzVqYjNCNUtIQnZjMmwwYVc5dUtTNXpkV0lvYzJOdmNHVXVkR0Z5WjJWMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHRnlaMlYwUkdsemRHRnVZMlVnUFNCdlptWnpaWFF1YkdWdVozUm9LQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwUkdsemRHRnVZMlVnS2owZ1RXRjBhQzUwWVc0b2MyTnZjR1V1YjJKcVpXTjBMbVp2ZGlBdklESWdLaUJOWVhSb0xsQkpJQzhnTVRnd0xqQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGJreGxablFvTWlBcUlHUmxiSFJoV0NBcUlIUmhjbWRsZEVScGMzUmhibU5sSUM4Z1pXeGxiV1Z1ZEM1amJHbGxiblJJWldsbmFIUXNJSE5qYjNCbExtOWlhbVZqZEM1dFlYUnlhWGdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhibFZ3S0RJZ0tpQmtaV3gwWVZrZ0tpQjBZWEpuWlhSRWFYTjBZVzVqWlNBdklHVnNaVzFsYm5RdVkyeHBaVzUwU0dWcFoyaDBMQ0J6WTI5d1pTNXZZbXBsWTNRdWJXRjBjbWw0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MyTnZjR1V1YjJKcVpXTjBMbWx6VDNKMGFHOW5jbUZ3YUdsalEyRnRaWEpoS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1VEdWbWRDaGtaV3gwWVZnZ0tpQW9jMk52Y0dVdWIySnFaV04wTG5KcFoyaDBJQzBnYzJOdmNHVXViMkpxWldOMExteGxablFwSUM4Z2MyTnZjR1V1YjJKcVpXTjBMbnB2YjIwZ0x5QmxiR1Z0Wlc1MExtTnNhV1Z1ZEZkcFpIUm9MQ0J6WTI5d1pTNXZZbXBsWTNRdWJXRjBjbWw0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZVzVWY0Noa1pXeDBZVmtnS2lBb2MyTnZjR1V1YjJKcVpXTjBMblJ2Y0NBdElITmpiM0JsTG05aWFtVmpkQzVpYjNSMGIyMHBJQzhnYzJOdmNHVXViMkpxWldOMExucHZiMjBnTHlCbGJHVnRaVzUwTG1Oc2FXVnVkRWhsYVdkb2RDd2djMk52Y0dVdWIySnFaV04wTG0xaGRISnBlQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWMEZTVGtsT1J6b2dUM0ppYVhSRGIyNTBjbTlzY3k1cWN5QmxibU52ZFc1MFpYSmxaQ0JoYmlCMWJtdHViM2R1SUdOaGJXVnlZU0IwZVhCbElDMGdjR0Z1SUdScGMyRmliR1ZrTGlJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExtVnVZV0pzWlZCaGJpQTlJR1poYkhObE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUgwb0tUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmtiMnhzZVU5MWRDaGtiMnhzZVZOallXeGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNXZZbXBsWTNRdWFYTlFaWEp6Y0dWamRHbDJaVU5oYldWeVlTQjhmQ0J6WTI5d1pTNXZZbXBsWTNRdWFYTlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bElDODlJR1J2Ykd4NVUyTmhiR1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbGRCVWs1SlRrYzZJRTl5WW1sMFEyOXVkSEp2YkhNdWFuTWdaVzVqYjNWdWRHVnlaV1FnWVc0Z2RXNXJibTkzYmlCallXMWxjbUVnZEhsd1pTQXRJR1J2Ykd4NUwzcHZiMjBnWkdsellXSnNaV1F1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzVsYm1GaWJHVmFiMjl0SUQwZ1ptRnNjMlU3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdaRzlzYkhsSmJpaGtiMnhzZVZOallXeGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNXZZbXBsWTNRdWFYTlFaWEp6Y0dWamRHbDJaVU5oYldWeVlTQjhmQ0J6WTI5d1pTNXZZbXBsWTNRdWFYTlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bElDbzlJR1J2Ykd4NVUyTmhiR1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbGRCVWs1SlRrYzZJRTl5WW1sMFEyOXVkSEp2YkhNdWFuTWdaVzVqYjNWdWRHVnlaV1FnWVc0Z2RXNXJibTkzYmlCallXMWxjbUVnZEhsd1pTQXRJR1J2Ykd4NUwzcHZiMjBnWkdsellXSnNaV1F1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzVsYm1GaWJHVmFiMjl0SUQwZ1ptRnNjMlU3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdkWEJrWVhSbFRXOTFjMlZRWVhKaGJXVjBaWEp6S0dWMlpXNTBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYzJOdmNHVXVlbTl2YlZSdlEzVnljMjl5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY0dWeVptOXliVU4xY25OdmNscHZiMjBnUFNCMGNuVmxPd29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5WldOMElEMGdjMk52Y0dVdVpHOXRSV3hsYldWdWRDNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VDQTlJR1YyWlc1MExtTnNhV1Z1ZEZnZ0xTQnlaV04wTG14bFpuUTdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGtnUFNCbGRtVnVkQzVqYkdsbGJuUlpJQzBnY21WamRDNTBiM0E3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhjZ1BTQnlaV04wTG5kcFpIUm9Pd29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JvSUQwZ2NtVmpkQzVvWldsbmFIUTdDaUFnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxMbmdnUFNCNElDOGdkeUFxSURJZ0xTQXhPd29nSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaUzU1SUQwZ0xTaDVJQzhnYUNrZ0tpQXlJQ3NnTVRzS0lDQWdJQ0FnSUNBZ0lDQWdaRzlzYkhsRWFYSmxZM1JwYjI0dWMyVjBLRzF2ZFhObExuZ3NJRzF2ZFhObExua3NJREVwTG5WdWNISnZhbVZqZENoelkyOXdaUzV2WW1wbFkzUXBMbk4xWWloelkyOXdaUzV2WW1wbFkzUXVjRzl6YVhScGIyNHBMbTV2Y20xaGJHbDZaU2dwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCamJHRnRjRVJwYzNSaGJtTmxLR1JwYzNRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndWJXRjRLSE5qYjNCbExtMXBia1JwYzNSaGJtTmxMQ0JOWVhSb0xtMXBiaWh6WTI5d1pTNXRZWGhFYVhOMFlXNWpaU3dnWkdsemRDa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJvWVc1a2JHVk5iM1Z6WlVSdmQyNVNiM1JoZEdVb1pYWmxiblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhSbFUzUmhjblF1YzJWMEtHVjJaVzUwTG1Oc2FXVnVkRmdzSUdWMlpXNTBMbU5zYVdWdWRGa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJvWVc1a2JHVk5iM1Z6WlVSdmQyNUViMnhzZVNobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjFjR1JoZEdWTmIzVnpaVkJoY21GdFpYUmxjbk1vWlhabGJuUXBPd29nSUNBZ0lDQWdJQ0FnSUNCa2IyeHNlVk4wWVhKMExuTmxkQ2hsZG1WdWRDNWpiR2xsYm5SWUxDQmxkbVZ1ZEM1amJHbGxiblJaS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVFc5MWMyVkViM2R1VUdGdUtHVjJaVzUwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEJoYmxOMFlYSjBMbk5sZENobGRtVnVkQzVqYkdsbGJuUllMQ0JsZG1WdWRDNWpiR2xsYm5SWktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFRXOTFjMlZOYjNabFVtOTBZWFJsS0dWMlpXNTBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISnZkR0YwWlVWdVpDNXpaWFFvWlhabGJuUXVZMnhwWlc1MFdDd2daWFpsYm5RdVkyeHBaVzUwV1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMFpVUmxiSFJoTG5OMVlsWmxZM1J2Y25Nb2NtOTBZWFJsUlc1a0xDQnliM1JoZEdWVGRHRnlkQ2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9jMk52Y0dVdWNtOTBZWFJsVTNCbFpXUXBPd29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JsYkdWdFpXNTBJRDBnYzJOdmNHVXVaRzl0Uld4bGJXVnVkRHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtOTBZWFJsVEdWbWRDZ3lJQ29nVFdGMGFDNVFTU0FxSUhKdmRHRjBaVVJsYkhSaExuZ2dMeUJsYkdWdFpXNTBMbU5zYVdWdWRFaGxhV2RvZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMFpWVndLRElnS2lCTllYUm9MbEJKSUNvZ2NtOTBZWFJsUkdWc2RHRXVlU0F2SUdWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY205MFlYUmxVM1JoY25RdVkyOXdlU2h5YjNSaGRHVkZibVFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1MWNHUmhkR1VvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVFc5MWMyVk5iM1psUkc5c2JIa29aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWkc5c2JIbEZibVF1YzJWMEtHVjJaVzUwTG1Oc2FXVnVkRmdzSUdWMlpXNTBMbU5zYVdWdWRGa3BPd29nSUNBZ0lDQWdJQ0FnSUNCa2IyeHNlVVJsYkhSaExuTjFZbFpsWTNSdmNuTW9aRzlzYkhsRmJtUXNJR1J2Ykd4NVUzUmhjblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkc5c2JIbEVaV3gwWVM1NUlENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5c2JIbFBkWFFvWjJWMFdtOXZiVk5qWVd4bEtDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHUnZiR3g1UkdWc2RHRXVlU0E4SURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZiR3g1U1c0b1oyVjBXbTl2YlZOallXeGxLQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdSdmJHeDVVM1JoY25RdVkyOXdlU2hrYjJ4c2VVVnVaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5Wd1pHRjBaU2dwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCb1lXNWtiR1ZOYjNWelpVMXZkbVZRWVc0b1pYWmxiblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1Ulc1a0xuTmxkQ2hsZG1WdWRDNWpiR2xsYm5SWUxDQmxkbVZ1ZEM1amJHbGxiblJaS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1UkdWc2RHRXVjM1ZpVm1WamRHOXljeWh3WVc1RmJtUXNJSEJoYmxOMFlYSjBLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaHpZMjl3WlM1d1lXNVRjR1ZsWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEJoYmlod1lXNUVaV3gwWVM1NExDQndZVzVFWld4MFlTNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NHRnVVM1JoY25RdVkyOXdlU2h3WVc1RmJtUXBPd29nSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzUxY0dSaGRHVW9LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYUdGdVpHeGxUVzkxYzJWWGFHVmxiQ2hsZG1WdWRDa2dld29nSUNBZ0lDQWdJQ0FnSUNCMWNHUmhkR1ZOYjNWelpWQmhjbUZ0WlhSbGNuTW9aWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblF1WkdWc2RHRlpJRHdnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOXNiSGxKYmloblpYUmFiMjl0VTJOaGJHVW9LU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9aWFpsYm5RdVpHVnNkR0ZaSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzlzYkhsUGRYUW9aMlYwV205dmJWTmpZV3hsS0NrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5Wd1pHRjBaU2dwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCb1lXNWtiR1ZMWlhsRWIzZHVLR1YyWlc1MEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVaV1ZrYzFWd1pHRjBaU0E5SUdaaGJITmxPd29nSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdvWlhabGJuUXVZMjlrWlNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJSE5qYjNCbExtdGxlWE11VlZBNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbU4wY214TFpYa2dmSHdnWlhabGJuUXViV1YwWVV0bGVTQjhmQ0JsZG1WdWRDNXphR2xtZEV0bGVTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM1JoZEdWVmNDZ3lJQ29nVFdGMGFDNVFTU0FxSUhOamIzQmxMbkp2ZEdGMFpWTndaV1ZrSUM4Z2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1amJHbGxiblJJWldsbmFIUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoYmlnd0xDQnpZMjl3WlM1clpYbFFZVzVUY0dWbFpDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxaV1J6VlhCa1lYUmxJRDBnZEhKMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnYzJOdmNHVXVhMlY1Y3k1Q1QxUlVUMDA2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MExtTjBjbXhMWlhrZ2ZId2daWFpsYm5RdWJXVjBZVXRsZVNCOGZDQmxkbVZ1ZEM1emFHbG1kRXRsZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIzUmhkR1ZWY0NndE1pQXFJRTFoZEdndVVFa2dLaUJ6WTI5d1pTNXliM1JoZEdWVGNHVmxaQ0F2SUhOamIzQmxMbVJ2YlVWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZVzRvTUN3Z0xYTmpiM0JsTG10bGVWQmhibE53WldWa0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0J6WTI5d1pTNXJaWGx6TGt4RlJsUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjJaVzUwTG1OMGNteExaWGtnZkh3Z1pYWmxiblF1YldWMFlVdGxlU0I4ZkNCbGRtVnVkQzV6YUdsbWRFdGxlU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVk1aV1owS0RJZ0tpQk5ZWFJvTGxCSklDb2djMk52Y0dVdWNtOTBZWFJsVTNCbFpXUWdMeUJ6WTI5d1pTNWtiMjFGYkdWdFpXNTBMbU5zYVdWdWRFaGxhV2RvZENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnVLSE5qYjNCbExtdGxlVkJoYmxOd1pXVmtMQ0F3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WbFpITlZjR1JoZEdVZ1BTQjBjblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQnpZMjl3WlM1clpYbHpMbEpKUjBoVU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGRtVnVkQzVqZEhKc1MyVjVJSHg4SUdWMlpXNTBMbTFsZEdGTFpYa2dmSHdnWlhabGJuUXVjMmhwWm5STFpYa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhSbFRHVm1kQ2d0TWlBcUlFMWhkR2d1VUVrZ0tpQnpZMjl3WlM1eWIzUmhkR1ZUY0dWbFpDQXZJSE5qYjNCbExtUnZiVVZzWlcxbGJuUXVZMnhwWlc1MFNHVnBaMmgwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXNG9MWE5qYjNCbExtdGxlVkJoYmxOd1pXVmtMQ0F3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WbFpITlZjR1JoZEdVZ1BTQjBjblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVaV1ZrYzFWd1pHRjBaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5Wd1pHRjBaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2hoYm1Sc1pWUnZkV05vVTNSaGNuUlNiM1JoZEdVb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdiMmx1ZEdWeWN5NXNaVzVuZEdnZ1BUMDlJREVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKdmRHRjBaVk4wWVhKMExuTmxkQ2h3YjJsdWRHVnljMXN3WFM1d1lXZGxXQ3dnY0c5cGJuUmxjbk5iTUYwdWNHRm5aVmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZUNBOUlEQXVOU0FxSUNod2IybHVkR1Z5YzFzd1hTNXdZV2RsV0NBcklIQnZhVzUwWlhKeld6RmRMbkJoWjJWWUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhrZ1BTQXdMalVnS2lBb2NHOXBiblJsY25OYk1GMHVjR0ZuWlZrZ0t5QndiMmx1ZEdWeWMxc3hYUzV3WVdkbFdTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM1JoZEdWVGRHRnlkQzV6WlhRb2VDd2dlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFZHOTFZMmhUZEdGeWRGQmhiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCdmFXNTBaWEp6TG14bGJtZDBhQ0E5UFQwZ01Ta2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1VTNSaGNuUXVjMlYwS0hCdmFXNTBaWEp6V3pCZExuQmhaMlZZTENCd2IybHVkR1Z5YzFzd1hTNXdZV2RsV1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCNElEMGdNQzQxSUNvZ0tIQnZhVzUwWlhKeld6QmRMbkJoWjJWWUlDc2djRzlwYm5SbGNuTmJNVjB1Y0dGblpWZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VTQTlJREF1TlNBcUlDaHdiMmx1ZEdWeWMxc3dYUzV3WVdkbFdTQXJJSEJ2YVc1MFpYSnpXekZkTG5CaFoyVlpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoYmxOMFlYSjBMbk5sZENoNExDQjVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm9ZVzVrYkdWVWIzVmphRk4wWVhKMFJHOXNiSGtvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUjRJRDBnY0c5cGJuUmxjbk5iTUYwdWNHRm5aVmdnTFNCd2IybHVkR1Z5YzFzeFhTNXdZV2RsV0RzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pIa2dQU0J3YjJsdWRHVnljMXN3WFM1d1lXZGxXU0F0SUhCdmFXNTBaWEp6V3pGZExuQmhaMlZaT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FYTjBZVzVqWlNBOUlFMWhkR2d1YzNGeWRDaGtlQ0FxSUdSNElDc2daSGtnS2lCa2VTazdDaUFnSUNBZ0lDQWdJQ0FnSUdSdmJHeDVVM1JoY25RdWMyVjBLREFzSUdScGMzUmhibU5sS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVkc5MVkyaFRkR0Z5ZEVSdmJHeDVVR0Z1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxXbTl2YlNrZ2FHRnVaR3hsVkc5MVkyaFRkR0Z5ZEVSdmJHeDVLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNWxibUZpYkdWUVlXNHBJR2hoYm1Sc1pWUnZkV05vVTNSaGNuUlFZVzRvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVkc5MVkyaFRkR0Z5ZEVSdmJHeDVVbTkwWVhSbEtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdVpXNWhZbXhsV205dmJTa2dhR0Z1Wkd4bFZHOTFZMmhUZEdGeWRFUnZiR3g1S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzVsYm1GaWJHVlNiM1JoZEdVcElHaGhibVJzWlZSdmRXTm9VM1JoY25SU2IzUmhkR1VvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVkc5MVkyaE5iM1psVW05MFlYUmxLR1YyWlc1MEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdiMmx1ZEdWeWN5NXNaVzVuZEdnZ1BUMGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205MFlYUmxSVzVrTG5ObGRDaGxkbVZ1ZEM1d1lXZGxXQ3dnWlhabGJuUXVjR0ZuWlZrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NHOXphWFJwYjI0Z1BTQm5aWFJUWldOdmJtUlFiMmx1ZEdWeVVHOXphWFJwYjI0b1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdlQ0E5SURBdU5TQXFJQ2hsZG1WdWRDNXdZV2RsV0NBcklIQnZjMmwwYVc5dUxuZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VTQTlJREF1TlNBcUlDaGxkbVZ1ZEM1d1lXZGxXU0FySUhCdmMybDBhVzl1TG5rcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOTBZWFJsUlc1a0xuTmxkQ2g0TENCNUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnliM1JoZEdWRVpXeDBZUzV6ZFdKV1pXTjBiM0p6S0hKdmRHRjBaVVZ1WkN3Z2NtOTBZWFJsVTNSaGNuUXBMbTExYkhScGNHeDVVMk5oYkdGeUtITmpiM0JsTG5KdmRHRjBaVk53WldWa0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaV3hsYldWdWRDQTlJSE5qYjNCbExtUnZiVVZzWlcxbGJuUTdDaUFnSUNBZ0lDQWdJQ0FnSUhKdmRHRjBaVXhsWm5Rb01pQXFJRTFoZEdndVVFa2dLaUJ5YjNSaGRHVkVaV3gwWVM1NElDOGdaV3hsYldWdWRDNWpiR2xsYm5SSVpXbG5hSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnliM1JoZEdWVmNDZ3lJQ29nVFdGMGFDNVFTU0FxSUhKdmRHRjBaVVJsYkhSaExua2dMeUJsYkdWdFpXNTBMbU5zYVdWdWRFaGxhV2RvZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMFpWTjBZWEowTG1OdmNIa29jbTkwWVhSbFJXNWtLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYUdGdVpHeGxWRzkxWTJoTmIzWmxVR0Z1S0dWMlpXNTBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3YjJsdWRHVnljeTVzWlc1bmRHZ2dQVDA5SURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhia1Z1WkM1elpYUW9aWFpsYm5RdWNHRm5aVmdzSUdWMlpXNTBMbkJoWjJWWktUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnZjMmwwYVc5dUlEMGdaMlYwVTJWamIyNWtVRzlwYm5SbGNsQnZjMmwwYVc5dUtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGdnUFNBd0xqVWdLaUFvWlhabGJuUXVjR0ZuWlZnZ0t5QndiM05wZEdsdmJpNTRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIa2dQU0F3TGpVZ0tpQW9aWFpsYm5RdWNHRm5aVmtnS3lCd2IzTnBkR2x2Ymk1NUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhia1Z1WkM1elpYUW9lQ3dnZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NHRnVSR1ZzZEdFdWMzVmlWbVZqZEc5eWN5aHdZVzVGYm1Rc0lIQmhibE4wWVhKMEtTNXRkV3gwYVhCc2VWTmpZV3hoY2loelkyOXdaUzV3WVc1VGNHVmxaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIQmhiaWh3WVc1RVpXeDBZUzU0TENCd1lXNUVaV3gwWVM1NUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY0dGdVUzUmhjblF1WTI5d2VTaHdZVzVGYm1RcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm9ZVzVrYkdWVWIzVmphRTF2ZG1WRWIyeHNlU2hsZG1WdWRDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3YjNOcGRHbHZiaUE5SUdkbGRGTmxZMjl1WkZCdmFXNTBaWEpRYjNOcGRHbHZiaWhsZG1WdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1I0SUQwZ1pYWmxiblF1Y0dGblpWZ2dMU0J3YjNOcGRHbHZiaTU0T3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa2VTQTlJR1YyWlc1MExuQmhaMlZaSUMwZ2NHOXphWFJwYjI0dWVUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaR2x6ZEdGdVkyVWdQU0JOWVhSb0xuTnhjblFvWkhnZ0tpQmtlQ0FySUdSNUlDb2daSGtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtiMnhzZVVWdVpDNXpaWFFvTUN3Z1pHbHpkR0Z1WTJVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JrYjJ4c2VVUmxiSFJoTG5ObGRDZ3dMQ0JOWVhSb0xuQnZkeWhrYjJ4c2VVVnVaQzU1SUM4Z1pHOXNiSGxUZEdGeWRDNTVMQ0J6WTI5d1pTNTZiMjl0VTNCbFpXUXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHOXNiSGxQZFhRb1pHOXNiSGxFWld4MFlTNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHOXNiSGxUZEdGeWRDNWpiM0I1S0dSdmJHeDVSVzVrS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVkc5MVkyaE5iM1psUkc5c2JIbFFZVzRvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWlZwdmIyMHBJR2hoYm1Sc1pWUnZkV05vVFc5MlpVUnZiR3g1S0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWlZCaGJpa2dhR0Z1Wkd4bFZHOTFZMmhOYjNabFVHRnVLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFZHOTFZMmhOYjNabFJHOXNiSGxTYjNSaGRHVW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVnB2YjIwcElHaGhibVJzWlZSdmRXTm9UVzkyWlVSdmJHeDVLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVkp2ZEdGMFpTa2dhR0Z1Wkd4bFZHOTFZMmhOYjNabFVtOTBZWFJsS0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYjI1UWIybHVkR1Z5Ukc5M2JpaGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxaQ0E5UFQwZ1ptRnNjMlVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ2YVc1MFpYSnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1elpYUlFiMmx1ZEdWeVEyRndkSFZ5WlNobGRtVnVkQzV3YjJsdWRHVnlTV1FwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVaRzl0Uld4bGJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p3YjJsdWRHVnliVzkyWlNJc0lHOXVVRzlwYm5SbGNrMXZkbVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVaRzl0Uld4bGJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p3YjJsdWRHVnlkWEFpTENCdmJsQnZhVzUwWlhKVmNDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdZV1JrVUc5cGJuUmxjaWhsZG1WdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxkbVZ1ZEM1d2IybHVkR1Z5Vkhsd1pTQTlQVDBnSW5SdmRXTm9JaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1VWIzVmphRk4wWVhKMEtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVUVzkxYzJWRWIzZHVLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdmJsQnZhVzUwWlhKTmIzWmxLR1YyWlc1MEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZrSUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdselgybHVYM05qWlc1bEtHVjJaVzUwS1NrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhabGJuUXVjRzlwYm5SbGNsUjVjR1VnUFQwOUlDSjBiM1ZqYUNJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVWRzkxWTJoTmIzWmxLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVk5iM1psS0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnZibEJ2YVc1MFpYSlZjQ2hsZG1WdWRDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpXMXZkbVZRYjJsdWRHVnlLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnZhVzUwWlhKekxteGxibWQwYUNBOVBUMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVaRzl0Uld4bGJXVnVkQzV5Wld4bFlYTmxVRzlwYm5SbGNrTmhjSFIxY21Vb1pYWmxiblF1Y0c5cGJuUmxja2xrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbVJ2YlVWc1pXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWNHOXBiblJsY20xdmRtVWlMQ0J2YmxCdmFXNTBaWEpOYjNabEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG1SdmJVVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljRzlwYm5SbGNuVndJaXdnYjI1UWIybHVkR1Z5VlhBcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG1ScGMzQmhkR05vUlhabGJuUW9YMlZ1WkVWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCVFZFRlVSUzVPVDA1Rk93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnZiazF2ZFhObFJHOTNiaWhsZG1WdWRDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiVzkxYzJWQlkzUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNobGRtVnVkQzVpZFhSMGIyNHBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBd09nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF2ZFhObFFXTjBhVzl1SUQwZ2MyTnZjR1V1Ylc5MWMyVkNkWFIwYjI1ekxreEZSbFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElERTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkJZM1JwYjI0Z1BTQnpZMjl3WlM1dGIzVnpaVUoxZEhSdmJuTXVUVWxFUkV4Rk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F5T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUVdOMGFXOXVJRDBnYzJOdmNHVXViVzkxYzJWQ2RYUjBiMjV6TGxKSlIwaFVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpVRmpkR2x2YmlBOUlDMHhPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaHRiM1Z6WlVGamRHbHZiaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElIcDRMa1JQVEV4Wk9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzVsYm1GaWJHVmFiMjl0SUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlUxdmRYTmxSRzkzYmtSdmJHeDVLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJRk5VUVZSRkxrUlBURXhaT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQjZlQzVTVDFSQlZFVTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjJaVzUwTG1OMGNteExaWGtnZkh3Z1pYWmxiblF1YldWMFlVdGxlU0I4ZkNCbGRtVnVkQzV6YUdsbWRFdGxlU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxVR0Z1SUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2JHVk5iM1Z6WlVSdmQyNVFZVzRvWlhabGJuUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlGTlVRVlJGTGxCQlRqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFVtOTBZWFJsSUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2JHVk5iM1Z6WlVSdmQyNVNiM1JoZEdVb1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJRk5VUVZSRkxsSlBWRUZVUlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUhwNExsQkJUam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdVkzUnliRXRsZVNCOGZDQmxkbVZ1ZEM1dFpYUmhTMlY1SUh4OElHVjJaVzUwTG5Ob2FXWjBTMlY1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZTYjNSaGRHVWdQVDA5SUdaaGJITmxLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlUxdmRYTmxSRzkzYmxKdmRHRjBaU2hsZG1WdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1UxUkJWRVV1VWs5VVFWUkZPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzVsYm1GaWJHVlFZVzRnUFQwOUlHWmhiSE5sS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pVMXZkWE5sUkc5M2JsQmhiaWhsZG1WdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1UxUkJWRVV1VUVGT093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVWdQU0JUVkVGVVJTNU9UMDVGT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlNBaFBUMGdVMVJCVkVVdVRrOU9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVaR2x6Y0dGMFkyaEZkbVZ1ZENoZmMzUmhjblJGZG1WdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2IyNU5iM1Z6WlUxdmRtVW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9LSE4wWVhSbEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVTFSQlZFVXVVazlVUVZSRk9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzVsYm1GaWJHVlNiM1JoZEdVZ1BUMDlJR1poYkhObEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFRXOTFjMlZOYjNabFVtOTBZWFJsS0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1UxUkJWRVV1UkU5TVRGazZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVnB2YjIwZ1BUMDlJR1poYkhObEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFRXOTFjMlZOYjNabFJHOXNiSGtvWlhabGJuUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCVFZFRlVSUzVRUVU0NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamIzQmxMbVZ1WVdKc1pWQmhiaUE5UFQwZ1ptRnNjMlVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZOYjNWelpVMXZkbVZRWVc0b1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRzl1VFc5MWMyVlhhR1ZsYkNobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFpDQTlQVDBnWm1Gc2MyVWdmSHdnYzJOdmNHVXVaVzVoWW14bFdtOXZiU0E5UFQwZ1ptRnNjMlVnZkh3Z2MzUmhkR1VnSVQwOUlGTlVRVlJGTGs1UFRrVWdmSHdnSVdselgybHVYM05qWlc1bEtHVjJaVzUwS1NrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1a2FYTndZWFJqYUVWMlpXNTBLRjl6ZEdGeWRFVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFRXOTFjMlZYYUdWbGJDaGxkbVZ1ZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExtUnBjM0JoZEdOb1JYWmxiblFvWDJWdVpFVjJaVzUwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2IyNUxaWGxFYjNkdUtHVjJaVzUwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzVsYm1GaWJHVmtJRDA5UFNCbVlXeHpaU0I4ZkNCelkyOXdaUzVsYm1GaWJHVlFZVzRnUFQwOUlHWmhiSE5sS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlV0bGVVUnZkMjRvWlhabGJuUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ2YmxSdmRXTm9VM1JoY25Rb1pYWmxiblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkSEpoWTJ0UWIybHVkR1Z5S0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0hCdmFXNTBaWEp6TG14bGJtZDBhQ2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElERTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9LSE5qYjNCbExuUnZkV05vWlhNdVQwNUZLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCV2VDNVNUMVJCVkVVNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFVtOTBZWFJsSUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVkc5MVkyaFRkR0Z5ZEZKdmRHRjBaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCVFZFRlVSUzVVVDFWRFNGOVNUMVJCVkVVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQldlQzVRUVU0NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFVHRnVJRDA5UFNCbVlXeHpaU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxWRzkxWTJoVGRHRnlkRkJoYmlncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQlRWRUZVUlM1VVQxVkRTRjlRUVU0N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYUmxJRDBnVTFSQlZFVXVUazlPUlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0tITmpiM0JsTG5SdmRXTm9aWE11VkZkUEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JXZUM1RVQweE1XVjlRUVU0NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFdtOXZiU0E5UFQwZ1ptRnNjMlVnSmlZZ2MyTnZjR1V1Wlc1aFlteGxVR0Z1SUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVkc5MVkyaFRkR0Z5ZEVSdmJHeDVVR0Z1S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlGTlVRVlJGTGxSUFZVTklYMFJQVEV4WlgxQkJUanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZaNExrUlBURXhaWDFKUFZFRlVSVG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZhYjI5dElEMDlQU0JtWVd4elpTQW1KaUJ6WTI5d1pTNWxibUZpYkdWU2IzUmhkR1VnUFQwOUlHWmhiSE5sS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZVYjNWamFGTjBZWEowUkc5c2JIbFNiM1JoZEdVb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdVMVJCVkVVdVZFOVZRMGhmUkU5TVRGbGZVazlVUVZSRk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUZOVVFWUkZMazVQVGtVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJRk5VUVZSRkxrNVBUa1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBZWFJsSUNFOVBTQlRWRUZVUlM1T1QwNUZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNWthWE53WVhSamFFVjJaVzUwS0Y5emRHRnlkRVYyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdmJsUnZkV05vVFc5MlpTaGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwY21GamExQnZhVzUwWlhJb1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnb2MzUmhkR1VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlRWRUZVUlM1VVQxVkRTRjlTVDFSQlZFVTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVkp2ZEdGMFpTQTlQVDBnWm1Gc2MyVXBJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2JHVlViM1ZqYUUxdmRtVlNiM1JoZEdVb1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5Wd1pHRjBaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlRWRUZVUlM1VVQxVkRTRjlRUVU0NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamIzQmxMbVZ1WVdKc1pWQmhiaUE5UFQwZ1ptRnNjMlVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZVYjNWamFFMXZkbVZRWVc0b1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5Wd1pHRjBaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlRWRUZVUlM1VVQxVkRTRjlFVDB4TVdWOVFRVTQ2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWlZwdmIyMGdQVDA5SUdaaGJITmxJQ1ltSUhOamIzQmxMbVZ1WVdKc1pWQmhiaUE5UFQwZ1ptRnNjMlVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZVYjNWamFFMXZkbVZFYjJ4c2VWQmhiaWhsZG1WdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVkWEJrWVhSbEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZOVVFWUkZMbFJQVlVOSVgwUlBURXhaWDFKUFZFRlVSVG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdVpXNWhZbXhsV205dmJTQTlQVDBnWm1Gc2MyVWdKaVlnYzJOdmNHVXVaVzVoWW14bFVtOTBZWFJsSUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlZSdmRXTm9UVzkyWlVSdmJHeDVVbTkwWVhSbEtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1MWNHUmhkR1VvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCVFZFRlVSUzVPVDA1Rk93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUc5dVEyOXVkR1Y0ZEUxbGJuVW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaV1FnUFQwOUlHWmhiSE5sS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdGa1pGQnZhVzUwWlhJb1pYWmxiblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjRzlwYm5SbGNuTXVjSFZ6YUNobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhKbGJXOTJaVkJ2YVc1MFpYSW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSEJ2YVc1MFpYSlFiM05wZEdsdmJuTmJaWFpsYm5RdWNHOXBiblJsY2tsa1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhCdmFXNTBaWEp6TG14bGJtZDBhRHNnYVNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3YjJsdWRHVnljMXRwWFM1d2IybHVkR1Z5U1dRZ1BUMGdaWFpsYm5RdWNHOXBiblJsY2tsa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUmxjbk11YzNCc2FXTmxLR2tzSURFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCMGNtRmphMUJ2YVc1MFpYSW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQnZjMmwwYVc5dUlEMGdjRzlwYm5SbGNsQnZjMmwwYVc5dWMxdGxkbVZ1ZEM1d2IybHVkR1Z5U1dSZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHOXphWFJwYjI0Z1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjRnUFNCdVpYY2dXaWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUmxjbEJ2YzJsMGFXOXVjMXRsZG1WdWRDNXdiMmx1ZEdWeVNXUmRJRDBnY0c5emFYUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjR1YzJWMEtHVjJaVzUwTG5CaFoyVllMQ0JsZG1WdWRDNXdZV2RsV1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHZGxkRk5sWTI5dVpGQnZhVzUwWlhKUWIzTnBkR2x2YmlobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2IybHVkR1Z5SUQwZ1pYWmxiblF1Y0c5cGJuUmxja2xrSUQwOVBTQndiMmx1ZEdWeWMxc3dYUzV3YjJsdWRHVnlTV1FnUHlCd2IybHVkR1Z5YzFzeFhTQTZJSEJ2YVc1MFpYSnpXekJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHOXBiblJsY2xCdmMybDBhVzl1YzF0d2IybHVkR1Z5TG5CdmFXNTBaWEpKWkYwN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lITmpiM0JsTG1SdmJVVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaVkyOXVkR1Y0ZEcxbGJuVWlMQ0J2YmtOdmJuUmxlSFJOWlc1MUtUc0tJQ0FnSUNBZ0lDQnpZMjl3WlM1a2IyMUZiR1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0luQnZhVzUwWlhKa2IzZHVJaXdnYjI1UWIybHVkR1Z5Ukc5M2JpazdDaUFnSUNBZ0lDQWdjMk52Y0dVdVpHOXRSV3hsYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSndiMmx1ZEdWeVkyRnVZMlZzSWl3Z2IyNVFiMmx1ZEdWeVZYQXBPd29nSUNBZ0lDQWdJSE5qYjNCbExtUnZiVVZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2lkMmhsWld3aUxDQnZiazF2ZFhObFYyaGxaV3dzSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjR0Z6YzJsMlpUb2dabUZzYzJVS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaU2dwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUdWMlpXNTBjekoxYm1sMGJHVnpjeWh6WTNKbFpXNHNJR1YyWlc1MEtTQjdDaUFnSUNCamIyNXpkQ0I3SUdOaGJuWmhjeUFzSUhkcGJuTmpZV3hsSUN3Z2NtVnVaR1Z5WlhJZ0lIMGdQU0J6WTNKbFpXNDdDaUFnSUNCamIyNXpkQ0J5WldOMElEMGdZMkZ1ZG1GekxtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwT3dvZ0lDQWdZMjl1YzNRZ2VDQTlJQ2hsZG1WdWRDNWpiR2xsYm5SWUlDMGdjbVZqZEM1c1pXWjBLU0F2SUhkcGJuTmpZV3hsT3dvZ0lDQWdZMjl1YzNRZ2VTQTlJQ2hsZG1WdWRDNWpiR2xsYm5SWklDMGdjbVZqZEM1MGIzQXBJQzhnZDJsdWMyTmhiR1U3Q2lBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lIZ3NDaUFnSUNBZ0lDQWdjbVZ1WkdWeVpYSXVYMmhsYVdkb2RDQXRJSGtLSUNBZ0lGMDdDbjBLWm5WdVkzUnBiMjRnU1dSbGJuUnBkSGswZURRb0tTQjdDaUFnSUNCeVpYUjFjbTRnYm1WM0lIcGxLQ2s3Q24wS1puVnVZM1JwYjI0Z2FXNWZjMk5sYm1Vb2MyTmxibVVzSUcxdmRYTmxYMlYyWlc1MEtTQjdDaUFnSUNCamIyNXpkQ0JiZUN3Z2VWMGdQU0JsZG1WdWRITXlkVzVwZEd4bGMzTW9jMk5sYm1VdWMyTnlaV1Z1TENCdGIzVnpaVjlsZG1WdWRDazdDaUFnSUNCamIyNXpkQ0JiYzNnc0lITjVMQ0J6ZHl3Z2MyaGRJRDBnYzJObGJtVXVkbWxsZDNCdmNuUXVkbUZzZFdVN0NpQWdJQ0J5WlhSMWNtNGdlQ0ErUFNCemVDQW1KaUI0SUR3Z2MzZ2dLeUJ6ZHlBbUppQjVJRDQ5SUhONUlDWW1JSGtnUENCemVTQXJJSE5vT3dwOUNtWjFibU4wYVc5dUlHRjBkR0ZqYUY4elpGOWpZVzFsY21Fb1kyRnVkbUZ6TENCdFlXdHBaVjlqWVcxbGNtRXNJR05oYlROa0xDQnNhV2RvZEY5a2FYSXNJSE5qWlc1bEtTQjdDaUFnSUNCcFppQW9ZMkZ0TTJRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lIMEtJQ0FnSUdOdmJuTjBJRnQzTENCb1hTQTlJRzFoYTJsbFgyTmhiV1Z5WVM1eVpYTnZiSFYwYVc5dUxuWmhiSFZsT3dvZ0lDQWdZMjl1YzNRZ1kyRnRaWEpoSUQwZ2JtVjNJSGwwS0dOaGJUTmtMbVp2ZGk1MllXeDFaU3dnZHlBdklHZ3NJREF1TURFc0lERXdNQzR3S1RzS0lDQWdJR052Ym5OMElHTmxiblJsY2lBOUlHNWxkeUJCS0M0dUxtTmhiVE5rTG14dmIydGhkQzUyWVd4MVpTazdDaUFnSUNCallXMWxjbUV1ZFhBZ1BTQnVaWGNnUVNndUxpNWpZVzB6WkM1MWNIWmxZM1J2Y2k1MllXeDFaU2s3Q2lBZ0lDQmpZVzFsY21FdWNHOXphWFJwYjI0dWMyVjBLQzR1TG1OaGJUTmtMbVY1WlhCdmMybDBhVzl1TG5aaGJIVmxLVHNLSUNBZ0lHTmhiV1Z5WVM1c2IyOXJRWFFvWTJWdWRHVnlLVHNLSUNBZ0lHTnZibk4wSUhWelpWOXZjbUpwZEY5allXMGdQU0FvS1QwK0lTaEtVMU5sY25abExtTmhibDl6Wlc1a1gzUnZYMnAxYkdsaElDWW1JRXBUVTJWeWRtVXVZMkZ1WDNObGJtUmZkRzlmYW5Wc2FXRW9LU2s3Q2lBZ0lDQmpiMjV6ZENCamIyNTBjbTlzY3lBOUlHNWxkeUJQY21KcGRFTnZiblJ5YjJ4ektHTmhiV1Z5WVN3Z1kyRnVkbUZ6TENCMWMyVmZiM0ppYVhSZlkyRnRMQ0FvWlNrOVBtbHVYM05qWlc1bEtITmpaVzVsTENCbEtTazdDaUFnSUNCamIyNTBjbTlzY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKamFHRnVaMlVpTENBb1pTazlQbnNLSUNBZ0lDQWdJQ0JqYjI1emRDQjJhV1YzSUQwZ1kyRnRaWEpoTG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlRzS0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y205cVpXTjBhVzl1SUQwZ1kyRnRaWEpoTG5CeWIycGxZM1JwYjI1TllYUnlhWGc3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdXM2RwWkhSb0xDQm9aV2xuYUhSZElEMGdZMkZ0TTJRdWNtVnpiMngxZEdsdmJpNTJZV3gxWlRzS0lDQWdJQ0FnSUNCamIyNXpkQ0JiZUN3Z2VTd2dlbDBnUFNCallXMWxjbUV1Y0c5emFYUnBiMjQ3Q2lBZ0lDQWdJQ0FnWTJGdFpYSmhMbUZ6Y0dWamRDQTlJSGRwWkhSb0lDOGdhR1ZwWjJoME93b2dJQ0FnSUNBZ0lHTmhiV1Z5WVM1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRLQ2s3Q2lBZ0lDQWdJQ0FnWTJGdFpYSmhMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLQ2s3Q2lBZ0lDQWdJQ0FnYldGcmFXVmZZMkZ0WlhKaExuVndaR0YwWlY5dFlYUnlhV05sY3loMmFXVjNMbVZzWlcxbGJuUnpMQ0J3Y205cVpXTjBhVzl1TG1Wc1pXMWxiblJ6TENCYkNpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUUtJQ0FnSUNBZ0lDQmRMQ0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lIZ3NDaUFnSUNBZ0lDQWdJQ0FnSUhrc0NpQWdJQ0FnSUNBZ0lDQWdJSG9LSUNBZ0lDQWdJQ0JkS1RzS0lDQWdJQ0FnSUNCdFlXdHBaVjlqWVcxbGNtRXVkWEJrWVhSbFgyeHBaMmgwWDJScGNpaHNhV2RvZEY5a2FYSXVkbUZzZFdVcE93b2dJQ0FnZlNrN0NuMEtablZ1WTNScGIyNGdiWFZzS0dFc0lHSXBJSHNLSUNBZ0lISmxkSFZ5YmlCaUxtTnNiMjVsS0NrdWJYVnNkR2x3Ykhrb1lTazdDbjBLWm5WdVkzUnBiMjRnYjNKMGFHOW5jbUZ3YUdsamNISnZhbVZqZEdsdmJpaHNaV1owTENCeWFXZG9kQ3dnWW05MGRHOXRMQ0IwYjNBc0lIcHVaV0Z5TENCNlptRnlLU0I3Q2lBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lESWdMeUFvY21sbmFIUWdMU0JzWldaMEtTd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lESWdMeUFvZEc5d0lDMGdZbTkwZEc5dEtTd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDMHlJQzhnS0hwbVlYSWdMU0I2Ym1WaGNpa3NDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0F0S0hKcFoyaDBJQ3NnYkdWbWRDa2dMeUFvY21sbmFIUWdMU0JzWldaMEtTd0tJQ0FnSUNBZ0lDQXRLSFJ2Y0NBcklHSnZkSFJ2YlNrZ0x5QW9kRzl3SUMwZ1ltOTBkRzl0S1N3S0lDQWdJQ0FnSUNBdEtIcG1ZWElnS3lCNmJtVmhjaWtnTHlBb2VtWmhjaUF0SUhwdVpXRnlLU3dLSUNBZ0lDQWdJQ0F4Q2lBZ0lDQmRPd3A5Q21aMWJtTjBhVzl1SUhCcGVHVnNYM053WVdObFgybHVkbVZ5YzJVb2R5d2dhQ3dnYm1WaGNpa2dld29nSUNBZ2NtVjBkWEp1SUZzS0lDQWdJQ0FnSUNBd0xqVWdLaUIzTEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUM0MUlDb2dhQ3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJRzVsWVhJc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMalVnS2lCM0xBb2dJQ0FnSUNBZ0lEQXVOU0FxSUdnc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXhDaUFnSUNCZE93cDlDbVoxYm1OMGFXOXVJSEpsYkdGMGFYWmxYM053WVdObEtDa2dld29nSUNBZ1kyOXVjM1FnY21Wc1lYUnBkbVVnUFNCSlpHVnVkR2wwZVRSNE5DZ3BPd29nSUNBZ2NtVnNZWFJwZG1VdVpuSnZiVUZ5Y21GNUtGc0tJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdNaXdLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURFS0lDQWdJRjBwT3dvZ0lDQWdjbVYwZFhKdUlISmxiR0YwYVhabE93cDlDbU5zWVhOeklFMWhhMmxsUTJGdFpYSmhJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NTJhV1YzSUQwZ2JtVjNJRkIxS0Vsa1pXNTBhWFI1TkhnMEtDa3BPd29nSUNBZ0lDQWdJSFJvYVhNdWNISnZhbVZqZEdsdmJpQTlJRzVsZHlCUWRTaEpaR1Z1ZEdsMGVUUjROQ2dwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjJwbFkzUnBiMjUyYVdWM0lEMGdibVYzSUZCMUtFbGtaVzUwYVhSNU5IZzBLQ2twT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4ZmMzQmhZMlVnUFNCdVpYY2dVSFVvU1dSbGJuUnBkSGswZURRb0tTazdDaUFnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRjl6Y0dGalpWOXBiblpsY25ObElEMGdibVYzSUZCMUtFbGtaVzUwYVhSNU5IZzBLQ2twT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2YW1WamRHbHZiblpwWlhkZmFXNTJaWEp6WlNBOUlHNWxkeUJRZFNoSlpHVnVkR2wwZVRSNE5DZ3BLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmxiR0YwYVhabFgzTndZV05sSUQwZ2JtVjNJRkIxS0hKbGJHRjBhWFpsWDNOd1lXTmxLQ2twT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjbVZzWVhScGRtVmZhVzUyWlhKelpTQTlJRzVsZHlCUWRTaHlaV3hoZEdsMlpWOXpjR0ZqWlNncExtbHVkbVZ5ZENncEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1Oc2FYQmZjM0JoWTJVZ1BTQnVaWGNnVUhVb1NXUmxiblJwZEhrMGVEUW9LU2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NXlaWE52YkhWMGFXOXVJRDBnYm1WM0lGQjFLRzVsZHlCYUtDa3BPd29nSUNBZ0lDQWdJSFJvYVhNdVpYbGxjRzl6YVhScGIyNGdQU0J1WlhjZ1VIVW9ibVYzSUVFb0tTazdDaUFnSUNBZ0lDQWdkR2hwY3k1d2NtVndjbTlxWldOMGFXOXVjeUE5SUh0OU93b2dJQ0FnSUNBZ0lIUm9hWE11YkdsbmFIUmZaR2x5WldOMGFXOXVJRDBnYm1WM0lGQjFLRzVsZHlCQktDMHhMQ0F0TVN3Z0xURXBMbTV2Y20xaGJHbDZaU2dwS1RzS0lDQWdJSDBLSUNBZ0lHTmhiR04xYkdGMFpWOXRZWFJ5YVdObGN5Z3BJSHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmJkeXdnYUYwZ1BTQjBhR2x6TG5KbGMyOXNkWFJwYjI0dWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdibVZoY21Oc2FYQWdQU0F0TVRCZk1EQXdPd29nSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hmYzNCaFkyVXVkbUZzZFdVdVpuSnZiVUZ5Y21GNUtHOXlkR2h2WjNKaGNHaHBZM0J5YjJwbFkzUnBiMjRvTUN3Z2R5d2dNQ3dnYUN3Z2JtVmhjbU5zYVhBc0lERXdYekF3TUNrcE93b2dJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeGZjM0JoWTJWZmFXNTJaWEp6WlM1MllXeDFaUzVtY205dFFYSnlZWGtvY0dsNFpXeGZjM0JoWTJWZmFXNTJaWEp6WlNoM0xDQm9MQ0J1WldGeVkyeHBjQ2twT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ5YjJwZmRtbGxkeUE5SUcxMWJDaDBhR2x6TG5acFpYY3VkbUZzZFdVc0lIUm9hWE11Y0hKdmFtVmpkR2x2Ymk1MllXeDFaU2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NXdjbTlxWldOMGFXOXVkbWxsZHk1MllXeDFaU0E5SUhCeWIycGZkbWxsZHpzS0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjJwbFkzUnBiMjUyYVdWM1gybHVkbVZ5YzJVdWRtRnNkV1VnUFNCd2NtOXFYM1pwWlhjdVkyeHZibVVvS1M1cGJuWmxjblFvS1RzS0lDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aDBhR2x6TG5CeVpYQnliMnBsWTNScGIyNXpLUzVtYjNKRllXTm9LQ2hyWlhrcFBUNTdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRnR6Y0dGalpTd2diV0Z5YTJWeWMzQmhZMlZkSUQwZ2EyVjVMbk53YkdsMEtDSXNJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKbGNISnZhbVZqZEdsdmJuTmJhMlY1WFM1MllXeDFaU0E5SUhSb2FYTXVZMkZzWTNWc1lYUmxYM0J5WlhCeWIycGxZM1JwYjI1ZmJXRjBjbWw0S0hOd1lXTmxMQ0J0WVhKclpYSnpjR0ZqWlNrN0NpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVmZiV0YwY21salpYTW9kbWxsZHl3Z2NISnZhbVZqZEdsdmJpd2djbVZ6YjJ4MWRHbHZiaXdnWlhsbGNHOXpLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NTJhV1YzTG5aaGJIVmxMbVp5YjIxQmNuSmhlU2gyYVdWM0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIycGxZM1JwYjI0dWRtRnNkV1V1Wm5KdmJVRnljbUY1S0hCeWIycGxZM1JwYjI0cE93b2dJQ0FnSUNBZ0lIUm9hWE11Y21WemIyeDFkR2x2Ymk1MllXeDFaUzVtY205dFFYSnlZWGtvY21WemIyeDFkR2x2YmlrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVsZVdWd2IzTnBkR2x2Ymk1MllXeDFaUzVtY205dFFYSnlZWGtvWlhsbGNHOXpLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtTmhiR04xYkdGMFpWOXRZWFJ5YVdObGN5Z3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpWOXNhV2RvZEY5a2FYSW9iR2xuYUhSZlpHbHlLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdWQ0E5SUc1bGR5QklaU2dwTG5ObGRFWnliMjFOWVhSeWFYZzBLSFJvYVhNdWRtbGxkeTUyWVd4MVpTa3VhVzUyWlhKMEtDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtVjNYMlJwY2lBOUlHNWxkeUJCS0NrdVpuSnZiVUZ5Y21GNUtHeHBaMmgwWDJScGNpazdDaUFnSUNBZ0lDQWdibVYzWDJScGNpNWhjSEJzZVUxaGRISnBlRE1vVkNrdWJtOXliV0ZzYVhwbEtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1c2FXZG9kRjlrYVhKbFkzUnBiMjR1ZG1Gc2RXVWdQU0J1WlhkZlpHbHlPd29nSUNBZ2ZRb2dJQ0FnWTJ4cGNGOTBiMTl6Y0dGalpTaHpjR0ZqWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2h6Y0dGalpTQTlQVDBnSW1SaGRHRWlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJ5YjJwbFkzUnBiMjUyYVdWM1gybHVkbVZ5YzJVdWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoemNHRmpaU0E5UFQwZ0luQnBlR1ZzSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2FYaGxiRjl6Y0dGalpWOXBiblpsY25ObExuWmhiSFZsT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MzQmhZMlVnUFQwOUlDSnlaV3hoZEdsMlpTSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZzWVhScGRtVmZhVzUyWlhKelpTNTJZV3gxWlRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITndZV05sSUQwOVBTQWlZMnhwY0NJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeHBjRjl6Y0dGalpTNTJZV3gxWlRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lGTndZV05sSUNSN2MzQmhZMlY5SUc1dmRDQnlaV052WjI1cGVtVmtZQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2MzQmhZMlZmZEc5ZlkyeHBjQ2h6Y0dGalpTa2dld29nSUNBZ0lDQWdJR2xtSUNoemNHRmpaU0E5UFQwZ0ltUmhkR0VpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIycGxZM1JwYjI1MmFXVjNMblpoYkhWbE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM0JoWTJVZ1BUMDlJQ0p3YVhobGJDSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR2w0Wld4ZmMzQmhZMlV1ZG1Gc2RXVTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6Y0dGalpTQTlQVDBnSW5KbGJHRjBhWFpsSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXeGhkR2wyWlY5emNHRmpaUzUyWVd4MVpUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE53WVdObElEMDlQU0FpWTJ4cGNDSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnhwY0Y5emNHRmpaUzUyWVd4MVpUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRk53WVdObElDUjdjM0JoWTJWOUlHNXZkQ0J5WldOdloyNXBlbVZrWUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdZMkZzWTNWc1lYUmxYM0J5WlhCeWIycGxZM1JwYjI1ZmJXRjBjbWw0S0hOd1lXTmxMQ0J0WVhKclpYSnpjR0ZqWlNrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdOd0lEMGdkR2hwY3k1amJHbHdYM1J2WDNOd1lXTmxLRzFoY210bGNuTndZV05sS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J6WXlBOUlIUm9hWE11YzNCaFkyVmZkRzlmWTJ4cGNDaHpjR0ZqWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxMWJDaHpZeXdnWTNBcE93b2dJQ0FnZlFvZ0lDQWdjSEpsY0hKdmFtVmpkR2x2Ymw5dFlYUnlhWGdvYzNCaFkyVXNJRzFoY210bGNuTndZV05sS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNUlEMGdXd29nSUNBZ0lDQWdJQ0FnSUNCemNHRmpaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXRnlhMlZ5YzNCaFkyVUtJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJR052Ym5OMElHMWhkSEpwZUY5MWJtbG1iM0p0SUQwZ2RHaHBjeTV3Y21Wd2NtOXFaV04wYVc5dWMxdHJaWGxkT3dvZ0lDQWdJQ0FnSUdsbUlDaHRZWFJ5YVhoZmRXNXBabTl5YlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0YwY21sNFgzVnVhV1p2Y20wN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JXRjBjbWw0SUQwZ2RHaHBjeTVqWVd4amRXeGhkR1ZmY0hKbGNISnZhbVZqZEdsdmJsOXRZWFJ5YVhnb2MzQmhZMlVzSUcxaGNtdGxjbk53WVdObEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkVzVwWm05eWJTQTlJRzVsZHlCUWRTaHRZWFJ5YVhncE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWEJ5YjJwbFkzUnBiMjV6VzJ0bGVWMGdQU0IxYm1sbWIzSnRPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZFc1cFptOXliVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDbjBLWTI5dWMzUWdjMk5sYm1WZlkyRmphR1VnUFNCN2ZUc0tablZ1WTNScGIyNGdabWxzZEdWeVgySjVYMnRsZVNoa2FXTjBMQ0JyWlhsekxDQmtaV1poZFd4MFgzWmhiSFZsSUQwZ1ptRnNjMlVwSUhzS0lDQWdJR052Ym5OMElISmxjM1ZzZENBOUlIdDlPd29nSUNBZ2EyVjVjeTVtYjNKRllXTm9LQ2hyWlhrcFBUNTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNJRDBnWkdsamRGdHJaWGxkT3dvZ0lDQWdJQ0FnSUdsbUlDaDJZV3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MFcydGxlVjBnUFNCMllXdzdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBXMnRsZVYwZ1BTQmtaV1poZFd4MFgzWmhiSFZsT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBwT3dvZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZERzS2ZRcGpiMjV6ZENCd2JHOTBYMk5oWTJobElEMGdlMzA3Q21OdmJuTjBJRlJGV0ZSVlVrVmZRVlJNUVZNZ1BTQmJDaUFnSUNCMWJtUmxabWx1WldRS1hUc0tablZ1WTNScGIyNGdZV1JrWDNOalpXNWxLSE5qWlc1bFgybGtMQ0IwYUhKbFpWOXpZMlZ1WlNrZ2V3b2dJQ0FnYzJObGJtVmZZMkZqYUdWYmMyTmxibVZmYVdSZElEMGdkR2h5WldWZmMyTmxibVU3Q24wS1puVnVZM1JwYjI0Z1ptbHVaRjl6WTJWdVpTaHpZMlZ1WlY5cFpDa2dld29nSUNBZ2NtVjBkWEp1SUhOalpXNWxYMk5oWTJobFczTmpaVzVsWDJsa1hUc0tmUXBtZFc1amRHbHZiaUJrWld4bGRHVmZjMk5sYm1Vb2MyTmxibVZmYVdRcElIc0tJQ0FnSUdOdmJuTjBJSE5qWlc1bElEMGdjMk5sYm1WZlkyRmphR1ZiYzJObGJtVmZhV1JkT3dvZ0lDQWdhV1lnS0NGelkyVnVaU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lIMEtJQ0FnSUdSbGJHVjBaVjkwYUhKbFpWOXpZMlZ1WlNoelkyVnVaU2s3Q2lBZ0lDQjNhR2xzWlNoelkyVnVaUzVqYUdsc1pISmxiaTVzWlc1bmRHZ2dQaUF3S1hzS0lDQWdJQ0FnSUNCelkyVnVaUzV5WlcxdmRtVW9jMk5sYm1VdVkyaHBiR1J5Wlc1Yk1GMHBPd29nSUNBZ2ZRb2dJQ0FnWkdWc1pYUmxJSE5qWlc1bFgyTmhZMmhsVzNOalpXNWxYMmxrWFRzS2ZRcG1kVzVqZEdsdmJpQm1hVzVrWDNCc2IzUnpLSEJzYjNSZmRYVnBaSE1wSUhzS0lDQWdJR052Ym5OMElIQnNiM1J6SUQwZ1cxMDdDaUFnSUNCd2JHOTBYM1YxYVdSekxtWnZja1ZoWTJnb0tHbGtLVDArZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSEJzYjNRZ1BTQndiRzkwWDJOaFkyaGxXMmxrWFRzS0lDQWdJQ0FnSUNCcFppQW9jR3h2ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J3Ykc5MGN5NXdkWE5vS0hCc2IzUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMHBPd29nSUNBZ2NtVjBkWEp1SUhCc2IzUnpPd3A5Q21aMWJtTjBhVzl1SUdSbGJHVjBaVjl6WTJWdVpYTW9jMk5sYm1WZmRYVnBaSE1zSUhCc2IzUmZkWFZwWkhNcElIc0tJQ0FnSUhCc2IzUmZkWFZwWkhNdVptOXlSV0ZqYUNnb2NHeHZkRjlwWkNrOVBuc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCd2JHOTBJRDBnY0d4dmRGOWpZV05vWlZ0d2JHOTBYMmxrWFRzS0lDQWdJQ0FnSUNCcFppQW9jR3h2ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVmZjR3h2ZENod2JHOTBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlLVHNLSUNBZ0lITmpaVzVsWDNWMWFXUnpMbVp2Y2tWaFkyZ29LSE5qWlc1bFgybGtLVDArZXdvZ0lDQWdJQ0FnSUdSbGJHVjBaVjl6WTJWdVpTaHpZMlZ1WlY5cFpDazdDaUFnSUNCOUtUc0tmUXBtZFc1amRHbHZiaUJwYm5ObGNuUmZjR3h2ZENoelkyVnVaVjlwWkN3Z2NHeHZkRjlrWVhSaEtTQjdDaUFnSUNCamIyNXpkQ0J6WTJWdVpTQTlJR1pwYm1SZmMyTmxibVVvYzJObGJtVmZhV1FwT3dvZ0lDQWdjR3h2ZEY5a1lYUmhMbVp2Y2tWaFkyZ29LSEJzYjNRcFBUNTdDaUFnSUNBZ0lDQWdZV1JrWDNCc2IzUW9jMk5sYm1Vc0lIQnNiM1FwT3dvZ0lDQWdmU2s3Q24wS1puVnVZM1JwYjI0Z1pHVnNaWFJsWDNCc2IzUnpLSEJzYjNSZmRYVnBaSE1wSUhzS0lDQWdJR052Ym5OMElIQnNiM1J6SUQwZ1ptbHVaRjl3Ykc5MGN5aHdiRzkwWDNWMWFXUnpLVHNLSUNBZ0lIQnNiM1J6TG1admNrVmhZMmdvWkdWc1pYUmxYM0JzYjNRcE93cDlDbVoxYm1OMGFXOXVJR052Ym5abGNuUmZkR1Y0ZEhWeVpTaGtZWFJoS1NCN0NpQWdJQ0JqYjI1emRDQjBaWGdnUFNCamNtVmhkR1ZmZEdWNGRIVnlaU2hrWVhSaEtUc0tJQ0FnSUhSbGVDNXVaV1ZrYzFWd1pHRjBaU0E5SUhSeWRXVTdDaUFnSUNCMFpYZ3ViV2x1Um1sc2RHVnlJRDBnYlc5a1cyUmhkR0V1YldsdVJtbHNkR1Z5WFRzS0lDQWdJSFJsZUM1dFlXZEdhV3gwWlhJZ1BTQnRiMlJiWkdGMFlTNXRZV2RHYVd4MFpYSmRPd29nSUNBZ2RHVjRMbUZ1YVhOdmRISnZjSGtnUFNCa1lYUmhMbUZ1YVhOdmRISnZjSGs3Q2lBZ0lDQjBaWGd1ZDNKaGNGTWdQU0J0YjJSYlpHRjBZUzUzY21Gd1UxMDdDaUFnSUNCcFppQW9aR0YwWVM1emFYcGxMbXhsYm1kMGFDQStJREVwSUhzS0lDQWdJQ0FnSUNCMFpYZ3VkM0poY0ZRZ1BTQnRiMlJiWkdGMFlTNTNjbUZ3VkYwN0NpQWdJQ0I5Q2lBZ0lDQnBaaUFvWkdGMFlTNXphWHBsTG14bGJtZDBhQ0ErSURJcElIc0tJQ0FnSUNBZ0lDQjBaWGd1ZDNKaGNGSWdQU0J0YjJSYlpHRjBZUzUzY21Gd1VsMDdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdkR1Y0T3dwOUNtWjFibU4wYVc5dUlHbHpYM1JvY21WbFgyWnBlR1ZrWDJGeWNtRjVLSFpoYkhWbEtTQjdDaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJ0YjJRdVZtVmpkRzl5TWlCOGZDQjJZV3gxWlNCcGJuTjBZVzVqWlc5bUlHMXZaQzVXWldOMGIzSXpJSHg4SUhaaGJIVmxJR2x1YzNSaGJtTmxiMllnYlc5a0xsWmxZM1J2Y2pRZ2ZId2dkbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQnRiMlF1VFdGMGNtbDRORHNLZlFwbWRXNWpkR2x2YmlCMGIxOTFibWxtYjNKdEtHUmhkR0VwSUhzS0lDQWdJR2xtSUNoa1lYUmhMblI1Y0dVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoTG5SNWNHVWdQVDBnSWxOaGJYQnNaWElpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjUyWlhKMFgzUmxlSFIxY21Vb1pHRjBZU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnVkhsd1pTQWtlMlJoZEdFdWRIbHdaWDBnYm05MElHdHViM2R1WUNrN0NpQWdJQ0I5Q2lBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGtZWFJoS1NCOGZDQkJjbkpoZVVKMVptWmxjaTVwYzFacFpYY29aR0YwWVNrcElIc0tJQ0FnSUNBZ0lDQnBaaUFvSVdSaGRHRXVaWFpsY25rb0tIZ3BQVDUwZVhCbGIyWWdlQ0E5UFQwZ0ltNTFiV0psY2lJcEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrWVhSaE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNXNaVzVuZEdnZ1BUMGdNaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRzF2WkM1V1pXTjBiM0l5S0NrdVpuSnZiVUZ5Y21GNUtHUmhkR0VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9aR0YwWVM1c1pXNW5kR2dnUFQwZ015a2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lHMXZaQzVXWldOMGIzSXpLQ2t1Wm5KdmJVRnljbUY1S0dSaGRHRXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZUzVzWlc1bmRHZ2dQVDBnTkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUcxdlpDNVdaV04wYjNJMEtDa3Vabkp2YlVGeWNtRjVLR1JoZEdFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNXNaVzVuZEdnZ1BUMGdNVFlwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JXRjBJRDBnYm1WM0lHMXZaQzVOWVhSeWFYZzBLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMWhkQzVtY205dFFYSnlZWGtvWkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ0WVhRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlHUmhkR0U3Q24wS1puVnVZM1JwYjI0Z1pHVnpaWEpwWVd4cGVtVmZkVzVwWm05eWJYTW9aR0YwWVNrZ2V3b2dJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdlMzA3Q2lBZ0lDQm1iM0lvWTI5dWMzUWdibUZ0WlNCcGJpQmtZWFJoS1hzS0lDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpTQTlJR1JoZEdGYmJtRnRaVjA3Q2lBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ2JXOWtMbFZ1YVdadmNtMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVzI1aGJXVmRJRDBnZG1Gc2RXVTdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjMlZ5SUQwZ2RHOWZkVzVwWm05eWJTaDJZV3gxWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RGdHVZVzFsWFNBOUlHNWxkeUJ0YjJRdVZXNXBabTl5YlNoelpYSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdDbjBLWm5WdVkzUnBiMjRnYkdsdVpYTmxaMjFsYm5SelgzWmxjblJsZUY5emFHRmtaWElvZFc1cFptOXliWE1zSUdGMGRISnBZblYwWlhNcElIc0tJQ0FnSUdOdmJuTjBJR0YwZEhKcFluVjBaVjlrWldOc0lEMGdZWFIwY21saWRYUmxjMTkwYjE5MGVYQmxYMlJsWTJ4aGNtRjBhVzl1S0dGMGRISnBZblYwWlhNcE93b2dJQ0FnWTI5dWMzUWdkVzVwWm05eWJWOWtaV05zSUQwZ2RXNXBabTl5YlhOZmRHOWZkSGx3WlY5a1pXTnNZWEpoZEdsdmJpaDFibWxtYjNKdGN5azdDaUFnSUNCamIyNXpkQ0JqYjJ4dmNpQTlJR0YwZEhKcFluVjBaVjkwZVhCbEtHRjBkSEpwWW5WMFpYTXVZMjlzYjNKZmMzUmhjblFwSUh4OElIVnVhV1p2Y20xZmRIbHdaU2gxYm1sbWIzSnRjeTVqYjJ4dmNsOXpkR0Z5ZENrN0NpQWdJQ0J5WlhSMWNtNGdZSEJ5WldOcGMybHZiaUJ0WldScGRXMXdJR2x1ZERzS0lDQWdJQ0FnSUNCd2NtVmphWE5wYjI0Z2FHbG5hSEFnWm14dllYUTdDZ29nSUNBZ0lDQWdJQ1I3WVhSMGNtbGlkWFJsWDJSbFkyeDlDaUFnSUNBZ0lDQWdKSHQxYm1sbWIzSnRYMlJsWTJ4OUNnb2dJQ0FnSUNBZ0lHOTFkQ0IyWldNeUlHWmZkWFk3Q2lBZ0lDQWdJQ0FnYjNWMElDUjdZMjlzYjNKOUlHWmZZMjlzYjNJN0Nnb2dJQ0FnSUNBZ0lIWmxZeklnWjJWMFgzSmxjMjlzZFhScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDOHZJRElnS2lCd2VGOXdaWEpmZFc1cGRDQmtiMlZ6YmlkMElHMWhhMlVnWVc1NUlITmxibk5sTENCaWRYUWdkMjl5YTNNS0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkU5RVR5d2dabWxuZFhKbElHOTFkQ0IzYUdGMEozTWdaMjlwYm1jZ2IyNGhDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIVjBhVzl1SUM4Z01pNHdJQ29nY0hoZmNHVnlYM1Z1YVhRN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQjJaV016SUhOamNtVmxibDl6Y0dGalpTaDJaV016SUhCdmFXNTBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmxZelFnZG1WeWRHVjRJRDBnY0hKdmFtVmpkR2x2Ym5acFpYY2dLaUJ0YjJSbGJDQXFJSFpsWXpRb2NHOXBiblFzSURFcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbVZqTXloMlpYSjBaWGd1ZUhrZ0tpQm5aWFJmY21WemIyeDFkR2x2YmlncExDQjJaWEowWlhndWVpQXJJSFpsY25SbGVDNTNJQ29nWkdWd2RHaGZjMmhwWm5RcElDOGdkbVZ5ZEdWNExuYzdDaUFnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0IyWldNeklITmpjbVZsYmw5emNHRmpaU2gyWldNeUlIQnZhVzUwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpZM0psWlc1ZmMzQmhZMlVvZG1Wak15aHdiMmx1ZEN3Z01Da3BPd29nSUNBZ0lDQWdJSDBLQ2lBZ0lDQWdJQ0FnZG05cFpDQnRZV2x1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWldNeklIQmZZU0E5SUhOamNtVmxibDl6Y0dGalpTaHNhVzVsY0c5cGJuUmZjM1JoY25RcE93b2dJQ0FnSUNBZ0lDQWdJQ0IyWldNeklIQmZZaUE5SUhOamNtVmxibDl6Y0dGalpTaHNhVzVsY0c5cGJuUmZaVzVrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabXh2WVhRZ2QybGtkR2dnUFNBb2NIaGZjR1Z5WDNWdWFYUWdLaUFvY0c5emFYUnBiMjR1ZUNBOVBTQXhMakFnUHlCc2FXNWxkMmxrZEdoZlpXNWtJRG9nYkdsdVpYZHBaSFJvWDNOMFlYSjBLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWmZZMjlzYjNJZ1BTQndiM05wZEdsdmJpNTRJRDA5SURFdU1DQS9JR052Ykc5eVgyVnVaQ0E2SUdOdmJHOXlYM04wWVhKME93b2dJQ0FnSUNBZ0lDQWdJQ0JtWDNWMklEMGdkbVZqTWlod2IzTnBkR2x2Ymk1NExDQndiM05wZEdsdmJpNTVJQ3NnTUM0MUtUc0tDaUFnSUNBZ0lDQWdJQ0FnSUhabFl6SWdjRzlwYm5SQklEMGdjRjloTG5oNU93b2dJQ0FnSUNBZ0lDQWdJQ0IyWldNeUlIQnZhVzUwUWlBOUlIQmZZaTU0ZVRzS0NpQWdJQ0FnSUNBZ0lDQWdJSFpsWXpJZ2VFSmhjMmx6SUQwZ2NHOXBiblJDSUMwZ2NHOXBiblJCT3dvZ0lDQWdJQ0FnSUNBZ0lDQjJaV015SUhsQ1lYTnBjeUE5SUc1dmNtMWhiR2w2WlNoMlpXTXlLQzE0UW1GemFYTXVlU3dnZUVKaGMybHpMbmdwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdkbVZqTWlCd2IybHVkQ0E5SUhCdmFXNTBRU0FySUhoQ1lYTnBjeUFxSUhCdmMybDBhVzl1TG5nZ0t5QjVRbUZ6YVhNZ0tpQjNhV1IwYUNBcUlIQnZjMmwwYVc5dUxuazdDZ29nSUNBZ0lDQWdJQ0FnSUNCbmJGOVFiM05wZEdsdmJpQTlJSFpsWXpRb2NHOXBiblF1ZUhrZ0x5Qm5aWFJmY21WemIyeDFkR2x2YmlncExDQndiM05wZEdsdmJpNTRJRDA5SURFdU1DQS9JSEJmWWk1NklEb2djRjloTG5vc0lERXVNQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdBN0NuMEtablZ1WTNScGIyNGdiR2x1WlhOZlpuSmhaMjFsYm5SZmMyaGhaR1Z5S0hWdWFXWnZjbTF6TENCaGRIUnlhV0oxZEdWektTQjdDaUFnSUNCamIyNXpkQ0JqYjJ4dmNpQTlJR0YwZEhKcFluVjBaVjkwZVhCbEtHRjBkSEpwWW5WMFpYTXVZMjlzYjNKZmMzUmhjblFwSUh4OElIVnVhV1p2Y20xZmRIbHdaU2gxYm1sbWIzSnRjeTVqYjJ4dmNsOXpkR0Z5ZENrN0NpQWdJQ0JqYjI1emRDQmpiMnh2Y2w5MWJtbG1iM0p0Y3lBOUlHWnBiSFJsY2w5aWVWOXJaWGtvZFc1cFptOXliWE1zSUZzS0lDQWdJQ0FnSUNBaVkyOXNiM0p5WVc1blpTSXNDaUFnSUNBZ0lDQWdJbU52Ykc5eWJXRndJaXdLSUNBZ0lDQWdJQ0FpYm1GdVgyTnZiRzl5SWl3S0lDQWdJQ0FnSUNBaWFHbG5hR05zYVhBaUxBb2dJQ0FnSUNBZ0lDSnNiM2RqYkdsd0lnb2dJQ0FnWFNrN0NpQWdJQ0JqYjI1emRDQjFibWxtYjNKdFgyUmxZMndnUFNCMWJtbG1iM0p0YzE5MGIxOTBlWEJsWDJSbFkyeGhjbUYwYVc5dUtHTnZiRzl5WDNWdWFXWnZjbTF6S1RzS0lDQWdJSEpsZEhWeWJpQmdJMlY0ZEdWdWMybHZiaUJIVEY5UFJWTmZjM1JoYm1SaGNtUmZaR1Z5YVhaaGRHbDJaWE1nT2lCbGJtRmliR1VLQ2lBZ0lDQndjbVZqYVhOcGIyNGdiV1ZrYVhWdGNDQnBiblE3Q2lBZ0lDQndjbVZqYVhOcGIyNGdhR2xuYUhBZ1pteHZZWFE3Q2lBZ0lDQndjbVZqYVhOcGIyNGdiV1ZrYVhWdGNDQnpZVzF3YkdWeU1rUTdDaUFnSUNCd2NtVmphWE5wYjI0Z2JXVmthWFZ0Y0NCellXMXdiR1Z5TTBRN0Nnb2dJQ0FnYVc0Z2RtVmpNaUJtWDNWMk93b2dJQ0FnYVc0Z0pIdGpiMnh2Y24wZ1psOWpiMnh2Y2pzS0lDQWdJQ1I3ZFc1cFptOXliVjlrWldOc2ZRb0tJQ0FnSUc5MWRDQjJaV00wSUdaeVlXZHRaVzUwWDJOdmJHOXlPd29LSUNBZ0lDOHZJRWhoYkdZZ2QybGtkR2dnYjJZZ1lXNTBhV0ZzYVdGemFXNW5JSE50YjI5MGFITjBaWEFLSUNBZ0lDTmtaV1pwYm1VZ1FVNVVTVUZNU1VGVFgxSkJSRWxWVXlBd0xqY3dOekV3TmpjNE1URTROalUwTnpZS0NpQWdJQ0IyWldNMElHZGxkRjlqYjJ4dmNsOW1jbTl0WDJOdFlYQW9abXh2WVhRZ2RtRnNkV1VzSUhOaGJYQnNaWEl5UkNCamIyeHZjbTFoY0N3Z2RtVmpNaUJqYjJ4dmNuSmhibWRsS1NCN0NpQWdJQ0FnSUNBZ1pteHZZWFFnWTIxcGJpQTlJR052Ykc5eWNtRnVaMlV1ZURzS0lDQWdJQ0FnSUNCbWJHOWhkQ0JqYldGNElEMGdZMjlzYjNKeVlXNW5aUzU1T3dvZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNBOFBTQmpiV0Y0SUNZbUlIWmhiSFZsSUQ0OUlHTnRhVzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdMeThnYVc0Z2RtRnNkV1VnY21GdVoyVXNJR052Ym5ScGJuVmxJUW9nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZG1Gc2RXVWdQQ0JqYldsdUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJzYjNkamJHbHdPd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZG1Gc2RXVWdQaUJqYldGNEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJvYVdkb1kyeHBjRHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBdkx5QnBjMjVoYmlCRFFVNGdZbVVnWW5KdmEyVnVJQ2h2WmlCamIzVnljMlVwSUMwdUxRb2dJQ0FnSUNBZ0lDQWdJQ0F2THlCemJ5QnBaaUJ2ZFhSemFXUmxJSFpoYkhWbElISmhibWRsSUdGdVpDQnViM1FnYzIxaGJHeGxjaTlpYVdkblpYSWdiV2x1TDIxaGVDQjNaU0JoYzNOMWJXVWdUbUZPQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVlXNWZZMjlzYjNJN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnNiMkYwSUdrd01TQTlJR05zWVcxd0tDaDJZV3gxWlNBdElHTnRhVzRwSUM4Z0tHTnRZWGdnTFNCamJXbHVLU3dnTUM0d0xDQXhMakFwT3dvZ0lDQWdJQ0FnSUM4dklERXZNQ0JqYjNKeVpYTndiMjVrY3lCMGJ5QjBhR1VnWTI5eWJtVnlJRzltSUhSb1pTQmpiMnh2Y20xaGNDd2djMjhnZEc4Z2NISnZjR1Z5YkhrZ2FXNTBaWEp3YjJ4aGRHVUtJQ0FnSUNBZ0lDQXZMeUJpWlhSM1pXVnVJSFJvWlNCamIyeHZjbk1zSUhkbElHNWxaV1FnZEc4Z2MyTmhiR1VnYVhRc0lITnZJSFJvWVhRZ2RHaGxJR1Z1WkhNZ1lYSmxJR0YwSURFZ0xTQW9jM1JsY0hOcGVtVXZNaWtnWVc1a0lEQXJLSE4wWlhCemFYcGxMeklwTGdvZ0lDQWdJQ0FnSUdac2IyRjBJSE4wWlhCemFYcGxJRDBnTVM0d0lDOGdabXh2WVhRb2RHVjRkSFZ5WlZOcGVtVW9ZMjlzYjNKdFlYQXNJREFwS1RzS0lDQWdJQ0FnSUNCcE1ERWdQU0FvTVM0d0lDMGdjM1JsY0hOcGVtVXBJQ29nYVRBeElDc2dNQzQxSUNvZ2MzUmxjSE5wZW1VN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSbGVIUjFjbVVvWTI5c2IzSnRZWEFzSUhabFl6SW9hVEF4TENBd0xqQXBLVHNLSUNBZ0lIMEtDaUFnSUNCMlpXTTBJR2RsZEY5amIyeHZjaWhtYkc5aGRDQmpiMnh2Y2l3Z2MyRnRjR3hsY2pKRUlHTnZiRzl5YldGd0xDQjJaV015SUdOdmJHOXljbUZ1WjJVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1oyVjBYMk52Ykc5eVgyWnliMjFmWTIxaGNDaGpiMnh2Y2l3Z1kyOXNiM0p0WVhBc0lHTnZiRzl5Y21GdVoyVXBPd29nSUNBZ2ZRb0tJQ0FnSUhabFl6UWdaMlYwWDJOdmJHOXlLSFpsWXpRZ1kyOXNiM0lzSUdKdmIyd2dZMjlzYjNKdFlYQXNJR0p2YjJ3Z1kyOXNiM0p5WVc1blpTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMnh2Y2pzS0lDQWdJSDBLSUNBZ0lIWmxZelFnWjJWMFgyTnZiRzl5S0habFl6TWdZMjlzYjNJc0lHSnZiMndnWTI5c2IzSnRZWEFzSUdKdmIyd2dZMjlzYjNKeVlXNW5aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWldNMEtHTnZiRzl5TENBeExqQXBPd29nSUNBZ2ZRb0tJQ0FnSUdac2IyRjBJR0ZoYzNSbGNDaG1iRzloZENCMGFISmxjMmh2YkdRc0lHWnNiMkYwSUhaaGJIVmxLU0I3Q2lBZ0lDQWdJQ0FnWm14dllYUWdZV1ozYVdSMGFDQTlJR3hsYm1kMGFDaDJaV015S0dSR1pIZ29kbUZzZFdVcExDQmtSbVI1S0haaGJIVmxLU2twSUNvZ1FVNVVTVUZNU1VGVFgxSkJSRWxWVXpzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzIxdmIzUm9jM1JsY0NoMGFISmxjMmh2YkdRdFlXWjNhV1IwYUN3Z2RHaHlaWE5vYjJ4a0syRm1kMmxrZEdnc0lIWmhiSFZsS1RzS0lDQWdJSDBLQ2lBZ0lDQm1iRzloZENCaFlYTjBaWEFvWm14dllYUWdkR2h5WlhOb2IyeGtNU3dnWm14dllYUWdkR2h5WlhOb2IyeGtNaXdnWm14dllYUWdaR2x6ZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCaFlYTjBaWEFvZEdoeVpYTm9iMnhrTVN3Z1pHbHpkQ2tnS2lCaFlYTjBaWEFvZEdoeVpYTm9iMnhrTWl3Z01TNHdJQzBnWkdsemRDazdDaUFnSUNCOUNnb2dJQ0FnZG05cFpDQnRZV2x1S0NsN0NpQWdJQ0FnSUNBZ1pteHZZWFFnZUdGc2NHaGhJRDBnWVdGemRHVndLREF1TUN3Z01DNHdMQ0JtWDNWMkxuZ3BPd29nSUNBZ0lDQWdJR1pzYjJGMElIbGhiSEJvWVNBOUlHRmhjM1JsY0Nnd0xqQXNJREF1TUN3Z1psOTFkaTU1S1RzS0lDQWdJQ0FnSUNCMlpXTTBJR052Ykc5eUlEMGdaMlYwWDJOdmJHOXlLR1pmWTI5c2IzSXNJR052Ykc5eWJXRndMQ0JqYjJ4dmNuSmhibWRsS1RzS0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEY5amIyeHZjaUE5SUhabFl6UW9ZMjlzYjNJdWNtZGlMQ0JqYjJ4dmNpNWhLVHNLSUNBZ0lIMEtJQ0FnSUdBN0NuMEtablZ1WTNScGIyNGdZM0psWVhSbFgyeHBibVZmYldGMFpYSnBZV3dvZFc1cFptOXliWE1zSUdGMGRISnBZblYwWlhNcElIc0tJQ0FnSUdOdmJuTjBJSFZ1YVdadmNtMXpYMlJsY3lBOUlHUmxjMlZ5YVdGc2FYcGxYM1Z1YVdadmNtMXpLSFZ1YVdadmNtMXpLVHNLSUNBZ0lISmxkSFZ5YmlCdVpYY2dWRWhTUlVVdVVtRjNVMmhoWkdWeVRXRjBaWEpwWVd3b2V3b2dJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQjFibWxtYjNKdGMxOWtaWE1zQ2lBZ0lDQWdJQ0FnWjJ4emJGWmxjbk5wYjI0NklGUklVa1ZGTGtkTVUwd3pMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ2JHbHVaWE5sWjIxbGJuUnpYM1psY25SbGVGOXphR0ZrWlhJb2RXNXBabTl5YlhOZlpHVnpMQ0JoZEhSeWFXSjFkR1Z6S1N3S0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nYkdsdVpYTmZabkpoWjIxbGJuUmZjMmhoWkdWeUtIVnVhV1p2Y20xelgyUmxjeXdnWVhSMGNtbGlkWFJsY3lrc0NpQWdJQ0FnSUNBZ2RISmhibk53WVhKbGJuUTZJSFJ5ZFdVS0lDQWdJSDBwT3dwOUNtWjFibU4wYVc5dUlHRjBkR0ZqYUY5cGJuUmxjbXhsWVhabFpGOXNhVzVsWDJKMVptWmxjaWhoZEhSeVgyNWhiV1VzSUdkbGIyMWxkSEo1TENCd2IybHVkSE1zSUc1a2FXMHNJR2x6WDNObFoyMWxiblJ6S1NCN0NpQWdJQ0JqYjI1emRDQnphMmx3WDJWc1pXMXpJRDBnYVhOZmMyVm5iV1Z1ZEhNZ1B5QXlJQ29nYm1ScGJTQTZJRzVrYVcwN0NpQWdJQ0JqYjI1emRDQmlkV1ptWlhJZ1BTQnVaWGNnVkVoU1JVVXVTVzV6ZEdGdVkyVmtTVzUwWlhKc1pXRjJaV1JDZFdabVpYSW9jRzlwYm5SekxDQnphMmx3WDJWc1pXMXpMQ0F4S1RzS0lDQWdJR2RsYjIxbGRISjVMbk5sZEVGMGRISnBZblYwWlNoaGRIUnlYMjVoYldVZ0t5QWlYM04wWVhKMElpd2dibVYzSUZSSVVrVkZMa2x1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxLR0oxWm1abGNpd2dibVJwYlN3Z01Da3BPd29nSUNBZ1oyVnZiV1YwY25rdWMyVjBRWFIwY21saWRYUmxLR0YwZEhKZmJtRnRaU0FySUNKZlpXNWtJaXdnYm1WM0lGUklVa1ZGTGtsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5UVhSMGNtbGlkWFJsS0dKMVptWmxjaXdnYm1ScGJTd2dibVJwYlNrcE93b2dJQ0FnY21WMGRYSnVJR0oxWm1abGNqc0tmUXBtZFc1amRHbHZiaUJqY21WaGRHVmZiR2x1WlY5cGJuTjBZVzVqWlY5blpXOXRaWFJ5ZVNncElIc0tJQ0FnSUdOdmJuTjBJR2RsYjIxbGRISjVJRDBnYm1WM0lGUklVa1ZGTGtsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVLQ2s3Q2lBZ0lDQmpiMjV6ZENCcGJuTjBZVzVqWlY5d2IzTnBkR2x2Ym5NZ1BTQmJDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0F0TUM0MUxBb2dJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdMVEF1TlN3S0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lEQXVOU3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUMwd0xqVXNDaUFnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0F3TGpVc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMalVLSUNBZ0lGMDdDaUFnSUNCblpXOXRaWFJ5ZVM1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lGUklVa1ZGTGtac2IyRjBNekpDZFdabVpYSkJkSFJ5YVdKMWRHVW9hVzV6ZEdGdVkyVmZjRzl6YVhScGIyNXpMQ0F5S1NrN0NpQWdJQ0JuWlc5dFpYUnllUzVpYjNWdVpHbHVaMU53YUdWeVpTQTlJRzVsZHlCVVNGSkZSUzVUY0dobGNtVW9LVHNLSUNBZ0lHZGxiMjFsZEhKNUxtSnZkVzVrYVc1blUzQm9aWEpsTG5KaFpHbDFjeUE5SURFd01EQXdNREF3TURBd01EQXdPd29nSUNBZ1oyVnZiV1YwY25rdVpuSjFjM1IxYlVOMWJHeGxaQ0E5SUdaaGJITmxPd29nSUNBZ2NtVjBkWEp1SUdkbGIyMWxkSEo1T3dwOUNtWjFibU4wYVc5dUlHTnlaV0YwWlY5c2FXNWxYMkoxWm1abGNpaG5aVzl0WlhSeWVTd2dZblZtWm1WeWN5d2dibUZ0WlN3Z1lYUjBjaXdnYVhOZmMyVm5iV1Z1ZEhNcElIc0tJQ0FnSUdOdmJuTjBJR1pzWVhSZlluVm1abVZ5SUQwZ1lYUjBjaTUyWVd4MVpTNW1iR0YwT3dvZ0lDQWdZMjl1YzNRZ2JtUnBiWE1nUFNCaGRIUnlMblpoYkhWbExuUjVjR1ZmYkdWdVozUm9Pd29nSUNBZ1kyOXVjM1FnYkdsdVpXSjFabVpsY2lBOUlHRjBkR0ZqYUY5cGJuUmxjbXhsWVhabFpGOXNhVzVsWDJKMVptWmxjaWh1WVcxbExDQm5aVzl0WlhSeWVTd2dabXhoZEY5aWRXWm1aWElzSUc1a2FXMXpMQ0JwYzE5elpXZHRaVzUwY3lrN0NpQWdJQ0JpZFdabVpYSnpXMjVoYldWZElEMGdiR2x1WldKMVptWmxjanNLSUNBZ0lISmxkSFZ5YmlCbWJHRjBYMkoxWm1abGNqc0tmUXBtZFc1amRHbHZiaUJqY21WaGRHVmZiR2x1WlY5aWRXWm1aWEp6S0dkbGIyMWxkSEo1TENCaWRXWm1aWEp6TENCaGRIUnlhV0oxZEdWekxDQnBjMTl6WldkdFpXNTBjeWtnZXdvZ0lDQWdabTl5S0d4bGRDQnVZVzFsSUdsdUlHRjBkSEpwWW5WMFpYTXBld29nSUNBZ0lDQWdJR052Ym5OMElHRjBkSElnUFNCaGRIUnlhV0oxZEdWelcyNWhiV1ZkT3dvZ0lDQWdJQ0FnSUdOeVpXRjBaVjlzYVc1bFgySjFabVpsY2loblpXOXRaWFJ5ZVN3Z1luVm1abVZ5Y3l3Z2JtRnRaU3dnWVhSMGNpd2dhWE5mYzJWbmJXVnVkSE1wT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUdGMGRHRmphRjkxY0dSaGRHVnpLRzFsYzJnc0lHSjFabVpsY25Nc0lHRjBkSEpwWW5WMFpYTXNJR2x6WDNObFoyMWxiblJ6S1NCN0NpQWdJQ0JzWlhRZ1oyVnZiV1YwY25rZ1BTQnRaWE5vTG1kbGIyMWxkSEo1T3dvZ0lDQWdabTl5S0d4bGRDQnVZVzFsSUdsdUlHRjBkSEpwWW5WMFpYTXBld29nSUNBZ0lDQWdJR052Ym5OMElHRjBkSElnUFNCaGRIUnlhV0oxZEdWelcyNWhiV1ZkT3dvZ0lDQWdJQ0FnSUdGMGRISXViMjRvS0c1bGQxOXdiMmx1ZEhNcFBUNTdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmlkV1ptSUQwZ1luVm1abVZ5YzF0dVlXMWxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1ScGJYTWdQU0J1WlhkZmNHOXBiblJ6TG5SNWNHVmZiR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnVaWGRmYkdsdVpWOXdiMmx1ZEhNZ1BTQnVaWGRmY0c5cGJuUnpMbVpzWVhRN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHOXNaRjlqYjNWdWRDQTlJR0oxWm1ZdVlYSnlZWGt1YkdWdVozUm9Pd29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1WlhkZlkyOTFiblFnUFNCdVpYZGZiR2x1WlY5d2IybHVkSE11YkdWdVozUm9JQzhnYm1ScGJYTTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZiR1JmWTI5MWJuUWdQQ0J1WlhkZmJHbHVaVjl3YjJsdWRITXViR1Z1WjNSb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE5vTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGIyMWxkSEo1SUQwZ1kzSmxZWFJsWDJ4cGJtVmZhVzV6ZEdGdVkyVmZaMlZ2YldWMGNua29LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0oxWm1ZZ1BTQmhkSFJoWTJoZmFXNTBaWEpzWldGMlpXUmZiR2x1WlY5aWRXWm1aWElvYm1GdFpTd2daMlZ2YldWMGNua3NJRzVsZDE5c2FXNWxYM0J2YVc1MGN5d2dibVJwYlhNc0lHbHpYM05sWjIxbGJuUnpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzJndVoyVnZiV1YwY25rZ1BTQm5aVzl0WlhSeWVUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSjFabVpsY25OYmJtRnRaVjBnUFNCaWRXWm1Pd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WbVppNXpaWFFvYm1WM1gyeHBibVZmY0c5cGJuUnpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnNjMTltWVdOMGIzSWdQU0JwYzE5elpXZHRaVzUwY3lBL0lESWdPaUF4T3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdlptWnpaWFFnUFNCcGMxOXpaV2R0Wlc1MGN5QS9JREFnT2lBeE93b2dJQ0FnSUNBZ0lDQWdJQ0J0WlhOb0xtZGxiMjFsZEhKNUxtbHVjM1JoYm1ObFEyOTFiblFnUFNCTllYUm9MbTFoZUNnd0xDQnVaWGRmWTI5MWJuUWdMeUJzYzE5bVlXTjBiM0lnTFNCdlptWnpaWFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptTG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YUM1dVpXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdYMk55WldGMFpWOXNhVzVsS0d4cGJtVmZaR0YwWVN3Z2FYTmZjMlZuYldWdWRITXBJSHNLSUNBZ0lHTnZibk4wSUdkbGIyMWxkSEo1SUQwZ1kzSmxZWFJsWDJ4cGJtVmZhVzV6ZEdGdVkyVmZaMlZ2YldWMGNua29LVHNLSUNBZ0lHTnZibk4wSUdKMVptWmxjbk1nUFNCN2ZUc0tJQ0FnSUdOeVpXRjBaVjlzYVc1bFgySjFabVpsY25Nb1oyVnZiV1YwY25rc0lHSjFabVpsY25Nc0lHeHBibVZmWkdGMFlTNWhkSFJ5YVdKMWRHVnpMQ0JwYzE5elpXZHRaVzUwY3lrN0NpQWdJQ0JqYjI1emRDQnRZWFJsY21saGJDQTlJR055WldGMFpWOXNhVzVsWDIxaGRHVnlhV0ZzS0d4cGJtVmZaR0YwWVM1MWJtbG1iM0p0Y3l3Z1oyVnZiV1YwY25rdVlYUjBjbWxpZFhSbGN5azdDaUFnSUNCamIyNXpkQ0J0WlhOb0lEMGdibVYzSUZSSVVrVkZMazFsYzJnb1oyVnZiV1YwY25rc0lHMWhkR1Z5YVdGc0tUc0tJQ0FnSUdOdmJuTjBJRzltWm5ObGRDQTlJR2x6WDNObFoyMWxiblJ6SUQ4Z01DQTZJREU3Q2lBZ0lDQmpiMjV6ZENCdVpYZGZZMjkxYm5RZ1BTQm5aVzl0WlhSeWVTNWhkSFJ5YVdKMWRHVnpMbXhwYm1Wd2IybHVkRjl6ZEdGeWRDNWpiM1Z1ZERzS0lDQWdJRzFsYzJndVoyVnZiV1YwY25rdWFXNXpkR0Z1WTJWRGIzVnVkQ0E5SUUxaGRHZ3ViV0Y0S0RBc0lHNWxkMTlqYjNWdWRDQXRJRzltWm5ObGRDazdDaUFnSUNCaGRIUmhZMmhmZFhCa1lYUmxjeWh0WlhOb0xDQmlkV1ptWlhKekxDQnNhVzVsWDJSaGRHRXVZWFIwY21saWRYUmxjeXdnYVhOZmMyVm5iV1Z1ZEhNcE93b2dJQ0FnY21WMGRYSnVJRzFsYzJnN0NuMEtablZ1WTNScGIyNGdZM0psWVhSbFgyeHBibVVvYkdsdVpWOWtZWFJoS1NCN0NpQWdJQ0J5WlhSMWNtNGdYMk55WldGMFpWOXNhVzVsS0d4cGJtVmZaR0YwWVN3Z1ptRnNjMlVwT3dwOUNtWjFibU4wYVc5dUlHTnlaV0YwWlY5c2FXNWxjMlZuYldWdWRITW9iR2x1WlY5a1lYUmhLU0I3Q2lBZ0lDQnlaWFIxY200Z1gyTnlaV0YwWlY5c2FXNWxLR3hwYm1WZlpHRjBZU3dnZEhKMVpTazdDbjBLWm5WdVkzUnBiMjRnWkdWelpYSnBZV3hwZW1WZmNHeHZkQ2hrWVhSaEtTQjdDaUFnSUNCc1pYUWdiV1Z6YURzS0lDQWdJR052Ym5OMElIVndaR0YwWlY5MmFYTnBZbXhsSUQwZ0tIWXBQVDU3Q2lBZ0lDQWdJQ0FnYldWemFDNTJhWE5wWW14bElEMGdkanNLSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNCOU93b2dJQ0FnYVdZZ0tHUmhkR0V1Y0d4dmRGOTBlWEJsSUQwOVBTQWliR2x1WlhNaUtTQjdDaUFnSUNBZ0lDQWdiV1Z6YUNBOUlHTnlaV0YwWlY5c2FXNWxLR1JoZEdFcE93b2dJQ0FnZlNCbGJITmxJR2xtSUNoa1lYUmhMbkJzYjNSZmRIbHdaU0E5UFQwZ0lteHBibVZ6WldkdFpXNTBjeUlwSUhzS0lDQWdJQ0FnSUNCdFpYTm9JRDBnWTNKbFlYUmxYMnhwYm1WelpXZHRaVzUwY3loa1lYUmhLVHNLSUNBZ0lIMGdaV3h6WlNCcFppQW9JbWx1YzNSaGJtTmxYMkYwZEhKcFluVjBaWE1pSUdsdUlHUmhkR0VwSUhzS0lDQWdJQ0FnSUNCdFpYTm9JRDBnWTNKbFlYUmxYMmx1YzNSaGJtTmxaRjl0WlhOb0tHUmhkR0VwT3dvZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQnRaWE5vSUQwZ1kzSmxZWFJsWDIxbGMyZ29aR0YwWVNrN0NpQWdJQ0I5Q2lBZ0lDQnRaWE5vTG01aGJXVWdQU0JrWVhSaExtNWhiV1U3Q2lBZ0lDQnRaWE5vTG1aeWRYTjBkVzFEZFd4c1pXUWdQU0JtWVd4elpUc0tJQ0FnSUcxbGMyZ3ViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJR1poYkhObE93b2dJQ0FnYldWemFDNXdiRzkwWDNWMWFXUWdQU0JrWVhSaExuVjFhV1E3Q2lBZ0lDQjFjR1JoZEdWZmRtbHphV0pzWlNoa1lYUmhMblpwYzJsaWJHVXVkbUZzZFdVcE93b2dJQ0FnWkdGMFlTNTJhWE5wWW14bExtOXVLSFZ3WkdGMFpWOTJhWE5wWW14bEtUc0tJQ0FnSUdOdmJtNWxZM1JmZFc1cFptOXliWE1vYldWemFDd2daR0YwWVM1MWJtbG1iM0p0WDNWd1pHRjBaWElwT3dvZ0lDQWdhV1lnS0NFb1pHRjBZUzV3Ykc5MFgzUjVjR1VnUFQwOUlDSnNhVzVsY3lJZ2ZId2daR0YwWVM1d2JHOTBYM1I1Y0dVZ1BUMDlJQ0pzYVc1bGMyVm5iV1Z1ZEhNaUtTa2dld29nSUNBZ0lDQWdJR052Ym01bFkzUmZZWFIwY21saWRYUmxjeWh0WlhOb0xDQmtZWFJoTG1GMGRISnBZblYwWlY5MWNHUmhkR1Z5S1RzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCdFpYTm9Pd3A5Q21OdmJuTjBJRTlPWDA1RldGUmZTVTVUUlZKVUlEMGdibVYzSUZObGRDZ3BPd3BtZFc1amRHbHZiaUJ2Ymw5dVpYaDBYMmx1YzJWeWRDaG1LU0I3Q2lBZ0lDQlBUbDlPUlZoVVgwbE9VMFZTVkM1aFpHUW9aaWs3Q24wS1puVnVZM1JwYjI0Z1lXUmtYM0JzYjNRb2MyTmxibVVzSUhCc2IzUmZaR0YwWVNrZ2V3b2dJQ0FnWTI5dWMzUWdZMkZ0SUQwZ2MyTmxibVV1ZDJkc1gyTmhiV1Z5WVRzS0lDQWdJR052Ym5OMElHbGtaVzUwYVhSNUlEMGdibVYzSUcxdlpDNVZibWxtYjNKdEtHNWxkeUJ0YjJRdVRXRjBjbWw0TkNncEtUc0tJQ0FnSUdsbUlDaHdiRzkwWDJSaGRHRXVZMkZ0WDNOd1lXTmxJRDA5SUNKa1lYUmhJaWtnZXdvZ0lDQWdJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1MmFXVjNJRDBnWTJGdExuWnBaWGM3Q2lBZ0lDQWdJQ0FnY0d4dmRGOWtZWFJoTG5WdWFXWnZjbTF6TG5CeWIycGxZM1JwYjI0Z1BTQmpZVzB1Y0hKdmFtVmpkR2x2YmpzS0lDQWdJQ0FnSUNCd2JHOTBYMlJoZEdFdWRXNXBabTl5YlhNdWNISnZhbVZqZEdsdmJuWnBaWGNnUFNCallXMHVjSEp2YW1WamRHbHZiblpwWlhjN0NpQWdJQ0FnSUNBZ2NHeHZkRjlrWVhSaExuVnVhV1p2Y20xekxtVjVaWEJ2YzJsMGFXOXVJRDBnWTJGdExtVjVaWEJ2YzJsMGFXOXVPd29nSUNBZ2ZTQmxiSE5sSUdsbUlDaHdiRzkwWDJSaGRHRXVZMkZ0WDNOd1lXTmxJRDA5SUNKd2FYaGxiQ0lwSUhzS0lDQWdJQ0FnSUNCd2JHOTBYMlJoZEdFdWRXNXBabTl5YlhNdWRtbGxkeUE5SUdsa1pXNTBhWFI1T3dvZ0lDQWdJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1d2NtOXFaV04wYVc5dUlEMGdZMkZ0TG5CcGVHVnNYM053WVdObE93b2dJQ0FnSUNBZ0lIQnNiM1JmWkdGMFlTNTFibWxtYjNKdGN5NXdjbTlxWldOMGFXOXVkbWxsZHlBOUlHTmhiUzV3YVhobGJGOXpjR0ZqWlRzS0lDQWdJSDBnWld4elpTQnBaaUFvY0d4dmRGOWtZWFJoTG1OaGJWOXpjR0ZqWlNBOVBTQWljbVZzWVhScGRtVWlLU0I3Q2lBZ0lDQWdJQ0FnY0d4dmRGOWtZWFJoTG5WdWFXWnZjbTF6TG5acFpYY2dQU0JwWkdWdWRHbDBlVHNLSUNBZ0lDQWdJQ0J3Ykc5MFgyUmhkR0V1ZFc1cFptOXliWE11Y0hKdmFtVmpkR2x2YmlBOUlHTmhiUzV5Wld4aGRHbDJaVjl6Y0dGalpUc0tJQ0FnSUNBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXVjSEp2YW1WamRHbHZiblpwWlhjZ1BTQmpZVzB1Y21Wc1lYUnBkbVZmYzNCaFkyVTdDaUFnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1MmFXVjNJRDBnYVdSbGJuUnBkSGs3Q2lBZ0lDQWdJQ0FnY0d4dmRGOWtZWFJoTG5WdWFXWnZjbTF6TG5CeWIycGxZM1JwYjI0Z1BTQnBaR1Z1ZEdsMGVUc0tJQ0FnSUNBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXVjSEp2YW1WamRHbHZiblpwWlhjZ1BTQnBaR1Z1ZEdsMGVUc0tJQ0FnSUgwS0lDQWdJR052Ym5OMElIc2djSGhmY0dWeVgzVnVhWFFnSUgwZ1BTQnpZMlZ1WlM1elkzSmxaVzQ3Q2lBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXVjbVZ6YjJ4MWRHbHZiaUE5SUdOaGJTNXlaWE52YkhWMGFXOXVPd29nSUNBZ2NHeHZkRjlrWVhSaExuVnVhV1p2Y20xekxuQjRYM0JsY2w5MWJtbDBJRDBnYm1WM0lHMXZaQzVWYm1sbWIzSnRLSEI0WDNCbGNsOTFibWwwS1RzS0lDQWdJR2xtSUNod2JHOTBYMlJoZEdFdWRXNXBabTl5YlhNdWNISmxjSEp2YW1WamRHbHZiaWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJSHNnYzNCaFkyVWdMQ0J0WVhKclpYSnpjR0ZqWlNBZ2ZTQTlJSEJzYjNSZlpHRjBZVHNLSUNBZ0lDQWdJQ0J3Ykc5MFgyUmhkR0V1ZFc1cFptOXliWE11Y0hKbGNISnZhbVZqZEdsdmJpQTlJR05oYlM1d2NtVndjbTlxWldOMGFXOXVYMjFoZEhKcGVDaHpjR0ZqWlM1MllXeDFaU3dnYldGeWEyVnljM0JoWTJVdWRtRnNkV1VwT3dvZ0lDQWdmUW9nSUNBZ2FXWWdLSE5qWlc1bExtTmhiV1Z5WVY5eVpXeGhkR2wyWlY5c2FXZG9kQ2tnZXdvZ0lDQWdJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1c2FXZG9kRjlrYVhKbFkzUnBiMjRnUFNCallXMHViR2xuYUhSZlpHbHlaV04wYVc5dU93b2dJQ0FnSUNBZ0lITmpaVzVsTG14cFoyaDBYMlJwY21WamRHbHZiaTV2Ymlnb2RtRnNkV1VwUFQ1N0NpQWdJQ0FnSUNBZ0lDQWdJR05oYlM1MWNHUmhkR1ZmYkdsbmFIUmZaR2x5S0haaGJIVmxLVHNLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2JHbG5hSFJmWkdseUlEMGdibVYzSUcxdlpDNVdaV04wYjNJektDa3Vabkp2YlVGeWNtRjVLSE5qWlc1bExteHBaMmgwWDJScGNtVmpkR2x2Ymk1MllXeDFaU2s3Q2lBZ0lDQWdJQ0FnY0d4dmRGOWtZWFJoTG5WdWFXWnZjbTF6TG14cFoyaDBYMlJwY21WamRHbHZiaUE5SUc1bGR5QnRiMlF1Vlc1cFptOXliU2hzYVdkb2RGOWthWElwT3dvZ0lDQWdJQ0FnSUhOalpXNWxMbXhwWjJoMFgyUnBjbVZqZEdsdmJpNXZiaWdvZG1Gc2RXVXBQVDU3Q2lBZ0lDQWdJQ0FnSUNBZ0lIQnNiM1JmWkdGMFlTNTFibWxtYjNKdGN5NXNhV2RvZEY5a2FYSmxZM1JwYjI0dWRtRnNkV1V1Wm5KdmJVRnljbUY1S0haaGJIVmxLVHNLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJSDBLSUNBZ0lHTnZibk4wSUhBZ1BTQmtaWE5sY21saGJHbDZaVjl3Ykc5MEtIQnNiM1JmWkdGMFlTazdDaUFnSUNCd2JHOTBYMk5oWTJobFczQXVjR3h2ZEY5MWRXbGtYU0E5SUhBN0NpQWdJQ0J6WTJWdVpTNWhaR1FvY0NrN0NpQWdJQ0JqYjI1emRDQnVaWGgwWDJsdWMyVnlkQ0E5SUc1bGR5QlRaWFFvVDA1ZlRrVllWRjlKVGxORlVsUXBPd29nSUNBZ2JtVjRkRjlwYm5ObGNuUXVabTl5UldGamFDZ29aaWs5UG1Zb0tTazdDbjBLWm5WdVkzUnBiMjRnWTI5dWJtVmpkRjkxYm1sbWIzSnRjeWh0WlhOb0xDQjFjR1JoZEdWeUtTQjdDaUFnSUNCMWNHUmhkR1Z5TG05dUtDaGJibUZ0WlN3Z1pHRjBZVjBwUFQ1N0NpQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ1BUMDlJQ0p1YjI1bElpa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdOdmJuTjBJSFZ1YVdadmNtMGdQU0J0WlhOb0xtMWhkR1Z5YVdGc0xuVnVhV1p2Y20xelcyNWhiV1ZkT3dvZ0lDQWdJQ0FnSUdsbUlDaDFibWxtYjNKdExuWmhiSFZsTG1selZHVjRkSFZ5WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBiVjlrWVhSaElEMGdkVzVwWm05eWJTNTJZV3gxWlM1cGJXRm5aVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnVzNOcGVtVXNJSFJsZUY5a1lYUmhYU0E5SUdSaGRHRTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBaWGhmWkdGMFlTNXNaVzVuZEdnZ1BUMGdhVzFmWkdGMFlTNWtZWFJoTG14bGJtZDBhQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVcxZlpHRjBZUzVrWVhSaExuTmxkQ2gwWlhoZlpHRjBZU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J2YkdSZmRHVjRkSFZ5WlNBOUlIVnVhV1p2Y20wdWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRMblpoYkhWbElEMGdjbVZmWTNKbFlYUmxYM1JsZUhSMWNtVW9iMnhrWDNSbGVIUjFjbVVzSUhSbGVGOWtZWFJoTENCemFYcGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlzWkY5MFpYaDBkWEpsTG1ScGMzQnZjMlVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCMWJtbG1iM0p0TG5aaGJIVmxMbTVsWldSelZYQmtZWFJsSUQwZ2RISjFaVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5mZEdoeVpXVmZabWw0WldSZllYSnlZWGtvZFc1cFptOXliUzUyWVd4MVpTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1YVdadmNtMHVkbUZzZFdVdVpuSnZiVUZ5Y21GNUtHUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RXNXBabTl5YlM1MllXeDFaU0E5SUdSaGRHRTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5S1RzS2ZRcG1kVzVqZEdsdmJpQmpiMjUyWlhKMFgxSkhRbDkwYjE5U1IwSkJLSEpuWWtGeWNtRjVLU0I3Q2lBZ0lDQmpiMjV6ZENCc1pXNW5kR2dnUFNCeVoySkJjbkpoZVM1c1pXNW5kR2c3Q2lBZ0lDQmpiMjV6ZENCeVoySmhRWEp5WVhrZ1BTQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtHeGxibWQwYUNBdklETWdLaUEwS1RzS0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lHb2dQU0F3T3lCcElEd2diR1Z1WjNSb095QnBJQ3M5SURNc0lHb2dLejBnTkNsN0NpQWdJQ0FnSUNBZ2NtZGlZVUZ5Y21GNVcycGRJRDBnY21kaVFYSnlZWGxiYVYwN0NpQWdJQ0FnSUNBZ2NtZGlZVUZ5Y21GNVcyb2dLeUF4WFNBOUlISm5Za0Z5Y21GNVcya2dLeUF4WFRzS0lDQWdJQ0FnSUNCeVoySmhRWEp5WVhsYmFpQXJJREpkSUQwZ2NtZGlRWEp5WVhsYmFTQXJJREpkT3dvZ0lDQWdJQ0FnSUhKblltRkJjbkpoZVZ0cUlDc2dNMTBnUFNBeExqQTdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdjbWRpWVVGeWNtRjVPd3A5Q21aMWJtTjBhVzl1SUdOeVpXRjBaVjkwWlhoMGRYSmxLR1JoZEdFcElIc0tJQ0FnSUdOdmJuTjBJR0oxWm1abGNpQTlJR1JoZEdFdVpHRjBZVHNLSUNBZ0lHbG1JQ2hrWVhSaExuTnBlbVV1YkdWdVozUm9JRDA5SURNcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCMFpYZ2dQU0J1WlhjZ2JXOWtMa1JoZEdFelJGUmxlSFIxY21Vb1luVm1abVZ5TENCa1lYUmhMbk5wZW1WYk1GMHNJR1JoZEdFdWMybDZaVnN4WFN3Z1pHRjBZUzV6YVhwbFd6SmRLVHNLSUNBZ0lDQWdJQ0IwWlhndVptOXliV0YwSUQwZ2JXOWtXMlJoZEdFdWRHaHlaV1ZmWm05eWJXRjBYVHNLSUNBZ0lDQWdJQ0IwWlhndWRIbHdaU0E5SUcxdlpGdGtZWFJoTG5Sb2NtVmxYM1I1Y0dWZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMFpYZzdDaUFnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBaWGhmWkdGMFlUc0tJQ0FnSUNBZ0lDQnBaaUFvWW5WbVptVnlJRDA5SUNKMFpYaDBkWEpsWDJGMGJHRnpJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBaWGhmWkdGMFlTQTlJRlJGV0ZSVlVrVmZRVlJNUVZOYk1GMHVkbUZzZFdVN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0WDJSaGRHRWdQU0JpZFdabVpYSTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCbWIzSnRZWFFnUFNCdGIyUmJaR0YwWVM1MGFISmxaVjltYjNKdFlYUmRPd29nSUNBZ0lDQWdJR2xtSUNoa1lYUmhMblJvY21WbFgyWnZjbTFoZENBOVBTQWlVa2RDUm05eWJXRjBJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBaWGhmWkdGMFlTQTlJR052Ym5abGNuUmZVa2RDWDNSdlgxSkhRa0VvZEdWNFgyUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0p0WVhRZ1BTQnRiMlF1VWtkQ1FVWnZjbTFoZERzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QnRiMlF1UkdGMFlWUmxlSFIxY21Vb2RHVjRYMlJoZEdFc0lHUmhkR0V1YzJsNlpWc3dYU3dnWkdGMFlTNXphWHBsV3pGZExDQm1iM0p0WVhRc0lHMXZaRnRrWVhSaExuUm9jbVZsWDNSNWNHVmRLVHNLSUNBZ0lIMEtmUXBtZFc1amRHbHZiaUJ5WlY5amNtVmhkR1ZmZEdWNGRIVnlaU2h2YkdSZmRHVjRkSFZ5WlN3Z1luVm1abVZ5TENCemFYcGxLU0I3Q2lBZ0lDQnNaWFFnZEdWNE93b2dJQ0FnYVdZZ0tITnBlbVV1YkdWdVozUm9JRDA5SURNcElIc0tJQ0FnSUNBZ0lDQjBaWGdnUFNCdVpYY2diVzlrTGtSaGRHRXpSRlJsZUhSMWNtVW9ZblZtWm1WeUxDQnphWHBsV3pCZExDQnphWHBsV3pGZExDQnphWHBsV3pKZEtUc0tJQ0FnSUNBZ0lDQjBaWGd1Wm05eWJXRjBJRDBnYjJ4a1gzUmxlSFIxY21VdVptOXliV0YwT3dvZ0lDQWdJQ0FnSUhSbGVDNTBlWEJsSUQwZ2IyeGtYM1JsZUhSMWNtVXVkSGx3WlRzS0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdkR1Y0SUQwZ2JtVjNJRzF2WkM1RVlYUmhWR1Y0ZEhWeVpTaGlkV1ptWlhJc0lITnBlbVZiTUYwc0lITnBlbVZiTVYwZ1B5QnphWHBsV3pGZElEb2dNU3dnYjJ4a1gzUmxlSFIxY21VdVptOXliV0YwTENCdmJHUmZkR1Y0ZEhWeVpTNTBlWEJsS1RzS0lDQWdJSDBLSUNBZ0lIUmxlQzV0YVc1R2FXeDBaWElnUFNCdmJHUmZkR1Y0ZEhWeVpTNXRhVzVHYVd4MFpYSTdDaUFnSUNCMFpYZ3ViV0ZuUm1sc2RHVnlJRDBnYjJ4a1gzUmxlSFIxY21VdWJXRm5SbWxzZEdWeU93b2dJQ0FnZEdWNExtRnVhWE52ZEhKdmNIa2dQU0J2YkdSZmRHVjRkSFZ5WlM1aGJtbHpiM1J5YjNCNU93b2dJQ0FnZEdWNExuZHlZWEJUSUQwZ2IyeGtYM1JsZUhSMWNtVXVkM0poY0ZNN0NpQWdJQ0JwWmlBb2MybDZaUzVzWlc1bmRHZ2dQaUF4S1NCN0NpQWdJQ0FnSUNBZ2RHVjRMbmR5WVhCVUlEMGdiMnhrWDNSbGVIUjFjbVV1ZDNKaGNGUTdDaUFnSUNCOUNpQWdJQ0JwWmlBb2MybDZaUzVzWlc1bmRHZ2dQaUF5S1NCN0NpQWdJQ0FnSUNBZ2RHVjRMbmR5WVhCU0lEMGdiMnhrWDNSbGVIUjFjbVV1ZDNKaGNGSTdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdkR1Y0T3dwOUNtWjFibU4wYVc5dUlFSjFabVpsY2tGMGRISnBZblYwWlNoaWRXWm1aWElwSUhzS0lDQWdJR052Ym5OMElHcHpZblZtWmlBOUlHNWxkeUJ0YjJRdVFuVm1abVZ5UVhSMGNtbGlkWFJsS0dKMVptWmxjaTVtYkdGMExDQmlkV1ptWlhJdWRIbHdaVjlzWlc1bmRHZ3BPd29nSUNBZ2FuTmlkV1ptTG5ObGRGVnpZV2RsS0cxdlpDNUVlVzVoYldsalJISmhkMVZ6WVdkbEtUc0tJQ0FnSUhKbGRIVnliaUJxYzJKMVptWTdDbjBLWm5WdVkzUnBiMjRnU1c1emRHRnVZMlZDZFdabVpYSkJkSFJ5YVdKMWRHVW9ZblZtWm1WeUtTQjdDaUFnSUNCamIyNXpkQ0JxYzJKMVptWWdQU0J1WlhjZ2JXOWtMa2x1YzNSaGJtTmxaRUoxWm1abGNrRjBkSEpwWW5WMFpTaGlkV1ptWlhJdVpteGhkQ3dnWW5WbVptVnlMblI1Y0dWZmJHVnVaM1JvS1RzS0lDQWdJR3B6WW5WbVppNXpaWFJWYzJGblpTaHRiMlF1UkhsdVlXMXBZMFJ5WVhkVmMyRm5aU2s3Q2lBZ0lDQnlaWFIxY200Z2FuTmlkV1ptT3dwOUNtWjFibU4wYVc5dUlHRjBkR0ZqYUY5blpXOXRaWFJ5ZVNoaWRXWm1aWEpmWjJWdmJXVjBjbmtzSUhabGNuUmxlR0Z5Y21GNWN5d2dabUZqWlhNcElIc0tJQ0FnSUdadmNpaGpiMjV6ZENCdVlXMWxJR2x1SUhabGNuUmxlR0Z5Y21GNWN5bDdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1luVm1aaUE5SUhabGNuUmxlR0Z5Y21GNWMxdHVZVzFsWFRzS0lDQWdJQ0FnSUNCc1pYUWdZblZtWm1WeU93b2dJQ0FnSUNBZ0lHbG1JQ2hpZFdabUxuUnZYM1Z3WkdGMFpTa2dld29nSUNBZ0lDQWdJQ0FnSUNCaWRXWm1aWElnUFNCdVpYY2diVzlrTGtKMVptWmxja0YwZEhKcFluVjBaU2hpZFdabUxuUnZYM1Z3WkdGMFpTd2dZblZtWmk1cGRHVnRVMmw2WlNrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZblZtWm1WeUlEMGdRblZtWm1WeVFYUjBjbWxpZFhSbEtHSjFabVlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCaWRXWm1aWEpmWjJWdmJXVjBjbmt1YzJWMFFYUjBjbWxpZFhSbEtHNWhiV1VzSUdKMVptWmxjaWs3Q2lBZ0lDQjlDaUFnSUNCaWRXWm1aWEpmWjJWdmJXVjBjbmt1YzJWMFNXNWtaWGdvWm1GalpYTXBPd29nSUNBZ1luVm1abVZ5WDJkbGIyMWxkSEo1TG1KdmRXNWthVzVuVTNCb1pYSmxJRDBnYm1WM0lHMXZaQzVUY0dobGNtVW9LVHNLSUNBZ0lHSjFabVpsY2w5blpXOXRaWFJ5ZVM1aWIzVnVaR2x1WjFOd2FHVnlaUzV5WVdScGRYTWdQU0F4TURBd01EQXdNREF3TURBd01Ec0tJQ0FnSUdKMVptWmxjbDluWlc5dFpYUnllUzVtY25WemRIVnRRM1ZzYkdWa0lEMGdabUZzYzJVN0NpQWdJQ0J5WlhSMWNtNGdZblZtWm1WeVgyZGxiMjFsZEhKNU93cDlDbVoxYm1OMGFXOXVJR0YwZEdGamFGOXBibk4wWVc1alpXUmZaMlZ2YldWMGNua29ZblZtWm1WeVgyZGxiMjFsZEhKNUxDQnBibk4wWVc1alpWOWhkSFJ5YVdKMWRHVnpLU0I3Q2lBZ0lDQm1iM0lvWTI5dWMzUWdibUZ0WlNCcGJpQnBibk4wWVc1alpWOWhkSFJ5YVdKMWRHVnpLWHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmlkV1ptWlhJZ1BTQkpibk4wWVc1alpVSjFabVpsY2tGMGRISnBZblYwWlNocGJuTjBZVzVqWlY5aGRIUnlhV0oxZEdWelcyNWhiV1ZkS1RzS0lDQWdJQ0FnSUNCaWRXWm1aWEpmWjJWdmJXVjBjbmt1YzJWMFFYUjBjbWxpZFhSbEtHNWhiV1VzSUdKMVptWmxjaWs3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnY21WamNtVmhkR1ZmWjJWdmJXVjBjbmtvYldWemFDd2dkbVZ5ZEdWNFlYSnlZWGx6TENCbVlXTmxjeWtnZXdvZ0lDQWdZMjl1YzNRZ1luVm1abVZ5WDJkbGIyMWxkSEo1SUQwZ2JtVjNJRzF2WkM1Q2RXWm1aWEpIWlc5dFpYUnllU2dwT3dvZ0lDQWdZWFIwWVdOb1gyZGxiMjFsZEhKNUtHSjFabVpsY2w5blpXOXRaWFJ5ZVN3Z2RtVnlkR1Y0WVhKeVlYbHpMQ0JtWVdObGN5azdDaUFnSUNCdFpYTm9MbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LVHNLSUNBZ0lHMWxjMmd1WjJWdmJXVjBjbmtnUFNCaWRXWm1aWEpmWjJWdmJXVjBjbms3Q2lBZ0lDQnRaWE5vTG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlRzS2ZRcG1kVzVqZEdsdmJpQnlaV055WldGMFpWOXBibk4wWVc1alpXUmZaMlZ2YldWMGNua29iV1Z6YUNrZ2V3b2dJQ0FnWTI5dWMzUWdZblZtWm1WeVgyZGxiMjFsZEhKNUlEMGdibVYzSUcxdlpDNUpibk4wWVc1alpXUkNkV1ptWlhKSFpXOXRaWFJ5ZVNncE93b2dJQ0FnWTI5dWMzUWdkbVZ5ZEdWNFlYSnlZWGx6SUQwZ2UzMDdDaUFnSUNCamIyNXpkQ0JwYm5OMFlXNWpaVjloZEhSeWFXSjFkR1Z6SUQwZ2UzMDdDaUFnSUNCamIyNXpkQ0JtWVdObGN5QTlJRnNLSUNBZ0lDQWdJQ0F1TGk1dFpYTm9MbWRsYjIxbGRISjVMbWx1WkdWNExtRnljbUY1Q2lBZ0lDQmRPd29nSUNBZ1QySnFaV04wTG10bGVYTW9iV1Z6YUM1blpXOXRaWFJ5ZVM1aGRIUnlhV0oxZEdWektTNW1iM0pGWVdOb0tDaHVZVzFsS1QwK2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdKMVptWmxjaUE5SUcxbGMyZ3VaMlZ2YldWMGNua3VZWFIwY21saWRYUmxjMXR1WVcxbFhUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCamIzQjVJRDBnWW5WbVptVnlMblJ2WDNWd1pHRjBaU0EvSUdKMVptWmxjaTUwYjE5MWNHUmhkR1VnT2lCaWRXWm1aWEl1WVhKeVlYa3ViV0Z3S0NoNEtUMCtlQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHSjFabVpsY2k1cGMwbHVjM1JoYm1ObFpFSjFabVpsY2tGMGRISnBZblYwWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwYm5OMFlXNWpaVjloZEhSeWFXSjFkR1Z6VzI1aGJXVmRJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm14aGREb2dZMjl3ZVN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVmZiR1Z1WjNSb09pQmlkV1ptWlhJdWFYUmxiVk5wZW1VS0lDQWdJQ0FnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhoY25KaGVYTmJibUZ0WlYwZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iR0YwT2lCamIzQjVMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlY5c1pXNW5kR2c2SUdKMVptWmxjaTVwZEdWdFUybDZaUW9nSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwcE93b2dJQ0FnWVhSMFlXTm9YMmRsYjIxbGRISjVLR0oxWm1abGNsOW5aVzl0WlhSeWVTd2dkbVZ5ZEdWNFlYSnlZWGx6TENCbVlXTmxjeWs3Q2lBZ0lDQmhkSFJoWTJoZmFXNXpkR0Z1WTJWa1gyZGxiMjFsZEhKNUtHSjFabVpsY2w5blpXOXRaWFJ5ZVN3Z2FXNXpkR0Z1WTJWZllYUjBjbWxpZFhSbGN5azdDaUFnSUNCdFpYTm9MbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LVHNLSUNBZ0lHMWxjMmd1WjJWdmJXVjBjbmtnUFNCaWRXWm1aWEpmWjJWdmJXVjBjbms3Q2lBZ0lDQnRaWE5vTG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlRzS2ZRcG1kVzVqZEdsdmJpQmpjbVZoZEdWZmJXRjBaWEpwWVd3b2NISnZaM0poYlNrZ2V3b2dJQ0FnWTI5dWMzUWdhWE5mZG05c2RXMWxJRDBnSW5admJIVnRaV1JoZEdFaUlHbHVJSEJ5YjJkeVlXMHVkVzVwWm05eWJYTTdDaUFnSUNCeVpYUjFjbTRnYm1WM0lHMXZaQzVTWVhkVGFHRmtaWEpOWVhSbGNtbGhiQ2g3Q2lBZ0lDQWdJQ0FnZFc1cFptOXliWE02SUdSbGMyVnlhV0ZzYVhwbFgzVnVhV1p2Y20xektIQnliMmR5WVcwdWRXNXBabTl5YlhNcExBb2dJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nY0hKdlozSmhiUzUyWlhKMFpYaGZjMjkxY21ObExBb2dJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCd2NtOW5jbUZ0TG1aeVlXZHRaVzUwWDNOdmRYSmpaU3dLSUNBZ0lDQWdJQ0J6YVdSbE9pQnBjMTkyYjJ4MWJXVWdQeUJ0YjJRdVFtRmphMU5wWkdVZ09pQnRiMlF1Ukc5MVlteGxVMmxrWlN3S0lDQWdJQ0FnSUNCMGNtRnVjM0JoY21WdWREb2dkSEoxWlN3S0lDQWdJQ0FnSUNCbmJITnNWbVZ5YzJsdmJqb2diVzlrTGtkTVUwd3pMQW9nSUNBZ0lDQWdJR1JsY0hSb1ZHVnpkRG9nSVhCeWIyZHlZVzB1YjNabGNtUnlZWGN1ZG1Gc2RXVXNDaUFnSUNBZ0lDQWdaR1Z3ZEdoWGNtbDBaVG9nSVhCeWIyZHlZVzB1ZEhKaGJuTndZWEpsYm1ONUxuWmhiSFZsQ2lBZ0lDQjlLVHNLZlFwbWRXNWpkR2x2YmlCamNtVmhkR1ZmYldWemFDaHdjbTluY21GdEtTQjdDaUFnSUNCamIyNXpkQ0JpZFdabVpYSmZaMlZ2YldWMGNua2dQU0J1WlhjZ2JXOWtMa0oxWm1abGNrZGxiMjFsZEhKNUtDazdDaUFnSUNCamIyNXpkQ0JtWVdObGN5QTlJRzVsZHlCdGIyUXVRblZtWm1WeVFYUjBjbWxpZFhSbEtIQnliMmR5WVcwdVptRmpaWE11ZG1Gc2RXVXNJREVwT3dvZ0lDQWdZWFIwWVdOb1gyZGxiMjFsZEhKNUtHSjFabVpsY2w5blpXOXRaWFJ5ZVN3Z2NISnZaM0poYlM1MlpYSjBaWGhoY25KaGVYTXNJR1poWTJWektUc0tJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNJRDBnWTNKbFlYUmxYMjFoZEdWeWFXRnNLSEJ5YjJkeVlXMHBPd29nSUNBZ1kyOXVjM1FnYldWemFDQTlJRzVsZHlCdGIyUXVUV1Z6YUNoaWRXWm1aWEpmWjJWdmJXVjBjbmtzSUcxaGRHVnlhV0ZzS1RzS0lDQWdJSEJ5YjJkeVlXMHVabUZqWlhNdWIyNG9LSGdwUFQ1N0NpQWdJQ0FnSUNBZ2JXVnphQzVuWlc5dFpYUnllUzV6WlhSSmJtUmxlQ2h1WlhjZ2JXOWtMa0oxWm1abGNrRjBkSEpwWW5WMFpTaDRMQ0F4S1NrN0NpQWdJQ0I5S1RzS0lDQWdJSEpsZEhWeWJpQnRaWE5vT3dwOUNtWjFibU4wYVc5dUlHTnlaV0YwWlY5cGJuTjBZVzVqWldSZmJXVnphQ2h3Y205bmNtRnRLU0I3Q2lBZ0lDQmpiMjV6ZENCaWRXWm1aWEpmWjJWdmJXVjBjbmtnUFNCdVpYY2diVzlrTGtsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVLQ2s3Q2lBZ0lDQmpiMjV6ZENCbVlXTmxjeUE5SUc1bGR5QnRiMlF1UW5WbVptVnlRWFIwY21saWRYUmxLSEJ5YjJkeVlXMHVabUZqWlhNdWRtRnNkV1VzSURFcE93b2dJQ0FnWVhSMFlXTm9YMmRsYjIxbGRISjVLR0oxWm1abGNsOW5aVzl0WlhSeWVTd2djSEp2WjNKaGJTNTJaWEowWlhoaGNuSmhlWE1zSUdaaFkyVnpLVHNLSUNBZ0lHRjBkR0ZqYUY5cGJuTjBZVzVqWldSZloyVnZiV1YwY25rb1luVm1abVZ5WDJkbGIyMWxkSEo1TENCd2NtOW5jbUZ0TG1sdWMzUmhibU5sWDJGMGRISnBZblYwWlhNcE93b2dJQ0FnWTI5dWMzUWdiV0YwWlhKcFlXd2dQU0JqY21WaGRHVmZiV0YwWlhKcFlXd29jSEp2WjNKaGJTazdDaUFnSUNCamIyNXpkQ0J0WlhOb0lEMGdibVYzSUcxdlpDNU5aWE5vS0dKMVptWmxjbDluWlc5dFpYUnllU3dnYldGMFpYSnBZV3dwT3dvZ0lDQWdjSEp2WjNKaGJTNW1ZV05sY3k1dmJpZ29lQ2s5UG5zS0lDQWdJQ0FnSUNCdFpYTm9MbWRsYjIxbGRISjVMbk5sZEVsdVpHVjRLRzVsZHlCdGIyUXVRblZtWm1WeVFYUjBjbWxpZFhSbEtIZ3NJREVwS1RzS0lDQWdJSDBwT3dvZ0lDQWdjbVYwZFhKdUlHMWxjMmc3Q24wS1puVnVZM1JwYjI0Z1ptbHljM1FvZUNrZ2V3b2dJQ0FnY21WMGRYSnVJSGhiVDJKcVpXTjBMbXRsZVhNb2VDbGJNRjFkT3dwOUNtWjFibU4wYVc5dUlHTnZibTVsWTNSZllYUjBjbWxpZFhSbGN5aHRaWE5vTENCMWNHUmhkR1Z5S1NCN0NpQWdJQ0JqYjI1emRDQnBibk4wWVc1alpWOWlkV1ptWlhKeklEMGdlMzA3Q2lBZ0lDQmpiMjV6ZENCblpXOXRaWFJ5ZVY5aWRXWm1aWEp6SUQwZ2UzMDdDaUFnSUNCc1pYUWdabWx5YzNSZmFXNXpkR0Z1WTJWZlluVm1abVZ5T3dvZ0lDQWdZMjl1YzNRZ2NtVmhiRjlwYm5OMFlXNWpaVjlzWlc1bmRHZ2dQU0JiQ2lBZ0lDQWdJQ0FnTUFvZ0lDQWdYVHNLSUNBZ0lHeGxkQ0JtYVhKemRGOW5aVzl0WlhSeWVWOWlkV1ptWlhJN0NpQWdJQ0JqYjI1emRDQnlaV0ZzWDJkbGIyMWxkSEo1WDJ4bGJtZDBhQ0E5SUZzS0lDQWdJQ0FnSUNBd0NpQWdJQ0JkT3dvZ0lDQWdablZ1WTNScGIyNGdjbVZmWVhOemFXZHVYMkoxWm1abGNuTW9LU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZWFIwY21saWRYUmxjeUE5SUcxbGMyZ3VaMlZ2YldWMGNua3VZWFIwY21saWRYUmxjenNLSUNBZ0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loaGRIUnlhV0oxZEdWektTNW1iM0pGWVdOb0tDaHVZVzFsS1QwK2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmlkV1ptWlhJZ1BTQmhkSFJ5YVdKMWRHVnpXMjVoYldWZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1luVm1abVZ5TG1selNXNXpkR0Z1WTJWa1FuVm1abVZ5UVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuTjBZVzVqWlY5aWRXWm1aWEp6VzI1aGJXVmRJRDBnWW5WbVptVnlPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJWdmJXVjBjbmxmWW5WbVptVnljMXR1WVcxbFhTQTlJR0oxWm1abGNqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHWnBjbk4wWDJsdWMzUmhibU5sWDJKMVptWmxjaUE5SUdacGNuTjBLR2x1YzNSaGJtTmxYMkoxWm1abGNuTXBPd29nSUNBZ0lDQWdJR2xtSUNobWFYSnpkRjlwYm5OMFlXNWpaVjlpZFdabVpYSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVmhiRjlwYm5OMFlXNWpaVjlzWlc1bmRHaGJNRjBnUFNCbWFYSnpkRjlwYm5OMFlXNWpaVjlpZFdabVpYSXVZMjkxYm5RN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnBjbk4wWDJkbGIyMWxkSEo1WDJKMVptWmxjaUE5SUdacGNuTjBLR2RsYjIxbGRISjVYMkoxWm1abGNuTXBPd29nSUNBZ0lDQWdJSEpsWVd4ZloyVnZiV1YwY25sZmJHVnVaM1JvV3pCZElEMGdabWx5YzNSZloyVnZiV1YwY25sZlluVm1abVZ5TG1OdmRXNTBPd29nSUNBZ2ZRb2dJQ0FnY21WZllYTnphV2R1WDJKMVptWmxjbk1vS1RzS0lDQWdJSFZ3WkdGMFpYSXViMjRvS0Z0dVlXMWxMQ0J1WlhkZmRtRnNkV1Z6TENCc1pXNW5kR2hkS1QwK2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdKMVptWmxjaUE5SUcxbGMyZ3VaMlZ2YldWMGNua3VZWFIwY21saWRYUmxjMXR1WVcxbFhUc0tJQ0FnSUNBZ0lDQnNaWFFnWW5WbVptVnljenNLSUNBZ0lDQWdJQ0JzWlhRZ2NtVmhiRjlzWlc1bmRHZzdDaUFnSUNBZ0lDQWdiR1YwSUdselgybHVjM1JoYm1ObElEMGdabUZzYzJVN0NpQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ2FXNGdhVzV6ZEdGdVkyVmZZblZtWm1WeWN5a2dld29nSUNBZ0lDQWdJQ0FnSUNCaWRXWm1aWEp6SUQwZ2FXNXpkR0Z1WTJWZlluVm1abVZ5Y3pzS0lDQWdJQ0FnSUNBZ0lDQWdabWx5YzNSZmFXNXpkR0Z1WTJWZlluVm1abVZ5T3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaV0ZzWDJ4bGJtZDBhQ0E5SUhKbFlXeGZhVzV6ZEdGdVkyVmZiR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0JwYzE5cGJuTjBZVzVqWlNBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1luVm1abVZ5Y3lBOUlHZGxiMjFsZEhKNVgySjFabVpsY25NN0NpQWdJQ0FnSUNBZ0lDQWdJR1pwY25OMFgyZGxiMjFsZEhKNVgySjFabVpsY2pzS0lDQWdJQ0FnSUNBZ0lDQWdjbVZoYkY5c1pXNW5kR2dnUFNCeVpXRnNYMmRsYjIxbGRISjVYMnhsYm1kMGFEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0d4bGJtZDBhQ0E4UFNCeVpXRnNYMnhsYm1kMGFGc3dYU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJdWMyVjBLRzVsZDE5MllXeDFaWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJdWJtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTmZhVzV6ZEdGdVkyVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzJndVoyVnZiV1YwY25rdWFXNXpkR0Z1WTJWRGIzVnVkQ0E5SUd4bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR0oxWm1abGNpNTBiMTkxY0dSaGRHVWdQU0J1WlhkZmRtRnNkV1Z6T3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGJHeGZhR0YyWlY5ellXMWxYMnhsYm1kMGFDQTlJRTlpYW1WamRDNTJZV3gxWlhNb1luVm1abVZ5Y3lrdVpYWmxjbmtvS0hncFBUNTRMblJ2WDNWd1pHRjBaU0FtSmlCNExuUnZYM1Z3WkdGMFpTNXNaVzVuZEdnZ0x5QjRMbWwwWlcxVGFYcGxJRDA5SUd4bGJtZDBhQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoYkd4ZmFHRjJaVjl6WVcxbFgyeGxibWQwYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6WDJsdWMzUmhibU5sS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZqY21WaGRHVmZhVzV6ZEdGdVkyVmtYMmRsYjIxbGRISjVLRzFsYzJncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWDJGemMybG5ibDlpZFdabVpYSnpLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnphQzVuWlc5dFpYUnllUzVwYm5OMFlXNWpaVU52ZFc1MElEMGdibVYzWDNaaGJIVmxjeTVzWlc1bmRHZ2dMeUJpZFdabVpYSXVhWFJsYlZOcGVtVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWTNKbFlYUmxYMmRsYjIxbGRISjVLRzFsYzJnc0lHSjFabVpsY25Nc0lHMWxjMmd1WjJWdmJXVjBjbmt1YVc1a1pYZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFgyRnpjMmxuYmw5aWRXWm1aWEp6S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlLVHNLZlFwbWRXNWpkR2x2YmlCa1pYTmxjbWxoYkdsNlpWOXpZMlZ1WlNoa1lYUmhMQ0J6WTNKbFpXNHBJSHNLSUNBZ0lHTnZibk4wSUhOalpXNWxJRDBnYm1WM0lHMXZaQzVUWTJWdVpTZ3BPd29nSUNBZ2MyTmxibVV1YzJOeVpXVnVJRDBnYzJOeVpXVnVPd29nSUNBZ1kyOXVjM1FnZXlCallXNTJZWE1nSUgwZ1BTQnpZM0psWlc0N0NpQWdJQ0JoWkdSZmMyTmxibVVvWkdGMFlTNTFkV2xrTENCelkyVnVaU2s3Q2lBZ0lDQnpZMlZ1WlM1elkyVnVaVjkxZFdsa0lEMGdaR0YwWVM1MWRXbGtPd29nSUNBZ2MyTmxibVV1Wm5KMWMzUjFiVU4xYkd4bFpDQTlJR1poYkhObE93b2dJQ0FnYzJObGJtVXVkbWxsZDNCdmNuUWdQU0JrWVhSaExuWnBaWGR3YjNKME93b2dJQ0FnYzJObGJtVXVZbUZqYTJkeWIzVnVaR052Ykc5eUlEMGdaR0YwWVM1aVlXTnJaM0p2ZFc1a1kyOXNiM0k3Q2lBZ0lDQnpZMlZ1WlM1aVlXTnJaM0p2ZFc1a1kyOXNiM0pmWVd4d2FHRWdQU0JrWVhSaExtSmhZMnRuY205MWJtUmpiMnh2Y2w5aGJIQm9ZVHNLSUNBZ0lITmpaVzVsTG1Oc1pXRnljMk5sYm1VZ1BTQmtZWFJoTG1Oc1pXRnljMk5sYm1VN0NpQWdJQ0J6WTJWdVpTNTJhWE5wWW14bElEMGdaR0YwWVM1MmFYTnBZbXhsT3dvZ0lDQWdjMk5sYm1VdVkyRnRaWEpoWDNKbGJHRjBhWFpsWDJ4cFoyaDBJRDBnWkdGMFlTNWpZVzFsY21GZmNtVnNZWFJwZG1WZmJHbG5hSFE3Q2lBZ0lDQnpZMlZ1WlM1c2FXZG9kRjlrYVhKbFkzUnBiMjRnUFNCa1lYUmhMbXhwWjJoMFgyUnBjbVZqZEdsdmJqc0tJQ0FnSUdOdmJuTjBJR05oYldWeVlTQTlJRzVsZHlCTllXdHBaVU5oYldWeVlTZ3BPd29nSUNBZ2MyTmxibVV1ZDJkc1gyTmhiV1Z5WVNBOUlHTmhiV1Z5WVRzS0lDQWdJR1oxYm1OMGFXOXVJSFZ3WkdGMFpWOWpZVzBvWTJGdFpYSmhYMjFoZEhKcFkyVnpMQ0JtYjNKalpTa2dld29nSUNBZ0lDQWdJR2xtSUNnaFptOXlZMlVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFb1NsTlRaWEoyWlM1allXNWZjMlZ1WkY5MGIxOXFkV3hwWVNBbUppQktVMU5sY25abExtTmhibDl6Wlc1a1gzUnZYMnAxYkdsaEtDa3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1kyOXVjM1FnVzNacFpYY3NJSEJ5YjJwbFkzUnBiMjRzSUhKbGMyOXNkWFJwYjI0c0lHVjVaWEJ2YzEwZ1BTQmpZVzFsY21GZmJXRjBjbWxqWlhNN0NpQWdJQ0FnSUNBZ1kyRnRaWEpoTG5Wd1pHRjBaVjl0WVhSeWFXTmxjeWgyYVdWM0xDQndjbTlxWldOMGFXOXVMQ0J5WlhOdmJIVjBhVzl1TENCbGVXVndiM01wT3dvZ0lDQWdmUW9nSUNBZ2FXWWdLR1JoZEdFdVkyRnRNMlJmYzNSaGRHVXBJSHNLSUNBZ0lDQWdJQ0JoZEhSaFkyaGZNMlJmWTJGdFpYSmhLR05oYm5aaGN5d2dZMkZ0WlhKaExDQmtZWFJoTG1OaGJUTmtYM04wWVhSbExDQmtZWFJoTG14cFoyaDBYMlJwY21WamRHbHZiaXdnYzJObGJtVXBPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxYMk5oYlNoa1lYUmhMbU5oYldWeVlTNTJZV3gxWlN3Z2RISjFaU2s3Q2lBZ0lDQmpZVzFsY21FdWRYQmtZWFJsWDJ4cFoyaDBYMlJwY2loa1lYUmhMbXhwWjJoMFgyUnBjbVZqZEdsdmJpNTJZV3gxWlNrN0NpQWdJQ0JrWVhSaExtTmhiV1Z5WVM1dmJpaDFjR1JoZEdWZlkyRnRLVHNLSUNBZ0lHUmhkR0V1Y0d4dmRITXVabTl5UldGamFDZ29jR3h2ZEY5a1lYUmhLVDArZXdvZ0lDQWdJQ0FnSUdGa1pGOXdiRzkwS0hOalpXNWxMQ0J3Ykc5MFgyUmhkR0VwT3dvZ0lDQWdmU2s3Q2lBZ0lDQnpZMlZ1WlM1elkyVnVaVjlqYUdsc1pISmxiaUE5SUdSaGRHRXVZMmhwYkdSeVpXNHViV0Z3S0NoamFHbHNaQ2s5UG5zS0lDQWdJQ0FnSUNCamIyNXpkQ0JqYUdsc1pITmpaVzVsSUQwZ1pHVnpaWEpwWVd4cGVtVmZjMk5sYm1Vb1kyaHBiR1FzSUhOamNtVmxiaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR05vYVd4a2MyTmxibVU3Q2lBZ0lDQjlLVHNLSUNBZ0lISmxkSFZ5YmlCelkyVnVaVHNLZlFwbWRXNWpkR2x2YmlCa1pXeGxkR1ZmY0d4dmRDaHdiRzkwS1NCN0NpQWdJQ0JrWld4bGRHVWdjR3h2ZEY5allXTm9aVnR3Ykc5MExuQnNiM1JmZFhWcFpGMDdDaUFnSUNCamIyNXpkQ0I3SUhCaGNtVnVkQ0FnZlNBOUlIQnNiM1E3Q2lBZ0lDQnBaaUFvY0dGeVpXNTBLU0I3Q2lBZ0lDQWdJQ0FnY0dGeVpXNTBMbkpsYlc5MlpTaHdiRzkwS1RzS0lDQWdJSDBLSUNBZ0lIQnNiM1F1WjJWdmJXVjBjbmt1WkdsemNHOXpaU2dwT3dvZ0lDQWdjR3h2ZEM1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NuMEtablZ1WTNScGIyNGdaR1ZzWlhSbFgzUm9jbVZsWDNOalpXNWxLSE5qWlc1bEtTQjdDaUFnSUNCa1pXeGxkR1VnYzJObGJtVmZZMkZqYUdWYmMyTmxibVV1YzJObGJtVmZkWFZwWkYwN0NpQWdJQ0J6WTJWdVpTNXpZMlZ1WlY5amFHbHNaSEpsYmk1bWIzSkZZV05vS0dSbGJHVjBaVjkwYUhKbFpWOXpZMlZ1WlNrN0NpQWdJQ0IzYUdsc1pTaHpZMlZ1WlM1amFHbHNaSEpsYmk1c1pXNW5kR2dnUGlBd0tYc0tJQ0FnSUNBZ0lDQmtaV3hsZEdWZmNHeHZkQ2h6WTJWdVpTNWphR2xzWkhKbGJsc3dYU2s3Q2lBZ0lDQjlDbjBLZDJsdVpHOTNMbFJJVWtWRklEMGdiVzlrT3dwbWRXNWpkR2x2YmlCeVpXNWtaWEpmYzJObGJtVW9jMk5sYm1Vc0lIQnBZMnRwYm1jZ1BTQm1ZV3h6WlNrZ2V3b2dJQ0FnWTI5dWMzUWdleUJqWVcxbGNtRWdMQ0J5Wlc1a1pYSmxjaUFzSUhCNFgzQmxjbDkxYm1sMElDQjlJRDBnYzJObGJtVXVjMk55WldWdU93b2dJQ0FnWTI5dWMzUWdZMkZ1ZG1GeklEMGdjbVZ1WkdWeVpYSXVaRzl0Uld4bGJXVnVkRHNLSUNBZ0lHbG1JQ2doWkc5amRXMWxiblF1WW05a2VTNWpiMjUwWVdsdWN5aGpZVzUyWVhNcEtTQjdDaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSWtWWVNWUkpUa2NnVjBkTUlpazdDaUFnSUNBZ0lDQWdaR1ZzWlhSbFgzUm9jbVZsWDNOalpXNWxLSE5qWlc1bEtUc0tJQ0FnSUNBZ0lDQnlaVzVrWlhKbGNpNXpkR0YwWlM1eVpYTmxkQ2dwT3dvZ0lDQWdJQ0FnSUhKbGJtUmxjbVZ5TG1ScGMzQnZjMlVvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdDaUFnSUNCOUNpQWdJQ0JwWmlBb0lYTmpaVzVsTG5acGMybGliR1V1ZG1Gc2RXVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlRzS0lDQWdJSDBLSUNBZ0lISmxibVJsY21WeUxtRjFkRzlEYkdWaGNpQTlJSE5qWlc1bExtTnNaV0Z5YzJObGJtVXVkbUZzZFdVN0NpQWdJQ0JqYjI1emRDQmhjbVZoSUQwZ2MyTmxibVV1ZG1sbGQzQnZjblF1ZG1Gc2RXVTdDaUFnSUNCcFppQW9ZWEpsWVNrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUZ0NExDQjVMQ0IzTENCb1hTQTlJR0Z5WldFdWJXRndLQ2g0S1QwK2VDQXFJSEI0WDNCbGNsOTFibWwwS1RzS0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2k1elpYUldhV1YzY0c5eWRDaDRMQ0I1TENCM0xDQm9LVHNLSUNBZ0lDQWdJQ0J5Wlc1a1pYSmxjaTV6WlhSVFkybHpjMjl5S0hnc0lIa3NJSGNzSUdncE93b2dJQ0FnSUNBZ0lISmxibVJsY21WeUxuTmxkRk5qYVhOemIzSlVaWE4wS0hSeWRXVXBPd29nSUNBZ0lDQWdJR2xtSUNod2FXTnJhVzVuS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNtVnlMbk5sZEVOc1pXRnlRV3h3YUdFb01DazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbVZ5TG5ObGRFTnNaV0Z5UTI5c2IzSW9ibVYzSUcxdlpDNURiMnh2Y2lnd0tTd2dNQzR3S1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGJIQm9ZU0E5SUhOalpXNWxMbUpoWTJ0bmNtOTFibVJqYjJ4dmNsOWhiSEJvWVM1MllXeDFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5WlhJdWMyVjBRMnhsWVhKRGIyeHZjaWh6WTJWdVpTNWlZV05yWjNKdmRXNWtZMjlzYjNJdWRtRnNkV1VzSUdGc2NHaGhLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1Y21WdVpHVnlLSE5qWlc1bExDQmpZVzFsY21FcE93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlITmpaVzVsTG5OalpXNWxYMk5vYVd4a2NtVnVMbVYyWlhKNUtDaDRLVDArY21WdVpHVnlYM05qWlc1bEtIZ3NJSEJwWTJ0cGJtY3BLVHNLZlFwbWRXNWpkR2x2YmlCemRHRnlkRjl5Wlc1a1pYSnNiMjl3S0hSb2NtVmxYM05qWlc1bEtTQjdDaUFnSUNCamIyNXpkQ0I3SUdad2N5QWdmU0E5SUhSb2NtVmxYM05qWlc1bExuTmpjbVZsYmpzS0lDQWdJR052Ym5OMElIUnBiV1ZmY0dWeVgyWnlZVzFsSUQwZ01TQXZJR1p3Y3lBcUlERXdNREE3Q2lBZ0lDQnNaWFFnYkdGemRGOTBhVzFsWDNOMFlXMXdJRDBnY0dWeVptOXliV0Z1WTJVdWJtOTNLQ2s3Q2lBZ0lDQm1kVzVqZEdsdmJpQnlaVzVrWlhKc2IyOXdLSFJwYldWemRHRnRjQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBhVzFsYzNSaGJYQWdMU0JzWVhOMFgzUnBiV1ZmYzNSaGJYQWdQaUIwYVcxbFgzQmxjbDltY21GdFpTa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoYkd4ZmNtVnVaR1Z5WldRZ1BTQnlaVzVrWlhKZmMyTmxibVVvZEdoeVpXVmZjMk5sYm1VcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXRnNiRjl5Wlc1a1pYSmxaQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSZmRHbHRaVjl6ZEdGdGNDQTlJSEJsY21admNtMWhibU5sTG01dmR5Z3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0hKbGJtUmxjbXh2YjNBcE93b2dJQ0FnZlFvZ0lDQWdjbVZ1WkdWeVgzTmpaVzVsS0hSb2NtVmxYM05qWlc1bEtUc0tJQ0FnSUhKbGJtUmxjbXh2YjNBb0tUc0tmUXBtZFc1amRHbHZiaUIwYUhKdmRIUnNaVjltZFc1amRHbHZiaWhtZFc1akxDQmtaV3hoZVNrZ2V3b2dJQ0FnYkdWMElIQnlaWFlnUFNBd093b2dJQ0FnYkdWMElHWjFkSFZ5WlY5cFpDQTlJSFZ1WkdWbWFXNWxaRHNLSUNBZ0lHWjFibU4wYVc5dUlHbHVibVZ5WDNSb2NtOTBkR3hsS0M0dUxtRnlaM01wSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0J1YjNjZ1BTQnVaWGNnUkdGMFpTZ3BMbWRsZEZScGJXVW9LVHNLSUNBZ0lDQWdJQ0JwWmlBb1puVjBkWEpsWDJsa0lDRTlQU0IxYm1SbFptbHVaV1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0daMWRIVnlaVjlwWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR1oxZEhWeVpWOXBaQ0E5SUhWdVpHVm1hVzVsWkRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLRzV2ZHlBdElIQnlaWFlnUGlCa1pXeGhlU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQndjbVYySUQwZ2JtOTNPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVl5Z3VMaTVoY21kektUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtZFhSMWNtVmZhV1FnUFNCelpYUlVhVzFsYjNWMEtDZ3BQVDVwYm01bGNsOTBhSEp2ZEhSc1pTZ3VMaTVoY21kektTd2dibTkzSUMwZ2NISmxkaUFySURFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQnBibTVsY2w5MGFISnZkSFJzWlRzS2ZRcG1kVzVqZEdsdmJpQm5aWFJmWW05a2VWOXphWHBsS0NrZ2V3b2dJQ0FnWTI5dWMzUWdZbTlrZVZOMGVXeGxJRDBnZDJsdVpHOTNMbWRsZEVOdmJYQjFkR1ZrVTNSNWJHVW9aRzlqZFcxbGJuUXVZbTlrZVNrN0NpQWdJQ0JqYjI1emRDQjNhV1IwYUY5d1lXUmthVzVuSUQwZ2NHRnljMlZKYm5Rb1ltOWtlVk4wZVd4bExuQmhaR1JwYm1kTVpXWjBMQ0F4TUNrZ0t5QndZWEp6WlVsdWRDaGliMlI1VTNSNWJHVXVjR0ZrWkdsdVoxSnBaMmgwTENBeE1Da2dLeUJ3WVhKelpVbHVkQ2hpYjJSNVUzUjViR1V1YldGeVoybHVUR1ZtZEN3Z01UQXBJQ3NnY0dGeWMyVkpiblFvWW05a2VWTjBlV3hsTG0xaGNtZHBibEpwWjJoMExDQXhNQ2s3Q2lBZ0lDQmpiMjV6ZENCb1pXbG5hSFJmY0dGa1pHbHVaeUE5SUhCaGNuTmxTVzUwS0dKdlpIbFRkSGxzWlM1d1lXUmthVzVuVkc5d0xDQXhNQ2tnS3lCd1lYSnpaVWx1ZENoaWIyUjVVM1I1YkdVdWNHRmtaR2x1WjBKdmRIUnZiU3dnTVRBcElDc2djR0Z5YzJWSmJuUW9ZbTlrZVZOMGVXeGxMbTFoY21kcGJsUnZjQ3dnTVRBcElDc2djR0Z5YzJWSmJuUW9ZbTlrZVZOMGVXeGxMbTFoY21kcGJrSnZkSFJ2YlN3Z01UQXBPd29nSUNBZ1kyOXVjM1FnZDJsa2RHZ2dQU0IzYVc1a2IzY3VhVzV1WlhKWGFXUjBhQ0F0SUhkcFpIUm9YM0JoWkdScGJtYzdDaUFnSUNCamIyNXpkQ0JvWldsbmFIUWdQU0IzYVc1a2IzY3VhVzV1WlhKSVpXbG5hSFFnTFNCb1pXbG5hSFJmY0dGa1pHbHVaenNLSUNBZ0lISmxkSFZ5YmlCYkNpQWdJQ0FnSUNBZ2QybGtkR2dzQ2lBZ0lDQWdJQ0FnYUdWcFoyaDBDaUFnSUNCZE93cDlDbVoxYm1OMGFXOXVJR2RsZEY5d1lYSmxiblJmYzJsNlpTaGpZVzUyWVhNcElIc0tJQ0FnSUdOdmJuTjBJSEpsWTNRZ1BTQmpZVzUyWVhNdWNHRnlaVzUwUld4bGJXVnVkQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUc0tJQ0FnSUhKbGRIVnliaUJiQ2lBZ0lDQWdJQ0FnY21WamRDNTNhV1IwYUN3S0lDQWdJQ0FnSUNCeVpXTjBMbWhsYVdkb2RBb2dJQ0FnWFRzS2ZRcG1kVzVqZEdsdmJpQjNaMnhsY25KdmNpaG5iQ3dnWlhKeWIzSXBJSHNLSUNBZ0lITjNhWFJqYUNobGNuSnZjaWw3Q2lBZ0lDQWdJQ0FnWTJGelpTQm5iQzVPVDE5RlVsSlBVam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNKT2J5Qmxjbkp2Y2lJN0NpQWdJQ0FnSUNBZ1kyRnpaU0JuYkM1SlRsWkJURWxFWDBWT1ZVMDZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFpU1c1MllXeHBaQ0JsYm5WdElqc0tJQ0FnSUNBZ0lDQmpZWE5sSUdkc0xrbE9Wa0ZNU1VSZlZrRk1WVVU2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBaVNXNTJZV3hwWkNCMllXeDFaU0k3Q2lBZ0lDQWdJQ0FnWTJGelpTQm5iQzVKVGxaQlRFbEVYMDlRUlZKQlZFbFBUam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNKSmJuWmhiR2xrSUc5d1pYSmhkR2x2YmlJN0NpQWdJQ0FnSUNBZ1kyRnpaU0JuYkM1UFZWUmZUMFpmVFVWTlQxSlpPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSWs5MWRDQnZaaUJ0WlcxdmNua2lPd29nSUNBZ0lDQWdJR05oYzJVZ1oyd3VRMDlPVkVWWVZGOU1UMU5VWDFkRlFrZE1PZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSWtOdmJuUmxlSFFnYkc5emRDSTdDaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ0pWYm10dWIzZHVJR1Z5Y205eUlqc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQm9ZVzVrYkdWVGIzVnlZMlVvYzNSeWFXNW5MQ0JsY25KdmNreHBibVVwSUhzS0lDQWdJR052Ym5OMElHeHBibVZ6SUQwZ2MzUnlhVzVuTG5Od2JHbDBLQ0pjYmlJcE93b2dJQ0FnWTI5dWMzUWdiR2x1WlhNeUlEMGdXMTA3Q2lBZ0lDQmpiMjV6ZENCbWNtOXRJRDBnVFdGMGFDNXRZWGdvWlhKeWIzSk1hVzVsSUMwZ05pd2dNQ2s3Q2lBZ0lDQmpiMjV6ZENCMGJ5QTlJRTFoZEdndWJXbHVLR1Z5Y205eVRHbHVaU0FySURZc0lHeHBibVZ6TG14bGJtZDBhQ2s3Q2lBZ0lDQm1iM0lvYkdWMElHa2dQU0JtY205dE95QnBJRHdnZEc4N0lHa3JLeWw3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdiR2x1WlNBOUlHa2dLeUF4T3dvZ0lDQWdJQ0FnSUd4cGJtVnpNaTV3ZFhOb0tHQWtlMnhwYm1VZ1BUMDlJR1Z5Y205eVRHbHVaU0EvSUNJK0lpQTZJQ0lnSW4wZ0pIdHNhVzVsZlRvZ0pIdHNhVzVsYzF0cFhYMWdLVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJzYVc1bGN6SXVhbTlwYmlnaVhHNGlLVHNLZlFwbWRXNWpkR2x2YmlCblpYUlRhR0ZrWlhKRmNuSnZjbk1vWjJ3c0lITm9ZV1JsY2l3Z2RIbHdaU2tnZXdvZ0lDQWdZMjl1YzNRZ2MzUmhkSFZ6SUQwZ1oyd3VaMlYwVTJoaFpHVnlVR0Z5WVcxbGRHVnlLSE5vWVdSbGNpd2daMnd1UTA5TlVFbE1SVjlUVkVGVVZWTXBPd29nSUNBZ1kyOXVjM1FnWlhKeWIzSnpJRDBnWjJ3dVoyVjBVMmhoWkdWeVNXNW1iMHh2WnloemFHRmtaWElwTG5SeWFXMG9LVHNLSUNBZ0lHbG1JQ2h6ZEdGMGRYTWdKaVlnWlhKeWIzSnpJRDA5UFNBaUlpa2djbVYwZFhKdUlDSWlPd29nSUNBZ1kyOXVjM1FnWlhKeWIzSk5ZWFJqYUdWeklEMGdMMFZTVWs5U09pQXdPaWhjWkNzcEx5NWxlR1ZqS0dWeWNtOXljeWs3Q2lBZ0lDQnBaaUFvWlhKeWIzSk5ZWFJqYUdWektTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1pYSnliM0pNYVc1bElEMGdjR0Z5YzJWSmJuUW9aWEp5YjNKTllYUmphR1Z6V3pGZEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RIbHdaUzUwYjFWd2NHVnlRMkZ6WlNncElDc2dJbHh1WEc0aUlDc2daWEp5YjNKeklDc2dJbHh1WEc0aUlDc2dhR0Z1Wkd4bFUyOTFjbU5sS0dkc0xtZGxkRk5vWVdSbGNsTnZkWEpqWlNoemFHRmtaWElwTENCbGNuSnZja3hwYm1VcE93b2dJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNKek93b2dJQ0FnZlFwOUNtWjFibU4wYVc5dUlHOXVYM05vWVdSbGNsOWxjbkp2Y2lobmJDd2djSEp2WjNKaGJTd2daMnhXWlhKMFpYaFRhR0ZrWlhJc0lHZHNSbkpoWjIxbGJuUlRhR0ZrWlhJcElIc0tJQ0FnSUdOdmJuTjBJSEJ5YjJkeVlXMU1iMmNnUFNCbmJDNW5aWFJRY205bmNtRnRTVzVtYjB4dlp5aHdjbTluY21GdEtTNTBjbWx0S0NrN0NpQWdJQ0JqYjI1emRDQjJaWEowWlhoRmNuSnZjbk1nUFNCblpYUlRhR0ZrWlhKRmNuSnZjbk1vWjJ3c0lHZHNWbVZ5ZEdWNFUyaGhaR1Z5TENBaWRtVnlkR1Y0SWlrN0NpQWdJQ0JqYjI1emRDQm1jbUZuYldWdWRFVnljbTl5Y3lBOUlHZGxkRk5vWVdSbGNrVnljbTl5Y3lobmJDd2daMnhHY21GbmJXVnVkRk5vWVdSbGNpd2dJbVp5WVdkdFpXNTBJaWs3Q2lBZ0lDQmpiMjV6ZENCMlpYSjBaWGhNYjJjZ1BTQm5iQzVuWlhSVGFHRmtaWEpKYm1adlRHOW5LR2RzVm1WeWRHVjRVMmhoWkdWeUtTNTBjbWx0S0NrN0NpQWdJQ0JqYjI1emRDQm1jbUZuYldWdWRFeHZaeUE5SUdkc0xtZGxkRk5vWVdSbGNrbHVabTlNYjJjb1oyeEdjbUZuYldWdWRGTm9ZV1JsY2lrdWRISnBiU2dwT3dvZ0lDQWdZMjl1YzNRZ1pYSnlJRDBnSWxSSVVrVkZMbGRsWWtkTVVISnZaM0poYlRvZ1UyaGhaR1Z5SUVWeWNtOXlJQ0lnS3lCM1oyeGxjbkp2Y2lobmJDd2daMnd1WjJWMFJYSnliM0lvS1NrZ0t5QWlJQzBnSWlBcklDSldRVXhKUkVGVVJWOVRWRUZVVlZNZ0lpQXJJR2RzTG1kbGRGQnliMmR5WVcxUVlYSmhiV1YwWlhJb2NISnZaM0poYlN3Z1oyd3VWa0ZNU1VSQlZFVmZVMVJCVkZWVEtTQXJJQ0pjYmx4dUlpQXJJQ0pRY205bmNtRnRJRWx1Wm04Z1RHOW5PbHh1SWlBcklIQnliMmR5WVcxTWIyY2dLeUFpWEc0aUlDc2dkbVZ5ZEdWNFJYSnliM0p6SUNzZ0lseHVJaUFySUdaeVlXZHRaVzUwUlhKeWIzSnpJQ3NnSWx4dUlpQXJJQ0pHY21GbmJXVnVkQ0JzYjJjNlhHNGlJQ3NnWm5KaFoyMWxiblJNYjJjZ0t5QWlWbVZ5ZEdWNElHeHZaenBjYmlJZ0t5QjJaWEowWlhoTWIyYzdDaUFnSUNCS1UxTmxjblpsTGtOdmJtNWxZM1JwYjI0dWMyVnVaRjkzWVhKdWFXNW5LR1Z5Y2lrN0NuMEtablZ1WTNScGIyNGdZV1JrWDJOaGJuWmhjMTlsZG1WdWRITW9jMk55WldWdUxDQmpiMjF0TENCeVpYTnBlbVZmZEc4cElIc0tJQ0FnSUdOdmJuTjBJSHNnWTJGdWRtRnpJQ3dnZDJsdWMyTmhiR1VnSUgwZ1BTQnpZM0psWlc0N0NpQWdJQ0JtZFc1amRHbHZiaUJ0YjNWelpWOWpZV3hzWW1GamF5aGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUZ0NExDQjVYU0E5SUdWMlpXNTBjekoxYm1sMGJHVnpjeWh6WTNKbFpXNHNJR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sY0c5emFYUnBiMjQ2SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUNpQWdJQ0FnSUNBZ0lDQWdJRjBLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJSDBLSUNBZ0lHTnZibk4wSUc1dmRHbG1lVjl0YjNWelpWOTBhSEp2ZEhSc1pXUWdQU0IwYUhKdmRIUnNaVjltZFc1amRHbHZiaWh0YjNWelpWOWpZV3hzWW1GamF5d2dOREFwT3dvZ0lDQWdablZ1WTNScGIyNGdiVzkxYzJWdGIzWmxLR1YyWlc1MEtTQjdDaUFnSUNBZ0lDQWdibTkwYVdaNVgyMXZkWE5sWDNSb2NtOTBkR3hsWkNobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE93b2dJQ0FnZlFvZ0lDQWdZMkZ1ZG1GekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltMXZkWE5sYlc5MlpTSXNJRzF2ZFhObGJXOTJaU2s3Q2lBZ0lDQm1kVzVqZEdsdmJpQnRiM1Z6WldSdmQyNG9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sWkc5M2Jqb2daWFpsYm5RdVluVjBkRzl1Y3dvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lIMEtJQ0FnSUdOaGJuWmhjeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p0YjNWelpXUnZkMjRpTENCdGIzVnpaV1J2ZDI0cE93b2dJQ0FnWm5WdVkzUnBiMjRnYlc5MWMyVjFjQ2hsZG1WdWRDa2dld29nSUNBZ0lDQWdJR052YlcwdWJtOTBhV1o1S0hzS0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWMWNEb2daWFpsYm5RdVluVjBkRzl1Y3dvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lIMEtJQ0FnSUdOaGJuWmhjeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p0YjNWelpYVndJaXdnYlc5MWMyVjFjQ2s3Q2lBZ0lDQm1kVzVqZEdsdmJpQjNhR1ZsYkNobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUdOdmJXMHVibTkwYVdaNUtIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNPaUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDNWtaV3gwWVZnc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdFpYWmxiblF1WkdWc2RHRlpDaUFnSUNBZ0lDQWdJQ0FnSUYwS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUc0tJQ0FnSUgwS0lDQWdJR05oYm5aaGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSjNhR1ZsYkNJc0lIZG9aV1ZzS1RzS0lDQWdJR1oxYm1OMGFXOXVJR3RsZVdSdmQyNG9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHdGxlV1J2ZDI0NklHVjJaVzUwTG1OdlpHVUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN0NpQWdJQ0I5Q2lBZ0lDQmpZVzUyWVhNdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaWEyVjVaRzkzYmlJc0lHdGxlV1J2ZDI0cE93b2dJQ0FnWm5WdVkzUnBiMjRnYTJWNWRYQW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHdGxlWFZ3T2lCbGRtVnVkQzVqYjJSbENpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3dvZ0lDQWdmUW9nSUNBZ1kyRnVkbUZ6TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW10bGVYVndJaXdnYTJWNWRYQXBPd29nSUNBZ1puVnVZM1JwYjI0Z1kyOXVkR1Y0ZEcxbGJuVW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHdGxlWFZ3T2lBaVpHVnNaWFJsWDJ0bGVYTWlDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE93b2dJQ0FnZlFvZ0lDQWdZMkZ1ZG1GekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltTnZiblJsZUhSdFpXNTFJaXdnS0dVcFBUNWxMbkJ5WlhabGJuUkVaV1poZFd4MEtDa3BPd29nSUNBZ1kyRnVkbUZ6TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW1adlkzVnpiM1YwSWl3Z1kyOXVkR1Y0ZEcxbGJuVXBPd29nSUNBZ1puVnVZM1JwYjI0Z2NtVnphWHBsWDJOaGJHeGlZV05yS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IzYVdSMGFDd2dhR1ZwWjJoME93b2dJQ0FnSUNBZ0lHbG1JQ2h5WlhOcGVtVmZkRzhnUFQwZ0ltSnZaSGtpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRnQzYVdSMGFDd2dhR1ZwWjJoMFhTQTlJR2RsZEY5aWIyUjVYM05wZW1Vb0tUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsYzJsNlpWOTBieUE5UFNBaWNHRnlaVzUwSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JiZDJsa2RHZ3NJR2hsYVdkb2RGMGdQU0JuWlhSZmNHRnlaVzUwWDNOcGVtVW9ZMkZ1ZG1GektUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdZMjl0YlM1dWIzUnBabmtvZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWE5wZW1VNklGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvSUM4Z2QybHVjMk5oYkdVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFFnTHlCM2FXNXpZMkZzWlFvZ0lDQWdJQ0FnSUNBZ0lDQmRDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQjlDaUFnSUNCcFppQW9jbVZ6YVhwbFgzUnZLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6YVhwbFgyTmhiR3hpWVdOclgzUm9jbTkwZEd4bFpDQTlJSFJvY205MGRHeGxYMloxYm1OMGFXOXVLSEpsYzJsNlpWOWpZV3hzWW1GamF5d2dNVEF3S1RzS0lDQWdJQ0FnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpY21WemFYcGxJaXdnS0dWMlpXNTBLVDArY21WemFYcGxYMk5oYkd4aVlXTnJYM1JvY205MGRHeGxaQ2dwS1RzS0lDQWdJQ0FnSUNCeVpYTnBlbVZmWTJGc2JHSmhZMnRmZEdoeWIzUjBiR1ZrS0NrN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z2RHaHlaV1ZxYzE5dGIyUjFiR1VvWTJGdWRtRnpLU0I3Q2lBZ0lDQnNaWFFnWTI5dWRHVjRkQ0E5SUdOaGJuWmhjeTVuWlhSRGIyNTBaWGgwS0NKM1pXSm5iRElpTENCN0NpQWdJQ0FnSUNBZ2NISmxjMlZ5ZG1WRWNtRjNhVzVuUW5WbVptVnlPaUIwY25WbENpQWdJQ0I5S1RzS0lDQWdJR2xtSUNnaFkyOXVkR1Y0ZENrZ2V3b2dJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVjJWaVIwd2dNaTR3SUc1dmRDQnpkWEJ3YjNKMFpXUWdZbmtnWW5KdmQzTmxjaXdnWm1Gc2JHbHVaeUJpWVdOcklIUnZJRmRsWWtkTUlERXVNQ0FvVm05c2RXMWxJSEJzYjNSeklIZHBiR3dnYm05MElIZHZjbXNwSWlrN0NpQWdJQ0FnSUNBZ1kyOXVkR1Y0ZENBOUlHTmhiblpoY3k1blpYUkRiMjUwWlhoMEtDSjNaV0puYkNJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGMyVnlkbVZFY21GM2FXNW5RblZtWm1WeU9pQjBjblZsQ2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0I5Q2lBZ0lDQnBaaUFvSVdOdmJuUmxlSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQjlDaUFnSUNCamIyNXpkQ0J5Wlc1a1pYSmxjaUE5SUc1bGR5QnRiMlF1VjJWaVIweFNaVzVrWlhKbGNpaDdDaUFnSUNBZ0lDQWdZVzUwYVdGc2FXRnpPaUIwY25WbExBb2dJQ0FnSUNBZ0lHTmhiblpoY3pvZ1kyRnVkbUZ6TEFvZ0lDQWdJQ0FnSUdOdmJuUmxlSFE2SUdOdmJuUmxlSFFzQ2lBZ0lDQWdJQ0FnY0c5M1pYSlFjbVZtWlhKbGJtTmxPaUFpYUdsbmFDMXdaWEptYjNKdFlXNWpaU0lLSUNBZ0lIMHBPd29nSUNBZ2NtVnVaR1Z5WlhJdVpHVmlkV2N1YjI1VGFHRmtaWEpGY25KdmNpQTlJRzl1WDNOb1lXUmxjbDlsY25KdmNqc0tJQ0FnSUhKbGJtUmxjbVZ5TG5ObGRFTnNaV0Z5UTI5c2IzSW9JaU5tWm1abVptWWlLVHNLSUNBZ0lISmxkSFZ5YmlCeVpXNWtaWEpsY2pzS2ZRcG1kVzVqZEdsdmJpQnpaWFJmY21WdVpHVnlYM05wZW1Vb2MyTnlaV1Z1TENCM2FXUjBhQ3dnYUdWcFoyaDBLU0I3Q2lBZ0lDQmpiMjV6ZENCN0lISmxibVJsY21WeUlDd2dZMkZ1ZG1GeklDd2djMk5oYkdWbVlXTjBiM0lnTENCM2FXNXpZMkZzWlNBc0lIQjRYM0JsY2w5MWJtbDBJQ0I5SUQwZ2MyTnlaV1Z1T3dvZ0lDQWdZMjl1YzNRZ1czTjNhV1IwYUN3Z2MyaGxhV2RvZEYwZ1BTQmJDaUFnSUNBZ0lDQWdkMmx1YzJOaGJHVWdLaUIzYVdSMGFDd0tJQ0FnSUNBZ0lDQjNhVzV6WTJGc1pTQXFJR2hsYVdkb2RBb2dJQ0FnWFRzS0lDQWdJR052Ym5OMElISmxZV3hmY0dsNFpXeGZkMmxrZEdnZ1BTQk5ZWFJvTG1ObGFXd29kMmxrZEdnZ0tpQndlRjl3WlhKZmRXNXBkQ2s3Q2lBZ0lDQmpiMjV6ZENCeVpXRnNYM0JwZUdWc1gyaGxhV2RvZENBOUlFMWhkR2d1WTJWcGJDaG9aV2xuYUhRZ0tpQndlRjl3WlhKZmRXNXBkQ2s3Q2lBZ0lDQnlaVzVrWlhKbGNpNWZkMmxrZEdnZ1BTQjNhV1IwYURzS0lDQWdJSEpsYm1SbGNtVnlMbDlvWldsbmFIUWdQU0JvWldsbmFIUTdDaUFnSUNCallXNTJZWE11ZDJsa2RHZ2dQU0J5WldGc1gzQnBlR1ZzWDNkcFpIUm9Pd29nSUNBZ1kyRnVkbUZ6TG1obGFXZG9kQ0E5SUhKbFlXeGZjR2w0Wld4ZmFHVnBaMmgwT3dvZ0lDQWdZMkZ1ZG1GekxuTjBlV3hsTG5kcFpIUm9JRDBnYzNkcFpIUm9JQ3NnSW5CNElqc0tJQ0FnSUdOaGJuWmhjeTV6ZEhsc1pTNW9aV2xuYUhRZ1BTQnphR1ZwWjJoMElDc2dJbkI0SWpzS0lDQWdJSEpsYm1SbGNtVnlMbk5sZEZacFpYZHdiM0owS0RBc0lEQXNJSEpsWVd4ZmNHbDRaV3hmZDJsa2RHZ3NJSEpsWVd4ZmNHbDRaV3hmYUdWcFoyaDBLVHNLSUNBZ0lHRmtaRjl3YVdOcmFXNW5YM1JoY21kbGRDaHpZM0psWlc0cE93b2dJQ0FnY21WMGRYSnVPd3A5Q21aMWJtTjBhVzl1SUdGa1pGOXdhV05yYVc1blgzUmhjbWRsZENoelkzSmxaVzRwSUhzS0lDQWdJR052Ym5OMElIc2djR2xqYTJsdVoxOTBZWEpuWlhRZ0xDQmpZVzUyWVhNZ0lIMGdQU0J6WTNKbFpXNDdDaUFnSUNCamIyNXpkQ0JiZHl3Z2FGMGdQU0JiQ2lBZ0lDQWdJQ0FnWTJGdWRtRnpMbmRwWkhSb0xBb2dJQ0FnSUNBZ0lHTmhiblpoY3k1b1pXbG5hSFFLSUNBZ0lGMDdDaUFnSUNCcFppQW9jR2xqYTJsdVoxOTBZWEpuWlhRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvY0dsamEybHVaMTkwWVhKblpYUXVkMmxrZEdnZ1BUMGdkeUFtSmlCd2FXTnJhVzVuWDNSaGNtZGxkQzVvWldsbmFIUWdQVDBnYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0dsamEybHVaMTkwWVhKblpYUXVaR2x6Y0c5elpTZ3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhOamNtVmxiaTV3YVdOcmFXNW5YM1JoY21kbGRDQTlJRzVsZHlCdGIyUXVWMlZpUjB4U1pXNWtaWEpVWVhKblpYUW9keXdnYUNrN0NpQWdJQ0J5WlhSMWNtNDdDbjBLWm5WdVkzUnBiMjRnWTNKbFlYUmxYM05qWlc1bEtIZHlZWEJ3WlhJc0lHTmhiblpoY3l3Z1kyRnVkbUZ6WDNkcFpIUm9MQ0J6WTJWdVpYTXNJR052Ylcwc0lIZHBaSFJvTENCb1pXbG5hSFFzSUhSbGVIUjFjbVZmWVhSc1lYTmZiMkp6TENCbWNITXNJSEpsYzJsNlpWOTBieXdnY0hoZmNHVnlYM1Z1YVhRc0lITmpZV3hsWm1GamRHOXlLU0I3Q2lBZ0lDQnBaaUFvSVhOallXeGxabUZqZEc5eUtTQjdDaUFnSUNBZ0lDQWdjMk5oYkdWbVlXTjBiM0lnUFNCM2FXNWtiM2N1WkdWMmFXTmxVR2w0Wld4U1lYUnBieUI4ZkNBeExqQTdDaUFnSUNCOUNpQWdJQ0JwWmlBb0lYQjRYM0JsY2w5MWJtbDBLU0I3Q2lBZ0lDQWdJQ0FnY0hoZmNHVnlYM1Z1YVhRZ1BTQnpZMkZzWldaaFkzUnZjanNLSUNBZ0lIMEtJQ0FnSUdOdmJuTjBJSEpsYm1SbGNtVnlJRDBnZEdoeVpXVnFjMTl0YjJSMWJHVW9ZMkZ1ZG1GektUc0tJQ0FnSUZSRldGUlZVa1ZmUVZSTVFWTmJNRjBnUFNCMFpYaDBkWEpsWDJGMGJHRnpYMjlpY3pzS0lDQWdJR2xtSUNnaGNtVnVaR1Z5WlhJcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCM1lYSnVhVzVuSUQwZ1oyVjBWMlZpUjB4RmNuSnZjazFsYzNOaFoyVW9LVHNLSUNBZ0lDQWdJQ0IzY21Gd2NHVnlMbUZ3Y0dWdVpFTm9hV3hrS0hkaGNtNXBibWNwT3dvZ0lDQWdmUW9nSUNBZ1kyOXVjM1FnWTJGdFpYSmhJRDBnYm1WM0lHMXZaQzVRWlhKemNHVmpkR2wyWlVOaGJXVnlZU2cwTlN3Z01Td2dNQ3dnTVRBd0tUc0tJQ0FnSUdOaGJXVnlZUzUxY0dSaGRHVlFjbTlxWldOMGFXOXVUV0YwY21sNEtDazdDaUFnSUNCamIyNXpkQ0J3YVhobGJGOXlZWFJwYnlBOUlIZHBibVJ2ZHk1a1pYWnBZMlZRYVhobGJGSmhkR2x2SUh4OElERXVNRHNLSUNBZ0lHTnZibk4wSUhkcGJuTmpZV3hsSUQwZ2MyTmhiR1ZtWVdOMGIzSWdMeUJ3YVhobGJGOXlZWFJwYnpzS0lDQWdJR052Ym5OMElITmpjbVZsYmlBOUlIc0tJQ0FnSUNBZ0lDQnlaVzVrWlhKbGNpd0tJQ0FnSUNBZ0lDQmpZVzFsY21Fc0NpQWdJQ0FnSUNBZ1puQnpMQW9nSUNBZ0lDQWdJR05oYm5aaGN5d0tJQ0FnSUNBZ0lDQndlRjl3WlhKZmRXNXBkQ3dLSUNBZ0lDQWdJQ0J6WTJGc1pXWmhZM1J2Y2l3S0lDQWdJQ0FnSUNCM2FXNXpZMkZzWlFvZ0lDQWdmVHNLSUNBZ0lHRmtaRjlqWVc1MllYTmZaWFpsYm5SektITmpjbVZsYml3Z1kyOXRiU3dnY21WemFYcGxYM1J2S1RzS0lDQWdJSE5sZEY5eVpXNWtaWEpmYzJsNlpTaHpZM0psWlc0c0lIZHBaSFJvTENCb1pXbG5hSFFwT3dvZ0lDQWdZMjl1YzNRZ2RHaHlaV1ZmYzJObGJtVWdQU0JrWlhObGNtbGhiR2w2WlY5elkyVnVaU2h6WTJWdVpYTXNJSE5qY21WbGJpazdDaUFnSUNCemRHRnlkRjl5Wlc1a1pYSnNiMjl3S0hSb2NtVmxYM05qWlc1bEtUc0tJQ0FnSUdOaGJuWmhjMTkzYVdSMGFDNXZiaWdvZDE5b0tUMCtld29nSUNBZ0lDQWdJSE5sZEY5eVpXNWtaWEpmYzJsNlpTaHpZM0psWlc0c0lDNHVMbmRmYUNrN0NpQWdJQ0I5S1RzS0lDQWdJSEpsZEhWeWJpQnlaVzVrWlhKbGNqc0tmUXBtZFc1amRHbHZiaUJ6WlhSZmNHbGphMmx1WjE5MWJtbG1iM0p0Y3loelkyVnVaU3dnYkdGemRGOXBaQ3dnY0dsamEybHVaeXdnY0dsamEyVmtYM0JzYjNSekxDQndiRzkwY3l3Z2FXUmZkRzlmY0d4dmRDa2dld29nSUNBZ2MyTmxibVV1WTJocGJHUnlaVzR1Wm05eVJXRmphQ2dvY0d4dmRDd2dhVzVrWlhncFBUNTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QnRZWFJsY21saGJDQWdmU0E5SUhCc2IzUTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QjFibWxtYjNKdGN5QWdmU0E5SUcxaGRHVnlhV0ZzT3dvZ0lDQWdJQ0FnSUdsbUlDaHdhV05yYVc1bktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6TG05aWFtVmpkRjlwWkM1MllXeDFaU0E5SUd4aGMzUmZhV1FnS3lCcGJtUmxlRHNLSUNBZ0lDQWdJQ0FnSUNBZ2RXNXBabTl5YlhNdWNHbGphMmx1Wnk1MllXeDFaU0E5SUhSeWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzTG1Kc1pXNWthVzVuSUQwZ2JXOWtMazV2UW14bGJtUnBibWM3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RXNXBabTl5YlhNdWNHbGphMmx1Wnk1MllXeDFaU0E5SUdaaGJITmxPd29nSUNBZ0lDQWdJQ0FnSUNCdFlYUmxjbWxoYkM1aWJHVnVaR2x1WnlBOUlHMXZaQzVPYjNKdFlXeENiR1Z1WkdsdVp6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhV1FnUFNCMWJtbG1iM0p0Y3k1dlltcGxZM1JmYVdRdWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwWkNCcGJpQndhV05yWldSZmNHeHZkSE1wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCc2IzUnpMbkIxYzJnb1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJzYjNRc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR2xqYTJWa1gzQnNiM1J6VzJsa1hRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRjkwYjE5d2JHOTBXMmxrWFNBOUlIQnNiM1E3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUtUc0tJQ0FnSUd4bGRDQnVaWGgwWDJsa0lEMGdiR0Z6ZEY5cFpDQXJJSE5qWlc1bExtTm9hV3hrY21WdUxteGxibWQwYURzS0lDQWdJSE5qWlc1bExuTmpaVzVsWDJOb2FXeGtjbVZ1TG1admNrVmhZMmdvS0hOalpXNWxLVDArZXdvZ0lDQWdJQ0FnSUc1bGVIUmZhV1FnUFNCelpYUmZjR2xqYTJsdVoxOTFibWxtYjNKdGN5aHpZMlZ1WlN3Z2JtVjRkRjlwWkN3Z2NHbGphMmx1Wnl3Z2NHbGphMlZrWDNCc2IzUnpMQ0J3Ykc5MGN5d2dhV1JmZEc5ZmNHeHZkQ2s3Q2lBZ0lDQjlLVHNLSUNBZ0lISmxkSFZ5YmlCdVpYaDBYMmxrT3dwOUNtWjFibU4wYVc5dUlIQnBZMnRmYm1GMGFYWmxLSE5qWlc1bExDQmZlQ3dnWDNrc0lGOTNMQ0JmYUNrZ2V3b2dJQ0FnWTI5dWMzUWdleUJ5Wlc1a1pYSmxjaUFzSUhCcFkydHBibWRmZEdGeVoyVjBJQ3dnY0hoZmNHVnlYM1Z1YVhRZ0lIMGdQU0J6WTJWdVpTNXpZM0psWlc0N0NpQWdJQ0JiWDNnc0lGOTVMQ0JmZHl3Z1gyaGRJRDBnV3dvZ0lDQWdJQ0FnSUY5NExBb2dJQ0FnSUNBZ0lGOTVMQW9nSUNBZ0lDQWdJRjkzTEFvZ0lDQWdJQ0FnSUY5b0NpQWdJQ0JkTG0xaGNDZ29lQ2s5UGsxaGRHZ3VZMlZwYkNoNElDb2djSGhmY0dWeVgzVnVhWFFwS1RzS0lDQWdJR052Ym5OMElGdDRMQ0I1TENCM0xDQm9YU0E5SUZzS0lDQWdJQ0FnSUNCZmVDd0tJQ0FnSUNBZ0lDQmZlU3dLSUNBZ0lDQWdJQ0JmZHl3S0lDQWdJQ0FnSUNCZmFBb2dJQ0FnWFRzS0lDQWdJSEpsYm1SbGNtVnlMbk5sZEZKbGJtUmxjbFJoY21kbGRDaHdhV05yYVc1blgzUmhjbWRsZENrN0NpQWdJQ0J6WlhSZmNHbGphMmx1WjE5MWJtbG1iM0p0Y3loelkyVnVaU3dnTVN3Z2RISjFaU2s3Q2lBZ0lDQnlaVzVrWlhKZmMyTmxibVVvYzJObGJtVXNJSFJ5ZFdVcE93b2dJQ0FnY21WdVpHVnlaWEl1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLRzUxYkd3cE93b2dJQ0FnWTI5dWMzUWdibUo1ZEdWeklEMGdkeUFxSUdnZ0tpQTBPd29nSUNBZ1kyOXVjM1FnY0dsNFpXeGZZbmwwWlhNZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNodVlubDBaWE1wT3dvZ0lDQWdjbVZ1WkdWeVpYSXVjbVZoWkZKbGJtUmxjbFJoY21kbGRGQnBlR1ZzY3lod2FXTnJhVzVuWDNSaGNtZGxkQ3dnZUN3Z2VTd2dkeXdnYUN3Z2NHbDRaV3hmWW5sMFpYTXBPd29nSUNBZ1kyOXVjM1FnY0dsamEyVmtYM0JzYjNSeklEMGdlMzA3Q2lBZ0lDQmpiMjV6ZENCd2FXTnJaV1JmY0d4dmRITmZZWEp5WVhrZ1BTQmJYVHNLSUNBZ0lHTnZibk4wSUhKbGFXNTBaWEp3Y21WMFgzWnBaWGNnUFNCdVpYY2dSR0YwWVZacFpYY29jR2w0Wld4ZllubDBaWE11WW5WbVptVnlLVHNLSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREE3SUdrZ1BDQndhWGhsYkY5aWVYUmxjeTVzWlc1bmRHZ2dMeUEwT3lCcEt5c3Bld29nSUNBZ0lDQWdJR052Ym5OMElHbGtJRDBnY21WcGJuUmxjbkJ5WlhSZmRtbGxkeTVuWlhSVmFXNTBNVFlvYVNBcUlEUXBPd29nSUNBZ0lDQWdJR052Ym5OMElHbHVaR1Y0SUQwZ2NtVnBiblJsY25CeVpYUmZkbWxsZHk1blpYUlZhVzUwTVRZb2FTQXFJRFFnS3lBeUtUc0tJQ0FnSUNBZ0lDQndhV05yWldSZmNHeHZkSE5mWVhKeVlYa3VjSFZ6YUNoYkNpQWdJQ0FnSUNBZ0lDQWdJR2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUFvZ0lDQWdJQ0FnSUYwcE93b2dJQ0FnSUNBZ0lIQnBZMnRsWkY5d2JHOTBjMXRwWkYwZ1BTQnBibVJsZURzS0lDQWdJSDBLSUNBZ0lHTnZibk4wSUhCc2IzUnpJRDBnVzEwN0NpQWdJQ0JqYjI1emRDQnBaRjkwYjE5d2JHOTBJRDBnZTMwN0NpQWdJQ0J6WlhSZmNHbGphMmx1WjE5MWJtbG1iM0p0Y3loelkyVnVaU3dnTUN3Z1ptRnNjMlVzSUhCcFkydGxaRjl3Ykc5MGN5d2djR3h2ZEhNc0lHbGtYM1J2WDNCc2IzUXBPd29nSUNBZ1kyOXVjM1FnY0dsamEyVmtYM0JzYjNSelgyMWhkSEpwZUNBOUlIQnBZMnRsWkY5d2JHOTBjMTloY25KaGVTNXRZWEFvS0Z0cFpDd2dhVzVrWlhoZEtUMCtld29nSUNBZ0lDQWdJR052Ym5OMElIQWdQU0JwWkY5MGIxOXdiRzkwVzJsa1hUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lDQWdJQ0J3SUQ4Z2NDNXdiRzkwWDNWMWFXUWdPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVBb2dJQ0FnSUNBZ0lGMDdDaUFnSUNCOUtUc0tJQ0FnSUdOdmJuTjBJSEJzYjNSZmJXRjBjbWw0SUQwZ2V3b2dJQ0FnSUNBZ0lHUmhkR0U2SUhCcFkydGxaRjl3Ykc5MGMxOXRZWFJ5YVhnc0NpQWdJQ0FnSUNBZ2MybDZaVG9nV3dvZ0lDQWdJQ0FnSUNBZ0lDQjNMQW9nSUNBZ0lDQWdJQ0FnSUNCb0NpQWdJQ0FnSUNBZ1hRb2dJQ0FnZlRzS0lDQWdJSEpsZEhWeWJpQmJDaUFnSUNBZ0lDQWdjR3h2ZEY5dFlYUnlhWGdzQ2lBZ0lDQWdJQ0FnY0d4dmRITUtJQ0FnSUYwN0NuMEtablZ1WTNScGIyNGdjR2xqYTE5amJHOXpaWE4wS0hOalpXNWxMQ0I0ZVN3Z2NtRnVaMlVwSUhzS0lDQWdJR052Ym5OMElIc2djbVZ1WkdWeVpYSWdJSDBnUFNCelkyVnVaUzV6WTNKbFpXNDdDaUFnSUNCamIyNXpkQ0JiZDJsa2RHZ3NJR2hsYVdkb2RGMGdQU0JiQ2lBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1WDNkcFpIUm9MQW9nSUNBZ0lDQWdJSEpsYm1SbGNtVnlMbDlvWldsbmFIUUtJQ0FnSUYwN0NpQWdJQ0JwWmlBb0lTZ3hMakFnUEQwZ2VIbGJNRjBnUEQwZ2QybGtkR2dnSmlZZ01TNHdJRHc5SUhoNVd6RmRJRHc5SUdobGFXZG9kQ2twSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUNBZ0lDQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQXdDaUFnSUNBZ0lDQWdYVHNLSUNBZ0lIMEtJQ0FnSUdOdmJuTjBJSGd3SUQwZ1RXRjBhQzV0WVhnb01Td2dlSGxiTUYwZ0xTQnlZVzVuWlNrN0NpQWdJQ0JqYjI1emRDQjVNQ0E5SUUxaGRHZ3ViV0Y0S0RFc0lIaDVXekZkSUMwZ2NtRnVaMlVwT3dvZ0lDQWdZMjl1YzNRZ2VERWdQU0JOWVhSb0xtMXBiaWgzYVdSMGFDd2dUV0YwYUM1bWJHOXZjaWg0ZVZzd1hTQXJJSEpoYm1kbEtTazdDaUFnSUNCamIyNXpkQ0I1TVNBOUlFMWhkR2d1YldsdUtHaGxhV2RvZEN3Z1RXRjBhQzVtYkc5dmNpaDRlVnN4WFNBcklISmhibWRsS1NrN0NpQWdJQ0JqYjI1emRDQmtlQ0E5SUhneElDMGdlREE3Q2lBZ0lDQmpiMjV6ZENCa2VTQTlJSGt4SUMwZ2VUQTdDaUFnSUNCamIyNXpkQ0JiY0d4dmRGOWtZWFJoTENCZlhTQTlJSEJwWTJ0ZmJtRjBhWFpsS0hOalpXNWxMQ0I0TUN3Z2VUQXNJR1I0TENCa2VTazdDaUFnSUNCamIyNXpkQ0J3Ykc5MFgyMWhkSEpwZUNBOUlIQnNiM1JmWkdGMFlTNWtZWFJoT3dvZ0lDQWdiR1YwSUcxcGJsOWthWE4wSUQwZ2NtRnVaMlVnWGlBeU93b2dJQ0FnYkdWMElITmxiR1ZqZEdsdmJpQTlJRnNLSUNBZ0lDQWdJQ0J1ZFd4c0xBb2dJQ0FnSUNBZ0lEQUtJQ0FnSUYwN0NpQWdJQ0JqYjI1emRDQjRJRDBnZUhsYk1GMGdLeUF4SUMwZ2VEQTdDaUFnSUNCamIyNXpkQ0I1SUQwZ2VIbGJNVjBnS3lBeElDMGdlVEE3Q2lBZ0lDQnNaWFFnY0dsdVpHVjRJRDBnTURzS0lDQWdJR1p2Y2loc1pYUWdhU0E5SURFN0lHa2dQRDBnWkhnN0lHa3JLeWw3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JxSUQwZ01Uc2dhaUE4UFNCa2VEc2dhaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pDQTlJSGdnTFNCcElGNGdNaUFySUNoNUlDMGdhaWtnWGlBeU93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmJjR3h2ZEY5MWRXbGtMQ0JwYm1SbGVGMGdQU0J3Ykc5MFgyMWhkSEpwZUZ0d2FXNWtaWGhkT3dvZ0lDQWdJQ0FnSUNBZ0lDQndhVzVrWlhnZ1BTQndhVzVrWlhnZ0t5QXhPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9aQ0E4SUcxcGJsOWthWE4wSUNZbUlIQnNiM1JmZFhWcFpDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1WDJScGMzUWdQU0JrT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBhVzl1SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJzYjNSZmRYVnBaQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQnpaV3hsWTNScGIyNDdDbjBLWm5WdVkzUnBiMjRnY0dsamExOXpiM0owWldRb2MyTmxibVVzSUhoNUxDQnlZVzVuWlNrZ2V3b2dJQ0FnWTI5dWMzUWdleUJ5Wlc1a1pYSmxjaUFnZlNBOUlITmpaVzVsTG5OamNtVmxianNLSUNBZ0lHTnZibk4wSUZ0M2FXUjBhQ3dnYUdWcFoyaDBYU0E5SUZzS0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2k1ZmQybGtkR2dzQ2lBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1WDJobGFXZG9kQW9nSUNBZ1hUc0tJQ0FnSUdsbUlDZ2hLREV1TUNBOFBTQjRlVnN3WFNBOFBTQjNhV1IwYUNBbUppQXhMakFnUEQwZ2VIbGJNVjBnUEQwZ2FHVnBaMmgwS1NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ2ZRb2dJQ0FnWTI5dWMzUWdlREFnUFNCTllYUm9MbTFoZUNneExDQjRlVnN3WFNBdElISmhibWRsS1RzS0lDQWdJR052Ym5OMElIa3dJRDBnVFdGMGFDNXRZWGdvTVN3Z2VIbGJNVjBnTFNCeVlXNW5aU2s3Q2lBZ0lDQmpiMjV6ZENCNE1TQTlJRTFoZEdndWJXbHVLSGRwWkhSb0xDQk5ZWFJvTG1ac2IyOXlLSGg1V3pCZElDc2djbUZ1WjJVcEtUc0tJQ0FnSUdOdmJuTjBJSGt4SUQwZ1RXRjBhQzV0YVc0b2FHVnBaMmgwTENCTllYUm9MbVpzYjI5eUtIaDVXekZkSUNzZ2NtRnVaMlVwS1RzS0lDQWdJR052Ym5OMElHUjRJRDBnZURFZ0xTQjRNRHNLSUNBZ0lHTnZibk4wSUdSNUlEMGdlVEVnTFNCNU1Ec0tJQ0FnSUdOdmJuTjBJRnR3Ykc5MFgyUmhkR0VzSUhObGJHVmpkR1ZrWFNBOUlIQnBZMnRmYm1GMGFYWmxLSE5qWlc1bExDQjRNQ3dnZVRBc0lHUjRMQ0JrZVNrN0NpQWdJQ0JwWmlBb2MyVnNaV04wWldRdWJHVnVaM1JvSUQwOUlEQXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJSDBLSUNBZ0lHTnZibk4wSUhCc2IzUmZiV0YwY21sNElEMGdjR3h2ZEY5a1lYUmhMbVJoZEdFN0NpQWdJQ0JqYjI1emRDQmthWE4wWVc1alpYTWdQU0J6Wld4bFkzUmxaQzV0WVhBb0tIZ3BQVDV5WVc1blpTQmVJRElwT3dvZ0lDQWdZMjl1YzNRZ2VDQTlJSGg1V3pCZElDc2dNU0F0SUhnd093b2dJQ0FnWTI5dWMzUWdlU0E5SUhoNVd6RmRJQ3NnTVNBdElIa3dPd29nSUNBZ2JHVjBJSEJwYm1SbGVDQTlJREE3Q2lBZ0lDQm1iM0lvYkdWMElHa2dQU0F4T3lCcElEdzlJR1I0T3lCcEt5c3Bld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhaUE5SURFN0lHb2dQRDBnWkhnN0lHb3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdRZ1BTQjRJQzBnYVNCZUlESWdLeUFvZVNBdElHb3BJRjRnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCc2IzUmZiV0YwY21sNExteGxibWQwYUNBOFBTQndhVzVrWlhncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUZ0d2JHOTBYM1YxYVdRc0lHbHVaR1Y0WFNBOUlIQnNiM1JmYldGMGNtbDRXM0JwYm1SbGVGMDdDaUFnSUNBZ0lDQWdJQ0FnSUhCcGJtUmxlQ0E5SUhCcGJtUmxlQ0FySURFN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnNiM1JmYVc1a1pYZ2dQU0J6Wld4bFkzUmxaQzVtYVc1a1NXNWtaWGdvS0hncFBUNTRXekJkTG5Cc2IzUmZkWFZwWkNBOVBTQndiRzkwWDNWMWFXUXBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR3h2ZEY5cGJtUmxlQ0ErUFNBd0lDWW1JR1FnUENCa2FYTjBZVzVqWlhOYmNHeHZkRjlwYm1SbGVGMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNSaGJtTmxjMXR3Ykc5MFgybHVaR1Y0WFNBOUlHUTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiMjV6ZENCemIzSjBaV1JmYVc1a2FXTmxjeUE5SUVGeWNtRjVMbVp5YjIwb1FYSnlZWGtvWkdsemRHRnVZMlZ6TG14bGJtZDBhQ2t1YTJWNWN5Z3BLUzV6YjNKMEtDaGhMQ0JpS1QwK1pHbHpkR0Z1WTJWelcyRmRJRHdnWkdsemRHRnVZMlZ6VzJKZElEOGdMVEVnT2lCa2FYTjBZVzVqWlhOYllsMGdQQ0JrYVhOMFlXNWpaWE5iWVYwZ2ZDQXdLVHNLSUNBZ0lISmxkSFZ5YmlCemIzSjBaV1JmYVc1a2FXTmxjeTV0WVhBb0tHbGtlQ2s5UG5zS0lDQWdJQ0FnSUNCamIyNXpkQ0JiY0d4dmRDd2dhVzVrWlhoZElEMGdjMlZzWldOMFpXUmJhV1I0WFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUNBZ0lDQndiRzkwTG5Cc2IzUmZkWFZwWkN3S0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnS0lDQWdJQ0FnSUNCZE93b2dJQ0FnZlNrN0NuMEtablZ1WTNScGIyNGdjR2xqYTE5dVlYUnBkbVZmZFhWcFpDaHpZMlZ1WlN3Z2VDd2dlU3dnZHl3Z2FDa2dld29nSUNBZ1kyOXVjM1FnVzE4c0lIQnBZMnRsWkY5d2JHOTBjMTBnUFNCd2FXTnJYMjVoZEdsMlpTaHpZMlZ1WlN3Z2VDd2dlU3dnZHl3Z2FDazdDaUFnSUNCeVpYUjFjbTRnY0dsamEyVmtYM0JzYjNSekxtMWhjQ2dvVzNBc0lHbHVaR1Y0WFNrOVBsc0tJQ0FnSUNBZ0lDQWdJQ0FnY0M1d2JHOTBYM1YxYVdRc0NpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNENpQWdJQ0FnSUNBZ1hTazdDbjBLWm5WdVkzUnBiMjRnY0dsamExOXVZWFJwZG1WZmJXRjBjbWw0S0hOalpXNWxMQ0I0TENCNUxDQjNMQ0JvS1NCN0NpQWdJQ0JqYjI1emRDQmJiV0YwY21sNExDQmZYU0E5SUhCcFkydGZibUYwYVhabEtITmpaVzVsTENCNExDQjVMQ0IzTENCb0tUc0tJQ0FnSUhKbGRIVnliaUJ0WVhSeWFYZzdDbjBLWm5WdVkzUnBiMjRnY21WbmFYTjBaWEpmY0c5d2RYQW9jRzl3ZFhBc0lITmpaVzVsTENCd2JHOTBjMTkwYjE5d2FXTnJMQ0JqWVd4c1ltRmpheWtnZXdvZ0lDQWdhV1lnS0NGelkyVnVaU0I4ZkNBaGMyTmxibVV1YzJOeVpXVnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ2ZRb2dJQ0FnWTI5dWMzUWdleUJqWVc1MllYTWdJSDBnUFNCelkyVnVaUzV6WTNKbFpXNDdDaUFnSUNCallXNTJZWE11WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpYlc5MWMyVmtiM2R1SWl3Z0tHVjJaVzUwS1QwK2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUZ0NExDQjVYU0E5SUdWMlpXNTBjekoxYm1sMGJHVnpjeWh6WTJWdVpTNXpZM0psWlc0c0lHVjJaVzUwS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0JiWHl3Z2NHbGphM05kSUQwZ2NHbGphMTl1WVhScGRtVW9jMk5sYm1Vc0lIZ3NJSGtzSURFc0lERXBPd29nSUNBZ0lDQWdJR2xtSUNod2FXTnJjeTVzWlc1bmRHZ2dQVDBnTVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmJjR3h2ZEN3Z2FXNWtaWGhkSUQwZ2NHbGphM05iTUYwN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2JHOTBjMTkwYjE5d2FXTnJMbWhoY3lod2JHOTBMbkJzYjNSZmRYVnBaQ2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNWc2RDQTlJR05oYkd4aVlXTnJLSEJzYjNRc0lHbHVaR1Y0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjRzl3ZFhBdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektDSnphRzkzSWlrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNCMWNDNWpiR0Z6YzB4cGMzUXVZV1JrS0NKemFHOTNJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNCMWNDNXpkSGxzWlM1c1pXWjBJRDBnWlhabGJuUXVjR0ZuWlZnZ0t5QWljSGdpT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5d2RYQXVjM1I1YkdVdWRHOXdJRDBnWlhabGJuUXVjR0ZuWlZrZ0t5QWljSGdpT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCeVpYTjFiSFFnUFQwOUlDSnpkSEpwYm1jaUlIeDhJSEpsYzNWc2RDQnBibk4wWVc1alpXOW1JRk4wY21sdVp5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmNIVndMbWx1Ym1WeVZHVjRkQ0E5SUhKbGMzVnNkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5d2RYQXVhVzV1WlhKSVZFMU1JRDBnY21WemRXeDBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjRzl3ZFhBdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnaWMyaHZkeUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBwT3dvZ0lDQWdZMkZ1ZG1GekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltdGxlWFZ3SWl3Z0tHVjJaVzUwS1QwK2V3b2dJQ0FnSUNBZ0lHbG1JQ2hsZG1WdWRDNXJaWGtnUFQwOUlDSkZjMk5oY0dVaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhCdmNIVndMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9Jbk5vYjNjaUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUtUc0tmUXAzYVc1a2IzY3VWMGRNSUQwZ2V3b2dJQ0FnWkdWelpYSnBZV3hwZW1WZmMyTmxibVVzQ2lBZ0lDQjBhSEpsWldwelgyMXZaSFZzWlN3S0lDQWdJSE4wWVhKMFgzSmxibVJsY214dmIzQXNDaUFnSUNCa1pXeGxkR1ZmY0d4dmRITXNDaUFnSUNCcGJuTmxjblJmY0d4dmRDd0tJQ0FnSUdacGJtUmZjR3h2ZEhNc0NpQWdJQ0JrWld4bGRHVmZjMk5sYm1Vc0NpQWdJQ0JtYVc1a1gzTmpaVzVsTEFvZ0lDQWdjMk5sYm1WZlkyRmphR1VzQ2lBZ0lDQndiRzkwWDJOaFkyaGxMQW9nSUNBZ1pHVnNaWFJsWDNOalpXNWxjeXdLSUNBZ0lHTnlaV0YwWlY5elkyVnVaU3dLSUNBZ0lHVjJaVzUwY3pKMWJtbDBiR1Z6Y3l3S0lDQWdJRzl1WDI1bGVIUmZhVzV6WlhKMExBb2dJQ0FnY21WbmFYTjBaWEpmY0c5d2RYQXNDaUFnSUNCeVpXNWtaWEpmYzJObGJtVUtmVHNLWlhod2IzSjBJSHNnWkdWelpYSnBZV3hwZW1WZmMyTmxibVVnWVhNZ1pHVnpaWEpwWVd4cGVtVmZjMk5sYm1Vc0lIUm9jbVZsYW5OZmJXOWtkV3hsSUdGeklIUm9jbVZsYW5OZmJXOWtkV3hsTENCemRHRnlkRjl5Wlc1a1pYSnNiMjl3SUdGeklITjBZWEowWDNKbGJtUmxjbXh2YjNBc0lHUmxiR1YwWlY5d2JHOTBjeUJoY3lCa1pXeGxkR1ZmY0d4dmRITXNJR2x1YzJWeWRGOXdiRzkwSUdGeklHbHVjMlZ5ZEY5d2JHOTBMQ0JtYVc1a1gzQnNiM1J6SUdGeklHWnBibVJmY0d4dmRITXNJR1JsYkdWMFpWOXpZMlZ1WlNCaGN5QmtaV3hsZEdWZmMyTmxibVVzSUdacGJtUmZjMk5sYm1VZ1lYTWdabWx1WkY5elkyVnVaU3dnYzJObGJtVmZZMkZqYUdVZ1lYTWdjMk5sYm1WZlkyRmphR1VzSUhCc2IzUmZZMkZqYUdVZ1lYTWdjR3h2ZEY5allXTm9aU3dnWkdWc1pYUmxYM05qWlc1bGN5QmhjeUJrWld4bGRHVmZjMk5sYm1WekxDQmpjbVZoZEdWZmMyTmxibVVnWVhNZ1kzSmxZWFJsWDNOalpXNWxMQ0JsZG1WdWRITXlkVzVwZEd4bGMzTWdZWE1nWlhabGJuUnpNblZ1YVhSc1pYTnpMQ0J2Ymw5dVpYaDBYMmx1YzJWeWRDQmhjeUJ2Ymw5dVpYaDBYMmx1YzJWeWRDQjlPd3BsZUhCdmNuUWdleUJ5Wlc1a1pYSmZjMk5sYm1VZ1lYTWdjbVZ1WkdWeVgzTmpaVzVsSUgwN0NtVjRjRzl5ZENCN0lIZG5iR1Z5Y205eUlHRnpJSGRuYkdWeWNtOXlJSDA3Q21WNGNHOXlkQ0I3SUhCcFkydGZibUYwYVhabElHRnpJSEJwWTJ0ZmJtRjBhWFpsSUgwN0NtVjRjRzl5ZENCN0lIQnBZMnRmWTJ4dmMyVnpkQ0JoY3lCd2FXTnJYMk5zYjNObGMzUWdmVHNLWlhod2IzSjBJSHNnY0dsamExOXpiM0owWldRZ1lYTWdjR2xqYTE5emIzSjBaV1FnZlRzS1pYaHdiM0owSUhzZ2NHbGphMTl1WVhScGRtVmZkWFZwWkNCaGN5QndhV05yWDI1aGRHbDJaVjkxZFdsa0lIMDdDbVY0Y0c5eWRDQjdJSEJwWTJ0ZmJtRjBhWFpsWDIxaGRISnBlQ0JoY3lCd2FXTnJYMjVoZEdsMlpWOXRZWFJ5YVhnZ2ZUc0taWGh3YjNKMElIc2djbVZuYVhOMFpYSmZjRzl3ZFhBZ1lYTWdjbVZuYVhOMFpYSmZjRzl3ZFhBZ2ZUc0tDZz09YDsKICAgICAgICAgICAgcmV0dXJuIGltcG9ydChKU1NFUlZFX0lNUE9SVFNbJ2NjNGM2YWE2YTFmMDZhMWI1MDEzYmNhMDE3MDJmMzZhMTg0YzA0Mzktd2dsbWFraWUuanMnXSk7CiAgICAgICAgfSkoKS50aGVuKFdHTCA9PiB7CiAgICB0cnkgewogICAgICAgIGNvbnN0IHJlbmRlcmVyID0gV0dMLmNyZWF0ZV9zY2VuZSgKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSI5Il0nKSwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSIxMCJdJyksIF9fbG9va3VwX2ludGVycG9sYXRlZCgnODk3MjAyNDg3MjE5NzMzNDEyJyksIF9fbG9va3VwX2ludGVycG9sYXRlZCgnODM2Njk4NDkyMjY5ODU0NjUxNCcpLCBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzE3OTQ4ODk3NTE0MjY5NDUzMzkzJyksIDYwMCwgNDUwLAogICAgICAgICAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzIzNTYxMjE0NjMwMDQ1NzU3MTUnKSwgMzAuMCwgX19sb29rdXBfaW50ZXJwb2xhdGVkKCc3MjE0NTc3MTg0OTI3MDg3MzEyJyksIF9fbG9va3VwX2ludGVycG9sYXRlZCgnNzIxNDU3NzE4NDkyNzA4NzMxMicpLCBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzcyMTQ1NzcxODQ5MjcwODczMTInKQogICAgICAgICkKICAgICAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKQogICAgICAgIGNvbnN0IGVyciA9IGdsLmdldEVycm9yKCkKICAgICAgICBpZiAoZXJyICE9IGdsLk5PX0VSUk9SKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiV2ViR0wgZXJyb3I6ICIgKyBXR0wud2dsZXJyb3IoZ2wsIGVycikpCiAgICAgICAgfQogICAgICAgIF9fbG9va3VwX2ludGVycG9sYXRlZCgnNTkwMjE4ODk0MDQ3OTA2OTkxMCcpLm5vdGlmeSh0cnVlKQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIEpTU2VydmUuQ29ubmVjdGlvbi5zZW5kX2Vycm9yKCJlcnJvciBpbml0aWFsaXppbmcgc2NlbmUiLCBlKQogICAgICAgIF9fbG9va3VwX2ludGVycG9sYXRlZCgnNTkwMjE4ODk0MDQ3OTA2OTkxMCcpLm5vdGlmeShmYWxzZSkKICAgICAgICByZXR1cm4KICAgIH0KfSkK2UEvaG9tZS9ydW5uZXIvd29yay9NYWtpZS5qbC9NYWtpZS5qbC9XR0xNYWtpZS9zcmMvdGhyZWVfcGxvdC5qbDo0Mqhtc2dfdHlwZaEyyAFma5LHLGqT2SQ0NTNiNjNhNC0wZTYxLTQ5NTItOGVlZC1jZjQzMmE0ODgxOTWAo3N1YoKncGF5bG9hZMgBHmaTgbM3MTY2MTM0MDIxOTUxMDI3OTMwxwdopjkxMjczNtm+KChub2RlKSA9PiB7CiAgICBub2RlWydvbmlucHV0J10gPSAoZXZlbnQpPT4gewogICAgX19sb29rdXBfaW50ZXJwb2xhdGVkKCc3MTY2MTM0MDIxOTUxMDI3OTMwJykubm90aWZ5KHBhcnNlSW50KGV2ZW50LnNyY0VsZW1lbnQudmFsdWUpKQp9Cn0pKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iNyJdJykpO9k8L2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL0JScERCL3NyYy93aWRnZXRzLmpsOjY2qG1zZ190eXBloTKobXNnX3R5cGWhOcgnYGuSxyxqk9kkNDUzYjYzYTQtMGU2MS00OTUyLThlZWQtY2Y0MzJhNDg4MTk1gKNzdWKCp3BheWxvYWTIJxhmk4GzNDgyODEwMzA1MDk4MzU5NzU2MIqhM5XIAf1rksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKtdW5pZm9ybV9jb2xvcpLXFwAAIEEAACBByAGQF+SqYD8V0GE+p+APP3EVXj/51sg+4M5rPy5sPj9Mxac+4GbIPtLecj/GNm0/5pvqPtenWj8D5oI+Z/AwP9itoz7t3W09dBQKP6rYTz+CcxM+brUHP6XaND93WAU9GgkaP6QrHj9UuUM/z5tQP7ShTj01GR08NyNaP4i4Tj1wgGE/wqphPtO2ZT7fmRY/C0CwPiNxHz+WhxI/bt7ePkSlLD9HQog+zlhePdpWmj4K7B0/dvRzP8w6OT/Rbv8+9JdZPmHIWD8AMPk+2pVpP8l34jwAwQI+c927PoqLNT/Tj4E+unZiPzENmjwsxUM/qJ8NPzjmfj9E1yE/T6AzP6PSUzwleSs/z51pP70uXj9+MoY+6BpEP6uExj4bcww/Csp/PzR/uT6hxFA/rXqjPULBOz93kXY/80roPh1k5T05l0M/De8nP99XaD9WG2o/zaDOPkBbEz4OtrQ+TYXvPgGMrj4Er9Y+LtEOP5MYKj9f5V0/x/qJPp3N1j5DlEA/8UpnP5PSDT/d0xM+r5ehPn3c6D6iaWSmOTE2MDUzqG1zZ190eXBloTDHmWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkkqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAABAQAAAgD+iaWSmOTE2MDE5qG1zZ190eXBloTDHUGuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkA6JpZKY5MTI3MzeobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShM6JpZKY5MTU5MjCobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShM6JpZKY5MTU5MTmobXNnX3R5cGWhMKE0lcgB/WuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2Fkkq11bmlmb3JtX2NvbG9yktcXAAAgQQAAIEHIAZAXbaMPP4MZqT63KhE/rDJ+P8pYXz/vSAo/y6tNP7rGVD/63RU+FMJoPiaxfz+jyPk+SPt5P3MR0D6+LOI+c4kkPynZWj9T3GE/FnIEPxQglT7Wa28/4aBsPr1zST+4uUw+zHpTPzI5Pj/V7XY9HK2sPu3DKD8qsCg/RpJFP2ZwCj8W2W8/uceNPjO3Vj7P2T4+Tr8PPw7pXz8cgyA/s7+iPWJ48j37c3U/umotP+2ksz6FuCQ+0q0xPg/fYz/4ByQ+uf0pP6G5Rz/Kiq0+JTcyPuToVj1Jl2Q+b6UuP0gyYj9J7tg8CKTvPTdzTz5rtGc+fnsqPzZMozpoaJ4+85emPsccHj97OAg/MjRjPWS+4z5EOC49H45IP6UkID/ssgI/GZZ9P+ptnD7MAjY/Uv31PPP4Fz/shzM/ekYtP89SZz7+TFs/syx4PSv4fT+LtkI/SZnHPfippD6iE88+2X8GPqKeBj8eYkA/AWRUP/L3Yj2jXgo+m2IPP6+6XT/+1fw+YLx/P7EFVz8OAH0/gFJZP6JpZKY5MTYwNTOobXNnX3R5cGWhMMeZa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWSSpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIBAAACAP6JpZKY5MTYwMTmobXNnX3R5cGWhMMdQa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWQEomlkpjkxMjczN6htc2dfdHlwZaEwx1FrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZKE0omlkpjkxNTkyMKhtc2dfdHlwZaEwx1FrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZKE0omlkpjkxNTkxOahtc2dfdHlwZaEwoTGVyAH9a5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWSSrXVuaWZvcm1fY29sb3KS1xcAACBBAAAgQcgBkBdQ7xg/0ANVP+9qDz9qsic/92luP2inSj+LGFI/MzQuPyZBQj8T2TI/JNQ6P8ndUj89igo/sbAIP6KIEz8PqB4/WDGLPt7U0z7GQmU/fdQTPhUJzD5gET4+ISLiPownpz5ez28/l9/NPXpjvD6RSC8/wAVXP+g5JD/HdV4/cT1QP9WITT82Lgc+LmamPQbYez9n7zU/0livPY+N0D2WZ5w98KIFP4AmHz9fW6s+JNHXPljjUT+TNow99Y0xPrTvaj9XbdE+hFAoPrCRRD8A0d8++dZCP3C2vD5uXyY/XmrMPcAobD8t/0Y+q0IkPyMvAz86AgA/yoWWPtNXoj5QiUo/WHF3P2HOiz5XKA8/el++PqQLzT74JrE++KROP26eij5RuDc+OVfvPkc/Az9QmtQ9W2oUP73pXz8Q1Fw+d9goP6hiJT+rug4/G+3RPu5CDT8g/IQ+DWjHPgoaZD6xjtU+TmPSPhSGez/StTE/7UghPjZibj+P52U+qwnZPTCn6T7Q+Q0/JBouP6opbD++wWY/omlkpjkxNjA1M6htc2dfdHlwZaEwx5lrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAIA/omlkpjkxNjAxOahtc2dfdHlwZaEwx1BrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZAGiaWSmOTEyNzM3qG1zZ190eXBloTDHUWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkoTGiaWSmOTE1OTIwqG1zZ190eXBloTDHUWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkoTGiaWSmOTE1OTE5qG1zZ190eXBloTChNZXIAf1rksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKtdW5pZm9ybV9jb2xvcpLXFwAAIEEAACBByAGQF0kXPD5X67I+lckhP1+7MT/89DQ+U6LkPlZGqT6cY54+QdQXPz9kqDuNeXw+NFguP/4E4j1uNz4/y1t7P4w80D5XJOA+heYIPnT5Hz9o/wA7QQuHPh6deT+fpXs/FCAEP/9n+j4k+Vw9QhNNP97xYT/FgXY//AZeP07eCz98jEI/b/oPP4jUPD93NV8/NycbP6JOeD+YXYw+fZ8HPzqytz4I5XU/FvpIPr01Aj+mwjI/uSKQPskzxT7od0I/rboqPghQvz0W9QA/m5oYP8Gicz+rAEE9icf+PiT2+z7+1TY+nOW9Pfz4hD4EWVU+hpGRPu6nDD97BRY/cUZJP6w9Dj94cis/NuSFPbwyWD/8EIM78hImP0ZE3D1TbR8/LL31PvevWz9Wvs091GvLPRaexj5j6A4/E7osPmLE0T3Yd1E/Lg85P1UYQT+t1l0/H9jiPpKsBz9aqRo/ranLPUewRz+HtjM/h7TOPgKdYT9A6ww/QQ0JPhuhqz6FZOc+sDzGPus7eT8GEpo+ntYUP/wPQj6iaWSmOTE2MDUzqG1zZ190eXBloTDHmWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkkqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACgQAAAgD+iaWSmOTE2MDE5qG1zZ190eXBloTDHUGuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkBaJpZKY5MTI3MzeobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShNaJpZKY5MTU5MjCobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShNaJpZKY5MTU5MTmobXNnX3R5cGWhMKEylcgB/WuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2Fkkq11bmlmb3JtX2NvbG9yktcXAAAgQQAAIEHIAZAXB4A2Pm1YLT9z8Pw+2PcDPzAQhj1pbGM8v0psPzbS7j0o3i0/dR6/PSpxaz/qVJs9l9kxP+PRdT/RQVo+y05gPw0a0z20aBI/GNUpP0nScT8eslo/W7NTPwcKYj/ElBo/yfPzPkJtZj+aVx4/46QpPcfpcz8rRPk+O/QjP0DB9z1JWWk/BTxuPq7oOz8wyFg/CJHuPXRA4j7bSIg+oSQhP9srRT7GxDk/pXLPPu3fjz4pBHQ/vSYrP7V8tj7BHn4/6y92P+jYEz9W0z8/Y5QOPoHQzD111wY/ak9GP69KBj82upg8rlE0Pk5/oz7zYMk9LRa5Pin16D3H4Gc/GvknPsJesT4mJAU/3DElPbiOiz5tsok8qdomPzChmj4hhFA/xmIlPg6PDz3QK5g+u5prP5ovEz++rQg/5kAEP27Gaj9U0XQ+8ieBPRaXJD97yyk/MPAuPykOAj4qqW4/SVI3P3c8Vj6QM3E/F0VSP4ANdT96OdQ+ZcUyP/+05j5n/tI8cE7dPf+W5z5agyQ/UD0OPqJpZKY5MTYwNTOobXNnX3R5cGWhMMeZa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWSSpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAABAAACAP6JpZKY5MTYwMTmobXNnX3R5cGWhMMdQa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWQComlkpjkxMjczN6htc2dfdHlwZaEwx1FrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZKEyomlkpjkxNTkyMKhtc2dfdHlwZaEwx1FrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZKEyomlkpjkxNTkxOahtc2dfdHlwZaEwoTaVyAH9a5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWSSrXVuaWZvcm1fY29sb3KS1xcAACBBAAAgQcgBkBeOhXg/2Y73PtZTHT4ukVQ/eU9mP+rHAT+MPf0+XzJpPviHST+dI0g+eWM6P0Z+aTpRz3A/xXROPt1OSz4XtlA/Jd8tP6+k8T6XPZ0+zuKXPmRKjT7O+mA/3Sx0P4hq+z659z0/bg1wPx8qwD2idQ8/H4FHPw+AIz+LZ0M/lLeKPn6yZT8HIUM/Z7BlPjz9ZD8//jM9bPAEP29BST+5cz8/oMYSP00FYT07r+w9OlxZP/4/3T6LFeA+FJYNPVSlNz+R3Ao/Nw+APlFrIz9WA2k/VYZDPwgqfD/80Mg9XqViP/1dYz9rRp49GBC7PleyJj9cnf0+xtJoPxmk/T5OS58+YhVZP+9iQT/owI49zHCSPswgUz9/KGY/tE27PTDiFD6wXb0+DFBLPwuINT8z9SA92pnzPhDAnj1ynvo9UCpUPxrBMz8e21U/XuwuP0JyKz/HLMM+1SPFPekrjT4m94M+raXSPrYIAj+eWUk9Y+AnP7lYAT4ezCY/US0MP3cBjj5KstY+0K8KP+9LXD7ceoQ+omlkpjkxNjA1M6htc2dfdHlwZaEwx5lrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAwEAAAIA/omlkpjkxNjAxOahtc2dfdHlwZaEwx1BrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZAaiaWSmOTEyNzM3qG1zZ190eXBloTDHUWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkoTaiaWSmOTE1OTIwqG1zZ190eXBloTDHUWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkoTaiaWSmOTE1OTE5qG1zZ190eXBloTChN5XIAf1rksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKtdW5pZm9ybV9jb2xvcpLXFwAAIEEAACBByAGQF7enrT7qeEs/1ylgP+R8CD+VTms/GCnoPnPUfT0pP7I9SuZAP398Pj26/Qg/R7oXPzrF1TxFmNs+696UPrH/eD7hrXA/NK9jP5OLmz63UDI/yGemPnZbYD/6orI+9fl2PthPNT+bArs+3R+OPg6bXj+0KVE+iVCVPsthYj+PP0U/ZY/3PubVfT6R4Oo9VkyFPp8q2z2TS8Y+2W5AP4A1wj0RDF0/AnIdPqu+ND8EJSs/y3AZPln+Az69E9Y+hKjGPdKHKT+T4VI/q93nPVgJiT0/fR8/q3D+Pu6BIT/eP30/cCBdP5rBcD8uCaM+apwgP0WrMj/oTUU+cUDPPqQaYT9HyUQ/nm0GP8GV4z7a+kU+YxnyPk31gj692AA+tvLUPEy0cD9ZJHE/DBwnP3PaPD/IYGM+Sa9kP4lpAz/14lg/n84dP6FX5z5qd0M/lFvwPqa7Xz/ejy0/qeRaPjBLNj7Ftm4/wCxQP00Nez+kJIE917D9Pt22Pz/xDjU/7UYeP/8KCD5gEG0/AWcFP000HD+iaWSmOTE2MDUzqG1zZ190eXBloTDHmWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkkqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAADgQAAAgD+iaWSmOTE2MDE5qG1zZ190eXBloTDHUGuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkB6JpZKY5MTI3MzeobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShN6JpZKY5MTU5MjCobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShN6JpZKY5MTU5MTmobXNnX3R5cGWhMKIxMJXIAf1rksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKtdW5pZm9ybV9jb2xvcpLXFwAAIEEAACBByAGQF5mUyz1EcZU+xIBTPuZSOT/21JI+83x4P3UcAD/d11Q/8tteP3KgUT+vFtM8QOzkPZyvtj4JUF8/puxePpMhTz8mPUM/U0U/PxYqzj7r7S4/BG1GPwAbGz8jcPA+zEgNPSZVZT82PS4+mGukPk13rD6lICg/pci6PsgXOD9UpOc+BlmVPtCo9D6xdoY+QhdgP0dfAz/5Abo+GQIPP7IKWz/H0yw/5n31PnFmvT65hXU/8WBwPRvRHz6lZXk/1MO1Po4oij1vtCQ/Y5oSP5OdGD8YcPU+nWTWPnPLXT/fviM9hOGCPevf+D5y5UQ/kxUDPySADj0f+3Y/g/xzPzopgT4Vbb49aH5YP0aWUT7BbKw+1qYQP633OD9dATk7ogIGP1/YWD8ZFzU/xbX5PqrENT+CLLo+2uoPP/bNKz/0okw/6i3mPAWmZj63H4o++B54PT3q/z4Q2oA+4PX2PtcaxT0BrC0/HJAWPyFpHD+8hd8+PyETPzj8BT8yk+48yQfrPMh74j4rtVw/skpvP5cxHT+iaWSmOTE2MDUzqG1zZ190eXBloTDHmWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkkqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+iaWSmOTE2MDE5qG1zZ190eXBloTDHUGuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkCqJpZKY5MTI3MzeobXNnX3R5cGWhMMdSa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWSiMTCiaWSmOTE1OTIwqG1zZ190eXBloTDHUmuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkojEwomlkpjkxNTkxOahtc2dfdHlwZaEwoTmVyAH9a5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWSSrXVuaWZvcm1fY29sb3KS1xcAACBBAAAgQcgBkBf/UEE/TRQyPyeyMz8ePjU/W/ArPxS6OT9B1Dk/T/vlPW/7yj5F9r4+/w9WP5WgQj80dQw+WdB8P2qbTz7TriE+BmRpPob4aj4G6RE/i4ecO8ROHD/NQew+FA5CP5xF0T5bDD4+v9t2PysiJD5NKWs/x/qEPrD6SD/dJW0/Fj0zPo2Hbz9g3j0/X/uVPnb3JD9I3RM/5S1pP9DoEz3q/bE+Jl9wP8l3Xz7iaYI+Z7KHPkCfbTyfrFs9B/u4PBhhKT8IyFk/UckjPhCjXT5Chzw/tOIDP7JEkz6HO2o/PS1YPg+zaz+mi0k+mUV0P3TU4T5a11Y/rHBSP+zrbz95vTg+m9YkP8zobz0sq7k+mKK6PQp6Qj9JOXI+19sFPy5uXj4MfEI/1YdoPxyNRz7/uwA/NAdnP8+dCz8p21Y/oJEoPpImdj8hKnE/N5M7P0HWVz+cTs8+76FEPzRydD/N/3E/6xRLPiorSz9CZng/kOu5Pow2eD+Py2s/VQVxP/g8Yz+qyCo/gJECP4n5dj8KKzU+omlkpjkxNjA1M6htc2dfdHlwZaEwx5lrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAEEEAAIA/omlkpjkxNjAxOahtc2dfdHlwZaEwx1BrksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZAmiaWSmOTEyNzM3qG1zZ190eXBloTDHUWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkoTmiaWSmOTE1OTIwqG1zZ190eXBloTDHUWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkoTmiaWSmOTE1OTE5qG1zZ190eXBloTChOJXIAf1rksctapPZJGE4Mzc3ZTA2LTZlMmEtNDViZC05N2QwLWZjN2UzYmE0MGFjZoCkcm9vdIOncGF5bG9hZJKtdW5pZm9ybV9jb2xvcpLXFwAAIEEAACBByAGQF2JuDD8/Q2c/Q0eQPkmdujvOjMA+my06PYcmAj1on6w+cQnmPlJD0z4xE2U+vqJ3PseTwD69JJM81DjdPo6oJj9/PeM+vbwGPxyUjT0/f+Y+MG8pPwhXoz7gij89jVvEPjSCWD8A/nU/9CgyP6gpVz4Z860+yXNpPzkSyj71yTI/EFHRPu0soz22bsg+vM1gPxvyMT5wAlA+d5wVP4yAYT+HNH8/xQz4PpCGcT7LSk09wYeKPrpOmD5Ifbw9vV9oP/BWCD3kCDI/8XxOP332tz6Dy1g/IumqPnWhcTk3Tj0/7INuP1w4gz5DkyA/vWAePw1vQj/fa0Q/u7XZPX7bZT2x3VM+UhkQP9JWRT+erU4/TW0rP/dCQz84E5c9wktGPyRalz4ZdFQ/LEokP9qq2T5ifEA/3VOePX4GET90J8A+aAO3PkbpWz7TznU+nvdwPYlaLj+E0b8+pDPxPvcmeT/GIys/k2MlPbsjvjyULVw+O4ZmPyD/gT0TwEA9j3oxP35xrj7ZkwU/kgJhPzhJAz+iaWSmOTE2MDUzqG1zZ190eXBloTDHmWuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkkqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAQQAAgD+iaWSmOTE2MDE5qG1zZ190eXBloTDHUGuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290g6dwYXlsb2FkCKJpZKY5MTI3MzeobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShOKJpZKY5MTU5MjCobXNnX3R5cGWhMMdRa5LHLWqT2SRhODM3N2UwNi02ZTJhLTQ1YmQtOTdkMC1mYzdlM2JhNDBhY2aApHJvb3SDp3BheWxvYWShOKJpZKY5MTU5MTmobXNnX3R5cGWhMNoCr0pTU2VydmUuZmV0Y2hfYmluYXJ5KCdkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsa3Njc2FwUFpKRFExTTJJMk0yRTBMVEJsTmpFdE5EazFNaTA0WldWa0xXTm1ORE15WVRRNE9ERTVOWUNqYzNWaWtjY0hhS1k1TVRJM016WT0nKS50aGVuKGJpbmFyeSA9PiB7CiAgICBjb25zdCBzdGF0ZW1hcCA9IF9fbG9va3VwX2ludGVycG9sYXRlZCgnNDgyODEwMzA1MDk4MzU5NzU2MCcpCiAgICBjb25zb2xlLmxvZyhzdGF0ZW1hcCkKICAgIGNvbnN0IG9ic2VydmFibGVzID0gSlNTZXJ2ZS5kZWNvZGVfYmluYXJ5KGJpbmFyeSwgZmFsc2UpOwogICAgSlNTZXJ2ZS5vbmFueShvYnNlcnZhYmxlcywgKHN0YXRlcykgPT4gewogICAgICAgIGNvbnNvbGUubG9nKHN0YXRlcykKICAgICAgICAvLyBtZXNzYWdlcyB0byBzZW5kIGZvciB0aGlzIHN0YXRlIG9mIHRoYXQgb2JzZXJ2YWJsZQogICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gc3RhdGVtYXBbc3RhdGVzXQogICAgICAgIC8vIG5vdCBhbGwgc3RhdGVzIHRyaWdnZXIgZXZlbnRzCiAgICAgICAgLy8gc28gc29tZSBzdGF0ZXMgd29uJ3QgaGF2ZSBhbnkgbWVzc2FnZXMgcmVjb3JkZWQKICAgICAgICBpZiAobWVzc2FnZXMpewogICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKEpTU2VydmUucHJvY2Vzc19tZXNzYWdlKQogICAgICAgIH0KICAgIH0pCn0pCtk8L2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL0JScERCL3NyYy9leHBvcnQuamw6MTI2qG1zZ190eXBloTLHRmuSxy1qk9kkYTgzNzdlMDYtNmUyYS00NWJkLTk3ZDAtZmM3ZTNiYTQwYWNmgKRyb290gqdwYXlsb2FkkKhtc2dfdHlwZaE5qG1zZ190eXBloTk=').then(msgs=> JSServe.init_session('453b63a4-0e61-4952-8eed-cf432a488195', msgs, 'sub'));
    })
" type="module"></script>
    <div data-jscall-id="6">z-index: 
      <input step="1" max="10" min="1" data-jscall-id="7" value="1" oninput="" type="range" />
      <span data-jscall-id="8">1</span>
    </div>
    <div style="width: 100%; height: 100%" data-jscall-id="9">
      <canvas style="display: block" data-jscall-id="10" tabindex="0"></canvas>
    </div>
  </div>
</div>~~~
